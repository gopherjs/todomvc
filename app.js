"use strict";
(function($topLevelThis) {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else { /* others (e.g. Nashorn) */
  $global = $topLevelThis;
}

if ($global === undefined || $global.Array === undefined) {
  throw new Error("no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $reflect, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};
var $flushConsole = function() {};

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length);
  for (var i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(method) {
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length);
  for (var i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(null, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, j = 0;
  for (var i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "";
  for (var i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length);
  for (var i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length);
  $internalCopy(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copy = function(dst, src, type) {
  switch (type.kind) {
  case $kindArray:
    $internalCopy(dst, src, 0, 0, src.length, type.elem);
    break;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      switch (f.type.kind) {
      case $kindArray:
      case $kindStruct:
        $copy(dst[f.prop], src[f.prop], f.type);
        continue;
      default:
        dst[f.prop] = src[f.prop];
        continue;
      }
    }
    break;
  }
};

var $internalCopy = function(dst, src, dstOffset, srcOffset, n, elem) {
  if (n === 0 || (dst === src && dstOffset === srcOffset)) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case $kindArray:
  case $kindStruct:
    if (dst === src && dstOffset > srcOffset) {
      for (var i = n - 1; i >= 0; i--) {
        $copy(dst[dstOffset + i], src[srcOffset + i], elem);
      }
      return;
    }
    for (var i = 0; i < n; i++) {
      $copy(dst[dstOffset + i], src[srcOffset + i], elem);
    }
    return;
  }

  if (dst === src && dstOffset > srcOffset) {
    for (var i = n - 1; i >= 0; i--) {
      dst[dstOffset + i] = src[srcOffset + i];
    }
    return;
  }
  for (var i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  $copy(clone, src, type);
  return clone;
};

var $pointerOfStructConversion = function(obj, type) {
  if(obj.$proxies === undefined) {
    obj.$proxies = {};
    obj.$proxies[obj.constructor.string] = obj;
  }
  var proxy = obj.$proxies[type.string];
  if (proxy === undefined) {
    var properties = {};
    for (var i = 0; i < type.elem.fields.length; i++) {
      (function(fieldProp) {
        properties[fieldProp] = {
          get: function() { return obj[fieldProp]; },
          set: function(value) { obj[fieldProp] = value; },
        };
      })(type.elem.fields[i].prop);
    }
    proxy = Object.create(type.prototype, properties);
    proxy.$val = proxy;
    obj.$proxies[type.string] = proxy;
    proxy.$proxies = obj.$proxies;
  }
  return proxy;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero;
      for (var i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $internalCopy(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  switch (type.kind) {
  case $kindFloat32:
    return $float32IsEqual(a, b);
  case $kindComplex64:
    return $float32IsEqual(a.$real, b.$real) && $float32IsEqual(a.$imag, b.$imag);
  case $kindComplex128:
    return a.$real === b.$real && a.$imag === b.$imag;
  case $kindInt64:
  case $kindUint64:
    return a.$high === b.$high && a.$low === b.$low;
  case $kindPtr:
    if (a.constructor.elem) {
      return a === b;
    }
    return $pointerIsEqual(a, b);
  case $kindArray:
    if (a.length != b.length) {
      return false;
    }
    for (var i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case $kindStruct:
    for (var i = 0; i < type.fields.length; i++) {
      var f = type.fields[i];
      if (!$equal(a[f.prop], b[f.prop], f.type)) {
        return false;
      }
    }
    return true;
  case $kindInterface:
    if (type === $js.Object || type === $js.Any) {
      return a === b;
    }
    return $interfaceIsEqual(a, b);
  default:
    return a === b;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === $ifaceNil || b === $ifaceNil) {
    return a === b;
  }
  if (a.constructor !== b.constructor) {
    return false;
  }
  if (!a.constructor.comparable) {
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  }
  return $equal(a.$val, b.$val, a.constructor);
};

var $float32IsEqual = function(a, b) {
  if (a === b) {
    return true;
  }
  if (a === 1/0 || b === 1/0 || a === -1/0 || b === -1/0 || a !== a || b !== b) {
    return false;
  }
  var math = $packages["math"];
  return math !== undefined && math.Float32bits(a) === math.Float32bits(b);
};

var $pointerIsEqual = function(a, b) {
  if (a === b) {
    return true;
  }
  if (a.$get === $throwNilPointerError || b.$get === $throwNilPointerError) {
    return a.$get === $throwNilPointerError && b.$get === $throwNilPointerError;
  }
  var va = a.$get();
  var vb = b.$get();
  if (va !== vb) {
    return false;
  }
  var dummy = va + 1;
  a.$set(dummy);
  var equal = b.$get() === dummy;
  a.$set(va);
  return equal;
};

var $kindBool = 1;
var $kindInt = 2;
var $kindInt8 = 3;
var $kindInt16 = 4;
var $kindInt32 = 5;
var $kindInt64 = 6;
var $kindUint = 7;
var $kindUint8 = 8;
var $kindUint16 = 9;
var $kindUint32 = 10;
var $kindUint64 = 11;
var $kindUintptr = 12;
var $kindFloat32 = 13;
var $kindFloat64 = 14;
var $kindComplex64 = 15;
var $kindComplex128 = 16;
var $kindArray = 17;
var $kindChan = 18;
var $kindFunc = 19;
var $kindInterface = 20;
var $kindMap = 21;
var $kindPtr = 22;
var $kindSlice = 23;
var $kindString = 24;
var $kindStruct = 25;
var $kindUnsafePointer = 26;

var $newType = function(size, kind, string, name, pkgPath, constructor) {
  var typ;
  switch(kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindString:
  case $kindUnsafePointer:
    typ = function(v) { this.$val = v; };
    typ.prototype.$key = function() { return string + "$" + this.$val; };
    break;

  case $kindFloat32:
  case $kindFloat64:
    typ = function(v) { this.$val = v; };
    typ.prototype.$key = function() { return string + "$" + $floatKey(this.$val); };
    break;

  case $kindInt64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$high + "$" + this.$low; };
    break;

  case $kindUint64:
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$high + "$" + this.$low; };
    break;

  case $kindComplex64:
  case $kindComplex128:
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$real + "$" + this.$imag; };
    break;

  case $kindArray:
    typ = function(v) { this.$val = v; };
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", function(array) {
      this.$get = function() { return array; };
      this.$set = function(v) { $copy(this, v, typ); };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.comparable = elem.comparable;
      typ.prototype.$key = function() {
        return string + "$" + Array.prototype.join.call($mapArray(this.$val, function(e) {
          var key = e.$key ? e.$key() : String(e);
          return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.ptr.init(typ);
      Object.defineProperty(typ.ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case $kindChan:
    typ = function(capacity) {
      this.$val = this;
      this.$capacity = capacity;
      this.$buffer = [];
      this.$sendQueue = [];
      this.$recvQueue = [];
      this.$closed = false;
    };
    typ.prototype.$key = function() {
      if (this.$id === undefined) {
        $idCounter++;
        this.$id = $idCounter;
      }
      return String(this.$id);
    };
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
      typ.nil = new typ(0);
      typ.nil.$sendQueue = typ.nil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };
    };
    break;

  case $kindFunc:
    typ = function(v) { this.$val = v; };
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.comparable = false;
    };
    break;

  case $kindInterface:
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.init = function(methods) {
      typ.methods = methods;
    };
    break;

  case $kindMap:
    typ = function(v) { this.$val = v; };
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.comparable = false;
    };
    break;

  case $kindPtr:
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.prototype.$key = function() {
      if (this.$id === undefined) {
        $idCounter++;
        this.$id = $idCounter;
      }
      return String(this.$id);
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
    };
    break;

  case $kindSlice:
    var nativeArray;
    typ = function(array) {
      if (array.constructor !== nativeArray) {
        array = new nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.make = function(length, capacity) {
      capacity = capacity || length;
      var array = new nativeArray(capacity);
      if (nativeArray === Array) {
        for (var i = 0; i < capacity; i++) {
          array[i] = typ.elem.zero();
        }
      }
      var slice = new typ(array);
      slice.$length = length;
      return slice;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      typ.comparable = false;
      nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
    };
    break;

  case $kindStruct:
    typ = function(v) { this.$val = v; };
    typ.ptr = $newType(4, $kindPtr, "*" + string, "", "", constructor);
    typ.ptr.elem = typ;
    typ.ptr.prototype.$get = function() { return this; };
    typ.ptr.prototype.$set = function(v) { $copy(this, v, typ); };
    typ.init = function(fields) {
      typ.fields = fields;
      fields.forEach(function(f) {
        if (!f.type.comparable) {
          typ.comparable = false;
        }
      });
      typ.prototype.$key = function() {
        var val = this.$val;
        return string + "$" + $mapArray(fields, function(f) {
          var e = val[f.prop];
          var key = e.$key ? e.$key() : String(e);
          return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      /* nil value */
      var properties = {};
      fields.forEach(function(f) {
        properties[f.prop] = { get: $throwNilPointerError, set: $throwNilPointerError };
      });
      typ.ptr.nil = Object.create(constructor.prototype, properties);
      typ.ptr.nil.$val = typ.ptr.nil;
      /* methods for embedded fields */
      var forwardMethod = function(target, m, f) {
        if (target.prototype[m.prop] !== undefined) { return; }
        target.prototype[m.prop] = function() {
          var v = this.$val[f.prop];
          if (v.$val === undefined) {
            v = new f.type(v);
          }
          return v[m.prop].apply(v, arguments);
        };
      };
      fields.forEach(function(f) {
        if (f.name === "") {
          f.type.methods.forEach(function(m) {
            forwardMethod(typ, m, f);
            forwardMethod(typ.ptr, m, f);
          });
          $ptrType(f.type).methods.forEach(function(m) {
            forwardMethod(typ.ptr, m, f);
          });
        }
      });
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch (kind) {
  case $kindBool:
  case $kindMap:
    typ.zero = function() { return false; };
    break;

  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8 :
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindUnsafePointer:
  case $kindFloat32:
  case $kindFloat64:
    typ.zero = function() { return 0; };
    break;

  case $kindString:
    typ.zero = function() { return ""; };
    break;

  case $kindInt64:
  case $kindUint64:
  case $kindComplex64:
  case $kindComplex128:
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case $kindChan:
  case $kindPtr:
  case $kindSlice:
    typ.zero = function() { return typ.nil; };
    break;

  case $kindFunc:
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case $kindInterface:
    typ.zero = function() { return $ifaceNil; };
    break;

  case $kindArray:
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len);
      for (var i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case $kindStruct:
    typ.zero = function() { return new typ.ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.kind = kind;
  typ.string = string;
  typ.typeName = name;
  typ.pkgPath = pkgPath;
  typ.methods = [];
  typ.comparable = true;
  var rt = null;
  typ.reflectType = function() {
    if (rt === null) {
      rt = new $reflect.rtype.ptr(size, 0, 0, 0, 0, kind, undefined, undefined, $newStringPtr(string), undefined, undefined);
      rt.jsType = typ;

      var methods = [];
      if (typ.methods !== undefined) {
        typ.methods.forEach(function(m) {
          var t = m.type;
          methods.push(new $reflect.method.ptr($newStringPtr(m.name), $newStringPtr(m.pkg), t.reflectType(), $funcType([typ].concat(t.params), t.results, t.variadic).reflectType(), undefined, undefined));
        });
      }
      if (name !== "" || methods.length !== 0) {
        var methodSlice = ($sliceType($ptrType($reflect.method.ptr)));
        rt.uncommonType = new $reflect.uncommonType.ptr($newStringPtr(name), $newStringPtr(pkgPath), new methodSlice(methods));
        rt.uncommonType.jsType = typ;
      }

      switch (typ.kind) {
      case $kindArray:
        rt.arrayType = new $reflect.arrayType.ptr(rt, typ.elem.reflectType(), undefined, typ.len);
        break;
      case $kindChan:
        rt.chanType = new $reflect.chanType.ptr(rt, typ.elem.reflectType(), typ.sendOnly ? $reflect.SendDir : (typ.recvOnly ? $reflect.RecvDir : $reflect.BothDir));
        break;
      case $kindFunc:
        var typeSlice = ($sliceType($ptrType($reflect.rtype.ptr)));
        rt.funcType = new $reflect.funcType.ptr(rt, typ.variadic, new typeSlice($mapArray(typ.params, function(p) { return p.reflectType(); })), new typeSlice($mapArray(typ.results, function(p) { return p.reflectType(); })));
        break;
      case $kindInterface:
        var imethods = $mapArray(typ.methods, function(m) {
          return new $reflect.imethod.ptr($newStringPtr(m.name), $newStringPtr(m.pkg), m.type.reflectType());
        });
        var methodSlice = ($sliceType($ptrType($reflect.imethod.ptr)));
        rt.interfaceType = new $reflect.interfaceType.ptr(rt, new methodSlice(imethods));
        break;
      case $kindMap:
        rt.mapType = new $reflect.mapType.ptr(rt, typ.key.reflectType(), typ.elem.reflectType(), undefined, undefined);
        break;
      case $kindPtr:
        rt.ptrType = new $reflect.ptrType.ptr(rt, typ.elem.reflectType());
        break;
      case $kindSlice:
        rt.sliceType = new $reflect.sliceType.ptr(rt, typ.elem.reflectType());
        break;
      case $kindStruct:
        var reflectFields = new Array(typ.fields.length);
        for (var i = 0; i < typ.fields.length; i++) {
          var f = typ.fields[i];
          reflectFields[i] = new $reflect.structField.ptr($newStringPtr(f.name), $newStringPtr(f.pkg), f.type.reflectType(), $newStringPtr(f.tag), i);
        }
        rt.structType = new $reflect.structType.ptr(rt, new ($sliceType($reflect.structField.ptr))(reflectFields));
        break;
      }
    }
    return rt;
  };
  return typ;
};

var $Bool          = $newType( 1, $kindBool,          "bool",           "bool",       "", null);
var $Int           = $newType( 4, $kindInt,           "int",            "int",        "", null);
var $Int8          = $newType( 1, $kindInt8,          "int8",           "int8",       "", null);
var $Int16         = $newType( 2, $kindInt16,         "int16",          "int16",      "", null);
var $Int32         = $newType( 4, $kindInt32,         "int32",          "int32",      "", null);
var $Int64         = $newType( 8, $kindInt64,         "int64",          "int64",      "", null);
var $Uint          = $newType( 4, $kindUint,          "uint",           "uint",       "", null);
var $Uint8         = $newType( 1, $kindUint8,         "uint8",          "uint8",      "", null);
var $Uint16        = $newType( 2, $kindUint16,        "uint16",         "uint16",     "", null);
var $Uint32        = $newType( 4, $kindUint32,        "uint32",         "uint32",     "", null);
var $Uint64        = $newType( 8, $kindUint64,        "uint64",         "uint64",     "", null);
var $Uintptr       = $newType( 4, $kindUintptr,       "uintptr",        "uintptr",    "", null);
var $Float32       = $newType( 4, $kindFloat32,       "float32",        "float32",    "", null);
var $Float64       = $newType( 8, $kindFloat64,       "float64",        "float64",    "", null);
var $Complex64     = $newType( 8, $kindComplex64,     "complex64",      "complex64",  "", null);
var $Complex128    = $newType(16, $kindComplex128,    "complex128",     "complex128", "", null);
var $String        = $newType( 8, $kindString,        "string",         "string",     "", null);
var $UnsafePointer = $newType( 4, $kindUnsafePointer, "unsafe.Pointer", "Pointer",    "", null);

var $anonTypeInits = [];
var $addAnonTypeInit = function(f) {
  if ($anonTypeInits === null) {
    f();
    return;
  }
  $anonTypeInits.push(f);
};
var $initAnonTypes = function() {
  $anonTypeInits.forEach(function(f) { f(); });
  $anonTypeInits = null;
};

var $nativeArray = function(elemKind) {
  switch (elemKind) {
  case $kindInt:
    return Int32Array;
  case $kindInt8:
    return Int8Array;
  case $kindInt16:
    return Int16Array;
  case $kindInt32:
    return Int32Array;
  case $kindUint:
    return Uint32Array;
  case $kindUint8:
    return Uint8Array;
  case $kindUint16:
    return Uint16Array;
  case $kindUint32:
    return Uint32Array;
  case $kindUintptr:
    return Uint32Array;
  case $kindFloat32:
    return Float32Array;
  case $kindFloat64:
    return Float64Array;
  default:
    return Array;
  }
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var string = "[" + len + "]" + elem.string;
  var typ = $arrayTypes[string];
  if (typ === undefined) {
    typ = $newType(12, $kindArray, string, "", "", null);
    $arrayTypes[string] = typ;
    $addAnonTypeInit(function() { typ.init(elem, len); });
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, $kindChan, string, "", "", null);
    elem[field] = typ;
    $addAnonTypeInit(function() { typ.init(elem, sendOnly, recvOnly); });
  }
  return typ;
};

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var paramTypes = $mapArray(params, function(p) { return p.string; });
  if (variadic) {
    paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
  }
  var string = "func(" + paramTypes.join(", ") + ")";
  if (results.length === 1) {
    string += " " + results[0].string;
  } else if (results.length > 1) {
    string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
  }
  var typ = $funcTypes[string];
  if (typ === undefined) {
    typ = $newType(4, $kindFunc, string, "", "", null);
    $funcTypes[string] = typ;
    $addAnonTypeInit(function() { typ.init(params, results, variadic); });
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var string = "interface {}";
  if (methods.length !== 0) {
    string = "interface { " + $mapArray(methods, function(m) {
      return (m.pkg !== "" ? m.pkg + "." : "") + m.name + m.type.string.substr(4);
    }).join("; ") + " }";
  }
  var typ = $interfaceTypes[string];
  if (typ === undefined) {
    typ = $newType(8, $kindInterface, string, "", "", null);
    $interfaceTypes[string] = typ;
    $addAnonTypeInit(function() { typ.init(methods); });
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = { $key: function() { return "nil"; } };
var $error = $newType(8, $kindInterface, "error", "error", "", null);
$error.init([{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}]);

var $Map = function() {};
(function() {
  var names = Object.getOwnPropertyNames(Object.prototype);
  for (var i = 0; i < names.length; i++) {
    $Map.prototype[names[i]] = undefined;
  }
})();
var $mapTypes = {};
var $mapType = function(key, elem) {
  var string = "map[" + key.string + "]" + elem.string;
  var typ = $mapTypes[string];
  if (typ === undefined) {
    typ = $newType(4, $kindMap, string, "", "", null);
    $mapTypes[string] = typ;
    $addAnonTypeInit(function() { typ.init(key, elem); });
  }
  return typ;
};


var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $ptrType = function(elem) {
  var typ = elem.ptr;
  if (typ === undefined) {
    typ = $newType(4, $kindPtr, "*" + elem.string, "", "", null);
    elem.ptr = typ;
    $addAnonTypeInit(function() { typ.init(elem); });
  }
  return typ;
};

var $stringPtrMap = new $Map();
var $newStringPtr = function(str) {
  if (str === undefined || str === "") {
    return $ptrType($String).nil;
  }
  var ptr = $stringPtrMap[str];
  if (ptr === undefined) {
    ptr = new ($ptrType($String))(function() { return str; }, function(v) { str = v; });
    $stringPtrMap[str] = ptr;
  }
  return ptr;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.elem.kind === $kindStruct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $sliceType = function(elem) {
  var typ = elem.Slice;
  if (typ === undefined) {
    typ = $newType(12, $kindSlice, "[]" + elem.string, "", "", null);
    elem.Slice = typ;
    $addAnonTypeInit(function() { typ.init(elem); });
  }
  return typ;
};

var $structTypes = {};
var $structType = function(fields) {
  var string = "struct { " + $mapArray(fields, function(f) {
    return f.name + " " + f.type.string + (f.tag !== "" ? (" \"" + f.tag.replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
  }).join("; ") + " }";
  if (fields.length === 0) {
    string = "struct {}";
  }
  var typ = $structTypes[string];
  if (typ === undefined) {
    typ = $newType(0, $kindStruct, string, "", "", function() {
      this.$val = this;
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        var arg = arguments[i];
        this[f.prop] = arg !== undefined ? arg : f.type.zero();
      }
    });
    $structTypes[string] = typ;
    $anonTypeInits.push(function() {
      /* collect methods for anonymous fields */
      for (var i = 0; i < fields.length; i++) {
        var f = fields[i];
        if (f.name === "") {
          f.type.methods.forEach(function(m) {
            typ.methods.push(m);
            typ.ptr.methods.push(m);
          });
          $ptrType(f.type).methods.forEach(function(m) {
            typ.ptr.methods.push(m);
          });
        }
      };
      typ.init(fields);
    });
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === $kindInterface), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethods = value.constructor.methods;
      var typeMethods = type.methods;
      for (var i = 0; i < typeMethods.length; i++) {
        var tm = typeMethods[i];
        var found = false;
        for (var j = 0; j < valueMethods.length; j++) {
          var vm = valueMethods[j];
          if (vm.name === tm.name && vm.pkg === tm.pkg && vm.type === tm.type) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm.name;
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  return returnTuple ? [value, true] : value;
};

var $coerceFloat32 = function(f) {
  var math = $packages["math"];
  if (math === undefined) {
    return f;
  }
  return math.Float32frombits(math.Float32bits(f));
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (var i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (var i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (var i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === 1/0 || n.$real === -1/0 || n.$imag === 1/0 || n.$imag === -1/0;
  var dinf = d.$real === 1/0 || d.$real === -1/0 || d.$imag === 1/0 || d.$imag === -1/0;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(0/0, 0/0);
  }
  if (ninf && !dinf) {
    return new n.constructor(1/0, 1/0);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(0/0, 0/0);
    }
    return new n.constructor(1/0, 1/0);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $deferFrames = [], $skippedDeferFrames = 0, $jumpToDefer = false, $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr) {
  if ($skippedDeferFrames !== 0) {
    $skippedDeferFrames--;
    throw jsErr;
  }
  if ($jumpToDefer) {
    $jumpToDefer = false;
    throw jsErr;
  }
  if (jsErr) {
    var newErr = null;
    try {
      $deferFrames.push(deferred);
      $panic(new $js.Error.ptr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $deferFrames.pop();
    $callDeferred(deferred, newErr);
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  var call, localSkippedDeferFrames = 0;
  try {
    while (true) {
      if (deferred === null) {
        deferred = $deferFrames[$deferFrames.length - 1 - localSkippedDeferFrames];
        if (deferred === undefined) {
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          var e = new Error(msg);
          if (localPanicValue.Stack !== undefined) {
            e.stack = localPanicValue.Stack();
            e.stack = msg + e.stack.substr(e.stack.indexOf("\n"));
          }
          throw e;
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        if (localPanicValue !== undefined) {
          localSkippedDeferFrames++;
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(undefined, call[1]);
      if (r && r.$blocking) {
        deferred.push([r, []]);
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    $skippedDeferFrames += localSkippedDeferFrames;
    if ($curGoroutine.asleep) {
      deferred.push(call);
      $jumpToDefer = true;
    }
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $throw = function(err) { throw err; };
var $throwRuntimeError; /* set by package "runtime" */

var $BLOCKING = new Object();
var $nonblockingCall = function() {
  $panic(new $packages["runtime"].NotSupportedError.ptr("non-blocking call to blocking function, see https://github.com/gopherjs/gopherjs#goroutines"));
};

var $dummyGoroutine = { asleep: false, exit: false, panicStack: [] };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  args.push($BLOCKING);
  var goroutine = function() {
    var rescheduled = false;
    try {
      $curGoroutine = goroutine;
      $skippedDeferFrames = 0;
      $jumpToDefer = false;
      var r = fun.apply(undefined, args);
      if (r && r.$blocking) {
        fun = r;
        args = [];
        $schedule(goroutine, direct);
        rescheduled = true;
        return;
      }
      goroutine.exit = true;
    } catch (err) {
      if (!$curGoroutine.asleep) {
        goroutine.exit = true;
        throw err;
      }
    } finally {
      $curGoroutine = $dummyGoroutine;
      if (goroutine.exit && !rescheduled) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        goroutine.asleep = true;
      }
      if (goroutine.asleep && !rescheduled) {
        $awakeGoroutines--;
        if ($awakeGoroutines === 0 && $totalGoroutines !== 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
        }
      }
    }
  };
  goroutine.asleep = false;
  goroutine.exit = false;
  goroutine.panicStack = [];
  $schedule(goroutine, direct);
};

var $scheduled = [], $schedulerLoopActive = false;
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerLoopActive) {
    $schedulerLoopActive = true;
    setTimeout(function() {
      while (true) {
        var r = $scheduled.shift();
        if (r === undefined) {
          $schedulerLoopActive = false;
          break;
        }
        r();
      };
    }, 0);
  }
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  chan.$sendQueue.push(function() {
    $schedule(thisGoroutine);
    return value;
  });
  var blocked = false;
  var f = function() {
    if (blocked) {
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      return;
    };
    blocked = true;
    $curGoroutine.asleep = true;
    throw null;
  };
  f.$blocking = true;
  return f;
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend());
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.constructor.elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine, value;
  var queueEntry = function(v) {
    value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  var blocked = false;
  var f = function() {
    if (blocked) {
      return value;
    };
    blocked = true;
    $curGoroutine.asleep = true;
    throw null;
  };
  f.$blocking = true;
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(); /* will panic because of closed channel */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.constructor.elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [];
  var selection = -1;
  for (var i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var removeFromQueues = function() {
    for (var i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (var i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  var blocked = false;
  var f = function() {
    if (blocked) {
      return selection;
    };
    blocked = true;
    $curGoroutine.asleep = true;
    throw null;
  };
  f.$blocking = true;
  return f;
};

var $js;

var $needsExternalization = function(t) {
  switch (t.kind) {
    case $kindBool:
    case $kindInt:
    case $kindInt8:
    case $kindInt16:
    case $kindInt32:
    case $kindUint:
    case $kindUint8:
    case $kindUint16:
    case $kindUint32:
    case $kindUintptr:
    case $kindFloat32:
    case $kindFloat64:
      return false;
    case $kindInterface:
      return t !== $js.Object;
    default:
      return true;
  }
};

var $externalize = function(v, t) {
  switch (t.kind) {
  case $kindBool:
  case $kindInt:
  case $kindInt8:
  case $kindInt16:
  case $kindInt32:
  case $kindUint:
  case $kindUint8:
  case $kindUint16:
  case $kindUint32:
  case $kindUintptr:
  case $kindFloat32:
  case $kindFloat64:
    return v;
  case $kindInt64:
  case $kindUint64:
    return $flatten64(v);
  case $kindArray:
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case $kindFunc:
    if (v === $throwNilPointerError) {
      return null;
    }
    if (v.$externalizeWrapper === undefined) {
      $checkForDeadlock = false;
      var convert = false;
      for (var i = 0; i < t.params.length; i++) {
        convert = convert || (t.params[i] !== $js.Object);
      }
      for (var i = 0; i < t.results.length; i++) {
        convert = convert || $needsExternalization(t.results[i]);
      }
      v.$externalizeWrapper = v;
      if (convert) {
        v.$externalizeWrapper = function() {
          var args = [];
          for (var i = 0; i < t.params.length; i++) {
            if (t.variadic && i === t.params.length - 1) {
              var vt = t.params[i].elem, varargs = [];
              for (var j = i; j < arguments.length; j++) {
                varargs.push($internalize(arguments[j], vt));
              }
              args.push(new (t.params[i])(varargs));
              break;
            }
            args.push($internalize(arguments[i], t.params[i]));
          }
          var result = v.apply(this, args);
          switch (t.results.length) {
          case 0:
            return;
          case 1:
            return $externalize(result, t.results[0]);
          default:
            for (var i = 0; i < t.results.length; i++) {
              result[i] = $externalize(result[i], t.results[i]);
            }
            return result;
          }
        };
      }
    }
    return v.$externalizeWrapper;
  case $kindInterface:
    if (v === $ifaceNil) {
      return null;
    }
    if (t === $js.Object || (t === $js.Any && v.constructor.kind === undefined)) {
      return v;
    }
    return $externalize(v.$val, v.constructor);
  case $kindMap:
    var m = {};
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case $kindPtr:
    return $externalize(v.$get(), t.elem);
  case $kindSlice:
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case $kindString:
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "", r;
    for (var i = 0; i < v.length; i += r[1]) {
      r = $decodeRune(v, i);
      s += String.fromCharCode(r[0]);
    }
    return s;
  case $kindStruct:
    var timePkg = $packages["time"];
    if (timePkg && v.constructor === timePkg.Time.ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }

    var searchJsObject = function(v, t) {
      if (t === $js.Object) {
        return v;
      }
      if (t.kind === $kindPtr) {
        var o = searchJsObject(v.$get(), t.elem);
        if (o !== undefined) {
          return o;
        }
      }
      if (t.kind === $kindStruct) {
        for (var i = 0; i < t.fields.length; i++) {
          var f = t.fields[i];
          var o = searchJsObject(v[f.prop], f.type);
          if (o !== undefined) {
            return o;
          }
        }
      }
      return undefined;
    };
    var o = searchJsObject(v, t);
    if (o !== undefined) {
      return o;
    }

    o = {};
    for (var i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (f.pkg !== "") { /* not exported */
        continue;
      }
      o[f.name] = $externalize(v[f.prop], f.type);
    }
    return o;
  }
  $panic(new $String("cannot externalize " + t.string));
};

var $internalize = function(v, t, recv) {
  switch (t.kind) {
  case $kindBool:
    return !!v;
  case $kindInt:
    return parseInt(v);
  case $kindInt8:
    return parseInt(v) << 24 >> 24;
  case $kindInt16:
    return parseInt(v) << 16 >> 16;
  case $kindInt32:
    return parseInt(v) >> 0;
  case $kindUint:
    return parseInt(v);
  case $kindUint8:
    return parseInt(v) << 24 >>> 24;
  case $kindUint16:
    return parseInt(v) << 16 >>> 16;
  case $kindUint32:
  case $kindUintptr:
    return parseInt(v) >>> 0;
  case $kindInt64:
  case $kindUint64:
    return new t(0, v);
  case $kindFloat32:
  case $kindFloat64:
    return parseFloat(v);
  case $kindArray:
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case $kindFunc:
    return function() {
      var args = [];
      for (var i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i];
          for (var j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (var i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case $kindInterface:
    if (t === $js.Object || t === $js.Any) {
      return v;
    }
    if (t.methods.length !== 0) {
      $panic(new $String("cannot internalize " + t.string));
    }
    if (v === null) {
      return $ifaceNil;
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      var timePkg = $packages["time"];
      if (timePkg) {
        return new timePkg.Time(timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000)));
      }
    case Function:
      var funcType = $funcType([$sliceType($js.Any)], [$js.Object], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return new $js.DOMNode.ptr(v);
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case $kindMap:
    var m = new $Map();
    var keys = $keys(v);
    for (var i = 0; i < keys.length; i++) {
      var key = $internalize(keys[i], t.key);
      m[key.$key ? key.$key() : key] = { k: key, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case $kindPtr:
    if (t.elem.kind === $kindStruct) {
      return $internalize(v, t.elem);
    }
  case $kindSlice:
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case $kindString:
    v = String(v);
    if (v.search(/^[\x00-\x7F]*$/) !== -1) {
      return v;
    }
    var s = "";
    for (var i = 0; i < v.length; i++) {
      s += $encodeRune(v.charCodeAt(i));
    }
    return s;
  case $kindStruct:
    var searchJsObject = function(v, t) {
      if (t === $js.Object) {
        return v;
      }
      if (t.kind === $kindPtr && t.elem.kind === $kindStruct) {
        var o = searchJsObject(v, t.elem);
        if (o !== undefined) {
          return o;
        }
      }
      if (t.kind === $kindStruct) {
        for (var i = 0; i < t.fields.length; i++) {
          var f = t.fields[i];
          var o = searchJsObject(v, f.type);
          if (o !== undefined) {
            var n = new t.ptr();
            n[f.prop] = o;
            return n;
          }
        }
      }
      return undefined;
    };
    var o = searchJsObject(v, t);
    if (o !== undefined) {
      return o;
    }
  }
  $panic(new $String("cannot internalize " + t.string));
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, Object, Any, DOMNode, Error, sliceType$2, ptrType, ptrType$1, init;
	Object = $pkg.Object = $newType(8, $kindInterface, "js.Object", "Object", "github.com/gopherjs/gopherjs/js", null);
	Any = $pkg.Any = $newType(8, $kindInterface, "js.Any", "Any", "github.com/gopherjs/gopherjs/js", null);
	DOMNode = $pkg.DOMNode = $newType(0, $kindStruct, "js.DOMNode", "DOMNode", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
	Error = $pkg.Error = $newType(0, $kindStruct, "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
		sliceType$2 = $sliceType(Any);
		ptrType = $ptrType(DOMNode);
		ptrType$1 = $ptrType(Error);
	Error.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	init = function() {
		var _tmp, _tmp$1, e, n;
		e = new Error.ptr(null);
		n = new DOMNode.ptr(null);
		
	};
	DOMNode.methods = [{prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([$String, sliceType$2], [Object], true)}, {prop: "Delete", name: "Delete", pkg: "", type: $funcType([$String], [], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [Object], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [Object], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Invoke", name: "Invoke", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Length", name: "Length", pkg: "", type: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, Any], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", type: $funcType([$Int, Any], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", type: $funcType([], [$Uintptr], false)}];
	ptrType.methods = [{prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([$String, sliceType$2], [Object], true)}, {prop: "Delete", name: "Delete", pkg: "", type: $funcType([$String], [], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [Object], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [Object], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Invoke", name: "Invoke", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Length", name: "Length", pkg: "", type: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, Any], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", type: $funcType([$Int, Any], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", type: $funcType([], [$Uintptr], false)}];
	Error.methods = [{prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([$String, sliceType$2], [Object], true)}, {prop: "Delete", name: "Delete", pkg: "", type: $funcType([$String], [], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [Object], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [Object], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Invoke", name: "Invoke", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Length", name: "Length", pkg: "", type: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, Any], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", type: $funcType([$Int, Any], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", type: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([$String, sliceType$2], [Object], true)}, {prop: "Delete", name: "Delete", pkg: "", type: $funcType([$String], [], false)}, {prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [Object], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [Object], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Invoke", name: "Invoke", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Length", name: "Length", pkg: "", type: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, Any], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", type: $funcType([$Int, Any], [], false)}, {prop: "Stack", name: "Stack", pkg: "", type: $funcType([], [$String], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", type: $funcType([], [$Uintptr], false)}];
	Object.init([{prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([$String, sliceType$2], [Object], true)}, {prop: "Delete", name: "Delete", pkg: "", type: $funcType([$String], [], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [Object], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [Object], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Invoke", name: "Invoke", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Length", name: "Length", pkg: "", type: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([sliceType$2], [Object], true)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, Any], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", type: $funcType([$Int, Any], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", type: $funcType([], [$Uintptr], false)}]);
	Any.init([]);
	DOMNode.init([{prop: "Object", name: "", pkg: "", type: Object, tag: ""}]);
	Error.init([{prop: "Object", name: "", pkg: "", type: Object, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_js = function() { while (true) { switch ($s) { case 0:
		init();
		/* */ } return; } }; $init_js.$blocking = true; return $init_js;
	};
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, js, NotSupportedError, Error, TypeAssertionError, errorString, ptrType$5, ptrType$6, ptrType$7, init, GOMAXPROCS, SetFinalizer;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	NotSupportedError = $pkg.NotSupportedError = $newType(0, $kindStruct, "runtime.NotSupportedError", "NotSupportedError", "runtime", function(Feature_) {
		this.$val = this;
		this.Feature = Feature_ !== undefined ? Feature_ : "";
	});
	Error = $pkg.Error = $newType(8, $kindInterface, "runtime.Error", "Error", "runtime", null);
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, $kindStruct, "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		this.interfaceString = interfaceString_ !== undefined ? interfaceString_ : "";
		this.concreteString = concreteString_ !== undefined ? concreteString_ : "";
		this.assertedString = assertedString_ !== undefined ? assertedString_ : "";
		this.missingMethod = missingMethod_ !== undefined ? missingMethod_ : "";
	});
	errorString = $pkg.errorString = $newType(8, $kindString, "runtime.errorString", "errorString", "runtime", null);
		ptrType$5 = $ptrType(NotSupportedError);
		ptrType$6 = $ptrType(TypeAssertionError);
		ptrType$7 = $ptrType(errorString);
	NotSupportedError.ptr.prototype.Error = function() {
		var err;
		err = this;
		return "not supported by GopherJS: " + err.Feature;
	};
	NotSupportedError.prototype.Error = function() { return this.$val.Error(); };
	init = function() {
		var e;
		$js = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)];
		$throwRuntimeError = (function(msg) {
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.ptr("", "", "", "");
		e = new NotSupportedError.ptr("");
	};
	GOMAXPROCS = $pkg.GOMAXPROCS = function(n) {
		if (n > 1) {
			$panic(new NotSupportedError.ptr("GOMAXPROCS > 1"));
		}
		return 1;
	};
	SetFinalizer = $pkg.SetFinalizer = function(x, f) {
	};
	TypeAssertionError.ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	ptrType$5.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", type: $funcType([], [], false)}];
	errorString.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", type: $funcType([], [], false)}];
	ptrType$7.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", type: $funcType([], [], false)}];
	NotSupportedError.init([{prop: "Feature", name: "Feature", pkg: "", type: $String, tag: ""}]);
	Error.init([{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}, {prop: "RuntimeError", name: "RuntimeError", pkg: "", type: $funcType([], [], false)}]);
	TypeAssertionError.init([{prop: "interfaceString", name: "interfaceString", pkg: "runtime", type: $String, tag: ""}, {prop: "concreteString", name: "concreteString", pkg: "runtime", type: $String, tag: ""}, {prop: "assertedString", name: "assertedString", pkg: "runtime", type: $String, tag: ""}, {prop: "missingMethod", name: "missingMethod", pkg: "runtime", type: $String, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_runtime = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		init();
		/* */ } return; } }; $init_runtime.$blocking = true; return $init_runtime;
	};
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, errorString, ptrType, New;
	errorString = $pkg.errorString = $newType(0, $kindStruct, "errors.errorString", "errorString", "errors", function(s_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : "";
	});
		ptrType = $ptrType(errorString);
	New = $pkg.New = function(text) {
		return new errorString.ptr(text);
	};
	errorString.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	errorString.init([{prop: "s", name: "s", pkg: "errors", type: $String, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_errors = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_errors.$blocking = true; return $init_errors;
	};
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, js, CompareAndSwapInt32, AddInt32;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	CompareAndSwapInt32 = $pkg.CompareAndSwapInt32 = function(addr, old, new$1) {
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	AddInt32 = $pkg.AddInt32 = function(addr, delta) {
		var new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_atomic = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_atomic.$blocking = true; return $init_atomic;
	};
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, runtime, atomic, Pool, Mutex, poolLocal, syncSema, ptrType, sliceType, ptrType$2, ptrType$3, ptrType$5, sliceType$2, funcType, ptrType$10, arrayType, allPools, runtime_registerPoolCleanup, runtime_Syncsemcheck, poolCleanup, init, indexLocal, runtime_Semacquire, runtime_Semrelease, init$1;
	runtime = $packages["runtime"];
	atomic = $packages["sync/atomic"];
	Pool = $pkg.Pool = $newType(0, $kindStruct, "sync.Pool", "Pool", "sync", function(local_, localSize_, store_, New_) {
		this.$val = this;
		this.local = local_ !== undefined ? local_ : 0;
		this.localSize = localSize_ !== undefined ? localSize_ : 0;
		this.store = store_ !== undefined ? store_ : sliceType$2.nil;
		this.New = New_ !== undefined ? New_ : $throwNilPointerError;
	});
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.$val = this;
		this.state = state_ !== undefined ? state_ : 0;
		this.sema = sema_ !== undefined ? sema_ : 0;
	});
	poolLocal = $pkg.poolLocal = $newType(0, $kindStruct, "sync.poolLocal", "poolLocal", "sync", function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		this.private$0 = private$0_ !== undefined ? private$0_ : $ifaceNil;
		this.shared = shared_ !== undefined ? shared_ : sliceType$2.nil;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new Mutex.ptr();
		this.pad = pad_ !== undefined ? pad_ : arrayType.zero();
	});
	syncSema = $pkg.syncSema = $newType(0, $kindStruct, "sync.syncSema", "syncSema", "sync", function(lock_, head_, tail_) {
		this.$val = this;
		this.lock = lock_ !== undefined ? lock_ : 0;
		this.head = head_ !== undefined ? head_ : 0;
		this.tail = tail_ !== undefined ? tail_ : 0;
	});
		ptrType = $ptrType(Pool);
		sliceType = $sliceType(ptrType);
		ptrType$2 = $ptrType($Uint32);
		ptrType$3 = $ptrType($Int32);
		ptrType$5 = $ptrType(poolLocal);
		sliceType$2 = $sliceType($emptyInterface);
		funcType = $funcType([], [$emptyInterface], false);
		ptrType$10 = $ptrType(Mutex);
		arrayType = $arrayType($Uint8, 128);
	Pool.ptr.prototype.Get = function() {
		var p, x, x$1, x$2;
		p = this;
		if (p.store.$length === 0) {
			if (!(p.New === $throwNilPointerError)) {
				return p.New();
			}
			return $ifaceNil;
		}
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		return x$2;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.ptr.prototype.Put = function(x) {
		var p;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
	};
	runtime_Syncsemcheck = function(size) {
	};
	Mutex.ptr.prototype.Lock = function() {
		var awoke, m, new$1, old;
		m = this;
		if (atomic.CompareAndSwapInt32(new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), 0, 1)) {
			return;
		}
		awoke = false;
		while (true) {
			old = m.state;
			new$1 = old | 1;
			if (!(((old & 1) === 0))) {
				new$1 = old + 4 >> 0;
			}
			if (awoke) {
				new$1 = new$1 & ~(2);
			}
			if (atomic.CompareAndSwapInt32(new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) {
				if ((old & 1) === 0) {
					break;
				}
				runtime_Semacquire(new ptrType$2(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m));
				awoke = true;
			}
		}
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m, new$1, old;
		m = this;
		new$1 = atomic.AddInt32(new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		while (true) {
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			if (atomic.CompareAndSwapInt32(new ptrType$3(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) {
				runtime_Semrelease(new ptrType$2(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m));
				return;
			}
			old = m.state;
		}
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	poolCleanup = function() {
		var _i, _i$1, _ref, _ref$1, i, i$1, j, l, p, x;
		_ref = allPools;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ptrType.nil;
			i$1 = 0;
			while (i$1 < (p.localSize >> 0)) {
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (_i$1 < _ref$1.$length) {
					j = _i$1;
					(x = l.shared, (j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil);
					_i$1++;
				}
				l.shared = sliceType$2.nil;
				i$1 = i$1 + (1) >> 0;
			}
			p.local = 0;
			p.localSize = 0;
			_i++;
		}
		allPools = new sliceType([]);
	};
	init = function() {
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	runtime_Semacquire = function() {
		$panic("Native function not implemented: sync.runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		$panic("Native function not implemented: sync.runtime_Semrelease");
	};
	init$1 = function() {
		var s;
		s = $clone(new syncSema.ptr(), syncSema);
		runtime_Syncsemcheck(12);
	};
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Put", name: "Put", pkg: "", type: $funcType([$emptyInterface], [], false)}, {prop: "getSlow", name: "getSlow", pkg: "sync", type: $funcType([], [$emptyInterface], false)}, {prop: "pin", name: "pin", pkg: "sync", type: $funcType([], [ptrType$5], false)}, {prop: "pinSlow", name: "pinSlow", pkg: "sync", type: $funcType([], [ptrType$5], false)}];
	ptrType$10.methods = [{prop: "Lock", name: "Lock", pkg: "", type: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", type: $funcType([], [], false)}];
	ptrType$5.methods = [{prop: "Lock", name: "Lock", pkg: "", type: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", type: $funcType([], [], false)}];
	Pool.init([{prop: "local", name: "local", pkg: "sync", type: $UnsafePointer, tag: ""}, {prop: "localSize", name: "localSize", pkg: "sync", type: $Uintptr, tag: ""}, {prop: "store", name: "store", pkg: "sync", type: sliceType$2, tag: ""}, {prop: "New", name: "New", pkg: "", type: funcType, tag: ""}]);
	Mutex.init([{prop: "state", name: "state", pkg: "sync", type: $Int32, tag: ""}, {prop: "sema", name: "sema", pkg: "sync", type: $Uint32, tag: ""}]);
	poolLocal.init([{prop: "private$0", name: "private", pkg: "sync", type: $emptyInterface, tag: ""}, {prop: "shared", name: "shared", pkg: "sync", type: sliceType$2, tag: ""}, {prop: "Mutex", name: "", pkg: "", type: Mutex, tag: ""}, {prop: "pad", name: "pad", pkg: "sync", type: arrayType, tag: ""}]);
	syncSema.init([{prop: "lock", name: "lock", pkg: "sync", type: $Uintptr, tag: ""}, {prop: "head", name: "head", pkg: "sync", type: $UnsafePointer, tag: ""}, {prop: "tail", name: "tail", pkg: "sync", type: $UnsafePointer, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_sync = function() { while (true) { switch ($s) { case 0:
		$r = runtime.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = atomic.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		allPools = sliceType.nil;
		init();
		init$1();
		/* */ } return; } }; $init_sync.$blocking = true; return $init_sync;
	};
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, errors, runtime, sync, Reader, Writer, RuneReader, sliceType, errWhence, errOffset, ReadAtLeast, ReadFull;
	errors = $packages["errors"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	Reader = $pkg.Reader = $newType(8, $kindInterface, "io.Reader", "Reader", "io", null);
	Writer = $pkg.Writer = $newType(8, $kindInterface, "io.Writer", "Writer", "io", null);
	RuneReader = $pkg.RuneReader = $newType(8, $kindInterface, "io.RuneReader", "RuneReader", "io", null);
		sliceType = $sliceType($Uint8);
	ReadAtLeast = $pkg.ReadAtLeast = function(r, buf, min) {
		var _tmp, _tmp$1, _tuple, err = $ifaceNil, n = 0, nn;
		if (buf.$length < min) {
			_tmp = 0; _tmp$1 = $pkg.ErrShortBuffer; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (n < min && $interfaceIsEqual(err, $ifaceNil)) {
			nn = 0;
			_tuple = r.Read($subslice(buf, n)); nn = _tuple[0]; err = _tuple[1];
			n = n + (nn) >> 0;
		}
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		return [n, err];
	};
	ReadFull = $pkg.ReadFull = function(r, buf) {
		var _tuple, err = $ifaceNil, n = 0;
		_tuple = ReadAtLeast(r, buf, buf.$length); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Reader.init([{prop: "Read", name: "Read", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}]);
	Writer.init([{prop: "Write", name: "Write", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}]);
	RuneReader.init([{prop: "ReadRune", name: "ReadRune", pkg: "", type: $funcType([], [$Int32, $Int, $error], false)}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_io = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
		/* */ } return; } }; $init_io.$blocking = true; return $init_io;
	};
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, RangeTable, Range16, Range32, CaseRange, d, foldPair, sliceType, sliceType$1, ptrType, sliceType$2, sliceType$3, sliceType$4, _L, _M, _N, _Nd, _P, _S, _White_Space, _CaseRanges, properties, caseOrbit, to, IsDigit, IsPrint, In, IsLetter, IsSpace, is16, is32, Is, isExcludingLatin, To, ToUpper, ToLower, SimpleFold;
	RangeTable = $pkg.RangeTable = $newType(0, $kindStruct, "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		this.R16 = R16_ !== undefined ? R16_ : sliceType.nil;
		this.R32 = R32_ !== undefined ? R32_ : sliceType$1.nil;
		this.LatinOffset = LatinOffset_ !== undefined ? LatinOffset_ : 0;
	});
	Range16 = $pkg.Range16 = $newType(0, $kindStruct, "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	Range32 = $pkg.Range32 = $newType(0, $kindStruct, "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	CaseRange = $pkg.CaseRange = $newType(0, $kindStruct, "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Delta = Delta_ !== undefined ? Delta_ : d.zero();
	});
	d = $pkg.d = $newType(12, $kindArray, "unicode.d", "d", "unicode", null);
	foldPair = $pkg.foldPair = $newType(0, $kindStruct, "unicode.foldPair", "foldPair", "unicode", function(From_, To_) {
		this.$val = this;
		this.From = From_ !== undefined ? From_ : 0;
		this.To = To_ !== undefined ? To_ : 0;
	});
		sliceType = $sliceType(Range16);
		sliceType$1 = $sliceType(Range32);
		ptrType = $ptrType(RangeTable);
		sliceType$2 = $sliceType(ptrType);
		sliceType$3 = $sliceType(CaseRange);
		sliceType$4 = $sliceType(foldPair);
	to = function(_case, r, caseRange) {
		var _q, cr, delta, hi, lo, m, x;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + (((((r - (cr.Lo >> 0) >> 0)) & ~1) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsDigit = $pkg.IsDigit = function(r) {
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	IsPrint = $pkg.IsPrint = function(r) {
		var x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 128) >>> 0) === 0));
		}
		return In(r, $pkg.PrintRanges);
	};
	In = $pkg.In = function(r, ranges) {
		var _i, _ref, inside;
		_ref = ranges;
		_i = 0;
		while (_i < _ref.$length) {
			inside = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	IsLetter = $pkg.IsLetter = function(r) {
		var x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	IsSpace = $pkg.IsSpace = function(r) {
		var _ref;
		if ((r >>> 0) <= 255) {
			_ref = r;
			if (_ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 13 || _ref === 32 || _ref === 133 || _ref === 160) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	is16 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, range_, range_$1;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _i, _q, _r, _r$1, _ref, hi, i, lo, m, range_, range_$1;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = $clone(((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = $pkg.Is = function(rangeTab, r) {
		var r16, r32, x;
		r16 = rangeTab.R16;
		if (r16.$length > 0 && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16(r16, (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 < 0 || 0 >= r32.$length) ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var off, r16, r32, x;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 < 0 || 0 >= r32.$length) ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	To = $pkg.To = function(_case, r) {
		return to(_case, r, $pkg.CaseRanges);
	};
	ToUpper = $pkg.ToUpper = function(r) {
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	ToLower = $pkg.ToLower = function(r) {
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	SimpleFold = $pkg.SimpleFold = function(r) {
		var _q, hi, l, lo, m;
		lo = 0;
		hi = caseOrbit.$length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if ((((m < 0 || m >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && ((((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0) === r)) {
			return (((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0);
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	RangeTable.init([{prop: "R16", name: "R16", pkg: "", type: sliceType, tag: ""}, {prop: "R32", name: "R32", pkg: "", type: sliceType$1, tag: ""}, {prop: "LatinOffset", name: "LatinOffset", pkg: "", type: $Int, tag: ""}]);
	Range16.init([{prop: "Lo", name: "Lo", pkg: "", type: $Uint16, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", type: $Uint16, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", type: $Uint16, tag: ""}]);
	Range32.init([{prop: "Lo", name: "Lo", pkg: "", type: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", type: $Uint32, tag: ""}, {prop: "Stride", name: "Stride", pkg: "", type: $Uint32, tag: ""}]);
	CaseRange.init([{prop: "Lo", name: "Lo", pkg: "", type: $Uint32, tag: ""}, {prop: "Hi", name: "Hi", pkg: "", type: $Uint32, tag: ""}, {prop: "Delta", name: "Delta", pkg: "", type: d, tag: ""}]);
	d.init($Int32, 3);
	foldPair.init([{prop: "From", name: "From", pkg: "", type: $Uint16, tag: ""}, {prop: "To", name: "To", pkg: "", type: $Uint16, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_unicode = function() { while (true) { switch ($s) { case 0:
		_L = new RangeTable.ptr(new sliceType([new Range16.ptr(65, 90, 1), new Range16.ptr(97, 122, 1), new Range16.ptr(170, 181, 11), new Range16.ptr(186, 192, 6), new Range16.ptr(193, 214, 1), new Range16.ptr(216, 246, 1), new Range16.ptr(248, 705, 1), new Range16.ptr(710, 721, 1), new Range16.ptr(736, 740, 1), new Range16.ptr(748, 750, 2), new Range16.ptr(880, 884, 1), new Range16.ptr(886, 887, 1), new Range16.ptr(890, 893, 1), new Range16.ptr(895, 902, 7), new Range16.ptr(904, 906, 1), new Range16.ptr(908, 910, 2), new Range16.ptr(911, 929, 1), new Range16.ptr(931, 1013, 1), new Range16.ptr(1015, 1153, 1), new Range16.ptr(1162, 1327, 1), new Range16.ptr(1329, 1366, 1), new Range16.ptr(1369, 1377, 8), new Range16.ptr(1378, 1415, 1), new Range16.ptr(1488, 1514, 1), new Range16.ptr(1520, 1522, 1), new Range16.ptr(1568, 1610, 1), new Range16.ptr(1646, 1647, 1), new Range16.ptr(1649, 1747, 1), new Range16.ptr(1749, 1765, 16), new Range16.ptr(1766, 1774, 8), new Range16.ptr(1775, 1786, 11), new Range16.ptr(1787, 1788, 1), new Range16.ptr(1791, 1808, 17), new Range16.ptr(1810, 1839, 1), new Range16.ptr(1869, 1957, 1), new Range16.ptr(1969, 1994, 25), new Range16.ptr(1995, 2026, 1), new Range16.ptr(2036, 2037, 1), new Range16.ptr(2042, 2048, 6), new Range16.ptr(2049, 2069, 1), new Range16.ptr(2074, 2084, 10), new Range16.ptr(2088, 2112, 24), new Range16.ptr(2113, 2136, 1), new Range16.ptr(2208, 2226, 1), new Range16.ptr(2308, 2361, 1), new Range16.ptr(2365, 2384, 19), new Range16.ptr(2392, 2401, 1), new Range16.ptr(2417, 2432, 1), new Range16.ptr(2437, 2444, 1), new Range16.ptr(2447, 2448, 1), new Range16.ptr(2451, 2472, 1), new Range16.ptr(2474, 2480, 1), new Range16.ptr(2482, 2486, 4), new Range16.ptr(2487, 2489, 1), new Range16.ptr(2493, 2510, 17), new Range16.ptr(2524, 2525, 1), new Range16.ptr(2527, 2529, 1), new Range16.ptr(2544, 2545, 1), new Range16.ptr(2565, 2570, 1), new Range16.ptr(2575, 2576, 1), new Range16.ptr(2579, 2600, 1), new Range16.ptr(2602, 2608, 1), new Range16.ptr(2610, 2611, 1), new Range16.ptr(2613, 2614, 1), new Range16.ptr(2616, 2617, 1), new Range16.ptr(2649, 2652, 1), new Range16.ptr(2654, 2674, 20), new Range16.ptr(2675, 2676, 1), new Range16.ptr(2693, 2701, 1), new Range16.ptr(2703, 2705, 1), new Range16.ptr(2707, 2728, 1), new Range16.ptr(2730, 2736, 1), new Range16.ptr(2738, 2739, 1), new Range16.ptr(2741, 2745, 1), new Range16.ptr(2749, 2768, 19), new Range16.ptr(2784, 2785, 1), new Range16.ptr(2821, 2828, 1), new Range16.ptr(2831, 2832, 1), new Range16.ptr(2835, 2856, 1), new Range16.ptr(2858, 2864, 1), new Range16.ptr(2866, 2867, 1), new Range16.ptr(2869, 2873, 1), new Range16.ptr(2877, 2908, 31), new Range16.ptr(2909, 2911, 2), new Range16.ptr(2912, 2913, 1), new Range16.ptr(2929, 2947, 18), new Range16.ptr(2949, 2954, 1), new Range16.ptr(2958, 2960, 1), new Range16.ptr(2962, 2965, 1), new Range16.ptr(2969, 2970, 1), new Range16.ptr(2972, 2974, 2), new Range16.ptr(2975, 2979, 4), new Range16.ptr(2980, 2984, 4), new Range16.ptr(2985, 2986, 1), new Range16.ptr(2990, 3001, 1), new Range16.ptr(3024, 3077, 53), new Range16.ptr(3078, 3084, 1), new Range16.ptr(3086, 3088, 1), new Range16.ptr(3090, 3112, 1), new Range16.ptr(3114, 3129, 1), new Range16.ptr(3133, 3160, 27), new Range16.ptr(3161, 3168, 7), new Range16.ptr(3169, 3205, 36), new Range16.ptr(3206, 3212, 1), new Range16.ptr(3214, 3216, 1), new Range16.ptr(3218, 3240, 1), new Range16.ptr(3242, 3251, 1), new Range16.ptr(3253, 3257, 1), new Range16.ptr(3261, 3294, 33), new Range16.ptr(3296, 3297, 1), new Range16.ptr(3313, 3314, 1), new Range16.ptr(3333, 3340, 1), new Range16.ptr(3342, 3344, 1), new Range16.ptr(3346, 3386, 1), new Range16.ptr(3389, 3406, 17), new Range16.ptr(3424, 3425, 1), new Range16.ptr(3450, 3455, 1), new Range16.ptr(3461, 3478, 1), new Range16.ptr(3482, 3505, 1), new Range16.ptr(3507, 3515, 1), new Range16.ptr(3517, 3520, 3), new Range16.ptr(3521, 3526, 1), new Range16.ptr(3585, 3632, 1), new Range16.ptr(3634, 3635, 1), new Range16.ptr(3648, 3654, 1), new Range16.ptr(3713, 3714, 1), new Range16.ptr(3716, 3719, 3), new Range16.ptr(3720, 3722, 2), new Range16.ptr(3725, 3732, 7), new Range16.ptr(3733, 3735, 1), new Range16.ptr(3737, 3743, 1), new Range16.ptr(3745, 3747, 1), new Range16.ptr(3749, 3751, 2), new Range16.ptr(3754, 3755, 1), new Range16.ptr(3757, 3760, 1), new Range16.ptr(3762, 3763, 1), new Range16.ptr(3773, 3776, 3), new Range16.ptr(3777, 3780, 1), new Range16.ptr(3782, 3804, 22), new Range16.ptr(3805, 3807, 1), new Range16.ptr(3840, 3904, 64), new Range16.ptr(3905, 3911, 1), new Range16.ptr(3913, 3948, 1), new Range16.ptr(3976, 3980, 1), new Range16.ptr(4096, 4138, 1), new Range16.ptr(4159, 4176, 17), new Range16.ptr(4177, 4181, 1), new Range16.ptr(4186, 4189, 1), new Range16.ptr(4193, 4197, 4), new Range16.ptr(4198, 4206, 8), new Range16.ptr(4207, 4208, 1), new Range16.ptr(4213, 4225, 1), new Range16.ptr(4238, 4256, 18), new Range16.ptr(4257, 4293, 1), new Range16.ptr(4295, 4301, 6), new Range16.ptr(4304, 4346, 1), new Range16.ptr(4348, 4680, 1), new Range16.ptr(4682, 4685, 1), new Range16.ptr(4688, 4694, 1), new Range16.ptr(4696, 4698, 2), new Range16.ptr(4699, 4701, 1), new Range16.ptr(4704, 4744, 1), new Range16.ptr(4746, 4749, 1), new Range16.ptr(4752, 4784, 1), new Range16.ptr(4786, 4789, 1), new Range16.ptr(4792, 4798, 1), new Range16.ptr(4800, 4802, 2), new Range16.ptr(4803, 4805, 1), new Range16.ptr(4808, 4822, 1), new Range16.ptr(4824, 4880, 1), new Range16.ptr(4882, 4885, 1), new Range16.ptr(4888, 4954, 1), new Range16.ptr(4992, 5007, 1), new Range16.ptr(5024, 5108, 1), new Range16.ptr(5121, 5740, 1), new Range16.ptr(5743, 5759, 1), new Range16.ptr(5761, 5786, 1), new Range16.ptr(5792, 5866, 1), new Range16.ptr(5873, 5880, 1), new Range16.ptr(5888, 5900, 1), new Range16.ptr(5902, 5905, 1), new Range16.ptr(5920, 5937, 1), new Range16.ptr(5952, 5969, 1), new Range16.ptr(5984, 5996, 1), new Range16.ptr(5998, 6000, 1), new Range16.ptr(6016, 6067, 1), new Range16.ptr(6103, 6108, 5), new Range16.ptr(6176, 6263, 1), new Range16.ptr(6272, 6312, 1), new Range16.ptr(6314, 6320, 6), new Range16.ptr(6321, 6389, 1), new Range16.ptr(6400, 6430, 1), new Range16.ptr(6480, 6509, 1), new Range16.ptr(6512, 6516, 1), new Range16.ptr(6528, 6571, 1), new Range16.ptr(6593, 6599, 1), new Range16.ptr(6656, 6678, 1), new Range16.ptr(6688, 6740, 1), new Range16.ptr(6823, 6917, 94), new Range16.ptr(6918, 6963, 1), new Range16.ptr(6981, 6987, 1), new Range16.ptr(7043, 7072, 1), new Range16.ptr(7086, 7087, 1), new Range16.ptr(7098, 7141, 1), new Range16.ptr(7168, 7203, 1), new Range16.ptr(7245, 7247, 1), new Range16.ptr(7258, 7293, 1), new Range16.ptr(7401, 7404, 1), new Range16.ptr(7406, 7409, 1), new Range16.ptr(7413, 7414, 1), new Range16.ptr(7424, 7615, 1), new Range16.ptr(7680, 7957, 1), new Range16.ptr(7960, 7965, 1), new Range16.ptr(7968, 8005, 1), new Range16.ptr(8008, 8013, 1), new Range16.ptr(8016, 8023, 1), new Range16.ptr(8025, 8031, 2), new Range16.ptr(8032, 8061, 1), new Range16.ptr(8064, 8116, 1), new Range16.ptr(8118, 8124, 1), new Range16.ptr(8126, 8130, 4), new Range16.ptr(8131, 8132, 1), new Range16.ptr(8134, 8140, 1), new Range16.ptr(8144, 8147, 1), new Range16.ptr(8150, 8155, 1), new Range16.ptr(8160, 8172, 1), new Range16.ptr(8178, 8180, 1), new Range16.ptr(8182, 8188, 1), new Range16.ptr(8305, 8319, 14), new Range16.ptr(8336, 8348, 1), new Range16.ptr(8450, 8455, 5), new Range16.ptr(8458, 8467, 1), new Range16.ptr(8469, 8473, 4), new Range16.ptr(8474, 8477, 1), new Range16.ptr(8484, 8490, 2), new Range16.ptr(8491, 8493, 1), new Range16.ptr(8495, 8505, 1), new Range16.ptr(8508, 8511, 1), new Range16.ptr(8517, 8521, 1), new Range16.ptr(8526, 8579, 53), new Range16.ptr(8580, 11264, 2684), new Range16.ptr(11265, 11310, 1), new Range16.ptr(11312, 11358, 1), new Range16.ptr(11360, 11492, 1), new Range16.ptr(11499, 11502, 1), new Range16.ptr(11506, 11507, 1), new Range16.ptr(11520, 11557, 1), new Range16.ptr(11559, 11565, 6), new Range16.ptr(11568, 11623, 1), new Range16.ptr(11631, 11648, 17), new Range16.ptr(11649, 11670, 1), new Range16.ptr(11680, 11686, 1), new Range16.ptr(11688, 11694, 1), new Range16.ptr(11696, 11702, 1), new Range16.ptr(11704, 11710, 1), new Range16.ptr(11712, 11718, 1), new Range16.ptr(11720, 11726, 1), new Range16.ptr(11728, 11734, 1), new Range16.ptr(11736, 11742, 1), new Range16.ptr(11823, 12293, 470), new Range16.ptr(12294, 12337, 43), new Range16.ptr(12338, 12341, 1), new Range16.ptr(12347, 12348, 1), new Range16.ptr(12353, 12438, 1), new Range16.ptr(12445, 12447, 1), new Range16.ptr(12449, 12538, 1), new Range16.ptr(12540, 12543, 1), new Range16.ptr(12549, 12589, 1), new Range16.ptr(12593, 12686, 1), new Range16.ptr(12704, 12730, 1), new Range16.ptr(12784, 12799, 1), new Range16.ptr(13312, 19893, 1), new Range16.ptr(19968, 40908, 1), new Range16.ptr(40960, 42124, 1), new Range16.ptr(42192, 42237, 1), new Range16.ptr(42240, 42508, 1), new Range16.ptr(42512, 42527, 1), new Range16.ptr(42538, 42539, 1), new Range16.ptr(42560, 42606, 1), new Range16.ptr(42623, 42653, 1), new Range16.ptr(42656, 42725, 1), new Range16.ptr(42775, 42783, 1), new Range16.ptr(42786, 42888, 1), new Range16.ptr(42891, 42894, 1), new Range16.ptr(42896, 42925, 1), new Range16.ptr(42928, 42929, 1), new Range16.ptr(42999, 43009, 1), new Range16.ptr(43011, 43013, 1), new Range16.ptr(43015, 43018, 1), new Range16.ptr(43020, 43042, 1), new Range16.ptr(43072, 43123, 1), new Range16.ptr(43138, 43187, 1), new Range16.ptr(43250, 43255, 1), new Range16.ptr(43259, 43274, 15), new Range16.ptr(43275, 43301, 1), new Range16.ptr(43312, 43334, 1), new Range16.ptr(43360, 43388, 1), new Range16.ptr(43396, 43442, 1), new Range16.ptr(43471, 43488, 17), new Range16.ptr(43489, 43492, 1), new Range16.ptr(43494, 43503, 1), new Range16.ptr(43514, 43518, 1), new Range16.ptr(43520, 43560, 1), new Range16.ptr(43584, 43586, 1), new Range16.ptr(43588, 43595, 1), new Range16.ptr(43616, 43638, 1), new Range16.ptr(43642, 43646, 4), new Range16.ptr(43647, 43695, 1), new Range16.ptr(43697, 43701, 4), new Range16.ptr(43702, 43705, 3), new Range16.ptr(43706, 43709, 1), new Range16.ptr(43712, 43714, 2), new Range16.ptr(43739, 43741, 1), new Range16.ptr(43744, 43754, 1), new Range16.ptr(43762, 43764, 1), new Range16.ptr(43777, 43782, 1), new Range16.ptr(43785, 43790, 1), new Range16.ptr(43793, 43798, 1), new Range16.ptr(43808, 43814, 1), new Range16.ptr(43816, 43822, 1), new Range16.ptr(43824, 43866, 1), new Range16.ptr(43868, 43871, 1), new Range16.ptr(43876, 43877, 1), new Range16.ptr(43968, 44002, 1), new Range16.ptr(44032, 55203, 1), new Range16.ptr(55216, 55238, 1), new Range16.ptr(55243, 55291, 1), new Range16.ptr(63744, 64109, 1), new Range16.ptr(64112, 64217, 1), new Range16.ptr(64256, 64262, 1), new Range16.ptr(64275, 64279, 1), new Range16.ptr(64285, 64287, 2), new Range16.ptr(64288, 64296, 1), new Range16.ptr(64298, 64310, 1), new Range16.ptr(64312, 64316, 1), new Range16.ptr(64318, 64320, 2), new Range16.ptr(64321, 64323, 2), new Range16.ptr(64324, 64326, 2), new Range16.ptr(64327, 64433, 1), new Range16.ptr(64467, 64829, 1), new Range16.ptr(64848, 64911, 1), new Range16.ptr(64914, 64967, 1), new Range16.ptr(65008, 65019, 1), new Range16.ptr(65136, 65140, 1), new Range16.ptr(65142, 65276, 1), new Range16.ptr(65313, 65338, 1), new Range16.ptr(65345, 65370, 1), new Range16.ptr(65382, 65470, 1), new Range16.ptr(65474, 65479, 1), new Range16.ptr(65482, 65487, 1), new Range16.ptr(65490, 65495, 1), new Range16.ptr(65498, 65500, 1)]), new sliceType$1([new Range32.ptr(65536, 65547, 1), new Range32.ptr(65549, 65574, 1), new Range32.ptr(65576, 65594, 1), new Range32.ptr(65596, 65597, 1), new Range32.ptr(65599, 65613, 1), new Range32.ptr(65616, 65629, 1), new Range32.ptr(65664, 65786, 1), new Range32.ptr(66176, 66204, 1), new Range32.ptr(66208, 66256, 1), new Range32.ptr(66304, 66335, 1), new Range32.ptr(66352, 66368, 1), new Range32.ptr(66370, 66377, 1), new Range32.ptr(66384, 66421, 1), new Range32.ptr(66432, 66461, 1), new Range32.ptr(66464, 66499, 1), new Range32.ptr(66504, 66511, 1), new Range32.ptr(66560, 66717, 1), new Range32.ptr(66816, 66855, 1), new Range32.ptr(66864, 66915, 1), new Range32.ptr(67072, 67382, 1), new Range32.ptr(67392, 67413, 1), new Range32.ptr(67424, 67431, 1), new Range32.ptr(67584, 67589, 1), new Range32.ptr(67592, 67594, 2), new Range32.ptr(67595, 67637, 1), new Range32.ptr(67639, 67640, 1), new Range32.ptr(67644, 67647, 3), new Range32.ptr(67648, 67669, 1), new Range32.ptr(67680, 67702, 1), new Range32.ptr(67712, 67742, 1), new Range32.ptr(67840, 67861, 1), new Range32.ptr(67872, 67897, 1), new Range32.ptr(67968, 68023, 1), new Range32.ptr(68030, 68031, 1), new Range32.ptr(68096, 68112, 16), new Range32.ptr(68113, 68115, 1), new Range32.ptr(68117, 68119, 1), new Range32.ptr(68121, 68147, 1), new Range32.ptr(68192, 68220, 1), new Range32.ptr(68224, 68252, 1), new Range32.ptr(68288, 68295, 1), new Range32.ptr(68297, 68324, 1), new Range32.ptr(68352, 68405, 1), new Range32.ptr(68416, 68437, 1), new Range32.ptr(68448, 68466, 1), new Range32.ptr(68480, 68497, 1), new Range32.ptr(68608, 68680, 1), new Range32.ptr(69635, 69687, 1), new Range32.ptr(69763, 69807, 1), new Range32.ptr(69840, 69864, 1), new Range32.ptr(69891, 69926, 1), new Range32.ptr(69968, 70002, 1), new Range32.ptr(70006, 70019, 13), new Range32.ptr(70020, 70066, 1), new Range32.ptr(70081, 70084, 1), new Range32.ptr(70106, 70144, 38), new Range32.ptr(70145, 70161, 1), new Range32.ptr(70163, 70187, 1), new Range32.ptr(70320, 70366, 1), new Range32.ptr(70405, 70412, 1), new Range32.ptr(70415, 70416, 1), new Range32.ptr(70419, 70440, 1), new Range32.ptr(70442, 70448, 1), new Range32.ptr(70450, 70451, 1), new Range32.ptr(70453, 70457, 1), new Range32.ptr(70461, 70493, 32), new Range32.ptr(70494, 70497, 1), new Range32.ptr(70784, 70831, 1), new Range32.ptr(70852, 70853, 1), new Range32.ptr(70855, 71040, 185), new Range32.ptr(71041, 71086, 1), new Range32.ptr(71168, 71215, 1), new Range32.ptr(71236, 71296, 60), new Range32.ptr(71297, 71338, 1), new Range32.ptr(71840, 71903, 1), new Range32.ptr(71935, 72384, 449), new Range32.ptr(72385, 72440, 1), new Range32.ptr(73728, 74648, 1), new Range32.ptr(77824, 78894, 1), new Range32.ptr(92160, 92728, 1), new Range32.ptr(92736, 92766, 1), new Range32.ptr(92880, 92909, 1), new Range32.ptr(92928, 92975, 1), new Range32.ptr(92992, 92995, 1), new Range32.ptr(93027, 93047, 1), new Range32.ptr(93053, 93071, 1), new Range32.ptr(93952, 94020, 1), new Range32.ptr(94032, 94099, 67), new Range32.ptr(94100, 94111, 1), new Range32.ptr(110592, 110593, 1), new Range32.ptr(113664, 113770, 1), new Range32.ptr(113776, 113788, 1), new Range32.ptr(113792, 113800, 1), new Range32.ptr(113808, 113817, 1), new Range32.ptr(119808, 119892, 1), new Range32.ptr(119894, 119964, 1), new Range32.ptr(119966, 119967, 1), new Range32.ptr(119970, 119973, 3), new Range32.ptr(119974, 119977, 3), new Range32.ptr(119978, 119980, 1), new Range32.ptr(119982, 119993, 1), new Range32.ptr(119995, 119997, 2), new Range32.ptr(119998, 120003, 1), new Range32.ptr(120005, 120069, 1), new Range32.ptr(120071, 120074, 1), new Range32.ptr(120077, 120084, 1), new Range32.ptr(120086, 120092, 1), new Range32.ptr(120094, 120121, 1), new Range32.ptr(120123, 120126, 1), new Range32.ptr(120128, 120132, 1), new Range32.ptr(120134, 120138, 4), new Range32.ptr(120139, 120144, 1), new Range32.ptr(120146, 120485, 1), new Range32.ptr(120488, 120512, 1), new Range32.ptr(120514, 120538, 1), new Range32.ptr(120540, 120570, 1), new Range32.ptr(120572, 120596, 1), new Range32.ptr(120598, 120628, 1), new Range32.ptr(120630, 120654, 1), new Range32.ptr(120656, 120686, 1), new Range32.ptr(120688, 120712, 1), new Range32.ptr(120714, 120744, 1), new Range32.ptr(120746, 120770, 1), new Range32.ptr(120772, 120779, 1), new Range32.ptr(124928, 125124, 1), new Range32.ptr(126464, 126467, 1), new Range32.ptr(126469, 126495, 1), new Range32.ptr(126497, 126498, 1), new Range32.ptr(126500, 126503, 3), new Range32.ptr(126505, 126514, 1), new Range32.ptr(126516, 126519, 1), new Range32.ptr(126521, 126523, 2), new Range32.ptr(126530, 126535, 5), new Range32.ptr(126537, 126541, 2), new Range32.ptr(126542, 126543, 1), new Range32.ptr(126545, 126546, 1), new Range32.ptr(126548, 126551, 3), new Range32.ptr(126553, 126561, 2), new Range32.ptr(126562, 126564, 2), new Range32.ptr(126567, 126570, 1), new Range32.ptr(126572, 126578, 1), new Range32.ptr(126580, 126583, 1), new Range32.ptr(126585, 126588, 1), new Range32.ptr(126590, 126592, 2), new Range32.ptr(126593, 126601, 1), new Range32.ptr(126603, 126619, 1), new Range32.ptr(126625, 126627, 1), new Range32.ptr(126629, 126633, 1), new Range32.ptr(126635, 126651, 1), new Range32.ptr(131072, 173782, 1), new Range32.ptr(173824, 177972, 1), new Range32.ptr(177984, 178205, 1), new Range32.ptr(194560, 195101, 1)]), 6);
		_M = new RangeTable.ptr(new sliceType([new Range16.ptr(768, 879, 1), new Range16.ptr(1155, 1161, 1), new Range16.ptr(1425, 1469, 1), new Range16.ptr(1471, 1473, 2), new Range16.ptr(1474, 1476, 2), new Range16.ptr(1477, 1479, 2), new Range16.ptr(1552, 1562, 1), new Range16.ptr(1611, 1631, 1), new Range16.ptr(1648, 1750, 102), new Range16.ptr(1751, 1756, 1), new Range16.ptr(1759, 1764, 1), new Range16.ptr(1767, 1768, 1), new Range16.ptr(1770, 1773, 1), new Range16.ptr(1809, 1840, 31), new Range16.ptr(1841, 1866, 1), new Range16.ptr(1958, 1968, 1), new Range16.ptr(2027, 2035, 1), new Range16.ptr(2070, 2073, 1), new Range16.ptr(2075, 2083, 1), new Range16.ptr(2085, 2087, 1), new Range16.ptr(2089, 2093, 1), new Range16.ptr(2137, 2139, 1), new Range16.ptr(2276, 2307, 1), new Range16.ptr(2362, 2364, 1), new Range16.ptr(2366, 2383, 1), new Range16.ptr(2385, 2391, 1), new Range16.ptr(2402, 2403, 1), new Range16.ptr(2433, 2435, 1), new Range16.ptr(2492, 2494, 2), new Range16.ptr(2495, 2500, 1), new Range16.ptr(2503, 2504, 1), new Range16.ptr(2507, 2509, 1), new Range16.ptr(2519, 2530, 11), new Range16.ptr(2531, 2561, 30), new Range16.ptr(2562, 2563, 1), new Range16.ptr(2620, 2622, 2), new Range16.ptr(2623, 2626, 1), new Range16.ptr(2631, 2632, 1), new Range16.ptr(2635, 2637, 1), new Range16.ptr(2641, 2672, 31), new Range16.ptr(2673, 2677, 4), new Range16.ptr(2689, 2691, 1), new Range16.ptr(2748, 2750, 2), new Range16.ptr(2751, 2757, 1), new Range16.ptr(2759, 2761, 1), new Range16.ptr(2763, 2765, 1), new Range16.ptr(2786, 2787, 1), new Range16.ptr(2817, 2819, 1), new Range16.ptr(2876, 2878, 2), new Range16.ptr(2879, 2884, 1), new Range16.ptr(2887, 2888, 1), new Range16.ptr(2891, 2893, 1), new Range16.ptr(2902, 2903, 1), new Range16.ptr(2914, 2915, 1), new Range16.ptr(2946, 3006, 60), new Range16.ptr(3007, 3010, 1), new Range16.ptr(3014, 3016, 1), new Range16.ptr(3018, 3021, 1), new Range16.ptr(3031, 3072, 41), new Range16.ptr(3073, 3075, 1), new Range16.ptr(3134, 3140, 1), new Range16.ptr(3142, 3144, 1), new Range16.ptr(3146, 3149, 1), new Range16.ptr(3157, 3158, 1), new Range16.ptr(3170, 3171, 1), new Range16.ptr(3201, 3203, 1), new Range16.ptr(3260, 3262, 2), new Range16.ptr(3263, 3268, 1), new Range16.ptr(3270, 3272, 1), new Range16.ptr(3274, 3277, 1), new Range16.ptr(3285, 3286, 1), new Range16.ptr(3298, 3299, 1), new Range16.ptr(3329, 3331, 1), new Range16.ptr(3390, 3396, 1), new Range16.ptr(3398, 3400, 1), new Range16.ptr(3402, 3405, 1), new Range16.ptr(3415, 3426, 11), new Range16.ptr(3427, 3458, 31), new Range16.ptr(3459, 3530, 71), new Range16.ptr(3535, 3540, 1), new Range16.ptr(3542, 3544, 2), new Range16.ptr(3545, 3551, 1), new Range16.ptr(3570, 3571, 1), new Range16.ptr(3633, 3636, 3), new Range16.ptr(3637, 3642, 1), new Range16.ptr(3655, 3662, 1), new Range16.ptr(3761, 3764, 3), new Range16.ptr(3765, 3769, 1), new Range16.ptr(3771, 3772, 1), new Range16.ptr(3784, 3789, 1), new Range16.ptr(3864, 3865, 1), new Range16.ptr(3893, 3897, 2), new Range16.ptr(3902, 3903, 1), new Range16.ptr(3953, 3972, 1), new Range16.ptr(3974, 3975, 1), new Range16.ptr(3981, 3991, 1), new Range16.ptr(3993, 4028, 1), new Range16.ptr(4038, 4139, 101), new Range16.ptr(4140, 4158, 1), new Range16.ptr(4182, 4185, 1), new Range16.ptr(4190, 4192, 1), new Range16.ptr(4194, 4196, 1), new Range16.ptr(4199, 4205, 1), new Range16.ptr(4209, 4212, 1), new Range16.ptr(4226, 4237, 1), new Range16.ptr(4239, 4250, 11), new Range16.ptr(4251, 4253, 1), new Range16.ptr(4957, 4959, 1), new Range16.ptr(5906, 5908, 1), new Range16.ptr(5938, 5940, 1), new Range16.ptr(5970, 5971, 1), new Range16.ptr(6002, 6003, 1), new Range16.ptr(6068, 6099, 1), new Range16.ptr(6109, 6155, 46), new Range16.ptr(6156, 6157, 1), new Range16.ptr(6313, 6432, 119), new Range16.ptr(6433, 6443, 1), new Range16.ptr(6448, 6459, 1), new Range16.ptr(6576, 6592, 1), new Range16.ptr(6600, 6601, 1), new Range16.ptr(6679, 6683, 1), new Range16.ptr(6741, 6750, 1), new Range16.ptr(6752, 6780, 1), new Range16.ptr(6783, 6832, 49), new Range16.ptr(6833, 6846, 1), new Range16.ptr(6912, 6916, 1), new Range16.ptr(6964, 6980, 1), new Range16.ptr(7019, 7027, 1), new Range16.ptr(7040, 7042, 1), new Range16.ptr(7073, 7085, 1), new Range16.ptr(7142, 7155, 1), new Range16.ptr(7204, 7223, 1), new Range16.ptr(7376, 7378, 1), new Range16.ptr(7380, 7400, 1), new Range16.ptr(7405, 7410, 5), new Range16.ptr(7411, 7412, 1), new Range16.ptr(7416, 7417, 1), new Range16.ptr(7616, 7669, 1), new Range16.ptr(7676, 7679, 1), new Range16.ptr(8400, 8432, 1), new Range16.ptr(11503, 11505, 1), new Range16.ptr(11647, 11744, 97), new Range16.ptr(11745, 11775, 1), new Range16.ptr(12330, 12335, 1), new Range16.ptr(12441, 12442, 1), new Range16.ptr(42607, 42610, 1), new Range16.ptr(42612, 42621, 1), new Range16.ptr(42655, 42736, 81), new Range16.ptr(42737, 43010, 273), new Range16.ptr(43014, 43019, 5), new Range16.ptr(43043, 43047, 1), new Range16.ptr(43136, 43137, 1), new Range16.ptr(43188, 43204, 1), new Range16.ptr(43232, 43249, 1), new Range16.ptr(43302, 43309, 1), new Range16.ptr(43335, 43347, 1), new Range16.ptr(43392, 43395, 1), new Range16.ptr(43443, 43456, 1), new Range16.ptr(43493, 43561, 68), new Range16.ptr(43562, 43574, 1), new Range16.ptr(43587, 43596, 9), new Range16.ptr(43597, 43643, 46), new Range16.ptr(43644, 43645, 1), new Range16.ptr(43696, 43698, 2), new Range16.ptr(43699, 43700, 1), new Range16.ptr(43703, 43704, 1), new Range16.ptr(43710, 43711, 1), new Range16.ptr(43713, 43755, 42), new Range16.ptr(43756, 43759, 1), new Range16.ptr(43765, 43766, 1), new Range16.ptr(44003, 44010, 1), new Range16.ptr(44012, 44013, 1), new Range16.ptr(64286, 65024, 738), new Range16.ptr(65025, 65039, 1), new Range16.ptr(65056, 65069, 1)]), new sliceType$1([new Range32.ptr(66045, 66272, 227), new Range32.ptr(66422, 66426, 1), new Range32.ptr(68097, 68099, 1), new Range32.ptr(68101, 68102, 1), new Range32.ptr(68108, 68111, 1), new Range32.ptr(68152, 68154, 1), new Range32.ptr(68159, 68325, 166), new Range32.ptr(68326, 69632, 1306), new Range32.ptr(69633, 69634, 1), new Range32.ptr(69688, 69702, 1), new Range32.ptr(69759, 69762, 1), new Range32.ptr(69808, 69818, 1), new Range32.ptr(69888, 69890, 1), new Range32.ptr(69927, 69940, 1), new Range32.ptr(70003, 70016, 13), new Range32.ptr(70017, 70018, 1), new Range32.ptr(70067, 70080, 1), new Range32.ptr(70188, 70199, 1), new Range32.ptr(70367, 70378, 1), new Range32.ptr(70401, 70403, 1), new Range32.ptr(70460, 70462, 2), new Range32.ptr(70463, 70468, 1), new Range32.ptr(70471, 70472, 1), new Range32.ptr(70475, 70477, 1), new Range32.ptr(70487, 70498, 11), new Range32.ptr(70499, 70502, 3), new Range32.ptr(70503, 70508, 1), new Range32.ptr(70512, 70516, 1), new Range32.ptr(70832, 70851, 1), new Range32.ptr(71087, 71093, 1), new Range32.ptr(71096, 71104, 1), new Range32.ptr(71216, 71232, 1), new Range32.ptr(71339, 71351, 1), new Range32.ptr(92912, 92916, 1), new Range32.ptr(92976, 92982, 1), new Range32.ptr(94033, 94078, 1), new Range32.ptr(94095, 94098, 1), new Range32.ptr(113821, 113822, 1), new Range32.ptr(119141, 119145, 1), new Range32.ptr(119149, 119154, 1), new Range32.ptr(119163, 119170, 1), new Range32.ptr(119173, 119179, 1), new Range32.ptr(119210, 119213, 1), new Range32.ptr(119362, 119364, 1), new Range32.ptr(125136, 125142, 1), new Range32.ptr(917760, 917999, 1)]), 0);
		_N = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(178, 179, 1), new Range16.ptr(185, 188, 3), new Range16.ptr(189, 190, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2548, 2553, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(2930, 2935, 1), new Range16.ptr(3046, 3058, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3192, 3198, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3445, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3891, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(4969, 4988, 1), new Range16.ptr(5870, 5872, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6128, 6137, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6618, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(8304, 8308, 4), new Range16.ptr(8309, 8313, 1), new Range16.ptr(8320, 8329, 1), new Range16.ptr(8528, 8578, 1), new Range16.ptr(8581, 8585, 1), new Range16.ptr(9312, 9371, 1), new Range16.ptr(9450, 9471, 1), new Range16.ptr(10102, 10131, 1), new Range16.ptr(11517, 12295, 778), new Range16.ptr(12321, 12329, 1), new Range16.ptr(12344, 12346, 1), new Range16.ptr(12690, 12693, 1), new Range16.ptr(12832, 12841, 1), new Range16.ptr(12872, 12879, 1), new Range16.ptr(12881, 12895, 1), new Range16.ptr(12928, 12937, 1), new Range16.ptr(12977, 12991, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(42726, 42735, 1), new Range16.ptr(43056, 43061, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(65799, 65843, 1), new Range32.ptr(65856, 65912, 1), new Range32.ptr(65930, 65931, 1), new Range32.ptr(66273, 66299, 1), new Range32.ptr(66336, 66339, 1), new Range32.ptr(66369, 66378, 9), new Range32.ptr(66513, 66517, 1), new Range32.ptr(66720, 66729, 1), new Range32.ptr(67672, 67679, 1), new Range32.ptr(67705, 67711, 1), new Range32.ptr(67751, 67759, 1), new Range32.ptr(67862, 67867, 1), new Range32.ptr(68160, 68167, 1), new Range32.ptr(68221, 68222, 1), new Range32.ptr(68253, 68255, 1), new Range32.ptr(68331, 68335, 1), new Range32.ptr(68440, 68447, 1), new Range32.ptr(68472, 68479, 1), new Range32.ptr(68521, 68527, 1), new Range32.ptr(69216, 69246, 1), new Range32.ptr(69714, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70113, 70132, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71904, 71922, 1), new Range32.ptr(74752, 74862, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(93019, 93025, 1), new Range32.ptr(119648, 119665, 1), new Range32.ptr(120782, 120831, 1), new Range32.ptr(125127, 125135, 1), new Range32.ptr(127232, 127244, 1)]), 4);
		_Nd = new RangeTable.ptr(new sliceType([new Range16.ptr(48, 57, 1), new Range16.ptr(1632, 1641, 1), new Range16.ptr(1776, 1785, 1), new Range16.ptr(1984, 1993, 1), new Range16.ptr(2406, 2415, 1), new Range16.ptr(2534, 2543, 1), new Range16.ptr(2662, 2671, 1), new Range16.ptr(2790, 2799, 1), new Range16.ptr(2918, 2927, 1), new Range16.ptr(3046, 3055, 1), new Range16.ptr(3174, 3183, 1), new Range16.ptr(3302, 3311, 1), new Range16.ptr(3430, 3439, 1), new Range16.ptr(3558, 3567, 1), new Range16.ptr(3664, 3673, 1), new Range16.ptr(3792, 3801, 1), new Range16.ptr(3872, 3881, 1), new Range16.ptr(4160, 4169, 1), new Range16.ptr(4240, 4249, 1), new Range16.ptr(6112, 6121, 1), new Range16.ptr(6160, 6169, 1), new Range16.ptr(6470, 6479, 1), new Range16.ptr(6608, 6617, 1), new Range16.ptr(6784, 6793, 1), new Range16.ptr(6800, 6809, 1), new Range16.ptr(6992, 7001, 1), new Range16.ptr(7088, 7097, 1), new Range16.ptr(7232, 7241, 1), new Range16.ptr(7248, 7257, 1), new Range16.ptr(42528, 42537, 1), new Range16.ptr(43216, 43225, 1), new Range16.ptr(43264, 43273, 1), new Range16.ptr(43472, 43481, 1), new Range16.ptr(43504, 43513, 1), new Range16.ptr(43600, 43609, 1), new Range16.ptr(44016, 44025, 1), new Range16.ptr(65296, 65305, 1)]), new sliceType$1([new Range32.ptr(66720, 66729, 1), new Range32.ptr(69734, 69743, 1), new Range32.ptr(69872, 69881, 1), new Range32.ptr(69942, 69951, 1), new Range32.ptr(70096, 70105, 1), new Range32.ptr(70384, 70393, 1), new Range32.ptr(70864, 70873, 1), new Range32.ptr(71248, 71257, 1), new Range32.ptr(71360, 71369, 1), new Range32.ptr(71904, 71913, 1), new Range32.ptr(92768, 92777, 1), new Range32.ptr(93008, 93017, 1), new Range32.ptr(120782, 120831, 1)]), 1);
		_P = new RangeTable.ptr(new sliceType([new Range16.ptr(33, 35, 1), new Range16.ptr(37, 42, 1), new Range16.ptr(44, 47, 1), new Range16.ptr(58, 59, 1), new Range16.ptr(63, 64, 1), new Range16.ptr(91, 93, 1), new Range16.ptr(95, 123, 28), new Range16.ptr(125, 161, 36), new Range16.ptr(167, 171, 4), new Range16.ptr(182, 183, 1), new Range16.ptr(187, 191, 4), new Range16.ptr(894, 903, 9), new Range16.ptr(1370, 1375, 1), new Range16.ptr(1417, 1418, 1), new Range16.ptr(1470, 1472, 2), new Range16.ptr(1475, 1478, 3), new Range16.ptr(1523, 1524, 1), new Range16.ptr(1545, 1546, 1), new Range16.ptr(1548, 1549, 1), new Range16.ptr(1563, 1566, 3), new Range16.ptr(1567, 1642, 75), new Range16.ptr(1643, 1645, 1), new Range16.ptr(1748, 1792, 44), new Range16.ptr(1793, 1805, 1), new Range16.ptr(2039, 2041, 1), new Range16.ptr(2096, 2110, 1), new Range16.ptr(2142, 2404, 262), new Range16.ptr(2405, 2416, 11), new Range16.ptr(2800, 3572, 772), new Range16.ptr(3663, 3674, 11), new Range16.ptr(3675, 3844, 169), new Range16.ptr(3845, 3858, 1), new Range16.ptr(3860, 3898, 38), new Range16.ptr(3899, 3901, 1), new Range16.ptr(3973, 4048, 75), new Range16.ptr(4049, 4052, 1), new Range16.ptr(4057, 4058, 1), new Range16.ptr(4170, 4175, 1), new Range16.ptr(4347, 4960, 613), new Range16.ptr(4961, 4968, 1), new Range16.ptr(5120, 5741, 621), new Range16.ptr(5742, 5787, 45), new Range16.ptr(5788, 5867, 79), new Range16.ptr(5868, 5869, 1), new Range16.ptr(5941, 5942, 1), new Range16.ptr(6100, 6102, 1), new Range16.ptr(6104, 6106, 1), new Range16.ptr(6144, 6154, 1), new Range16.ptr(6468, 6469, 1), new Range16.ptr(6686, 6687, 1), new Range16.ptr(6816, 6822, 1), new Range16.ptr(6824, 6829, 1), new Range16.ptr(7002, 7008, 1), new Range16.ptr(7164, 7167, 1), new Range16.ptr(7227, 7231, 1), new Range16.ptr(7294, 7295, 1), new Range16.ptr(7360, 7367, 1), new Range16.ptr(7379, 8208, 829), new Range16.ptr(8209, 8231, 1), new Range16.ptr(8240, 8259, 1), new Range16.ptr(8261, 8273, 1), new Range16.ptr(8275, 8286, 1), new Range16.ptr(8317, 8318, 1), new Range16.ptr(8333, 8334, 1), new Range16.ptr(8968, 8971, 1), new Range16.ptr(9001, 9002, 1), new Range16.ptr(10088, 10101, 1), new Range16.ptr(10181, 10182, 1), new Range16.ptr(10214, 10223, 1), new Range16.ptr(10627, 10648, 1), new Range16.ptr(10712, 10715, 1), new Range16.ptr(10748, 10749, 1), new Range16.ptr(11513, 11516, 1), new Range16.ptr(11518, 11519, 1), new Range16.ptr(11632, 11776, 144), new Range16.ptr(11777, 11822, 1), new Range16.ptr(11824, 11842, 1), new Range16.ptr(12289, 12291, 1), new Range16.ptr(12296, 12305, 1), new Range16.ptr(12308, 12319, 1), new Range16.ptr(12336, 12349, 13), new Range16.ptr(12448, 12539, 91), new Range16.ptr(42238, 42239, 1), new Range16.ptr(42509, 42511, 1), new Range16.ptr(42611, 42622, 11), new Range16.ptr(42738, 42743, 1), new Range16.ptr(43124, 43127, 1), new Range16.ptr(43214, 43215, 1), new Range16.ptr(43256, 43258, 1), new Range16.ptr(43310, 43311, 1), new Range16.ptr(43359, 43457, 98), new Range16.ptr(43458, 43469, 1), new Range16.ptr(43486, 43487, 1), new Range16.ptr(43612, 43615, 1), new Range16.ptr(43742, 43743, 1), new Range16.ptr(43760, 43761, 1), new Range16.ptr(44011, 64830, 20819), new Range16.ptr(64831, 65040, 209), new Range16.ptr(65041, 65049, 1), new Range16.ptr(65072, 65106, 1), new Range16.ptr(65108, 65121, 1), new Range16.ptr(65123, 65128, 5), new Range16.ptr(65130, 65131, 1), new Range16.ptr(65281, 65283, 1), new Range16.ptr(65285, 65290, 1), new Range16.ptr(65292, 65295, 1), new Range16.ptr(65306, 65307, 1), new Range16.ptr(65311, 65312, 1), new Range16.ptr(65339, 65341, 1), new Range16.ptr(65343, 65371, 28), new Range16.ptr(65373, 65375, 2), new Range16.ptr(65376, 65381, 1)]), new sliceType$1([new Range32.ptr(65792, 65794, 1), new Range32.ptr(66463, 66512, 49), new Range32.ptr(66927, 67671, 744), new Range32.ptr(67871, 67903, 32), new Range32.ptr(68176, 68184, 1), new Range32.ptr(68223, 68336, 113), new Range32.ptr(68337, 68342, 1), new Range32.ptr(68409, 68415, 1), new Range32.ptr(68505, 68508, 1), new Range32.ptr(69703, 69709, 1), new Range32.ptr(69819, 69820, 1), new Range32.ptr(69822, 69825, 1), new Range32.ptr(69952, 69955, 1), new Range32.ptr(70004, 70005, 1), new Range32.ptr(70085, 70088, 1), new Range32.ptr(70093, 70200, 107), new Range32.ptr(70201, 70205, 1), new Range32.ptr(70854, 71105, 251), new Range32.ptr(71106, 71113, 1), new Range32.ptr(71233, 71235, 1), new Range32.ptr(74864, 74868, 1), new Range32.ptr(92782, 92783, 1), new Range32.ptr(92917, 92983, 66), new Range32.ptr(92984, 92987, 1), new Range32.ptr(92996, 113823, 20827)]), 11);
		_S = new RangeTable.ptr(new sliceType([new Range16.ptr(36, 43, 7), new Range16.ptr(60, 62, 1), new Range16.ptr(94, 96, 2), new Range16.ptr(124, 126, 2), new Range16.ptr(162, 166, 1), new Range16.ptr(168, 169, 1), new Range16.ptr(172, 174, 2), new Range16.ptr(175, 177, 1), new Range16.ptr(180, 184, 4), new Range16.ptr(215, 247, 32), new Range16.ptr(706, 709, 1), new Range16.ptr(722, 735, 1), new Range16.ptr(741, 747, 1), new Range16.ptr(749, 751, 2), new Range16.ptr(752, 767, 1), new Range16.ptr(885, 900, 15), new Range16.ptr(901, 1014, 113), new Range16.ptr(1154, 1421, 267), new Range16.ptr(1422, 1423, 1), new Range16.ptr(1542, 1544, 1), new Range16.ptr(1547, 1550, 3), new Range16.ptr(1551, 1758, 207), new Range16.ptr(1769, 1789, 20), new Range16.ptr(1790, 2038, 248), new Range16.ptr(2546, 2547, 1), new Range16.ptr(2554, 2555, 1), new Range16.ptr(2801, 2928, 127), new Range16.ptr(3059, 3066, 1), new Range16.ptr(3199, 3449, 250), new Range16.ptr(3647, 3841, 194), new Range16.ptr(3842, 3843, 1), new Range16.ptr(3859, 3861, 2), new Range16.ptr(3862, 3863, 1), new Range16.ptr(3866, 3871, 1), new Range16.ptr(3892, 3896, 2), new Range16.ptr(4030, 4037, 1), new Range16.ptr(4039, 4044, 1), new Range16.ptr(4046, 4047, 1), new Range16.ptr(4053, 4056, 1), new Range16.ptr(4254, 4255, 1), new Range16.ptr(5008, 5017, 1), new Range16.ptr(6107, 6464, 357), new Range16.ptr(6622, 6655, 1), new Range16.ptr(7009, 7018, 1), new Range16.ptr(7028, 7036, 1), new Range16.ptr(8125, 8127, 2), new Range16.ptr(8128, 8129, 1), new Range16.ptr(8141, 8143, 1), new Range16.ptr(8157, 8159, 1), new Range16.ptr(8173, 8175, 1), new Range16.ptr(8189, 8190, 1), new Range16.ptr(8260, 8274, 14), new Range16.ptr(8314, 8316, 1), new Range16.ptr(8330, 8332, 1), new Range16.ptr(8352, 8381, 1), new Range16.ptr(8448, 8449, 1), new Range16.ptr(8451, 8454, 1), new Range16.ptr(8456, 8457, 1), new Range16.ptr(8468, 8470, 2), new Range16.ptr(8471, 8472, 1), new Range16.ptr(8478, 8483, 1), new Range16.ptr(8485, 8489, 2), new Range16.ptr(8494, 8506, 12), new Range16.ptr(8507, 8512, 5), new Range16.ptr(8513, 8516, 1), new Range16.ptr(8522, 8525, 1), new Range16.ptr(8527, 8592, 65), new Range16.ptr(8593, 8967, 1), new Range16.ptr(8972, 9000, 1), new Range16.ptr(9003, 9210, 1), new Range16.ptr(9216, 9254, 1), new Range16.ptr(9280, 9290, 1), new Range16.ptr(9372, 9449, 1), new Range16.ptr(9472, 10087, 1), new Range16.ptr(10132, 10180, 1), new Range16.ptr(10183, 10213, 1), new Range16.ptr(10224, 10626, 1), new Range16.ptr(10649, 10711, 1), new Range16.ptr(10716, 10747, 1), new Range16.ptr(10750, 11123, 1), new Range16.ptr(11126, 11157, 1), new Range16.ptr(11160, 11193, 1), new Range16.ptr(11197, 11208, 1), new Range16.ptr(11210, 11217, 1), new Range16.ptr(11493, 11498, 1), new Range16.ptr(11904, 11929, 1), new Range16.ptr(11931, 12019, 1), new Range16.ptr(12032, 12245, 1), new Range16.ptr(12272, 12283, 1), new Range16.ptr(12292, 12306, 14), new Range16.ptr(12307, 12320, 13), new Range16.ptr(12342, 12343, 1), new Range16.ptr(12350, 12351, 1), new Range16.ptr(12443, 12444, 1), new Range16.ptr(12688, 12689, 1), new Range16.ptr(12694, 12703, 1), new Range16.ptr(12736, 12771, 1), new Range16.ptr(12800, 12830, 1), new Range16.ptr(12842, 12871, 1), new Range16.ptr(12880, 12896, 16), new Range16.ptr(12897, 12927, 1), new Range16.ptr(12938, 12976, 1), new Range16.ptr(12992, 13054, 1), new Range16.ptr(13056, 13311, 1), new Range16.ptr(19904, 19967, 1), new Range16.ptr(42128, 42182, 1), new Range16.ptr(42752, 42774, 1), new Range16.ptr(42784, 42785, 1), new Range16.ptr(42889, 42890, 1), new Range16.ptr(43048, 43051, 1), new Range16.ptr(43062, 43065, 1), new Range16.ptr(43639, 43641, 1), new Range16.ptr(43867, 64297, 20430), new Range16.ptr(64434, 64449, 1), new Range16.ptr(65020, 65021, 1), new Range16.ptr(65122, 65124, 2), new Range16.ptr(65125, 65126, 1), new Range16.ptr(65129, 65284, 155), new Range16.ptr(65291, 65308, 17), new Range16.ptr(65309, 65310, 1), new Range16.ptr(65342, 65344, 2), new Range16.ptr(65372, 65374, 2), new Range16.ptr(65504, 65510, 1), new Range16.ptr(65512, 65518, 1), new Range16.ptr(65532, 65533, 1)]), new sliceType$1([new Range32.ptr(65847, 65855, 1), new Range32.ptr(65913, 65929, 1), new Range32.ptr(65932, 65936, 4), new Range32.ptr(65937, 65947, 1), new Range32.ptr(65952, 66000, 48), new Range32.ptr(66001, 66044, 1), new Range32.ptr(67703, 67704, 1), new Range32.ptr(68296, 92988, 24692), new Range32.ptr(92989, 92991, 1), new Range32.ptr(92997, 113820, 20823), new Range32.ptr(118784, 119029, 1), new Range32.ptr(119040, 119078, 1), new Range32.ptr(119081, 119140, 1), new Range32.ptr(119146, 119148, 1), new Range32.ptr(119171, 119172, 1), new Range32.ptr(119180, 119209, 1), new Range32.ptr(119214, 119261, 1), new Range32.ptr(119296, 119361, 1), new Range32.ptr(119365, 119552, 187), new Range32.ptr(119553, 119638, 1), new Range32.ptr(120513, 120539, 26), new Range32.ptr(120571, 120597, 26), new Range32.ptr(120629, 120655, 26), new Range32.ptr(120687, 120713, 26), new Range32.ptr(120745, 120771, 26), new Range32.ptr(126704, 126705, 1), new Range32.ptr(126976, 127019, 1), new Range32.ptr(127024, 127123, 1), new Range32.ptr(127136, 127150, 1), new Range32.ptr(127153, 127167, 1), new Range32.ptr(127169, 127183, 1), new Range32.ptr(127185, 127221, 1), new Range32.ptr(127248, 127278, 1), new Range32.ptr(127280, 127339, 1), new Range32.ptr(127344, 127386, 1), new Range32.ptr(127462, 127490, 1), new Range32.ptr(127504, 127546, 1), new Range32.ptr(127552, 127560, 1), new Range32.ptr(127568, 127569, 1), new Range32.ptr(127744, 127788, 1), new Range32.ptr(127792, 127869, 1), new Range32.ptr(127872, 127950, 1), new Range32.ptr(127956, 127991, 1), new Range32.ptr(128000, 128254, 1), new Range32.ptr(128256, 128330, 1), new Range32.ptr(128336, 128377, 1), new Range32.ptr(128379, 128419, 1), new Range32.ptr(128421, 128578, 1), new Range32.ptr(128581, 128719, 1), new Range32.ptr(128736, 128748, 1), new Range32.ptr(128752, 128755, 1), new Range32.ptr(128768, 128883, 1), new Range32.ptr(128896, 128980, 1), new Range32.ptr(129024, 129035, 1), new Range32.ptr(129040, 129095, 1), new Range32.ptr(129104, 129113, 1), new Range32.ptr(129120, 129159, 1), new Range32.ptr(129168, 129197, 1)]), 10);
		$pkg.Digit = _Nd;
		$pkg.Letter = _L;
		$pkg.L = _L;
		$pkg.M = _M;
		$pkg.N = _N;
		$pkg.P = _P;
		$pkg.S = _S;
		$pkg.PrintRanges = new sliceType$2([$pkg.L, $pkg.M, $pkg.N, $pkg.P, $pkg.S]);
		_White_Space = new RangeTable.ptr(new sliceType([new Range16.ptr(9, 13, 1), new Range16.ptr(32, 32, 1), new Range16.ptr(133, 133, 1), new Range16.ptr(160, 160, 1), new Range16.ptr(5760, 5760, 1), new Range16.ptr(8192, 8202, 1), new Range16.ptr(8232, 8233, 1), new Range16.ptr(8239, 8239, 1), new Range16.ptr(8287, 8287, 1), new Range16.ptr(12288, 12288, 1)]), sliceType$1.nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new sliceType$3([new CaseRange.ptr(65, 90, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(97, 122, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(181, 181, $toNativeArray($kindInt32, [743, 0, 743])), new CaseRange.ptr(192, 214, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(216, 222, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(224, 246, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(248, 254, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(255, 255, $toNativeArray($kindInt32, [121, 0, 121])), new CaseRange.ptr(256, 303, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(304, 304, $toNativeArray($kindInt32, [0, -199, 0])), new CaseRange.ptr(305, 305, $toNativeArray($kindInt32, [-232, 0, -232])), new CaseRange.ptr(306, 311, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(313, 328, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(330, 375, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(376, 376, $toNativeArray($kindInt32, [0, -121, 0])), new CaseRange.ptr(377, 382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(383, 383, $toNativeArray($kindInt32, [-300, 0, -300])), new CaseRange.ptr(384, 384, $toNativeArray($kindInt32, [195, 0, 195])), new CaseRange.ptr(385, 385, $toNativeArray($kindInt32, [0, 210, 0])), new CaseRange.ptr(386, 389, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(390, 390, $toNativeArray($kindInt32, [0, 206, 0])), new CaseRange.ptr(391, 392, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(393, 394, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(395, 396, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(398, 398, $toNativeArray($kindInt32, [0, 79, 0])), new CaseRange.ptr(399, 399, $toNativeArray($kindInt32, [0, 202, 0])), new CaseRange.ptr(400, 400, $toNativeArray($kindInt32, [0, 203, 0])), new CaseRange.ptr(401, 402, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(403, 403, $toNativeArray($kindInt32, [0, 205, 0])), new CaseRange.ptr(404, 404, $toNativeArray($kindInt32, [0, 207, 0])), new CaseRange.ptr(405, 405, $toNativeArray($kindInt32, [97, 0, 97])), new CaseRange.ptr(406, 406, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(407, 407, $toNativeArray($kindInt32, [0, 209, 0])), new CaseRange.ptr(408, 409, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(410, 410, $toNativeArray($kindInt32, [163, 0, 163])), new CaseRange.ptr(412, 412, $toNativeArray($kindInt32, [0, 211, 0])), new CaseRange.ptr(413, 413, $toNativeArray($kindInt32, [0, 213, 0])), new CaseRange.ptr(414, 414, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(415, 415, $toNativeArray($kindInt32, [0, 214, 0])), new CaseRange.ptr(416, 421, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(422, 422, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(423, 424, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(425, 425, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(428, 429, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(430, 430, $toNativeArray($kindInt32, [0, 218, 0])), new CaseRange.ptr(431, 432, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(433, 434, $toNativeArray($kindInt32, [0, 217, 0])), new CaseRange.ptr(435, 438, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(439, 439, $toNativeArray($kindInt32, [0, 219, 0])), new CaseRange.ptr(440, 441, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(444, 445, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(447, 447, $toNativeArray($kindInt32, [56, 0, 56])), new CaseRange.ptr(452, 452, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(453, 453, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(454, 454, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(455, 455, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(456, 456, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(457, 457, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(458, 458, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(459, 459, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(460, 460, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(461, 476, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(477, 477, $toNativeArray($kindInt32, [-79, 0, -79])), new CaseRange.ptr(478, 495, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(497, 497, $toNativeArray($kindInt32, [0, 2, 1])), new CaseRange.ptr(498, 498, $toNativeArray($kindInt32, [-1, 1, 0])), new CaseRange.ptr(499, 499, $toNativeArray($kindInt32, [-2, 0, -1])), new CaseRange.ptr(500, 501, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(502, 502, $toNativeArray($kindInt32, [0, -97, 0])), new CaseRange.ptr(503, 503, $toNativeArray($kindInt32, [0, -56, 0])), new CaseRange.ptr(504, 543, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(544, 544, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(546, 563, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(570, 570, $toNativeArray($kindInt32, [0, 10795, 0])), new CaseRange.ptr(571, 572, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(573, 573, $toNativeArray($kindInt32, [0, -163, 0])), new CaseRange.ptr(574, 574, $toNativeArray($kindInt32, [0, 10792, 0])), new CaseRange.ptr(575, 576, $toNativeArray($kindInt32, [10815, 0, 10815])), new CaseRange.ptr(577, 578, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(579, 579, $toNativeArray($kindInt32, [0, -195, 0])), new CaseRange.ptr(580, 580, $toNativeArray($kindInt32, [0, 69, 0])), new CaseRange.ptr(581, 581, $toNativeArray($kindInt32, [0, 71, 0])), new CaseRange.ptr(582, 591, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(592, 592, $toNativeArray($kindInt32, [10783, 0, 10783])), new CaseRange.ptr(593, 593, $toNativeArray($kindInt32, [10780, 0, 10780])), new CaseRange.ptr(594, 594, $toNativeArray($kindInt32, [10782, 0, 10782])), new CaseRange.ptr(595, 595, $toNativeArray($kindInt32, [-210, 0, -210])), new CaseRange.ptr(596, 596, $toNativeArray($kindInt32, [-206, 0, -206])), new CaseRange.ptr(598, 599, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(601, 601, $toNativeArray($kindInt32, [-202, 0, -202])), new CaseRange.ptr(603, 603, $toNativeArray($kindInt32, [-203, 0, -203])), new CaseRange.ptr(604, 604, $toNativeArray($kindInt32, [42319, 0, 42319])), new CaseRange.ptr(608, 608, $toNativeArray($kindInt32, [-205, 0, -205])), new CaseRange.ptr(609, 609, $toNativeArray($kindInt32, [42315, 0, 42315])), new CaseRange.ptr(611, 611, $toNativeArray($kindInt32, [-207, 0, -207])), new CaseRange.ptr(613, 613, $toNativeArray($kindInt32, [42280, 0, 42280])), new CaseRange.ptr(614, 614, $toNativeArray($kindInt32, [42308, 0, 42308])), new CaseRange.ptr(616, 616, $toNativeArray($kindInt32, [-209, 0, -209])), new CaseRange.ptr(617, 617, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(619, 619, $toNativeArray($kindInt32, [10743, 0, 10743])), new CaseRange.ptr(620, 620, $toNativeArray($kindInt32, [42305, 0, 42305])), new CaseRange.ptr(623, 623, $toNativeArray($kindInt32, [-211, 0, -211])), new CaseRange.ptr(625, 625, $toNativeArray($kindInt32, [10749, 0, 10749])), new CaseRange.ptr(626, 626, $toNativeArray($kindInt32, [-213, 0, -213])), new CaseRange.ptr(629, 629, $toNativeArray($kindInt32, [-214, 0, -214])), new CaseRange.ptr(637, 637, $toNativeArray($kindInt32, [10727, 0, 10727])), new CaseRange.ptr(640, 640, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(643, 643, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(647, 647, $toNativeArray($kindInt32, [42282, 0, 42282])), new CaseRange.ptr(648, 648, $toNativeArray($kindInt32, [-218, 0, -218])), new CaseRange.ptr(649, 649, $toNativeArray($kindInt32, [-69, 0, -69])), new CaseRange.ptr(650, 651, $toNativeArray($kindInt32, [-217, 0, -217])), new CaseRange.ptr(652, 652, $toNativeArray($kindInt32, [-71, 0, -71])), new CaseRange.ptr(658, 658, $toNativeArray($kindInt32, [-219, 0, -219])), new CaseRange.ptr(670, 670, $toNativeArray($kindInt32, [42258, 0, 42258])), new CaseRange.ptr(837, 837, $toNativeArray($kindInt32, [84, 0, 84])), new CaseRange.ptr(880, 883, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(886, 887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(891, 893, $toNativeArray($kindInt32, [130, 0, 130])), new CaseRange.ptr(895, 895, $toNativeArray($kindInt32, [0, 116, 0])), new CaseRange.ptr(902, 902, $toNativeArray($kindInt32, [0, 38, 0])), new CaseRange.ptr(904, 906, $toNativeArray($kindInt32, [0, 37, 0])), new CaseRange.ptr(908, 908, $toNativeArray($kindInt32, [0, 64, 0])), new CaseRange.ptr(910, 911, $toNativeArray($kindInt32, [0, 63, 0])), new CaseRange.ptr(913, 929, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(931, 939, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(940, 940, $toNativeArray($kindInt32, [-38, 0, -38])), new CaseRange.ptr(941, 943, $toNativeArray($kindInt32, [-37, 0, -37])), new CaseRange.ptr(945, 961, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(962, 962, $toNativeArray($kindInt32, [-31, 0, -31])), new CaseRange.ptr(963, 971, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(972, 972, $toNativeArray($kindInt32, [-64, 0, -64])), new CaseRange.ptr(973, 974, $toNativeArray($kindInt32, [-63, 0, -63])), new CaseRange.ptr(975, 975, $toNativeArray($kindInt32, [0, 8, 0])), new CaseRange.ptr(976, 976, $toNativeArray($kindInt32, [-62, 0, -62])), new CaseRange.ptr(977, 977, $toNativeArray($kindInt32, [-57, 0, -57])), new CaseRange.ptr(981, 981, $toNativeArray($kindInt32, [-47, 0, -47])), new CaseRange.ptr(982, 982, $toNativeArray($kindInt32, [-54, 0, -54])), new CaseRange.ptr(983, 983, $toNativeArray($kindInt32, [-8, 0, -8])), new CaseRange.ptr(984, 1007, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1008, 1008, $toNativeArray($kindInt32, [-86, 0, -86])), new CaseRange.ptr(1009, 1009, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1010, 1010, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(1011, 1011, $toNativeArray($kindInt32, [-116, 0, -116])), new CaseRange.ptr(1012, 1012, $toNativeArray($kindInt32, [0, -60, 0])), new CaseRange.ptr(1013, 1013, $toNativeArray($kindInt32, [-96, 0, -96])), new CaseRange.ptr(1015, 1016, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1017, 1017, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(1018, 1019, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1021, 1023, $toNativeArray($kindInt32, [0, -130, 0])), new CaseRange.ptr(1024, 1039, $toNativeArray($kindInt32, [0, 80, 0])), new CaseRange.ptr(1040, 1071, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(1072, 1103, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(1104, 1119, $toNativeArray($kindInt32, [-80, 0, -80])), new CaseRange.ptr(1120, 1153, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1162, 1215, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1216, 1216, $toNativeArray($kindInt32, [0, 15, 0])), new CaseRange.ptr(1217, 1230, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1231, 1231, $toNativeArray($kindInt32, [-15, 0, -15])), new CaseRange.ptr(1232, 1327, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(1329, 1366, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(1377, 1414, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(4256, 4293, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4295, 4295, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(4301, 4301, $toNativeArray($kindInt32, [0, 7264, 0])), new CaseRange.ptr(7545, 7545, $toNativeArray($kindInt32, [35332, 0, 35332])), new CaseRange.ptr(7549, 7549, $toNativeArray($kindInt32, [3814, 0, 3814])), new CaseRange.ptr(7680, 7829, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7835, 7835, $toNativeArray($kindInt32, [-59, 0, -59])), new CaseRange.ptr(7838, 7838, $toNativeArray($kindInt32, [0, -7615, 0])), new CaseRange.ptr(7840, 7935, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(7936, 7943, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7944, 7951, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7952, 7957, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7960, 7965, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7968, 7975, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7976, 7983, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(7984, 7991, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(7992, 7999, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8000, 8005, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8008, 8013, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8017, 8017, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8019, 8019, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8021, 8021, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8023, 8023, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8025, 8025, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8027, 8027, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8029, 8029, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8031, 8031, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8032, 8039, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8040, 8047, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8048, 8049, $toNativeArray($kindInt32, [74, 0, 74])), new CaseRange.ptr(8050, 8053, $toNativeArray($kindInt32, [86, 0, 86])), new CaseRange.ptr(8054, 8055, $toNativeArray($kindInt32, [100, 0, 100])), new CaseRange.ptr(8056, 8057, $toNativeArray($kindInt32, [128, 0, 128])), new CaseRange.ptr(8058, 8059, $toNativeArray($kindInt32, [112, 0, 112])), new CaseRange.ptr(8060, 8061, $toNativeArray($kindInt32, [126, 0, 126])), new CaseRange.ptr(8064, 8071, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8072, 8079, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8080, 8087, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8088, 8095, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8096, 8103, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8104, 8111, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8112, 8113, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8115, 8115, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8120, 8121, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8122, 8123, $toNativeArray($kindInt32, [0, -74, 0])), new CaseRange.ptr(8124, 8124, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8126, 8126, $toNativeArray($kindInt32, [-7205, 0, -7205])), new CaseRange.ptr(8131, 8131, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8136, 8139, $toNativeArray($kindInt32, [0, -86, 0])), new CaseRange.ptr(8140, 8140, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8144, 8145, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8152, 8153, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8154, 8155, $toNativeArray($kindInt32, [0, -100, 0])), new CaseRange.ptr(8160, 8161, $toNativeArray($kindInt32, [8, 0, 8])), new CaseRange.ptr(8165, 8165, $toNativeArray($kindInt32, [7, 0, 7])), new CaseRange.ptr(8168, 8169, $toNativeArray($kindInt32, [0, -8, 0])), new CaseRange.ptr(8170, 8171, $toNativeArray($kindInt32, [0, -112, 0])), new CaseRange.ptr(8172, 8172, $toNativeArray($kindInt32, [0, -7, 0])), new CaseRange.ptr(8179, 8179, $toNativeArray($kindInt32, [9, 0, 9])), new CaseRange.ptr(8184, 8185, $toNativeArray($kindInt32, [0, -128, 0])), new CaseRange.ptr(8186, 8187, $toNativeArray($kindInt32, [0, -126, 0])), new CaseRange.ptr(8188, 8188, $toNativeArray($kindInt32, [0, -9, 0])), new CaseRange.ptr(8486, 8486, $toNativeArray($kindInt32, [0, -7517, 0])), new CaseRange.ptr(8490, 8490, $toNativeArray($kindInt32, [0, -8383, 0])), new CaseRange.ptr(8491, 8491, $toNativeArray($kindInt32, [0, -8262, 0])), new CaseRange.ptr(8498, 8498, $toNativeArray($kindInt32, [0, 28, 0])), new CaseRange.ptr(8526, 8526, $toNativeArray($kindInt32, [-28, 0, -28])), new CaseRange.ptr(8544, 8559, $toNativeArray($kindInt32, [0, 16, 0])), new CaseRange.ptr(8560, 8575, $toNativeArray($kindInt32, [-16, 0, -16])), new CaseRange.ptr(8579, 8580, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(9398, 9423, $toNativeArray($kindInt32, [0, 26, 0])), new CaseRange.ptr(9424, 9449, $toNativeArray($kindInt32, [-26, 0, -26])), new CaseRange.ptr(11264, 11310, $toNativeArray($kindInt32, [0, 48, 0])), new CaseRange.ptr(11312, 11358, $toNativeArray($kindInt32, [-48, 0, -48])), new CaseRange.ptr(11360, 11361, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11362, 11362, $toNativeArray($kindInt32, [0, -10743, 0])), new CaseRange.ptr(11363, 11363, $toNativeArray($kindInt32, [0, -3814, 0])), new CaseRange.ptr(11364, 11364, $toNativeArray($kindInt32, [0, -10727, 0])), new CaseRange.ptr(11365, 11365, $toNativeArray($kindInt32, [-10795, 0, -10795])), new CaseRange.ptr(11366, 11366, $toNativeArray($kindInt32, [-10792, 0, -10792])), new CaseRange.ptr(11367, 11372, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11373, 11373, $toNativeArray($kindInt32, [0, -10780, 0])), new CaseRange.ptr(11374, 11374, $toNativeArray($kindInt32, [0, -10749, 0])), new CaseRange.ptr(11375, 11375, $toNativeArray($kindInt32, [0, -10783, 0])), new CaseRange.ptr(11376, 11376, $toNativeArray($kindInt32, [0, -10782, 0])), new CaseRange.ptr(11378, 11379, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11381, 11382, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11390, 11391, $toNativeArray($kindInt32, [0, -10815, 0])), new CaseRange.ptr(11392, 11491, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11499, 11502, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11506, 11507, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(11520, 11557, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11559, 11559, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(11565, 11565, $toNativeArray($kindInt32, [-7264, 0, -7264])), new CaseRange.ptr(42560, 42605, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42624, 42651, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42786, 42799, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42802, 42863, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42873, 42876, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42877, 42877, $toNativeArray($kindInt32, [0, -35332, 0])), new CaseRange.ptr(42878, 42887, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42891, 42892, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42893, 42893, $toNativeArray($kindInt32, [0, -42280, 0])), new CaseRange.ptr(42896, 42899, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42902, 42921, $toNativeArray($kindInt32, [1114112, 1114112, 1114112])), new CaseRange.ptr(42922, 42922, $toNativeArray($kindInt32, [0, -42308, 0])), new CaseRange.ptr(42923, 42923, $toNativeArray($kindInt32, [0, -42319, 0])), new CaseRange.ptr(42924, 42924, $toNativeArray($kindInt32, [0, -42315, 0])), new CaseRange.ptr(42925, 42925, $toNativeArray($kindInt32, [0, -42305, 0])), new CaseRange.ptr(42928, 42928, $toNativeArray($kindInt32, [0, -42258, 0])), new CaseRange.ptr(42929, 42929, $toNativeArray($kindInt32, [0, -42282, 0])), new CaseRange.ptr(65313, 65338, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(65345, 65370, $toNativeArray($kindInt32, [-32, 0, -32])), new CaseRange.ptr(66560, 66599, $toNativeArray($kindInt32, [0, 40, 0])), new CaseRange.ptr(66600, 66639, $toNativeArray($kindInt32, [-40, 0, -40])), new CaseRange.ptr(71840, 71871, $toNativeArray($kindInt32, [0, 32, 0])), new CaseRange.ptr(71872, 71903, $toNativeArray($kindInt32, [-32, 0, -32]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray($kindUint8, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		caseOrbit = new sliceType$4([new foldPair.ptr(75, 107), new foldPair.ptr(83, 115), new foldPair.ptr(107, 8490), new foldPair.ptr(115, 383), new foldPair.ptr(181, 924), new foldPair.ptr(197, 229), new foldPair.ptr(223, 7838), new foldPair.ptr(229, 8491), new foldPair.ptr(304, 304), new foldPair.ptr(305, 305), new foldPair.ptr(383, 83), new foldPair.ptr(452, 453), new foldPair.ptr(453, 454), new foldPair.ptr(454, 452), new foldPair.ptr(455, 456), new foldPair.ptr(456, 457), new foldPair.ptr(457, 455), new foldPair.ptr(458, 459), new foldPair.ptr(459, 460), new foldPair.ptr(460, 458), new foldPair.ptr(497, 498), new foldPair.ptr(498, 499), new foldPair.ptr(499, 497), new foldPair.ptr(837, 921), new foldPair.ptr(914, 946), new foldPair.ptr(917, 949), new foldPair.ptr(920, 952), new foldPair.ptr(921, 953), new foldPair.ptr(922, 954), new foldPair.ptr(924, 956), new foldPair.ptr(928, 960), new foldPair.ptr(929, 961), new foldPair.ptr(931, 962), new foldPair.ptr(934, 966), new foldPair.ptr(937, 969), new foldPair.ptr(946, 976), new foldPair.ptr(949, 1013), new foldPair.ptr(952, 977), new foldPair.ptr(953, 8126), new foldPair.ptr(954, 1008), new foldPair.ptr(956, 181), new foldPair.ptr(960, 982), new foldPair.ptr(961, 1009), new foldPair.ptr(962, 963), new foldPair.ptr(963, 931), new foldPair.ptr(966, 981), new foldPair.ptr(969, 8486), new foldPair.ptr(976, 914), new foldPair.ptr(977, 1012), new foldPair.ptr(981, 934), new foldPair.ptr(982, 928), new foldPair.ptr(1008, 922), new foldPair.ptr(1009, 929), new foldPair.ptr(1012, 920), new foldPair.ptr(1013, 917), new foldPair.ptr(7776, 7777), new foldPair.ptr(7777, 7835), new foldPair.ptr(7835, 7776), new foldPair.ptr(7838, 223), new foldPair.ptr(8126, 837), new foldPair.ptr(8486, 937), new foldPair.ptr(8490, 75), new foldPair.ptr(8491, 197)]);
		/* */ } return; } }; $init_unicode.$blocking = true; return $init_unicode;
	};
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, decodeRuneInternal, decodeRuneInStringInternal, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, RuneLen, EncodeRune, RuneCount, RuneCountInString, RuneStart;
	decodeRuneInternal = function(p) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, r = 0, short$1 = false, size = 0;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = ((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = ((1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = ((2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = ((3 < 0 || 3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	decodeRuneInStringInternal = function(s) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c0, c1, c2, c3, n, r = 0, short$1 = false, size = 0;
		n = s.length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = s.charCodeAt(0);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = s.charCodeAt(1);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = s.charCodeAt(2);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = s.charCodeAt(3);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	FullRune = $pkg.FullRune = function(p) {
		var _tuple, short$1;
		_tuple = decodeRuneInternal(p); short$1 = _tuple[2];
		return !short$1;
	};
	DecodeRune = $pkg.DecodeRune = function(p) {
		var _tuple, r = 0, size = 0;
		_tuple = decodeRuneInternal(p); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeRuneInString = $pkg.DecodeRuneInString = function(s) {
		var _tuple, r = 0, size = 0;
		_tuple = decodeRuneInStringInternal(s); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeLastRune = $pkg.DecodeLastRune = function(p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, end, lim, r = 0, size = 0, start;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (start >= lim) {
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	RuneLen = $pkg.RuneLen = function(r) {
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	EncodeRune = $pkg.EncodeRune = function(p, r) {
		var i;
		i = (r >>> 0);
		if (i <= 127) {
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24);
			return 1;
		} else if (i <= 2047) {
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 2;
		} else if (i > 1114111 || 55296 <= i && i <= 57343) {
			r = 65533;
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 3;
		} else if (i <= 65535) {
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 3;
		} else {
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(3 < 0 || 3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 4;
		}
	};
	RuneCount = $pkg.RuneCount = function(p) {
		var _tuple, i, n, size;
		i = 0;
		n = 0;
		n = 0;
		while (i < p.$length) {
			if (((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < 128) {
				i = i + (1) >> 0;
			} else {
				_tuple = DecodeRune($subslice(p, i)); size = _tuple[1];
				i = i + (size) >> 0;
			}
			n = n + (1) >> 0;
		}
		return n;
	};
	RuneCountInString = $pkg.RuneCountInString = function(s) {
		var _i, _ref, _rune, n = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			n = n + (1) >> 0;
			_i += _rune[1];
		}
		return n;
	};
	RuneStart = $pkg.RuneStart = function(b) {
		return !((((b & 192) >>> 0) === 128));
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_utf8 = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_utf8.$blocking = true; return $init_utf8;
	};
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, errors, io, unicode, utf8, Buffer, readOp, ptrType, sliceType, arrayType, arrayType$1, IndexByte, Equal, makeSlice, NewBuffer, Index, IndexAny, HasPrefix, Map, ToUpper, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeCutsetFunc, TrimLeft, TrimRight, TrimSpace, EqualFold;
	errors = $packages["errors"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	Buffer = $pkg.Buffer = $newType(0, $kindStruct, "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : sliceType.nil;
		this.off = off_ !== undefined ? off_ : 0;
		this.runeBytes = runeBytes_ !== undefined ? runeBytes_ : arrayType.zero();
		this.bootstrap = bootstrap_ !== undefined ? bootstrap_ : arrayType$1.zero();
		this.lastRead = lastRead_ !== undefined ? lastRead_ : 0;
	});
	readOp = $pkg.readOp = $newType(4, $kindInt, "bytes.readOp", "readOp", "bytes", null);
		ptrType = $ptrType(Buffer);
		sliceType = $sliceType($Uint8);
		arrayType = $arrayType($Uint8, 4);
		arrayType$1 = $arrayType($Uint8, 64);
	IndexByte = $pkg.IndexByte = function(s, c) {
		var _i, _ref, b, i;
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	Equal = $pkg.Equal = function(a, b) {
		var _i, _ref, c, i;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	Buffer.ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === ptrType.nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.ptr.prototype.Truncate = function(n) {
		var b;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if (n === 0) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.ptr.prototype.grow = function(n) {
		var _q, b, buf, m;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = sliceType.nil;
			if (b.buf === sliceType.nil && n <= 64) {
				buf = $subslice(new sliceType(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice((2 * b.buf.$capacity >> 0) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.ptr.prototype.Grow = function(n) {
		var b, m;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.ptr.prototype.Write = function(p) {
		var _tmp, _tmp$1, b, err = $ifaceNil, m, n = 0;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, b, err = $ifaceNil, m, n = 0;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.ptr.prototype.ReadFrom = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err = $ifaceNil, free, m, n = new $Int64(0, 0), newBuf, x;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		while (true) {
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice((2 * b.buf.$capacity >> 0) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_tuple = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); m = _tuple[0]; e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				break;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
		}
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $deferred = [], $err = null;
		/* */ try { $deferFrames.push($deferred);
		$deferred.push([(function() {
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return sliceType.make(n);
		/* */ } catch(err) { $err = err; return sliceType.nil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Buffer.ptr.prototype.WriteTo = function(w) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b, e, err = $ifaceNil, m, n = new $Int64(0, 0), nBytes;
		b = this;
		b.lastRead = 0;
		if (b.off < b.buf.$length) {
			nBytes = b.Len();
			_tuple = w.Write($subslice(b.buf, b.off)); m = _tuple[0]; e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n; _tmp$3 = io.ErrShortWrite; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
		}
		b.Truncate(0);
		return [n, err];
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.ptr.prototype.WriteByte = function(c) {
		var b, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, (m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c);
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.ptr.prototype.WriteRune = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, err = $ifaceNil, n = 0;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new sliceType(b.runeBytes), 0), r);
		b.Write($subslice(new sliceType(b.runeBytes), 0, n));
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.ptr.prototype.Read = function(p) {
		var _tmp, _tmp$1, b, err = $ifaceNil, n = 0;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0; _tmp$1 = io.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.ptr.prototype.Next = function(n) {
		var b, data, m;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.ptr.prototype.ReadByte = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, b, c = 0, err = $ifaceNil, x, x$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = io.EOF; c = _tmp; err = _tmp$1;
			return [c, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, b, c, err = $ifaceNil, n, r = 0, size = 0, x, x$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; r = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off)); r = _tuple[0]; n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r; _tmp$7 = n; _tmp$8 = $ifaceNil; r = _tmp$6; size = _tmp$7; err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.ptr.prototype.UnreadRune = function() {
		var _tuple, b, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off)); n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.ptr.prototype.ReadBytes = function(delim) {
		var _tuple, b, err = $ifaceNil, line = sliceType.nil, slice;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.ptr.prototype.readSlice = function(delim) {
		var _tmp, _tmp$1, b, end, err = $ifaceNil, i, line = sliceType.nil;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.ptr.prototype.ReadString = function(delim) {
		var _tmp, _tmp$1, _tuple, b, err = $ifaceNil, line = "", slice;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		_tmp = $bytesToString(slice); _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = $pkg.NewBuffer = function(buf) {
		return new Buffer.ptr(buf, 0, arrayType.zero(), arrayType$1.zero(), 0);
	};
	Index = $pkg.Index = function(s, sep) {
		var c, i, n, o, t;
		n = sep.$length;
		if (n === 0) {
			return 0;
		}
		if (n > s.$length) {
			return -1;
		}
		c = ((0 < 0 || 0 >= sep.$length) ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (i < t.$length) {
			if (!((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	IndexAny = $pkg.IndexAny = function(s, chars) {
		var _i, _ref, _rune, _tuple, ch, i, r, width;
		if (chars.length > 0) {
			r = 0;
			width = 0;
			i = 0;
			while (i < s.$length) {
				r = (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >> 0);
				if (r < 128) {
					width = 1;
				} else {
					_tuple = utf8.DecodeRune($subslice(s, i)); r = _tuple[0]; width = _tuple[1];
				}
				_ref = chars;
				_i = 0;
				while (_i < _ref.length) {
					_rune = $decodeRune(_ref, _i);
					ch = _rune[0];
					if (r === ch) {
						return i;
					}
					_i += _rune[1];
				}
				i = i + (width) >> 0;
			}
		}
		return -1;
	};
	HasPrefix = $pkg.HasPrefix = function(s, prefix) {
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	Map = $pkg.Map = function(mapping, s) {
		var _tuple, b, i, maxbytes, nb, nbytes, r, rl, wid;
		maxbytes = s.$length;
		nbytes = 0;
		b = sliceType.make(maxbytes);
		i = 0;
		while (i < s.$length) {
			wid = 1;
			r = (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, i)); r = _tuple[0]; wid = _tuple[1];
			}
			r = mapping(r);
			if (r >= 0) {
				rl = utf8.RuneLen(r);
				if (rl < 0) {
					rl = 3;
				}
				if ((nbytes + rl >> 0) > maxbytes) {
					maxbytes = (maxbytes * 2 >> 0) + 4 >> 0;
					nb = sliceType.make(maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			i = i + (wid) >> 0;
		}
		return $subslice(b, 0, nbytes);
	};
	ToUpper = $pkg.ToUpper = function(s) {
		return Map(unicode.ToUpper, s);
	};
	ToLower = $pkg.ToLower = function(s) {
		return Map(unicode.ToLower, s);
	};
	TrimLeftFunc = $pkg.TrimLeftFunc = function(s, f) {
		var i;
		i = indexFunc(s, f, false);
		if (i === -1) {
			return sliceType.nil;
		}
		return $subslice(s, i);
	};
	TrimRightFunc = $pkg.TrimRightFunc = function(s, f) {
		var _tuple, i, wid;
		i = lastIndexFunc(s, f, false);
		if (i >= 0 && ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >= 128) {
			_tuple = utf8.DecodeRune($subslice(s, i)); wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		return $subslice(s, 0, i);
	};
	TrimFunc = $pkg.TrimFunc = function(s, f) {
		return TrimRightFunc(TrimLeftFunc(s, f), f);
	};
	indexFunc = function(s, f, truth) {
		var _tuple, r, start, wid;
		start = 0;
		while (start < s.$length) {
			wid = 1;
			r = (((start < 0 || start >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + start]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, start)); r = _tuple[0]; wid = _tuple[1];
			}
			if (f(r) === truth) {
				return start;
			}
			start = start + (wid) >> 0;
		}
		return -1;
	};
	lastIndexFunc = function(s, f, truth) {
		var _tmp, _tmp$1, _tuple, i, r, size, x;
		i = s.$length;
		while (i > 0) {
			_tmp = ((x = i - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) >> 0); _tmp$1 = 1; r = _tmp; size = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(s, 0, i)); r = _tuple[0]; size = _tuple[1];
			}
			i = i - (size) >> 0;
			if (f(r) === truth) {
				return i;
			}
		}
		return -1;
	};
	makeCutsetFunc = function(cutset) {
		return (function(r) {
			var _i, _ref, _rune, c;
			_ref = cutset;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				c = _rune[0];
				if (c === r) {
					return true;
				}
				_i += _rune[1];
			}
			return false;
		});
	};
	TrimLeft = $pkg.TrimLeft = function(s, cutset) {
		return TrimLeftFunc(s, makeCutsetFunc(cutset));
	};
	TrimRight = $pkg.TrimRight = function(s, cutset) {
		return TrimRightFunc(s, makeCutsetFunc(cutset));
	};
	TrimSpace = $pkg.TrimSpace = function(s) {
		return TrimFunc(s, unicode.IsSpace);
	};
	EqualFold = $pkg.EqualFold = function(s, t) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, r, r$1, r$2, size, size$1, sr, tr;
		while (!((s.$length === 0)) && !((t.$length === 0))) {
			_tmp = 0; _tmp$1 = 0; sr = _tmp; tr = _tmp$1;
			if (((0 < 0 || 0 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) < 128) {
				_tmp$2 = (((0 < 0 || 0 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) >> 0); _tmp$3 = $subslice(s, 1); sr = _tmp$2; s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRune(s); r = _tuple[0]; size = _tuple[1];
				_tmp$4 = r; _tmp$5 = $subslice(s, size); sr = _tmp$4; s = _tmp$5;
			}
			if (((0 < 0 || 0 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) < 128) {
				_tmp$6 = (((0 < 0 || 0 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) >> 0); _tmp$7 = $subslice(t, 1); tr = _tmp$6; t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRune(t); r$1 = _tuple$1[0]; size$1 = _tuple$1[1];
				_tmp$8 = r$1; _tmp$9 = $subslice(t, size$1); tr = _tmp$8; t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr; _tmp$11 = tr; tr = _tmp$10; sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (!((r$2 === sr)) && r$2 < tr) {
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s.$length === t.$length;
	};
	ptrType.methods = [{prop: "Bytes", name: "Bytes", pkg: "", type: $funcType([], [sliceType], false)}, {prop: "Grow", name: "Grow", pkg: "", type: $funcType([$Int], [], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Next", name: "Next", pkg: "", type: $funcType([$Int], [sliceType], false)}, {prop: "Read", name: "Read", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", type: $funcType([], [$Uint8, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", type: $funcType([$Uint8], [sliceType, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", type: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", type: $funcType([], [$Int32, $Int, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", type: $funcType([$Uint8], [$String, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", type: $funcType([], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Truncate", name: "Truncate", pkg: "", type: $funcType([$Int], [], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", type: $funcType([], [$error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", type: $funcType([], [$error], false)}, {prop: "Write", name: "Write", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", type: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", type: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", type: $funcType([$String], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", type: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "grow", name: "grow", pkg: "bytes", type: $funcType([$Int], [$Int], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", type: $funcType([$Uint8], [sliceType, $error], false)}];
	Buffer.init([{prop: "buf", name: "buf", pkg: "bytes", type: sliceType, tag: ""}, {prop: "off", name: "off", pkg: "bytes", type: $Int, tag: ""}, {prop: "runeBytes", name: "runeBytes", pkg: "bytes", type: arrayType, tag: ""}, {prop: "bootstrap", name: "bootstrap", pkg: "bytes", type: arrayType$1, tag: ""}, {prop: "lastRead", name: "lastRead", pkg: "bytes", type: readOp, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_bytes = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = unicode.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
		/* */ } return; } }; $init_bytes.$blocking = true; return $init_bytes;
	};
	return $pkg;
})();
$packages["github.com/gopherjs/jquery"] = (function() {
	var $pkg = {}, js, JQuery, Event, JQueryCoordinates, sliceType, sliceType$1, funcType$1, mapType, sliceType$2, funcType$2, funcType$3, funcType$4, sliceType$3, ptrType, ptrType$1, NewJQuery, Trim;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	JQuery = $pkg.JQuery = $newType(0, $kindStruct, "jquery.JQuery", "JQuery", "github.com/gopherjs/jquery", function(o_, Jquery_, Selector_, Length_, Context_) {
		this.$val = this;
		this.o = o_ !== undefined ? o_ : null;
		this.Jquery = Jquery_ !== undefined ? Jquery_ : "";
		this.Selector = Selector_ !== undefined ? Selector_ : "";
		this.Length = Length_ !== undefined ? Length_ : 0;
		this.Context = Context_ !== undefined ? Context_ : "";
	});
	Event = $pkg.Event = $newType(0, $kindStruct, "jquery.Event", "Event", "github.com/gopherjs/jquery", function(Object_, KeyCode_, Target_, CurrentTarget_, DelegateTarget_, RelatedTarget_, Data_, Result_, Which_, Namespace_, MetaKey_, PageX_, PageY_, Type_) {
		this.$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
		this.KeyCode = KeyCode_ !== undefined ? KeyCode_ : 0;
		this.Target = Target_ !== undefined ? Target_ : null;
		this.CurrentTarget = CurrentTarget_ !== undefined ? CurrentTarget_ : null;
		this.DelegateTarget = DelegateTarget_ !== undefined ? DelegateTarget_ : null;
		this.RelatedTarget = RelatedTarget_ !== undefined ? RelatedTarget_ : null;
		this.Data = Data_ !== undefined ? Data_ : null;
		this.Result = Result_ !== undefined ? Result_ : null;
		this.Which = Which_ !== undefined ? Which_ : 0;
		this.Namespace = Namespace_ !== undefined ? Namespace_ : "";
		this.MetaKey = MetaKey_ !== undefined ? MetaKey_ : false;
		this.PageX = PageX_ !== undefined ? PageX_ : 0;
		this.PageY = PageY_ !== undefined ? PageY_ : 0;
		this.Type = Type_ !== undefined ? Type_ : "";
	});
	JQueryCoordinates = $pkg.JQueryCoordinates = $newType(0, $kindStruct, "jquery.JQueryCoordinates", "JQueryCoordinates", "github.com/gopherjs/jquery", function(Left_, Top_) {
		this.$val = this;
		this.Left = Left_ !== undefined ? Left_ : 0;
		this.Top = Top_ !== undefined ? Top_ : 0;
	});
		sliceType = $sliceType(js.Any);
		sliceType$1 = $sliceType($emptyInterface);
		funcType$1 = $funcType([$Int, js.Object], [], false);
		mapType = $mapType($String, $emptyInterface);
		sliceType$2 = $sliceType($String);
		funcType$2 = $funcType([$Int, $String], [$String], false);
		funcType$3 = $funcType([], [], false);
		funcType$4 = $funcType([$Int, js.Any], [], false);
		sliceType$3 = $sliceType($Bool);
		ptrType = $ptrType(JQuery);
		ptrType$1 = $ptrType(Event);
	Event.ptr.prototype.PreventDefault = function() {
		var event;
		event = this;
		event.Object.preventDefault();
	};
	Event.prototype.PreventDefault = function() { return this.$val.PreventDefault(); };
	Event.ptr.prototype.IsDefaultPrevented = function() {
		var event;
		event = this;
		return !!(event.Object.isDefaultPrevented());
	};
	Event.prototype.IsDefaultPrevented = function() { return this.$val.IsDefaultPrevented(); };
	Event.ptr.prototype.IsImmediatePropogationStopped = function() {
		var event;
		event = this;
		return !!(event.Object.isImmediatePropogationStopped());
	};
	Event.prototype.IsImmediatePropogationStopped = function() { return this.$val.IsImmediatePropogationStopped(); };
	Event.ptr.prototype.IsPropagationStopped = function() {
		var event;
		event = this;
		return !!(event.Object.isPropagationStopped());
	};
	Event.prototype.IsPropagationStopped = function() { return this.$val.IsPropagationStopped(); };
	Event.ptr.prototype.StopImmediatePropagation = function() {
		var event;
		event = this;
		event.Object.stopImmediatePropagation();
	};
	Event.prototype.StopImmediatePropagation = function() { return this.$val.StopImmediatePropagation(); };
	Event.ptr.prototype.StopPropagation = function() {
		var event;
		event = this;
		event.Object.stopPropagation();
	};
	Event.prototype.StopPropagation = function() { return this.$val.StopPropagation(); };
	NewJQuery = $pkg.NewJQuery = function(args) {
		return new JQuery.ptr(new ($global.Function.prototype.bind.apply($global.jQuery, [undefined].concat($externalize(args, sliceType)))), "", "", 0, "");
	};
	Trim = $pkg.Trim = function(text) {
		return $internalize($global.jQuery.trim($externalize(text, $String)), $String);
	};
	JQuery.ptr.prototype.Each = function(fn) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.each($externalize((function(idx, elem) {
			var x;
			fn(idx, (x = NewJQuery(new sliceType([elem])), new x.constructor.elem(x)));
		}), funcType$1));
		return j;
	};
	JQuery.prototype.Each = function(fn) { return this.$val.Each(fn); };
	JQuery.ptr.prototype.Underlying = function() {
		var j;
		j = $clone(this, JQuery);
		return j.o;
	};
	JQuery.prototype.Underlying = function() { return this.$val.Underlying(); };
	JQuery.ptr.prototype.Get = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		return (obj = j.o, obj.get.apply(obj, $externalize(i, sliceType)));
	};
	JQuery.prototype.Get = function(i) { return this.$val.Get(i); };
	JQuery.ptr.prototype.Append = function(args) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.append.apply(obj, $externalize(args, sliceType)));
		return j;
	};
	JQuery.prototype.Append = function(args) { return this.$val.Append(args); };
	JQuery.ptr.prototype.Empty = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.empty();
		return j;
	};
	JQuery.prototype.Empty = function() { return this.$val.Empty(); };
	JQuery.ptr.prototype.Detach = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.detach.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Detach = function(i) { return this.$val.Detach(i); };
	JQuery.ptr.prototype.Eq = function(idx) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.eq(idx);
		return j;
	};
	JQuery.prototype.Eq = function(idx) { return this.$val.Eq(idx); };
	JQuery.ptr.prototype.FadeIn = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.fadeIn.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.FadeIn = function(i) { return this.$val.FadeIn(i); };
	JQuery.ptr.prototype.Delay = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.delay.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Delay = function(i) { return this.$val.Delay(i); };
	JQuery.ptr.prototype.ToArray = function() {
		var j;
		j = $clone(this, JQuery);
		return $assertType($internalize(j.o.toArray(), $emptyInterface), sliceType$1);
	};
	JQuery.prototype.ToArray = function() { return this.$val.ToArray(); };
	JQuery.ptr.prototype.Remove = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.remove.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Remove = function(i) { return this.$val.Remove(i); };
	JQuery.ptr.prototype.Stop = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.stop.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Stop = function(i) { return this.$val.Stop(i); };
	JQuery.ptr.prototype.AddBack = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.addBack.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.AddBack = function(i) { return this.$val.AddBack(i); };
	JQuery.ptr.prototype.Css = function(name) {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.css($externalize(name, $String)), $String);
	};
	JQuery.prototype.Css = function(name) { return this.$val.Css(name); };
	JQuery.ptr.prototype.CssArray = function(arr) {
		var j;
		j = $clone(this, JQuery);
		return $assertType($internalize(j.o.css($externalize(arr, sliceType$2)), $emptyInterface), mapType);
	};
	JQuery.prototype.CssArray = function(arr) { return this.$val.CssArray(arr); };
	JQuery.ptr.prototype.SetCss = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.css.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.SetCss = function(i) { return this.$val.SetCss(i); };
	JQuery.ptr.prototype.Text = function() {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.text(), $String);
	};
	JQuery.prototype.Text = function() { return this.$val.Text(); };
	JQuery.ptr.prototype.SetText = function(i) {
		var _ref, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$2, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetText Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.text($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetText = function(i) { return this.$val.SetText(i); };
	JQuery.ptr.prototype.Val = function() {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.val(), $String);
	};
	JQuery.prototype.Val = function() { return this.$val.Val(); };
	JQuery.ptr.prototype.SetVal = function(i) {
		var j;
		j = $clone(this, JQuery);
		j.o.val($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetVal = function(i) { return this.$val.SetVal(i); };
	JQuery.ptr.prototype.Prop = function(property) {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.prop($externalize(property, $String)), $emptyInterface);
	};
	JQuery.prototype.Prop = function(property) { return this.$val.Prop(property); };
	JQuery.ptr.prototype.SetProp = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prop.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.SetProp = function(i) { return this.$val.SetProp(i); };
	JQuery.ptr.prototype.RemoveProp = function(property) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.removeProp($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveProp = function(property) { return this.$val.RemoveProp(property); };
	JQuery.ptr.prototype.Attr = function(property) {
		var attr, j;
		j = $clone(this, JQuery);
		attr = j.o.attr($externalize(property, $String));
		if (attr === undefined) {
			return "";
		}
		return $internalize(attr, $String);
	};
	JQuery.prototype.Attr = function(property) { return this.$val.Attr(property); };
	JQuery.ptr.prototype.SetAttr = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.attr.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.SetAttr = function(i) { return this.$val.SetAttr(i); };
	JQuery.ptr.prototype.RemoveAttr = function(property) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.removeAttr($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveAttr = function(property) { return this.$val.RemoveAttr(property); };
	JQuery.ptr.prototype.HasClass = function(class$1) {
		var j;
		j = $clone(this, JQuery);
		return !!(j.o.hasClass($externalize(class$1, $String)));
	};
	JQuery.prototype.HasClass = function(class$1) { return this.$val.HasClass(class$1); };
	JQuery.ptr.prototype.AddClass = function(i) {
		var _ref, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$2, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("addClass Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.addClass($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.AddClass = function(i) { return this.$val.AddClass(i); };
	JQuery.ptr.prototype.RemoveClass = function(property) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.removeClass($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveClass = function(property) { return this.$val.RemoveClass(property); };
	JQuery.ptr.prototype.ToggleClass = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.toggleClass.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.ToggleClass = function(i) { return this.$val.ToggleClass(i); };
	JQuery.ptr.prototype.Focus = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.focus();
		return j;
	};
	JQuery.prototype.Focus = function() { return this.$val.Focus(); };
	JQuery.ptr.prototype.Blur = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.blur();
		return j;
	};
	JQuery.prototype.Blur = function() { return this.$val.Blur(); };
	JQuery.ptr.prototype.ReplaceAll = function(arg) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.replaceAll($externalize(arg, $emptyInterface));
		return j;
	};
	JQuery.prototype.ReplaceAll = function(arg) { return this.$val.ReplaceAll(arg); };
	JQuery.ptr.prototype.ReplaceWith = function(arg) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.replaceWith($externalize(arg, $emptyInterface));
		return j;
	};
	JQuery.prototype.ReplaceWith = function(arg) { return this.$val.ReplaceWith(arg); };
	JQuery.ptr.prototype.After = function(args) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.after.apply(obj, $externalize(args, sliceType)));
		return j;
	};
	JQuery.prototype.After = function(args) { return this.$val.After(args); };
	JQuery.ptr.prototype.Before = function(args) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.before.apply(obj, $externalize(args, sliceType)));
		return j;
	};
	JQuery.prototype.Before = function(args) { return this.$val.Before(args); };
	JQuery.ptr.prototype.Prepend = function(args) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prepend.apply(obj, $externalize(args, sliceType)));
		return j;
	};
	JQuery.prototype.Prepend = function(args) { return this.$val.Prepend(args); };
	JQuery.ptr.prototype.PrependTo = function(arg) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.prependTo(arg);
		return j;
	};
	JQuery.prototype.PrependTo = function(arg) { return this.$val.PrependTo(arg); };
	JQuery.ptr.prototype.AppendTo = function(arg) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.appendTo(arg);
		return j;
	};
	JQuery.prototype.AppendTo = function(arg) { return this.$val.AppendTo(arg); };
	JQuery.ptr.prototype.InsertAfter = function(arg) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.insertAfter(arg);
		return j;
	};
	JQuery.prototype.InsertAfter = function(arg) { return this.$val.InsertAfter(arg); };
	JQuery.ptr.prototype.InsertBefore = function(arg) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.insertBefore(arg);
		return j;
	};
	JQuery.prototype.InsertBefore = function(arg) { return this.$val.InsertBefore(arg); };
	JQuery.ptr.prototype.Show = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.show();
		return j;
	};
	JQuery.prototype.Show = function() { return this.$val.Show(); };
	JQuery.ptr.prototype.Hide = function() {
		var j;
		j = $clone(this, JQuery);
		j.o.hide();
		return j;
	};
	JQuery.prototype.Hide = function() { return this.$val.Hide(); };
	JQuery.ptr.prototype.Toggle = function(showOrHide) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.toggle($externalize(showOrHide, $Bool));
		return j;
	};
	JQuery.prototype.Toggle = function(showOrHide) { return this.$val.Toggle(showOrHide); };
	JQuery.ptr.prototype.Contents = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.contents();
		return j;
	};
	JQuery.prototype.Contents = function() { return this.$val.Contents(); };
	JQuery.ptr.prototype.Html = function() {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.html(), $String);
	};
	JQuery.prototype.Html = function() { return this.$val.Html(); };
	JQuery.ptr.prototype.SetHtml = function(i) {
		var _ref, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$2, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetHtml Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.html($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetHtml = function(i) { return this.$val.SetHtml(i); };
	JQuery.ptr.prototype.Closest = function(args) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.closest.apply(obj, $externalize(args, sliceType)));
		return j;
	};
	JQuery.prototype.Closest = function(args) { return this.$val.Closest(args); };
	JQuery.ptr.prototype.End = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.end();
		return j;
	};
	JQuery.prototype.End = function() { return this.$val.End(); };
	JQuery.ptr.prototype.Add = function(args) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.add.apply(obj, $externalize(args, sliceType)));
		return j;
	};
	JQuery.prototype.Add = function(args) { return this.$val.Add(args); };
	JQuery.ptr.prototype.Clone = function(b) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.clone.apply(obj, $externalize(b, sliceType)));
		return j;
	};
	JQuery.prototype.Clone = function(b) { return this.$val.Clone(b); };
	JQuery.ptr.prototype.Height = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.height()) >> 0;
	};
	JQuery.prototype.Height = function() { return this.$val.Height(); };
	JQuery.ptr.prototype.SetHeight = function(value) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.height($externalize(value, $String));
		return j;
	};
	JQuery.prototype.SetHeight = function(value) { return this.$val.SetHeight(value); };
	JQuery.ptr.prototype.Width = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.width()) >> 0;
	};
	JQuery.prototype.Width = function() { return this.$val.Width(); };
	JQuery.ptr.prototype.SetWidth = function(i) {
		var _ref, j;
		j = $clone(this, JQuery);
		_ref = i;
		if ($assertType(_ref, funcType$2, true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetWidth Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.width($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetWidth = function(i) { return this.$val.SetWidth(i); };
	JQuery.ptr.prototype.InnerHeight = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.innerHeight()) >> 0;
	};
	JQuery.prototype.InnerHeight = function() { return this.$val.InnerHeight(); };
	JQuery.ptr.prototype.InnerWidth = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.innerWidth()) >> 0;
	};
	JQuery.prototype.InnerWidth = function() { return this.$val.InnerWidth(); };
	JQuery.ptr.prototype.Offset = function() {
		var j, obj;
		j = $clone(this, JQuery);
		obj = j.o.offset();
		return new JQueryCoordinates.ptr($parseInt(obj.left) >> 0, $parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Offset = function() { return this.$val.Offset(); };
	JQuery.ptr.prototype.SetOffset = function(jc) {
		var j;
		j = $clone(this, JQuery);
		jc = $clone(jc, JQueryCoordinates);
		j.o = j.o.offset($externalize(jc, JQueryCoordinates));
		return j;
	};
	JQuery.prototype.SetOffset = function(jc) { return this.$val.SetOffset(jc); };
	JQuery.ptr.prototype.OuterHeight = function(includeMargin) {
		var j;
		j = $clone(this, JQuery);
		if (includeMargin.$length === 0) {
			return $parseInt(j.o.outerHeight()) >> 0;
		}
		return $parseInt(j.o.outerHeight($externalize(((0 < 0 || 0 >= includeMargin.$length) ? $throwRuntimeError("index out of range") : includeMargin.$array[includeMargin.$offset + 0]), $Bool))) >> 0;
	};
	JQuery.prototype.OuterHeight = function(includeMargin) { return this.$val.OuterHeight(includeMargin); };
	JQuery.ptr.prototype.OuterWidth = function(includeMargin) {
		var j;
		j = $clone(this, JQuery);
		if (includeMargin.$length === 0) {
			return $parseInt(j.o.outerWidth()) >> 0;
		}
		return $parseInt(j.o.outerWidth($externalize(((0 < 0 || 0 >= includeMargin.$length) ? $throwRuntimeError("index out of range") : includeMargin.$array[includeMargin.$offset + 0]), $Bool))) >> 0;
	};
	JQuery.prototype.OuterWidth = function(includeMargin) { return this.$val.OuterWidth(includeMargin); };
	JQuery.ptr.prototype.Position = function() {
		var j, obj;
		j = $clone(this, JQuery);
		obj = j.o.position();
		return new JQueryCoordinates.ptr($parseInt(obj.left) >> 0, $parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Position = function() { return this.$val.Position(); };
	JQuery.ptr.prototype.ScrollLeft = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.scrollLeft()) >> 0;
	};
	JQuery.prototype.ScrollLeft = function() { return this.$val.ScrollLeft(); };
	JQuery.ptr.prototype.SetScrollLeft = function(value) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.scrollLeft(value);
		return j;
	};
	JQuery.prototype.SetScrollLeft = function(value) { return this.$val.SetScrollLeft(value); };
	JQuery.ptr.prototype.ScrollTop = function() {
		var j;
		j = $clone(this, JQuery);
		return $parseInt(j.o.scrollTop()) >> 0;
	};
	JQuery.prototype.ScrollTop = function() { return this.$val.ScrollTop(); };
	JQuery.ptr.prototype.SetScrollTop = function(value) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.scrollTop(value);
		return j;
	};
	JQuery.prototype.SetScrollTop = function(value) { return this.$val.SetScrollTop(value); };
	JQuery.ptr.prototype.ClearQueue = function(queueName) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.clearQueue($externalize(queueName, $String));
		return j;
	};
	JQuery.prototype.ClearQueue = function(queueName) { return this.$val.ClearQueue(queueName); };
	JQuery.ptr.prototype.SetData = function(key, value) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.data($externalize(key, $String), $externalize(value, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetData = function(key, value) { return this.$val.SetData(key, value); };
	JQuery.ptr.prototype.Data = function(key) {
		var j, result;
		j = $clone(this, JQuery);
		result = j.o.data($externalize(key, $String));
		if (result === undefined) {
			return $ifaceNil;
		}
		return $internalize(result, $emptyInterface);
	};
	JQuery.prototype.Data = function(key) { return this.$val.Data(key); };
	JQuery.ptr.prototype.Dequeue = function(queueName) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.dequeue($externalize(queueName, $String));
		return j;
	};
	JQuery.prototype.Dequeue = function(queueName) { return this.$val.Dequeue(queueName); };
	JQuery.ptr.prototype.RemoveData = function(name) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.removeData($externalize(name, $String));
		return j;
	};
	JQuery.prototype.RemoveData = function(name) { return this.$val.RemoveData(name); };
	JQuery.ptr.prototype.OffsetParent = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.offsetParent();
		return j;
	};
	JQuery.prototype.OffsetParent = function() { return this.$val.OffsetParent(); };
	JQuery.ptr.prototype.Parent = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.parent.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Parent = function(i) { return this.$val.Parent(i); };
	JQuery.ptr.prototype.Parents = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.parents.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Parents = function(i) { return this.$val.Parents(i); };
	JQuery.ptr.prototype.ParentsUntil = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.parentsUntil.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.ParentsUntil = function(i) { return this.$val.ParentsUntil(i); };
	JQuery.ptr.prototype.Prev = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prev.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Prev = function(i) { return this.$val.Prev(i); };
	JQuery.ptr.prototype.PrevAll = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prevAll.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.PrevAll = function(i) { return this.$val.PrevAll(i); };
	JQuery.ptr.prototype.PrevUntil = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.prevUntil.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.PrevUntil = function(i) { return this.$val.PrevUntil(i); };
	JQuery.ptr.prototype.Siblings = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.siblings.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Siblings = function(i) { return this.$val.Siblings(i); };
	JQuery.ptr.prototype.Slice = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.slice.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Slice = function(i) { return this.$val.Slice(i); };
	JQuery.ptr.prototype.Children = function(selector) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.children($externalize(selector, $emptyInterface));
		return j;
	};
	JQuery.prototype.Children = function(selector) { return this.$val.Children(selector); };
	JQuery.ptr.prototype.Unwrap = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.unwrap();
		return j;
	};
	JQuery.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	JQuery.ptr.prototype.Wrap = function(obj) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.wrap($externalize(obj, $emptyInterface));
		return j;
	};
	JQuery.prototype.Wrap = function(obj) { return this.$val.Wrap(obj); };
	JQuery.ptr.prototype.WrapAll = function(arg) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.wrapAll(arg);
		return j;
	};
	JQuery.prototype.WrapAll = function(arg) { return this.$val.WrapAll(arg); };
	JQuery.ptr.prototype.WrapInner = function(arg) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.wrapInner(arg);
		return j;
	};
	JQuery.prototype.WrapInner = function(arg) { return this.$val.WrapInner(arg); };
	JQuery.ptr.prototype.Next = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.next.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Next = function(i) { return this.$val.Next(i); };
	JQuery.ptr.prototype.NextAll = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.nextAll.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.NextAll = function(i) { return this.$val.NextAll(i); };
	JQuery.ptr.prototype.NextUntil = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.nextUntil.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.NextUntil = function(i) { return this.$val.NextUntil(i); };
	JQuery.ptr.prototype.Not = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.not.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Not = function(i) { return this.$val.Not(i); };
	JQuery.ptr.prototype.Filter = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.filter.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Filter = function(i) { return this.$val.Filter(i); };
	JQuery.ptr.prototype.Find = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.find.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Find = function(i) { return this.$val.Find(i); };
	JQuery.ptr.prototype.First = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.first();
		return j;
	};
	JQuery.prototype.First = function() { return this.$val.First(); };
	JQuery.ptr.prototype.Has = function(selector) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.has($externalize(selector, $String));
		return j;
	};
	JQuery.prototype.Has = function(selector) { return this.$val.Has(selector); };
	JQuery.ptr.prototype.Is = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		return !!((obj = j.o, obj.is.apply(obj, $externalize(i, sliceType))));
	};
	JQuery.prototype.Is = function(i) { return this.$val.Is(i); };
	JQuery.ptr.prototype.Last = function() {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.last();
		return j;
	};
	JQuery.prototype.Last = function() { return this.$val.Last(); };
	JQuery.ptr.prototype.Ready = function(handler) {
		var j;
		j = $clone(this, JQuery);
		j.o = j.o.ready($externalize(handler, funcType$3));
		return j;
	};
	JQuery.prototype.Ready = function(handler) { return this.$val.Ready(handler); };
	JQuery.ptr.prototype.Resize = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.resize.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Resize = function(i) { return this.$val.Resize(i); };
	JQuery.ptr.prototype.Scroll = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.scroll.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Scroll = function(i) { return this.$val.Scroll(i); };
	JQuery.ptr.prototype.FadeOut = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.fadeOut.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.FadeOut = function(i) { return this.$val.FadeOut(i); };
	JQuery.ptr.prototype.Select = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.select.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Select = function(i) { return this.$val.Select(i); };
	JQuery.ptr.prototype.Submit = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.submit.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Submit = function(i) { return this.$val.Submit(i); };
	JQuery.ptr.prototype.Trigger = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.trigger.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Trigger = function(i) { return this.$val.Trigger(i); };
	JQuery.ptr.prototype.On = function(p) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.on.apply(obj, $externalize(p, sliceType)));
		return j;
	};
	JQuery.prototype.On = function(p) { return this.$val.On(p); };
	JQuery.ptr.prototype.One = function(p) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.one.apply(obj, $externalize(p, sliceType)));
		return j;
	};
	JQuery.prototype.One = function(p) { return this.$val.One(p); };
	JQuery.ptr.prototype.Off = function(p) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.off.apply(obj, $externalize(p, sliceType)));
		return j;
	};
	JQuery.prototype.Off = function(p) { return this.$val.Off(p); };
	JQuery.ptr.prototype.Load = function(i) {
		var j, obj;
		j = $clone(this, JQuery);
		j.o = (obj = j.o, obj.load.apply(obj, $externalize(i, sliceType)));
		return j;
	};
	JQuery.prototype.Load = function(i) { return this.$val.Load(i); };
	JQuery.ptr.prototype.Serialize = function() {
		var j;
		j = $clone(this, JQuery);
		return $internalize(j.o.serialize(), $String);
	};
	JQuery.prototype.Serialize = function() { return this.$val.Serialize(); };
	JQuery.ptr.prototype.SerializeArray = function() {
		var j;
		j = $clone(this, JQuery);
		return j.o.serializeArray();
	};
	JQuery.prototype.SerializeArray = function() { return this.$val.SerializeArray(); };
	JQuery.methods = [{prop: "Add", name: "Add", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "AddBack", name: "AddBack", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "AddClass", name: "AddClass", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "After", name: "After", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Append", name: "Append", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "AppendTo", name: "AppendTo", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "Attr", name: "Attr", pkg: "", type: $funcType([$String], [$String], false)}, {prop: "Before", name: "Before", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Blur", name: "Blur", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Children", name: "Children", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "ClearQueue", name: "ClearQueue", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "Clone", name: "Clone", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Closest", name: "Closest", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Contents", name: "Contents", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Css", name: "Css", pkg: "", type: $funcType([$String], [$String], false)}, {prop: "CssArray", name: "CssArray", pkg: "", type: $funcType([sliceType$2], [mapType], true)}, {prop: "Data", name: "Data", pkg: "", type: $funcType([$String], [$emptyInterface], false)}, {prop: "Delay", name: "Delay", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Dequeue", name: "Dequeue", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "Detach", name: "Detach", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Each", name: "Each", pkg: "", type: $funcType([funcType$4], [JQuery], false)}, {prop: "Empty", name: "Empty", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "End", name: "End", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Eq", name: "Eq", pkg: "", type: $funcType([$Int], [JQuery], false)}, {prop: "FadeIn", name: "FadeIn", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "FadeOut", name: "FadeOut", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Filter", name: "Filter", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Find", name: "Find", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "First", name: "First", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Focus", name: "Focus", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([sliceType], [js.Object], true)}, {prop: "Has", name: "Has", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "HasClass", name: "HasClass", pkg: "", type: $funcType([$String], [$Bool], false)}, {prop: "Height", name: "Height", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Hide", name: "Hide", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Html", name: "Html", pkg: "", type: $funcType([], [$String], false)}, {prop: "InnerHeight", name: "InnerHeight", pkg: "", type: $funcType([], [$Int], false)}, {prop: "InnerWidth", name: "InnerWidth", pkg: "", type: $funcType([], [$Int], false)}, {prop: "InsertAfter", name: "InsertAfter", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "Is", name: "Is", pkg: "", type: $funcType([sliceType], [$Bool], true)}, {prop: "Last", name: "Last", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Load", name: "Load", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Next", name: "Next", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "NextAll", name: "NextAll", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "NextUntil", name: "NextUntil", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Not", name: "Not", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Off", name: "Off", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Offset", name: "Offset", pkg: "", type: $funcType([], [JQueryCoordinates], false)}, {prop: "OffsetParent", name: "OffsetParent", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "On", name: "On", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "One", name: "One", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "OuterHeight", name: "OuterHeight", pkg: "", type: $funcType([sliceType$3], [$Int], true)}, {prop: "OuterWidth", name: "OuterWidth", pkg: "", type: $funcType([sliceType$3], [$Int], true)}, {prop: "Parent", name: "Parent", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Parents", name: "Parents", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "ParentsUntil", name: "ParentsUntil", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [JQueryCoordinates], false)}, {prop: "Prepend", name: "Prepend", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "PrependTo", name: "PrependTo", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "Prev", name: "Prev", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "PrevAll", name: "PrevAll", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "PrevUntil", name: "PrevUntil", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Prop", name: "Prop", pkg: "", type: $funcType([$String], [$emptyInterface], false)}, {prop: "Ready", name: "Ready", pkg: "", type: $funcType([funcType$3], [JQuery], false)}, {prop: "Remove", name: "Remove", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "RemoveAttr", name: "RemoveAttr", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "RemoveClass", name: "RemoveClass", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "RemoveData", name: "RemoveData", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "RemoveProp", name: "RemoveProp", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "ReplaceAll", name: "ReplaceAll", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "ReplaceWith", name: "ReplaceWith", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Resize", name: "Resize", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Scroll", name: "Scroll", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "ScrollLeft", name: "ScrollLeft", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ScrollTop", name: "ScrollTop", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Select", name: "Select", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Serialize", name: "Serialize", pkg: "", type: $funcType([], [$String], false)}, {prop: "SerializeArray", name: "SerializeArray", pkg: "", type: $funcType([], [js.Object], false)}, {prop: "SetAttr", name: "SetAttr", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "SetCss", name: "SetCss", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "SetData", name: "SetData", pkg: "", type: $funcType([$String, $emptyInterface], [JQuery], false)}, {prop: "SetHeight", name: "SetHeight", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "SetHtml", name: "SetHtml", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "SetOffset", name: "SetOffset", pkg: "", type: $funcType([JQueryCoordinates], [JQuery], false)}, {prop: "SetProp", name: "SetProp", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "SetScrollLeft", name: "SetScrollLeft", pkg: "", type: $funcType([$Int], [JQuery], false)}, {prop: "SetScrollTop", name: "SetScrollTop", pkg: "", type: $funcType([$Int], [JQuery], false)}, {prop: "SetText", name: "SetText", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "SetVal", name: "SetVal", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "SetWidth", name: "SetWidth", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Show", name: "Show", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Siblings", name: "Siblings", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Slice", name: "Slice", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Stop", name: "Stop", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Submit", name: "Submit", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Text", name: "Text", pkg: "", type: $funcType([], [$String], false)}, {prop: "ToArray", name: "ToArray", pkg: "", type: $funcType([], [sliceType$1], false)}, {prop: "Toggle", name: "Toggle", pkg: "", type: $funcType([$Bool], [JQuery], false)}, {prop: "ToggleClass", name: "ToggleClass", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Trigger", name: "Trigger", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Underlying", name: "Underlying", pkg: "", type: $funcType([], [js.Object], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Val", name: "Val", pkg: "", type: $funcType([], [$String], false)}, {prop: "Width", name: "Width", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Wrap", name: "Wrap", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "WrapAll", name: "WrapAll", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "WrapInner", name: "WrapInner", pkg: "", type: $funcType([js.Any], [JQuery], false)}];
	ptrType.methods = [{prop: "Add", name: "Add", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "AddBack", name: "AddBack", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "AddClass", name: "AddClass", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "After", name: "After", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Append", name: "Append", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "AppendTo", name: "AppendTo", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "Attr", name: "Attr", pkg: "", type: $funcType([$String], [$String], false)}, {prop: "Before", name: "Before", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Blur", name: "Blur", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Children", name: "Children", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "ClearQueue", name: "ClearQueue", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "Clone", name: "Clone", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Closest", name: "Closest", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Contents", name: "Contents", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Css", name: "Css", pkg: "", type: $funcType([$String], [$String], false)}, {prop: "CssArray", name: "CssArray", pkg: "", type: $funcType([sliceType$2], [mapType], true)}, {prop: "Data", name: "Data", pkg: "", type: $funcType([$String], [$emptyInterface], false)}, {prop: "Delay", name: "Delay", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Dequeue", name: "Dequeue", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "Detach", name: "Detach", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Each", name: "Each", pkg: "", type: $funcType([funcType$4], [JQuery], false)}, {prop: "Empty", name: "Empty", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "End", name: "End", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Eq", name: "Eq", pkg: "", type: $funcType([$Int], [JQuery], false)}, {prop: "FadeIn", name: "FadeIn", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "FadeOut", name: "FadeOut", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Filter", name: "Filter", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Find", name: "Find", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "First", name: "First", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Focus", name: "Focus", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([sliceType], [js.Object], true)}, {prop: "Has", name: "Has", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "HasClass", name: "HasClass", pkg: "", type: $funcType([$String], [$Bool], false)}, {prop: "Height", name: "Height", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Hide", name: "Hide", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Html", name: "Html", pkg: "", type: $funcType([], [$String], false)}, {prop: "InnerHeight", name: "InnerHeight", pkg: "", type: $funcType([], [$Int], false)}, {prop: "InnerWidth", name: "InnerWidth", pkg: "", type: $funcType([], [$Int], false)}, {prop: "InsertAfter", name: "InsertAfter", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "Is", name: "Is", pkg: "", type: $funcType([sliceType], [$Bool], true)}, {prop: "Last", name: "Last", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Load", name: "Load", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Next", name: "Next", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "NextAll", name: "NextAll", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "NextUntil", name: "NextUntil", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Not", name: "Not", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Off", name: "Off", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Offset", name: "Offset", pkg: "", type: $funcType([], [JQueryCoordinates], false)}, {prop: "OffsetParent", name: "OffsetParent", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "On", name: "On", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "One", name: "One", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "OuterHeight", name: "OuterHeight", pkg: "", type: $funcType([sliceType$3], [$Int], true)}, {prop: "OuterWidth", name: "OuterWidth", pkg: "", type: $funcType([sliceType$3], [$Int], true)}, {prop: "Parent", name: "Parent", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Parents", name: "Parents", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "ParentsUntil", name: "ParentsUntil", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [JQueryCoordinates], false)}, {prop: "Prepend", name: "Prepend", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "PrependTo", name: "PrependTo", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "Prev", name: "Prev", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "PrevAll", name: "PrevAll", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "PrevUntil", name: "PrevUntil", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Prop", name: "Prop", pkg: "", type: $funcType([$String], [$emptyInterface], false)}, {prop: "Ready", name: "Ready", pkg: "", type: $funcType([funcType$3], [JQuery], false)}, {prop: "Remove", name: "Remove", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "RemoveAttr", name: "RemoveAttr", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "RemoveClass", name: "RemoveClass", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "RemoveData", name: "RemoveData", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "RemoveProp", name: "RemoveProp", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "ReplaceAll", name: "ReplaceAll", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "ReplaceWith", name: "ReplaceWith", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Resize", name: "Resize", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Scroll", name: "Scroll", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "ScrollLeft", name: "ScrollLeft", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ScrollTop", name: "ScrollTop", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Select", name: "Select", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Serialize", name: "Serialize", pkg: "", type: $funcType([], [$String], false)}, {prop: "SerializeArray", name: "SerializeArray", pkg: "", type: $funcType([], [js.Object], false)}, {prop: "SetAttr", name: "SetAttr", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "SetCss", name: "SetCss", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "SetData", name: "SetData", pkg: "", type: $funcType([$String, $emptyInterface], [JQuery], false)}, {prop: "SetHeight", name: "SetHeight", pkg: "", type: $funcType([$String], [JQuery], false)}, {prop: "SetHtml", name: "SetHtml", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "SetOffset", name: "SetOffset", pkg: "", type: $funcType([JQueryCoordinates], [JQuery], false)}, {prop: "SetProp", name: "SetProp", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "SetScrollLeft", name: "SetScrollLeft", pkg: "", type: $funcType([$Int], [JQuery], false)}, {prop: "SetScrollTop", name: "SetScrollTop", pkg: "", type: $funcType([$Int], [JQuery], false)}, {prop: "SetText", name: "SetText", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "SetVal", name: "SetVal", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "SetWidth", name: "SetWidth", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "Show", name: "Show", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Siblings", name: "Siblings", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Slice", name: "Slice", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Stop", name: "Stop", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Submit", name: "Submit", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Text", name: "Text", pkg: "", type: $funcType([], [$String], false)}, {prop: "ToArray", name: "ToArray", pkg: "", type: $funcType([], [sliceType$1], false)}, {prop: "Toggle", name: "Toggle", pkg: "", type: $funcType([$Bool], [JQuery], false)}, {prop: "ToggleClass", name: "ToggleClass", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Trigger", name: "Trigger", pkg: "", type: $funcType([sliceType], [JQuery], true)}, {prop: "Underlying", name: "Underlying", pkg: "", type: $funcType([], [js.Object], false)}, {prop: "Unwrap", name: "Unwrap", pkg: "", type: $funcType([], [JQuery], false)}, {prop: "Val", name: "Val", pkg: "", type: $funcType([], [$String], false)}, {prop: "Width", name: "Width", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Wrap", name: "Wrap", pkg: "", type: $funcType([$emptyInterface], [JQuery], false)}, {prop: "WrapAll", name: "WrapAll", pkg: "", type: $funcType([js.Any], [JQuery], false)}, {prop: "WrapInner", name: "WrapInner", pkg: "", type: $funcType([js.Any], [JQuery], false)}];
	Event.methods = [{prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([$String, sliceType], [js.Object], true)}, {prop: "Delete", name: "Delete", pkg: "", type: $funcType([$String], [], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [js.Object], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [js.Object], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Invoke", name: "Invoke", pkg: "", type: $funcType([sliceType], [js.Object], true)}, {prop: "Length", name: "Length", pkg: "", type: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([sliceType], [js.Object], true)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, js.Any], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", type: $funcType([$Int, js.Any], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", type: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([$String, sliceType], [js.Object], true)}, {prop: "Delete", name: "Delete", pkg: "", type: $funcType([$String], [], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [js.Object], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [js.Object], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Invoke", name: "Invoke", pkg: "", type: $funcType([sliceType], [js.Object], true)}, {prop: "IsDefaultPrevented", name: "IsDefaultPrevented", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "IsImmediatePropogationStopped", name: "IsImmediatePropogationStopped", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "IsPropagationStopped", name: "IsPropagationStopped", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Length", name: "Length", pkg: "", type: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([sliceType], [js.Object], true)}, {prop: "PreventDefault", name: "PreventDefault", pkg: "", type: $funcType([], [], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, js.Any], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", type: $funcType([$Int, js.Any], [], false)}, {prop: "StopImmediatePropagation", name: "StopImmediatePropagation", pkg: "", type: $funcType([], [], false)}, {prop: "StopPropagation", name: "StopPropagation", pkg: "", type: $funcType([], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", type: $funcType([], [$Uintptr], false)}];
	JQuery.init([{prop: "o", name: "o", pkg: "github.com/gopherjs/jquery", type: js.Object, tag: ""}, {prop: "Jquery", name: "Jquery", pkg: "", type: $String, tag: "js:\"jquery\""}, {prop: "Selector", name: "Selector", pkg: "", type: $String, tag: "js:\"selector\""}, {prop: "Length", name: "Length", pkg: "", type: $Int, tag: "js:\"length\""}, {prop: "Context", name: "Context", pkg: "", type: $String, tag: "js:\"context\""}]);
	Event.init([{prop: "Object", name: "", pkg: "", type: js.Object, tag: ""}, {prop: "KeyCode", name: "KeyCode", pkg: "", type: $Int, tag: "js:\"keyCode\""}, {prop: "Target", name: "Target", pkg: "", type: js.Object, tag: "js:\"target\""}, {prop: "CurrentTarget", name: "CurrentTarget", pkg: "", type: js.Object, tag: "js:\"currentTarget\""}, {prop: "DelegateTarget", name: "DelegateTarget", pkg: "", type: js.Object, tag: "js:\"delegateTarget\""}, {prop: "RelatedTarget", name: "RelatedTarget", pkg: "", type: js.Object, tag: "js:\"relatedTarget\""}, {prop: "Data", name: "Data", pkg: "", type: js.Object, tag: "js:\"data\""}, {prop: "Result", name: "Result", pkg: "", type: js.Object, tag: "js:\"result\""}, {prop: "Which", name: "Which", pkg: "", type: $Int, tag: "js:\"which\""}, {prop: "Namespace", name: "Namespace", pkg: "", type: $String, tag: "js:\"namespace\""}, {prop: "MetaKey", name: "MetaKey", pkg: "", type: $Bool, tag: "js:\"metaKey\""}, {prop: "PageX", name: "PageX", pkg: "", type: $Int, tag: "js:\"pageX\""}, {prop: "PageY", name: "PageY", pkg: "", type: $Int, tag: "js:\"pageY\""}, {prop: "Type", name: "Type", pkg: "", type: $String, tag: "js:\"type\""}]);
	JQueryCoordinates.init([{prop: "Left", name: "Left", pkg: "", type: $Int, tag: ""}, {prop: "Top", name: "Top", pkg: "", type: $Int, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_jquery = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_jquery.$blocking = true; return $init_jquery;
	};
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, TextMarshaler, TextUnmarshaler, sliceType;
	TextMarshaler = $pkg.TextMarshaler = $newType(8, $kindInterface, "encoding.TextMarshaler", "TextMarshaler", "encoding", null);
	TextUnmarshaler = $pkg.TextUnmarshaler = $newType(8, $kindInterface, "encoding.TextUnmarshaler", "TextUnmarshaler", "encoding", null);
		sliceType = $sliceType($Uint8);
	TextMarshaler.init([{prop: "MarshalText", name: "MarshalText", pkg: "", type: $funcType([], [sliceType, $error], false)}]);
	TextUnmarshaler.init([{prop: "UnmarshalText", name: "UnmarshalText", pkg: "", type: $funcType([sliceType], [$error], false)}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_encoding = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_encoding.$blocking = true; return $init_encoding;
	};
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, js, arrayType, math, zero, posInf, negInf, nan, pow10tab, init, Exp, Inf, IsInf, IsNaN, Ldexp, Log, NaN, Float32bits, Float32frombits, Float64bits, Float64frombits, init$1;
	js = $packages["github.com/gopherjs/gopherjs/js"];
		arrayType = $arrayType($Float64, 70);
	init = function() {
		Float32bits(0);
		Float32frombits(0);
	};
	Exp = $pkg.Exp = function(x) {
		return $parseFloat(math.exp(x));
	};
	Inf = $pkg.Inf = function(sign) {
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	IsInf = $pkg.IsInf = function(f, sign) {
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	IsNaN = $pkg.IsNaN = function(f) {
		var is = false;
		is = !((f === f));
		return is;
	};
	Ldexp = $pkg.Ldexp = function(frac, exp$1) {
		if (frac === 0) {
			return frac;
		}
		if (exp$1 >= 1024) {
			return frac * $parseFloat(math.pow(2, 1023)) * $parseFloat(math.pow(2, exp$1 - 1023 >> 0));
		}
		if (exp$1 <= -1024) {
			return frac * $parseFloat(math.pow(2, -1023)) * $parseFloat(math.pow(2, exp$1 + 1023 >> 0));
		}
		return frac * $parseFloat(math.pow(2, exp$1));
	};
	Log = $pkg.Log = function(x) {
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	NaN = $pkg.NaN = function() {
		return nan;
	};
	Float32bits = $pkg.Float32bits = function(f) {
		var e, r, s;
		if (f === 0) {
			if (1 / f === negInf) {
				return 2147483648;
			}
			return 0;
		}
		if (!(f === f)) {
			return 2143289344;
		}
		s = 0;
		if (f < 0) {
			s = 2147483648;
			f = -f;
		}
		e = 150;
		while (f >= 1.6777216e+07) {
			f = f / (2);
			e = e + (1) >>> 0;
			if (e === 255) {
				if (f >= 8.388608e+06) {
					f = posInf;
				}
				break;
			}
		}
		while (f < 8.388608e+06) {
			e = e - (1) >>> 0;
			if (e === 0) {
				break;
			}
			f = f * (2);
		}
		r = $parseFloat($mod(f, 2));
		if ((r > 0.5 && r < 1) || r >= 1.5) {
			f = f + (1);
		}
		return (((s | (e << 23 >>> 0)) >>> 0) | (((f >> 0) & ~8388608))) >>> 0;
	};
	Float32frombits = $pkg.Float32frombits = function(b) {
		var e, m, s;
		s = 1;
		if (!((((b & 2147483648) >>> 0) === 0))) {
			s = -1;
		}
		e = (((b >>> 23 >>> 0)) & 255) >>> 0;
		m = (b & 8388607) >>> 0;
		if (e === 255) {
			if (m === 0) {
				return s / 0;
			}
			return nan;
		}
		if (!((e === 0))) {
			m = m + (8388608) >>> 0;
		}
		if (e === 0) {
			e = 1;
		}
		return Ldexp(m, ((e >> 0) - 127 >> 0) - 23 >> 0) * s;
	};
	Float64bits = $pkg.Float64bits = function(f) {
		var e, s, x, x$1, x$2, x$3;
		if (f === 0) {
			if (1 / f === negInf) {
				return new $Uint64(2147483648, 0);
			}
			return new $Uint64(0, 0);
		}
		if (!((f === f))) {
			return new $Uint64(2146959360, 1);
		}
		s = new $Uint64(0, 0);
		if (f < 0) {
			s = new $Uint64(2147483648, 0);
			f = -f;
		}
		e = 1075;
		while (f >= 9.007199254740992e+15) {
			f = f / (2);
			e = e + (1) >>> 0;
			if (e === 2047) {
				break;
			}
		}
		while (f < 4.503599627370496e+15) {
			e = e - (1) >>> 0;
			if (e === 0) {
				break;
			}
			f = f * (2);
		}
		return (x = (x$1 = $shiftLeft64(new $Uint64(0, e), 52), new $Uint64(s.$high | x$1.$high, (s.$low | x$1.$low) >>> 0)), x$2 = (x$3 = new $Uint64(0, f), new $Uint64(x$3.$high &~ 1048576, (x$3.$low &~ 0) >>> 0)), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
	};
	Float64frombits = $pkg.Float64frombits = function(b) {
		var e, m, s, x, x$1, x$2;
		s = 1;
		if (!((x = new $Uint64(b.$high & 2147483648, (b.$low & 0) >>> 0), (x.$high === 0 && x.$low === 0)))) {
			s = -1;
		}
		e = (x$1 = $shiftRightUint64(b, 52), new $Uint64(x$1.$high & 0, (x$1.$low & 2047) >>> 0));
		m = new $Uint64(b.$high & 1048575, (b.$low & 4294967295) >>> 0);
		if ((e.$high === 0 && e.$low === 2047)) {
			if ((m.$high === 0 && m.$low === 0)) {
				return s / 0;
			}
			return nan;
		}
		if (!((e.$high === 0 && e.$low === 0))) {
			m = (x$2 = new $Uint64(1048576, 0), new $Uint64(m.$high + x$2.$high, m.$low + x$2.$low));
		}
		if ((e.$high === 0 && e.$low === 0)) {
			e = new $Uint64(0, 1);
		}
		return Ldexp($flatten64(m), ((e.$low >> 0) - 1023 >> 0) - 52 >> 0) * s;
	};
	init$1 = function() {
		var _q, i, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (i < 70) {
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			(i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x]));
			i = i + (1) >> 0;
		}
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_math = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		pow10tab = arrayType.zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
		/* */ } return; } }; $init_math.$blocking = true; return $init_math;
	};
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, errors, math, utf8, NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, sliceType, sliceType$1, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, ptrType, arrayType, arrayType$1, ptrType$1, arrayType$2, arrayType$3, arrayType$4, arrayType$5, arrayType$6, ptrType$2, ptrType$3, ptrType$4, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float64info, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts, ParseBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, cutoff64, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, max, FormatInt, Itoa, AppendInt, AppendUint, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint;
	errors = $packages["errors"];
	math = $packages["math"];
	utf8 = $packages["unicode/utf8"];
	NumError = $pkg.NumError = $newType(0, $kindStruct, "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.$val = this;
		this.Func = Func_ !== undefined ? Func_ : "";
		this.Num = Num_ !== undefined ? Num_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	decimal = $pkg.decimal = $newType(0, $kindStruct, "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		this.d = d_ !== undefined ? d_ : arrayType$6.zero();
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
		this.trunc = trunc_ !== undefined ? trunc_ : false;
	});
	leftCheat = $pkg.leftCheat = $newType(0, $kindStruct, "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.$val = this;
		this.delta = delta_ !== undefined ? delta_ : 0;
		this.cutoff = cutoff_ !== undefined ? cutoff_ : "";
	});
	extFloat = $pkg.extFloat = $newType(0, $kindStruct, "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.$val = this;
		this.mant = mant_ !== undefined ? mant_ : new $Uint64(0, 0);
		this.exp = exp_ !== undefined ? exp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	floatInfo = $pkg.floatInfo = $newType(0, $kindStruct, "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.$val = this;
		this.mantbits = mantbits_ !== undefined ? mantbits_ : 0;
		this.expbits = expbits_ !== undefined ? expbits_ : 0;
		this.bias = bias_ !== undefined ? bias_ : 0;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, $kindStruct, "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.$val = this;
		this.d = d_ !== undefined ? d_ : sliceType$6.nil;
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
		sliceType = $sliceType($Int);
		sliceType$1 = $sliceType($Float64);
		sliceType$2 = $sliceType($Float32);
		sliceType$3 = $sliceType(leftCheat);
		sliceType$4 = $sliceType($Uint16);
		sliceType$5 = $sliceType($Uint32);
		sliceType$6 = $sliceType($Uint8);
		ptrType = $ptrType(NumError);
		arrayType = $arrayType($Uint8, 24);
		arrayType$1 = $arrayType($Uint8, 32);
		ptrType$1 = $ptrType(floatInfo);
		arrayType$2 = $arrayType($Uint8, 3);
		arrayType$3 = $arrayType($Uint8, 50);
		arrayType$4 = $arrayType($Uint8, 65);
		arrayType$5 = $arrayType($Uint8, 4);
		arrayType$6 = $arrayType($Uint8, 800);
		ptrType$2 = $ptrType(decimal);
		ptrType$3 = $ptrType(decimalSlice);
		ptrType$4 = $ptrType(extFloat);
	ParseBool = $pkg.ParseBool = function(str) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, err = $ifaceNil, value = false;
		_ref = str;
		if (_ref === "1" || _ref === "t" || _ref === "T" || _ref === "true" || _ref === "TRUE" || _ref === "True") {
			_tmp = true; _tmp$1 = $ifaceNil; value = _tmp; err = _tmp$1;
			return [value, err];
		} else if (_ref === "0" || _ref === "f" || _ref === "F" || _ref === "false" || _ref === "FALSE" || _ref === "False") {
			_tmp$2 = false; _tmp$3 = $ifaceNil; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		_tmp$4 = false; _tmp$5 = syntaxError("ParseBool", str); value = _tmp$4; err = _tmp$5;
		return [value, err];
	};
	equalIgnoreCase = function(s1, s2) {
		var c1, c2, i;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (i < s1.length) {
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, f = 0, ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_ref = s.charCodeAt(0);
		if (_ref === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1); _tmp$1 = true; f = _tmp; ok = _tmp$1;
				return [f, ok];
			}
		} else if (_ref === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
				return [f, ok];
			}
		} else if (_ref === 110 || _ref === 78) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN(); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
				return [f, ok];
			}
		} else if (_ref === 105 || _ref === 73) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1); _tmp$7 = true; f = _tmp$6; ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.ptr.prototype.set = function(s) {
		var b, e, esign, i, ok = false, sawdigits, sawdot, x, x$1;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (i < s.length) {
			if (s.charCodeAt(i) === 46) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, (x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s.charCodeAt(i));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				if (e < 10000) {
					e = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + ((e * esign >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var _ref, c, dp, e, esign, exp = 0, i, mantissa = new $Uint64(0, 0), nd, ndMant, neg = false, ok = false, sawdigits, sawdot, trunc = false, x;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			_ref = true;
			if (_ref === (c === 46)) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_ref === 48 <= c && c <= 57) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				if (e < 10000) {
					e = ((e * 10 >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + ((e * esign >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.ptr.prototype.floatBits = function(flt) {
		var $args = arguments, $s = 0, $this = this, _tmp, _tmp$1, b = new $Uint64(0, 0), bits, d, exp, mant, n, n$1, n$2, overflow = false, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, y, y$1, y$2, y$3;
		/* */ s: while (true) { switch ($s) { case 0:
		d = $this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* if (d.nd === 0) { */ if (d.nd === 0) {} else { $s = 3; continue; }
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 1; continue;
		/* } */ case 3:
		/* if (d.dp > 310) { */ if (d.dp > 310) {} else { $s = 4; continue; }
			/* goto overflow */ $s = 2; continue;
		/* } */ case 4:
		/* if (d.dp < -330) { */ if (d.dp < -330) {} else { $s = 5; continue; }
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 1; continue;
		/* } */ case 5:
		exp = 0;
		while (d.dp > 0) {
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (d.dp < 0 || (d.dp === 0) && d.d[0] < 53) {
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {} else { $s = 6; continue; }
			/* goto overflow */ $s = 2; continue;
		/* } */ case 6:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) {} else { $s = 7; continue; }
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {} else { $s = 8; continue; }
				/* goto overflow */ $s = 2; continue;
			/* } */ case 8:
		/* } */ case 7:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 1; continue;
		/* overflow: */ case 2:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 1:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits; _tmp$1 = overflow; b = _tmp; overflow = _tmp$1;
		return [b, overflow];
		/* */ case -1: } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, f = 0, ok = false, x, x$1, x$2;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, f = 0, ok = false, x, x$1, x$2;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$1])));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err = $ifaceNil, exp, ext, f = 0, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, trunc, val;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = val; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = $clone(new decimal.ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, b, b$1, d, err = $ifaceNil, exp, ext, f = 0, f$1, mantissa, neg, ok, ok$1, ok$2, ok$3, ovf, ovf$1, trunc, val;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = val; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = $clone(new decimal.ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	ParseFloat = $pkg.ParseFloat = function(s, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, err = $ifaceNil, err1, err1$1, f = 0, f1, f1$1;
		if (bitSize === 32) {
			_tuple = atof32(s); f1 = _tuple[0]; err1 = _tuple[1];
			_tmp = $coerceFloat32(f1); _tmp$1 = err1; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$1 = atof64(s); f1$1 = _tuple$1[0]; err1$1 = _tuple$1[1];
		_tmp$2 = f1$1; _tmp$3 = err1$1; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	NumError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + e.Err.Error();
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		return new NumError.ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		return new NumError.ptr(fn, str, $pkg.ErrRange);
	};
	cutoff64 = function(base) {
		var x;
		if (base < 2) {
			return new $Uint64(0, 0);
		}
		return (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
	};
	ParseUint = $pkg.ParseUint = function(s, base, bitSize) {
		var $args = arguments, $s = 0, $this = this, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, cutoff, d, err = $ifaceNil, i, maxVal, n = new $Uint64(0, 0), n1, s0, v, x, x$1;
		/* */ s: while (true) { switch ($s) { case 0:
		_tmp = new $Uint64(0, 0); _tmp$1 = new $Uint64(0, 0); cutoff = _tmp; maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		s0 = s;
		/* if (s.length < 1) { */ if (s.length < 1) {} else if (2 <= base && base <= 36) { $s = 2; continue; } else if (base === 0) { $s = 3; continue; } else { $s = 4; continue; }
			err = $pkg.ErrSyntax;
			/* goto Error */ $s = 1; continue;
		/* } else if (2 <= base && base <= 36) { */ $s = 5; continue; case 2: 
		/* } else if (base === 0) { */ $s = 5; continue; case 3: 
			/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) {} else if (s.charCodeAt(0) === 48) { $s = 6; continue; } else { $s = 7; continue; }
				base = 16;
				s = s.substring(2);
				/* if (s.length < 1) { */ if (s.length < 1) {} else { $s = 9; continue; }
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 1; continue;
				/* } */ case 9:
			/* } else if (s.charCodeAt(0) === 48) { */ $s = 8; continue; case 6: 
				base = 8;
			/* } else { */ $s = 8; continue; case 7: 
				base = 10;
			/* } */ case 8:
		/* } else { */ $s = 5; continue; case 4: 
			err = errors.New("invalid base " + Itoa(base));
			/* goto Error */ $s = 1; continue;
		/* } */ case 5:
		n = new $Uint64(0, 0);
		cutoff = cutoff64(base);
		maxVal = (x = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x.$high - 0, x.$low - 1));
		i = 0;
		/* while (i < s.length) { */ case 10: if(!(i < s.length)) { $s = 11; continue; }
			v = 0;
			d = s.charCodeAt(i);
			/* if (48 <= d && d <= 57) { */ if (48 <= d && d <= 57) {} else if (97 <= d && d <= 122) { $s = 12; continue; } else if (65 <= d && d <= 90) { $s = 13; continue; } else { $s = 14; continue; }
				v = d - 48 << 24 >>> 24;
			/* } else if (97 <= d && d <= 122) { */ $s = 15; continue; case 12: 
				v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else if (65 <= d && d <= 90) { */ $s = 15; continue; case 13: 
				v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else { */ $s = 15; continue; case 14: 
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 1; continue;
			/* } */ case 15:
			/* if ((v >> 0) >= base) { */ if ((v >> 0) >= base) {} else { $s = 16; continue; }
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 1; continue;
			/* } */ case 16:
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) {} else { $s = 17; continue; }
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 1; continue;
			/* } */ case 17:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$1 = new $Uint64(0, v), new $Uint64(n.$high + x$1.$high, n.$low + x$1.$low));
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) {} else { $s = 18; continue; }
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 1; continue;
			/* } */ case 18:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
		/* Error: */ case 1:
		_tmp$4 = n; _tmp$5 = new NumError.ptr("ParseUint", s0, err); n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ case -1: } return; }
	};
	ParseInt = $pkg.ParseInt = function(s, base, bitSize) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, cutoff, err = $ifaceNil, i = new $Int64(0, 0), n, neg, s0, un, x, x$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0); _tmp$1 = syntaxError("ParseInt", s); i = _tmp; err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize); un = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ptrType).Err, $pkg.ErrRange))) {
			$assertType(err, ptrType).Func = "ParseInt";
			$assertType(err, ptrType).Num = s0;
			_tmp$2 = new $Int64(0, 0); _tmp$3 = err; i = _tmp$2; err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)); _tmp$5 = rangeError("ParseInt", s0); i = _tmp$4; err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low)); _tmp$7 = rangeError("ParseInt", s0); i = _tmp$6; err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n; _tmp$9 = $ifaceNil; i = _tmp$8; err = _tmp$9;
		return [i, err];
	};
	Atoi = $pkg.Atoi = function(s) {
		var _tmp, _tmp$1, _tuple, err = $ifaceNil, i = 0, i64;
		_tuple = ParseInt(s, 10, 0); i64 = _tuple[0]; err = _tuple[1];
		_tmp = ((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0); _tmp$1 = err; i = _tmp; err = _tmp$1;
		return [i, err];
	};
	decimal.ptr.prototype.String = function() {
		var a, buf, n, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = sliceType$6.make(n);
		w = 0;
		if (a.nd === 0) {
			return "0";
		} else if (a.dp <= 0) {
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48;
			w = w + (1) >> 0;
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46;
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.dp))) >> 0;
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46;
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new sliceType$6(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _i, _ref, i;
		_ref = dst;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			(i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48;
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var x, x$1;
		while (a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48)) {
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.ptr.prototype.Assign = function(v) {
		var a, buf, n, v1, x, x$1, x$2;
		a = this;
		buf = $clone(arrayType.zero(), arrayType);
		n = 0;
		while ((v.$high > 0 || (v.$high === 0 && v.$low > 0))) {
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24);
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (n >= 0) {
			(x$1 = a.d, x$2 = a.nd, (x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n]));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var c, c$1, dig, dig$1, n, r, w, x, x$1, x$2, x$3, y, y$1;
		r = 0;
		w = 0;
		n = 0;
		while (((n >> $min(k, 31)) >> 0) === 0) {
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (((n >> $min(k, 31)) >> 0) === 0) {
					n = n * 10 >> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0);
			n = ((n * 10 >> 0) + c >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (r < a.nd) {
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >> 0);
			dig = (n >> $min(k, 31)) >> 0;
			n = n - (((y = k, y < 32 ? (dig << y) : 0) >> 0)) >> 0;
			(x$2 = a.d, (w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >> 0) << 24 >>> 24));
			w = w + (1) >> 0;
			n = ((n * 10 >> 0) + c$1 >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		while (n > 0) {
			dig$1 = (n >> $min(k, 31)) >> 0;
			n = n - (((y$1 = k, y$1 < 32 ? (dig$1 << y$1) : 0) >> 0)) >> 0;
			if (w < 800) {
				(x$3 = a.d, (w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >> 0) << 24 >>> 24));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = n * 10 >> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var i;
		i = 0;
		while (i < s.length) {
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _q, _q$1, delta, n, quo, quo$1, r, rem, rem$1, w, x, x$1, x$2, y;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new sliceType$6(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (r >= 0) {
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0) - 48 >> 0)) << y) : 0) >> 0)) >> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - (10 * quo >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, (w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >> 0) << 24 >>> 24));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (n > 0) {
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - (10 * quo$1 >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, (w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >> 0) << 24 >>> 24));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.ptr.prototype.Shift = function(k) {
		var a;
		a = this;
		if (a.nd === 0) {
		} else if (k > 0) {
			while (k > 27) {
				leftShift(a, 27);
				k = k - (27) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (k < -27) {
				rightShift(a, 27);
				k = k + (27) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r, x, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.ptr.prototype.Round = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.ptr.prototype.RoundDown = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.ptr.prototype.RoundUp = function(nd) {
		var _index, _lhs, a, c, i, x;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (i >= 0) {
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				_lhs = a.d; _index = i; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index]) + (1) << 24 >>> 24;
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (i < a.dp && i < a.nd) {
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (i < a.dp) {
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.ptr.prototype.floatBits = function(flt) {
		var bits = new $Uint64(0, 0), exp, f, mant, n, overflow = false, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, y$1, y$2;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var _tmp, _tmp$1, expBiased, f, lower = new extFloat.ptr(), upper = new extFloat.ptr(), x, x$1, x$2, x$3, x$4;
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = $clone(f, extFloat); _tmp$1 = $clone(f, extFloat); $copy(lower, _tmp, extFloat); $copy(upper, _tmp$1, extFloat);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		$copy(upper, new extFloat.ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg), extFloat);
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			$copy(lower, new extFloat.ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg), extFloat);
		} else {
			$copy(lower, new extFloat.ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg), extFloat);
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.ptr.prototype.Normalize = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, exp, f, mant, shift = 0, x, x$1, x$2, x$3, x$4, x$5;
		f = this;
		_tmp = f.mant; _tmp$1 = f.exp; mant = _tmp; exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant; _tmp$3 = exp; f.mant = _tmp$2; f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.ptr.prototype.Multiply = function(g) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, cross1, cross2, f, fhi, flo, ghi, glo, rem, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		g = $clone(g, extFloat);
		_tmp = $shiftRightUint64(f.mant, 32); _tmp$1 = new $Uint64(0, (f.mant.$low >>> 0)); fhi = _tmp; flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32); _tmp$3 = new $Uint64(0, (g.mant.$low >>> 0)); ghi = _tmp$2; glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var _q, _r, adjExp, denormalExp, errors$1, extrabits, f, halfway, i, mant_extra, ok = false, shift, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.ptr.prototype.frexp10 = function() {
		var _q, _q$1, _tmp, _tmp$1, approxExp10, exp, exp10 = 0, f, i, index = 0;
		f = this;
		approxExp10 = (_q = (((-46 - f.exp >> 0)) * 28 >> 0) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		_tmp = -((-348 + (i * 8 >> 0) >> 0)); _tmp$1 = i; exp10 = _tmp; index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var _tuple, exp10 = 0, i;
		_tuple = c.frexp10(); exp10 = _tuple[0]; i = _tuple[1];
		a.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		b.Multiply(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]));
		return exp10;
	};
	extFloat.ptr.prototype.FixedDecimal = function(d, n) {
		var _q, _q$1, _tmp, _tmp$1, _tuple, buf, digit, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, nd, needed, nonAsciiName, ok, pos, pow, pow10, rest, shift, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10(); exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		nonAsciiName = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0; _tmp$1 = new $Uint64(0, 1); i = _tmp; pow = _tmp$1;
		while (i < 20) {
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - ((x$5 = (pow10.$low >>> 0), (((integer >>> 16 << 16) * x$5 >>> 0) + (integer << 16 >>> 16) * x$5) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = $clone(arrayType$1.zero(), arrayType$1);
		pos = 32;
		v = integer;
		while (v > 0) {
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (((((10 >>> 16 << 16) * v1 >>> 0) + (10 << 16 >>> 16) * v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			(pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24);
			v = v1;
		}
		i$1 = pos;
		while (i$1 < 32) {
			(x$6 = d.d, x$7 = i$1 - pos >> 0, (x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1]));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (needed > 0) {
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				nonAsciiName = $mul64(nonAsciiName, (new $Uint64(0, 10)));
				if ((x$8 = $mul64(new $Uint64(0, 2), nonAsciiName), x$9 = $shiftLeft64(new $Uint64(0, 1), shift), (x$8.$high > x$9.$high || (x$8.$high === x$9.$high && x$8.$low > x$9.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$10 = d.d, (nd < 0 || nd >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24));
				fraction = (x$11 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$11.$high, fraction.$low - x$11.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$12 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$12.$high | fraction.$high, (x$12.$low | fraction.$low) >>> 0)), pow10, shift, nonAsciiName);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (i$2 >= 0) {
			if (!(((x$13 = d.d, ((i$2 < 0 || i$2 >= x$13.$length) ? $throwRuntimeError("index out of range") : x$13.$array[x$13.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, nonAsciiName) {
		var _index, _lhs, i, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), nonAsciiName), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + nonAsciiName.$high, num.$low + nonAsciiName.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - nonAsciiName.$high, num.$low - nonAsciiName.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (i >= 0) {
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 < 0 || 0 >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49);
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				_lhs = d.d; _index = i; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = ((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) + (1) << 24 >>> 24;
			}
			return true;
		}
		return false;
	};
	extFloat.ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, allowance, buf, currentDiff, digit, digit$1, exp10, f, fraction, i, i$1, i$2, integer, integerDigits, multiplier, n, nd, pow, pow$1, shift, targetDiff, v, v1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$20, x$21, x$22, x$23, x$24, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = $clone(arrayType.zero(), arrayType);
			n = 23;
			v = f.mant;
			while ((v.$high > 0 || (v.$high === 0 && v.$low > 0))) {
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24);
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (i < nd) {
				(x$3 = d.d, (i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2])));
				i = i + (1) >> 0;
			}
			_tmp = nd; _tmp$1 = nd; d.nd = _tmp; d.dp = _tmp$1;
			while (d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48)) {
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0; _tmp$3 = new $Uint64(0, 1); i$1 = _tmp$2; pow = _tmp$3;
		while (i$1 < 20) {
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (i$2 < integerDigits) {
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, (i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24));
			integer = integer - ((x$19 = (pow$1.$low >>> 0), (((digit >>> 16 << 16) * x$19 >>> 0) + (digit << 16 >>> 16) * x$19) >>> 0)) >>> 0;
			currentDiff = (x$20 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$20.$high + fraction.$high, x$20.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$21 = d.d, x$22 = d.nd, (x$22 < 0 || x$22 >= x$21.$length) ? $throwRuntimeError("index out of range") : x$21.$array[x$21.$offset + x$22] = ((digit$1 + 48 >> 0) << 24 >>> 24));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$23 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$23.$high, fraction.$low - x$23.$low));
			if ((x$24 = $mul64(allowance, multiplier), (fraction.$high < x$24.$high || (fraction.$high === x$24.$high && fraction.$low < x$24.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var _index, _lhs, x, x$1, x$10, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while ((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low)))) {
			_lhs = d.d; _index = d.nd - 1 >> 0; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = ((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) - (1) << 24 >>> 24;
			currentDiff = (x$4 = ulpDecimal, new $Uint64(currentDiff.$high + x$4.$high, currentDiff.$low + x$4.$low));
		}
		if ((x$5 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$6 = (x$7 = (x$8 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$8.$high, targetDiff.$low + x$8.$low)), new $Uint64(x$7.$high + ulpBinary.$high, x$7.$low + ulpBinary.$low)), (x$5.$high < x$6.$high || (x$5.$high === x$6.$high && x$5.$low <= x$6.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$9 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$9.$high || (currentDiff.$high === x$9.$high && currentDiff.$low > x$9.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$10 = d.d, ((0 < 0 || 0 >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = $pkg.FormatFloat = function(f, fmt, prec, bitSize) {
		return $bytesToString(genericFtoa(sliceType$6.make(0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize));
	};
	AppendFloat = $pkg.AppendFloat = function(dst, f, fmt, prec, bitSize) {
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var _ref, _ref$1, _ref$2, _ref$3, _tuple, bits, buf, buf$1, digits, digs, exp, f, f$1, flt, lower, mant, neg, ok, s, shortest, upper, x, x$1, x$2, x$3, y, y$1;
		bits = new $Uint64(0, 0);
		flt = ptrType$1.nil;
		_ref = bitSize;
		if (_ref === 32) {
			bits = new $Uint64(0, math.Float32bits(val));
			flt = float32info;
		} else if (_ref === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_ref$1 = exp;
		if (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, new sliceType$6($stringToBytes(s)));
		} else if (_ref$1 === 0) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = $clone(new decimalSlice.ptr(), decimalSlice);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.ptr();
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt); lower = $clone(_tuple[0], extFloat); upper = $clone(_tuple[1], extFloat);
			buf = $clone(arrayType$1.zero(), arrayType$1);
			digs.d = new sliceType$6(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_ref$2 = fmt;
			if (_ref$2 === 101 || _ref$2 === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref$2 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref$2 === 103 || _ref$2 === 71) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_ref$3 = fmt;
			if (_ref$3 === 101 || _ref$3 === 69) {
				digits = digits + (1) >> 0;
			} else if (_ref$3 === 103 || _ref$3 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = $clone(arrayType.zero(), arrayType);
				digs.d = new sliceType$6(buf$1);
				f$1 = new extFloat.ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var _ref, _ref$1, d, digs, shortest;
		d = new decimal.ptr();
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = $clone(new decimalSlice.ptr(), decimalSlice);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			$copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false), decimalSlice);
			_ref = fmt;
			if (_ref === 101 || _ref === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref === 103 || _ref === 71) {
				prec = digs.nd;
			}
		} else {
			_ref$1 = fmt;
			if (_ref$1 === 101 || _ref$1 === 69) {
				d.Round(prec + 1 >> 0);
			} else if (_ref$1 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if (_ref$1 === 103 || _ref$1 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			$copy(digs, new decimalSlice.ptr(new sliceType$6(d.d), d.nd, d.dp, false), decimalSlice);
		}
		return formatDigits(dst, shortest, neg, digs, prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _ref, eprec, exp;
		digs = $clone(digs, decimalSlice);
		_ref = fmt;
		if (_ref === 101 || _ref === 69) {
			return fmtE(dst, neg, digs, prec, fmt);
		} else if (_ref === 102) {
			return fmtF(dst, neg, digs, prec);
		} else if (_ref === 103 || _ref === 71) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, digs, prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, digs, max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var _tmp, _tmp$1, _tmp$2, explo, i, inclusive, l, lower, m, mantlo, minexp, okdown, okup, u, upper, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && (332 * ((d.dp - d.nd >> 0)) >> 0) >= (100 * ((exp - (flt.mantbits >> 0) >> 0)) >> 0)) {
			return;
		}
		upper = new decimal.ptr();
		upper.Assign((x = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x.$high + 0, x.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$1 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$1.$high || (mant.$high === x$1.$high && mant.$low > x$1.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high - 0, x$2.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.ptr();
		lower.Assign((x$3 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$3.$high + 0, x$3.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$4 = $div64(mant, new $Uint64(0, 2), true), (x$4.$high === 0 && x$4.$low === 0));
		i = 0;
		while (i < d.nd) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; l = _tmp; m = _tmp$1; u = _tmp$2;
			if (i < lower.nd) {
				l = (x$5 = lower.d, ((i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i]));
			} else {
				l = 48;
			}
			m = (x$6 = d.d, ((i < 0 || i >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i]));
			if (i < upper.nd) {
				u = (x$7 = upper.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			} else {
				u = 48;
			}
			okdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var _q, _r, _ref, buf, ch, exp, i, i$1, m, x, x$1;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = ((d.nd + prec >> 0) + 1 >> 0) - max(d.nd, prec + 1 >> 0) >> 0;
			while (i < m) {
				dst = $append(dst, (x$1 = d.d, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])));
				i = i + (1) >> 0;
			}
			while (i <= prec) {
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		buf = $clone(arrayType$2.zero(), arrayType$2);
		i$1 = 3;
		while (exp >= 10) {
			i$1 = i$1 - (1) >> 0;
			(i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		i$1 = i$1 - (1) >> 0;
		(i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = ((exp + 48 >> 0) << 24 >>> 24);
		_ref = i$1;
		if (_ref === 0) {
			dst = $append(dst, buf[0], buf[1], buf[2]);
		} else if (_ref === 1) {
			dst = $append(dst, buf[1], buf[2]);
		} else if (_ref === 2) {
			dst = $append(dst, 48, buf[2]);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var ch, i, i$1, j, x, x$1;
		d = $clone(d, decimalSlice);
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			i = 0;
			i = 0;
			while (i < d.dp && i < d.nd) {
				dst = $append(dst, (x = d.d, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
				i = i + (1) >> 0;
			}
			while (i < d.dp) {
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i$1 = 0;
			while (i$1 < prec) {
				ch = 48;
				j = d.dp + i$1 >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x$1 = d.d, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				}
				dst = $append(dst, ch);
				i$1 = i$1 + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var _q, _r, buf, esign, n, w, x;
		buf = $clone(arrayType$3.zero(), arrayType$3);
		w = 50;
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		esign = 43;
		if (exp < 0) {
			esign = 45;
			exp = -exp;
		}
		n = 0;
		while (exp > 0 || n < 1) {
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		w = w - (1) >> 0;
		(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = esign;
		w = w - (1) >> 0;
		(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 112;
		n = 0;
		while ((mant.$high > 0 || (mant.$high === 0 && mant.$low > 0)) || n < 1) {
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = ((x = $div64(mant, new $Uint64(0, 10), true), new $Uint64(x.$high + 0, x.$low + 48)).$low << 24 >>> 24);
			mant = $div64(mant, (new $Uint64(0, 10)), false);
		}
		if (neg) {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45;
		}
		return $appendSlice(dst, $subslice(new sliceType$6(buf), w));
	};
	max = function(a, b) {
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = $pkg.FormatInt = function(i, base) {
		var _tuple, s;
		_tuple = formatBits(sliceType$6.nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false); s = _tuple[1];
		return s;
	};
	Itoa = $pkg.Itoa = function(i) {
		return FormatInt(new $Int64(0, i), 10);
	};
	AppendInt = $pkg.AppendInt = function(dst, i, base) {
		var _tuple;
		_tuple = formatBits(dst, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true); dst = _tuple[0];
		return dst;
	};
	AppendUint = $pkg.AppendUint = function(dst, i, base) {
		var _tuple;
		_tuple = formatBits(dst, i, base, false, true); dst = _tuple[0];
		return dst;
	};
	formatBits = function(dst, u, base, neg, append_) {
		var a, b, b$1, d = sliceType$6.nil, i, j, m, q, q$1, s = "", s$1, x, x$1, x$2, x$3;
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = $clone(arrayType$4.zero(), arrayType$4);
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			while ((u.$high > 0 || (u.$high === 0 && u.$low >= 100))) {
				i = i - (2) >> 0;
				q = $div64(u, new $Uint64(0, 100), false);
				j = ((x = $mul64(q, new $Uint64(0, 100)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
				(x$1 = i + 1 >> 0, (x$1 < 0 || x$1 >= a.length) ? $throwRuntimeError("index out of range") : a[x$1] = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789".charCodeAt(j));
				(x$2 = i + 0 >> 0, (x$2 < 0 || x$2 >= a.length) ? $throwRuntimeError("index out of range") : a[x$2] = "0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999".charCodeAt(j));
				u = q;
			}
			if ((u.$high > 0 || (u.$high === 0 && u.$low >= 10))) {
				i = i - (1) >> 0;
				q$1 = $div64(u, new $Uint64(0, 10), false);
				(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$3 = $mul64(q$1, new $Uint64(0, 10)), new $Uint64(u.$high - x$3.$high, u.$low - x$3.$low)).$low >>> 0));
				u = q$1;
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while ((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low))) {
					i = i - (1) >> 0;
					(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0));
					u = $shiftRightUint64(u, (s$1));
				}
			} else {
				b$1 = new $Uint64(0, base);
				while ((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low))) {
					i = i - (1) >> 0;
					(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(($div64(u, b$1, true).$low >>> 0));
					u = $div64(u, (b$1), false);
				}
			}
		}
		i = i - (1) >> 0;
		(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0));
		if (neg) {
			i = i - (1) >> 0;
			(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45;
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new sliceType$6(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new sliceType$6(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly) {
		var _q, _ref, _tuple, buf, n, r, runeTmp, s$1, s$2, width;
		runeTmp = $clone(arrayType$5.zero(), arrayType$5);
		buf = sliceType$6.make(0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		buf = $append(buf, quote);
		width = 0;
		while (s.length > 0) {
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\x")));
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r)) {
				n = utf8.EncodeRune(new sliceType$6(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_ref = r;
			if (_ref === 7) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\a")));
			} else if (_ref === 8) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\b")));
			} else if (_ref === 12) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\f")));
			} else if (_ref === 10) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\n")));
			} else if (_ref === 13) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\r")));
			} else if (_ref === 9) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\t")));
			} else if (_ref === 11) {
				buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\v")));
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\x")));
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else {
					buf = $appendSlice(buf, new sliceType$6($stringToBytes("\\U")));
					s$2 = 28;
					while (s$2 >= 0) {
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - (4) >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = $append(buf, quote);
		return $bytesToString(buf);
	};
	Quote = $pkg.Quote = function(s) {
		return quoteWith(s, 34, false);
	};
	QuoteToASCII = $pkg.QuoteToASCII = function(s) {
		return quoteWith(s, 34, true);
	};
	QuoteRune = $pkg.QuoteRune = function(r) {
		return quoteWith($encodeRune(r), 39, false);
	};
	AppendQuoteRune = $pkg.AppendQuoteRune = function(dst, r) {
		return $appendSlice(dst, new sliceType$6($stringToBytes(QuoteRune(r))));
	};
	QuoteRuneToASCII = $pkg.QuoteRuneToASCII = function(r) {
		return quoteWith($encodeRune(r), 39, true);
	};
	AppendQuoteRuneToASCII = $pkg.AppendQuoteRuneToASCII = function(dst, r) {
		return $appendSlice(dst, new sliceType$6($stringToBytes(QuoteRuneToASCII(r))));
	};
	CanBackquote = $pkg.CanBackquote = function(s) {
		var _tuple, r, wid;
		while (s.length > 0) {
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; wid = _tuple[1];
			s = s.substring(wid);
			if (wid > 1) {
				if (r === 65279) {
					return false;
				}
				continue;
			}
			if (r === 65533) {
				return false;
			}
			if ((r < 32 && !((r === 9))) || (r === 96) || (r === 127)) {
				return false;
			}
		}
		return true;
	};
	unhex = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, ok = false, v = 0;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0; _tmp$1 = true; v = _tmp; ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0; _tmp$3 = true; v = _tmp$2; ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0; _tmp$5 = true; v = _tmp$4; ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = $pkg.UnquoteChar = function(s, quote) {
		var _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _tuple$1, c, c$1, err = $ifaceNil, j, j$1, multibyte = false, n, ok, r, size, tail = "", v, v$1, value = 0, x, x$1;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
			_tmp = r; _tmp$1 = true; _tmp$2 = s.substring(size); _tmp$3 = $ifaceNil; value = _tmp; multibyte = _tmp$1; tail = _tmp$2; err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0); _tmp$5 = false; _tmp$6 = s.substring(1); _tmp$7 = $ifaceNil; value = _tmp$4; multibyte = _tmp$5; tail = _tmp$6; err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		_ref = c$1;
		switch (0) { default: if (_ref === 97) {
			value = 7;
		} else if (_ref === 98) {
			value = 8;
		} else if (_ref === 102) {
			value = 12;
		} else if (_ref === 110) {
			value = 10;
		} else if (_ref === 114) {
			value = 13;
		} else if (_ref === 116) {
			value = 9;
		} else if (_ref === 118) {
			value = 11;
		} else if (_ref === 120 || _ref === 117 || _ref === 85) {
			n = 0;
			_ref$1 = c$1;
			if (_ref$1 === 120) {
				n = 2;
			} else if (_ref$1 === 117) {
				n = 4;
			} else if (_ref$1 === 85) {
				n = 8;
			}
			v = 0;
			if (s.length < n) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j = 0;
			while (j < n) {
				_tuple$1 = unhex(s.charCodeAt(j)); x = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v = (v << 4 >> 0) | x;
				j = j + (1) >> 0;
			}
			s = s.substring(n);
			if (c$1 === 120) {
				value = v;
				break;
			}
			if (v > 1114111) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v;
			multibyte = true;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			v$1 = (c$1 >> 0) - 48 >> 0;
			if (s.length < 2) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j$1 = 0;
			while (j$1 < 2) {
				x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
				if (x$1 < 0 || x$1 > 7) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v$1 = ((v$1 << 3 >> 0)) | x$1;
				j$1 = j$1 + (1) >> 0;
			}
			s = s.substring(2);
			if (v$1 > 255) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v$1;
		} else if (_ref === 92) {
			value = 92;
		} else if (_ref === 39 || _ref === 34) {
			if (!((c$1 === quote))) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = (c$1 >> 0);
		} else {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} }
		tail = s;
		return [value, multibyte, tail, err];
	};
	Unquote = $pkg.Unquote = function(s) {
		var _q, _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, buf, c, err = $ifaceNil, err$1, multibyte, n, n$1, quote, r, runeTmp, size, ss, t = "";
		n = s.length;
		if (n < 2) {
			_tmp = ""; _tmp$1 = $pkg.ErrSyntax; t = _tmp; err = _tmp$1;
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tmp$2 = ""; _tmp$3 = $pkg.ErrSyntax; t = _tmp$2; err = _tmp$3;
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tmp$4 = ""; _tmp$5 = $pkg.ErrSyntax; t = _tmp$4; err = _tmp$5;
				return [t, err];
			}
			_tmp$6 = s; _tmp$7 = $ifaceNil; t = _tmp$6; err = _tmp$7;
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tmp$8 = ""; _tmp$9 = $pkg.ErrSyntax; t = _tmp$8; err = _tmp$9;
			return [t, err];
		}
		if (contains(s, 10)) {
			_tmp$10 = ""; _tmp$11 = $pkg.ErrSyntax; t = _tmp$10; err = _tmp$11;
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_ref = quote;
			if (_ref === 34) {
				_tmp$12 = s; _tmp$13 = $ifaceNil; t = _tmp$12; err = _tmp$13;
				return [t, err];
			} else if (_ref === 39) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tmp$14 = s; _tmp$15 = $ifaceNil; t = _tmp$14; err = _tmp$15;
					return [t, err];
				}
			}
		}
		runeTmp = $clone(arrayType$5.zero(), arrayType$5);
		buf = sliceType$6.make(0, (_q = (3 * s.length >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (s.length > 0) {
			_tuple$1 = UnquoteChar(s, quote); c = _tuple$1[0]; multibyte = _tuple$1[1]; ss = _tuple$1[2]; err$1 = _tuple$1[3];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$16 = ""; _tmp$17 = err$1; t = _tmp$16; err = _tmp$17;
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new sliceType$6(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new sliceType$6(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tmp$18 = ""; _tmp$19 = $pkg.ErrSyntax; t = _tmp$18; err = _tmp$19;
				return [t, err];
			}
		}
		_tmp$20 = $bytesToString(buf); _tmp$21 = $ifaceNil; t = _tmp$20; err = _tmp$21;
		return [t, err];
	};
	contains = function(s, c) {
		var i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _q, _tmp, _tmp$1, h, i, j;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _q, _tmp, _tmp$1, h, i, j;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = $pkg.IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, i, i$1, isNotPrint, isNotPrint$1, isPrint, isPrint$1, j, j$1, rr, rr$1, x, x$1, x$2, x$3;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16); _tmp$1 = isPrint16; _tmp$2 = isNotPrint16; rr = _tmp; isPrint = _tmp$1; isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = i & ~1, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0); _tmp$4 = isPrint32; _tmp$5 = isNotPrint32; rr$1 = _tmp$3; isPrint$1 = _tmp$4; isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = i$1 & ~1, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	ptrType.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "Assign", name: "Assign", pkg: "", type: $funcType([$Uint64], [], false)}, {prop: "Round", name: "Round", pkg: "", type: $funcType([$Int], [], false)}, {prop: "RoundDown", name: "RoundDown", pkg: "", type: $funcType([$Int], [], false)}, {prop: "RoundUp", name: "RoundUp", pkg: "", type: $funcType([$Int], [], false)}, {prop: "RoundedInteger", name: "RoundedInteger", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Shift", name: "Shift", pkg: "", type: $funcType([$Int], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", type: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "set", name: "set", pkg: "strconv", type: $funcType([$String], [$Bool], false)}];
	ptrType$4.methods = [{prop: "AssignComputeBounds", name: "AssignComputeBounds", pkg: "", type: $funcType([$Uint64, $Int, $Bool, ptrType$1], [extFloat, extFloat], false)}, {prop: "AssignDecimal", name: "AssignDecimal", pkg: "", type: $funcType([$Uint64, $Int, $Bool, $Bool, ptrType$1], [$Bool], false)}, {prop: "FixedDecimal", name: "FixedDecimal", pkg: "", type: $funcType([ptrType$3, $Int], [$Bool], false)}, {prop: "Multiply", name: "Multiply", pkg: "", type: $funcType([extFloat], [], false)}, {prop: "Normalize", name: "Normalize", pkg: "", type: $funcType([], [$Uint], false)}, {prop: "ShortestDecimal", name: "ShortestDecimal", pkg: "", type: $funcType([ptrType$3, ptrType$4, ptrType$4], [$Bool], false)}, {prop: "floatBits", name: "floatBits", pkg: "strconv", type: $funcType([ptrType$1], [$Uint64, $Bool], false)}, {prop: "frexp10", name: "frexp10", pkg: "strconv", type: $funcType([], [$Int, $Int], false)}];
	NumError.init([{prop: "Func", name: "Func", pkg: "", type: $String, tag: ""}, {prop: "Num", name: "Num", pkg: "", type: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", type: $error, tag: ""}]);
	decimal.init([{prop: "d", name: "d", pkg: "strconv", type: arrayType$6, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", type: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", type: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", type: $Bool, tag: ""}, {prop: "trunc", name: "trunc", pkg: "strconv", type: $Bool, tag: ""}]);
	leftCheat.init([{prop: "delta", name: "delta", pkg: "strconv", type: $Int, tag: ""}, {prop: "cutoff", name: "cutoff", pkg: "strconv", type: $String, tag: ""}]);
	extFloat.init([{prop: "mant", name: "mant", pkg: "strconv", type: $Uint64, tag: ""}, {prop: "exp", name: "exp", pkg: "strconv", type: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", type: $Bool, tag: ""}]);
	floatInfo.init([{prop: "mantbits", name: "mantbits", pkg: "strconv", type: $Uint, tag: ""}, {prop: "expbits", name: "expbits", pkg: "strconv", type: $Uint, tag: ""}, {prop: "bias", name: "bias", pkg: "strconv", type: $Int, tag: ""}]);
	decimalSlice.init([{prop: "d", name: "d", pkg: "strconv", type: sliceType$6, tag: ""}, {prop: "nd", name: "nd", pkg: "strconv", type: $Int, tag: ""}, {prop: "dp", name: "dp", pkg: "strconv", type: $Int, tag: ""}, {prop: "neg", name: "neg", pkg: "strconv", type: $Bool, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_strconv = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = math.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		optimize = true;
		powtab = new sliceType([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new sliceType$1([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new sliceType$2([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new sliceType$3([new leftCheat.ptr(0, ""), new leftCheat.ptr(1, "5"), new leftCheat.ptr(1, "25"), new leftCheat.ptr(1, "125"), new leftCheat.ptr(2, "625"), new leftCheat.ptr(2, "3125"), new leftCheat.ptr(2, "15625"), new leftCheat.ptr(3, "78125"), new leftCheat.ptr(3, "390625"), new leftCheat.ptr(3, "1953125"), new leftCheat.ptr(4, "9765625"), new leftCheat.ptr(4, "48828125"), new leftCheat.ptr(4, "244140625"), new leftCheat.ptr(4, "1220703125"), new leftCheat.ptr(5, "6103515625"), new leftCheat.ptr(5, "30517578125"), new leftCheat.ptr(5, "152587890625"), new leftCheat.ptr(6, "762939453125"), new leftCheat.ptr(6, "3814697265625"), new leftCheat.ptr(6, "19073486328125"), new leftCheat.ptr(7, "95367431640625"), new leftCheat.ptr(7, "476837158203125"), new leftCheat.ptr(7, "2384185791015625"), new leftCheat.ptr(7, "11920928955078125"), new leftCheat.ptr(8, "59604644775390625"), new leftCheat.ptr(8, "298023223876953125"), new leftCheat.ptr(8, "1490116119384765625"), new leftCheat.ptr(9, "7450580596923828125")]);
		smallPowersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray($kindStruct, [new extFloat.ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray($kindUint64, [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.ptr(23, 8, -127);
		float64info = new floatInfo.ptr(52, 11, -1023);
		isPrint16 = new sliceType$4([32, 126, 161, 887, 890, 895, 900, 1366, 1369, 1418, 1421, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2226, 2276, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3072, 3129, 3133, 3149, 3157, 3161, 3168, 3171, 3174, 3183, 3192, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3329, 3386, 3389, 3406, 3415, 3415, 3424, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3558, 3567, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5108, 5120, 5788, 5792, 5880, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6832, 6846, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7417, 7424, 7669, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8381, 8400, 8432, 8448, 8585, 8592, 9210, 9216, 9254, 9280, 9290, 9312, 11123, 11126, 11157, 11160, 11193, 11197, 11217, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11842, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40908, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42743, 42752, 42925, 42928, 42929, 42999, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43259, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43574, 43584, 43597, 43600, 43609, 43612, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43871, 43876, 43877, 43968, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65069, 65072, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new sliceType$4([173, 907, 909, 930, 1328, 1376, 1416, 1424, 1757, 2111, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3141, 3145, 3159, 3200, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6431, 6751, 7415, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 11209, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42654, 42895, 43470, 43519, 43815, 43823, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new sliceType$5([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65932, 65936, 65947, 65952, 65952, 66000, 66045, 66176, 66204, 66208, 66256, 66272, 66299, 66304, 66339, 66352, 66378, 66384, 66426, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 66816, 66855, 66864, 66915, 66927, 66927, 67072, 67382, 67392, 67413, 67424, 67431, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67742, 67751, 67759, 67840, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68030, 68031, 68096, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68255, 68288, 68326, 68331, 68342, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68497, 68505, 68508, 68521, 68527, 68608, 68680, 69216, 69246, 69632, 69709, 69714, 69743, 69759, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 69968, 70006, 70016, 70088, 70093, 70093, 70096, 70106, 70113, 70132, 70144, 70205, 70320, 70378, 70384, 70393, 70401, 70412, 70415, 70416, 70419, 70457, 70460, 70468, 70471, 70472, 70475, 70477, 70487, 70487, 70493, 70499, 70502, 70508, 70512, 70516, 70784, 70855, 70864, 70873, 71040, 71093, 71096, 71113, 71168, 71236, 71248, 71257, 71296, 71351, 71360, 71369, 71840, 71922, 71935, 71935, 72384, 72440, 73728, 74648, 74752, 74868, 77824, 78894, 92160, 92728, 92736, 92777, 92782, 92783, 92880, 92909, 92912, 92917, 92928, 92997, 93008, 93047, 93053, 93071, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 113664, 113770, 113776, 113788, 113792, 113800, 113808, 113817, 113820, 113823, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119261, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 120831, 124928, 125124, 125127, 125142, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127221, 127232, 127244, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 127788, 127792, 127869, 127872, 127950, 127956, 127991, 128000, 128330, 128336, 128578, 128581, 128719, 128736, 128748, 128752, 128755, 128768, 128883, 128896, 128980, 129024, 129035, 129040, 129095, 129104, 129113, 129120, 129159, 129168, 129197, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new sliceType$4([12, 39, 59, 62, 926, 2057, 2102, 2134, 2564, 2580, 2584, 4285, 4405, 4626, 4868, 4905, 4913, 4916, 9327, 27231, 27482, 27490, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61632, 61648, 61743, 62719, 62842, 62884]);
		shifts = $toNativeArray($kindUint, [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
		/* */ } return; } }; $init_strconv.$blocking = true; return $init_strconv;
	};
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, errors, js, io, unicode, utf8, sliceType, sliceType$3, IndexByte, explode, hashStr, hashStrRev, Count, Contains, ContainsRune, Index, LastIndex, IndexRune, IndexAny, genSplit, Split, Join, HasPrefix, Map, ToLower, IndexFunc, indexFunc, Replace;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
		sliceType = $sliceType($Uint8);
		sliceType$3 = $sliceType($String);
	IndexByte = $pkg.IndexByte = function(s, c) {
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	explode = function(s, n) {
		var _tmp, _tmp$1, _tuple, a, ch, cur, i, l, size;
		if (n === 0) {
			return sliceType$3.nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = sliceType$3.make(n);
		size = 0;
		ch = 0;
		_tmp = 0; _tmp$1 = 0; i = _tmp; cur = _tmp$1;
		while ((i + 1 >> 0) < n) {
			_tuple = utf8.DecodeRuneInString(s.substring(cur)); ch = _tuple[0]; size = _tuple[1];
			if (ch === 65533) {
				(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = "\xEF\xBF\xBD";
			} else {
				(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur, (cur + size >> 0));
			}
			cur = cur + (size) >> 0;
			i = i + (1) >> 0;
		}
		if (cur < s.length) {
			(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur);
		}
		return a;
	};
	hashStr = function(sep) {
		var _tmp, _tmp$1, hash, i, i$1, pow, sq, x, x$1;
		hash = 0;
		i = 0;
		while (i < sep.length) {
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;
		i$1 = sep.length;
		while (i$1 > 0) {
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	hashStrRev = function(sep) {
		var _tmp, _tmp$1, hash, i, i$1, pow, sq, x, x$1;
		hash = 0;
		i = sep.length - 1 >> 0;
		while (i >= 0) {
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i - (1) >> 0;
		}
		_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;
		i$1 = sep.length;
		while (i$1 > 0) {
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	Count = $pkg.Count = function(s, sep) {
		var _tuple, c, h, hashsep, i, i$1, i$2, lastmatch, n, pow, x, x$1;
		n = 0;
		if (sep.length === 0) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length === 1) {
			c = sep.charCodeAt(0);
			i = 0;
			while (i < s.length) {
				if (s.charCodeAt(i) === c) {
					n = n + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			return n;
		} else if (sep.length > s.length) {
			return 0;
		} else if (sep.length === s.length) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i$1 = 0;
		while (i$1 < sep.length) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 + (1) >> 0;
		}
		lastmatch = 0;
		if ((h === hashsep) && s.substring(0, sep.length) === sep) {
			n = n + (1) >> 0;
			lastmatch = sep.length;
		}
		i$2 = sep.length;
		while (i$2 < s.length) {
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$2 - sep.length >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$2 = i$2 + (1) >> 0;
			if ((h === hashsep) && lastmatch <= (i$2 - sep.length >> 0) && s.substring((i$2 - sep.length >> 0), i$2) === sep) {
				n = n + (1) >> 0;
				lastmatch = i$2;
			}
		}
		return n;
	};
	Contains = $pkg.Contains = function(s, substr) {
		return Index(s, substr) >= 0;
	};
	ContainsRune = $pkg.ContainsRune = function(s, r) {
		return IndexRune(s, r) >= 0;
	};
	Index = $pkg.Index = function(s, sep) {
		var _tuple, h, hashsep, i, i$1, n, pow, x, x$1;
		n = sep.length;
		if (n === 0) {
			return 0;
		} else if (n === 1) {
			return IndexByte(s, sep.charCodeAt(0));
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashStr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i = 0;
		while (i < n) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		if ((h === hashsep) && s.substring(0, n) === sep) {
			return 0;
		}
		i$1 = n;
		while (i$1 < s.length) {
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$1) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$1 - n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$1 = i$1 + (1) >> 0;
			if ((h === hashsep) && s.substring((i$1 - n >> 0), i$1) === sep) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	LastIndex = $pkg.LastIndex = function(s, sep) {
		var _tuple, c, h, hashsep, i, i$1, i$2, last, n, pow, x, x$1;
		n = sep.length;
		if (n === 0) {
			return s.length;
		} else if (n === 1) {
			c = sep.charCodeAt(0);
			i = s.length - 1 >> 0;
			while (i >= 0) {
				if (s.charCodeAt(i) === c) {
					return i;
				}
				i = i - (1) >> 0;
			}
			return -1;
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashStrRev(sep); hashsep = _tuple[0]; pow = _tuple[1];
		last = s.length - n >> 0;
		h = 0;
		i$1 = s.length - 1 >> 0;
		while (i$1 >= last) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 - (1) >> 0;
		}
		if ((h === hashsep) && s.substring(last) === sep) {
			return last;
		}
		i$2 = last - 1 >> 0;
		while (i$2 >= 0) {
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$2 + n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			if ((h === hashsep) && s.substring(i$2, (i$2 + n >> 0)) === sep) {
				return i$2;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return -1;
	};
	IndexRune = $pkg.IndexRune = function(s, r) {
		var _i, _ref, _rune, c, i;
		if (r < 128) {
			return IndexByte(s, (r << 24 >>> 24));
		} else {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				if (c === r) {
					return i;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	IndexAny = $pkg.IndexAny = function(s, chars) {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, c, i, m;
		if (chars.length > 0) {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				_ref$1 = chars;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					_rune$1 = $decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	genSplit = function(s, sep, sepSave, n) {
		var a, c, i, na, start;
		if (n === 0) {
			return sliceType$3.nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = sliceType$3.make(n);
		na = 0;
		i = 0;
		while ((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n) {
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				(na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start, (i + sepSave >> 0));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		(na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start);
		return $subslice(a, 0, (na + 1 >> 0));
	};
	Split = $pkg.Split = function(s, sep) {
		return genSplit(s, sep, 0, -1);
	};
	Join = $pkg.Join = function(a, sep) {
		var _i, _ref, b, bp, i, n, s;
		if (a.$length === 0) {
			return "";
		}
		if (a.$length === 1) {
			return ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]);
		}
		n = sep.length * ((a.$length - 1 >> 0)) >> 0;
		i = 0;
		while (i < a.$length) {
			n = n + (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = sliceType.make(n);
		bp = $copyString(b, ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (_i < _ref.$length) {
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	HasPrefix = $pkg.HasPrefix = function(s, prefix) {
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	Map = $pkg.Map = function(mapping, s) {
		var _i, _ref, _rune, b, c, i, maxbytes, nb, nbytes, r, wid;
		maxbytes = s.length;
		nbytes = 0;
		b = sliceType.nil;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			r = mapping(c);
			if (b === sliceType.nil) {
				if (r === c) {
					_i += _rune[1];
					continue;
				}
				b = sliceType.make(maxbytes);
				nbytes = $copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = (maxbytes * 2 >> 0) + 4 >> 0;
					nb = sliceType.make(maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		}
		if (b === sliceType.nil) {
			return s;
		}
		return $bytesToString($subslice(b, 0, nbytes));
	};
	ToLower = $pkg.ToLower = function(s) {
		return Map(unicode.ToLower, s);
	};
	IndexFunc = $pkg.IndexFunc = function(s, f) {
		return indexFunc(s, f, true);
	};
	indexFunc = function(s, f, truth) {
		var _tuple, r, start, wid;
		start = 0;
		while (start < s.length) {
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s.substring(start)); r = _tuple[0]; wid = _tuple[1];
			}
			if (f(r) === truth) {
				return start;
			}
			start = start + (wid) >> 0;
		}
		return -1;
	};
	Replace = $pkg.Replace = function(s, old, new$1, n) {
		var _tuple, i, j, m, start, t, w, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = sliceType.make((s.length + (n * ((new$1.length - old.length >> 0)) >> 0) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (i < n) {
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString(s.substring(start)); wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index(s.substring(start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), s.substring(start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), s.substring(start))) >> 0;
		return $bytesToString($subslice(t, 0, w));
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_strings = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = unicode.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_strings.$blocking = true; return $init_strings;
	};
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {}, sliceType, sliceType$1, IsSurrogate, DecodeRune, EncodeRune, Encode, Decode;
		sliceType = $sliceType($Uint16);
		sliceType$1 = $sliceType($Int32);
	IsSurrogate = $pkg.IsSurrogate = function(r) {
		return 55296 <= r && r < 57344;
	};
	DecodeRune = $pkg.DecodeRune = function(r1, r2) {
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	EncodeRune = $pkg.EncodeRune = function(r) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, r1 = 0, r2 = 0;
		if (r < 65536 || r > 1114111 || IsSurrogate(r)) {
			_tmp = 65533; _tmp$1 = 65533; r1 = _tmp; r2 = _tmp$1;
			return [r1, r2];
		}
		r = r - (65536) >> 0;
		_tmp$2 = 55296 + (((r >> 10 >> 0)) & 1023) >> 0; _tmp$3 = 56320 + (r & 1023) >> 0; r1 = _tmp$2; r2 = _tmp$3;
		return [r1, r2];
	};
	Encode = $pkg.Encode = function(s) {
		var _i, _i$1, _ref, _ref$1, _tuple, a, n, r1, r2, v, v$1, x;
		n = s.$length;
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v >= 65536) {
				n = n + (1) >> 0;
			}
			_i++;
		}
		a = sliceType.make(n);
		n = 0;
		_ref$1 = s;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (v$1 < 0 || 55296 <= v$1 && v$1 < 57344 || v$1 > 1114111) {
				v$1 = 65533;
				(n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (v$1 << 16 >>> 16);
				n = n + (1) >> 0;
			} else if (v$1 < 65536) {
				(n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (v$1 << 16 >>> 16);
				n = n + (1) >> 0;
			} else {
				_tuple = EncodeRune(v$1); r1 = _tuple[0]; r2 = _tuple[1];
				(n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (r1 << 16 >>> 16);
				(x = n + 1 >> 0, (x < 0 || x >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + x] = (r2 << 16 >>> 16));
				n = n + (2) >> 0;
			}
			_i$1++;
		}
		return $subslice(a, 0, n);
	};
	Decode = $pkg.Decode = function(s) {
		var a, i, n, r, x, x$1, x$2;
		a = sliceType$1.make(s.$length);
		n = 0;
		i = 0;
		while (i < s.$length) {
			r = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (55296 <= r && r < 56320 && (i + 1 >> 0) < s.$length && 56320 <= (x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) && (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])) < 57344) {
				(n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = DecodeRune((r >> 0), ((x$2 = i + 1 >> 0, ((x$2 < 0 || x$2 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$2])) >> 0));
				i = i + (1) >> 0;
				n = n + (1) >> 0;
			} else if (55296 <= r && r < 57344) {
				(n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = 65533;
				n = n + (1) >> 0;
			} else {
				(n < 0 || n >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + n] = (r >> 0);
				n = n + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		return $subslice(a, 0, n);
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_utf16 = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_utf16.$blocking = true; return $init_utf16;
	};
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, bytes, errors, js, sync, atomic, utf16, DummyError, DLLError, DLL, Proc, LazyDLL, LazyProc, Handle, Errno, SecurityAttributes, Overlapped, Filetime, Win32finddata, win32finddata1, ByHandleFileInformation, Win32FileAttributeData, reparseDataBuffer, sliceType, ptrType, arrayType, ptrType$1, arrayType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, sliceType$2, sliceType$3, ptrType$6, ptrType$10, ptrType$11, ptrType$15, arrayType$2, ptrType$18, ptrType$19, ptrType$20, sliceType$5, ptrType$27, ptrType$28, sliceType$7, ptrType$29, ptrType$30, arrayType$8, arrayType$9, arrayType$10, arrayType$11, arrayType$21, warningPrinted, lineBuffer, minusOne, errors$1, modkernel32, modadvapi32, modshell32, modmswsock, modcrypt32, modws2_32, moddnsapi, modiphlpapi, modsecur32, modnetapi32, moduserenv, procGetLastError, procLoadLibraryW, procFreeLibrary, procGetProcAddress, procGetVersion, procFormatMessageW, procExitProcess, procCreateFileW, procReadFile, procWriteFile, procSetFilePointer, procCloseHandle, procGetStdHandle, procFindFirstFileW, procFindNextFileW, procFindClose, procGetFileInformationByHandle, procGetCurrentDirectoryW, procSetCurrentDirectoryW, procCreateDirectoryW, procRemoveDirectoryW, procDeleteFileW, procMoveFileW, procGetComputerNameW, procSetEndOfFile, procGetSystemTimeAsFileTime, procGetTimeZoneInformation, procCreateIoCompletionPort, procGetQueuedCompletionStatus, procPostQueuedCompletionStatus, procCancelIo, procCancelIoEx, procCreateProcessW, procOpenProcess, procTerminateProcess, procGetExitCodeProcess, procGetStartupInfoW, procGetCurrentProcess, procGetProcessTimes, procDuplicateHandle, procWaitForSingleObject, procGetTempPathW, procCreatePipe, procGetFileType, procCryptAcquireContextW, procCryptReleaseContext, procCryptGenRandom, procGetEnvironmentStringsW, procFreeEnvironmentStringsW, procGetEnvironmentVariableW, procSetEnvironmentVariableW, procSetFileTime, procGetFileAttributesW, procSetFileAttributesW, procGetFileAttributesExW, procGetCommandLineW, procCommandLineToArgvW, procLocalFree, procSetHandleInformation, procFlushFileBuffers, procGetFullPathNameW, procGetLongPathNameW, procGetShortPathNameW, procCreateFileMappingW, procMapViewOfFile, procUnmapViewOfFile, procFlushViewOfFile, procVirtualLock, procVirtualUnlock, procTransmitFile, procReadDirectoryChangesW, procCertOpenSystemStoreW, procCertOpenStore, procCertEnumCertificatesInStore, procCertAddCertificateContextToStore, procCertCloseStore, procCertGetCertificateChain, procCertFreeCertificateChain, procCertCreateCertificateContext, procCertFreeCertificateContext, procCertVerifyCertificateChainPolicy, procRegOpenKeyExW, procRegCloseKey, procRegQueryInfoKeyW, procRegEnumKeyExW, procRegQueryValueExW, procGetCurrentProcessId, procGetConsoleMode, procWriteConsoleW, procReadConsoleW, procCreateToolhelp32Snapshot, procProcess32FirstW, procProcess32NextW, procDeviceIoControl, procCreateSymbolicLinkW, procCreateHardLinkW, procWSAStartup, procWSACleanup, procWSAIoctl, procsocket, procsetsockopt, procgetsockopt, procbind, procconnect, procgetsockname, procgetpeername, proclisten, procshutdown, procclosesocket, procAcceptEx, procGetAcceptExSockaddrs, procWSARecv, procWSASend, procWSARecvFrom, procWSASendTo, procgethostbyname, procgetservbyname, procntohs, procgetprotobyname, procDnsQuery_W, procDnsRecordListFree, procDnsNameCompare_W, procGetAddrInfoW, procFreeAddrInfoW, procGetIfEntry, procGetAdaptersInfo, procSetFileCompletionNotificationModes, procWSAEnumProtocolsW, procTranslateNameW, procGetUserNameExW, procNetUserGetInfo, procNetGetJoinInformation, procNetApiBufferFree, procLookupAccountSidW, procLookupAccountNameW, procConvertSidToStringSidW, procConvertStringSidToSidW, procGetLengthSid, procCopySid, procOpenProcessToken, procGetTokenInformation, procGetUserProfileDirectoryW, init, printWarning, printToConsole, use, Syscall, Syscall6, Syscall9, Syscall12, Syscall15, getprocaddress, getStdHandle, GetConsoleMode, WriteFile, GetCommandLine, CommandLineToArgv, Getenv, NewLazyDLL, FullPath, itoa, uitoa, ByteSliceFromString, BytePtrFromString, StringToUTF16, UTF16FromString, UTF16ToString, StringToUTF16Ptr, UTF16PtrFromString, langid, Exit, makeInheritSa, Open, Read, Write, Seek, Ftruncate, Fsync, FindFirstFile, FindNextFile, Fchdir, Fchmod, Fchown, Readlink, FreeLibrary, FormatMessage, ExitProcess, CreateFile, ReadFile, SetFilePointer, CloseHandle, findFirstFile1, findNextFile1, FindClose, GetFileInformationByHandle, SetEndOfFile, GetFileType, GetFileAttributesEx, LocalFree, FlushFileBuffers, GetFullPathName, WriteConsole, ReadConsole, DeviceIoControl, copyFindData;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	utf16 = $packages["unicode/utf16"];
	DummyError = $pkg.DummyError = $newType(0, $kindStruct, "syscall.DummyError", "DummyError", "syscall", function() {
		this.$val = this;
	});
	DLLError = $pkg.DLLError = $newType(0, $kindStruct, "syscall.DLLError", "DLLError", "syscall", function(Err_, ObjName_, Msg_) {
		this.$val = this;
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
		this.ObjName = ObjName_ !== undefined ? ObjName_ : "";
		this.Msg = Msg_ !== undefined ? Msg_ : "";
	});
	DLL = $pkg.DLL = $newType(0, $kindStruct, "syscall.DLL", "DLL", "syscall", function(Name_, Handle_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Handle = Handle_ !== undefined ? Handle_ : 0;
	});
	Proc = $pkg.Proc = $newType(0, $kindStruct, "syscall.Proc", "Proc", "syscall", function(Dll_, Name_, addr_) {
		this.$val = this;
		this.Dll = Dll_ !== undefined ? Dll_ : ptrType$3.nil;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.addr = addr_ !== undefined ? addr_ : 0;
	});
	LazyDLL = $pkg.LazyDLL = $newType(0, $kindStruct, "syscall.LazyDLL", "LazyDLL", "syscall", function(mu_, dll_, Name_) {
		this.$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.ptr();
		this.dll = dll_ !== undefined ? dll_ : ptrType$3.nil;
		this.Name = Name_ !== undefined ? Name_ : "";
	});
	LazyProc = $pkg.LazyProc = $newType(0, $kindStruct, "syscall.LazyProc", "LazyProc", "syscall", function(mu_, Name_, l_, proc_) {
		this.$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.ptr();
		this.Name = Name_ !== undefined ? Name_ : "";
		this.l = l_ !== undefined ? l_ : ptrType$5.nil;
		this.proc = proc_ !== undefined ? proc_ : ptrType$4.nil;
	});
	Handle = $pkg.Handle = $newType(4, $kindUintptr, "syscall.Handle", "Handle", "syscall", null);
	Errno = $pkg.Errno = $newType(4, $kindUintptr, "syscall.Errno", "Errno", "syscall", null);
	SecurityAttributes = $pkg.SecurityAttributes = $newType(0, $kindStruct, "syscall.SecurityAttributes", "SecurityAttributes", "syscall", function(Length_, SecurityDescriptor_, InheritHandle_) {
		this.$val = this;
		this.Length = Length_ !== undefined ? Length_ : 0;
		this.SecurityDescriptor = SecurityDescriptor_ !== undefined ? SecurityDescriptor_ : 0;
		this.InheritHandle = InheritHandle_ !== undefined ? InheritHandle_ : 0;
	});
	Overlapped = $pkg.Overlapped = $newType(0, $kindStruct, "syscall.Overlapped", "Overlapped", "syscall", function(Internal_, InternalHigh_, Offset_, OffsetHigh_, HEvent_) {
		this.$val = this;
		this.Internal = Internal_ !== undefined ? Internal_ : 0;
		this.InternalHigh = InternalHigh_ !== undefined ? InternalHigh_ : 0;
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.OffsetHigh = OffsetHigh_ !== undefined ? OffsetHigh_ : 0;
		this.HEvent = HEvent_ !== undefined ? HEvent_ : 0;
	});
	Filetime = $pkg.Filetime = $newType(0, $kindStruct, "syscall.Filetime", "Filetime", "syscall", function(LowDateTime_, HighDateTime_) {
		this.$val = this;
		this.LowDateTime = LowDateTime_ !== undefined ? LowDateTime_ : 0;
		this.HighDateTime = HighDateTime_ !== undefined ? HighDateTime_ : 0;
	});
	Win32finddata = $pkg.Win32finddata = $newType(0, $kindStruct, "syscall.Win32finddata", "Win32finddata", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_, Reserved0_, Reserved1_, FileName_, AlternateFileName_) {
		this.$val = this;
		this.FileAttributes = FileAttributes_ !== undefined ? FileAttributes_ : 0;
		this.CreationTime = CreationTime_ !== undefined ? CreationTime_ : new Filetime.ptr();
		this.LastAccessTime = LastAccessTime_ !== undefined ? LastAccessTime_ : new Filetime.ptr();
		this.LastWriteTime = LastWriteTime_ !== undefined ? LastWriteTime_ : new Filetime.ptr();
		this.FileSizeHigh = FileSizeHigh_ !== undefined ? FileSizeHigh_ : 0;
		this.FileSizeLow = FileSizeLow_ !== undefined ? FileSizeLow_ : 0;
		this.Reserved0 = Reserved0_ !== undefined ? Reserved0_ : 0;
		this.Reserved1 = Reserved1_ !== undefined ? Reserved1_ : 0;
		this.FileName = FileName_ !== undefined ? FileName_ : arrayType$8.zero();
		this.AlternateFileName = AlternateFileName_ !== undefined ? AlternateFileName_ : arrayType$9.zero();
	});
	win32finddata1 = $pkg.win32finddata1 = $newType(0, $kindStruct, "syscall.win32finddata1", "win32finddata1", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_, Reserved0_, Reserved1_, FileName_, AlternateFileName_) {
		this.$val = this;
		this.FileAttributes = FileAttributes_ !== undefined ? FileAttributes_ : 0;
		this.CreationTime = CreationTime_ !== undefined ? CreationTime_ : new Filetime.ptr();
		this.LastAccessTime = LastAccessTime_ !== undefined ? LastAccessTime_ : new Filetime.ptr();
		this.LastWriteTime = LastWriteTime_ !== undefined ? LastWriteTime_ : new Filetime.ptr();
		this.FileSizeHigh = FileSizeHigh_ !== undefined ? FileSizeHigh_ : 0;
		this.FileSizeLow = FileSizeLow_ !== undefined ? FileSizeLow_ : 0;
		this.Reserved0 = Reserved0_ !== undefined ? Reserved0_ : 0;
		this.Reserved1 = Reserved1_ !== undefined ? Reserved1_ : 0;
		this.FileName = FileName_ !== undefined ? FileName_ : arrayType$10.zero();
		this.AlternateFileName = AlternateFileName_ !== undefined ? AlternateFileName_ : arrayType$11.zero();
	});
	ByHandleFileInformation = $pkg.ByHandleFileInformation = $newType(0, $kindStruct, "syscall.ByHandleFileInformation", "ByHandleFileInformation", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, VolumeSerialNumber_, FileSizeHigh_, FileSizeLow_, NumberOfLinks_, FileIndexHigh_, FileIndexLow_) {
		this.$val = this;
		this.FileAttributes = FileAttributes_ !== undefined ? FileAttributes_ : 0;
		this.CreationTime = CreationTime_ !== undefined ? CreationTime_ : new Filetime.ptr();
		this.LastAccessTime = LastAccessTime_ !== undefined ? LastAccessTime_ : new Filetime.ptr();
		this.LastWriteTime = LastWriteTime_ !== undefined ? LastWriteTime_ : new Filetime.ptr();
		this.VolumeSerialNumber = VolumeSerialNumber_ !== undefined ? VolumeSerialNumber_ : 0;
		this.FileSizeHigh = FileSizeHigh_ !== undefined ? FileSizeHigh_ : 0;
		this.FileSizeLow = FileSizeLow_ !== undefined ? FileSizeLow_ : 0;
		this.NumberOfLinks = NumberOfLinks_ !== undefined ? NumberOfLinks_ : 0;
		this.FileIndexHigh = FileIndexHigh_ !== undefined ? FileIndexHigh_ : 0;
		this.FileIndexLow = FileIndexLow_ !== undefined ? FileIndexLow_ : 0;
	});
	Win32FileAttributeData = $pkg.Win32FileAttributeData = $newType(0, $kindStruct, "syscall.Win32FileAttributeData", "Win32FileAttributeData", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_) {
		this.$val = this;
		this.FileAttributes = FileAttributes_ !== undefined ? FileAttributes_ : 0;
		this.CreationTime = CreationTime_ !== undefined ? CreationTime_ : new Filetime.ptr();
		this.LastAccessTime = LastAccessTime_ !== undefined ? LastAccessTime_ : new Filetime.ptr();
		this.LastWriteTime = LastWriteTime_ !== undefined ? LastWriteTime_ : new Filetime.ptr();
		this.FileSizeHigh = FileSizeHigh_ !== undefined ? FileSizeHigh_ : 0;
		this.FileSizeLow = FileSizeLow_ !== undefined ? FileSizeLow_ : 0;
	});
	reparseDataBuffer = $pkg.reparseDataBuffer = $newType(0, $kindStruct, "syscall.reparseDataBuffer", "reparseDataBuffer", "syscall", function(ReparseTag_, ReparseDataLength_, Reserved_, SubstituteNameOffset_, SubstituteNameLength_, PrintNameOffset_, PrintNameLength_, Flags_, PathBuffer_) {
		this.$val = this;
		this.ReparseTag = ReparseTag_ !== undefined ? ReparseTag_ : 0;
		this.ReparseDataLength = ReparseDataLength_ !== undefined ? ReparseDataLength_ : 0;
		this.Reserved = Reserved_ !== undefined ? Reserved_ : 0;
		this.SubstituteNameOffset = SubstituteNameOffset_ !== undefined ? SubstituteNameOffset_ : 0;
		this.SubstituteNameLength = SubstituteNameLength_ !== undefined ? SubstituteNameLength_ : 0;
		this.PrintNameOffset = PrintNameOffset_ !== undefined ? PrintNameOffset_ : 0;
		this.PrintNameLength = PrintNameLength_ !== undefined ? PrintNameLength_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.PathBuffer = PathBuffer_ !== undefined ? PathBuffer_ : arrayType$21.zero();
	});
		sliceType = $sliceType($Uint8);
		ptrType = $ptrType($Uint16);
		arrayType = $arrayType($Uint16, 8192);
		ptrType$1 = $ptrType(arrayType);
		arrayType$1 = $arrayType(ptrType$1, 8192);
		ptrType$2 = $ptrType(arrayType$1);
		ptrType$3 = $ptrType(DLL);
		ptrType$4 = $ptrType(Proc);
		ptrType$5 = $ptrType(LazyDLL);
		sliceType$2 = $sliceType($Uint16);
		sliceType$3 = $sliceType($Int32);
		ptrType$6 = $ptrType(ptrType);
		ptrType$10 = $ptrType(SecurityAttributes);
		ptrType$11 = $ptrType($Uint32);
		ptrType$15 = $ptrType($Uint8);
		arrayType$2 = $arrayType($Uint8, 32);
		ptrType$18 = $ptrType(Overlapped);
		ptrType$19 = $ptrType($Int32);
		ptrType$20 = $ptrType(Filetime);
		sliceType$5 = $sliceType($Uint8);
		ptrType$27 = $ptrType(DummyError);
		ptrType$28 = $ptrType(DLLError);
		sliceType$7 = $sliceType($Uintptr);
		ptrType$29 = $ptrType(LazyProc);
		ptrType$30 = $ptrType(Errno);
		arrayType$8 = $arrayType($Uint16, 259);
		arrayType$9 = $arrayType($Uint16, 13);
		arrayType$10 = $arrayType($Uint16, 260);
		arrayType$11 = $arrayType($Uint16, 14);
		arrayType$21 = $arrayType($Uint16, 1);
	init = function() {
		$flushConsole = (function() {
			if (!((lineBuffer.$length === 0))) {
				$global.console.log($externalize($bytesToString(lineBuffer), $String));
				lineBuffer = sliceType.nil;
			}
		});
	};
	printWarning = function() {
		if (!warningPrinted) {
			console.log("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = bytes.IndexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	use = function(p) {
	};
	Syscall = $pkg.Syscall = function(trap, nargs, a1, a2, a3) {
		var _tmp, _tmp$1, _tmp$2, err = 0, r1 = 0, r2 = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	Syscall6 = $pkg.Syscall6 = function(trap, nargs, a1, a2, a3, a4, a5, a6) {
		var _tmp, _tmp$1, _tmp$2, err = 0, r1 = 0, r2 = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	Syscall9 = $pkg.Syscall9 = function(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
		var _tmp, _tmp$1, _tmp$2, err = 0, r1 = 0, r2 = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	Syscall12 = $pkg.Syscall12 = function(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) {
		var _tmp, _tmp$1, _tmp$2, err = 0, r1 = 0, r2 = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	Syscall15 = $pkg.Syscall15 = function(trap, nargs, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
		var _tmp, _tmp$1, _tmp$2, err = 0, r1 = 0, r2 = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 0; _tmp$2 = 536870913; r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
		return [r1, r2, err];
	};
	getprocaddress = function(handle, procname) {
		var _tmp, _tmp$1, err = 0, proc = 0;
		printWarning();
		_tmp = (minusOne >>> 0); _tmp$1 = 536870913; proc = _tmp; err = _tmp$1;
		return [proc, err];
	};
	LazyDLL.ptr.prototype.Load = function() {
		var d;
		d = this;
		return new DLLError.ptr($ifaceNil, "", "system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
	};
	LazyDLL.prototype.Load = function() { return this.$val.Load(); };
	LazyProc.ptr.prototype.Find = function() {
		var p;
		p = this;
		return new DLLError.ptr($ifaceNil, "", "system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
	};
	LazyProc.prototype.Find = function() { return this.$val.Find(); };
	getStdHandle = function(h) {
		var fd = 0;
		if (h === -11) {
			fd = 1;
			return fd;
		}
		if (h === -12) {
			fd = 2;
			return fd;
		}
		fd = 0;
		return fd;
	};
	GetConsoleMode = $pkg.GetConsoleMode = function(console, mode) {
		var err = $ifaceNil, x;
		err = (x = new DummyError.ptr(), new x.constructor.elem(x));
		return err;
	};
	WriteFile = $pkg.WriteFile = function(handle, buf, done, overlapped) {
		var err = $ifaceNil;
		if ((handle === 1) || (handle === 2)) {
			printToConsole(buf);
			done.$set((buf.$length >>> 0));
			err = $ifaceNil;
			return err;
		}
		printWarning();
		err = $ifaceNil;
		return err;
	};
	GetCommandLine = $pkg.GetCommandLine = function() {
		var cmd = ptrType.nil;
		return cmd;
	};
	CommandLineToArgv = $pkg.CommandLineToArgv = function(cmd, argc) {
		var _tmp, _tmp$1, argv = ptrType$2.nil, err = $ifaceNil, x;
		_tmp = ptrType$2.nil; _tmp$1 = (x = new DummyError.ptr(), new x.constructor.elem(x)); argv = _tmp; err = _tmp$1;
		return [argv, err];
	};
	Getenv = $pkg.Getenv = function(key) {
		var _tmp, _tmp$1, found = false, value = "";
		_tmp = ""; _tmp$1 = false; value = _tmp; found = _tmp$1;
		return [value, found];
	};
	DummyError.ptr.prototype.Error = function() {
		var e;
		e = $clone(this, DummyError);
		return "";
	};
	DummyError.prototype.Error = function() { return this.$val.Error(); };
	DLLError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Msg;
	};
	DLLError.prototype.Error = function() { return this.$val.Error(); };
	DLL.ptr.prototype.FindProc = function(name) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, a, d, e, err = $ifaceNil, namep, p, proc = ptrType$4.nil;
		d = this;
		_tuple = BytePtrFromString(name); namep = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ptrType$4.nil; _tmp$1 = err; proc = _tmp; err = _tmp$1;
			return [proc, err];
		}
		_tuple$1 = getprocaddress((d.Handle >>> 0), namep); a = _tuple$1[0]; e = _tuple$1[1];
		use(namep);
		if (!((e === 0))) {
			_tmp$2 = ptrType$4.nil; _tmp$3 = new DLLError.ptr(new Errno(e), name, "Failed to find " + name + " procedure in " + d.Name + ": " + new Errno(e).Error()); proc = _tmp$2; err = _tmp$3;
			return [proc, err];
		}
		p = new Proc.ptr(d, name, a);
		_tmp$4 = p; _tmp$5 = $ifaceNil; proc = _tmp$4; err = _tmp$5;
		return [proc, err];
	};
	DLL.prototype.FindProc = function(name) { return this.$val.FindProc(name); };
	DLL.ptr.prototype.MustFindProc = function(name) {
		var _tuple, d, e, p;
		d = this;
		_tuple = d.FindProc(name); p = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
		return p;
	};
	DLL.prototype.MustFindProc = function(name) { return this.$val.MustFindProc(name); };
	DLL.ptr.prototype.Release = function() {
		var d, err = $ifaceNil;
		d = this;
		err = FreeLibrary(d.Handle);
		return err;
	};
	DLL.prototype.Release = function() { return this.$val.Release(); };
	Proc.ptr.prototype.Addr = function() {
		var p;
		p = this;
		return p.addr;
	};
	Proc.prototype.Addr = function() { return this.$val.Addr(); };
	Proc.ptr.prototype.Call = function(a) {
		var _ref, _tuple, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, lastErr = $ifaceNil, p, r1 = 0, r2 = 0;
		p = this;
		_ref = a.$length;
		if (_ref === 0) {
			_tuple = Syscall(p.Addr(), (a.$length >>> 0), 0, 0, 0); r1 = _tuple[0]; r2 = _tuple[1]; lastErr = new Errno(_tuple[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 1) {
			_tuple$1 = Syscall(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), 0, 0); r1 = _tuple$1[0]; r2 = _tuple$1[1]; lastErr = new Errno(_tuple$1[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 2) {
			_tuple$2 = Syscall(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), 0); r1 = _tuple$2[0]; r2 = _tuple$2[1]; lastErr = new Errno(_tuple$2[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 3) {
			_tuple$3 = Syscall(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2])); r1 = _tuple$3[0]; r2 = _tuple$3[1]; lastErr = new Errno(_tuple$3[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 4) {
			_tuple$4 = Syscall6(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), 0, 0); r1 = _tuple$4[0]; r2 = _tuple$4[1]; lastErr = new Errno(_tuple$4[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 5) {
			_tuple$5 = Syscall6(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), 0); r1 = _tuple$5[0]; r2 = _tuple$5[1]; lastErr = new Errno(_tuple$5[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 6) {
			_tuple$6 = Syscall6(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5])); r1 = _tuple$6[0]; r2 = _tuple$6[1]; lastErr = new Errno(_tuple$6[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 7) {
			_tuple$7 = Syscall9(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), ((6 < 0 || 6 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), 0, 0); r1 = _tuple$7[0]; r2 = _tuple$7[1]; lastErr = new Errno(_tuple$7[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 8) {
			_tuple$8 = Syscall9(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), ((6 < 0 || 6 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), ((7 < 0 || 7 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), 0); r1 = _tuple$8[0]; r2 = _tuple$8[1]; lastErr = new Errno(_tuple$8[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 9) {
			_tuple$9 = Syscall9(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), ((6 < 0 || 6 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), ((7 < 0 || 7 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), ((8 < 0 || 8 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8])); r1 = _tuple$9[0]; r2 = _tuple$9[1]; lastErr = new Errno(_tuple$9[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 10) {
			_tuple$10 = Syscall12(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), ((6 < 0 || 6 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), ((7 < 0 || 7 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), ((8 < 0 || 8 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), ((9 < 0 || 9 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), 0, 0); r1 = _tuple$10[0]; r2 = _tuple$10[1]; lastErr = new Errno(_tuple$10[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 11) {
			_tuple$11 = Syscall12(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), ((6 < 0 || 6 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), ((7 < 0 || 7 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), ((8 < 0 || 8 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), ((9 < 0 || 9 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), ((10 < 0 || 10 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), 0); r1 = _tuple$11[0]; r2 = _tuple$11[1]; lastErr = new Errno(_tuple$11[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 12) {
			_tuple$12 = Syscall12(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), ((6 < 0 || 6 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), ((7 < 0 || 7 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), ((8 < 0 || 8 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), ((9 < 0 || 9 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), ((10 < 0 || 10 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), ((11 < 0 || 11 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 11])); r1 = _tuple$12[0]; r2 = _tuple$12[1]; lastErr = new Errno(_tuple$12[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 13) {
			_tuple$13 = Syscall15(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), ((6 < 0 || 6 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), ((7 < 0 || 7 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), ((8 < 0 || 8 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), ((9 < 0 || 9 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), ((10 < 0 || 10 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), ((11 < 0 || 11 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 11]), ((12 < 0 || 12 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 12]), 0, 0); r1 = _tuple$13[0]; r2 = _tuple$13[1]; lastErr = new Errno(_tuple$13[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 14) {
			_tuple$14 = Syscall15(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), ((6 < 0 || 6 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), ((7 < 0 || 7 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), ((8 < 0 || 8 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), ((9 < 0 || 9 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), ((10 < 0 || 10 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), ((11 < 0 || 11 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 11]), ((12 < 0 || 12 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 12]), ((13 < 0 || 13 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 13]), 0); r1 = _tuple$14[0]; r2 = _tuple$14[1]; lastErr = new Errno(_tuple$14[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 15) {
			_tuple$15 = Syscall15(p.Addr(), (a.$length >>> 0), ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]), ((1 < 0 || 1 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 1]), ((2 < 0 || 2 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 2]), ((3 < 0 || 3 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 3]), ((4 < 0 || 4 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 4]), ((5 < 0 || 5 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 5]), ((6 < 0 || 6 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 6]), ((7 < 0 || 7 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 7]), ((8 < 0 || 8 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 8]), ((9 < 0 || 9 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 9]), ((10 < 0 || 10 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 10]), ((11 < 0 || 11 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 11]), ((12 < 0 || 12 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 12]), ((13 < 0 || 13 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 13]), ((14 < 0 || 14 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 14])); r1 = _tuple$15[0]; r2 = _tuple$15[1]; lastErr = new Errno(_tuple$15[2]);
			return [r1, r2, lastErr];
		} else {
			$panic(new $String("Call " + p.Name + " with too many arguments " + itoa(a.$length) + "."));
		}
		return [r1, r2, lastErr];
	};
	Proc.prototype.Call = function(a) { return this.$val.Call(a); };
	LazyDLL.ptr.prototype.mustLoad = function() {
		var d, e;
		d = this;
		e = d.Load();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
	};
	LazyDLL.prototype.mustLoad = function() { return this.$val.mustLoad(); };
	LazyDLL.ptr.prototype.Handle = function() {
		var d;
		d = this;
		d.mustLoad();
		return (d.dll.Handle >>> 0);
	};
	LazyDLL.prototype.Handle = function() { return this.$val.Handle(); };
	LazyDLL.ptr.prototype.NewProc = function(name) {
		var d;
		d = this;
		return new LazyProc.ptr(new sync.Mutex.ptr(), name, d, ptrType$4.nil);
	};
	LazyDLL.prototype.NewProc = function(name) { return this.$val.NewProc(name); };
	NewLazyDLL = $pkg.NewLazyDLL = function(name) {
		return new LazyDLL.ptr(new sync.Mutex.ptr(), ptrType$3.nil, name);
	};
	LazyProc.ptr.prototype.mustFind = function() {
		var e, p;
		p = this;
		e = p.Find();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			$panic(e);
		}
	};
	LazyProc.prototype.mustFind = function() { return this.$val.mustFind(); };
	LazyProc.ptr.prototype.Addr = function() {
		var p;
		p = this;
		p.mustFind();
		return p.proc.Addr();
	};
	LazyProc.prototype.Addr = function() { return this.$val.Addr(); };
	LazyProc.ptr.prototype.Call = function(a) {
		var _tuple, lastErr = $ifaceNil, p, r1 = 0, r2 = 0;
		p = this;
		p.mustFind();
		_tuple = p.proc.Call(a); r1 = _tuple[0]; r2 = _tuple[1]; lastErr = _tuple[2];
		return [r1, r2, lastErr];
	};
	LazyProc.prototype.Call = function(a) { return this.$val.Call(a); };
	FullPath = $pkg.FullPath = function(name) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, buf, err = $ifaceNil, n, p, path = "";
		_tuple = UTF16PtrFromString(name); p = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ""; _tmp$1 = err; path = _tmp; err = _tmp$1;
			return [path, err];
		}
		buf = sliceType$2.make(100);
		_tuple$1 = GetFullPathName(p, (buf.$length >>> 0), new ptrType(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, buf), ptrType$6.nil); n = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ""; _tmp$3 = err; path = _tmp$2; err = _tmp$3;
			return [path, err];
		}
		if (n > (buf.$length >>> 0)) {
			buf = sliceType$2.make(n);
			_tuple$2 = GetFullPathName(p, (buf.$length >>> 0), new ptrType(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, buf), ptrType$6.nil); n = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = ""; _tmp$5 = err; path = _tmp$4; err = _tmp$5;
				return [path, err];
			}
			if (n > (buf.$length >>> 0)) {
				_tmp$6 = ""; _tmp$7 = new Errno(536870951); path = _tmp$6; err = _tmp$7;
				return [path, err];
			}
		}
		_tmp$8 = UTF16ToString($subslice(buf, 0, n)); _tmp$9 = $ifaceNil; path = _tmp$8; err = _tmp$9;
		return [path, err];
	};
	itoa = function(val) {
		if (val < 0) {
			return "-" + uitoa((-val >>> 0));
		}
		return uitoa((val >>> 0));
	};
	uitoa = function(val) {
		var _q, _r, buf, i;
		buf = $clone(arrayType$2.zero(), arrayType$2);
		i = 31;
		while (val >= 10) {
			(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >>> 0) << 24 >>> 24);
		return $bytesToString($subslice(new sliceType(buf), i));
	};
	ByteSliceFromString = $pkg.ByteSliceFromString = function(s) {
		var a, i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === 0) {
				return [sliceType.nil, new Errno(536870951)];
			}
			i = i + (1) >> 0;
		}
		a = sliceType.make((s.length + 1 >> 0));
		$copyString(a, s);
		return [a, $ifaceNil];
	};
	BytePtrFromString = $pkg.BytePtrFromString = function(s) {
		var _tuple, a, err;
		_tuple = ByteSliceFromString(s); a = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$15.nil, err];
		}
		return [new ptrType$15(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, a), $ifaceNil];
	};
	StringToUTF16 = $pkg.StringToUTF16 = function(s) {
		var _tuple, a, err;
		_tuple = UTF16FromString(s); a = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(new $String("syscall: string with NUL passed to StringToUTF16"));
		}
		return a;
	};
	UTF16FromString = $pkg.UTF16FromString = function(s) {
		var i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === 0) {
				return [sliceType$2.nil, new Errno(536870951)];
			}
			i = i + (1) >> 0;
		}
		return [utf16.Encode(new sliceType$3($stringToRunes(s + "\x00"))), $ifaceNil];
	};
	UTF16ToString = $pkg.UTF16ToString = function(s) {
		var _i, _ref, i, v;
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v === 0) {
				s = $subslice(s, 0, i);
				break;
			}
			_i++;
		}
		return $runesToString(utf16.Decode(s));
	};
	StringToUTF16Ptr = $pkg.StringToUTF16Ptr = function(s) {
		return new ptrType(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, StringToUTF16(s));
	};
	UTF16PtrFromString = $pkg.UTF16PtrFromString = function(s) {
		var _tuple, a, err;
		_tuple = UTF16FromString(s); a = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType.nil, err];
		}
		return [new ptrType(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, a), $ifaceNil];
	};
	langid = function(pri, sub) {
		return (((sub >>> 0) << 10 >>> 0) | (pri >>> 0)) >>> 0;
	};
	Errno.prototype.Error = function() {
		var _tuple, _tuple$1, b, e, err, flags, idx, n, x, x$1;
		e = this.$val;
		idx = ((e - 536870912 >>> 0) >> 0);
		if (0 <= idx && idx < 131) {
			return ((idx < 0 || idx >= errors$1.length) ? $throwRuntimeError("index out of range") : errors$1[idx]);
		}
		flags = 12800;
		b = sliceType$2.make(300);
		_tuple = FormatMessage(flags, 0, (e >>> 0), langid(9, 1), b, ptrType$15.nil); n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tuple$1 = FormatMessage(flags, 0, (e >>> 0), 0, b, ptrType$15.nil); n = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return "winapi error #" + itoa((e >> 0));
			}
		}
		while (n > 0 && (((x = n - 1 >>> 0, ((x < 0 || x >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x])) === 10) || ((x$1 = n - 1 >>> 0, ((x$1 < 0 || x$1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x$1])) === 13))) {
			n = n - (1) >>> 0;
		}
		return $runesToString(utf16.Decode($subslice(b, 0, n)));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val;
		return (e === 536870950) || (e === 536870971) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val;
		return (e === 536870918) || (e === 536871039) || (e === 536871033);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	Exit = $pkg.Exit = function(code) {
		ExitProcess((code >>> 0));
	};
	makeInheritSa = function() {
		var sa;
		sa = $clone(new SecurityAttributes.ptr(), SecurityAttributes);
		sa.Length = 12;
		sa.InheritHandle = 1;
		return sa;
	};
	Open = $pkg.Open = function(path, mode, perm) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, access, createmode, e, err = $ifaceNil, fd = 0, h, pathp, sa, sharemode;
		if (path.length === 0) {
			_tmp = 4294967295; _tmp$1 = new Errno(2); fd = _tmp; err = _tmp$1;
			return [fd, err];
		}
		_tuple = UTF16PtrFromString(path); pathp = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = 4294967295; _tmp$3 = err; fd = _tmp$2; err = _tmp$3;
			return [fd, err];
		}
		access = 0;
		_ref = mode & 3;
		if (_ref === 0) {
			access = 2147483648;
		} else if (_ref === 1) {
			access = 1073741824;
		} else if (_ref === 2) {
			access = 3221225472;
		}
		if (!(((mode & 64) === 0))) {
			access = (access | (1073741824)) >>> 0;
		}
		if (!(((mode & 1024) === 0))) {
			access = access & ~(1073741824);
			access = (access | (4)) >>> 0;
		}
		sharemode = 3;
		sa = ptrType$10.nil;
		if ((mode & 524288) === 0) {
			sa = makeInheritSa();
		}
		createmode = 0;
		if ((mode & 192) === 192) {
			createmode = 1;
		} else if ((mode & 576) === 576) {
			createmode = 2;
		} else if ((mode & 64) === 64) {
			createmode = 4;
		} else if ((mode & 512) === 512) {
			createmode = 5;
		} else {
			createmode = 3;
		}
		_tuple$1 = CreateFile(pathp, access, sharemode, sa, createmode, 128, 0); h = _tuple$1[0]; e = _tuple$1[1];
		_tmp$4 = h; _tmp$5 = e; fd = _tmp$4; err = _tmp$5;
		return [fd, err];
	};
	Read = $pkg.Read = function(fd, p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, done, e, err = $ifaceNil, n = 0;
		done = 0;
		e = ReadFile(fd, p, new ptrType$11(function() { return done; }, function($v) { done = $v; }), ptrType$18.nil);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, new Errno(109))) {
				_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			_tmp$2 = 0; _tmp$3 = e; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		_tmp$4 = (done >> 0); _tmp$5 = $ifaceNil; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	Write = $pkg.Write = function(fd, p) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, done, e, err = $ifaceNil, n = 0;
		done = 0;
		e = WriteFile(fd, p, new ptrType$11(function() { return done; }, function($v) { done = $v; }), ptrType$18.nil);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = 0; _tmp$1 = e; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tmp$2 = (done >> 0); _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Seek = $pkg.Seek = function(fd, offset, whence) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, e, err = $ifaceNil, ft, hi, lo, newoffset = new $Int64(0, 0), rlo, w, x, x$1, x$2;
		w = 0;
		_ref = whence;
		if (_ref === 0) {
			w = 0;
		} else if (_ref === 1) {
			w = 1;
		} else if (_ref === 2) {
			w = 2;
		}
		hi = ((x = $shiftRightInt64(offset, 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
		lo = ((offset.$low + ((offset.$high >> 31) * 4294967296)) >> 0);
		_tuple = GetFileType(fd); ft = _tuple[0];
		if (ft === 3) {
			_tmp = new $Int64(0, 0); _tmp$1 = new Errno(536871015); newoffset = _tmp; err = _tmp$1;
			return [newoffset, err];
		}
		_tuple$1 = SetFilePointer(fd, lo, new ptrType$19(function() { return hi; }, function($v) { hi = $v; }), w); rlo = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0); _tmp$3 = e; newoffset = _tmp$2; err = _tmp$3;
			return [newoffset, err];
		}
		_tmp$4 = (x$1 = $shiftLeft64(new $Int64(0, hi), 32), x$2 = new $Int64(0, rlo), new $Int64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)); _tmp$5 = $ifaceNil; newoffset = _tmp$4; err = _tmp$5;
		return [newoffset, err];
	};
	Ftruncate = $pkg.Ftruncate = function(fd, length) {
		var $deferred = [], $err = null, _tuple, _tuple$1, curoffset, e, err = $ifaceNil;
		/* */ try { $deferFrames.push($deferred);
		_tuple = Seek(fd, new $Int64(0, 0), 1); curoffset = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = e;
			return err;
		}
		$deferred.push([Seek, [fd, curoffset, 0]]);
		_tuple$1 = Seek(fd, length, 0); e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = e;
			return err;
		}
		e = SetEndOfFile(fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = e;
			return err;
		}
		err = $ifaceNil;
		return err;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return err; }
	};
	Fsync = $pkg.Fsync = function(fd) {
		var err = $ifaceNil;
		err = FlushFileBuffers(fd);
		return err;
	};
	FindFirstFile = $pkg.FindFirstFile = function(name, data) {
		var _tuple, data1, err = $ifaceNil, handle = 0;
		data1 = $clone(new win32finddata1.ptr(), win32finddata1);
		_tuple = findFirstFile1(name, data1); handle = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			copyFindData(data, data1);
		}
		return [handle, err];
	};
	FindNextFile = $pkg.FindNextFile = function(handle, data) {
		var data1, err = $ifaceNil;
		data1 = $clone(new win32finddata1.ptr(), win32finddata1);
		err = findNextFile1(handle, data1);
		if ($interfaceIsEqual(err, $ifaceNil)) {
			copyFindData(data, data1);
		}
		return err;
	};
	Fchdir = $pkg.Fchdir = function(fd) {
		var err = $ifaceNil;
		err = new Errno(536871042);
		return err;
	};
	Fchmod = $pkg.Fchmod = function(fd, mode) {
		var err = $ifaceNil;
		err = new Errno(536871042);
		return err;
	};
	Fchown = $pkg.Fchown = function(fd, uid, gid) {
		var err = $ifaceNil;
		err = new Errno(536871042);
		return err;
	};
	Readlink = $pkg.Readlink = function(path, buf) {
		var $deferred = [], $err = null, _array, _q, _struct, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, _view, bytesReturned, err = $ifaceNil, fd, n = 0, rdb, rdbbuf, s;
		/* */ try { $deferFrames.push($deferred);
		_tuple = CreateFile(StringToUTF16Ptr(path), 2147483648, 0, ptrType$10.nil, 3, 35651584, 0); fd = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = -1; _tmp$1 = err; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		$deferred.push([CloseHandle, [fd]]);
		rdbbuf = sliceType.make(16384);
		bytesReturned = 0;
		err = DeviceIoControl(fd, 589992, ptrType$15.nil, 0, new ptrType$15(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, rdbbuf), (rdbbuf.$length >>> 0), new ptrType$11(function() { return bytesReturned; }, function($v) { bytesReturned = $v; }), ptrType$18.nil);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = -1; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		rdb = (_array = $sliceToArray(rdbbuf), _struct = new reparseDataBuffer.ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.ReparseTag = _view.getUint32(0, true), _struct.ReparseDataLength = _view.getUint16(4, true), _struct.Reserved = _view.getUint16(6, true), _struct.SubstituteNameOffset = _view.getUint16(8, true), _struct.SubstituteNameLength = _view.getUint16(10, true), _struct.PrintNameOffset = _view.getUint16(12, true), _struct.PrintNameLength = _view.getUint16(14, true), _struct.Flags = _view.getUint32(16, true), _struct.PathBuffer = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 20, _array.buffer.byteLength)), _struct);
		if ((bytesReturned >>> 0) < 22 || !((rdb.ReparseTag === 2684354572))) {
			_tmp$4 = -1; _tmp$5 = new Errno(2); n = _tmp$4; err = _tmp$5;
			return [n, err];
		}
		s = UTF16ToString($subslice(new sliceType$2($sliceToArray(new sliceType$5(rdb.PathBuffer))), 0, (_q = rdb.PrintNameLength / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))));
		n = $copySlice(buf, new sliceType($stringToBytes(s)));
		_tmp$6 = n; _tmp$7 = $ifaceNil; n = _tmp$6; err = _tmp$7;
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	FreeLibrary = $pkg.FreeLibrary = function(handle) {
		var _tuple, e1, err = $ifaceNil, r1;
		_tuple = Syscall(procFreeLibrary.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	FormatMessage = $pkg.FormatMessage = function(flags, msgsrc, msgid, langid$1, buf, args) {
		var _p0, _tuple, e1, err = $ifaceNil, n = 0, r0;
		_p0 = ptrType.nil;
		if (buf.$length > 0) {
			_p0 = new ptrType(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, buf);
		}
		_tuple = Syscall9(procFormatMessageW.Addr(), 7, (flags >>> 0), (msgsrc >>> 0), (msgid >>> 0), (langid$1 >>> 0), _p0, (buf.$length >>> 0), args, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	ExitProcess = $pkg.ExitProcess = function(exitcode) {
		Syscall(procExitProcess.Addr(), 1, (exitcode >>> 0), 0, 0);
		return;
	};
	CreateFile = $pkg.CreateFile = function(name, access, mode, sa, createmode, attrs, templatefile) {
		var _array, _struct, _tuple, _view, e1, err = $ifaceNil, handle = 0, r0;
		_array = new Uint8Array(12);
		_tuple = Syscall9(procCreateFileW.Addr(), 7, name, (access >>> 0), (mode >>> 0), _array, (createmode >>> 0), (attrs >>> 0), (templatefile >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		_struct = sa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Length = _view.getUint32(0, true), _struct.SecurityDescriptor = _view.getUintptr(4, true), _struct.InheritHandle = _view.getUint32(8, true);
		handle = (r0 >>> 0);
		if (handle === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	ReadFile = $pkg.ReadFile = function(handle, buf, done, overlapped) {
		var _array, _p0, _struct, _tuple, _view, e1, err = $ifaceNil, r1;
		_p0 = ptrType$15.nil;
		if (buf.$length > 0) {
			_p0 = new ptrType$15(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, buf);
		}
		_array = new Uint8Array(20);
		_tuple = Syscall6(procReadFile.Addr(), 5, (handle >>> 0), _p0, (buf.$length >>> 0), done, _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = overlapped, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Internal = _view.getUintptr(0, true), _struct.InternalHigh = _view.getUintptr(4, true), _struct.Offset = _view.getUint32(8, true), _struct.OffsetHigh = _view.getUint32(12, true), _struct.HEvent = _view.getUintptr(16, true);
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	SetFilePointer = $pkg.SetFilePointer = function(handle, lowoffset, highoffsetptr, whence) {
		var _tuple, e1, err = $ifaceNil, newlowoffset = 0, r0;
		_tuple = Syscall6(procSetFilePointer.Addr(), 4, (handle >>> 0), (lowoffset >>> 0), highoffsetptr, (whence >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		newlowoffset = (r0 >>> 0);
		if (newlowoffset === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [newlowoffset, err];
	};
	CloseHandle = $pkg.CloseHandle = function(handle) {
		var _tuple, e1, err = $ifaceNil, r1;
		_tuple = Syscall(procCloseHandle.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	findFirstFile1 = function(name, data) {
		var _array, _struct, _tuple, _view, e1, err = $ifaceNil, handle = 0, r0;
		_array = new Uint8Array(592);
		_tuple = Syscall(procFindFirstFileW.Addr(), 2, name, _array, 0); r0 = _tuple[0]; e1 = _tuple[2];
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.FileSizeHigh = _view.getUint32(28, true), _struct.FileSizeLow = _view.getUint32(32, true), _struct.Reserved0 = _view.getUint32(36, true), _struct.Reserved1 = _view.getUint32(40, true), _struct.FileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 44, _array.buffer.byteLength)), _struct.AlternateFileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 564, _array.buffer.byteLength));
		handle = (r0 >>> 0);
		if (handle === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	findNextFile1 = function(handle, data) {
		var _array, _struct, _tuple, _view, e1, err = $ifaceNil, r1;
		_array = new Uint8Array(592);
		_tuple = Syscall(procFindNextFileW.Addr(), 2, (handle >>> 0), _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.FileSizeHigh = _view.getUint32(28, true), _struct.FileSizeLow = _view.getUint32(32, true), _struct.Reserved0 = _view.getUint32(36, true), _struct.Reserved1 = _view.getUint32(40, true), _struct.FileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 44, _array.buffer.byteLength)), _struct.AlternateFileName = new ($nativeArray($kindUint16))(_array.buffer, $min(_array.byteOffset + 564, _array.buffer.byteLength));
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	FindClose = $pkg.FindClose = function(handle) {
		var _tuple, e1, err = $ifaceNil, r1;
		_tuple = Syscall(procFindClose.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	GetFileInformationByHandle = $pkg.GetFileInformationByHandle = function(handle, data) {
		var _array, _struct, _tuple, _view, e1, err = $ifaceNil, r1;
		_array = new Uint8Array(52);
		_tuple = Syscall(procGetFileInformationByHandle.Addr(), 2, (handle >>> 0), _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.VolumeSerialNumber = _view.getUint32(28, true), _struct.FileSizeHigh = _view.getUint32(32, true), _struct.FileSizeLow = _view.getUint32(36, true), _struct.NumberOfLinks = _view.getUint32(40, true), _struct.FileIndexHigh = _view.getUint32(44, true), _struct.FileIndexLow = _view.getUint32(48, true);
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	SetEndOfFile = $pkg.SetEndOfFile = function(handle) {
		var _tuple, e1, err = $ifaceNil, r1;
		_tuple = Syscall(procSetEndOfFile.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	GetFileType = $pkg.GetFileType = function(filehandle) {
		var _tuple, e1, err = $ifaceNil, n = 0, r0;
		_tuple = Syscall(procGetFileType.Addr(), 1, (filehandle >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	GetFileAttributesEx = $pkg.GetFileAttributesEx = function(name, level, info) {
		var _tuple, e1, err = $ifaceNil, r1;
		_tuple = Syscall(procGetFileAttributesExW.Addr(), 3, name, (level >>> 0), info); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	LocalFree = $pkg.LocalFree = function(hmem) {
		var _tuple, e1, err = $ifaceNil, handle = 0, r0;
		_tuple = Syscall(procLocalFree.Addr(), 1, (hmem >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		handle = (r0 >>> 0);
		if (!((handle === 0))) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	FlushFileBuffers = $pkg.FlushFileBuffers = function(handle) {
		var _tuple, e1, err = $ifaceNil, r1;
		_tuple = Syscall(procFlushFileBuffers.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	GetFullPathName = $pkg.GetFullPathName = function(path, buflen, buf, fname) {
		var _tuple, e1, err = $ifaceNil, n = 0, r0;
		_tuple = Syscall6(procGetFullPathNameW.Addr(), 4, path, (buflen >>> 0), buf, fname, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	WriteConsole = $pkg.WriteConsole = function(console, buf, towrite, written, reserved) {
		var _tuple, e1, err = $ifaceNil, r1;
		_tuple = Syscall6(procWriteConsoleW.Addr(), 5, (console >>> 0), buf, (towrite >>> 0), written, reserved, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	ReadConsole = $pkg.ReadConsole = function(console, buf, toread, read, inputControl) {
		var _tuple, e1, err = $ifaceNil, r1;
		_tuple = Syscall6(procReadConsoleW.Addr(), 5, (console >>> 0), buf, (toread >>> 0), read, inputControl, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	DeviceIoControl = $pkg.DeviceIoControl = function(handle, ioControlCode, inBuffer, inBufferSize, outBuffer, outBufferSize, bytesReturned, overlapped) {
		var _array, _struct, _tuple, _view, e1, err = $ifaceNil, r1;
		_array = new Uint8Array(20);
		_tuple = Syscall9(procDeviceIoControl.Addr(), 8, (handle >>> 0), (ioControlCode >>> 0), inBuffer, (inBufferSize >>> 0), outBuffer, (outBufferSize >>> 0), bytesReturned, _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = overlapped, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Internal = _view.getUintptr(0, true), _struct.InternalHigh = _view.getUintptr(4, true), _struct.Offset = _view.getUint32(8, true), _struct.OffsetHigh = _view.getUint32(12, true), _struct.HEvent = _view.getUintptr(16, true);
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	Filetime.ptr.prototype.Nanoseconds = function() {
		var ft, nsec, x, x$1, x$2;
		ft = this;
		nsec = (x = $shiftLeft64(new $Int64(0, ft.HighDateTime), 32), x$1 = new $Int64(0, ft.LowDateTime), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = (x$2 = new $Int64(27111902, 3577643008), new $Int64(nsec.$high - x$2.$high, nsec.$low - x$2.$low));
		nsec = $mul64(nsec, (new $Int64(0, 100)));
		return nsec;
	};
	Filetime.prototype.Nanoseconds = function() { return this.$val.Nanoseconds(); };
	copyFindData = function(dst, src) {
		dst.FileAttributes = src.FileAttributes;
		$copy(dst.CreationTime, src.CreationTime, Filetime);
		$copy(dst.LastAccessTime, src.LastAccessTime, Filetime);
		$copy(dst.LastWriteTime, src.LastWriteTime, Filetime);
		dst.FileSizeHigh = src.FileSizeHigh;
		dst.FileSizeLow = src.FileSizeLow;
		dst.Reserved0 = src.Reserved0;
		dst.Reserved1 = src.Reserved1;
		$copySlice(new sliceType$2(dst.FileName), new sliceType$2(src.FileName));
		$copySlice(new sliceType$2(dst.AlternateFileName), new sliceType$2(src.AlternateFileName));
	};
	DummyError.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$27.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$28.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "FindProc", name: "FindProc", pkg: "", type: $funcType([$String], [ptrType$4, $error], false)}, {prop: "MustFindProc", name: "MustFindProc", pkg: "", type: $funcType([$String], [ptrType$4], false)}, {prop: "Release", name: "Release", pkg: "", type: $funcType([], [$error], false)}];
	ptrType$4.methods = [{prop: "Addr", name: "Addr", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([sliceType$7], [$Uintptr, $Uintptr, $error], true)}];
	ptrType$5.methods = [{prop: "Handle", name: "Handle", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "Load", name: "Load", pkg: "", type: $funcType([], [$error], false)}, {prop: "NewProc", name: "NewProc", pkg: "", type: $funcType([$String], [ptrType$29], false)}, {prop: "mustLoad", name: "mustLoad", pkg: "syscall", type: $funcType([], [], false)}];
	ptrType$29.methods = [{prop: "Addr", name: "Addr", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([sliceType$7], [$Uintptr, $Uintptr, $error], true)}, {prop: "Find", name: "Find", pkg: "", type: $funcType([], [$error], false)}, {prop: "mustFind", name: "mustFind", pkg: "syscall", type: $funcType([], [], false)}];
	Errno.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", type: $funcType([], [$Bool], false)}];
	ptrType$30.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}, {prop: "Temporary", name: "Temporary", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Timeout", name: "Timeout", pkg: "", type: $funcType([], [$Bool], false)}];
	ptrType$20.methods = [{prop: "Nanoseconds", name: "Nanoseconds", pkg: "", type: $funcType([], [$Int64], false)}];
	DummyError.init([]);
	DLLError.init([{prop: "Err", name: "Err", pkg: "", type: $error, tag: ""}, {prop: "ObjName", name: "ObjName", pkg: "", type: $String, tag: ""}, {prop: "Msg", name: "Msg", pkg: "", type: $String, tag: ""}]);
	DLL.init([{prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}, {prop: "Handle", name: "Handle", pkg: "", type: Handle, tag: ""}]);
	Proc.init([{prop: "Dll", name: "Dll", pkg: "", type: ptrType$3, tag: ""}, {prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}, {prop: "addr", name: "addr", pkg: "syscall", type: $Uintptr, tag: ""}]);
	LazyDLL.init([{prop: "mu", name: "mu", pkg: "syscall", type: sync.Mutex, tag: ""}, {prop: "dll", name: "dll", pkg: "syscall", type: ptrType$3, tag: ""}, {prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}]);
	LazyProc.init([{prop: "mu", name: "mu", pkg: "syscall", type: sync.Mutex, tag: ""}, {prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}, {prop: "l", name: "l", pkg: "syscall", type: ptrType$5, tag: ""}, {prop: "proc", name: "proc", pkg: "syscall", type: ptrType$4, tag: ""}]);
	SecurityAttributes.init([{prop: "Length", name: "Length", pkg: "", type: $Uint32, tag: ""}, {prop: "SecurityDescriptor", name: "SecurityDescriptor", pkg: "", type: $Uintptr, tag: ""}, {prop: "InheritHandle", name: "InheritHandle", pkg: "", type: $Uint32, tag: ""}]);
	Overlapped.init([{prop: "Internal", name: "Internal", pkg: "", type: $Uintptr, tag: ""}, {prop: "InternalHigh", name: "InternalHigh", pkg: "", type: $Uintptr, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", type: $Uint32, tag: ""}, {prop: "OffsetHigh", name: "OffsetHigh", pkg: "", type: $Uint32, tag: ""}, {prop: "HEvent", name: "HEvent", pkg: "", type: Handle, tag: ""}]);
	Filetime.init([{prop: "LowDateTime", name: "LowDateTime", pkg: "", type: $Uint32, tag: ""}, {prop: "HighDateTime", name: "HighDateTime", pkg: "", type: $Uint32, tag: ""}]);
	Win32finddata.init([{prop: "FileAttributes", name: "FileAttributes", pkg: "", type: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", pkg: "", type: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", pkg: "", type: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", pkg: "", type: Filetime, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", pkg: "", type: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", pkg: "", type: $Uint32, tag: ""}, {prop: "Reserved0", name: "Reserved0", pkg: "", type: $Uint32, tag: ""}, {prop: "Reserved1", name: "Reserved1", pkg: "", type: $Uint32, tag: ""}, {prop: "FileName", name: "FileName", pkg: "", type: arrayType$8, tag: ""}, {prop: "AlternateFileName", name: "AlternateFileName", pkg: "", type: arrayType$9, tag: ""}]);
	win32finddata1.init([{prop: "FileAttributes", name: "FileAttributes", pkg: "", type: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", pkg: "", type: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", pkg: "", type: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", pkg: "", type: Filetime, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", pkg: "", type: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", pkg: "", type: $Uint32, tag: ""}, {prop: "Reserved0", name: "Reserved0", pkg: "", type: $Uint32, tag: ""}, {prop: "Reserved1", name: "Reserved1", pkg: "", type: $Uint32, tag: ""}, {prop: "FileName", name: "FileName", pkg: "", type: arrayType$10, tag: ""}, {prop: "AlternateFileName", name: "AlternateFileName", pkg: "", type: arrayType$11, tag: ""}]);
	ByHandleFileInformation.init([{prop: "FileAttributes", name: "FileAttributes", pkg: "", type: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", pkg: "", type: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", pkg: "", type: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", pkg: "", type: Filetime, tag: ""}, {prop: "VolumeSerialNumber", name: "VolumeSerialNumber", pkg: "", type: $Uint32, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", pkg: "", type: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", pkg: "", type: $Uint32, tag: ""}, {prop: "NumberOfLinks", name: "NumberOfLinks", pkg: "", type: $Uint32, tag: ""}, {prop: "FileIndexHigh", name: "FileIndexHigh", pkg: "", type: $Uint32, tag: ""}, {prop: "FileIndexLow", name: "FileIndexLow", pkg: "", type: $Uint32, tag: ""}]);
	Win32FileAttributeData.init([{prop: "FileAttributes", name: "FileAttributes", pkg: "", type: $Uint32, tag: ""}, {prop: "CreationTime", name: "CreationTime", pkg: "", type: Filetime, tag: ""}, {prop: "LastAccessTime", name: "LastAccessTime", pkg: "", type: Filetime, tag: ""}, {prop: "LastWriteTime", name: "LastWriteTime", pkg: "", type: Filetime, tag: ""}, {prop: "FileSizeHigh", name: "FileSizeHigh", pkg: "", type: $Uint32, tag: ""}, {prop: "FileSizeLow", name: "FileSizeLow", pkg: "", type: $Uint32, tag: ""}]);
	reparseDataBuffer.init([{prop: "ReparseTag", name: "ReparseTag", pkg: "", type: $Uint32, tag: ""}, {prop: "ReparseDataLength", name: "ReparseDataLength", pkg: "", type: $Uint16, tag: ""}, {prop: "Reserved", name: "Reserved", pkg: "", type: $Uint16, tag: ""}, {prop: "SubstituteNameOffset", name: "SubstituteNameOffset", pkg: "", type: $Uint16, tag: ""}, {prop: "SubstituteNameLength", name: "SubstituteNameLength", pkg: "", type: $Uint16, tag: ""}, {prop: "PrintNameOffset", name: "PrintNameOffset", pkg: "", type: $Uint16, tag: ""}, {prop: "PrintNameLength", name: "PrintNameLength", pkg: "", type: $Uint16, tag: ""}, {prop: "Flags", name: "Flags", pkg: "", type: $Uint32, tag: ""}, {prop: "PathBuffer", name: "PathBuffer", pkg: "", type: arrayType$21, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_syscall = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = errors.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = atomic.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf16.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		lineBuffer = sliceType.nil;
		warningPrinted = false;
		minusOne = -1;
		errors$1 = $toNativeArray($kindString, ["argument list too long", "permission denied", "address already in use", "cannot assign requested address", "advertise error", "address family not supported by protocol", "resource temporarily unavailable", "operation already in progress", "invalid exchange", "bad file descriptor", "file descriptor in bad state", "bad message", "invalid request descriptor", "invalid request code", "invalid slot", "bad font file format", "device or resource busy", "operation canceled", "no child processes", "channel number out of range", "communication error on send", "software caused connection abort", "connection refused", "connection reset by peer", "resource deadlock avoided", "resource deadlock avoided", "destination address required", "numerical argument out of domain", "RFS specific error", "disk quota exceeded", "file exists", "bad address", "file too large", "host is down", "no route to host", "identifier removed", "invalid or incomplete multibyte or wide character", "operation now in progress", "interrupted system call", "invalid argument", "input/output error", "transport endpoint is already connected", "is a directory", "is a named type file", "key has expired", "key was rejected by service", "key has been revoked", "level 2 halted", "level 2 not synchronized", "level 3 halted", "level 3 reset", "can not access a needed shared library", "accessing a corrupted shared library", "cannot exec a shared library directly", "attempting to link in too many shared libraries", ".lib section in a.out corrupted", "link number out of range", "too many levels of symbolic links", "wrong medium type", "too many open files", "too many links", "message too long", "multihop attempted", "file name too long", "no XENIX semaphores available", "network is down", "network dropped connection on reset", "network is unreachable", "too many open files in system", "no anode", "no buffer space available", "no CSI structure available", "no data available", "no such device", "exec format error", "required key not available", "no locks available", "link has been severed", "no medium found", "cannot allocate memory", "no message of desired type", "machine is not on the network", "package not installed", "protocol not available", "no space left on device", "out of streams resources", "device not a stream", "function not implemented", "block device required", "transport endpoint is not connected", "directory not empty", "not a XENIX named type file", "state not recoverable", "socket operation on non-socket", "operation not supported", "inappropriate ioctl for device", "name not unique on network", "no such device or address", "operation not supported", "value too large for defined data type", "owner died", "operation not permitted", "protocol family not supported", "broken pipe", "protocol error", "protocol not supported", "protocol wrong type for socket", "numerical result out of range", "remote address changed", "object is remote", "remote I/O error", "interrupted system call should be restarted", "read-only file system", "cannot send after transport endpoint shutdown", "socket type not supported", "illegal seek", "no such process", "srmount error", "stale NFS file handle", "streams pipe error", "timer expired", "connection timed out", "too many references: cannot splice", "text file busy", "structure needs cleaning", "protocol driver not attached", "too many users", "resource temporarily unavailable", "invalid cross-device link", "exchange full", "not supported by windows"]);
		modkernel32 = NewLazyDLL("kernel32.dll");
		modadvapi32 = NewLazyDLL("advapi32.dll");
		modshell32 = NewLazyDLL("shell32.dll");
		modmswsock = NewLazyDLL("mswsock.dll");
		modcrypt32 = NewLazyDLL("crypt32.dll");
		modws2_32 = NewLazyDLL("ws2_32.dll");
		moddnsapi = NewLazyDLL("dnsapi.dll");
		modiphlpapi = NewLazyDLL("iphlpapi.dll");
		modsecur32 = NewLazyDLL("secur32.dll");
		modnetapi32 = NewLazyDLL("netapi32.dll");
		moduserenv = NewLazyDLL("userenv.dll");
		procGetLastError = modkernel32.NewProc("GetLastError");
		procLoadLibraryW = modkernel32.NewProc("LoadLibraryW");
		procFreeLibrary = modkernel32.NewProc("FreeLibrary");
		procGetProcAddress = modkernel32.NewProc("GetProcAddress");
		procGetVersion = modkernel32.NewProc("GetVersion");
		procFormatMessageW = modkernel32.NewProc("FormatMessageW");
		procExitProcess = modkernel32.NewProc("ExitProcess");
		procCreateFileW = modkernel32.NewProc("CreateFileW");
		procReadFile = modkernel32.NewProc("ReadFile");
		procWriteFile = modkernel32.NewProc("WriteFile");
		procSetFilePointer = modkernel32.NewProc("SetFilePointer");
		procCloseHandle = modkernel32.NewProc("CloseHandle");
		procGetStdHandle = modkernel32.NewProc("GetStdHandle");
		procFindFirstFileW = modkernel32.NewProc("FindFirstFileW");
		procFindNextFileW = modkernel32.NewProc("FindNextFileW");
		procFindClose = modkernel32.NewProc("FindClose");
		procGetFileInformationByHandle = modkernel32.NewProc("GetFileInformationByHandle");
		procGetCurrentDirectoryW = modkernel32.NewProc("GetCurrentDirectoryW");
		procSetCurrentDirectoryW = modkernel32.NewProc("SetCurrentDirectoryW");
		procCreateDirectoryW = modkernel32.NewProc("CreateDirectoryW");
		procRemoveDirectoryW = modkernel32.NewProc("RemoveDirectoryW");
		procDeleteFileW = modkernel32.NewProc("DeleteFileW");
		procMoveFileW = modkernel32.NewProc("MoveFileW");
		procGetComputerNameW = modkernel32.NewProc("GetComputerNameW");
		procSetEndOfFile = modkernel32.NewProc("SetEndOfFile");
		procGetSystemTimeAsFileTime = modkernel32.NewProc("GetSystemTimeAsFileTime");
		procGetTimeZoneInformation = modkernel32.NewProc("GetTimeZoneInformation");
		procCreateIoCompletionPort = modkernel32.NewProc("CreateIoCompletionPort");
		procGetQueuedCompletionStatus = modkernel32.NewProc("GetQueuedCompletionStatus");
		procPostQueuedCompletionStatus = modkernel32.NewProc("PostQueuedCompletionStatus");
		procCancelIo = modkernel32.NewProc("CancelIo");
		procCancelIoEx = modkernel32.NewProc("CancelIoEx");
		procCreateProcessW = modkernel32.NewProc("CreateProcessW");
		procOpenProcess = modkernel32.NewProc("OpenProcess");
		procTerminateProcess = modkernel32.NewProc("TerminateProcess");
		procGetExitCodeProcess = modkernel32.NewProc("GetExitCodeProcess");
		procGetStartupInfoW = modkernel32.NewProc("GetStartupInfoW");
		procGetCurrentProcess = modkernel32.NewProc("GetCurrentProcess");
		procGetProcessTimes = modkernel32.NewProc("GetProcessTimes");
		procDuplicateHandle = modkernel32.NewProc("DuplicateHandle");
		procWaitForSingleObject = modkernel32.NewProc("WaitForSingleObject");
		procGetTempPathW = modkernel32.NewProc("GetTempPathW");
		procCreatePipe = modkernel32.NewProc("CreatePipe");
		procGetFileType = modkernel32.NewProc("GetFileType");
		procCryptAcquireContextW = modadvapi32.NewProc("CryptAcquireContextW");
		procCryptReleaseContext = modadvapi32.NewProc("CryptReleaseContext");
		procCryptGenRandom = modadvapi32.NewProc("CryptGenRandom");
		procGetEnvironmentStringsW = modkernel32.NewProc("GetEnvironmentStringsW");
		procFreeEnvironmentStringsW = modkernel32.NewProc("FreeEnvironmentStringsW");
		procGetEnvironmentVariableW = modkernel32.NewProc("GetEnvironmentVariableW");
		procSetEnvironmentVariableW = modkernel32.NewProc("SetEnvironmentVariableW");
		procSetFileTime = modkernel32.NewProc("SetFileTime");
		procGetFileAttributesW = modkernel32.NewProc("GetFileAttributesW");
		procSetFileAttributesW = modkernel32.NewProc("SetFileAttributesW");
		procGetFileAttributesExW = modkernel32.NewProc("GetFileAttributesExW");
		procGetCommandLineW = modkernel32.NewProc("GetCommandLineW");
		procCommandLineToArgvW = modshell32.NewProc("CommandLineToArgvW");
		procLocalFree = modkernel32.NewProc("LocalFree");
		procSetHandleInformation = modkernel32.NewProc("SetHandleInformation");
		procFlushFileBuffers = modkernel32.NewProc("FlushFileBuffers");
		procGetFullPathNameW = modkernel32.NewProc("GetFullPathNameW");
		procGetLongPathNameW = modkernel32.NewProc("GetLongPathNameW");
		procGetShortPathNameW = modkernel32.NewProc("GetShortPathNameW");
		procCreateFileMappingW = modkernel32.NewProc("CreateFileMappingW");
		procMapViewOfFile = modkernel32.NewProc("MapViewOfFile");
		procUnmapViewOfFile = modkernel32.NewProc("UnmapViewOfFile");
		procFlushViewOfFile = modkernel32.NewProc("FlushViewOfFile");
		procVirtualLock = modkernel32.NewProc("VirtualLock");
		procVirtualUnlock = modkernel32.NewProc("VirtualUnlock");
		procTransmitFile = modmswsock.NewProc("TransmitFile");
		procReadDirectoryChangesW = modkernel32.NewProc("ReadDirectoryChangesW");
		procCertOpenSystemStoreW = modcrypt32.NewProc("CertOpenSystemStoreW");
		procCertOpenStore = modcrypt32.NewProc("CertOpenStore");
		procCertEnumCertificatesInStore = modcrypt32.NewProc("CertEnumCertificatesInStore");
		procCertAddCertificateContextToStore = modcrypt32.NewProc("CertAddCertificateContextToStore");
		procCertCloseStore = modcrypt32.NewProc("CertCloseStore");
		procCertGetCertificateChain = modcrypt32.NewProc("CertGetCertificateChain");
		procCertFreeCertificateChain = modcrypt32.NewProc("CertFreeCertificateChain");
		procCertCreateCertificateContext = modcrypt32.NewProc("CertCreateCertificateContext");
		procCertFreeCertificateContext = modcrypt32.NewProc("CertFreeCertificateContext");
		procCertVerifyCertificateChainPolicy = modcrypt32.NewProc("CertVerifyCertificateChainPolicy");
		procRegOpenKeyExW = modadvapi32.NewProc("RegOpenKeyExW");
		procRegCloseKey = modadvapi32.NewProc("RegCloseKey");
		procRegQueryInfoKeyW = modadvapi32.NewProc("RegQueryInfoKeyW");
		procRegEnumKeyExW = modadvapi32.NewProc("RegEnumKeyExW");
		procRegQueryValueExW = modadvapi32.NewProc("RegQueryValueExW");
		procGetCurrentProcessId = modkernel32.NewProc("GetCurrentProcessId");
		procGetConsoleMode = modkernel32.NewProc("GetConsoleMode");
		procWriteConsoleW = modkernel32.NewProc("WriteConsoleW");
		procReadConsoleW = modkernel32.NewProc("ReadConsoleW");
		procCreateToolhelp32Snapshot = modkernel32.NewProc("CreateToolhelp32Snapshot");
		procProcess32FirstW = modkernel32.NewProc("Process32FirstW");
		procProcess32NextW = modkernel32.NewProc("Process32NextW");
		procDeviceIoControl = modkernel32.NewProc("DeviceIoControl");
		procCreateSymbolicLinkW = modkernel32.NewProc("CreateSymbolicLinkW");
		procCreateHardLinkW = modkernel32.NewProc("CreateHardLinkW");
		procWSAStartup = modws2_32.NewProc("WSAStartup");
		procWSACleanup = modws2_32.NewProc("WSACleanup");
		procWSAIoctl = modws2_32.NewProc("WSAIoctl");
		procsocket = modws2_32.NewProc("socket");
		procsetsockopt = modws2_32.NewProc("setsockopt");
		procgetsockopt = modws2_32.NewProc("getsockopt");
		procbind = modws2_32.NewProc("bind");
		procconnect = modws2_32.NewProc("connect");
		procgetsockname = modws2_32.NewProc("getsockname");
		procgetpeername = modws2_32.NewProc("getpeername");
		proclisten = modws2_32.NewProc("listen");
		procshutdown = modws2_32.NewProc("shutdown");
		procclosesocket = modws2_32.NewProc("closesocket");
		procAcceptEx = modmswsock.NewProc("AcceptEx");
		procGetAcceptExSockaddrs = modmswsock.NewProc("GetAcceptExSockaddrs");
		procWSARecv = modws2_32.NewProc("WSARecv");
		procWSASend = modws2_32.NewProc("WSASend");
		procWSARecvFrom = modws2_32.NewProc("WSARecvFrom");
		procWSASendTo = modws2_32.NewProc("WSASendTo");
		procgethostbyname = modws2_32.NewProc("gethostbyname");
		procgetservbyname = modws2_32.NewProc("getservbyname");
		procntohs = modws2_32.NewProc("ntohs");
		procgetprotobyname = modws2_32.NewProc("getprotobyname");
		procDnsQuery_W = moddnsapi.NewProc("DnsQuery_W");
		procDnsRecordListFree = moddnsapi.NewProc("DnsRecordListFree");
		procDnsNameCompare_W = moddnsapi.NewProc("DnsNameCompare_W");
		procGetAddrInfoW = modws2_32.NewProc("GetAddrInfoW");
		procFreeAddrInfoW = modws2_32.NewProc("FreeAddrInfoW");
		procGetIfEntry = modiphlpapi.NewProc("GetIfEntry");
		procGetAdaptersInfo = modiphlpapi.NewProc("GetAdaptersInfo");
		procSetFileCompletionNotificationModes = modkernel32.NewProc("SetFileCompletionNotificationModes");
		procWSAEnumProtocolsW = modws2_32.NewProc("WSAEnumProtocolsW");
		procTranslateNameW = modsecur32.NewProc("TranslateNameW");
		procGetUserNameExW = modsecur32.NewProc("GetUserNameExW");
		procNetUserGetInfo = modnetapi32.NewProc("NetUserGetInfo");
		procNetGetJoinInformation = modnetapi32.NewProc("NetGetJoinInformation");
		procNetApiBufferFree = modnetapi32.NewProc("NetApiBufferFree");
		procLookupAccountSidW = modadvapi32.NewProc("LookupAccountSidW");
		procLookupAccountNameW = modadvapi32.NewProc("LookupAccountNameW");
		procConvertSidToStringSidW = modadvapi32.NewProc("ConvertSidToStringSidW");
		procConvertStringSidToSidW = modadvapi32.NewProc("ConvertStringSidToSidW");
		procGetLengthSid = modadvapi32.NewProc("GetLengthSid");
		procCopySid = modadvapi32.NewProc("CopySid");
		procOpenProcessToken = modadvapi32.NewProc("OpenProcessToken");
		procGetTokenInformation = modadvapi32.NewProc("GetTokenInformation");
		procGetUserProfileDirectoryW = moduserenv.NewProc("GetUserProfileDirectoryW");
		$pkg.Stdin = getStdHandle(-10);
		$pkg.Stdout = getStdHandle(-11);
		$pkg.Stderr = getStdHandle(-12);
		init();
		/* */ } return; } }; $init_syscall.$blocking = true; return $init_syscall;
	};
	return $pkg;
})();
$packages["github.com/gopherjs/gopherjs/nosync"] = (function() {
	var $pkg = {}, Mutex, RWMutex, WaitGroup, Once, ptrType, ptrType$1, ptrType$2, funcType, ptrType$3;
	Mutex = $pkg.Mutex = $newType(0, $kindStruct, "nosync.Mutex", "Mutex", "github.com/gopherjs/gopherjs/nosync", function(locked_) {
		this.$val = this;
		this.locked = locked_ !== undefined ? locked_ : false;
	});
	RWMutex = $pkg.RWMutex = $newType(0, $kindStruct, "nosync.RWMutex", "RWMutex", "github.com/gopherjs/gopherjs/nosync", function(writeLocked_, readLockCounter_) {
		this.$val = this;
		this.writeLocked = writeLocked_ !== undefined ? writeLocked_ : false;
		this.readLockCounter = readLockCounter_ !== undefined ? readLockCounter_ : 0;
	});
	WaitGroup = $pkg.WaitGroup = $newType(0, $kindStruct, "nosync.WaitGroup", "WaitGroup", "github.com/gopherjs/gopherjs/nosync", function(counter_) {
		this.$val = this;
		this.counter = counter_ !== undefined ? counter_ : 0;
	});
	Once = $pkg.Once = $newType(0, $kindStruct, "nosync.Once", "Once", "github.com/gopherjs/gopherjs/nosync", function(doing_, done_) {
		this.$val = this;
		this.doing = doing_ !== undefined ? doing_ : false;
		this.done = done_ !== undefined ? done_ : false;
	});
		ptrType = $ptrType(Mutex);
		ptrType$1 = $ptrType(RWMutex);
		ptrType$2 = $ptrType(WaitGroup);
		funcType = $funcType([], [], false);
		ptrType$3 = $ptrType(Once);
	Mutex.ptr.prototype.Lock = function() {
		var m;
		m = this;
		if (m.locked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		m.locked = true;
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.ptr.prototype.Unlock = function() {
		var m;
		m = this;
		if (!m.locked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		m.locked = false;
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.Lock = function() {
		var rw;
		rw = this;
		if (!((rw.readLockCounter === 0)) || rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.writeLocked = true;
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.ptr.prototype.Unlock = function() {
		var rw;
		rw = this;
		if (!rw.writeLocked) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.writeLocked = false;
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.ptr.prototype.RLock = function() {
		var rw;
		rw = this;
		if (rw.writeLocked) {
			$panic(new $String("nosync: mutex is already locked"));
		}
		rw.readLockCounter = rw.readLockCounter + (1) >> 0;
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.ptr.prototype.RUnlock = function() {
		var rw;
		rw = this;
		if (rw.readLockCounter === 0) {
			$panic(new $String("nosync: unlock of unlocked mutex"));
		}
		rw.readLockCounter = rw.readLockCounter - (1) >> 0;
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	WaitGroup.ptr.prototype.Add = function(delta) {
		var wg;
		wg = this;
		wg.counter = wg.counter + (delta) >> 0;
		if (wg.counter < 0) {
			$panic(new $String("sync: negative WaitGroup counter"));
		}
	};
	WaitGroup.prototype.Add = function(delta) { return this.$val.Add(delta); };
	WaitGroup.ptr.prototype.Done = function() {
		var wg;
		wg = this;
		wg.Add(-1);
	};
	WaitGroup.prototype.Done = function() { return this.$val.Done(); };
	WaitGroup.ptr.prototype.Wait = function() {
		var wg;
		wg = this;
		if (!((wg.counter === 0))) {
			$panic(new $String("sync: WaitGroup counter not zero"));
		}
	};
	WaitGroup.prototype.Wait = function() { return this.$val.Wait(); };
	Once.ptr.prototype.Do = function(f) {
		var $deferred = [], $err = null, o;
		/* */ try { $deferFrames.push($deferred);
		o = this;
		if (o.done) {
			return;
		}
		if (o.doing) {
			$panic(new $String("nosync: Do called within f"));
		}
		o.doing = true;
		$deferred.push([(function() {
			o.doing = false;
			o.done = true;
		}), []]);
		f();
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	ptrType.methods = [{prop: "Lock", name: "Lock", pkg: "", type: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", type: $funcType([], [], false)}];
	ptrType$1.methods = [{prop: "Lock", name: "Lock", pkg: "", type: $funcType([], [], false)}, {prop: "RLock", name: "RLock", pkg: "", type: $funcType([], [], false)}, {prop: "RUnlock", name: "RUnlock", pkg: "", type: $funcType([], [], false)}, {prop: "Unlock", name: "Unlock", pkg: "", type: $funcType([], [], false)}];
	ptrType$2.methods = [{prop: "Add", name: "Add", pkg: "", type: $funcType([$Int], [], false)}, {prop: "Done", name: "Done", pkg: "", type: $funcType([], [], false)}, {prop: "Wait", name: "Wait", pkg: "", type: $funcType([], [], false)}];
	ptrType$3.methods = [{prop: "Do", name: "Do", pkg: "", type: $funcType([funcType], [], false)}];
	Mutex.init([{prop: "locked", name: "locked", pkg: "github.com/gopherjs/gopherjs/nosync", type: $Bool, tag: ""}]);
	RWMutex.init([{prop: "writeLocked", name: "writeLocked", pkg: "github.com/gopherjs/gopherjs/nosync", type: $Bool, tag: ""}, {prop: "readLockCounter", name: "readLockCounter", pkg: "github.com/gopherjs/gopherjs/nosync", type: $Int, tag: ""}]);
	WaitGroup.init([{prop: "counter", name: "counter", pkg: "github.com/gopherjs/gopherjs/nosync", type: $Int, tag: ""}]);
	Once.init([{prop: "doing", name: "doing", pkg: "github.com/gopherjs/gopherjs/nosync", type: $Bool, tag: ""}, {prop: "done", name: "done", pkg: "github.com/gopherjs/gopherjs/nosync", type: $Bool, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_nosync = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_nosync.$blocking = true; return $init_nosync;
	};
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, errors, js, nosync, runtime, strings, syscall, ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, sliceType, sliceType$1, sliceType$2, ptrType, arrayType$1, sliceType$3, arrayType$2, arrayType$3, ptrType$1, ptrType$6, ptrType$9, ptrType$10, ptrType$11, ptrType$12, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, unitMap, months, days, daysBefore, utcLoc, localLoc, localOnce, zoneinfo, badData, _map, _key, _tuple, initLocal, runtimeNano, now, startsWithLowerCase, nextStdChunk, match, lookup, appendUint, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, ParseDuration, absWeekday, absClock, fmtFrac, fmtInt, absDate, Now, Unix, isLeap, norm, Date, div, FixedZone;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	runtime = $packages["runtime"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	ParseError = $pkg.ParseError = $newType(0, $kindStruct, "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		this.Layout = Layout_ !== undefined ? Layout_ : "";
		this.Value = Value_ !== undefined ? Value_ : "";
		this.LayoutElem = LayoutElem_ !== undefined ? LayoutElem_ : "";
		this.ValueElem = ValueElem_ !== undefined ? ValueElem_ : "";
		this.Message = Message_ !== undefined ? Message_ : "";
	});
	Time = $pkg.Time = $newType(0, $kindStruct, "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.$val = this;
		this.sec = sec_ !== undefined ? sec_ : new $Int64(0, 0);
		this.nsec = nsec_ !== undefined ? nsec_ : 0;
		this.loc = loc_ !== undefined ? loc_ : ptrType$1.nil;
	});
	Month = $pkg.Month = $newType(4, $kindInt, "time.Month", "Month", "time", null);
	Weekday = $pkg.Weekday = $newType(4, $kindInt, "time.Weekday", "Weekday", "time", null);
	Duration = $pkg.Duration = $newType(8, $kindInt64, "time.Duration", "Duration", "time", null);
	Location = $pkg.Location = $newType(0, $kindStruct, "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.zone = zone_ !== undefined ? zone_ : sliceType$1.nil;
		this.tx = tx_ !== undefined ? tx_ : sliceType$2.nil;
		this.cacheStart = cacheStart_ !== undefined ? cacheStart_ : new $Int64(0, 0);
		this.cacheEnd = cacheEnd_ !== undefined ? cacheEnd_ : new $Int64(0, 0);
		this.cacheZone = cacheZone_ !== undefined ? cacheZone_ : ptrType.nil;
	});
	zone = $pkg.zone = $newType(0, $kindStruct, "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.offset = offset_ !== undefined ? offset_ : 0;
		this.isDST = isDST_ !== undefined ? isDST_ : false;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, $kindStruct, "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		this.when = when_ !== undefined ? when_ : new $Int64(0, 0);
		this.index = index_ !== undefined ? index_ : 0;
		this.isstd = isstd_ !== undefined ? isstd_ : false;
		this.isutc = isutc_ !== undefined ? isutc_ : false;
	});
		sliceType = $sliceType($String);
		sliceType$1 = $sliceType(zone);
		sliceType$2 = $sliceType(zoneTrans);
		ptrType = $ptrType(zone);
		arrayType$1 = $arrayType($Uint8, 32);
		sliceType$3 = $sliceType($Uint8);
		arrayType$2 = $arrayType($Uint8, 9);
		arrayType$3 = $arrayType($Uint8, 64);
		ptrType$1 = $ptrType(Location);
		ptrType$6 = $ptrType(ParseError);
		ptrType$9 = $ptrType(Time);
		ptrType$10 = $ptrType(Month);
		ptrType$11 = $ptrType(Weekday);
		ptrType$12 = $ptrType(Duration);
	initLocal = function() {
		var d, i, j, s;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = strings.IndexByte(s, 40);
		j = strings.IndexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = s.substring((i + 1 >> 0), j);
		localLoc.zone = new sliceType$1([new zone.ptr(localLoc.name, ($parseInt(d.getTimezoneOffset()) >> 0) * -60 >> 0, false)]);
	};
	runtimeNano = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var _tmp, _tmp$1, n, nsec = 0, sec = new $Int64(0, 0), x;
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false); _tmp$1 = ((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0); sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	startsWithLowerCase = function(str) {
		var c;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$5, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$6, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$7, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$8, _tmp$80, _tmp$9, c, ch, i, j, prefix = "", std = 0, std$1, suffix = "", x;
		i = 0;
		while (i < layout.length) {
			c = (layout.charCodeAt(i) >> 0);
			_ref = c;
			if (_ref === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tmp = layout.substring(0, i); _tmp$1 = 257; _tmp$2 = layout.substring((i + 7 >> 0)); prefix = _tmp; std = _tmp$1; suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tmp$3 = layout.substring(0, i); _tmp$4 = 258; _tmp$5 = layout.substring((i + 3 >> 0)); prefix = _tmp$3; std = _tmp$4; suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = layout.substring(0, i); _tmp$7 = 261; _tmp$8 = layout.substring((i + 6 >> 0)); prefix = _tmp$6; std = _tmp$7; suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tmp$9 = layout.substring(0, i); _tmp$10 = 262; _tmp$11 = layout.substring((i + 3 >> 0)); prefix = _tmp$9; std = _tmp$10; suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = layout.substring(0, i); _tmp$13 = 21; _tmp$14 = layout.substring((i + 3 >> 0)); prefix = _tmp$12; std = _tmp$13; suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = layout.substring(0, i); _tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x])); _tmp$17 = layout.substring((i + 2 >> 0)); prefix = _tmp$15; std = _tmp$16; suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_ref === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = layout.substring(0, i); _tmp$19 = 522; _tmp$20 = layout.substring((i + 2 >> 0)); prefix = _tmp$18; std = _tmp$19; suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = layout.substring(0, i); _tmp$22 = 259; _tmp$23 = layout.substring((i + 1 >> 0)); prefix = _tmp$21; std = _tmp$22; suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_ref === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = layout.substring(0, i); _tmp$25 = 273; _tmp$26 = layout.substring((i + 4 >> 0)); prefix = _tmp$24; std = _tmp$25; suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = layout.substring(0, i); _tmp$28 = 263; _tmp$29 = layout.substring((i + 1 >> 0)); prefix = _tmp$27; std = _tmp$28; suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_ref === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					_tmp$30 = layout.substring(0, i); _tmp$31 = 264; _tmp$32 = layout.substring((i + 2 >> 0)); prefix = _tmp$30; std = _tmp$31; suffix = _tmp$32;
					return [prefix, std, suffix];
				}
			} else if (_ref === 51) {
				_tmp$33 = layout.substring(0, i); _tmp$34 = 523; _tmp$35 = layout.substring((i + 1 >> 0)); prefix = _tmp$33; std = _tmp$34; suffix = _tmp$35;
				return [prefix, std, suffix];
			} else if (_ref === 52) {
				_tmp$36 = layout.substring(0, i); _tmp$37 = 525; _tmp$38 = layout.substring((i + 1 >> 0)); prefix = _tmp$36; std = _tmp$37; suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_ref === 53) {
				_tmp$39 = layout.substring(0, i); _tmp$40 = 527; _tmp$41 = layout.substring((i + 1 >> 0)); prefix = _tmp$39; std = _tmp$40; suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_ref === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$42 = layout.substring(0, i); _tmp$43 = 531; _tmp$44 = layout.substring((i + 2 >> 0)); prefix = _tmp$42; std = _tmp$43; suffix = _tmp$44;
					return [prefix, std, suffix];
				}
			} else if (_ref === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$45 = layout.substring(0, i); _tmp$46 = 532; _tmp$47 = layout.substring((i + 2 >> 0)); prefix = _tmp$45; std = _tmp$46; suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_ref === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tmp$48 = layout.substring(0, i); _tmp$49 = 27; _tmp$50 = layout.substring((i + 7 >> 0)); prefix = _tmp$48; std = _tmp$49; suffix = _tmp$50;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$51 = layout.substring(0, i); _tmp$52 = 30; _tmp$53 = layout.substring((i + 9 >> 0)); prefix = _tmp$51; std = _tmp$52; suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tmp$54 = layout.substring(0, i); _tmp$55 = 26; _tmp$56 = layout.substring((i + 5 >> 0)); prefix = _tmp$54; std = _tmp$55; suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tmp$57 = layout.substring(0, i); _tmp$58 = 29; _tmp$59 = layout.substring((i + 6 >> 0)); prefix = _tmp$57; std = _tmp$58; suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tmp$60 = layout.substring(0, i); _tmp$61 = 28; _tmp$62 = layout.substring((i + 3 >> 0)); prefix = _tmp$60; std = _tmp$61; suffix = _tmp$62;
					return [prefix, std, suffix];
				}
			} else if (_ref === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tmp$63 = layout.substring(0, i); _tmp$64 = 23; _tmp$65 = layout.substring((i + 7 >> 0)); prefix = _tmp$63; std = _tmp$64; suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$66 = layout.substring(0, i); _tmp$67 = 25; _tmp$68 = layout.substring((i + 9 >> 0)); prefix = _tmp$66; std = _tmp$67; suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tmp$69 = layout.substring(0, i); _tmp$70 = 22; _tmp$71 = layout.substring((i + 5 >> 0)); prefix = _tmp$69; std = _tmp$70; suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$72 = layout.substring(0, i); _tmp$73 = 24; _tmp$74 = layout.substring((i + 6 >> 0)); prefix = _tmp$72; std = _tmp$73; suffix = _tmp$74;
					return [prefix, std, suffix];
				}
			} else if (_ref === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (j < layout.length && (layout.charCodeAt(j) === ch)) {
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 31;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 32;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$75 = layout.substring(0, i); _tmp$76 = std$1; _tmp$77 = layout.substring(j); prefix = _tmp$75; std = _tmp$76; suffix = _tmp$77;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$78 = layout; _tmp$79 = 0; _tmp$80 = ""; prefix = _tmp$78; std = _tmp$79; suffix = _tmp$80;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var c1, c2, i;
		i = 0;
		while (i < s1.length) {
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _i, _ref, i, v;
		_ref = tab;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendUint = function(b, x, pad) {
		var _q, _q$1, _r, _r$1, buf, n;
		if (x < 10) {
			if (!((pad === 0))) {
				b = $append(b, pad);
			}
			return $append(b, ((48 + x >>> 0) << 24 >>> 24));
		}
		if (x < 100) {
			b = $append(b, ((48 + (_q = x / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			b = $append(b, ((48 + (_r = x % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			return b;
		}
		buf = $clone(arrayType$1.zero(), arrayType$1);
		n = 32;
		if (x === 0) {
			return $append(b, 48);
		}
		while (x >= 10) {
			n = n - (1) >> 0;
			(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (((_r$1 = x % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			x = (_q$1 = x / (10), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		n = n - (1) >> 0;
		(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = ((x + 48 >>> 0) << 24 >>> 24);
		return $appendSlice(b, $subslice(new sliceType$3(buf), n));
	};
	atoi = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1, err = $ifaceNil, neg, q, rem, x = 0;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple$1 = leadingInt(s); q = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0; _tmp$1 = atoiError; x = _tmp; err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x; _tmp$3 = $ifaceNil; x = _tmp$2; err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var _q, _r, buf, start, u, x;
		u = nanosec;
		buf = $clone(arrayType$2.zero(), arrayType$2);
		start = 9;
		while (start > 0) {
			start = start - (1) >> 0;
			(start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48)) {
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new sliceType$3(buf), 0, n));
	};
	Time.ptr.prototype.String = function() {
		var t;
		t = $clone(this, Time);
		return t.Format("2006-01-02 15:04:05.999999999 -0700 MST");
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.ptr.prototype.Format = function(layout) {
		var _q, _q$1, _q$2, _q$3, _r, _r$1, _r$2, _r$3, _r$4, _r$5, _ref, _tuple$1, _tuple$2, _tuple$3, _tuple$4, abs, absoffset, b, buf, day, hour, hr, hr$1, m, max, min, month, name, offset, prefix, s, sec, std, suffix, t, y, y$1, year, zone$1, zone$2;
		t = $clone(this, Time);
		_tuple$1 = t.locabs(); name = _tuple$1[0]; offset = _tuple$1[1]; abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		b = sliceType$3.nil;
		buf = $clone(arrayType$3.zero(), arrayType$3);
		max = layout.length + 10 >> 0;
		if (max <= 64) {
			b = $subslice(new sliceType$3(buf), 0, 0);
		} else {
			b = sliceType$3.make(0, max);
		}
		while (!(layout === "")) {
			_tuple$2 = nextStdChunk(layout); prefix = _tuple$2[0]; std = _tuple$2[1]; suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, new sliceType$3($stringToBytes(prefix)));
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true); year = _tuple$3[0]; month = _tuple$3[1]; day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs); hour = _tuple$4[0]; min = _tuple$4[1]; sec = _tuple$4[2];
			}
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				y = year;
				if (y < 0) {
					y = -y;
				}
				b = appendUint(b, ((_r = y % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 273) {
				y$1 = year;
				if (year <= -1000) {
					b = $append(b, 45);
					y$1 = -y$1;
				} else if (year <= -100) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("-0")));
					y$1 = -y$1;
				} else if (year <= -10) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("-00")));
					y$1 = -y$1;
				} else if (year < 0) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("-000")));
					y$1 = -y$1;
				} else if (year < 10) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("000")));
				} else if (year < 100) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("00")));
				} else if (year < 1000) {
					b = $append(b, 48);
				}
				b = appendUint(b, (y$1 >>> 0), 0);
			} else if (_ref === 258) {
				b = $appendSlice(b, new sliceType$3($stringToBytes(new Month(month).String().substring(0, 3))));
			} else if (_ref === 257) {
				m = new Month(month).String();
				b = $appendSlice(b, new sliceType$3($stringToBytes(m)));
			} else if (_ref === 259) {
				b = appendUint(b, (month >>> 0), 0);
			} else if (_ref === 260) {
				b = appendUint(b, (month >>> 0), 48);
			} else if (_ref === 262) {
				b = $appendSlice(b, new sliceType$3($stringToBytes(new Weekday(absWeekday(abs)).String().substring(0, 3))));
			} else if (_ref === 261) {
				s = new Weekday(absWeekday(abs)).String();
				b = $appendSlice(b, new sliceType$3($stringToBytes(s)));
			} else if (_ref === 263) {
				b = appendUint(b, (day >>> 0), 0);
			} else if (_ref === 264) {
				b = appendUint(b, (day >>> 0), 32);
			} else if (_ref === 265) {
				b = appendUint(b, (day >>> 0), 48);
			} else if (_ref === 522) {
				b = appendUint(b, (hour >>> 0), 48);
			} else if (_ref === 523) {
				hr = (_r$1 = hour % 12, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
				if (hr === 0) {
					hr = 12;
				}
				b = appendUint(b, (hr >>> 0), 0);
			} else if (_ref === 524) {
				hr$1 = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
				if (hr$1 === 0) {
					hr$1 = 12;
				}
				b = appendUint(b, (hr$1 >>> 0), 48);
			} else if (_ref === 525) {
				b = appendUint(b, (min >>> 0), 0);
			} else if (_ref === 526) {
				b = appendUint(b, (min >>> 0), 48);
			} else if (_ref === 527) {
				b = appendUint(b, (sec >>> 0), 0);
			} else if (_ref === 528) {
				b = appendUint(b, (sec >>> 0), 48);
			} else if (_ref === 531) {
				if (hour >= 12) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("PM")));
				} else {
					b = $appendSlice(b, new sliceType$3($stringToBytes("AM")));
				}
			} else if (_ref === 532) {
				if (hour >= 12) {
					b = $appendSlice(b, new sliceType$3($stringToBytes("pm")));
				} else {
					b = $appendSlice(b, new sliceType$3($stringToBytes("am")));
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {
				if ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {
					b = $append(b, 90);
					break;
				}
				zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				absoffset = offset;
				if (zone$1 < 0) {
					b = $append(b, 45);
					zone$1 = -zone$1;
					absoffset = -absoffset;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 24) || (std === 29) || (std === 25) || (std === 30)) {
					b = $append(b, 58);
				}
				b = appendUint(b, ((_r$3 = zone$1 % 60, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {
					if ((std === 30) || (std === 25)) {
						b = $append(b, 58);
					}
					b = appendUint(b, ((_r$4 = absoffset % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				}
			} else if (_ref === 21) {
				if (!(name === "")) {
					b = $appendSlice(b, new sliceType$3($stringToBytes(name)));
					break;
				}
				zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (zone$2 < 0) {
					b = $append(b, 45);
					zone$2 = -zone$2;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				b = appendUint(b, ((_r$5 = zone$2 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 31 || _ref === 32) {
				b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);
			} }
		}
		return $bytesToString(b);
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	quote = function(s) {
		return "\"" + s + "\"";
	};
	ParseError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), $ifaceNil];
		}
		return [(((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0) * 10 >> 0) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), $ifaceNil];
	};
	cutspace = function(s) {
		while (s.length > 0 && (s.charCodeAt(0) === 32)) {
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		while (prefix.length > 0) {
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, $ifaceNil];
	};
	Parse = $pkg.Parse = function(layout, value) {
		return parse(layout, value, $pkg.UTC, $pkg.Local);
	};
	parse = function(layout, value, defaultLocation, local) {
		var _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$3, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$4, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$1, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$2, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, alayout, amSet, avalue, day, err, hour, hour$1, hr, i, min, min$1, mm, month, n, n$1, name, ndigit, nsec, offset, offset$1, ok, ok$1, p, pmSet, prefix, rangeErrString, sec, seconds, sign, ss, std, stdstr, suffix, t, t$1, x, x$1, x$2, x$3, x$4, x$5, year, z, zoneName, zoneOffset;
		_tmp = layout; _tmp$1 = value; alayout = _tmp; avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ptrType$1.nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout); prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix); value = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$2 = value.substring(0, 2); _tmp$3 = value.substring(2); p = _tmp$2; value = _tmp$3;
				_tuple$3 = atoi(p); year = _tuple$3[0]; err = _tuple$3[1];
				if (year >= 69) {
					year = year + (1900) >> 0;
				} else {
					year = year + (2000) >> 0;
				}
			} else if (_ref === 273) {
				if (value.length < 4 || !isDigit(value, 0)) {
					err = errBad;
					break;
				}
				_tmp$4 = value.substring(0, 4); _tmp$5 = value.substring(4); p = _tmp$4; value = _tmp$5;
				_tuple$4 = atoi(p); year = _tuple$4[0]; err = _tuple$4[1];
			} else if (_ref === 258) {
				_tuple$5 = lookup(shortMonthNames, value); month = _tuple$5[0]; value = _tuple$5[1]; err = _tuple$5[2];
			} else if (_ref === 257) {
				_tuple$6 = lookup(longMonthNames, value); month = _tuple$6[0]; value = _tuple$6[1]; err = _tuple$6[2];
			} else if (_ref === 259 || _ref === 260) {
				_tuple$7 = getnum(value, std === 260); month = _tuple$7[0]; value = _tuple$7[1]; err = _tuple$7[2];
				if (month <= 0 || 12 < month) {
					rangeErrString = "month";
				}
			} else if (_ref === 262) {
				_tuple$8 = lookup(shortDayNames, value); value = _tuple$8[1]; err = _tuple$8[2];
			} else if (_ref === 261) {
				_tuple$9 = lookup(longDayNames, value); value = _tuple$9[1]; err = _tuple$9[2];
			} else if (_ref === 263 || _ref === 264 || _ref === 265) {
				if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
					value = value.substring(1);
				}
				_tuple$10 = getnum(value, std === 265); day = _tuple$10[0]; value = _tuple$10[1]; err = _tuple$10[2];
				if (day < 0 || 31 < day) {
					rangeErrString = "day";
				}
			} else if (_ref === 522) {
				_tuple$11 = getnum(value, false); hour = _tuple$11[0]; value = _tuple$11[1]; err = _tuple$11[2];
				if (hour < 0 || 24 <= hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 523 || _ref === 524) {
				_tuple$12 = getnum(value, std === 524); hour = _tuple$12[0]; value = _tuple$12[1]; err = _tuple$12[2];
				if (hour < 0 || 12 < hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 525 || _ref === 526) {
				_tuple$13 = getnum(value, std === 526); min = _tuple$13[0]; value = _tuple$13[1]; err = _tuple$13[2];
				if (min < 0 || 60 <= min) {
					rangeErrString = "minute";
				}
			} else if (_ref === 527 || _ref === 528) {
				_tuple$14 = getnum(value, std === 528); sec = _tuple$14[0]; value = _tuple$14[1]; err = _tuple$14[2];
				if (sec < 0 || 60 <= sec) {
					rangeErrString = "second";
				}
				if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
					_tuple$15 = nextStdChunk(layout); std = _tuple$15[1];
					std = std & (65535);
					if ((std === 31) || (std === 32)) {
						break;
					}
					n = 2;
					while (n < value.length && isDigit(value, n)) {
						n = n + (1) >> 0;
					}
					_tuple$16 = parseNanoseconds(value, n); nsec = _tuple$16[0]; rangeErrString = _tuple$16[1]; err = _tuple$16[2];
					value = value.substring(n);
				}
			} else if (_ref === 531) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$6 = value.substring(0, 2); _tmp$7 = value.substring(2); p = _tmp$6; value = _tmp$7;
				_ref$1 = p;
				if (_ref$1 === "PM") {
					pmSet = true;
				} else if (_ref$1 === "AM") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 532) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$8 = value.substring(0, 2); _tmp$9 = value.substring(2); p = _tmp$8; value = _tmp$9;
				_ref$2 = p;
				if (_ref$2 === "pm") {
					pmSet = true;
				} else if (_ref$2 === "am") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {
				if (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
					value = value.substring(1);
					z = $pkg.UTC;
					break;
				}
				_tmp$10 = ""; _tmp$11 = ""; _tmp$12 = ""; _tmp$13 = ""; sign = _tmp$10; hour$1 = _tmp$11; min$1 = _tmp$12; seconds = _tmp$13;
				if ((std === 24) || (std === 29)) {
					if (value.length < 6) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58))) {
						err = errBad;
						break;
					}
					_tmp$14 = value.substring(0, 1); _tmp$15 = value.substring(1, 3); _tmp$16 = value.substring(4, 6); _tmp$17 = "00"; _tmp$18 = value.substring(6); sign = _tmp$14; hour$1 = _tmp$15; min$1 = _tmp$16; seconds = _tmp$17; value = _tmp$18;
				} else if (std === 28) {
					if (value.length < 3) {
						err = errBad;
						break;
					}
					_tmp$19 = value.substring(0, 1); _tmp$20 = value.substring(1, 3); _tmp$21 = "00"; _tmp$22 = "00"; _tmp$23 = value.substring(3); sign = _tmp$19; hour$1 = _tmp$20; min$1 = _tmp$21; seconds = _tmp$22; value = _tmp$23;
				} else if ((std === 25) || (std === 30)) {
					if (value.length < 9) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
						err = errBad;
						break;
					}
					_tmp$24 = value.substring(0, 1); _tmp$25 = value.substring(1, 3); _tmp$26 = value.substring(4, 6); _tmp$27 = value.substring(7, 9); _tmp$28 = value.substring(9); sign = _tmp$24; hour$1 = _tmp$25; min$1 = _tmp$26; seconds = _tmp$27; value = _tmp$28;
				} else if ((std === 23) || (std === 27)) {
					if (value.length < 7) {
						err = errBad;
						break;
					}
					_tmp$29 = value.substring(0, 1); _tmp$30 = value.substring(1, 3); _tmp$31 = value.substring(3, 5); _tmp$32 = value.substring(5, 7); _tmp$33 = value.substring(7); sign = _tmp$29; hour$1 = _tmp$30; min$1 = _tmp$31; seconds = _tmp$32; value = _tmp$33;
				} else {
					if (value.length < 5) {
						err = errBad;
						break;
					}
					_tmp$34 = value.substring(0, 1); _tmp$35 = value.substring(1, 3); _tmp$36 = value.substring(3, 5); _tmp$37 = "00"; _tmp$38 = value.substring(5); sign = _tmp$34; hour$1 = _tmp$35; min$1 = _tmp$36; seconds = _tmp$37; value = _tmp$38;
				}
				_tmp$39 = 0; _tmp$40 = 0; _tmp$41 = 0; hr = _tmp$39; mm = _tmp$40; ss = _tmp$41;
				_tuple$17 = atoi(hour$1); hr = _tuple$17[0]; err = _tuple$17[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$18 = atoi(min$1); mm = _tuple$18[0]; err = _tuple$18[1];
				}
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$19 = atoi(seconds); ss = _tuple$19[0]; err = _tuple$19[1];
				}
				zoneOffset = ((((hr * 60 >> 0) + mm >> 0)) * 60 >> 0) + ss >> 0;
				_ref$3 = sign.charCodeAt(0);
				if (_ref$3 === 43) {
				} else if (_ref$3 === 45) {
					zoneOffset = -zoneOffset;
				} else {
					err = errBad;
				}
			} else if (_ref === 21) {
				if (value.length >= 3 && value.substring(0, 3) === "UTC") {
					z = $pkg.UTC;
					value = value.substring(3);
					break;
				}
				_tuple$20 = parseTimeZone(value); n$1 = _tuple$20[0]; ok = _tuple$20[1];
				if (!ok) {
					err = errBad;
					break;
				}
				_tmp$42 = value.substring(0, n$1); _tmp$43 = value.substring(n$1); zoneName = _tmp$42; value = _tmp$43;
			} else if (_ref === 31) {
				ndigit = 1 + ((std >> 16 >> 0)) >> 0;
				if (value.length < ndigit) {
					err = errBad;
					break;
				}
				_tuple$21 = parseNanoseconds(value, ndigit); nsec = _tuple$21[0]; rangeErrString = _tuple$21[1]; err = _tuple$21[2];
				value = value.substring(ndigit);
			} else if (_ref === 32) {
				if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
					break;
				}
				i = 0;
				while (i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57) {
					i = i + (1) >> 0;
				}
				_tuple$22 = parseNanoseconds(value, 1 + i >> 0); nsec = _tuple$22[0]; rangeErrString = _tuple$22[1]; err = _tuple$22[2];
				value = value.substring((1 + i >> 0));
			} }
			if (!(rangeErrString === "")) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.ptr(new $Int64(0, 0), 0, ptrType$1.nil), new ParseError.ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (!(z === ptrType$1.nil)) {
			return [Date(year, (month >> 0), day, hour, min, sec, nsec, z), $ifaceNil];
		}
		if (!((zoneOffset === -1))) {
			t = $clone(Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC), Time);
			t.sec = (x = t.sec, x$1 = new $Int64(0, zoneOffset), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
			_tuple$23 = local.lookup((x$2 = t.sec, new $Int64(x$2.$high + -15, x$2.$low + 2288912640))); name = _tuple$23[0]; offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [t, $ifaceNil];
		}
		if (!(zoneName === "")) {
			t$1 = $clone(Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC), Time);
			_tuple$24 = local.lookupName(zoneName, (x$3 = t$1.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); offset$1 = _tuple$24[0]; ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$4 = t$1.sec, x$5 = new $Int64(0, offset$1), new $Int64(x$4.$high - x$5.$high, x$4.$low - x$5.$low));
				t$1.loc = local;
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$25 = atoi(zoneName.substring(3)); offset$1 = _tuple$25[0];
				offset$1 = offset$1 * (3600) >> 0;
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [t$1, $ifaceNil];
		}
		return [Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation), $ifaceNil];
	};
	parseTimeZone = function(value) {
		var _ref, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, length = 0, nUpper, ok = false;
		if (value.length < 3) {
			_tmp = 0; _tmp$1 = false; length = _tmp; ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && (value.substring(0, 4) === "ChST" || value.substring(0, 4) === "MeST")) {
			_tmp$2 = 4; _tmp$3 = true; length = _tmp$2; ok = _tmp$3;
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length; _tmp$5 = true; length = _tmp$4; ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (nUpper < 6) {
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_ref = nUpper;
		if (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {
			_tmp$6 = 0; _tmp$7 = false; length = _tmp$6; ok = _tmp$7;
			return [length, ok];
		} else if (_ref === 5) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5; _tmp$9 = true; length = _tmp$8; ok = _tmp$9;
				return [length, ok];
			}
		} else if (_ref === 4) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4; _tmp$11 = true; length = _tmp$10; ok = _tmp$11;
				return [length, ok];
			}
		} else if (_ref === 3) {
			_tmp$12 = 3; _tmp$13 = true; length = _tmp$12; ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0; _tmp$15 = false; length = _tmp$14; ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var _tuple$1, err, rem, sign, x;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt(value.substring(1)); x = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var _tuple$1, err = $ifaceNil, i, ns = 0, rangeErrString = "", scaleDigits;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi(value.substring(1, nbytes)); ns = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (i < scaleDigits) {
			ns = ns * (10) >> 0;
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, c, err = $ifaceNil, i, rem = "", x = new $Int64(0, 0), x$1, x$2, x$3;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low >= 3435973835))) {
				_tmp = new $Int64(0, 0); _tmp$1 = ""; _tmp$2 = errLeadingInt; x = _tmp; rem = _tmp$1; err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			i = i + (1) >> 0;
		}
		_tmp$3 = x; _tmp$4 = s.substring(i); _tmp$5 = $ifaceNil; x = _tmp$3; rem = _tmp$4; err = _tmp$5;
		return [x, rem, err];
	};
	ParseDuration = $pkg.ParseDuration = function(s) {
		var _entry, _tuple$1, _tuple$2, _tuple$3, c, c$1, err, f, g, i, n, neg, ok, orig, pl, pl$1, post, pre, scale, u, unit, x;
		orig = s;
		f = 0;
		neg = false;
		if (!(s === "")) {
			c = s.charCodeAt(0);
			if ((c === 45) || (c === 43)) {
				neg = c === 45;
				s = s.substring(1);
			}
		}
		if (s === "0") {
			return [new Duration(0, 0), $ifaceNil];
		}
		if (s === "") {
			return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
		}
		while (!(s === "")) {
			g = 0;
			x = new $Int64(0, 0);
			err = $ifaceNil;
			if (!((s.charCodeAt(0) === 46) || (48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			pl = s.length;
			_tuple$1 = leadingInt(s); x = _tuple$1[0]; s = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			g = $flatten64(x);
			pre = !((pl === s.length));
			post = false;
			if (!(s === "") && (s.charCodeAt(0) === 46)) {
				s = s.substring(1);
				pl$1 = s.length;
				_tuple$2 = leadingInt(s); x = _tuple$2[0]; s = _tuple$2[1]; err = _tuple$2[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
				}
				scale = 1;
				n = pl$1 - s.length >> 0;
				while (n > 0) {
					scale = scale * (10);
					n = n - (1) >> 0;
				}
				g = g + ($flatten64(x) / scale);
				post = !((pl$1 === s.length));
			}
			if (!pre && !post) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			i = 0;
			while (i < s.length) {
				c$1 = s.charCodeAt(i);
				if ((c$1 === 46) || (48 <= c$1 && c$1 <= 57)) {
					break;
				}
				i = i + (1) >> 0;
			}
			if (i === 0) {
				return [new Duration(0, 0), errors.New("time: missing unit in duration " + orig)];
			}
			u = s.substring(0, i);
			s = s.substring(i);
			_tuple$3 = (_entry = unitMap[u], _entry !== undefined ? [_entry.v, true] : [0, false]); unit = _tuple$3[0]; ok = _tuple$3[1];
			if (!ok) {
				return [new Duration(0, 0), errors.New("time: unknown unit " + u + " in duration " + orig)];
			}
			f = f + (g * unit);
		}
		if (neg) {
			f = -f;
		}
		if (f < -9.223372036854776e+18 || f > 9.223372036854776e+18) {
			return [new Duration(0, 0), errors.New("time: overflow parsing duration")];
		}
		return [new Duration(0, f), $ifaceNil];
	};
	Time.ptr.prototype.After = function(u) {
		var t, x, x$1, x$2, x$3;
		t = $clone(this, Time);
		u = $clone(u, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.ptr.prototype.Before = function(u) {
		var t, x, x$1, x$2, x$3;
		t = $clone(this, Time);
		u = $clone(u, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.ptr.prototype.Equal = function(u) {
		var t, x, x$1;
		t = $clone(this, Time);
		u = $clone(u, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var m, x;
		m = this.$val;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.$val;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.ptr.prototype.IsZero = function() {
		var t, x;
		t = $clone(this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.ptr.prototype.abs = function() {
		var _tuple$1, l, offset, sec, t, x, x$1, x$2, x$3, x$4, x$5;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			} else {
				_tuple$1 = l.lookup(sec); offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			}
		}
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.ptr.prototype.locabs = function() {
		var _tuple$1, abs = new $Uint64(0, 0), l, name = "", offset = 0, sec, t, x, x$1, x$2, x$3, x$4;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === ptrType.nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
			} else {
				_tuple$1 = l.lookup(sec); name = _tuple$1[0]; offset = _tuple$1[1];
			}
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
		} else {
			name = "UTC";
		}
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		return [name, offset, abs];
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.ptr.prototype.Date = function() {
		var _tuple$1, day = 0, month = 0, t, year = 0;
		t = $clone(this, Time);
		_tuple$1 = t.date(true); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		return [year, month, day];
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.ptr.prototype.Year = function() {
		var _tuple$1, t, year;
		t = $clone(this, Time);
		_tuple$1 = t.date(false); year = _tuple$1[0];
		return year;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.ptr.prototype.Month = function() {
		var _tuple$1, month, t;
		t = $clone(this, Time);
		_tuple$1 = t.date(true); month = _tuple$1[1];
		return month;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.ptr.prototype.Day = function() {
		var _tuple$1, day, t;
		t = $clone(this, Time);
		_tuple$1 = t.date(true); day = _tuple$1[2];
		return day;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.ptr.prototype.Weekday = function() {
		var t;
		t = $clone(this, Time);
		return absWeekday(t.abs());
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var _q, sec;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.ptr.prototype.ISOWeek = function() {
		var _q, _r, _r$1, _r$2, _tuple$1, day, dec31wday, jan1wday, month, t, wday, week = 0, yday, year = 0;
		t = $clone(this, Time);
		_tuple$1 = t.date(true); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		wday = (_r = ((t.Weekday() + 6 >> 0) >> 0) % 7, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$1 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$2 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		return [year, week];
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.ptr.prototype.Clock = function() {
		var _tuple$1, hour = 0, min = 0, sec = 0, t;
		t = $clone(this, Time);
		_tuple$1 = absClock(t.abs()); hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
		return [hour, min, sec];
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var _q, _q$1, hour = 0, min = 0, sec = 0;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - ((hour * 3600 >> 0)) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - ((min * 60 >> 0)) >> 0;
		return [hour, min, sec];
	};
	Time.ptr.prototype.Hour = function() {
		var _q, t;
		t = $clone(this, Time);
		return (_q = ($div64(t.abs(), new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.ptr.prototype.Minute = function() {
		var _q, t;
		t = $clone(this, Time);
		return (_q = ($div64(t.abs(), new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.ptr.prototype.Second = function() {
		var t;
		t = $clone(this, Time);
		return ($div64(t.abs(), new $Uint64(0, 60), true).$low >> 0);
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.ptr.prototype.Nanosecond = function() {
		var t;
		t = $clone(this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.ptr.prototype.YearDay = function() {
		var _tuple$1, t, yday;
		t = $clone(this, Time);
		_tuple$1 = t.date(false); yday = _tuple$1[3];
		return yday + 1 >> 0;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var _tuple$1, _tuple$2, buf, d, neg, prec, u, w;
		d = this;
		buf = $clone(arrayType$1.zero(), arrayType$1);
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115;
			w = w - (1) >> 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 110;
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				w = w - (1) >> 0;
				$copyString($subslice(new sliceType$3(buf), w), "\xC2\xB5");
			} else {
				prec = 6;
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109;
			}
			_tuple$1 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, prec); w = _tuple$1[0]; u = _tuple$1[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115;
			_tuple$2 = fmtFrac($subslice(new sliceType$3(buf), 0, w), u, 9); w = _tuple$2[0]; u = _tuple$2[1];
			w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109;
				w = fmtInt($subslice(new sliceType$3(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104;
					w = fmtInt($subslice(new sliceType$3(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45;
		}
		return $bytesToString($subslice(new sliceType$3(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var _tmp, _tmp$1, digit, i, nv = new $Uint64(0, 0), nw = 0, print, w;
		w = buf.$length;
		print = false;
		i = 0;
		while (i < prec) {
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (digit.$low << 24 >>> 24) + 48 << 24 >>> 24;
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46;
		}
		_tmp = w; _tmp$1 = v; nw = _tmp; nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48;
		} else {
			while ((v.$high > 0 || (v.$high === 0 && v.$low > 0))) {
				w = w - (1) >> 0;
				(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24;
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, nsec, sec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.ptr.prototype.Add = function(d) {
		var nsec, t, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7;
		t = $clone(this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = t.nsec + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = nsec;
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.ptr.prototype.Sub = function(u) {
		var d, t, x, x$1, x$2, x$3, x$4;
		t = $clone(this, Time);
		u = $clone(u, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, (t.nsec - u.nsec >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal(t)) {
			return d;
		} else if (t.Before(u)) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.ptr.prototype.AddDate = function(years, months$1, days$1) {
		var _tuple$1, _tuple$2, day, hour, min, month, sec, t, year;
		t = $clone(this, Time);
		_tuple$1 = t.Date(); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		_tuple$2 = t.Clock(); hour = _tuple$2[0]; min = _tuple$2[1]; sec = _tuple$2[2];
		return Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc);
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.ptr.prototype.date = function(full) {
		var _tuple$1, day = 0, month = 0, t, yday = 0, year = 0;
		t = $clone(this, Time);
		_tuple$1 = absDate(t.abs(), full); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		return [year, month, day, yday];
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var _q, begin, d, day = 0, end, month = 0, n, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y, yday = 0, year = 0;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if (day === 59) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	Now = $pkg.Now = function() {
		var _tuple$1, nsec, sec;
		_tuple$1 = now(); sec = _tuple$1[0]; nsec = _tuple$1[1];
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), nsec, $pkg.Local);
	};
	Time.ptr.prototype.UTC = function() {
		var t;
		t = $clone(this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.ptr.prototype.Local = function() {
		var t;
		t = $clone(this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.ptr.prototype.In = function(loc) {
		var t;
		t = $clone(this, Time);
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.ptr.prototype.Location = function() {
		var l, t;
		t = $clone(this, Time);
		l = t.loc;
		if (l === ptrType$1.nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.ptr.prototype.Zone = function() {
		var _tuple$1, name = "", offset = 0, t, x;
		t = $clone(this, Time);
		_tuple$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); name = _tuple$1[0]; offset = _tuple$1[1];
		return [name, offset];
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.ptr.prototype.Unix = function() {
		var t, x;
		t = $clone(this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.ptr.prototype.UnixNano = function() {
		var t, x, x$1, x$2;
		t = $clone(this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = new $Int64(0, t.nsec), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.ptr.prototype.MarshalBinary = function() {
		var _q, _r, _tuple$1, enc, offset, offsetMin, t;
		t = $clone(this, Time);
		offsetMin = 0;
		if (t.Location() === utcLoc) {
			offsetMin = -1;
		} else {
			_tuple$1 = t.Zone(); offset = _tuple$1[1];
			if (!(((_r = offset % 60, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [sliceType$3.nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		}
		enc = new sliceType$3([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >> 24 >> 0) << 24 >>> 24), ((t.nsec >> 16 >> 0) << 24 >>> 24), ((t.nsec >> 8 >> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, $ifaceNil];
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.ptr.prototype.UnmarshalBinary = function(data$1) {
		var _tuple$1, buf, localoff, offset, t, x, x$1, x$10, x$11, x$12, x$13, x$14, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!((((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, ((7 < 0 || 7 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, ((6 < 0 || 6 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, ((5 < 0 || 5 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, ((4 < 0 || 4 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, ((3 < 0 || 3 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, ((2 < 0 || 2 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, ((1 < 0 || 1 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, ((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = (((((3 < 0 || 3 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | ((((2 < 0 || 2 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | ((((1 < 0 || 1 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | ((((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0);
		buf = $subslice(buf, 4);
		offset = (((((1 < 0 || 1 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | ((((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0) * 60 >> 0;
		if (offset === -60) {
			t.loc = utcLoc;
		} else {
			_tuple$1 = $pkg.Local.lookup((x$14 = t.sec, new $Int64(x$14.$high + -15, x$14.$low + 2288912640))); localoff = _tuple$1[1];
			if (offset === localoff) {
				t.loc = $pkg.Local;
			} else {
				t.loc = FixedZone("", offset);
			}
		}
		return $ifaceNil;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.ptr.prototype.GobEncode = function() {
		var t;
		t = $clone(this, Time);
		return t.MarshalBinary();
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.ptr.prototype.GobDecode = function(data$1) {
		var t;
		t = this;
		return t.UnmarshalBinary(data$1);
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.ptr.prototype.MarshalJSON = function() {
		var t, y;
		t = $clone(this, Time);
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [sliceType$3.nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		return [new sliceType$3($stringToBytes(t.Format("\"2006-01-02T15:04:05.999999999Z07:00\""))), $ifaceNil];
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.ptr.prototype.UnmarshalJSON = function(data$1) {
		var _tuple$1, err = $ifaceNil, t;
		t = this;
		_tuple$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.ptr.prototype.MarshalText = function() {
		var t, y;
		t = $clone(this, Time);
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [sliceType$3.nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		return [new sliceType$3($stringToBytes(t.Format("2006-01-02T15:04:05.999999999Z07:00"))), $ifaceNil];
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.ptr.prototype.UnmarshalText = function(data$1) {
		var _tuple$1, err = $ifaceNil, t;
		t = this;
		_tuple$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = $pkg.Unix = function(sec, nsec) {
		var n, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), ((nsec.$low + ((nsec.$high >> 31) * 4294967296)) >> 0), $pkg.Local);
	};
	isLeap = function(year) {
		var _r, _r$1, _r$2;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var _q, _q$1, _tmp, _tmp$1, n, n$1, nhi = 0, nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + ((n * base >> 0)) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - ((n$1 * base >> 0)) >> 0;
		}
		_tmp = hi; _tmp$1 = lo; nhi = _tmp; nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = $pkg.Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, abs, d, end, m, n, offset, start, unix, utc, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, y;
		if (loc === ptrType$1.nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12); year = _tuple$1[0]; m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000); sec = _tuple$2[0]; nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60); min = _tuple$3[0]; sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60); hour = _tuple$4[0]; min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24); day = _tuple$5[0]; hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, (((hour * 3600 >> 0) + (min * 60 >> 0) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_tuple$6 = loc.lookup(unix); offset = _tuple$6[1]; start = _tuple$6[3]; end = _tuple$6[4];
		if (!((offset === 0))) {
			utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
			if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) {
				_tuple$7 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); offset = _tuple$7[1];
			} else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) {
				_tuple$8 = loc.lookup(end); offset = _tuple$8[1];
			}
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		}
		return new Time.ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >> 0), loc);
	};
	Time.ptr.prototype.Truncate = function(d) {
		var _tuple$1, r, t;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d); r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.ptr.prototype.Round = function(d) {
		var _tuple$1, r, t, x;
		t = $clone(this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div(t, d); r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, d0, d1, d1$1, neg, nsec, qmod2 = 0, r = new Duration(0, 0), sec, tmp, u0, u0x, u1, x, x$1, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		t = $clone(t, Time);
		neg = false;
		nsec = t.nsec;
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64(new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0), new $Uint64(0, 1000000000));
			_tmp = u0; _tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low); u0x = _tmp; u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0; _tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low)); u0x = _tmp$2; u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1)))) {
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0; _tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low); u0x = _tmp$4; u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.ptr.prototype.get = function() {
		var l;
		l = this;
		if (l === ptrType$1.nil) {
			return utcLoc;
		}
		if (l === localLoc) {
			localOnce.Do(initLocal);
		}
		return l;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.ptr.prototype.String = function() {
		var l;
		l = this;
		return l.get().name;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = $pkg.FixedZone = function(name, offset) {
		var l, x;
		l = new Location.ptr(name, new sliceType$1([new zone.ptr(name, offset, false)]), new sliceType$2([new zoneTrans.ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ptrType.nil);
		l.cacheZone = (x = l.zone, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	Location.ptr.prototype.lookup = function(sec) {
		var _q, end = new $Int64(0, 0), hi, isDST = false, l, lim, lo, m, name = "", offset = 0, start = new $Int64(0, 0), tx, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, zone$1, zone$2, zone$3;
		l = this;
		l = l.get();
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ptrType.nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, ((0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, ((0 < 0 || 0 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while ((hi - lo >> 0) > 1) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		return [name, offset, isDST, start, end];
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.ptr.prototype.lookupFirstZone = function() {
		var _i, _ref, l, x, x$1, x$2, x$3, x$4, x$5, zi, zi$1;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, ((0 < 0 || 0 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, ((0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (zi >= 0) {
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (_i < _ref.$length) {
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.ptr.prototype.firstZoneUsed = function() {
		var _i, _ref, l, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (_i < _ref.$length) {
			tx = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.ptr.prototype.lookupName = function(name, unix) {
		var _i, _i$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, i, i$1, isDST = false, isDST$1, l, nam, offset = 0, offset$1, ok = false, x, x$1, x$2, zone$1, zone$2;
		l = this;
		l = l.get();
		_ref = l.zone;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (zone$1.name === name) {
				_tuple$1 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); nam = _tuple$1[0]; offset$1 = _tuple$1[1]; isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1; _tmp$1 = isDST$1; _tmp$2 = true; offset = _tmp; isDST = _tmp$1; ok = _tmp$2;
					return [offset, isDST, ok];
				}
			}
			_i++;
		}
		_ref$1 = l.zone;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset; _tmp$4 = zone$2.isDST; _tmp$5 = true; offset = _tmp$3; isDST = _tmp$4; ok = _tmp$5;
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	ptrType$6.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	Time.methods = [{prop: "Add", name: "Add", pkg: "", type: $funcType([Duration], [Time], false)}, {prop: "AddDate", name: "AddDate", pkg: "", type: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "After", name: "After", pkg: "", type: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", type: $funcType([Time], [$Bool], false)}, {prop: "Clock", name: "Clock", pkg: "", type: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Date", name: "Date", pkg: "", type: $funcType([], [$Int, Month, $Int], false)}, {prop: "Day", name: "Day", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Equal", name: "Equal", pkg: "", type: $funcType([Time], [$Bool], false)}, {prop: "Format", name: "Format", pkg: "", type: $funcType([$String], [$String], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", type: $funcType([], [sliceType$3, $error], false)}, {prop: "Hour", name: "Hour", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", type: $funcType([], [$Int, $Int], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([ptrType$1], [Time], false)}, {prop: "IsZero", name: "IsZero", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Local", name: "Local", pkg: "", type: $funcType([], [Time], false)}, {prop: "Location", name: "Location", pkg: "", type: $funcType([], [ptrType$1], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", type: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", type: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", type: $funcType([], [sliceType$3, $error], false)}, {prop: "Minute", name: "Minute", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", type: $funcType([], [Month], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Round", name: "Round", pkg: "", type: $funcType([Duration], [Time], false)}, {prop: "Second", name: "Second", pkg: "", type: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Sub", name: "Sub", pkg: "", type: $funcType([Time], [Duration], false)}, {prop: "Truncate", name: "Truncate", pkg: "", type: $funcType([Duration], [Time], false)}, {prop: "UTC", name: "UTC", pkg: "", type: $funcType([], [Time], false)}, {prop: "Unix", name: "Unix", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Weekday", name: "Weekday", pkg: "", type: $funcType([], [Weekday], false)}, {prop: "Year", name: "Year", pkg: "", type: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Zone", name: "Zone", pkg: "", type: $funcType([], [$String, $Int], false)}, {prop: "abs", name: "abs", pkg: "time", type: $funcType([], [$Uint64], false)}, {prop: "date", name: "date", pkg: "time", type: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "locabs", name: "locabs", pkg: "time", type: $funcType([], [$String, $Int, $Uint64], false)}];
	ptrType$9.methods = [{prop: "Add", name: "Add", pkg: "", type: $funcType([Duration], [Time], false)}, {prop: "AddDate", name: "AddDate", pkg: "", type: $funcType([$Int, $Int, $Int], [Time], false)}, {prop: "After", name: "After", pkg: "", type: $funcType([Time], [$Bool], false)}, {prop: "Before", name: "Before", pkg: "", type: $funcType([Time], [$Bool], false)}, {prop: "Clock", name: "Clock", pkg: "", type: $funcType([], [$Int, $Int, $Int], false)}, {prop: "Date", name: "Date", pkg: "", type: $funcType([], [$Int, Month, $Int], false)}, {prop: "Day", name: "Day", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Equal", name: "Equal", pkg: "", type: $funcType([Time], [$Bool], false)}, {prop: "Format", name: "Format", pkg: "", type: $funcType([$String], [$String], false)}, {prop: "GobDecode", name: "GobDecode", pkg: "", type: $funcType([sliceType$3], [$error], false)}, {prop: "GobEncode", name: "GobEncode", pkg: "", type: $funcType([], [sliceType$3, $error], false)}, {prop: "Hour", name: "Hour", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ISOWeek", name: "ISOWeek", pkg: "", type: $funcType([], [$Int, $Int], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([ptrType$1], [Time], false)}, {prop: "IsZero", name: "IsZero", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Local", name: "Local", pkg: "", type: $funcType([], [Time], false)}, {prop: "Location", name: "Location", pkg: "", type: $funcType([], [ptrType$1], false)}, {prop: "MarshalBinary", name: "MarshalBinary", pkg: "", type: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalJSON", name: "MarshalJSON", pkg: "", type: $funcType([], [sliceType$3, $error], false)}, {prop: "MarshalText", name: "MarshalText", pkg: "", type: $funcType([], [sliceType$3, $error], false)}, {prop: "Minute", name: "Minute", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Month", name: "Month", pkg: "", type: $funcType([], [Month], false)}, {prop: "Nanosecond", name: "Nanosecond", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Round", name: "Round", pkg: "", type: $funcType([Duration], [Time], false)}, {prop: "Second", name: "Second", pkg: "", type: $funcType([], [$Int], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Sub", name: "Sub", pkg: "", type: $funcType([Time], [Duration], false)}, {prop: "Truncate", name: "Truncate", pkg: "", type: $funcType([Duration], [Time], false)}, {prop: "UTC", name: "UTC", pkg: "", type: $funcType([], [Time], false)}, {prop: "Unix", name: "Unix", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "UnixNano", name: "UnixNano", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "UnmarshalBinary", name: "UnmarshalBinary", pkg: "", type: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", type: $funcType([sliceType$3], [$error], false)}, {prop: "UnmarshalText", name: "UnmarshalText", pkg: "", type: $funcType([sliceType$3], [$error], false)}, {prop: "Weekday", name: "Weekday", pkg: "", type: $funcType([], [Weekday], false)}, {prop: "Year", name: "Year", pkg: "", type: $funcType([], [$Int], false)}, {prop: "YearDay", name: "YearDay", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Zone", name: "Zone", pkg: "", type: $funcType([], [$String, $Int], false)}, {prop: "abs", name: "abs", pkg: "time", type: $funcType([], [$Uint64], false)}, {prop: "date", name: "date", pkg: "time", type: $funcType([$Bool], [$Int, Month, $Int, $Int], false)}, {prop: "locabs", name: "locabs", pkg: "time", type: $funcType([], [$String, $Int, $Uint64], false)}];
	Month.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$10.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	Weekday.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$11.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	Duration.methods = [{prop: "Hours", name: "Hours", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$12.methods = [{prop: "Hours", name: "Hours", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Minutes", name: "Minutes", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Nanoseconds", name: "Nanoseconds", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Seconds", name: "Seconds", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "firstZoneUsed", name: "firstZoneUsed", pkg: "time", type: $funcType([], [$Bool], false)}, {prop: "get", name: "get", pkg: "time", type: $funcType([], [ptrType$1], false)}, {prop: "lookup", name: "lookup", pkg: "time", type: $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false)}, {prop: "lookupFirstZone", name: "lookupFirstZone", pkg: "time", type: $funcType([], [$Int], false)}, {prop: "lookupName", name: "lookupName", pkg: "time", type: $funcType([$String, $Int64], [$Int, $Bool, $Bool], false)}];
	ParseError.init([{prop: "Layout", name: "Layout", pkg: "", type: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", type: $String, tag: ""}, {prop: "LayoutElem", name: "LayoutElem", pkg: "", type: $String, tag: ""}, {prop: "ValueElem", name: "ValueElem", pkg: "", type: $String, tag: ""}, {prop: "Message", name: "Message", pkg: "", type: $String, tag: ""}]);
	Time.init([{prop: "sec", name: "sec", pkg: "time", type: $Int64, tag: ""}, {prop: "nsec", name: "nsec", pkg: "time", type: $Int32, tag: ""}, {prop: "loc", name: "loc", pkg: "time", type: ptrType$1, tag: ""}]);
	Location.init([{prop: "name", name: "name", pkg: "time", type: $String, tag: ""}, {prop: "zone", name: "zone", pkg: "time", type: sliceType$1, tag: ""}, {prop: "tx", name: "tx", pkg: "time", type: sliceType$2, tag: ""}, {prop: "cacheStart", name: "cacheStart", pkg: "time", type: $Int64, tag: ""}, {prop: "cacheEnd", name: "cacheEnd", pkg: "time", type: $Int64, tag: ""}, {prop: "cacheZone", name: "cacheZone", pkg: "time", type: ptrType, tag: ""}]);
	zone.init([{prop: "name", name: "name", pkg: "time", type: $String, tag: ""}, {prop: "offset", name: "offset", pkg: "time", type: $Int, tag: ""}, {prop: "isDST", name: "isDST", pkg: "time", type: $Bool, tag: ""}]);
	zoneTrans.init([{prop: "when", name: "when", pkg: "time", type: $Int64, tag: ""}, {prop: "index", name: "index", pkg: "time", type: $Uint8, tag: ""}, {prop: "isstd", name: "isstd", pkg: "time", type: $Bool, tag: ""}, {prop: "isutc", name: "isutc", pkg: "time", type: $Bool, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_time = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = nosync.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = syscall.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		localLoc = new Location.ptr();
		localOnce = new nosync.Once.ptr();
		std0x = $toNativeArray($kindInt, [260, 265, 524, 526, 528, 274]);
		longDayNames = new sliceType(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new sliceType(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new sliceType(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new sliceType(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray($kindString, ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray($kindString, ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		unitMap = (_map = new $Map(), _key = "ns", _map[_key] = { k: _key, v: 1 }, _key = "us", _map[_key] = { k: _key, v: 1000 }, _key = "\xC2\xB5s", _map[_key] = { k: _key, v: 1000 }, _key = "\xCE\xBCs", _map[_key] = { k: _key, v: 1000 }, _key = "ms", _map[_key] = { k: _key, v: 1e+06 }, _key = "s", _map[_key] = { k: _key, v: 1e+09 }, _key = "m", _map[_key] = { k: _key, v: 6e+10 }, _key = "h", _map[_key] = { k: _key, v: 3.6e+12 }, _map);
		daysBefore = $toNativeArray($kindInt32, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.ptr("UTC", sliceType$1.nil, sliceType$2.nil, new $Int64(0, 0), new $Int64(0, 0), ptrType.nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_tuple = syscall.Getenv("ZONEINFO"); zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		/* */ } return; } }; $init_time.$blocking = true; return $init_time;
	};
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, errors, js, io, runtime, sync, atomic, syscall, time, utf16, utf8, PathError, SyscallError, File, file, dirInfo, FileInfo, FileMode, fileStat, sliceType, sliceType$1, ptrType$1, sliceType$2, ptrType$2, ptrType$4, arrayType, ptrType$8, arrayType$1, ptrType$9, sliceType$4, sliceType$5, ptrType$10, sliceType$7, ptrType$11, funcType$1, ptrType$12, ptrType$13, ptrType$14, ptrType$17, ptrType$19, devNullStat, runtime_args, init, NewSyscallError, init$1, Open, fixCount, Readlink, syscallMode, newFile, NewFile, epipecheck, openFile, openDir, OpenFile, IsPathSeparator, init$2, Exit, Stat, Lstat, basename, isAbs, volumeName;
	errors = $packages["errors"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	io = $packages["io"];
	runtime = $packages["runtime"];
	sync = $packages["sync"];
	atomic = $packages["sync/atomic"];
	syscall = $packages["syscall"];
	time = $packages["time"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	PathError = $pkg.PathError = $newType(0, $kindStruct, "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Path = Path_ !== undefined ? Path_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	SyscallError = $pkg.SyscallError = $newType(0, $kindStruct, "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.$val = this;
		this.Syscall = Syscall_ !== undefined ? Syscall_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	File = $pkg.File = $newType(0, $kindStruct, "os.File", "File", "os", function(file_) {
		this.$val = this;
		this.file = file_ !== undefined ? file_ : ptrType$11.nil;
	});
	file = $pkg.file = $newType(0, $kindStruct, "os.file", "file", "os", function(fd_, name_, dirinfo_, l_, isConsole_, lastbits_, readbuf_) {
		this.$val = this;
		this.fd = fd_ !== undefined ? fd_ : 0;
		this.name = name_ !== undefined ? name_ : "";
		this.dirinfo = dirinfo_ !== undefined ? dirinfo_ : ptrType$10.nil;
		this.l = l_ !== undefined ? l_ : new sync.Mutex.ptr();
		this.isConsole = isConsole_ !== undefined ? isConsole_ : false;
		this.lastbits = lastbits_ !== undefined ? lastbits_ : sliceType$2.nil;
		this.readbuf = readbuf_ !== undefined ? readbuf_ : sliceType$7.nil;
	});
	dirInfo = $pkg.dirInfo = $newType(0, $kindStruct, "os.dirInfo", "dirInfo", "os", function(data_, needdata_, path_, isempty_) {
		this.$val = this;
		this.data = data_ !== undefined ? data_ : new syscall.Win32finddata.ptr();
		this.needdata = needdata_ !== undefined ? needdata_ : false;
		this.path = path_ !== undefined ? path_ : "";
		this.isempty = isempty_ !== undefined ? isempty_ : false;
	});
	FileInfo = $pkg.FileInfo = $newType(8, $kindInterface, "os.FileInfo", "FileInfo", "os", null);
	FileMode = $pkg.FileMode = $newType(4, $kindUint32, "os.FileMode", "FileMode", "os", null);
	fileStat = $pkg.fileStat = $newType(0, $kindStruct, "os.fileStat", "fileStat", "os", function(name_, sys_, Mutex_, path_, vol_, idxhi_, idxlo_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.sys = sys_ !== undefined ? sys_ : new syscall.Win32FileAttributeData.ptr();
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new sync.Mutex.ptr();
		this.path = path_ !== undefined ? path_ : "";
		this.vol = vol_ !== undefined ? vol_ : 0;
		this.idxhi = idxhi_ !== undefined ? idxhi_ : 0;
		this.idxlo = idxlo_ !== undefined ? idxlo_ : 0;
	});
		sliceType = $sliceType($String);
		sliceType$1 = $sliceType(FileInfo);
		ptrType$1 = $ptrType(File);
		sliceType$2 = $sliceType($Uint8);
		ptrType$2 = $ptrType(PathError);
		ptrType$4 = $ptrType($Uint32);
		arrayType = $arrayType($Uint8, 32);
		ptrType$8 = $ptrType($Int32);
		arrayType$1 = $arrayType($Uint16, 8192);
		ptrType$9 = $ptrType(arrayType$1);
		sliceType$4 = $sliceType(ptrType$9);
		sliceType$5 = $sliceType($Uint16);
		ptrType$10 = $ptrType(dirInfo);
		sliceType$7 = $sliceType($Int32);
		ptrType$11 = $ptrType(file);
		funcType$1 = $funcType([ptrType$11], [$error], false);
		ptrType$12 = $ptrType($Uint16);
		ptrType$13 = $ptrType($Uint8);
		ptrType$14 = $ptrType(fileStat);
		ptrType$17 = $ptrType(SyscallError);
		ptrType$19 = $ptrType(FileMode);
	runtime_args = function() {
		return $pkg.Args;
	};
	init = function() {
		var argv, i, process;
		process = $global.process;
		if (!(process === undefined)) {
			argv = process.argv;
			$pkg.Args = sliceType.make(($parseInt(argv.length) - 1 >> 0));
			i = 0;
			while (i < ($parseInt(argv.length) - 1 >> 0)) {
				(i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(argv[(i + 1 >> 0)], $String);
				i = i + (1) >> 0;
			}
		}
		if ($pkg.Args.$length === 0) {
			$pkg.Args = new sliceType(["?"]);
		}
	};
	File.ptr.prototype.readdirnames = function(n) {
		var _i, _ref, _tmp, _tmp$1, _tuple, err = $ifaceNil, fi, file$1, fis, i, names = sliceType.nil;
		file$1 = this;
		_tuple = file$1.Readdir(n); fis = _tuple[0]; err = _tuple[1];
		names = sliceType.make(fis.$length);
		_ref = fis;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			fi = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(i < 0 || i >= names.$length) ? $throwRuntimeError("index out of range") : names.$array[names.$offset + i] = fi.Name();
			_i++;
		}
		_tmp = names; _tmp$1 = err; names = _tmp; err = _tmp$1;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	File.ptr.prototype.Readdir = function(n) {
		var _tmp, _tmp$1, _tuple, err = $ifaceNil, f, fi = sliceType$1.nil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType$1.nil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tuple = f.readdir(n); fi = _tuple[0]; err = _tuple[1];
		return [fi, err];
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.ptr.prototype.Readdirnames = function(n) {
		var _tmp, _tmp$1, _tuple, err = $ifaceNil, f, names = sliceType.nil;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = sliceType.nil; _tmp$1 = $pkg.ErrInvalid; names = _tmp; err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n); names = _tuple[0]; err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	PathError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.Path + ": " + e.Err.Error();
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Syscall + ": " + e.Err.Error();
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = $pkg.NewSyscallError = function(syscall$1, err) {
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.ptr(syscall$1, err);
	};
	init$1 = function() {
		var $deferred = [], $err = null, _i, _ref, _tuple, argc, argv, cmd, e, i, v;
		/* */ try { $deferFrames.push($deferred);
		argc = 0;
		cmd = syscall.GetCommandLine();
		_tuple = syscall.CommandLineToArgv(cmd, new ptrType$8(function() { return argc; }, function($v) { argc = $v; })); argv = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return;
		}
		$deferred.push([syscall.LocalFree, [(argv >>> 0)]]);
		$pkg.Args = sliceType.make(argc);
		_ref = $subslice(new sliceType$4((argv)), 0, argc);
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = syscall.UTF16ToString(new sliceType$5((v)));
			_i++;
		}
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	File.ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	File.ptr.prototype.Read = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err = $ifaceNil, f, n = 0;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("read", f.file.name, e);
		}
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.ptr.prototype.ReadAt = function(b, off) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, e, err = $ifaceNil, f, m, n = 0, x;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (b.$length > 0) {
			_tuple = f.pread(b, off); m = _tuple[0]; e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.ptr.prototype.Write = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, e, err = $ifaceNil, f, n = 0;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("write", f.file.name, e);
		}
		_tmp$2 = n; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.ptr.prototype.WriteAt = function(b, off) {
		var _tmp, _tmp$1, _tuple, e, err = $ifaceNil, f, m, n = 0, x;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (b.$length > 0) {
			_tuple = f.pwrite(b, off); m = _tuple[0]; e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.ptr.prototype.Seek = function(offset, whence) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, e, err = $ifaceNil, f, r, ret = new $Int64(0, 0);
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = new $Int64(0, 0); _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence); r = _tuple[0]; e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ptrType$10.nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(536870954);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0); _tmp$3 = new PathError.ptr("seek", f.file.name, e); ret = _tmp$2; err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r; _tmp$5 = $ifaceNil; ret = _tmp$4; err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.ptr.prototype.WriteString = function(s) {
		var _tmp, _tmp$1, _tuple, err = $ifaceNil, f, ret = 0;
		f = this;
		if (f === ptrType$1.nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.Write(new sliceType$2($stringToBytes(s))); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.ptr.prototype.Chdir = function() {
		var e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	Open = $pkg.Open = function(name) {
		var _tuple, err = $ifaceNil, file$1 = ptrType$1.nil;
		_tuple = OpenFile(name, 0, 0); file$1 = _tuple[0]; err = _tuple[1];
		return [file$1, err];
	};
	fixCount = function(n, err) {
		if (n < 0) {
			n = 0;
		}
		return [n, err];
	};
	Readlink = $pkg.Readlink = function(name) {
		var _tuple, _tuple$1, b, e, len, n;
		len = 128;
		while (true) {
			b = sliceType$2.make(len);
			_tuple$1 = syscall.Readlink(name, b);
			_tuple = fixCount(_tuple$1[0], _tuple$1[1]); n = _tuple[0]; e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				return ["", new PathError.ptr("readlink", name, e)];
			}
			if (n < len) {
				return [$bytesToString($subslice(b, 0, n)), $ifaceNil];
			}
			len = len * (2) >> 0;
		}
	};
	syscallMode = function(i) {
		var o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.ptr.prototype.Chmod = function(mode) {
		var e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.ptr.prototype.Chown = function(uid, gid) {
		var e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.ptr.prototype.Truncate = function(size) {
		var e, f;
		f = this;
		if (f === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.ptr.prototype.Sync = function() {
		var e, err = $ifaceNil, f;
		f = this;
		if (f === ptrType$1.nil) {
			err = $pkg.ErrInvalid;
			return err;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = NewSyscallError("fsync", e);
			return err;
		}
		err = $ifaceNil;
		return err;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.ptr.prototype.Fd = function() {
		var file$1;
		file$1 = this;
		if (file$1 === ptrType$1.nil) {
			return 4294967295;
		}
		return (file$1.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	newFile = function(h, name) {
		var f, m;
		f = new File.ptr(new file.ptr(h, name, ptrType$10.nil, new sync.Mutex.ptr(), false, sliceType$2.nil, sliceType$7.nil));
		m = 0;
		if ($interfaceIsEqual(syscall.GetConsoleMode(f.file.fd, new ptrType$4(function() { return m; }, function($v) { m = $v; })), $ifaceNil)) {
			f.file.isConsole = true;
		}
		runtime.SetFinalizer(f.file, new funcType$1($methodExpr(ptrType$11.prototype.close)));
		return f;
	};
	NewFile = $pkg.NewFile = function(fd, name) {
		var h;
		h = (fd >>> 0);
		if (h === 4294967295) {
			return ptrType$1.nil;
		}
		return newFile(h, name);
	};
	epipecheck = function(file$1, e) {
	};
	file.ptr.prototype.isdir = function() {
		var f;
		f = this;
		return !(f === ptrType$11.nil) && !(f.dirinfo === ptrType$10.nil);
	};
	file.prototype.isdir = function() { return this.$val.isdir(); };
	openFile = function(name, flag, perm) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, e, err = $ifaceNil, file$1 = ptrType$1.nil, r;
		_tuple = syscall.Open(name, flag | 524288, syscallMode(perm)); r = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = ptrType$1.nil; _tmp$1 = e; file$1 = _tmp; err = _tmp$1;
			return [file$1, err];
		}
		_tmp$2 = NewFile((r >>> 0), name); _tmp$3 = $ifaceNil; file$1 = _tmp$2; err = _tmp$3;
		return [file$1, err];
	};
	openDir = function(name) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, _tuple$3, d, e, e$1, err = $ifaceNil, f, fa, file$1 = ptrType$1.nil, maskp, namep, r;
		_tuple = syscall.UTF16PtrFromString(name + "\\*"); maskp = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = ptrType$1.nil; _tmp$1 = e; file$1 = _tmp; err = _tmp$1;
			return [file$1, err];
		}
		d = new dirInfo.ptr();
		_tuple$1 = syscall.FindFirstFile(maskp, d.data); r = _tuple$1[0]; e = _tuple$1[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if (!($interfaceIsEqual(e, new syscall.Errno(2)))) {
				_tmp$2 = ptrType$1.nil; _tmp$3 = e; file$1 = _tmp$2; err = _tmp$3;
				return [file$1, err];
			}
			fa = $clone(new syscall.Win32FileAttributeData.ptr(), syscall.Win32FileAttributeData);
			_tuple$2 = syscall.UTF16PtrFromString(name); namep = _tuple$2[0]; e$1 = _tuple$2[1];
			if (!($interfaceIsEqual(e$1, $ifaceNil))) {
				_tmp$4 = ptrType$1.nil; _tmp$5 = e$1; file$1 = _tmp$4; err = _tmp$5;
				return [file$1, err];
			}
			e$1 = syscall.GetFileAttributesEx(namep, 0, fa);
			if (!($interfaceIsEqual(e$1, $ifaceNil))) {
				_tmp$6 = ptrType$1.nil; _tmp$7 = e$1; file$1 = _tmp$6; err = _tmp$7;
				return [file$1, err];
			}
			if (((fa.FileAttributes & 16) >>> 0) === 0) {
				_tmp$8 = ptrType$1.nil; _tmp$9 = e$1; file$1 = _tmp$8; err = _tmp$9;
				return [file$1, err];
			}
			d.isempty = true;
		}
		d.path = name;
		if (!isAbs(d.path)) {
			_tuple$3 = syscall.FullPath(d.path); d.path = _tuple$3[0]; e = _tuple$3[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp$10 = ptrType$1.nil; _tmp$11 = e; file$1 = _tmp$10; err = _tmp$11;
				return [file$1, err];
			}
		}
		f = newFile(r, name);
		f.file.dirinfo = d;
		_tmp$12 = f; _tmp$13 = $ifaceNil; file$1 = _tmp$12; err = _tmp$13;
		return [file$1, err];
	};
	OpenFile = $pkg.OpenFile = function(name, flag, perm) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, err = $ifaceNil, errd, errf, file$1 = ptrType$1.nil, r;
		if (name === "") {
			_tmp = ptrType$1.nil; _tmp$1 = new PathError.ptr("open", name, new syscall.Errno(2)); file$1 = _tmp; err = _tmp$1;
			return [file$1, err];
		}
		_tuple = openFile(name, flag, perm); r = _tuple[0]; errf = _tuple[1];
		if ($interfaceIsEqual(errf, $ifaceNil)) {
			_tmp$2 = r; _tmp$3 = $ifaceNil; file$1 = _tmp$2; err = _tmp$3;
			return [file$1, err];
		}
		_tuple$1 = openDir(name); r = _tuple$1[0]; errd = _tuple$1[1];
		if ($interfaceIsEqual(errd, $ifaceNil)) {
			if (!(((flag & 1) === 0)) || !(((flag & 2) === 0))) {
				r.Close();
				_tmp$4 = ptrType$1.nil; _tmp$5 = new PathError.ptr("open", name, new syscall.Errno(536870954)); file$1 = _tmp$4; err = _tmp$5;
				return [file$1, err];
			}
			_tmp$6 = r; _tmp$7 = $ifaceNil; file$1 = _tmp$6; err = _tmp$7;
			return [file$1, err];
		}
		_tmp$8 = ptrType$1.nil; _tmp$9 = new PathError.ptr("open", name, errf); file$1 = _tmp$8; err = _tmp$9;
		return [file$1, err];
	};
	File.ptr.prototype.Close = function() {
		var file$1;
		file$1 = this;
		if (file$1 === ptrType$1.nil) {
			return $pkg.ErrInvalid;
		}
		return file$1.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.ptr.prototype.close = function() {
		var e, err, file$1;
		file$1 = this;
		if (file$1 === ptrType$11.nil) {
			return new syscall.Errno(536870951);
		}
		if (file$1.isdir() && file$1.dirinfo.isempty) {
			return $ifaceNil;
		}
		if (file$1.fd === 4294967295) {
			return new syscall.Errno(536870951);
		}
		e = $ifaceNil;
		if (file$1.isdir()) {
			e = syscall.FindClose(file$1.fd);
		} else {
			e = syscall.CloseHandle(file$1.fd);
		}
		err = $ifaceNil;
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.ptr("close", file$1.name, e);
		}
		file$1.fd = 4294967295;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.ptr.prototype.readdir = function(n) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, d, e, err = $ifaceNil, f, fi = sliceType$1.nil, file$1, name, size, wantAll;
		file$1 = this;
		if (file$1 === ptrType$1.nil) {
			_tmp = sliceType$1.nil; _tmp$1 = new syscall.Errno(536870951); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		if (!file$1.file.isdir()) {
			_tmp$2 = sliceType$1.nil; _tmp$3 = new PathError.ptr("Readdir", file$1.file.name, new syscall.Errno(3)); fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		if (!file$1.file.dirinfo.isempty && (file$1.file.fd === 4294967295)) {
			_tmp$4 = sliceType$1.nil; _tmp$5 = new syscall.Errno(536870951); fi = _tmp$4; err = _tmp$5;
			return [fi, err];
		}
		wantAll = n <= 0;
		size = n;
		if (wantAll) {
			n = -1;
			size = 100;
		}
		fi = sliceType$1.make(0, size);
		d = file$1.file.dirinfo.data;
		while (!((n === 0)) && !file$1.file.dirinfo.isempty) {
			if (file$1.file.dirinfo.needdata) {
				e = syscall.FindNextFile(file$1.file.fd, d);
				if (!($interfaceIsEqual(e, $ifaceNil))) {
					if ($interfaceIsEqual(e, new syscall.Errno(18))) {
						break;
					} else {
						err = new PathError.ptr("FindNextFile", file$1.file.name, e);
						if (!wantAll) {
							fi = sliceType$1.nil;
						}
						return [fi, err];
					}
				}
			}
			file$1.file.dirinfo.needdata = true;
			name = syscall.UTF16ToString($subslice(new sliceType$5(d.FileName), 0));
			if (name === "." || name === "..") {
				continue;
			}
			f = new fileStat.ptr(name, new syscall.Win32FileAttributeData.ptr(d.FileAttributes, $clone(d.CreationTime, syscall.Filetime), $clone(d.LastAccessTime, syscall.Filetime), $clone(d.LastWriteTime, syscall.Filetime), d.FileSizeHigh, d.FileSizeLow), new sync.Mutex.ptr(), file$1.file.dirinfo.path + "\\" + name, 0, 0, 0);
			n = n - (1) >> 0;
			fi = $append(fi, f);
		}
		if (!wantAll && (fi.$length === 0)) {
			_tmp$6 = fi; _tmp$7 = io.EOF; fi = _tmp$6; err = _tmp$7;
			return [fi, err];
		}
		_tmp$8 = fi; _tmp$9 = $ifaceNil; fi = _tmp$8; err = _tmp$9;
		return [fi, err];
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.ptr.prototype.readConsole = function(b) {
		var _i, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, err = $ifaceNil, err$1, f, i, n = 0, nr, numBytes, nw, p, r, wchars;
		f = this;
		if (b.$length === 0) {
			_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (f.file.readbuf.$length === 0) {
			numBytes = b.$length;
			if (numBytes > 16000) {
				numBytes = 16000;
			}
			wchars = sliceType$5.make(numBytes);
			p = ptrType$12.nil;
			if (b.$length > 0) {
				p = new ptrType$12(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, wchars);
			}
			nw = 0;
			err$1 = syscall.ReadConsole(f.file.fd, p, (wchars.$length >>> 0), new ptrType$4(function() { return nw; }, function($v) { nw = $v; }), ptrType$13.nil);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$2 = 0; _tmp$3 = err$1; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			f.file.readbuf = utf16.Decode($subslice(wchars, 0, nw));
		}
		_ref = f.file.readbuf;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			r = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (utf8.RuneLen(r) > b.$length) {
				f.file.readbuf = $subslice(f.file.readbuf, i);
				_tmp$4 = n; _tmp$5 = $ifaceNil; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			nr = utf8.EncodeRune(b, r);
			b = $subslice(b, nr);
			n = n + (nr) >> 0;
			_i++;
		}
		f.file.readbuf = sliceType$7.nil;
		_tmp$6 = n; _tmp$7 = $ifaceNil; n = _tmp$6; err = _tmp$7;
		return [n, err];
	};
	File.prototype.readConsole = function(b) { return this.$val.readConsole(b); };
	File.ptr.prototype.read = function(b) {
		var $deferred = [], $err = null, _tuple, _tuple$1, _tuple$2, err = $ifaceNil, f, n = 0;
		/* */ try { $deferFrames.push($deferred);
		f = this;
		f.file.l.Lock();
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		if (f.file.isConsole) {
			_tuple = f.readConsole(b); n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		_tuple$2 = syscall.Read(f.file.fd, b);
		_tuple$1 = fixCount(_tuple$2[0], _tuple$2[1]); n = _tuple$1[0]; err = _tuple$1[1];
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.ptr.prototype.pread = function(b, off) {
		var $deferred = [], $err = null, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, curoffset, done, e, err = $ifaceNil, f, n = 0, o;
		/* */ try { $deferFrames.push($deferred);
		f = this;
		f.file.l.Lock();
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		_tuple = syscall.Seek(f.file.fd, new $Int64(0, 0), 1); curoffset = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = 0; _tmp$1 = e; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		$deferred.push([syscall.Seek, [f.file.fd, curoffset, 0]]);
		o = new syscall.Overlapped.ptr(0, 0, (off.$low >>> 0), ($shiftRightInt64(off, 32).$low >>> 0), 0);
		done = 0;
		e = syscall.ReadFile(f.file.fd, b, new ptrType$4(function() { return done; }, function($v) { done = $v; }), o);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			if ($interfaceIsEqual(e, new syscall.Errno(38))) {
				_tmp$2 = 0; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			_tmp$4 = 0; _tmp$5 = e; n = _tmp$4; err = _tmp$5;
			return [n, err];
		}
		_tmp$6 = (done >> 0); _tmp$7 = $ifaceNil; n = _tmp$6; err = _tmp$7;
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.ptr.prototype.writeConsole = function(b) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, chunk, err = $ifaceNil, f, l, m, n = 0, r, runes, uint16s, written;
		f = this;
		n = b.$length;
		runes = sliceType$7.make(0, 256);
		if (f.file.lastbits.$length > 0) {
			b = $appendSlice(f.file.lastbits, b);
			f.file.lastbits = sliceType$2.nil;
		}
		while (b.$length >= 4 || utf8.FullRune(b)) {
			_tuple = utf8.DecodeRune(b); r = _tuple[0]; l = _tuple[1];
			runes = $append(runes, r);
			b = $subslice(b, l);
		}
		if (b.$length > 0) {
			f.file.lastbits = sliceType$2.make(b.$length);
			$copySlice(f.file.lastbits, b);
		}
		while (runes.$length > 0) {
			m = runes.$length;
			if (m > 16000) {
				m = 16000;
			}
			chunk = $subslice(runes, 0, m);
			runes = $subslice(runes, m);
			uint16s = utf16.Encode(chunk);
			while (uint16s.$length > 0) {
				written = [undefined];
				written[0] = 0;
				err = syscall.WriteConsole(f.file.fd, new ptrType$12(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, uint16s), (uint16s.$length >>> 0), new ptrType$4(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, written), ptrType$13.nil);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
					return [n, err];
				}
				uint16s = $subslice(uint16s, written[0]);
			}
		}
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	File.prototype.writeConsole = function(b) { return this.$val.writeConsole(b); };
	File.ptr.prototype.write = function(b) {
		var $deferred = [], $err = null, _tuple, _tuple$1, _tuple$2, err = $ifaceNil, f, n = 0;
		/* */ try { $deferFrames.push($deferred);
		f = this;
		f.file.l.Lock();
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		if (f.file.isConsole) {
			_tuple = f.writeConsole(b); n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		_tuple$2 = syscall.Write(f.file.fd, b);
		_tuple$1 = fixCount(_tuple$2[0], _tuple$2[1]); n = _tuple$1[0]; err = _tuple$1[1];
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.ptr.prototype.pwrite = function(b, off) {
		var $deferred = [], $err = null, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, curoffset, done, e, err = $ifaceNil, f, n = 0, o;
		/* */ try { $deferFrames.push($deferred);
		f = this;
		f.file.l.Lock();
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		_tuple = syscall.Seek(f.file.fd, new $Int64(0, 0), 1); curoffset = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = 0; _tmp$1 = e; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		$deferred.push([syscall.Seek, [f.file.fd, curoffset, 0]]);
		o = new syscall.Overlapped.ptr(0, 0, (off.$low >>> 0), ($shiftRightInt64(off, 32).$low >>> 0), 0);
		done = 0;
		e = syscall.WriteFile(f.file.fd, b, new ptrType$4(function() { return done; }, function($v) { done = $v; }), o);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = 0; _tmp$3 = e; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		_tmp$4 = (done >> 0); _tmp$5 = $ifaceNil; n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.ptr.prototype.seek = function(offset, whence) {
		var $deferred = [], $err = null, _tuple, err = $ifaceNil, f, ret = new $Int64(0, 0);
		/* */ try { $deferFrames.push($deferred);
		f = this;
		f.file.l.Lock();
		$deferred.push([$methodVal(f.file.l, "Unlock"), []]);
		_tuple = syscall.Seek(f.file.fd, offset, whence); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [ret, err]; }
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	IsPathSeparator = $pkg.IsPathSeparator = function(c) {
		return (c === 92) || (c === 47);
	};
	init$2 = function() {
		return;
		$pkg.Args = runtime_args();
	};
	Exit = $pkg.Exit = function(code) {
		syscall.Exit(code);
	};
	File.ptr.prototype.Stat = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, d, e, err = $ifaceNil, fi = $ifaceNil, file$1;
		file$1 = this;
		if (file$1 === ptrType$1.nil) {
			_tmp = $ifaceNil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		if (file$1 === ptrType$1.nil || file$1.file.fd < 0) {
			_tmp$2 = $ifaceNil; _tmp$3 = new syscall.Errno(536870951); fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		if (file$1.file.isdir()) {
			_tuple = Stat(file$1.file.name); fi = _tuple[0]; err = _tuple[1];
			return [fi, err];
		}
		if (file$1.file.name === "NUL") {
			_tmp$4 = devNullStat; _tmp$5 = $ifaceNil; fi = _tmp$4; err = _tmp$5;
			return [fi, err];
		}
		d = $clone(new syscall.ByHandleFileInformation.ptr(), syscall.ByHandleFileInformation);
		e = syscall.GetFileInformationByHandle(file$1.file.fd, d);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$6 = $ifaceNil; _tmp$7 = new PathError.ptr("GetFileInformationByHandle", file$1.file.name, e); fi = _tmp$6; err = _tmp$7;
			return [fi, err];
		}
		_tmp$8 = new fileStat.ptr(basename(file$1.file.name), new syscall.Win32FileAttributeData.ptr(d.FileAttributes, $clone(d.CreationTime, syscall.Filetime), $clone(d.LastAccessTime, syscall.Filetime), $clone(d.LastWriteTime, syscall.Filetime), d.FileSizeHigh, d.FileSizeLow), new sync.Mutex.ptr(), "", d.VolumeSerialNumber, d.FileIndexHigh, d.FileIndexLow); _tmp$9 = $ifaceNil; fi = _tmp$8; err = _tmp$9;
		return [fi, err];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Stat = $pkg.Stat = function(name) {
		var _tmp, _tmp$1, _tuple, _tuple$1, err = $ifaceNil, fi = $ifaceNil;
		while (true) {
			_tuple = Lstat(name); fi = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [fi, err];
			}
			if (((fi.Mode() & 134217728) >>> 0) === 0) {
				return [fi, err];
			}
			_tuple$1 = Readlink(name); name = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [fi, err];
			}
		}
		_tmp = fi; _tmp$1 = err; fi = _tmp; err = _tmp$1;
		return [fi, err];
	};
	Lstat = $pkg.Lstat = function(name) {
		var _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, e, err = $ifaceNil, fi = $ifaceNil, fs, namep;
		if (name.length === 0) {
			_tmp = $ifaceNil; _tmp$1 = new PathError.ptr("Lstat", name, new syscall.Errno(3)); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		if (name === "NUL") {
			_tmp$2 = devNullStat; _tmp$3 = $ifaceNil; fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		fs = new fileStat.ptr(basename(name), new syscall.Win32FileAttributeData.ptr(), new sync.Mutex.ptr(), "", 0, 0, 0);
		_tuple = syscall.UTF16PtrFromString(name); namep = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$4 = $ifaceNil; _tmp$5 = new PathError.ptr("Lstat", name, e); fi = _tmp$4; err = _tmp$5;
			return [fi, err];
		}
		e = syscall.GetFileAttributesEx(namep, 0, fs.sys);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$6 = $ifaceNil; _tmp$7 = new PathError.ptr("GetFileAttributesEx", name, e); fi = _tmp$6; err = _tmp$7;
			return [fi, err];
		}
		fs.path = name;
		if (!isAbs(fs.path)) {
			_tuple$1 = syscall.FullPath(fs.path); fs.path = _tuple$1[0]; e = _tuple$1[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp$8 = $ifaceNil; _tmp$9 = e; fi = _tmp$8; err = _tmp$9;
				return [fi, err];
			}
		}
		_tmp$10 = fs; _tmp$11 = $ifaceNil; fi = _tmp$10; err = _tmp$11;
		return [fi, err];
	};
	basename = function(name) {
		var i;
		if ((name.length === 2) && (name.charCodeAt(1) === 58)) {
			name = ".";
		} else if (name.length > 2 && (name.charCodeAt(1) === 58)) {
			name = name.substring(2);
		}
		i = name.length - 1 >> 0;
		while (i > 0 && ((name.charCodeAt(i) === 47) || (name.charCodeAt(i) === 92))) {
			name = name.substring(0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (i >= 0) {
			if ((name.charCodeAt(i) === 47) || (name.charCodeAt(i) === 92)) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	isAbs = function(path) {
		var b = false, v;
		v = volumeName(path);
		if (v === "") {
			b = false;
			return b;
		}
		path = path.substring(v.length);
		if (path === "") {
			b = false;
			return b;
		}
		b = IsPathSeparator(path.charCodeAt(0));
		return b;
	};
	volumeName = function(path) {
		var c, l, n, v = "";
		if (path.length < 2) {
			v = "";
			return v;
		}
		c = path.charCodeAt(0);
		if ((path.charCodeAt(1) === 58) && (48 <= c && c <= 57 || 97 <= c && c <= 122 || 65 <= c && c <= 90)) {
			v = path.substring(0, 2);
			return v;
		}
		l = path.length;
		if (l >= 5 && IsPathSeparator(path.charCodeAt(0)) && IsPathSeparator(path.charCodeAt(1)) && !IsPathSeparator(path.charCodeAt(2)) && !((path.charCodeAt(2) === 46))) {
			n = 3;
			while (n < (l - 1 >> 0)) {
				if (IsPathSeparator(path.charCodeAt(n))) {
					n = n + (1) >> 0;
					if (!IsPathSeparator(path.charCodeAt(n))) {
						if (path.charCodeAt(n) === 46) {
							break;
						}
						while (n < l) {
							if (IsPathSeparator(path.charCodeAt(n))) {
								break;
							}
							n = n + (1) >> 0;
						}
						v = path.substring(0, n);
						return v;
					}
					break;
				}
				n = n + (1) >> 0;
			}
		}
		v = "";
		return v;
	};
	FileMode.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, _rune, _rune$1, buf, c, c$1, i, i$1, m, w, y, y$1;
		m = this.$val;
		buf = $clone(arrayType.zero(), arrayType);
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24);
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45;
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24);
			} else {
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45;
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new sliceType$2(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.ptr.prototype.Size = function() {
		var fs, x, x$1;
		fs = this;
		return (x = $shiftLeft64(new $Int64(0, fs.sys.FileSizeHigh), 32), x$1 = new $Int64(0, fs.sys.FileSizeLow), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.ptr.prototype.Mode = function() {
		var fs, m = 0;
		fs = this;
		if (fs === devNullStat) {
			m = 69206454;
			return m;
		}
		if (!((((fs.sys.FileAttributes & 16) >>> 0) === 0))) {
			m = (m | (2147483721)) >>> 0;
		}
		if (!((((fs.sys.FileAttributes & 1) >>> 0) === 0))) {
			m = (m | (292)) >>> 0;
		} else {
			m = (m | (438)) >>> 0;
		}
		if (!((((fs.sys.FileAttributes & 1024) >>> 0) === 0))) {
			m = (m | (134217728)) >>> 0;
		}
		m = m;
		return m;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.ptr.prototype.ModTime = function() {
		var fs;
		fs = this;
		return time.Unix(new $Int64(0, 0), fs.sys.LastWriteTime.Nanoseconds());
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$17.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	File.methods = [{prop: "close", name: "close", pkg: "os", type: $funcType([], [$error], false)}, {prop: "isdir", name: "isdir", pkg: "os", type: $funcType([], [$Bool], false)}];
	ptrType$1.methods = [{prop: "Chdir", name: "Chdir", pkg: "", type: $funcType([], [$error], false)}, {prop: "Chmod", name: "Chmod", pkg: "", type: $funcType([FileMode], [$error], false)}, {prop: "Chown", name: "Chown", pkg: "", type: $funcType([$Int, $Int], [$error], false)}, {prop: "Close", name: "Close", pkg: "", type: $funcType([], [$error], false)}, {prop: "Fd", name: "Fd", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "Read", name: "Read", pkg: "", type: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "ReadAt", name: "ReadAt", pkg: "", type: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "Readdir", name: "Readdir", pkg: "", type: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "Readdirnames", name: "Readdirnames", pkg: "", type: $funcType([$Int], [sliceType, $error], false)}, {prop: "Seek", name: "Seek", pkg: "", type: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "Stat", name: "Stat", pkg: "", type: $funcType([], [FileInfo, $error], false)}, {prop: "Sync", name: "Sync", pkg: "", type: $funcType([], [$error], false)}, {prop: "Truncate", name: "Truncate", pkg: "", type: $funcType([$Int64], [$error], false)}, {prop: "Write", name: "Write", pkg: "", type: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "WriteAt", name: "WriteAt", pkg: "", type: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", type: $funcType([$String], [$Int, $error], false)}, {prop: "close", name: "close", pkg: "os", type: $funcType([], [$error], false)}, {prop: "isdir", name: "isdir", pkg: "os", type: $funcType([], [$Bool], false)}, {prop: "pread", name: "pread", pkg: "os", type: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "pwrite", name: "pwrite", pkg: "os", type: $funcType([sliceType$2, $Int64], [$Int, $error], false)}, {prop: "read", name: "read", pkg: "os", type: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "readConsole", name: "readConsole", pkg: "os", type: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "readdir", name: "readdir", pkg: "os", type: $funcType([$Int], [sliceType$1, $error], false)}, {prop: "readdirnames", name: "readdirnames", pkg: "os", type: $funcType([$Int], [sliceType, $error], false)}, {prop: "seek", name: "seek", pkg: "os", type: $funcType([$Int64, $Int], [$Int64, $error], false)}, {prop: "write", name: "write", pkg: "os", type: $funcType([sliceType$2], [$Int, $error], false)}, {prop: "writeConsole", name: "writeConsole", pkg: "os", type: $funcType([sliceType$2], [$Int, $error], false)}];
	ptrType$11.methods = [{prop: "close", name: "close", pkg: "os", type: $funcType([], [$error], false)}, {prop: "isdir", name: "isdir", pkg: "os", type: $funcType([], [$Bool], false)}];
	FileMode.methods = [{prop: "IsDir", name: "IsDir", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", type: $funcType([], [FileMode], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$19.methods = [{prop: "IsDir", name: "IsDir", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "IsRegular", name: "IsRegular", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Perm", name: "Perm", pkg: "", type: $funcType([], [FileMode], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$14.methods = [{prop: "IsDir", name: "IsDir", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Lock", name: "Lock", pkg: "", type: $funcType([], [], false)}, {prop: "ModTime", name: "ModTime", pkg: "", type: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", type: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Unlock", name: "Unlock", pkg: "", type: $funcType([], [], false)}, {prop: "loadFileId", name: "loadFileId", pkg: "os", type: $funcType([], [$error], false)}];
	PathError.init([{prop: "Op", name: "Op", pkg: "", type: $String, tag: ""}, {prop: "Path", name: "Path", pkg: "", type: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", type: $error, tag: ""}]);
	SyscallError.init([{prop: "Syscall", name: "Syscall", pkg: "", type: $String, tag: ""}, {prop: "Err", name: "Err", pkg: "", type: $error, tag: ""}]);
	File.init([{prop: "file", name: "", pkg: "os", type: ptrType$11, tag: ""}]);
	file.init([{prop: "fd", name: "fd", pkg: "os", type: syscall.Handle, tag: ""}, {prop: "name", name: "name", pkg: "os", type: $String, tag: ""}, {prop: "dirinfo", name: "dirinfo", pkg: "os", type: ptrType$10, tag: ""}, {prop: "l", name: "l", pkg: "os", type: sync.Mutex, tag: ""}, {prop: "isConsole", name: "isConsole", pkg: "os", type: $Bool, tag: ""}, {prop: "lastbits", name: "lastbits", pkg: "os", type: sliceType$2, tag: ""}, {prop: "readbuf", name: "readbuf", pkg: "os", type: sliceType$7, tag: ""}]);
	dirInfo.init([{prop: "data", name: "data", pkg: "os", type: syscall.Win32finddata, tag: ""}, {prop: "needdata", name: "needdata", pkg: "os", type: $Bool, tag: ""}, {prop: "path", name: "path", pkg: "os", type: $String, tag: ""}, {prop: "isempty", name: "isempty", pkg: "os", type: $Bool, tag: ""}]);
	FileInfo.init([{prop: "IsDir", name: "IsDir", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ModTime", name: "ModTime", pkg: "", type: $funcType([], [time.Time], false)}, {prop: "Mode", name: "Mode", pkg: "", type: $funcType([], [FileMode], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Sys", name: "Sys", pkg: "", type: $funcType([], [$emptyInterface], false)}]);
	fileStat.init([{prop: "name", name: "name", pkg: "os", type: $String, tag: ""}, {prop: "sys", name: "sys", pkg: "os", type: syscall.Win32FileAttributeData, tag: ""}, {prop: "Mutex", name: "", pkg: "", type: sync.Mutex, tag: ""}, {prop: "path", name: "path", pkg: "os", type: $String, tag: ""}, {prop: "vol", name: "vol", pkg: "os", type: $Uint32, tag: ""}, {prop: "idxhi", name: "idxhi", pkg: "os", type: $Uint32, tag: ""}, {prop: "idxlo", name: "idxlo", pkg: "os", type: $Uint32, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_os = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = atomic.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = syscall.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = time.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf16.$init($BLOCKING); /* */ $s = 9; case 9: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 10; case 10: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.Args = sliceType.nil;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		devNullStat = new fileStat.ptr("NUL", new syscall.Win32FileAttributeData.ptr(), new sync.Mutex.ptr(), "", 0, 0, 0);
		init();
		init$1();
		init$2();
		/* */ } return; } }; $init_os.$blocking = true; return $init_os;
	};
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, js, math, runtime, strconv, sync, mapIter, Type, Kind, rtype, typeAlg, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, nonEmptyInterface, ptrType$1, ptrType$2, sliceType$1, ptrType$3, arrayType$1, ptrType$4, ptrType$5, sliceType$2, sliceType$3, sliceType$4, sliceType$5, sliceType$6, ptrType$6, arrayType$2, structType$5, ptrType$7, sliceType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, sliceType$9, sliceType$10, ptrType$12, ptrType$17, sliceType$12, sliceType$13, ptrType$18, funcType$2, ptrType$19, funcType$3, funcType$4, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, arrayType$3, ptrType$27, ptrType$28, ptrType$29, initialized, jsObject, kindNames, uint8Type, init, jsType, reflectType, isWrapped, copyStruct, makeValue, MakeSlice, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, memmove, makemap, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, ifaceIndir, overflowFloat32, typesMustMatch, MakeMap, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I;
	js = $packages["github.com/gopherjs/gopherjs/js"];
	math = $packages["math"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	mapIter = $pkg.mapIter = $newType(0, $kindStruct, "reflect.mapIter", "mapIter", "reflect", function(t_, m_, keys_, i_) {
		this.$val = this;
		this.t = t_ !== undefined ? t_ : $ifaceNil;
		this.m = m_ !== undefined ? m_ : null;
		this.keys = keys_ !== undefined ? keys_ : null;
		this.i = i_ !== undefined ? i_ : 0;
	});
	Type = $pkg.Type = $newType(8, $kindInterface, "reflect.Type", "Type", "reflect", null);
	Kind = $pkg.Kind = $newType(4, $kindUint, "reflect.Kind", "Kind", "reflect", null);
	rtype = $pkg.rtype = $newType(0, $kindStruct, "reflect.rtype", "rtype", "reflect", function(size_, hash_, _$2_, align_, fieldAlign_, kind_, alg_, gc_, string_, uncommonType_, ptrToThis_, zero_) {
		this.$val = this;
		this.size = size_ !== undefined ? size_ : 0;
		this.hash = hash_ !== undefined ? hash_ : 0;
		this._$2 = _$2_ !== undefined ? _$2_ : 0;
		this.align = align_ !== undefined ? align_ : 0;
		this.fieldAlign = fieldAlign_ !== undefined ? fieldAlign_ : 0;
		this.kind = kind_ !== undefined ? kind_ : 0;
		this.alg = alg_ !== undefined ? alg_ : ptrType$3.nil;
		this.gc = gc_ !== undefined ? gc_ : arrayType$1.zero();
		this.string = string_ !== undefined ? string_ : ptrType$4.nil;
		this.uncommonType = uncommonType_ !== undefined ? uncommonType_ : ptrType$5.nil;
		this.ptrToThis = ptrToThis_ !== undefined ? ptrToThis_ : ptrType$1.nil;
		this.zero = zero_ !== undefined ? zero_ : 0;
	});
	typeAlg = $pkg.typeAlg = $newType(0, $kindStruct, "reflect.typeAlg", "typeAlg", "reflect", function(hash_, equal_) {
		this.$val = this;
		this.hash = hash_ !== undefined ? hash_ : $throwNilPointerError;
		this.equal = equal_ !== undefined ? equal_ : $throwNilPointerError;
	});
	method = $pkg.method = $newType(0, $kindStruct, "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ptrType$4.nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ptrType$4.nil;
		this.mtyp = mtyp_ !== undefined ? mtyp_ : ptrType$1.nil;
		this.typ = typ_ !== undefined ? typ_ : ptrType$1.nil;
		this.ifn = ifn_ !== undefined ? ifn_ : 0;
		this.tfn = tfn_ !== undefined ? tfn_ : 0;
	});
	uncommonType = $pkg.uncommonType = $newType(0, $kindStruct, "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ptrType$4.nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ptrType$4.nil;
		this.methods = methods_ !== undefined ? methods_ : sliceType$2.nil;
	});
	ChanDir = $pkg.ChanDir = $newType(4, $kindInt, "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = $pkg.arrayType = $newType(0, $kindStruct, "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.elem = elem_ !== undefined ? elem_ : ptrType$1.nil;
		this.slice = slice_ !== undefined ? slice_ : ptrType$1.nil;
		this.len = len_ !== undefined ? len_ : 0;
	});
	chanType = $pkg.chanType = $newType(0, $kindStruct, "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.elem = elem_ !== undefined ? elem_ : ptrType$1.nil;
		this.dir = dir_ !== undefined ? dir_ : 0;
	});
	funcType = $pkg.funcType = $newType(0, $kindStruct, "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.dotdotdot = dotdotdot_ !== undefined ? dotdotdot_ : false;
		this.in$2 = in$2_ !== undefined ? in$2_ : sliceType$3.nil;
		this.out = out_ !== undefined ? out_ : sliceType$3.nil;
	});
	imethod = $pkg.imethod = $newType(0, $kindStruct, "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ptrType$4.nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ptrType$4.nil;
		this.typ = typ_ !== undefined ? typ_ : ptrType$1.nil;
	});
	interfaceType = $pkg.interfaceType = $newType(0, $kindStruct, "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.methods = methods_ !== undefined ? methods_ : sliceType$4.nil;
	});
	mapType = $pkg.mapType = $newType(0, $kindStruct, "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_, keysize_, indirectkey_, valuesize_, indirectvalue_, bucketsize_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.key = key_ !== undefined ? key_ : ptrType$1.nil;
		this.elem = elem_ !== undefined ? elem_ : ptrType$1.nil;
		this.bucket = bucket_ !== undefined ? bucket_ : ptrType$1.nil;
		this.hmap = hmap_ !== undefined ? hmap_ : ptrType$1.nil;
		this.keysize = keysize_ !== undefined ? keysize_ : 0;
		this.indirectkey = indirectkey_ !== undefined ? indirectkey_ : 0;
		this.valuesize = valuesize_ !== undefined ? valuesize_ : 0;
		this.indirectvalue = indirectvalue_ !== undefined ? indirectvalue_ : 0;
		this.bucketsize = bucketsize_ !== undefined ? bucketsize_ : 0;
	});
	ptrType = $pkg.ptrType = $newType(0, $kindStruct, "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.elem = elem_ !== undefined ? elem_ : ptrType$1.nil;
	});
	sliceType = $pkg.sliceType = $newType(0, $kindStruct, "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.elem = elem_ !== undefined ? elem_ : ptrType$1.nil;
	});
	structField = $pkg.structField = $newType(0, $kindStruct, "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ptrType$4.nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ptrType$4.nil;
		this.typ = typ_ !== undefined ? typ_ : ptrType$1.nil;
		this.tag = tag_ !== undefined ? tag_ : ptrType$4.nil;
		this.offset = offset_ !== undefined ? offset_ : 0;
	});
	structType = $pkg.structType = $newType(0, $kindStruct, "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.ptr();
		this.fields = fields_ !== undefined ? fields_ : sliceType$5.nil;
	});
	Method = $pkg.Method = $newType(0, $kindStruct, "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
		this.Func = Func_ !== undefined ? Func_ : new Value.ptr();
		this.Index = Index_ !== undefined ? Index_ : 0;
	});
	StructField = $pkg.StructField = $newType(0, $kindStruct, "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
		this.Tag = Tag_ !== undefined ? Tag_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.Index = Index_ !== undefined ? Index_ : sliceType$9.nil;
		this.Anonymous = Anonymous_ !== undefined ? Anonymous_ : false;
	});
	StructTag = $pkg.StructTag = $newType(8, $kindString, "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = $pkg.fieldScan = $newType(0, $kindStruct, "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.$val = this;
		this.typ = typ_ !== undefined ? typ_ : ptrType$12.nil;
		this.index = index_ !== undefined ? index_ : sliceType$9.nil;
	});
	Value = $pkg.Value = $newType(0, $kindStruct, "reflect.Value", "Value", "reflect", function(typ_, ptr_, flag_) {
		this.$val = this;
		this.typ = typ_ !== undefined ? typ_ : ptrType$1.nil;
		this.ptr = ptr_ !== undefined ? ptr_ : 0;
		this.flag = flag_ !== undefined ? flag_ : 0;
	});
	flag = $pkg.flag = $newType(4, $kindUintptr, "reflect.flag", "flag", "reflect", null);
	ValueError = $pkg.ValueError = $newType(0, $kindStruct, "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.$val = this;
		this.Method = Method_ !== undefined ? Method_ : "";
		this.Kind = Kind_ !== undefined ? Kind_ : 0;
	});
	nonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, $kindStruct, "reflect.nonEmptyInterface", "nonEmptyInterface", "reflect", function(itab_, word_) {
		this.$val = this;
		this.itab = itab_ !== undefined ? itab_ : ptrType$7.nil;
		this.word = word_ !== undefined ? word_ : 0;
	});
		ptrType$1 = $ptrType(rtype);
		ptrType$2 = $ptrType(ptrType);
		sliceType$1 = $sliceType($String);
		ptrType$3 = $ptrType(typeAlg);
		arrayType$1 = $arrayType($UnsafePointer, 2);
		ptrType$4 = $ptrType($String);
		ptrType$5 = $ptrType(uncommonType);
		sliceType$2 = $sliceType(method);
		sliceType$3 = $sliceType(ptrType$1);
		sliceType$4 = $sliceType(imethod);
		sliceType$5 = $sliceType(structField);
		sliceType$6 = $sliceType(Value);
		ptrType$6 = $ptrType(nonEmptyInterface);
		arrayType$2 = $arrayType($UnsafePointer, 100000);
		structType$5 = $structType([{prop: "ityp", name: "ityp", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "link", name: "link", pkg: "reflect", type: $UnsafePointer, tag: ""}, {prop: "bad", name: "bad", pkg: "reflect", type: $Int32, tag: ""}, {prop: "unused", name: "unused", pkg: "reflect", type: $Int32, tag: ""}, {prop: "fun", name: "fun", pkg: "reflect", type: arrayType$2, tag: ""}]);
		ptrType$7 = $ptrType(structType$5);
		sliceType$7 = $sliceType(js.Object);
		ptrType$8 = $ptrType($Uint8);
		ptrType$9 = $ptrType(method);
		ptrType$10 = $ptrType(interfaceType);
		ptrType$11 = $ptrType(imethod);
		sliceType$9 = $sliceType($Int);
		sliceType$10 = $sliceType(fieldScan);
		ptrType$12 = $ptrType(structType);
		ptrType$17 = $ptrType($UnsafePointer);
		sliceType$12 = $sliceType($Uint8);
		sliceType$13 = $sliceType($Int32);
		ptrType$18 = $ptrType(funcType);
		funcType$2 = $funcType([$String], [$Bool], false);
		ptrType$19 = $ptrType(Kind);
		funcType$3 = $funcType([$UnsafePointer, $Uintptr, $Uintptr], [$Uintptr], false);
		funcType$4 = $funcType([$UnsafePointer, $UnsafePointer, $Uintptr], [$Bool], false);
		ptrType$20 = $ptrType(ChanDir);
		ptrType$21 = $ptrType(arrayType);
		ptrType$22 = $ptrType(chanType);
		ptrType$23 = $ptrType(mapType);
		ptrType$24 = $ptrType(sliceType);
		ptrType$25 = $ptrType(StructTag);
		arrayType$3 = $arrayType($Uintptr, 2);
		ptrType$27 = $ptrType(Value);
		ptrType$28 = $ptrType(flag);
		ptrType$29 = $ptrType(ValueError);
	init = function() {
		var pkg, used, x, x$1, x$10, x$11, x$12, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		used = (function(i) {
		});
		used((x = new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$3.nil, arrayType$1.zero(), ptrType$4.nil, ptrType$5.nil, ptrType$1.nil, 0), new x.constructor.elem(x)));
		used((x$1 = new uncommonType.ptr(ptrType$4.nil, ptrType$4.nil, sliceType$2.nil), new x$1.constructor.elem(x$1)));
		used((x$2 = new method.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$1.nil, ptrType$1.nil, 0, 0), new x$2.constructor.elem(x$2)));
		used((x$3 = new arrayType.ptr(new rtype.ptr(), ptrType$1.nil, ptrType$1.nil, 0), new x$3.constructor.elem(x$3)));
		used((x$4 = new chanType.ptr(new rtype.ptr(), ptrType$1.nil, 0), new x$4.constructor.elem(x$4)));
		used((x$5 = new funcType.ptr(new rtype.ptr(), false, sliceType$3.nil, sliceType$3.nil), new x$5.constructor.elem(x$5)));
		used((x$6 = new interfaceType.ptr(new rtype.ptr(), sliceType$4.nil), new x$6.constructor.elem(x$6)));
		used((x$7 = new mapType.ptr(new rtype.ptr(), ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, ptrType$1.nil, 0, 0, 0, 0, 0), new x$7.constructor.elem(x$7)));
		used((x$8 = new ptrType.ptr(new rtype.ptr(), ptrType$1.nil), new x$8.constructor.elem(x$8)));
		used((x$9 = new sliceType.ptr(new rtype.ptr(), ptrType$1.nil), new x$9.constructor.elem(x$9)));
		used((x$10 = new structType.ptr(new rtype.ptr(), sliceType$5.nil), new x$10.constructor.elem(x$10)));
		used((x$11 = new imethod.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$1.nil), new x$11.constructor.elem(x$11)));
		used((x$12 = new structField.ptr(ptrType$4.nil, ptrType$4.nil, ptrType$1.nil, ptrType$4.nil, 0), new x$12.constructor.elem(x$12)));
		pkg = $pkg;
		pkg.RecvDir = 1;
		pkg.SendDir = 2;
		pkg.BothDir = 3;
		$reflect = pkg;
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
	};
	jsType = function(typ) {
		return typ.jsType;
	};
	reflectType = function(typ) {
		return typ.reflectType();
	};
	isWrapped = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 21 || _ref === 19 || _ref === 24 || _ref === 25) {
			return true;
		} else if (_ref === 22) {
			return typ.Elem().Kind() === 17;
		}
		return false;
	};
	copyStruct = function(dst, src, typ) {
		var fields, i, prop;
		fields = jsType(typ).fields;
		i = 0;
		while (i < $parseInt(fields.length)) {
			prop = $internalize(fields[i].prop, $String);
			dst[$externalize(prop, $String)] = src[$externalize(prop, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var rt;
		rt = t.common();
		if ((t.Kind() === 17) || (t.Kind() === 25) || (t.Kind() === 22)) {
			return new Value.ptr(rt, v, (fl | (t.Kind() >>> 0)) >>> 0);
		}
		return new Value.ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), (((fl | (t.Kind() >>> 0)) >>> 0) | 64) >>> 0);
	};
	MakeSlice = $pkg.MakeSlice = function(typ, len, cap) {
		if (!((typ.Kind() === 23))) {
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		}
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		return makeValue(typ, jsType(typ).make(len, cap, (function() {
			return jsType(typ.Elem()).zero();
		})), 0);
	};
	TypeOf = $pkg.TypeOf = function(i) {
		if (!initialized) {
			return new rtype.ptr(0, 0, 0, 0, 0, 0, ptrType$3.nil, arrayType$1.zero(), ptrType$4.nil, ptrType$5.nil, ptrType$1.nil, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		return reflectType(i.constructor);
	};
	ValueOf = $pkg.ValueOf = function(i) {
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return makeValue(reflectType(i.constructor), i.$val, 0);
	};
	rtype.ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = $pkg.SliceOf = function(t) {
		return reflectType($sliceType(jsType(t)));
	};
	Zero = $pkg.Zero = function(typ) {
		return makeValue(typ, jsType(typ).zero(), 0);
	};
	unsafe_New = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 25) {
			return new (jsType(typ).ptr)();
		} else if (_ref === 17) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var _ref, ptr, typ;
		typ = t.common();
		ptr = unsafe_New(typ);
		_ref = typ.Kind();
		if (_ref === 3) {
			ptr.$set((bits.$low << 24 >> 24));
		} else if (_ref === 4) {
			ptr.$set((bits.$low << 16 >> 16));
		} else if (_ref === 2 || _ref === 5) {
			ptr.$set((bits.$low >> 0));
		} else if (_ref === 6) {
			ptr.$set(new $Int64(bits.$high, bits.$low));
		} else if (_ref === 8) {
			ptr.$set((bits.$low << 24 >>> 24));
		} else if (_ref === 9) {
			ptr.$set((bits.$low << 16 >>> 16));
		} else if (_ref === 7 || _ref === 10 || _ref === 12) {
			ptr.$set((bits.$low >>> 0));
		} else if (_ref === 11) {
			ptr.$set(bits);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
	};
	memmove = function(adst, asrc, n) {
		adst.$set(asrc.$get());
	};
	makemap = function(t) {
		var m = 0;
		m = new ($Map)();
		return m;
	};
	mapaccess = function(t, m, key) {
		var entry, k;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		entry = m[$externalize($internalize(k, $String), $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var entry, et, jsVal, k, kv, newVal;
		kv = key.$get();
		k = kv;
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		jsVal = val.$get();
		et = t.Elem();
		if (et.Kind() === 25) {
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		}
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize($internalize(k, $String), $String)] = entry;
	};
	mapdelete = function(t, m, key) {
		var k;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		delete m[$externalize($internalize(k, $String), $String)];
	};
	mapiterinit = function(t, m) {
		return new mapIter.ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var iter, k;
		iter = it;
		k = iter.keys[iter.i];
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, jsType(PtrTo(iter.t.Key())));
	};
	mapiternext = function(it) {
		var iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var _ref, k, slice, srcVal, val;
		v = v;
		srcVal = v.object();
		if (srcVal === jsType(v.typ).nil) {
			return makeValue(typ, jsType(typ).nil, v.flag);
		}
		val = null;
		k = typ.Kind();
		_ref = k;
		switch (0) { default: if (_ref === 18) {
			val = new (jsType(typ))();
		} else if (_ref === 23) {
			slice = new (jsType(typ))(srcVal.$array);
			slice.$offset = srcVal.$offset;
			slice.$length = srcVal.$length;
			slice.$capacity = srcVal.$capacity;
			val = $newDataPointer(slice, jsType(PtrTo(typ)));
		} else if (_ref === 22) {
			if (typ.Elem().Kind() === 25) {
				if ($interfaceIsEqual(typ.Elem(), v.typ.Elem())) {
					val = srcVal;
					break;
				}
				val = new (jsType(typ))();
				copyStruct(val, srcVal, typ.Elem());
				break;
			}
			val = new (jsType(typ))(srcVal.$get, srcVal.$set);
		} else if (_ref === 25) {
			val = new (jsType(typ).ptr)();
			copyStruct(val, srcVal, typ);
		} else if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) {
			val = v.ptr;
		} else {
			$panic(new ValueError.ptr("reflect.Convert", k));
		} }
		return new Value.ptr(typ.common(), val, (((v.flag & 96) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
	};
	Copy = $pkg.Copy = function(dst, src) {
		var dk, dstVal, sk, srcVal;
		src = src;
		dst = dst;
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem());
		dstVal = dst.object();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = src.object();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		return $parseInt($copySlice(dstVal, srcVal)) >> 0;
	};
	methodReceiver = function(op, v, i) {
		var fn = 0, iface, m, m$1, prop, rcvr, rcvrtype = ptrType$1.nil, t = ptrType$1.nil, tt, ut, x, x$1;
		v = v;
		prop = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.interfaceType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!($pointerIsEqual(m.pkgPath, ptrType$4.nil))) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			iface = $pointerOfStructConversion(v.ptr, ptrType$6);
			if (iface.itab === ptrType$7.nil) {
				$panic(new $String("reflect: " + op + " of method on nil interface value"));
			}
			t = m.typ;
			prop = m.name.$get();
		} else {
			ut = v.typ.uncommonType.uncommon();
			if (ut === ptrType$5.nil || i < 0 || i >= ut.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!($pointerIsEqual(m$1.pkgPath, ptrType$4.nil))) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = m$1.mtyp;
			prop = $internalize(jsType(v.typ).methods[i].prop, $String);
		}
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(prop, $String)];
		return [rcvrtype, t, fn];
	};
	valueInterface = function(v, safe) {
		v = v;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 32) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			v = makeMethodValue("Interface", v);
		}
		if (isWrapped(v.typ)) {
			return new (jsType(v.typ))(v.object());
		}
		return v.object();
	};
	ifaceE2I = function(t, src, dst) {
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var _tuple, fn, fv, rcvr;
		v = v;
		if (((v.flag & 256) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); fn = _tuple[2];
		rcvr = v.object();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fv = (function() {
			return fn.apply(rcvr, $externalize(new ($sliceType(js.Object))($global.Array.prototype.slice.call(arguments, [])), sliceType$7));
		});
		return new Value.ptr(v.Type().common(), fv, (((v.flag & 32) >>> 0) | 19) >>> 0);
	};
	rtype.ptr.prototype.pointers = function() {
		var _ref, t;
		t = this;
		_ref = t.Kind();
		if (_ref === 22 || _ref === 21 || _ref === 18 || _ref === 19 || _ref === 25 || _ref === 17) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	rtype.ptr.prototype.Comparable = function() {
		var _ref, i, t;
		t = this;
		_ref = t.Kind();
		if (_ref === 19 || _ref === 23 || _ref === 21) {
			return false;
		} else if (_ref === 17) {
			return t.Elem().Comparable();
		} else if (_ref === 25) {
			i = 0;
			while (i < t.NumField()) {
				if (!t.Field(i).Type.Comparable()) {
					return false;
				}
				i = i + (1) >> 0;
			}
		}
		return true;
	};
	rtype.prototype.Comparable = function() { return this.$val.Comparable(); };
	uncommonType.ptr.prototype.Method = function(i) {
		var fl, fn, m = new Method.ptr(), mt, p, prop, t, x;
		t = this;
		if (t === ptrType$5.nil || i < 0 || i >= t.methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		if (!($pointerIsEqual(p.name, ptrType$4.nil))) {
			m.Name = p.name.$get();
		}
		fl = 19;
		if (!($pointerIsEqual(p.pkgPath, ptrType$4.nil))) {
			m.PkgPath = p.pkgPath.$get();
			fl = (fl | (32)) >>> 0;
		}
		mt = p.typ;
		m.Type = mt;
		prop = $internalize(t.jsType.methods[i].prop, $String);
		fn = (function(rcvr) {
			return rcvr[$externalize(prop, $String)].apply(rcvr, $externalize($subslice(new ($sliceType(js.Object))($global.Array.prototype.slice.call(arguments, [])), 1), sliceType$7));
		});
		m.Func = new Value.ptr(mt, fn, fl);
		m.Index = i;
		return m;
	};
	uncommonType.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.object = function() {
		var _ref, newVal, v, val;
		v = this;
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				_ref = v.typ.Kind();
				switch (0) { default: if (_ref === 11 || _ref === 6) {
					val = new (jsType(v.typ))(val.$high, val.$low);
				} else if (_ref === 15 || _ref === 16) {
					val = new (jsType(v.typ))(val.$real, val.$imag);
				} else if (_ref === 23) {
					if (val === val.constructor.nil) {
						val = jsType(v.typ).nil;
						break;
					}
					newVal = new (jsType(v.typ))(val.$array);
					newVal.$offset = val.$offset;
					newVal.$length = val.$length;
					newVal.$capacity = val.$capacity;
					val = newVal;
				} }
			}
			return val;
		}
		return v.ptr;
	};
	Value.prototype.object = function() { return this.$val.object(); };
	Value.ptr.prototype.call = function(op, in$1) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, _tuple, arg, argsArray, elem, fn, i, i$1, i$2, i$3, isSlice, m, n, nin, nout, origIn, rcvr, results, ret, slice, t, targ, v, x, x$1, x$2, xt, xt$1;
		v = this;
		t = v.typ;
		fn = 0;
		rcvr = null;
		if (!((((v.flag & 256) >>> 0) === 0))) {
			_tuple = methodReceiver(op, v, (v.flag >> 0) >> 9 >> 0); t = _tuple[1]; fn = _tuple[2];
			rcvr = v.object();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			fn = v.object();
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (_i < _ref.$length) {
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		while (i < n) {
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type(); _tmp$1 = t.In(i); xt = _tmp; targ = _tmp$1;
			if (!xt.AssignableTo(targ)) {
				$panic(new $String("reflect: " + op + " using " + xt.String() + " as type " + targ.String()));
			}
			i = i + (1) >> 0;
		}
		if (!isSlice && t.IsVariadic()) {
			m = in$1.$length - n >> 0;
			slice = MakeSlice(t.In(n), m, m);
			elem = t.In(n).Elem();
			i$1 = 0;
			while (i$1 < m) {
				x$2 = (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1]));
				xt$1 = x$2.Type();
				if (!xt$1.AssignableTo(elem)) {
					$panic(new $String("reflect: cannot use " + xt$1.String() + " as type " + elem.String() + " in " + op));
				}
				slice.Index(i$1).Set(x$2);
				i$1 = i$1 + (1) >> 0;
			}
			origIn = in$1;
			in$1 = sliceType$6.make((n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			(n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n] = slice;
		}
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			i$2 = _i$1;
			arg = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			argsArray[i$2] = arg.assignTo("reflect.Value.Call", t.In(i$2).common(), 0).object();
			_i$1++;
		}
		results = fn.apply(rcvr, argsArray);
		_ref$2 = nout;
		if (_ref$2 === 0) {
			return sliceType$6.nil;
		} else if (_ref$2 === 1) {
			return new sliceType$6([$clone(makeValue(t.Out(0), results, 0), Value)]);
		} else {
			ret = sliceType$6.make(nout);
			_ref$3 = ret;
			_i$2 = 0;
			while (_i$2 < _ref$3.$length) {
				i$3 = _i$2;
				(i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3] = makeValue(t.Out(i$3), results[i$3], 0);
				_i$2++;
			}
			return ret;
		}
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.ptr.prototype.Cap = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17) {
			return v.typ.Len();
		} else if (_ref === 18 || _ref === 23) {
			return $parseInt(v.object().$capacity) >> 0;
		}
		$panic(new ValueError.ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	Value.ptr.prototype.Elem = function() {
		var _ref, fl, k, tt, typ, v, val, val$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 20) {
			val = v.object();
			if (val === $ifaceNil) {
				return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			typ = reflectType(val.constructor);
			return makeValue(typ, val.$val, (v.flag & 32) >>> 0);
		} else if (_ref === 22) {
			if (v.IsNil()) {
				return new Value.ptr(ptrType$1.nil, 0, 0);
			}
			val$1 = v.object();
			tt = v.typ.ptrType;
			fl = (((((v.flag & 32) >>> 0) | 64) >>> 0) | 128) >>> 0;
			fl = (fl | ((tt.elem.Kind() >>> 0))) >>> 0;
			if (tt.elem === reflectType(jsObject)) {
				return ValueOf(new $String($internalize(val$1, $String)));
			}
			return new Value.ptr(tt.elem, val$1, fl);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Elem", k));
		}
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.ptr.prototype.Field = function(i) {
		var field, fl, prop, s, tt, typ, v, x;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.structType;
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of range"));
		}
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		prop = $internalize(jsType(v.typ).fields[i].prop, $String);
		typ = field.typ;
		fl = (v.flag & 224) >>> 0;
		if (!($pointerIsEqual(field.pkgPath, ptrType$4.nil))) {
			fl = (fl | (32)) >>> 0;
		}
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		s = v.ptr;
		if (typ === reflectType(jsObject)) {
			return ValueOf(new $String($internalize(s[$externalize(prop, $String)], $String)));
		}
		if (!((((fl & 64) >>> 0) === 0)) && !((typ.Kind() === 17)) && !((typ.Kind() === 25))) {
			return new Value.ptr(typ, new (jsType(PtrTo(typ)))((function() {
				return s[$externalize(prop, $String)];
			}), (function(v$1) {
				s[$externalize(prop, $String)] = v$1;
			})), fl);
		}
		return makeValue(typ, s[$externalize(prop, $String)], fl);
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	Value.ptr.prototype.Index = function(i) {
		var _ref, a, a$1, c, fl, fl$1, fl$2, k, s, str, tt, tt$1, typ, typ$1, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17) {
			tt = v.typ.arrayType;
			if (i < 0 || i > (tt.len >> 0)) {
				$panic(new $String("reflect: array index out of range"));
			}
			typ = tt.elem;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
			a = v.ptr;
			if (typ === reflectType(jsObject)) {
				return ValueOf(new $String($internalize(a[i], $String)));
			}
			if (!((((fl & 64) >>> 0) === 0)) && !((typ.Kind() === 17)) && !((typ.Kind() === 25))) {
				return new Value.ptr(typ, new (jsType(PtrTo(typ)))((function() {
					return a[i];
				}), (function(v$1) {
					a[i] = v$1;
				})), fl);
			}
			return makeValue(typ, a[i], fl);
		} else if (_ref === 23) {
			s = v.object();
			if (i < 0 || i >= ($parseInt(s.$length) >> 0)) {
				$panic(new $String("reflect: slice index out of range"));
			}
			tt$1 = v.typ.sliceType;
			typ$1 = tt$1.elem;
			fl$1 = (192 | ((v.flag & 32) >>> 0)) >>> 0;
			fl$1 = (fl$1 | ((typ$1.Kind() >>> 0))) >>> 0;
			i = i + (($parseInt(s.$offset) >> 0)) >> 0;
			a$1 = s.$array;
			if (typ$1 === reflectType(jsObject)) {
				return ValueOf(new $String($internalize(a$1[i], $String)));
			}
			if (!((((fl$1 & 64) >>> 0) === 0)) && !((typ$1.Kind() === 17)) && !((typ$1.Kind() === 25))) {
				return new Value.ptr(typ$1, new (jsType(PtrTo(typ$1)))((function() {
					return a$1[i];
				}), (function(v$1) {
					a$1[i] = v$1;
				})), fl$1);
			}
			return makeValue(typ$1, a$1[i], fl$1);
		} else if (_ref === 24) {
			str = v.ptr.$get();
			if (i < 0 || i >= str.length) {
				$panic(new $String("reflect: string index out of range"));
			}
			fl$2 = (((v.flag & 32) >>> 0) | 8) >>> 0;
			c = str.charCodeAt(i);
			return new Value.ptr(uint8Type, new ptrType$8(function() { return c; }, function($v) { c = $v; }), (fl$2 | 64) >>> 0);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Index", k));
		}
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.ptr.prototype.IsNil = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 22 || _ref === 23) {
			return v.object() === jsType(v.typ).nil;
		} else if (_ref === 19) {
			return v.object() === $throwNilPointerError;
		} else if (_ref === 21) {
			return v.object() === false;
		} else if (_ref === 20) {
			return v.object() === $ifaceNil;
		} else {
			$panic(new ValueError.ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.ptr.prototype.Len = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17 || _ref === 24) {
			return $parseInt(v.object().length);
		} else if (_ref === 23) {
			return $parseInt(v.object().$length) >> 0;
		} else if (_ref === 18) {
			return $parseInt(v.object().$buffer.length) >> 0;
		} else if (_ref === 21) {
			return $parseInt($keys(v.object()).length);
		} else {
			$panic(new ValueError.ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.ptr.prototype.Pointer = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 21 || _ref === 22 || _ref === 26) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object();
		} else if (_ref === 19) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else if (_ref === 23) {
			if (v.IsNil()) {
				return 0;
			}
			return v.object().$array;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.ptr.prototype.Set = function(x) {
		var _ref, v;
		v = this;
		x = x;
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		x = x.assignTo("reflect.Set", v.typ, 0);
		if (!((((v.flag & 64) >>> 0) === 0))) {
			_ref = v.typ.Kind();
			if (_ref === 17) {
				$copy(v.ptr, x.ptr, jsType(v.typ));
			} else if (_ref === 20) {
				v.ptr.$set(valueInterface(x, false));
			} else if (_ref === 25) {
				copyStruct(v.ptr, x.ptr, v.typ);
			} else {
				v.ptr.$set(x.object());
			}
			return;
		}
		v.ptr = x.ptr;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.ptr.prototype.SetCap = function(n) {
		var newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.ptr.prototype.SetLen = function(n) {
		var newSlice, s, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.ptr.prototype.Slice = function(i, j) {
		var _ref, cap, kind, s, str, tt, typ, v;
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.arrayType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else if (_ref === 24) {
			str = v.ptr.$get();
			if (i < 0 || j < i || j > str.length) {
				$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
			}
			return ValueOf(new $String(str.substring(i, j)));
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice", kind));
		}
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		return makeValue(typ, $subslice(s, i, j), (v.flag & 32) >>> 0);
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.ptr.prototype.Slice3 = function(i, j, k) {
		var _ref, cap, kind, s, tt, typ, v;
		v = this;
		cap = 0;
		typ = $ifaceNil;
		s = null;
		kind = new flag(v.flag).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 128) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.arrayType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.object());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.object();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		return makeValue(typ, $subslice(s, i, j, k), (v.flag & 32) >>> 0);
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.ptr.prototype.Close = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.object());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	Value.ptr.prototype.TrySend = function(x) {
		var c, tt, v;
		v = this;
		x = x;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		c = v.object();
		if (!!!(c.$closed) && ($parseInt(c.$recvQueue.length) === 0) && ($parseInt(c.$buffer.length) === ($parseInt(c.$capacity) >> 0))) {
			return false;
		}
		x = x.assignTo("reflect.Value.Send", tt.elem, 0);
		$send(c, x.object());
		return true;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.ptr.prototype.Send = function(x) {
		var v;
		v = this;
		x = x;
		$panic(new runtime.NotSupportedError.ptr("reflect.Value.Send, use reflect.Value.TrySend if possible"));
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.ptr.prototype.TryRecv = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok = false, res, tt, v, x = new Value.ptr();
		v = this;
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		res = $recv(v.object());
		if (res.constructor === $global.Function) {
			_tmp = new Value.ptr(ptrType$1.nil, 0, 0); _tmp$1 = false; x = _tmp; ok = _tmp$1;
			return [x, ok];
		}
		_tmp$2 = makeValue(tt.elem, res[0], 0); _tmp$3 = !!(res[1]); x = _tmp$2; ok = _tmp$3;
		return [x, ok];
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.ptr.prototype.Recv = function() {
		var ok = false, v, x = new Value.ptr();
		v = this;
		$panic(new runtime.NotSupportedError.ptr("reflect.Value.Recv, use reflect.Value.TryRecv if possible"));
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	Kind.prototype.String = function() {
		var k;
		k = this.$val;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	uncommonType.ptr.prototype.uncommon = function() {
		var t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };
	uncommonType.ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		if (t === ptrType$5.nil || $pointerIsEqual(t.pkgPath, ptrType$4.nil)) {
			return "";
		}
		return t.pkgPath.$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	uncommonType.ptr.prototype.Name = function() {
		var t;
		t = this;
		if (t === ptrType$5.nil || $pointerIsEqual(t.name, ptrType$4.nil)) {
			return "";
		}
		return t.name.$get();
	};
	uncommonType.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.String = function() {
		var t;
		t = this;
		return t.string.$get();
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.ptr.prototype.Bits = function() {
		var k, t;
		t = this;
		if (t === ptrType$1.nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return (t.size >> 0) * 8 >> 0;
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.ptr.prototype.Align = function() {
		var t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.ptr.prototype.Kind = function() {
		var t;
		t = this;
		return (((t.kind & 31) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	uncommonType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		if (t === ptrType$5.nil) {
			return 0;
		}
		return t.methods.$length;
	};
	uncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	uncommonType.ptr.prototype.MethodByName = function(name) {
		var _i, _ref, _tmp, _tmp$1, i, m = new Method.ptr(), ok = false, p, t, x;
		t = this;
		if (t === ptrType$5.nil) {
			return [m, ok];
		}
		p = ptrType$9.nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!($pointerIsEqual(p.name, ptrType$4.nil)) && p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.ptr.prototype.Method = function(i) {
		var m = new Method.ptr(), t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			$copy(m, tt.Method(i), Method);
			return m;
		}
		$copy(m, t.uncommonType.Method(i), Method);
		return m;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	rtype.ptr.prototype.MethodByName = function(name) {
		var _tuple, _tuple$1, m = new Method.ptr(), ok = false, t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			_tuple = tt.MethodByName(name); $copy(m, _tuple[0], Method); ok = _tuple[1];
			return [m, ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name); $copy(m, _tuple$1[0], Method); ok = _tuple$1[1];
		return [m, ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.chanType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.funcType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.ptr.prototype.Elem = function() {
		var _ref, t, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_ref = t.Kind();
		if (_ref === 17) {
			tt = t.arrayType;
			return toType(tt.elem);
		} else if (_ref === 18) {
			tt$1 = t.chanType;
			return toType(tt$1.elem);
		} else if (_ref === 21) {
			tt$2 = t.mapType;
			return toType(tt$2.elem);
		} else if (_ref === 22) {
			tt$3 = t.ptrType;
			return toType(tt$3.elem);
		} else if (_ref === 23) {
			tt$4 = t.sliceType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.ptr.prototype.Field = function(i) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.structType;
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.ptr.prototype.FieldByIndex = function(index) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByIndex(index);
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.ptr.prototype.FieldByName = function(name) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByName(name);
	};
	rtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	rtype.ptr.prototype.FieldByNameFunc = function(match) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByNameFunc(match);
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.ptr.prototype.In = function(i) {
		var t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.funcType;
		return toType((x = tt.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.mapType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.arrayType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.structType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.funcType;
		return tt.in$2.$length;
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.funcType;
		return tt.out.$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.ptr.prototype.Out = function(i) {
		var t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.funcType;
		return toType((x = tt.out, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var _ref, d;
		d = this.$val;
		_ref = d;
		if (_ref === 2) {
			return "chan<-";
		} else if (_ref === 1) {
			return "<-chan";
		} else if (_ref === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.ptr.prototype.Method = function(i) {
		var m = new Method.ptr(), p, t, x;
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		m.Name = p.name.$get();
		if (!($pointerIsEqual(p.pkgPath, ptrType$4.nil))) {
			m.PkgPath = p.pkgPath.$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.ptr.prototype.MethodByName = function(name) {
		var _i, _ref, _tmp, _tmp$1, i, m = new Method.ptr(), ok = false, p, t, x;
		t = this;
		if (t === ptrType$10.nil) {
			return [m, ok];
		}
		p = ptrType$11.nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (p.name.$get() === name) {
				_tmp = $clone(t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var _tuple, i, name, qvalue, tag, value;
		tag = this.$val;
		while (!(tag === "")) {
			i = 0;
			while (i < tag.length && (tag.charCodeAt(i) === 32)) {
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34))) {
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (i < tag.length && !((tag.charCodeAt(i) === 34))) {
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue); value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	structType.ptr.prototype.Field = function(i) {
		var f = new StructField.ptr(), p, t, t$1, x;
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			return f;
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		if (!($pointerIsEqual(p.name, ptrType$4.nil))) {
			f.Name = p.name.$get();
		} else {
			t$1 = f.Type;
			if (t$1.Kind() === 22) {
				t$1 = t$1.Elem();
			}
			f.Name = t$1.Name();
			f.Anonymous = true;
		}
		if (!($pointerIsEqual(p.pkgPath, ptrType$4.nil))) {
			f.PkgPath = p.pkgPath.$get();
		}
		if (!($pointerIsEqual(p.tag, ptrType$4.nil))) {
			f.Tag = p.tag.$get();
		}
		f.Offset = p.offset;
		f.Index = new sliceType$9([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.ptr.prototype.FieldByIndex = function(index) {
		var _i, _ref, f = new StructField.ptr(), ft, i, t, x;
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				ft = f.Type;
				if ((ft.Kind() === 22) && (ft.Elem().Kind() === 25)) {
					ft = ft.Elem();
				}
				f.Type = ft;
			}
			$copy(f, f.Type.Field(x), StructField);
			_i++;
		}
		return f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.ptr.prototype.FieldByNameFunc = function(match) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _i$1, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _map, _map$1, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, count, current, f, fname, i, index, next, nextCount, ntyp, ok = false, result = new StructField.ptr(), scan, styp, t, t$1, visited, x;
		t = this;
		current = new sliceType$10([]);
		next = new sliceType$10([new fieldScan.ptr(t, sliceType$9.nil)]);
		nextCount = false;
		visited = (_map = new $Map(), _map);
		while (next.$length > 0) {
			_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			while (_i < _ref.$length) {
				scan = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				if ((_entry = visited[t$1.$key()], _entry !== undefined ? _entry.v : false)) {
					_i++;
					continue;
				}
				_key$1 = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[_key$1.$key()] = { k: _key$1, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				while (_i$1 < _ref$1.$length) {
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ptrType$1.nil;
					if (!($pointerIsEqual(f.name, ptrType$4.nil))) {
						fname = f.name.$get();
					} else {
						ntyp = f.typ;
						if (ntyp.Kind() === 22) {
							ntyp = ntyp.Elem().common();
						}
						fname = ntyp.Name();
					}
					if (match(fname)) {
						if ((_entry$1 = count[t$1.$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.ptr("", "", $ifaceNil, "", 0, sliceType$9.nil, false); _tmp$3 = false; $copy(result, _tmp$2, StructField); ok = _tmp$3;
							return [result, ok];
						}
						$copy(result, t$1.Field(i), StructField);
						result.Index = sliceType$9.nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						continue;
					}
					if (ok || ntyp === ptrType$1.nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						continue;
					}
					styp = ntyp.structType;
					if ((_entry$2 = nextCount[styp.$key()], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$2.$key()] = { k: _key$2, v: 2 };
						_i$1++;
						continue;
					}
					if (nextCount === false) {
						nextCount = (_map$1 = new $Map(), _map$1);
					}
					_key$4 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$4.$key()] = { k: _key$4, v: 1 };
					if ((_entry$3 = count[t$1.$key()], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$5 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$5.$key()] = { k: _key$5, v: 2 };
					}
					index = sliceType$9.nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.ptr(styp, index));
					_i$1++;
				}
				_i++;
			}
			if (ok) {
				break;
			}
		}
		return [result, ok];
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.ptr.prototype.FieldByName = function(name) {
		var _i, _ref, _tmp, _tmp$1, _tuple, f = new StructField.ptr(), hasAnon, i, present = false, t, tf, x;
		t = this;
		hasAnon = false;
		if (!(name === "")) {
			_ref = t.fields;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				if ($pointerIsEqual(tf.name, ptrType$4.nil)) {
					hasAnon = true;
					_i++;
					continue;
				}
				if (tf.name.$get() === name) {
					_tmp = $clone(t.Field(i), StructField); _tmp$1 = true; $copy(f, _tmp, StructField); present = _tmp$1;
					return [f, present];
				}
				_i++;
			}
		}
		if (!hasAnon) {
			return [f, present];
		}
		_tuple = t.FieldByNameFunc((function(s) {
			return s === name;
		})); $copy(f, _tuple[0], StructField); present = _tuple[1];
		return [f, present];
	};
	structType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	PtrTo = $pkg.PtrTo = function(t) {
		return $assertType(t, ptrType$1).ptrTo();
	};
	rtype.ptr.prototype.Implements = function(u) {
		var t;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		if (!((u.Kind() === 20))) {
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		}
		return implements$1($assertType(u, ptrType$1), t);
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.ptr.prototype.AssignableTo = function(u) {
		var t, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ptrType$1);
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.ptr.prototype.ConvertibleTo = function(u) {
		var t, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ptrType$1);
		return !(convertOp(uu, t) === $throwNilPointerError);
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var i, i$1, j, j$1, t, tm, tm$1, v, v$1, vm, vm$1, x, x$1, x$2, x$3;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.interfaceType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.interfaceType;
			i = 0;
			j = 0;
			while (j < v.methods.$length) {
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if ($pointerIsEqual(vm.name, tm.name) && $pointerIsEqual(vm.pkgPath, tm.pkgPath) && vm.typ === tm.typ) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === ptrType$5.nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (j$1 < v$1.methods.$length) {
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = (x$3 = v$1.methods, ((j$1 < 0 || j$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j$1]));
			if ($pointerIsEqual(vm$1.name, tm$1.name) && $pointerIsEqual(vm$1.pkgPath, tm$1.pkgPath) && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var _i, _i$1, _i$2, _ref, _ref$1, _ref$2, _ref$3, i, i$1, i$2, kind, t, t$1, t$2, tf, typ, typ$1, v, v$1, v$2, vf, x, x$1, x$2, x$3;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_ref = kind;
		if (_ref === 17) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_ref === 18) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 19) {
			t = T.funcType;
			v = V.funcType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.$length === v.in$2.$length)) || !((t.out.$length === v.out.$length))) {
				return false;
			}
			_ref$1 = t.in$2;
			_i = 0;
			while (_i < _ref$1.$length) {
				i = _i;
				typ = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (!(typ === (x = v.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))) {
					return false;
				}
				_i++;
			}
			_ref$2 = t.out;
			_i$1 = 0;
			while (_i$1 < _ref$2.$length) {
				i$1 = _i$1;
				typ$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (!(typ$1 === (x$1 = v.out, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref === 20) {
			t$1 = T.interfaceType;
			v$1 = V.interfaceType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_ref === 21) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 22 || _ref === 23) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 25) {
			t$2 = T.structType;
			v$2 = V.structType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref$3 = t$2.fields;
			_i$2 = 0;
			while (_i$2 < _ref$3.$length) {
				i$2 = _i$2;
				tf = (x$2 = t$2.fields, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2]));
				vf = (x$3 = v$2.fields, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2]));
				if (!($pointerIsEqual(tf.name, vf.name)) && ($pointerIsEqual(tf.name, ptrType$4.nil) || $pointerIsEqual(vf.name, ptrType$4.nil) || !(tf.name.$get() === vf.name.$get()))) {
					return false;
				}
				if (!($pointerIsEqual(tf.pkgPath, vf.pkgPath)) && ($pointerIsEqual(tf.pkgPath, ptrType$4.nil) || $pointerIsEqual(vf.pkgPath, ptrType$4.nil) || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!($pointerIsEqual(tf.tag, vf.tag)) && ($pointerIsEqual(tf.tag, ptrType$4.nil) || $pointerIsEqual(vf.tag, ptrType$4.nil) || !(tf.tag.$get() === vf.tag.$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		if (t === ptrType$1.nil) {
			return $ifaceNil;
		}
		return t;
	};
	ifaceIndir = function(t) {
		return ((t.kind & 32) >>> 0) === 0;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val;
		return (((f & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.ptr.prototype.pointer = function() {
		var v;
		v = this;
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 64) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var f;
		f = this.$val;
		if (!((new flag(f).kind() === expected))) {
			$panic(new ValueError.ptr(methodName(), new flag(f).kind()));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val;
		if (f === 0) {
			$panic(new ValueError.ptr(methodName(), 0));
		}
		if (!((((f & 32) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 128) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.ptr.prototype.Addr = function() {
		var v;
		v = this;
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.ptr(v.typ.ptrTo(), v.ptr, ((((v.flag & 32) >>> 0)) | 22) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.ptr.prototype.Bool = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(1);
		return v.ptr.$get();
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.ptr.prototype.Bytes = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		}
		return v.ptr.$get();
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.ptr.prototype.runes = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 5))) {
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		}
		return v.ptr.$get();
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.ptr.prototype.CanAddr = function() {
		var v;
		v = this;
		return !((((v.flag & 128) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.ptr.prototype.CanSet = function() {
		var v;
		v = this;
		return ((v.flag & 160) >>> 0) === 128;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.ptr.prototype.Call = function(in$1) {
		var v;
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		return v.call("Call", in$1);
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.ptr.prototype.CallSlice = function(in$1) {
		var v;
		v = this;
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		return v.call("CallSlice", in$1);
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.ptr.prototype.Complex = function() {
		var _ref, k, v, x;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
		} else if (_ref === 16) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Complex", new flag(v.flag).kind()));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.ptr.prototype.FieldByIndex = function(index) {
		var _i, _ref, i, v, x;
		v = this;
		if (index.$length === 1) {
			return v.Field(((0 < 0 || 0 >= index.$length) ? $throwRuntimeError("index out of range") : index.$array[index.$offset + 0]));
		}
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				if ((v.Kind() === 22) && (v.typ.Elem().Kind() === 25)) {
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					v = v.Elem();
				}
			}
			v = v.Field(x);
			_i++;
		}
		return v;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.ptr.prototype.FieldByName = function(name) {
		var _tuple, f, ok, v;
		v = this;
		new flag(v.flag).mustBe(25);
		_tuple = v.typ.FieldByName(name); f = $clone(_tuple[0], StructField); ok = _tuple[1];
		if (ok) {
			return v.FieldByIndex(f.Index);
		}
		return new Value.ptr(ptrType$1.nil, 0, 0);
	};
	Value.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	Value.ptr.prototype.FieldByNameFunc = function(match) {
		var _tuple, f, ok, v;
		v = this;
		_tuple = v.typ.FieldByNameFunc(match); f = $clone(_tuple[0], StructField); ok = _tuple[1];
		if (ok) {
			return v.FieldByIndex(f.Index);
		}
		return new Value.ptr(ptrType$1.nil, 0, 0);
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.ptr.prototype.Float = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return $coerceFloat32(v.ptr.$get());
		} else if (_ref === 14) {
			return v.ptr.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Float", new flag(v.flag).kind()));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.ptr.prototype.Int = function() {
		var _ref, k, p, v;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 2) {
			return new $Int64(0, p.$get());
		} else if (_ref === 3) {
			return new $Int64(0, p.$get());
		} else if (_ref === 4) {
			return new $Int64(0, p.$get());
		} else if (_ref === 5) {
			return new $Int64(0, p.$get());
		} else if (_ref === 6) {
			return p.$get();
		}
		$panic(new ValueError.ptr("reflect.Value.Int", new flag(v.flag).kind()));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.ptr.prototype.CanInterface = function() {
		var v;
		v = this;
		if (v.flag === 0) {
			$panic(new ValueError.ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 32) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.ptr.prototype.Interface = function() {
		var i = $ifaceNil, v;
		v = this;
		i = valueInterface(v, true);
		return i;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.ptr.prototype.InterfaceData = function() {
		var v;
		v = this;
		new flag(v.flag).mustBe(20);
		return v.ptr;
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.ptr.prototype.IsValid = function() {
		var v;
		v = this;
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.ptr.prototype.Kind = function() {
		var v;
		v = this;
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.ptr.prototype.MapIndex = function(key) {
		var c, e, fl, k, tt, typ, v;
		v = this;
		key = key;
		new flag(v.flag).mustBe(21);
		tt = v.typ.mapType;
		key = key.assignTo("reflect.Value.MapIndex", tt.key, 0);
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = new ptrType$17(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key);
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 32) >>> 0;
		fl = (fl | ((typ.Kind() >>> 0))) >>> 0;
		if (ifaceIndir(typ)) {
			c = unsafe_New(typ);
			memmove(c, e, typ.size);
			return new Value.ptr(typ, c, (fl | 64) >>> 0);
		} else {
			return new Value.ptr(typ, e.$get(), fl);
		}
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.ptr.prototype.MapKeys = function() {
		var a, c, fl, i, it, key, keyType, m, mlen, tt, v;
		v = this;
		new flag(v.flag).mustBe(21);
		tt = v.typ.mapType;
		keyType = tt.key;
		fl = (((v.flag & 32) >>> 0) | (keyType.Kind() >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = sliceType$6.make(mlen);
		i = 0;
		i = 0;
		while (i < a.$length) {
			key = mapiterkey(it);
			if (key === 0) {
				break;
			}
			if (ifaceIndir(keyType)) {
				c = unsafe_New(keyType);
				memmove(c, key, keyType.size);
				(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, c, (fl | 64) >>> 0);
			} else {
				(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = new Value.ptr(keyType, key.$get(), fl);
			}
			mapiternext(it);
			i = i + (1) >> 0;
		}
		return $subslice(a, 0, i);
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.ptr.prototype.Method = function(i) {
		var fl, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0)) || (i >>> 0) >= (v.typ.NumMethod() >>> 0)) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 96) >>> 0;
		fl = (fl | (19)) >>> 0;
		fl = (fl | (((((i >>> 0) << 9 >>> 0) | 256) >>> 0))) >>> 0;
		return new Value.ptr(v.typ, v.ptr, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.ptr.prototype.NumMethod = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.ptr.prototype.MethodByName = function(name) {
		var _tuple, m, ok, v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 256) >>> 0) === 0))) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		_tuple = v.typ.MethodByName(name); m = $clone(_tuple[0], Method); ok = _tuple[1];
		if (!ok) {
			return new Value.ptr(ptrType$1.nil, 0, 0);
		}
		return v.Method(m.Index);
	};
	Value.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	Value.ptr.prototype.NumField = function() {
		var tt, v;
		v = this;
		new flag(v.flag).mustBe(25);
		tt = v.typ.structType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.ptr.prototype.OverflowComplex = function(x) {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_ref === 16) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowComplex", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.ptr.prototype.OverflowFloat = function(x) {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return overflowFloat32(x);
		} else if (_ref === 14) {
			return false;
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowFloat", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.ptr.prototype.OverflowInt = function(x) {
		var _ref, bitSize, k, trunc, v, x$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowInt", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.ptr.prototype.OverflowUint = function(x) {
		var _ref, bitSize, k, trunc, v, x$1;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.ptr("reflect.Value.OverflowUint", new flag(v.flag).kind()));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.ptr.prototype.SetBool = function(x) {
		var v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.ptr.prototype.SetBytes = function(x) {
		var v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		}
		v.ptr.$set(x);
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.ptr.prototype.setRunes = function(x) {
		var v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 5))) {
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		}
		v.ptr.$set(x);
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.ptr.prototype.SetComplex = function(x) {
		var _ref, k, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_ref === 16) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetComplex", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.ptr.prototype.SetFloat = function(x) {
		var _ref, k, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			v.ptr.$set(x);
		} else if (_ref === 14) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetFloat", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.ptr.prototype.SetInt = function(x) {
		var _ref, k, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 3) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_ref === 4) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_ref === 5) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 6) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetInt", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.ptr.prototype.SetMapIndex = function(key, val) {
		var e, k, tt, v;
		v = this;
		val = val;
		key = key;
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.mapType;
		key = key.assignTo("reflect.Value.SetMapIndex", tt.key, 0);
		k = 0;
		if (!((((key.flag & 64) >>> 0) === 0))) {
			k = key.ptr;
		} else {
			k = new ptrType$17(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key);
		}
		if (val.typ === ptrType$1.nil) {
			mapdelete(v.typ, v.pointer(), k);
			return;
		}
		new flag(val.flag).mustBeExported();
		val = val.assignTo("reflect.Value.SetMapIndex", tt.elem, 0);
		e = 0;
		if (!((((val.flag & 64) >>> 0) === 0))) {
			e = val.ptr;
		} else {
			e = new ptrType$17(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val);
		}
		mapassign(v.typ, v.pointer(), k, e);
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.ptr.prototype.SetUint = function(x) {
		var _ref, k, v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 8) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_ref === 9) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_ref === 10) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 11) {
			v.ptr.$set(x);
		} else if (_ref === 12) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.ptr("reflect.Value.SetUint", new flag(v.flag).kind()));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.ptr.prototype.SetPointer = function(x) {
		var v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.ptr.prototype.SetString = function(x) {
		var v;
		v = this;
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.ptr.prototype.String = function() {
		var _ref, k, v;
		v = this;
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 0) {
			return "<invalid Value>";
		} else if (_ref === 24) {
			return v.ptr.$get();
		}
		return "<" + v.Type().String() + " Value>";
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.ptr.prototype.Type = function() {
		var f, i, m, m$1, tt, ut, v, x, x$1;
		v = this;
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.ptr("reflect.Value.Type", 0));
		}
		if (((f & 256) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 9 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.interfaceType;
			if ((i >>> 0) >= (tt.methods.$length >>> 0)) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === ptrType$5.nil || (i >>> 0) >= (ut.methods.$length >>> 0)) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.ptr.prototype.Uint = function() {
		var _ref, k, p, v, x;
		v = this;
		k = new flag(v.flag).kind();
		p = v.ptr;
		_ref = k;
		if (_ref === 7) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 8) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 9) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 10) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 11) {
			return p.$get();
		} else if (_ref === 12) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.ptr("reflect.Value.Uint", new flag(v.flag).kind()));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.ptr.prototype.UnsafeAddr = function() {
		var v;
		v = this;
		if (v.typ === ptrType$1.nil) {
			$panic(new ValueError.ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 128) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		if (!($interfaceIsEqual(t1, t2))) {
			$panic(new $String(what + ": " + t1.String() + " != " + t2.String()));
		}
	};
	MakeMap = $pkg.MakeMap = function(typ) {
		var m;
		if (!((typ.Kind() === 21))) {
			$panic(new $String("reflect.MakeMap of non-map type"));
		}
		m = makemap($assertType(typ, ptrType$1));
		return new Value.ptr(typ.common(), m, 21);
	};
	New = $pkg.New = function(typ) {
		var fl, ptr;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ptrType$1));
		fl = 22;
		return new Value.ptr(typ.common().ptrTo(), ptr, fl);
	};
	Value.ptr.prototype.assignTo = function(context, dst, target) {
		var fl, v, x;
		v = this;
		if (!((((v.flag & 256) >>> 0) === 0))) {
			v = makeMethodValue(context, v);
		}
		if (directlyAssignable(dst, v.typ)) {
			v.typ = dst;
			fl = (v.flag & 224) >>> 0;
			fl = (fl | ((dst.Kind() >>> 0))) >>> 0;
			return new Value.ptr(dst, v.ptr, fl);
		} else if (implements$1(dst, v.typ)) {
			if (target === 0) {
				target = unsafe_New(dst);
			}
			x = valueInterface(v, false);
			if (dst.NumMethod() === 0) {
				target.$set(x);
			} else {
				ifaceE2I(dst, x, target);
			}
			return new Value.ptr(dst, target, 84);
		}
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.ptr.prototype.Convert = function(t) {
		var op, v;
		v = this;
		if (!((((v.flag & 256) >>> 0) === 0))) {
			v = makeMethodValue("Convert", v);
		}
		op = convertOp(t.common(), v.typ);
		if (op === $throwNilPointerError) {
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + t.String()));
		}
		return op(v, t);
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6;
		_ref = src.Kind();
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			_ref$1 = dst.Kind();
			if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				return cvtInt;
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				return cvtIntFloat;
			} else if (_ref$1 === 24) {
				return cvtIntString;
			}
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			_ref$2 = dst.Kind();
			if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
				return cvtUint;
			} else if (_ref$2 === 13 || _ref$2 === 14) {
				return cvtUintFloat;
			} else if (_ref$2 === 24) {
				return cvtUintString;
			}
		} else if (_ref === 13 || _ref === 14) {
			_ref$3 = dst.Kind();
			if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
				return cvtFloatInt;
			} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
				return cvtFloatUint;
			} else if (_ref$3 === 13 || _ref$3 === 14) {
				return cvtFloat;
			}
		} else if (_ref === 15 || _ref === 16) {
			_ref$4 = dst.Kind();
			if (_ref$4 === 15 || _ref$4 === 16) {
				return cvtComplex;
			}
		} else if (_ref === 24) {
			if ((dst.Kind() === 23) && dst.Elem().PkgPath() === "") {
				_ref$5 = dst.Elem().Kind();
				if (_ref$5 === 8) {
					return cvtStringBytes;
				} else if (_ref$5 === 5) {
					return cvtStringRunes;
				}
			}
		} else if (_ref === 23) {
			if ((dst.Kind() === 24) && src.Elem().PkgPath() === "") {
				_ref$6 = src.Elem().Kind();
				if (_ref$6 === 8) {
					return cvtBytesString;
				} else if (_ref$6 === 5) {
					return cvtRunesString;
				}
			}
		}
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if ((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "" && haveIdenticalUnderlyingType(dst.Elem().common(), src.Elem().common())) {
			return cvtDirect;
		}
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return $throwNilPointerError;
	};
	makeFloat = function(f, v, t) {
		var _ref, ptr, typ;
		typ = t.common();
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 4) {
			ptr.$set(v);
		} else if (_ref === 8) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
	};
	makeComplex = function(f, v, t) {
		var _ref, ptr, typ;
		typ = t.common();
		ptr = unsafe_New(typ);
		_ref = typ.size;
		if (_ref === 8) {
			ptr.$set(new $Complex64(v.$real, v.$imag));
		} else if (_ref === 16) {
			ptr.$set(v);
		}
		return new Value.ptr(typ, ptr, (((f | 64) >>> 0) | (typ.Kind() >>> 0)) >>> 0);
	};
	makeString = function(f, v, t) {
		var ret;
		ret = New(t).Elem();
		ret.SetString(v);
		ret.flag = ((ret.flag & ~128) | f) >>> 0;
		return ret;
	};
	makeBytes = function(f, v, t) {
		var ret;
		ret = New(t).Elem();
		ret.SetBytes(v);
		ret.flag = ((ret.flag & ~128) | f) >>> 0;
		return ret;
	};
	makeRunes = function(f, v, t) {
		var ret;
		ret = New(t).Elem();
		ret.setRunes(v);
		ret.flag = ((ret.flag & ~128) | f) >>> 0;
		return ret;
	};
	cvtInt = function(v, t) {
		var x;
		v = v;
		return makeInt((v.flag & 32) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t);
	};
	cvtUint = function(v, t) {
		v = v;
		return makeInt((v.flag & 32) >>> 0, v.Uint(), t);
	};
	cvtFloatInt = function(v, t) {
		var x;
		v = v;
		return makeInt((v.flag & 32) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t);
	};
	cvtFloatUint = function(v, t) {
		v = v;
		return makeInt((v.flag & 32) >>> 0, new $Uint64(0, v.Float()), t);
	};
	cvtIntFloat = function(v, t) {
		v = v;
		return makeFloat((v.flag & 32) >>> 0, $flatten64(v.Int()), t);
	};
	cvtUintFloat = function(v, t) {
		v = v;
		return makeFloat((v.flag & 32) >>> 0, $flatten64(v.Uint()), t);
	};
	cvtFloat = function(v, t) {
		v = v;
		return makeFloat((v.flag & 32) >>> 0, v.Float(), t);
	};
	cvtComplex = function(v, t) {
		v = v;
		return makeComplex((v.flag & 32) >>> 0, v.Complex(), t);
	};
	cvtIntString = function(v, t) {
		v = v;
		return makeString((v.flag & 32) >>> 0, $encodeRune(v.Int().$low), t);
	};
	cvtUintString = function(v, t) {
		v = v;
		return makeString((v.flag & 32) >>> 0, $encodeRune(v.Uint().$low), t);
	};
	cvtBytesString = function(v, t) {
		v = v;
		return makeString((v.flag & 32) >>> 0, $bytesToString(v.Bytes()), t);
	};
	cvtStringBytes = function(v, t) {
		v = v;
		return makeBytes((v.flag & 32) >>> 0, new sliceType$12($stringToBytes(v.String())), t);
	};
	cvtRunesString = function(v, t) {
		v = v;
		return makeString((v.flag & 32) >>> 0, $runesToString(v.runes()), t);
	};
	cvtStringRunes = function(v, t) {
		v = v;
		return makeRunes((v.flag & 32) >>> 0, new sliceType$13($stringToRunes(v.String())), t);
	};
	cvtT2I = function(v, typ) {
		var target, x;
		v = v;
		target = unsafe_New(typ.common());
		x = valueInterface(v, false);
		if (typ.NumMethod() === 0) {
			target.$set(x);
		} else {
			ifaceE2I($assertType(typ, ptrType$1), x, target);
		}
		return new Value.ptr(typ.common(), target, (((((v.flag & 32) >>> 0) | 64) >>> 0) | 20) >>> 0);
	};
	cvtI2I = function(v, typ) {
		var ret;
		v = v;
		if (v.IsNil()) {
			ret = Zero(typ);
			ret.flag = (ret.flag | (((v.flag & 32) >>> 0))) >>> 0;
			return ret;
		}
		return cvtT2I(v.Elem(), typ);
	};
	Kind.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$19.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	rtype.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$1.methods = [{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", type: $funcType([], [$Bool], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$5.methods = [{prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ChanDir.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$20.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	arrayType.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$21.methods = [{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", type: $funcType([], [$Bool], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	chanType.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$22.methods = [{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", type: $funcType([], [$Bool], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	funcType.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$18.methods = [{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", type: $funcType([], [$Bool], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	interfaceType.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$10.methods = [{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", type: $funcType([], [$Bool], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	mapType.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$23.methods = [{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", type: $funcType([], [$Bool], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$2.methods = [{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", type: $funcType([], [$Bool], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	sliceType.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$24.methods = [{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", type: $funcType([], [$Bool], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	structType.methods = [{prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	ptrType$12.methods = [{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "pointers", name: "pointers", pkg: "reflect", type: $funcType([], [$Bool], false)}, {prop: "ptrTo", name: "ptrTo", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}];
	StructTag.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [$String], false)}];
	ptrType$25.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [$String], false)}];
	Value.methods = [{prop: "Addr", name: "Addr", pkg: "", type: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", type: $funcType([], [sliceType$12], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([sliceType$6], [sliceType$6], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", type: $funcType([sliceType$6], [sliceType$6], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Cap", name: "Cap", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Close", name: "Close", pkg: "", type: $funcType([], [], false)}, {prop: "Complex", name: "Complex", pkg: "", type: $funcType([], [$Complex128], false)}, {prop: "Convert", name: "Convert", pkg: "", type: $funcType([Type], [Value], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [Value], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [Value], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [Value], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", type: $funcType([], [arrayType$3], false)}, {prop: "IsNil", name: "IsNil", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "IsValid", name: "IsValid", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", type: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", type: $funcType([], [sliceType$6], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Value], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", type: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", type: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", type: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", type: $funcType([$Uint64], [$Bool], false)}, {prop: "Pointer", name: "Pointer", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "Recv", name: "Recv", pkg: "", type: $funcType([], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", type: $funcType([Value], [], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([Value], [], false)}, {prop: "SetBool", name: "SetBool", pkg: "", type: $funcType([$Bool], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", type: $funcType([sliceType$12], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", type: $funcType([$Int], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", type: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", type: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", type: $funcType([$Int64], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", type: $funcType([$Int], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", type: $funcType([Value, Value], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", type: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", type: $funcType([$String], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", type: $funcType([$Uint64], [], false)}, {prop: "Slice", name: "Slice", pkg: "", type: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", type: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", type: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", type: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", type: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "reflect", type: $funcType([$String, sliceType$6], [sliceType$6], false)}, {prop: "kind", name: "kind", pkg: "reflect", type: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", type: $funcType([Kind], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", type: $funcType([], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", type: $funcType([], [], false)}, {prop: "object", name: "object", pkg: "reflect", type: $funcType([], [js.Object], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", type: $funcType([], [$UnsafePointer], false)}, {prop: "recv", name: "recv", pkg: "reflect", type: $funcType([$Bool], [Value, $Bool], false)}, {prop: "runes", name: "runes", pkg: "reflect", type: $funcType([], [sliceType$13], false)}, {prop: "send", name: "send", pkg: "reflect", type: $funcType([Value, $Bool], [$Bool], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", type: $funcType([sliceType$13], [], false)}];
	ptrType$27.methods = [{prop: "Addr", name: "Addr", pkg: "", type: $funcType([], [Value], false)}, {prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Bytes", name: "Bytes", pkg: "", type: $funcType([], [sliceType$12], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([sliceType$6], [sliceType$6], false)}, {prop: "CallSlice", name: "CallSlice", pkg: "", type: $funcType([sliceType$6], [sliceType$6], false)}, {prop: "CanAddr", name: "CanAddr", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "CanInterface", name: "CanInterface", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "CanSet", name: "CanSet", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Cap", name: "Cap", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Close", name: "Close", pkg: "", type: $funcType([], [], false)}, {prop: "Complex", name: "Complex", pkg: "", type: $funcType([], [$Complex128], false)}, {prop: "Convert", name: "Convert", pkg: "", type: $funcType([Type], [Value], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Value], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [Value], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [Value], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [Value], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [Value], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [Value], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "InterfaceData", name: "InterfaceData", pkg: "", type: $funcType([], [arrayType$3], false)}, {prop: "IsNil", name: "IsNil", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "IsValid", name: "IsValid", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "MapIndex", name: "MapIndex", pkg: "", type: $funcType([Value], [Value], false)}, {prop: "MapKeys", name: "MapKeys", pkg: "", type: $funcType([], [sliceType$6], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Value], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Value], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "OverflowComplex", name: "OverflowComplex", pkg: "", type: $funcType([$Complex128], [$Bool], false)}, {prop: "OverflowFloat", name: "OverflowFloat", pkg: "", type: $funcType([$Float64], [$Bool], false)}, {prop: "OverflowInt", name: "OverflowInt", pkg: "", type: $funcType([$Int64], [$Bool], false)}, {prop: "OverflowUint", name: "OverflowUint", pkg: "", type: $funcType([$Uint64], [$Bool], false)}, {prop: "Pointer", name: "Pointer", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "Recv", name: "Recv", pkg: "", type: $funcType([], [Value, $Bool], false)}, {prop: "Send", name: "Send", pkg: "", type: $funcType([Value], [], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([Value], [], false)}, {prop: "SetBool", name: "SetBool", pkg: "", type: $funcType([$Bool], [], false)}, {prop: "SetBytes", name: "SetBytes", pkg: "", type: $funcType([sliceType$12], [], false)}, {prop: "SetCap", name: "SetCap", pkg: "", type: $funcType([$Int], [], false)}, {prop: "SetComplex", name: "SetComplex", pkg: "", type: $funcType([$Complex128], [], false)}, {prop: "SetFloat", name: "SetFloat", pkg: "", type: $funcType([$Float64], [], false)}, {prop: "SetInt", name: "SetInt", pkg: "", type: $funcType([$Int64], [], false)}, {prop: "SetLen", name: "SetLen", pkg: "", type: $funcType([$Int], [], false)}, {prop: "SetMapIndex", name: "SetMapIndex", pkg: "", type: $funcType([Value, Value], [], false)}, {prop: "SetPointer", name: "SetPointer", pkg: "", type: $funcType([$UnsafePointer], [], false)}, {prop: "SetString", name: "SetString", pkg: "", type: $funcType([$String], [], false)}, {prop: "SetUint", name: "SetUint", pkg: "", type: $funcType([$Uint64], [], false)}, {prop: "Slice", name: "Slice", pkg: "", type: $funcType([$Int, $Int], [Value], false)}, {prop: "Slice3", name: "Slice3", pkg: "", type: $funcType([$Int, $Int, $Int], [Value], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "TryRecv", name: "TryRecv", pkg: "", type: $funcType([], [Value, $Bool], false)}, {prop: "TrySend", name: "TrySend", pkg: "", type: $funcType([Value], [$Bool], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [Type], false)}, {prop: "Uint", name: "Uint", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "UnsafeAddr", name: "UnsafeAddr", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "assignTo", name: "assignTo", pkg: "reflect", type: $funcType([$String, ptrType$1, $UnsafePointer], [Value], false)}, {prop: "call", name: "call", pkg: "reflect", type: $funcType([$String, sliceType$6], [sliceType$6], false)}, {prop: "kind", name: "kind", pkg: "reflect", type: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", type: $funcType([Kind], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", type: $funcType([], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", type: $funcType([], [], false)}, {prop: "object", name: "object", pkg: "reflect", type: $funcType([], [js.Object], false)}, {prop: "pointer", name: "pointer", pkg: "reflect", type: $funcType([], [$UnsafePointer], false)}, {prop: "recv", name: "recv", pkg: "reflect", type: $funcType([$Bool], [Value, $Bool], false)}, {prop: "runes", name: "runes", pkg: "reflect", type: $funcType([], [sliceType$13], false)}, {prop: "send", name: "send", pkg: "reflect", type: $funcType([Value, $Bool], [$Bool], false)}, {prop: "setRunes", name: "setRunes", pkg: "reflect", type: $funcType([sliceType$13], [], false)}];
	flag.methods = [{prop: "kind", name: "kind", pkg: "reflect", type: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", type: $funcType([Kind], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", type: $funcType([], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", type: $funcType([], [], false)}];
	ptrType$28.methods = [{prop: "kind", name: "kind", pkg: "reflect", type: $funcType([], [Kind], false)}, {prop: "mustBe", name: "mustBe", pkg: "reflect", type: $funcType([Kind], [], false)}, {prop: "mustBeAssignable", name: "mustBeAssignable", pkg: "reflect", type: $funcType([], [], false)}, {prop: "mustBeExported", name: "mustBeExported", pkg: "reflect", type: $funcType([], [], false)}];
	ptrType$29.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	mapIter.init([{prop: "t", name: "t", pkg: "reflect", type: Type, tag: ""}, {prop: "m", name: "m", pkg: "reflect", type: js.Object, tag: ""}, {prop: "keys", name: "keys", pkg: "reflect", type: js.Object, tag: ""}, {prop: "i", name: "i", pkg: "reflect", type: $Int, tag: ""}]);
	Type.init([{prop: "Align", name: "Align", pkg: "", type: $funcType([], [$Int], false)}, {prop: "AssignableTo", name: "AssignableTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Bits", name: "Bits", pkg: "", type: $funcType([], [$Int], false)}, {prop: "ChanDir", name: "ChanDir", pkg: "", type: $funcType([], [ChanDir], false)}, {prop: "Comparable", name: "Comparable", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "ConvertibleTo", name: "ConvertibleTo", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "Elem", name: "Elem", pkg: "", type: $funcType([], [Type], false)}, {prop: "Field", name: "Field", pkg: "", type: $funcType([$Int], [StructField], false)}, {prop: "FieldAlign", name: "FieldAlign", pkg: "", type: $funcType([], [$Int], false)}, {prop: "FieldByIndex", name: "FieldByIndex", pkg: "", type: $funcType([sliceType$9], [StructField], false)}, {prop: "FieldByName", name: "FieldByName", pkg: "", type: $funcType([$String], [StructField, $Bool], false)}, {prop: "FieldByNameFunc", name: "FieldByNameFunc", pkg: "", type: $funcType([funcType$2], [StructField, $Bool], false)}, {prop: "Implements", name: "Implements", pkg: "", type: $funcType([Type], [$Bool], false)}, {prop: "In", name: "In", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "IsVariadic", name: "IsVariadic", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Key", name: "Key", pkg: "", type: $funcType([], [Type], false)}, {prop: "Kind", name: "Kind", pkg: "", type: $funcType([], [Kind], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Method", name: "Method", pkg: "", type: $funcType([$Int], [Method], false)}, {prop: "MethodByName", name: "MethodByName", pkg: "", type: $funcType([$String], [Method, $Bool], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "NumField", name: "NumField", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumIn", name: "NumIn", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumMethod", name: "NumMethod", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NumOut", name: "NumOut", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Out", name: "Out", pkg: "", type: $funcType([$Int], [Type], false)}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $funcType([], [$String], false)}, {prop: "Size", name: "Size", pkg: "", type: $funcType([], [$Uintptr], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "common", name: "common", pkg: "reflect", type: $funcType([], [ptrType$1], false)}, {prop: "uncommon", name: "uncommon", pkg: "reflect", type: $funcType([], [ptrType$5], false)}]);
	rtype.init([{prop: "size", name: "size", pkg: "reflect", type: $Uintptr, tag: ""}, {prop: "hash", name: "hash", pkg: "reflect", type: $Uint32, tag: ""}, {prop: "_$2", name: "_", pkg: "reflect", type: $Uint8, tag: ""}, {prop: "align", name: "align", pkg: "reflect", type: $Uint8, tag: ""}, {prop: "fieldAlign", name: "fieldAlign", pkg: "reflect", type: $Uint8, tag: ""}, {prop: "kind", name: "kind", pkg: "reflect", type: $Uint8, tag: ""}, {prop: "alg", name: "alg", pkg: "reflect", type: ptrType$3, tag: ""}, {prop: "gc", name: "gc", pkg: "reflect", type: arrayType$1, tag: ""}, {prop: "string", name: "string", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "uncommonType", name: "", pkg: "reflect", type: ptrType$5, tag: ""}, {prop: "ptrToThis", name: "ptrToThis", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "zero", name: "zero", pkg: "reflect", type: $UnsafePointer, tag: ""}]);
	typeAlg.init([{prop: "hash", name: "hash", pkg: "reflect", type: funcType$3, tag: ""}, {prop: "equal", name: "equal", pkg: "reflect", type: funcType$4, tag: ""}]);
	method.init([{prop: "name", name: "name", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "mtyp", name: "mtyp", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "ifn", name: "ifn", pkg: "reflect", type: $UnsafePointer, tag: ""}, {prop: "tfn", name: "tfn", pkg: "reflect", type: $UnsafePointer, tag: ""}]);
	uncommonType.init([{prop: "name", name: "name", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "methods", name: "methods", pkg: "reflect", type: sliceType$2, tag: ""}]);
	arrayType.init([{prop: "rtype", name: "", pkg: "reflect", type: rtype, tag: "reflect:\"array\""}, {prop: "elem", name: "elem", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "slice", name: "slice", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "len", name: "len", pkg: "reflect", type: $Uintptr, tag: ""}]);
	chanType.init([{prop: "rtype", name: "", pkg: "reflect", type: rtype, tag: "reflect:\"chan\""}, {prop: "elem", name: "elem", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "dir", name: "dir", pkg: "reflect", type: $Uintptr, tag: ""}]);
	funcType.init([{prop: "rtype", name: "", pkg: "reflect", type: rtype, tag: "reflect:\"func\""}, {prop: "dotdotdot", name: "dotdotdot", pkg: "reflect", type: $Bool, tag: ""}, {prop: "in$2", name: "in", pkg: "reflect", type: sliceType$3, tag: ""}, {prop: "out", name: "out", pkg: "reflect", type: sliceType$3, tag: ""}]);
	imethod.init([{prop: "name", name: "name", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", type: ptrType$1, tag: ""}]);
	interfaceType.init([{prop: "rtype", name: "", pkg: "reflect", type: rtype, tag: "reflect:\"interface\""}, {prop: "methods", name: "methods", pkg: "reflect", type: sliceType$4, tag: ""}]);
	mapType.init([{prop: "rtype", name: "", pkg: "reflect", type: rtype, tag: "reflect:\"map\""}, {prop: "key", name: "key", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "elem", name: "elem", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "bucket", name: "bucket", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "hmap", name: "hmap", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "keysize", name: "keysize", pkg: "reflect", type: $Uint8, tag: ""}, {prop: "indirectkey", name: "indirectkey", pkg: "reflect", type: $Uint8, tag: ""}, {prop: "valuesize", name: "valuesize", pkg: "reflect", type: $Uint8, tag: ""}, {prop: "indirectvalue", name: "indirectvalue", pkg: "reflect", type: $Uint8, tag: ""}, {prop: "bucketsize", name: "bucketsize", pkg: "reflect", type: $Uint16, tag: ""}]);
	ptrType.init([{prop: "rtype", name: "", pkg: "reflect", type: rtype, tag: "reflect:\"ptr\""}, {prop: "elem", name: "elem", pkg: "reflect", type: ptrType$1, tag: ""}]);
	sliceType.init([{prop: "rtype", name: "", pkg: "reflect", type: rtype, tag: "reflect:\"slice\""}, {prop: "elem", name: "elem", pkg: "reflect", type: ptrType$1, tag: ""}]);
	structField.init([{prop: "name", name: "name", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "pkgPath", name: "pkgPath", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "typ", name: "typ", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "tag", name: "tag", pkg: "reflect", type: ptrType$4, tag: ""}, {prop: "offset", name: "offset", pkg: "reflect", type: $Uintptr, tag: ""}]);
	structType.init([{prop: "rtype", name: "", pkg: "reflect", type: rtype, tag: "reflect:\"struct\""}, {prop: "fields", name: "fields", pkg: "reflect", type: sliceType$5, tag: ""}]);
	Method.init([{prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", type: Type, tag: ""}, {prop: "Func", name: "Func", pkg: "", type: Value, tag: ""}, {prop: "Index", name: "Index", pkg: "", type: $Int, tag: ""}]);
	StructField.init([{prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}, {prop: "PkgPath", name: "PkgPath", pkg: "", type: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", type: Type, tag: ""}, {prop: "Tag", name: "Tag", pkg: "", type: StructTag, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", type: $Uintptr, tag: ""}, {prop: "Index", name: "Index", pkg: "", type: sliceType$9, tag: ""}, {prop: "Anonymous", name: "Anonymous", pkg: "", type: $Bool, tag: ""}]);
	fieldScan.init([{prop: "typ", name: "typ", pkg: "reflect", type: ptrType$12, tag: ""}, {prop: "index", name: "index", pkg: "reflect", type: sliceType$9, tag: ""}]);
	Value.init([{prop: "typ", name: "typ", pkg: "reflect", type: ptrType$1, tag: ""}, {prop: "ptr", name: "ptr", pkg: "reflect", type: $UnsafePointer, tag: ""}, {prop: "flag", name: "", pkg: "reflect", type: flag, tag: ""}]);
	ValueError.init([{prop: "Method", name: "Method", pkg: "", type: $String, tag: ""}, {prop: "Kind", name: "Kind", pkg: "", type: Kind, tag: ""}]);
	nonEmptyInterface.init([{prop: "itab", name: "itab", pkg: "reflect", type: ptrType$7, tag: ""}, {prop: "word", name: "word", pkg: "reflect", type: $UnsafePointer, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_reflect = function() { while (true) { switch ($s) { case 0:
		$r = js.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = math.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		initialized = false;
		jsObject = $packages[$externalize("github.com/gopherjs/gopherjs/js", $String)].Object;
		kindNames = new sliceType$1(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ptrType$1);
		init();
		/* */ } return; } }; $init_reflect.$blocking = true; return $init_reflect;
	};
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, errors, io, math, os, reflect, strconv, sync, utf8, fmtFlags, fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, ScanState, Scanner, stringReader, scanError, ss, ssave, readRune, sliceType, sliceType$1, arrayType, sliceType$2, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, arrayType$1, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, arrayType$2, ptrType$25, funcType, ptrType$26, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, byteType, space, ssFree, complexError, boolError, init, doPrec, newPrinter, Fprintf, Sprintf, Errorf, Fprint, Sprint, Fprintln, Sprintln, getField, parsenum, intFromArg, parseArgNumber, Sscan, Fscan, isSpace, notSpace, newScanState, indexRune, errorHandler;
	errors = $packages["errors"];
	io = $packages["io"];
	math = $packages["math"];
	os = $packages["os"];
	reflect = $packages["reflect"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	utf8 = $packages["unicode/utf8"];
	fmtFlags = $pkg.fmtFlags = $newType(0, $kindStruct, "fmt.fmtFlags", "fmtFlags", "fmt", function(widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_, plusV_, sharpV_) {
		this.$val = this;
		this.widPresent = widPresent_ !== undefined ? widPresent_ : false;
		this.precPresent = precPresent_ !== undefined ? precPresent_ : false;
		this.minus = minus_ !== undefined ? minus_ : false;
		this.plus = plus_ !== undefined ? plus_ : false;
		this.sharp = sharp_ !== undefined ? sharp_ : false;
		this.space = space_ !== undefined ? space_ : false;
		this.unicode = unicode_ !== undefined ? unicode_ : false;
		this.uniQuote = uniQuote_ !== undefined ? uniQuote_ : false;
		this.zero = zero_ !== undefined ? zero_ : false;
		this.plusV = plusV_ !== undefined ? plusV_ : false;
		this.sharpV = sharpV_ !== undefined ? sharpV_ : false;
	});
	fmt = $pkg.fmt = $newType(0, $kindStruct, "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, fmtFlags_) {
		this.$val = this;
		this.intbuf = intbuf_ !== undefined ? intbuf_ : arrayType$2.zero();
		this.buf = buf_ !== undefined ? buf_ : ptrType$1.nil;
		this.wid = wid_ !== undefined ? wid_ : 0;
		this.prec = prec_ !== undefined ? prec_ : 0;
		this.fmtFlags = fmtFlags_ !== undefined ? fmtFlags_ : new fmtFlags.ptr();
	});
	State = $pkg.State = $newType(8, $kindInterface, "fmt.State", "State", "fmt", null);
	Formatter = $pkg.Formatter = $newType(8, $kindInterface, "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = $pkg.Stringer = $newType(8, $kindInterface, "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = $pkg.GoStringer = $newType(8, $kindInterface, "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = $pkg.buffer = $newType(12, $kindSlice, "fmt.buffer", "buffer", "fmt", null);
	pp = $pkg.pp = $newType(0, $kindStruct, "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.$val = this;
		this.n = n_ !== undefined ? n_ : 0;
		this.panicking = panicking_ !== undefined ? panicking_ : false;
		this.erroring = erroring_ !== undefined ? erroring_ : false;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.arg = arg_ !== undefined ? arg_ : $ifaceNil;
		this.value = value_ !== undefined ? value_ : new reflect.Value.ptr();
		this.reordered = reordered_ !== undefined ? reordered_ : false;
		this.goodArgNum = goodArgNum_ !== undefined ? goodArgNum_ : false;
		this.runeBuf = runeBuf_ !== undefined ? runeBuf_ : arrayType$1.zero();
		this.fmt = fmt_ !== undefined ? fmt_ : new fmt.ptr();
	});
	runeUnreader = $pkg.runeUnreader = $newType(8, $kindInterface, "fmt.runeUnreader", "runeUnreader", "fmt", null);
	ScanState = $pkg.ScanState = $newType(8, $kindInterface, "fmt.ScanState", "ScanState", "fmt", null);
	Scanner = $pkg.Scanner = $newType(8, $kindInterface, "fmt.Scanner", "Scanner", "fmt", null);
	stringReader = $pkg.stringReader = $newType(8, $kindString, "fmt.stringReader", "stringReader", "fmt", null);
	scanError = $pkg.scanError = $newType(0, $kindStruct, "fmt.scanError", "scanError", "fmt", function(err_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
	});
	ss = $pkg.ss = $newType(0, $kindStruct, "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.$val = this;
		this.rr = rr_ !== undefined ? rr_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.peekRune = peekRune_ !== undefined ? peekRune_ : 0;
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
		this.count = count_ !== undefined ? count_ : 0;
		this.atEOF = atEOF_ !== undefined ? atEOF_ : false;
		this.ssave = ssave_ !== undefined ? ssave_ : new ssave.ptr();
	});
	ssave = $pkg.ssave = $newType(0, $kindStruct, "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		this.validSave = validSave_ !== undefined ? validSave_ : false;
		this.nlIsEnd = nlIsEnd_ !== undefined ? nlIsEnd_ : false;
		this.nlIsSpace = nlIsSpace_ !== undefined ? nlIsSpace_ : false;
		this.argLimit = argLimit_ !== undefined ? argLimit_ : 0;
		this.limit = limit_ !== undefined ? limit_ : 0;
		this.maxWid = maxWid_ !== undefined ? maxWid_ : 0;
	});
	readRune = $pkg.readRune = $newType(0, $kindStruct, "fmt.readRune", "readRune", "fmt", function(reader_, buf_, pending_, pendBuf_) {
		this.$val = this;
		this.reader = reader_ !== undefined ? reader_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : arrayType$1.zero();
		this.pending = pending_ !== undefined ? pending_ : 0;
		this.pendBuf = pendBuf_ !== undefined ? pendBuf_ : arrayType$1.zero();
	});
		sliceType = $sliceType($Uint8);
		sliceType$1 = $sliceType($emptyInterface);
		arrayType = $arrayType($Uint16, 2);
		sliceType$2 = $sliceType(arrayType);
		ptrType = $ptrType(pp);
		ptrType$1 = $ptrType(buffer);
		ptrType$2 = $ptrType(reflect.rtype);
		ptrType$3 = $ptrType(stringReader);
		ptrType$4 = $ptrType($String);
		ptrType$5 = $ptrType(ss);
		arrayType$1 = $arrayType($Uint8, 4);
		ptrType$6 = $ptrType(strconv.NumError);
		ptrType$7 = $ptrType($Bool);
		ptrType$8 = $ptrType($Complex64);
		ptrType$9 = $ptrType($Complex128);
		ptrType$10 = $ptrType($Int);
		ptrType$11 = $ptrType($Int8);
		ptrType$12 = $ptrType($Int16);
		ptrType$13 = $ptrType($Int32);
		ptrType$14 = $ptrType($Int64);
		ptrType$15 = $ptrType($Uint);
		ptrType$16 = $ptrType($Uint8);
		ptrType$17 = $ptrType($Uint16);
		ptrType$18 = $ptrType($Uint32);
		ptrType$19 = $ptrType($Uint64);
		ptrType$20 = $ptrType($Uintptr);
		ptrType$21 = $ptrType($Float32);
		ptrType$22 = $ptrType($Float64);
		ptrType$23 = $ptrType(sliceType);
		ptrType$24 = $ptrType($error);
		arrayType$2 = $arrayType($Uint8, 65);
		ptrType$25 = $ptrType(fmt);
		funcType = $funcType([$Int32], [$Bool], false);
		ptrType$26 = $ptrType(readRune);
	init = function() {
		var i;
		i = 0;
		while (i < 65) {
			(i < 0 || i >= padZeroBytes.$length) ? $throwRuntimeError("index out of range") : padZeroBytes.$array[padZeroBytes.$offset + i] = 48;
			(i < 0 || i >= padSpaceBytes.$length) ? $throwRuntimeError("index out of range") : padSpaceBytes.$array[padSpaceBytes.$offset + i] = 32;
			i = i + (1) >> 0;
		}
	};
	fmt.ptr.prototype.clearflags = function() {
		var f;
		f = this;
		$copy(f.fmtFlags, new fmtFlags.ptr(false, false, false, false, false, false, false, false, false, false, false), fmtFlags);
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.ptr.prototype.init = function(buf) {
		var f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.ptr.prototype.computePadding = function(width) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, f, left, leftWidth = 0, padding = sliceType.nil, rightWidth = 0, w;
		f = this;
		left = !f.fmtFlags.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.fmtFlags.zero) {
				_tmp = padZeroBytes; _tmp$1 = w; _tmp$2 = 0; padding = _tmp; leftWidth = _tmp$1; rightWidth = _tmp$2;
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tmp$3 = padSpaceBytes; _tmp$4 = w; _tmp$5 = 0; padding = _tmp$3; leftWidth = _tmp$4; rightWidth = _tmp$5;
				return [padding, leftWidth, rightWidth];
			} else {
				_tmp$6 = padSpaceBytes; _tmp$7 = 0; _tmp$8 = w; padding = _tmp$6; leftWidth = _tmp$7; rightWidth = _tmp$8;
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };
	fmt.ptr.prototype.writePadding = function(n, padding) {
		var f, m;
		f = this;
		while (n > 0) {
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write($subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };
	fmt.ptr.prototype.pad = function(b) {
		var _tuple, f, left, padding, right;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCount(b)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.ptr.prototype.padString = function(s) {
		var _tuple, f, left, padding, right;
		f = this;
		if (!f.fmtFlags.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.ptr.prototype.fmt_boolean = function(v) {
		var f;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.ptr.prototype.integer = function(a, base, signedness, digits) {
		var _ref, _ref$1, buf, f, i, j, negative, next, prec, runeWidth, ua, width, width$1, x, x$1, x$2, x$3;
		f = this;
		if (f.fmtFlags.precPresent && (f.prec === 0) && (a.$high === 0 && a.$low === 0)) {
			return;
		}
		buf = $subslice(new sliceType(f.intbuf), 0);
		if (f.fmtFlags.widPresent) {
			width = f.wid;
			if ((base.$high === 0 && base.$low === 16) && f.fmtFlags.sharp) {
				width = width + (2) >> 0;
			}
			if (width > 65) {
				buf = sliceType.make(width);
			}
		}
		negative = signedness === true && (a.$high < 0 || (a.$high === 0 && a.$low < 0));
		if (negative) {
			a = new $Int64(-a.$high, -a.$low);
		}
		prec = 0;
		if (f.fmtFlags.precPresent) {
			prec = f.prec;
			f.fmtFlags.zero = false;
		} else if (f.fmtFlags.zero && f.fmtFlags.widPresent && !f.fmtFlags.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.fmtFlags.plus || f.fmtFlags.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		ua = new $Uint64(a.$high, a.$low);
		_ref = base;
		if ((_ref.$high === 0 && _ref.$low === 10)) {
			while ((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 10))) {
				i = i - (1) >> 0;
				next = $div64(ua, new $Uint64(0, 10), false);
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x = new $Uint64(0 + ua.$high, 48 + ua.$low), x$1 = $mul64(next, new $Uint64(0, 10)), new $Uint64(x.$high - x$1.$high, x.$low - x$1.$low)).$low << 24 >>> 24);
				ua = next;
			}
		} else if ((_ref.$high === 0 && _ref.$low === 16)) {
			while ((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 16))) {
				i = i - (1) >> 0;
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(new $Uint64(ua.$high & 0, (ua.$low & 15) >>> 0)));
				ua = $shiftRightUint64(ua, (4));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 8)) {
			while ((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 8))) {
				i = i - (1) >> 0;
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$2 = new $Uint64(ua.$high & 0, (ua.$low & 7) >>> 0), new $Uint64(0 + x$2.$high, 48 + x$2.$low)).$low << 24 >>> 24);
				ua = $shiftRightUint64(ua, (3));
			}
		} else if ((_ref.$high === 0 && _ref.$low === 2)) {
			while ((ua.$high > 0 || (ua.$high === 0 && ua.$low >= 2))) {
				i = i - (1) >> 0;
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = ((x$3 = new $Uint64(ua.$high & 0, (ua.$low & 1) >>> 0), new $Uint64(0 + x$3.$high, 48 + x$3.$low)).$low << 24 >>> 24);
				ua = $shiftRightUint64(ua, (1));
			}
		} else {
			$panic(new $String("fmt: unknown base; can't happen"));
		}
		i = i - (1) >> 0;
		(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(ua));
		while (i > 0 && prec > (buf.$length - i >> 0)) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48;
		}
		if (f.fmtFlags.sharp) {
			_ref$1 = base;
			if ((_ref$1.$high === 0 && _ref$1.$low === 8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48;
				}
			} else if ((_ref$1.$high === 0 && _ref$1.$low === 16)) {
				i = i - (1) >> 0;
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24;
				i = i - (1) >> 0;
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48;
			}
		}
		if (f.fmtFlags.unicode) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43;
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85;
		}
		if (negative) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45;
		} else if (f.fmtFlags.plus) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43;
		} else if (f.fmtFlags.space) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32;
		}
		if (f.fmtFlags.unicode && f.fmtFlags.uniQuote && (a.$high > 0 || (a.$high === 0 && a.$low >= 0)) && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && strconv.IsPrint(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			width$1 = (2 + runeWidth >> 0) + 1 >> 0;
			$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));
			i = i - (width$1) >> 0;
			j = buf.$length - width$1 >> 0;
			(j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 32;
			j = j + (1) >> 0;
			(j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39;
			j = j + (1) >> 0;
			utf8.EncodeRune($subslice(buf, j), ((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			(j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39;
		}
		f.pad($subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };
	fmt.ptr.prototype.truncate = function(s) {
		var _i, _ref, _rune, f, i, n;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - (1) >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.ptr.prototype.fmt_s = function(s) {
		var f;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.ptr.prototype.fmt_sbx = function(s, b, digits) {
		var buf, c, f, i, n, x;
		f = this;
		n = b.$length;
		if (b === sliceType.nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = sliceType.nil;
		i = 0;
		while (i < n) {
			if (i > 0 && f.fmtFlags.space) {
				buf = $append(buf, 32);
			}
			if (f.fmtFlags.sharp && (f.fmtFlags.space || (i === 0))) {
				buf = $append(buf, 48, x);
			}
			c = 0;
			if (b === sliceType.nil) {
				c = s.charCodeAt(i);
			} else {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.ptr.prototype.fmt_sx = function(s, digits) {
		var f;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < s.length) {
			s = s.substring(0, f.prec);
		}
		f.fmt_sbx(s, sliceType.nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.ptr.prototype.fmt_bx = function(b, digits) {
		var f;
		f = this;
		if (f.fmtFlags.precPresent && f.prec < b.$length) {
			b = $subslice(b, 0, f.prec);
		}
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.ptr.prototype.fmt_q = function(s) {
		var f, quoted;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.fmtFlags.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.fmtFlags.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.ptr.prototype.fmt_qc = function(c) {
		var f, quoted;
		f = this;
		quoted = sliceType.nil;
		if (f.fmtFlags.plus) {
			quoted = strconv.AppendQuoteRuneToASCII($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune($subslice(new sliceType(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	doPrec = function(f, def) {
		if (f.fmtFlags.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var $deferred = [], $err = null, f, num;
		/* */ try { $deferFrames.push($deferred);
		f = this;
		num = strconv.AppendFloat($subslice(new sliceType(f.intbuf), 0, 1), v, verb, prec, n);
		if ((((1 < 0 || 1 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || (((1 < 0 || 1 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43;
		}
		if (math.IsInf(v, 0)) {
			if (f.fmtFlags.zero) {
				$deferred.push([(function() {
					f.fmtFlags.zero = true;
				}), []]);
				f.fmtFlags.zero = false;
			}
		}
		if (f.fmtFlags.zero && f.fmtFlags.widPresent && f.wid > num.$length) {
			if (f.fmtFlags.space && v >= 0) {
				f.buf.WriteByte(32);
				f.wid = f.wid - (1) >> 0;
			} else if (f.fmtFlags.plus || v < 0) {
				f.buf.WriteByte(((0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.wid = f.wid - (1) >> 0;
			}
			f.pad($subslice(num, 1));
			return;
		}
		if (f.fmtFlags.space && (((0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43)) {
			(0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32;
			f.pad(num);
			return;
		}
		if (f.fmtFlags.plus || (((0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 45) || math.IsInf(v, 0)) {
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };
	fmt.ptr.prototype.fmt_e64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };
	fmt.ptr.prototype.fmt_E64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };
	fmt.ptr.prototype.fmt_f64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };
	fmt.ptr.prototype.fmt_g64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };
	fmt.ptr.prototype.fmt_G64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };
	fmt.ptr.prototype.fmt_fb64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };
	fmt.ptr.prototype.fmt_e32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };
	fmt.ptr.prototype.fmt_E32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };
	fmt.ptr.prototype.fmt_f32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };
	fmt.ptr.prototype.fmt_g32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };
	fmt.ptr.prototype.fmt_G32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };
	fmt.ptr.prototype.fmt_fb32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };
	fmt.ptr.prototype.fmt_c64 = function(v, verb) {
		var f;
		f = this;
		f.fmt_complex($coerceFloat32(v.$real), $coerceFloat32(v.$imag), 32, verb);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };
	fmt.ptr.prototype.fmt_c128 = function(v, verb) {
		var f;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 64, verb);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };
	fmt.ptr.prototype.fmt_complex = function(r, j, size, verb) {
		var _ref, f, i, oldPlus, oldSpace, oldWid;
		f = this;
		f.buf.WriteByte(40);
		oldPlus = f.fmtFlags.plus;
		oldSpace = f.fmtFlags.space;
		oldWid = f.wid;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.formatFloat(r, 98, 0, size);
			} else if (_ref === 101) {
				f.formatFloat(r, 101, doPrec(f, 6), size);
			} else if (_ref === 69) {
				f.formatFloat(r, 69, doPrec(f, 6), size);
			} else if (_ref === 102 || _ref === 70) {
				f.formatFloat(r, 102, doPrec(f, 6), size);
			} else if (_ref === 103) {
				f.formatFloat(r, 103, doPrec(f, -1), size);
			} else if (_ref === 71) {
				f.formatFloat(r, 71, doPrec(f, -1), size);
			}
			if (!((i === 0))) {
				break;
			}
			f.fmtFlags.plus = true;
			f.fmtFlags.space = false;
			f.wid = oldWid;
			r = j;
			i = i + (1) >> 0;
		}
		f.fmtFlags.space = oldSpace;
		f.fmtFlags.plus = oldPlus;
		f.wid = oldWid;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };
	$ptrType(buffer).prototype.Write = function(p) {
		var _tmp, _tmp$1, b, err = $ifaceNil, n = 0;
		b = this;
		b.$set($appendSlice(b.$get(), p));
		_tmp = p.$length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var _tmp, _tmp$1, b, err = $ifaceNil, n = 0;
		b = this;
		b.$set($appendSlice(b.$get(), new buffer($stringToBytes(s))));
		_tmp = s.length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var b;
		b = this;
		b.$set($append(b.$get(), c));
		return $ifaceNil;
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var b, bp, n, w, x;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return $ifaceNil;
		}
		b = bp.$get();
		n = b.$length;
		while ((n + 4 >> 0) > b.$capacity) {
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
		return $ifaceNil;
	};
	newPrinter = function() {
		var p;
		p = $assertType(ppFree.Get(), ptrType);
		p.panicking = false;
		p.erroring = false;
		p.fmt.init(new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p));
		return p;
	};
	pp.ptr.prototype.free = function() {
		var p;
		p = this;
		if (p.buf.$capacity > 1024) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		p.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, ok = false, p, wid = 0;
		p = this;
		_tmp = p.fmt.wid; _tmp$1 = p.fmt.fmtFlags.widPresent; wid = _tmp; ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.ptr.prototype.Precision = function() {
		var _tmp, _tmp$1, ok = false, p, prec = 0;
		p = this;
		_tmp = p.fmt.prec; _tmp$1 = p.fmt.fmtFlags.precPresent; prec = _tmp; ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.ptr.prototype.Flag = function(b) {
		var _ref, p;
		p = this;
		_ref = b;
		if (_ref === 45) {
			return p.fmt.fmtFlags.minus;
		} else if (_ref === 43) {
			return p.fmt.fmtFlags.plus;
		} else if (_ref === 35) {
			return p.fmt.fmtFlags.sharp;
		} else if (_ref === 32) {
			return p.fmt.fmtFlags.space;
		} else if (_ref === 48) {
			return p.fmt.fmtFlags.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.ptr.prototype.add = function(c) {
		var p;
		p = this;
		new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.$val.add(c); };
	pp.ptr.prototype.Write = function(b) {
		var _tuple, err = $ifaceNil, p, ret = 0;
		p = this;
		_tuple = new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(b); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = $pkg.Fprintf = function(w, format, a) {
		var _tuple, err = $ifaceNil, n = 0, p, x;
		p = newPrinter();
		p.doPrintf(format, a);
		_tuple = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Sprintf = $pkg.Sprintf = function(format, a) {
		var p, s;
		p = newPrinter();
		p.doPrintf(format, a);
		s = $bytesToString(p.buf);
		p.free();
		return s;
	};
	Errorf = $pkg.Errorf = function(format, a) {
		return errors.New(Sprintf(format, a));
	};
	Fprint = $pkg.Fprint = function(w, a) {
		var _tuple, err = $ifaceNil, n = 0, p, x;
		p = newPrinter();
		p.doPrint(a, false, false);
		_tuple = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Sprint = $pkg.Sprint = function(a) {
		var p, s;
		p = newPrinter();
		p.doPrint(a, false, false);
		s = $bytesToString(p.buf);
		p.free();
		return s;
	};
	Fprintln = $pkg.Fprintln = function(w, a) {
		var _tuple, err = $ifaceNil, n = 0, p, x;
		p = newPrinter();
		p.doPrint(a, true, true);
		_tuple = w.Write((x = p.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Sprintln = $pkg.Sprintln = function(a) {
		var p, s;
		p = newPrinter();
		p.doPrint(a, true, true);
		s = $bytesToString(p.buf);
		p.free();
		return s;
	};
	getField = function(v, i) {
		var val;
		v = v;
		val = v.Field(i);
		if ((val.Kind() === 20) && !val.IsNil()) {
			val = val.Elem();
		}
		return val;
	};
	parsenum = function(s, start, end) {
		var _tmp, _tmp$1, _tmp$2, isnum = false, newi = 0, num = 0;
		if (start >= end) {
			_tmp = 0; _tmp$1 = false; _tmp$2 = end; num = _tmp; isnum = _tmp$1; newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57) {
			num = (num * 10 >> 0) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.ptr.prototype.unknownType = function(v) {
		var p;
		p = this;
		v = v;
		if (!v.IsValid()) {
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
			return;
		}
		new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(63);
		new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(v.Type().String());
		new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(63);
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.ptr.prototype.badVerb = function(verb) {
		var p;
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
		if (!($interfaceIsEqual(p.arg, $ifaceNil))) {
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(reflect.TypeOf(p.arg).String());
			p.add(61);
			p.printArg(p.arg, 118, 0);
		} else if (p.value.IsValid()) {
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(p.value.Type().String());
			p.add(61);
			p.printValue(p.value, 118, 0);
		} else {
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
		}
		p.add(41);
		p.erroring = false;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.ptr.prototype.fmtBool = function(v, verb) {
		var _ref, p;
		p = this;
		_ref = verb;
		if (_ref === 116 || _ref === 118) {
			p.fmt.fmt_boolean(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.ptr.prototype.fmtC = function(c) {
		var p, r, w, x;
		p = this;
		r = ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0);
		if (!((x = new $Int64(0, r), (x.$high === c.$high && x.$low === c.$low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune($subslice(new sliceType(p.runeBuf), 0, 4), r);
		p.fmt.pad($subslice(new sliceType(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	pp.ptr.prototype.fmtInt64 = function(v, verb) {
		var _ref, p;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(v, new $Uint64(0, 2), true, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(v);
		} else if (_ref === 100 || _ref === 118) {
			p.fmt.integer(v, new $Uint64(0, 10), true, "0123456789abcdef");
		} else if (_ref === 111) {
			p.fmt.integer(v, new $Uint64(0, 8), true, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) {
				p.fmt.fmt_qc(v);
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789abcdef");
		} else if (_ref === 85) {
			p.fmtUnicode(v);
		} else if (_ref === 88) {
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789ABCDEF");
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };
	pp.ptr.prototype.fmt0x64 = function(v, leading0x) {
		var p, sharp;
		p = this;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = leading0x;
		p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.ptr.prototype.fmtUnicode = function(v) {
		var p, prec, precPresent, sharp;
		p = this;
		precPresent = p.fmt.fmtFlags.precPresent;
		sharp = p.fmt.fmtFlags.sharp;
		p.fmt.fmtFlags.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.fmtFlags.precPresent = true;
		}
		p.fmt.fmtFlags.unicode = true;
		p.fmt.fmtFlags.uniQuote = sharp;
		p.fmt.integer(v, new $Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.fmtFlags.unicode = false;
		p.fmt.fmtFlags.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.fmtFlags.precPresent = precPresent;
		p.fmt.fmtFlags.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };
	pp.ptr.prototype.fmtUint64 = function(v, verb) {
		var _ref, p;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 2), false, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(new $Int64(v.$high, v.$low));
		} else if (_ref === 100) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
		} else if (_ref === 118) {
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt0x64(v, true);
			} else {
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
			}
		} else if (_ref === 111) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 8), false, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) {
				p.fmt.fmt_qc(new $Int64(v.$high, v.$low));
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789ABCDEF");
		} else if (_ref === 85) {
			p.fmtUnicode(new $Int64(v.$high, v.$low));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtUint64 = function(v, verb) { return this.$val.fmtUint64(v, verb); };
	pp.ptr.prototype.fmtFloat32 = function(v, verb) {
		var _ref, p;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb32(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e32(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E32(v);
		} else if (_ref === 102 || _ref === 70) {
			p.fmt.fmt_f32(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g32(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G32(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };
	pp.ptr.prototype.fmtFloat64 = function(v, verb) {
		var _ref, p;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb64(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e64(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E64(v);
		} else if (_ref === 102 || _ref === 70) {
			p.fmt.fmt_f64(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g64(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G64(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };
	pp.ptr.prototype.fmtComplex64 = function(v, verb) {
		var _ref, p;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c64(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c64(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };
	pp.ptr.prototype.fmtComplex128 = function(v, verb) {
		var _ref, p;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c128(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c128(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };
	pp.ptr.prototype.fmtString = function(v, verb) {
		var _ref, p;
		p = this;
		_ref = verb;
		if (_ref === 118) {
			if (p.fmt.fmtFlags.sharpV) {
				p.fmt.fmt_q(v);
			} else {
				p.fmt.fmt_s(v);
			}
		} else if (_ref === 115) {
			p.fmt.fmt_s(v);
		} else if (_ref === 120) {
			p.fmt.fmt_sx(v, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.fmt_sx(v, "0123456789ABCDEF");
		} else if (_ref === 113) {
			p.fmt.fmt_q(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtString = function(v, verb) { return this.$val.fmtString(v, verb); };
	pp.ptr.prototype.fmtBytes = function(v, verb, typ, depth) {
		var _i, _ref, _ref$1, c, i, p;
		p = this;
		if ((verb === 118) || (verb === 100)) {
			if (p.fmt.fmtFlags.sharpV) {
				if (v === sliceType.nil) {
					if ($interfaceIsEqual(typ, $ifaceNil)) {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString("[]byte(nil)");
					} else {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(typ.String());
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilParenBytes);
					}
					return;
				}
				if ($interfaceIsEqual(typ, $ifaceNil)) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(bytesBytes);
				} else {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(typ.String());
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(123);
				}
			} else {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(91);
			}
			_ref = v;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				p.printArg(new $Uint8(c), 118, depth + 1 >> 0);
				_i++;
			}
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
			} else {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(93);
			}
			return;
		}
		_ref$1 = verb;
		if (_ref$1 === 115) {
			p.fmt.fmt_s($bytesToString(v));
		} else if (_ref$1 === 120) {
			p.fmt.fmt_bx(v, "0123456789abcdef");
		} else if (_ref$1 === 88) {
			p.fmt.fmt_bx(v, "0123456789ABCDEF");
		} else if (_ref$1 === 113) {
			p.fmt.fmt_q($bytesToString(v));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBytes = function(v, verb, typ, depth) { return this.$val.fmtBytes(v, verb, typ, depth); };
	pp.ptr.prototype.fmtPointer = function(value, verb) {
		var _ref, _ref$1, p, u, use0x64;
		p = this;
		value = value;
		use0x64 = true;
		_ref = verb;
		if (_ref === 112 || _ref === 118) {
		} else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) {
			use0x64 = false;
		} else {
			p.badVerb(verb);
			return;
		}
		u = 0;
		_ref$1 = value.Kind();
		if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) {
			u = value.Pointer();
		} else {
			p.badVerb(verb);
			return;
		}
		if (p.fmt.fmtFlags.sharpV) {
			p.add(40);
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(value.Type().String());
			p.add(41);
			p.add(40);
			if (u === 0) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilBytes);
			} else {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
		} else if ((verb === 118) && (u === 0)) {
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
		} else {
			if (use0x64) {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.fmtFlags.sharp);
			} else {
				p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb);
			}
		}
	};
	pp.prototype.fmtPointer = function(value, verb) { return this.$val.fmtPointer(value, verb); };
	pp.ptr.prototype.catchPanic = function(arg, verb) {
		var err, p, v;
		p = this;
		err = $recover();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			v = reflect.ValueOf(arg);
			if ((v.Kind() === 22) && v.IsNil()) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
				return;
			}
			if (p.panicking) {
				$panic(err);
			}
			p.fmt.clearflags();
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(percentBangBytes);
			p.add(verb);
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(panicBytes);
			p.panicking = true;
			p.printArg(err, 118, 0);
			p.panicking = false;
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(41);
		}
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.ptr.prototype.clearSpecialFlags = function() {
		var p, plusV = false, sharpV = false;
		p = this;
		plusV = p.fmt.fmtFlags.plusV;
		if (plusV) {
			p.fmt.fmtFlags.plus = true;
			p.fmt.fmtFlags.plusV = false;
		}
		sharpV = p.fmt.fmtFlags.sharpV;
		if (sharpV) {
			p.fmt.fmtFlags.sharp = true;
			p.fmt.fmtFlags.sharpV = false;
		}
		return [plusV, sharpV];
	};
	pp.prototype.clearSpecialFlags = function() { return this.$val.clearSpecialFlags(); };
	pp.ptr.prototype.restoreSpecialFlags = function(plusV, sharpV) {
		var p;
		p = this;
		if (plusV) {
			p.fmt.fmtFlags.plus = false;
			p.fmt.fmtFlags.plusV = true;
		}
		if (sharpV) {
			p.fmt.fmtFlags.sharp = false;
			p.fmt.fmtFlags.sharpV = true;
		}
	};
	pp.prototype.restoreSpecialFlags = function(plusV, sharpV) { return this.$val.restoreSpecialFlags(plusV, sharpV); };
	pp.ptr.prototype.handleMethods = function(verb, depth) {
		var $deferred = [], $err = null, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, formatter, handled = false, ok, ok$1, p, stringer, v;
		/* */ try { $deferFrames.push($deferred);
		p = this;
		if (p.erroring) {
			return handled;
		}
		_tuple = $assertType(p.arg, Formatter, true); formatter = _tuple[0]; ok = _tuple[1];
		if (ok) {
			handled = true;
			_tuple$1 = p.clearSpecialFlags();
			$deferred.push([$methodVal(p, "restoreSpecialFlags"), [_tuple$1[0], _tuple$1[1]]]);
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			formatter.Format(p, verb);
			return handled;
		}
		if (p.fmt.fmtFlags.sharpV) {
			_tuple$2 = $assertType(p.arg, GoStringer, true); stringer = _tuple$2[0]; ok$1 = _tuple$2[1];
			if (ok$1) {
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				p.fmt.fmt_s(stringer.GoString());
				return handled;
			}
		} else {
			_ref = verb;
			if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) {
				_ref$1 = p.arg;
				if ($assertType(_ref$1, $error, true)[1]) {
					v = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					p.printArg(new $String(v.Error()), verb, depth);
					return handled;
				} else if ($assertType(_ref$1, Stringer, true)[1]) {
					v = _ref$1;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					p.printArg(new $String(v.String()), verb, depth);
					return handled;
				}
			}
		}
		handled = false;
		return handled;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return handled; }
	};
	pp.prototype.handleMethods = function(verb, depth) { return this.$val.handleMethods(verb, depth); };
	pp.ptr.prototype.printArg = function(arg, verb, depth) {
		var _ref, _ref$1, f, handled, p, wasString = false;
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.ptr(ptrType$2.nil, 0, 0);
		if ($interfaceIsEqual(arg, $ifaceNil)) {
			if ((verb === 84) || (verb === 118)) {
				p.fmt.pad(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new $String(reflect.TypeOf(arg).String()), 115, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer(reflect.ValueOf(arg), verb);
			wasString = false;
			return wasString;
		}
		_ref$1 = arg;
		if ($assertType(_ref$1, $Bool, true)[1]) {
			f = _ref$1.$val;
			p.fmtBool(f, verb);
		} else if ($assertType(_ref$1, $Float32, true)[1]) {
			f = _ref$1.$val;
			p.fmtFloat32(f, verb);
		} else if ($assertType(_ref$1, $Float64, true)[1]) {
			f = _ref$1.$val;
			p.fmtFloat64(f, verb);
		} else if ($assertType(_ref$1, $Complex64, true)[1]) {
			f = _ref$1.$val;
			p.fmtComplex64(f, verb);
		} else if ($assertType(_ref$1, $Complex128, true)[1]) {
			f = _ref$1.$val;
			p.fmtComplex128(f, verb);
		} else if ($assertType(_ref$1, $Int, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int8, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int16, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int32, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int64, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(f, verb);
		} else if ($assertType(_ref$1, $Uint, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb);
		} else if ($assertType(_ref$1, $Uint8, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb);
		} else if ($assertType(_ref$1, $Uint16, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb);
		} else if ($assertType(_ref$1, $Uint32, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb);
		} else if ($assertType(_ref$1, $Uint64, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(f, verb);
		} else if ($assertType(_ref$1, $Uintptr, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f.constructor === Number ? f : 1), verb);
		} else if ($assertType(_ref$1, $String, true)[1]) {
			f = _ref$1.$val;
			p.fmtString(f, verb);
			wasString = (verb === 115) || (verb === 118);
		} else if ($assertType(_ref$1, sliceType, true)[1]) {
			f = _ref$1.$val;
			p.fmtBytes(f, verb, $ifaceNil, depth);
			wasString = verb === 115;
		} else {
			f = _ref$1;
			handled = p.handleMethods(verb, depth);
			if (handled) {
				wasString = false;
				return wasString;
			}
			wasString = p.printReflectValue(reflect.ValueOf(arg), verb, depth);
			return wasString;
		}
		p.arg = $ifaceNil;
		return wasString;
	};
	pp.prototype.printArg = function(arg, verb, depth) { return this.$val.printArg(arg, verb, depth); };
	pp.ptr.prototype.printValue = function(value, verb, depth) {
		var _ref, handled, p, wasString = false;
		p = this;
		value = value;
		if (!value.IsValid()) {
			if ((verb === 84) || (verb === 118)) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new $String(value.Type().String()), 115, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer(value, verb);
			wasString = false;
			return wasString;
		}
		p.arg = $ifaceNil;
		if (value.CanInterface()) {
			p.arg = value.Interface();
		}
		handled = p.handleMethods(verb, depth);
		if (handled) {
			wasString = false;
			return wasString;
		}
		wasString = p.printReflectValue(value, verb, depth);
		return wasString;
	};
	pp.prototype.printValue = function(value, verb, depth) { return this.$val.printValue(value, verb, depth); };
	pp.ptr.prototype.printReflectValue = function(value, verb, depth) {
		var _i, _i$1, _ref, _ref$1, _ref$2, _ref$3, a, bytes, f, f$1, i, i$1, i$2, i$3, key, keys, oldValue, p, t, typ, v, v$1, value$1, wasString = false, x;
		p = this;
		value = value;
		oldValue = p.value;
		p.value = value;
		f = value;
		_ref = f.Kind();
		BigSwitch:
		switch (0) { default: if (_ref === 1) {
			p.fmtBool(f.Bool(), verb);
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			p.fmtInt64(f.Int(), verb);
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			p.fmtUint64(f.Uint(), verb);
		} else if (_ref === 13 || _ref === 14) {
			if (f.Type().Size() === 4) {
				p.fmtFloat32(f.Float(), verb);
			} else {
				p.fmtFloat64(f.Float(), verb);
			}
		} else if (_ref === 15 || _ref === 16) {
			if (f.Type().Size() === 8) {
				p.fmtComplex64((x = f.Complex(), new $Complex64(x.$real, x.$imag)), verb);
			} else {
				p.fmtComplex128(f.Complex(), verb);
			}
		} else if (_ref === 24) {
			p.fmtString(f.String(), verb);
		} else if (_ref === 21) {
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(f.Type().String());
				if (f.IsNil()) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString("(nil)");
					break;
				}
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(123);
			} else {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(mapBytes);
			}
			keys = f.MapKeys();
			_ref$1 = keys;
			_i = 0;
			while (_i < _ref$1.$length) {
				i = _i;
				key = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (i > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				p.printValue(key, verb, depth + 1 >> 0);
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(58);
				p.printValue(f.MapIndex(key), verb, depth + 1 >> 0);
				_i++;
			}
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
			} else {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(93);
			}
		} else if (_ref === 25) {
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(value.Type().String());
			}
			p.add(123);
			v = f;
			t = v.Type();
			i$1 = 0;
			while (i$1 < v.NumField()) {
				if (i$1 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				if (p.fmt.fmtFlags.plusV || p.fmt.fmtFlags.sharpV) {
					f$1 = $clone(t.Field(i$1), reflect.StructField);
					if (!(f$1.Name === "")) {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(f$1.Name);
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(58);
					}
				}
				p.printValue(getField(v, i$1), verb, depth + 1 >> 0);
				i$1 = i$1 + (1) >> 0;
			}
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
		} else if (_ref === 20) {
			value$1 = f.Elem();
			if (!value$1.IsValid()) {
				if (p.fmt.fmtFlags.sharpV) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(f.Type().String());
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilParenBytes);
				} else {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
				}
			} else {
				wasString = p.printValue(value$1, verb, depth + 1 >> 0);
			}
		} else if (_ref === 17 || _ref === 23) {
			typ = f.Type();
			if ((typ.Elem().Kind() === 8) && ($interfaceIsEqual(typ.Elem(), byteType) || (verb === 115) || (verb === 113) || (verb === 120))) {
				bytes = sliceType.nil;
				if (f.Kind() === 23) {
					bytes = f.Bytes();
				} else if (f.CanAddr()) {
					bytes = f.Slice(0, f.Len()).Bytes();
				} else {
					bytes = sliceType.make(f.Len());
					_ref$2 = bytes;
					_i$1 = 0;
					while (_i$1 < _ref$2.$length) {
						i$2 = _i$1;
						(i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (f.Index(i$2).Uint().$low << 24 >>> 24);
						_i$1++;
					}
				}
				p.fmtBytes(bytes, verb, typ, depth);
				wasString = verb === 115;
				break;
			}
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(value.Type().String());
				if ((f.Kind() === 23) && f.IsNil()) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString("(nil)");
					break;
				}
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(123);
			} else {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(91);
			}
			i$3 = 0;
			while (i$3 < f.Len()) {
				if (i$3 > 0) {
					if (p.fmt.fmtFlags.sharpV) {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				p.printValue(f.Index(i$3), verb, depth + 1 >> 0);
				i$3 = i$3 + (1) >> 0;
			}
			if (p.fmt.fmtFlags.sharpV) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
			} else {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(93);
			}
		} else if (_ref === 22) {
			v$1 = f.Pointer();
			if (!((v$1 === 0)) && (depth === 0)) {
				a = f.Elem();
				_ref$3 = a.Kind();
				if (_ref$3 === 17 || _ref$3 === 23) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(38);
					p.printValue(a, verb, depth + 1 >> 0);
					break BigSwitch;
				} else if (_ref$3 === 25) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(38);
					p.printValue(a, verb, depth + 1 >> 0);
					break BigSwitch;
				} else if (_ref$3 === 21) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(38);
					p.printValue(a, verb, depth + 1 >> 0);
					break BigSwitch;
				}
			}
			p.fmtPointer(value, verb);
		} else if (_ref === 18 || _ref === 19 || _ref === 26) {
			p.fmtPointer(value, verb);
		} else {
			p.unknownType(f);
		} }
		p.value = oldValue;
		wasString = wasString;
		return wasString;
	};
	pp.prototype.printReflectValue = function(value, verb, depth) { return this.$val.printReflectValue(value, verb, depth); };
	intFromArg = function(a, argNum) {
		var _tuple, isInt = false, newArgNum = 0, num = 0;
		newArgNum = argNum;
		if (argNum < a.$length) {
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true); num = _tuple[0]; isInt = _tuple[1];
			newArgNum = argNum + 1 >> 0;
		}
		return [num, isInt, newArgNum];
	};
	parseArgNumber = function(format) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, i, index = 0, newi, ok = false, ok$1, wid = 0, width;
		i = 1;
		while (i < format.length) {
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i); width = _tuple[0]; ok$1 = _tuple[1]; newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp = 0; _tmp$1 = i + 1 >> 0; _tmp$2 = false; index = _tmp; wid = _tmp$1; ok = _tmp$2;
					return [index, wid, ok];
				}
				_tmp$3 = width - 1 >> 0; _tmp$4 = i + 1 >> 0; _tmp$5 = true; index = _tmp$3; wid = _tmp$4; ok = _tmp$5;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = 0; _tmp$7 = 1; _tmp$8 = false; index = _tmp$6; wid = _tmp$7; ok = _tmp$8;
		return [index, wid, ok];
	};
	pp.ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple, found = false, index, newArgNum = 0, newi = 0, ok, p, wid;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum; _tmp$1 = i; _tmp$2 = false; newArgNum = _tmp; newi = _tmp$1; found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber(format.substring(i)); index = _tuple[0]; wid = _tuple[1]; ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index; _tmp$4 = i + wid >> 0; _tmp$5 = true; newArgNum = _tmp$3; newi = _tmp$4; found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum; _tmp$7 = i + wid >> 0; _tmp$8 = true; newArgNum = _tmp$6; newi = _tmp$7; found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.ptr.prototype.doPrintf = function(format, a) {
		var _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, afterIndex, arg, arg$1, argNum, c, end, i, lasti, p, w;
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		while (i < end) {
			p.goodArgNum = true;
			lasti = i;
			while (i < end && !((format.charCodeAt(i) === 37))) {
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				break;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			F:
			while (i < end) {
				_ref = format.charCodeAt(i);
				if (_ref === 35) {
					p.fmt.fmtFlags.sharp = true;
				} else if (_ref === 48) {
					p.fmt.fmtFlags.zero = true;
				} else if (_ref === 43) {
					p.fmt.fmtFlags.plus = true;
				} else if (_ref === 45) {
					p.fmt.fmtFlags.minus = true;
				} else if (_ref === 32) {
					p.fmt.fmtFlags.space = true;
				} else {
					break F;
				}
				i = i + (1) >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.$length); argNum = _tuple[0]; i = _tuple[1]; afterIndex = _tuple[2];
			if (i < end && (format.charCodeAt(i) === 42)) {
				i = i + (1) >> 0;
				_tuple$1 = intFromArg(a, argNum); p.fmt.wid = _tuple$1[0]; p.fmt.fmtFlags.widPresent = _tuple$1[1]; argNum = _tuple$1[2];
				if (!p.fmt.fmtFlags.widPresent) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(badWidthBytes);
				}
				afterIndex = false;
			} else {
				_tuple$2 = parsenum(format, i, end); p.fmt.wid = _tuple$2[0]; p.fmt.fmtFlags.widPresent = _tuple$2[1]; i = _tuple$2[2];
				if (afterIndex && p.fmt.fmtFlags.widPresent) {
					p.goodArgNum = false;
				}
			}
			if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$3[0]; i = _tuple$3[1]; afterIndex = _tuple$3[2];
				if (format.charCodeAt(i) === 42) {
					i = i + (1) >> 0;
					_tuple$4 = intFromArg(a, argNum); p.fmt.prec = _tuple$4[0]; p.fmt.fmtFlags.precPresent = _tuple$4[1]; argNum = _tuple$4[2];
					if (!p.fmt.fmtFlags.precPresent) {
						new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(badPrecBytes);
					}
					afterIndex = false;
				} else {
					_tuple$5 = parsenum(format, i, end); p.fmt.prec = _tuple$5[0]; p.fmt.fmtFlags.precPresent = _tuple$5[1]; i = _tuple$5[2];
					if (!p.fmt.fmtFlags.precPresent) {
						p.fmt.prec = 0;
						p.fmt.fmtFlags.precPresent = true;
					}
				}
			}
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$6[0]; i = _tuple$6[1]; afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(noVerbBytes);
				continue;
			}
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i)); c = _tuple$7[0]; w = _tuple$7[1];
			i = i + (w) >> 0;
			if (c === 37) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(37);
				continue;
			}
			if (!p.goodArgNum) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(percentBangBytes);
				p.add(c);
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(badIndexBytes);
				continue;
			} else if (argNum >= a.$length) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(percentBangBytes);
				p.add(c);
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(missingBytes);
				continue;
			}
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			argNum = argNum + (1) >> 0;
			if (c === 118) {
				if (p.fmt.fmtFlags.sharp) {
					p.fmt.fmtFlags.sharp = false;
					p.fmt.fmtFlags.sharpV = true;
				}
				if (p.fmt.fmtFlags.plus) {
					p.fmt.fmtFlags.plus = false;
					p.fmt.fmtFlags.plusV = true;
				}
			}
			p.printArg(arg, c, 0);
		}
		if (!p.reordered && argNum < a.$length) {
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(extraBytes);
			while (argNum < a.$length) {
				arg$1 = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
				if (!($interfaceIsEqual(arg$1, $ifaceNil))) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(reflect.TypeOf(arg$1).String());
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(61);
				}
				p.printArg(arg$1, 118, 0);
				if ((argNum + 1 >> 0) < a.$length) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
				}
				argNum = argNum + (1) >> 0;
			}
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(41);
		}
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.ptr.prototype.doPrint = function(a, addspace, addnewline) {
		var arg, argNum, isString, p, prevString;
		p = this;
		prevString = false;
		argNum = 0;
		while (argNum < a.$length) {
			p.fmt.clearflags();
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			if (argNum > 0) {
				isString = !($interfaceIsEqual(arg, $ifaceNil)) && (reflect.TypeOf(arg).Kind() === 24);
				if (addspace || !isString && !prevString) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
				}
			}
			prevString = p.printArg(arg, 118, 0);
			argNum = argNum + (1) >> 0;
		}
		if (addnewline) {
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(10);
		}
	};
	pp.prototype.doPrint = function(a, addspace, addnewline) { return this.$val.doPrint(a, addspace, addnewline); };
	$ptrType(stringReader).prototype.Read = function(b) {
		var err = $ifaceNil, n = 0, r;
		r = this;
		n = $copyString(b, r.$get());
		r.$set((r.$get()).substring(n));
		if (n === 0) {
			err = io.EOF;
		}
		return [n, err];
	};
	Sscan = $pkg.Sscan = function(str, a) {
		var _tuple, err = $ifaceNil, n = 0, x;
		_tuple = Fscan((x = new ptrType$4(function() { return str; }, function($v) { str = $v; }), new ptrType$3(x.$get, x.$set)), a); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Fscan = $pkg.Fscan = function(r, a) {
		var _tuple, _tuple$1, err = $ifaceNil, n = 0, old, s;
		_tuple = newScanState(r, true, false); s = _tuple[0]; old = $clone(_tuple[1], ssave);
		_tuple$1 = s.doScan(a); n = _tuple$1[0]; err = _tuple$1[1];
		s.free(old);
		return [n, err];
	};
	ss.ptr.prototype.Read = function(buf) {
		var _tmp, _tmp$1, err = $ifaceNil, n = 0, s;
		s = this;
		_tmp = 0; _tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune"); n = _tmp; err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.ptr.prototype.ReadRune = function() {
		var _tuple, err = $ifaceNil, r = 0, s, size = 0;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + (1) >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_tuple = s.rr.ReadRune(); r = _tuple[0]; size = _tuple[1]; err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			s.prevRune = r;
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.ptr.prototype.Width = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, ok = false, s, wid = 0;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0; _tmp$1 = false; wid = _tmp; ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid; _tmp$3 = true; wid = _tmp$2; ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.ptr.prototype.getRune = function() {
		var _tuple, err, r = 0, s;
		s = this;
		_tuple = s.ReadRune(); r = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.ptr.prototype.mustReadRune = function() {
		var r = 0, s;
		s = this;
		r = s.getRune();
		if (r === -1) {
			s.error(io.ErrUnexpectedEOF);
		}
		return r;
	};
	ss.prototype.mustReadRune = function() { return this.$val.mustReadRune(); };
	ss.ptr.prototype.UnreadRune = function() {
		var _tuple, ok, s, u;
		s = this;
		_tuple = $assertType(s.rr, runeUnreader, true); u = _tuple[0]; ok = _tuple[1];
		if (ok) {
			u.UnreadRune();
		} else {
			s.peekRune = s.prevRune;
		}
		s.prevRune = -1;
		s.count = s.count - (1) >> 0;
		return $ifaceNil;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.ptr.prototype.error = function(err) {
		var s, x;
		s = this;
		$panic((x = new scanError.ptr(err), new x.constructor.elem(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.ptr.prototype.errorString = function(err) {
		var s, x;
		s = this;
		$panic((x = new scanError.ptr(errors.New(err)), new x.constructor.elem(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.ptr.prototype.Token = function(skipSpace, f) {
		var $deferred = [], $err = null, err = $ifaceNil, s, tok = sliceType.nil;
		/* */ try { $deferFrames.push($deferred);
		s = this;
		$deferred.push([(function() {
			var _tuple, e, ok, se;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true); se = $clone(_tuple[0], scanError); ok = _tuple[1];
				if (ok) {
					err = se.err;
				} else {
					$panic(e);
				}
			}
		}), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		tok = s.token(skipSpace, f);
		return [tok, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [tok, err]; }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var _i, _ref, rng, rx;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (_i < _ref.$length) {
			rng = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), arrayType);
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		return !isSpace(r);
	};
	ss.ptr.prototype.SkipSpace = function() {
		var s;
		s = this;
		s.skipSpace(false);
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	readRune.ptr.prototype.readByte = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, b = 0, err = $ifaceNil, n, r;
		r = this;
		if (r.pending > 0) {
			b = r.pendBuf[0];
			$copySlice($subslice(new sliceType(r.pendBuf), 0), $subslice(new sliceType(r.pendBuf), 1));
			r.pending = r.pending - (1) >> 0;
			return [b, err];
		}
		_tuple = io.ReadFull(r.reader, $subslice(new sliceType(r.pendBuf), 0, 1)); n = _tuple[0]; err = _tuple[1];
		if (!((n === 1))) {
			_tmp = 0; _tmp$1 = err; b = _tmp; err = _tmp$1;
			return [b, err];
		}
		_tmp$2 = r.pendBuf[0]; _tmp$3 = err; b = _tmp$2; err = _tmp$3;
		return [b, err];
	};
	readRune.prototype.readByte = function() { return this.$val.readByte(); };
	readRune.ptr.prototype.unread = function(buf) {
		var r;
		r = this;
		$copySlice($subslice(new sliceType(r.pendBuf), r.pending), buf);
		r.pending = r.pending + (buf.$length) >> 0;
	};
	readRune.prototype.unread = function(buf) { return this.$val.unread(buf); };
	readRune.ptr.prototype.ReadRune = function() {
		var _tmp, _tmp$1, _tmp$2, _tuple, _tuple$1, _tuple$2, err = $ifaceNil, n, r, rr = 0, size = 0, x;
		r = this;
		_tuple = r.readByte(); r.buf[0] = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = err; rr = _tmp; size = _tmp$1; err = _tmp$2;
			return [rr, size, err];
		}
		if (r.buf[0] < 128) {
			rr = (r.buf[0] >> 0);
			size = 1;
			return [rr, size, err];
		}
		n = 0;
		n = 1;
		while (!utf8.FullRune($subslice(new sliceType(r.buf), 0, n))) {
			_tuple$1 = r.readByte(); (x = r.buf, (n < 0 || n >= x.length) ? $throwRuntimeError("index out of range") : x[n] = _tuple$1[0]); err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = $ifaceNil;
					break;
				}
				return [rr, size, err];
			}
			n = n + (1) >> 0;
		}
		_tuple$2 = utf8.DecodeRune($subslice(new sliceType(r.buf), 0, n)); rr = _tuple$2[0]; size = _tuple$2[1];
		if (size < n) {
			r.unread($subslice(new sliceType(r.buf), size, n));
		}
		return [rr, size, err];
	};
	readRune.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	newScanState = function(r, nlIsSpace, nlIsEnd) {
		var _tuple, _tuple$1, ok, ok$1, old = new ssave.ptr(), rr, s = ptrType$5.nil;
		_tuple = $assertType(r, ptrType$5, true); s = _tuple[0]; ok = _tuple[1];
		if (ok) {
			$copy(old, s.ssave, ssave);
			s.ssave.limit = s.ssave.argLimit;
			s.ssave.nlIsEnd = nlIsEnd || s.ssave.nlIsEnd;
			s.ssave.nlIsSpace = nlIsSpace;
			return [s, old];
		}
		s = $assertType(ssFree.Get(), ptrType$5);
		_tuple$1 = $assertType(r, io.RuneReader, true); rr = _tuple$1[0]; ok$1 = _tuple$1[1];
		if (ok$1) {
			s.rr = rr;
		} else {
			s.rr = new readRune.ptr(r, arrayType$1.zero(), 0, arrayType$1.zero());
		}
		s.ssave.nlIsSpace = nlIsSpace;
		s.ssave.nlIsEnd = nlIsEnd;
		s.prevRune = -1;
		s.peekRune = -1;
		s.atEOF = false;
		s.ssave.limit = 1073741824;
		s.ssave.argLimit = 1073741824;
		s.ssave.maxWid = 1073741824;
		s.ssave.validSave = true;
		s.count = 0;
		return [s, old];
	};
	ss.ptr.prototype.free = function(old) {
		var s;
		s = this;
		old = $clone(old, ssave);
		if (old.validSave) {
			$copy(s.ssave, old, ssave);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rr = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.ptr.prototype.skipSpace = function(stopAtNewline) {
		var r, s;
		s = this;
		while (true) {
			r = s.getRune();
			if (r === -1) {
				return;
			}
			if ((r === 13) && s.peek("\n")) {
				continue;
			}
			if (r === 10) {
				if (stopAtNewline) {
					break;
				}
				if (s.ssave.nlIsSpace) {
					continue;
				}
				s.errorString("unexpected newline");
				return;
			}
			if (!isSpace(r)) {
				s.UnreadRune();
				break;
			}
		}
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.ptr.prototype.token = function(skipSpace, f) {
		var r, s, x;
		s = this;
		if (skipSpace) {
			s.skipSpace(false);
		}
		while (true) {
			r = s.getRune();
			if (r === -1) {
				break;
			}
			if (!f(r)) {
				s.UnreadRune();
				break;
			}
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s).WriteRune(r);
		}
		return (x = s.buf, $subslice(new sliceType(x.$array), x.$offset, x.$offset + x.$length));
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _i, _ref, _rune, c, i;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.ptr.prototype.consume = function(ok, accept) {
		var r, s;
		s = this;
		r = s.getRune();
		if (r === -1) {
			return false;
		}
		if (indexRune(ok, r) >= 0) {
			if (accept) {
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s).WriteRune(r);
			}
			return true;
		}
		if (!((r === -1)) && accept) {
			s.UnreadRune();
		}
		return false;
	};
	ss.prototype.consume = function(ok, accept) { return this.$val.consume(ok, accept); };
	ss.ptr.prototype.peek = function(ok) {
		var r, s;
		s = this;
		r = s.getRune();
		if (!((r === -1))) {
			s.UnreadRune();
		}
		return indexRune(ok, r) >= 0;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	ss.ptr.prototype.notEOF = function() {
		var r, s;
		s = this;
		r = s.getRune();
		if (r === -1) {
			$panic(io.EOF);
		}
		s.UnreadRune();
	};
	ss.prototype.notEOF = function() { return this.$val.notEOF(); };
	ss.ptr.prototype.accept = function(ok) {
		var s;
		s = this;
		return s.consume(ok, true);
	};
	ss.prototype.accept = function(ok) { return this.$val.accept(ok); };
	ss.ptr.prototype.okVerb = function(verb, okVerbs, typ) {
		var _i, _ref, _rune, s, v;
		s = this;
		_ref = okVerbs;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			v = _rune[0];
			if (v === verb) {
				return true;
			}
			_i += _rune[1];
		}
		s.errorString("bad verb %" + $encodeRune(verb) + " for " + typ);
		return false;
	};
	ss.prototype.okVerb = function(verb, okVerbs, typ) { return this.$val.okVerb(verb, okVerbs, typ); };
	ss.ptr.prototype.scanBool = function(verb) {
		var _ref, s;
		s = this;
		s.skipSpace(false);
		s.notEOF();
		if (!s.okVerb(verb, "tv", "boolean")) {
			return false;
		}
		_ref = s.getRune();
		if (_ref === 48) {
			return false;
		} else if (_ref === 49) {
			return true;
		} else if (_ref === 116 || _ref === 84) {
			if (s.accept("rR") && (!s.accept("uU") || !s.accept("eE"))) {
				s.error(boolError);
			}
			return true;
		} else if (_ref === 102 || _ref === 70) {
			if (s.accept("aA") && (!s.accept("lL") || !s.accept("sS") || !s.accept("eE"))) {
				s.error(boolError);
			}
			return false;
		}
		return false;
	};
	ss.prototype.scanBool = function(verb) { return this.$val.scanBool(verb); };
	ss.ptr.prototype.getBase = function(verb) {
		var _ref, base = 0, digits = "", s;
		s = this;
		s.okVerb(verb, "bdoUxXv", "integer");
		base = 10;
		digits = "0123456789";
		_ref = verb;
		if (_ref === 98) {
			base = 2;
			digits = "01";
		} else if (_ref === 111) {
			base = 8;
			digits = "01234567";
		} else if (_ref === 120 || _ref === 88 || _ref === 85) {
			base = 16;
			digits = "0123456789aAbBcCdDeEfF";
		}
		return [base, digits];
	};
	ss.prototype.getBase = function(verb) { return this.$val.getBase(verb); };
	ss.ptr.prototype.scanNumber = function(digits, haveDigits) {
		var s;
		s = this;
		if (!haveDigits) {
			s.notEOF();
			if (!s.accept(digits)) {
				s.errorString("expected integer");
			}
		}
		while (s.accept(digits)) {
		}
		return $bytesToString(s.buf);
	};
	ss.prototype.scanNumber = function(digits, haveDigits) { return this.$val.scanNumber(digits, haveDigits); };
	ss.ptr.prototype.scanRune = function(bitSize) {
		var n, r, s, x;
		s = this;
		s.notEOF();
		r = new $Int64(0, s.getRune());
		n = (bitSize >>> 0);
		x = $shiftRightInt64(($shiftLeft64(r, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x.$high === r.$high && x.$low === r.$low))) {
			s.errorString("overflow on character value " + $encodeRune(r.$low));
		}
		return r;
	};
	ss.prototype.scanRune = function(bitSize) { return this.$val.scanRune(bitSize); };
	ss.ptr.prototype.scanBasePrefix = function() {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, base = 0, digits = "", found = false, s;
		s = this;
		if (!s.peek("0")) {
			_tmp = 10; _tmp$1 = "0123456789"; _tmp$2 = false; base = _tmp; digits = _tmp$1; found = _tmp$2;
			return [base, digits, found];
		}
		s.accept("0");
		found = true;
		_tmp$3 = 8; _tmp$4 = "01234567"; base = _tmp$3; digits = _tmp$4;
		if (s.peek("xX")) {
			s.consume("xX", false);
			_tmp$5 = 16; _tmp$6 = "0123456789aAbBcCdDeEfF"; base = _tmp$5; digits = _tmp$6;
		}
		return [base, digits, found];
	};
	ss.prototype.scanBasePrefix = function() { return this.$val.scanBasePrefix(); };
	ss.ptr.prototype.scanInt = function(verb, bitSize) {
		var _tuple, _tuple$1, _tuple$2, base, digits, err, haveDigits, i, n, s, tok, x;
		s = this;
		if (verb === 99) {
			return s.scanRune(bitSize);
		}
		s.skipSpace(false);
		s.notEOF();
		_tuple = s.getBase(verb); base = _tuple[0]; digits = _tuple[1];
		haveDigits = false;
		if (verb === 85) {
			if (!s.consume("U", false) || !s.consume("+", false)) {
				s.errorString("bad unicode format ");
			}
		} else {
			s.accept("+-");
			if (verb === 118) {
				_tuple$1 = s.scanBasePrefix(); base = _tuple$1[0]; digits = _tuple$1[1]; haveDigits = _tuple$1[2];
			}
		}
		tok = s.scanNumber(digits, haveDigits);
		_tuple$2 = strconv.ParseInt(tok, base, 64); i = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			s.error(err);
		}
		n = (bitSize >>> 0);
		x = $shiftRightInt64(($shiftLeft64(i, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x.$high === i.$high && x.$low === i.$low))) {
			s.errorString("integer overflow on token " + tok);
		}
		return i;
	};
	ss.prototype.scanInt = function(verb, bitSize) { return this.$val.scanInt(verb, bitSize); };
	ss.ptr.prototype.scanUint = function(verb, bitSize) {
		var _tuple, _tuple$1, _tuple$2, base, digits, err, haveDigits, i, n, s, tok, x, x$1;
		s = this;
		if (verb === 99) {
			return (x = s.scanRune(bitSize), new $Uint64(x.$high, x.$low));
		}
		s.skipSpace(false);
		s.notEOF();
		_tuple = s.getBase(verb); base = _tuple[0]; digits = _tuple[1];
		haveDigits = false;
		if (verb === 85) {
			if (!s.consume("U", false) || !s.consume("+", false)) {
				s.errorString("bad unicode format ");
			}
		} else if (verb === 118) {
			_tuple$1 = s.scanBasePrefix(); base = _tuple$1[0]; digits = _tuple$1[1]; haveDigits = _tuple$1[2];
		}
		tok = s.scanNumber(digits, haveDigits);
		_tuple$2 = strconv.ParseUint(tok, base, 64); i = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			s.error(err);
		}
		n = (bitSize >>> 0);
		x$1 = $shiftRightUint64(($shiftLeft64(i, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x$1.$high === i.$high && x$1.$low === i.$low))) {
			s.errorString("unsigned integer overflow on token " + tok);
		}
		return i;
	};
	ss.prototype.scanUint = function(verb, bitSize) { return this.$val.scanUint(verb, bitSize); };
	ss.ptr.prototype.floatToken = function() {
		var s;
		s = this;
		s.buf = $subslice(s.buf, 0, 0);
		if (s.accept("nN") && s.accept("aA") && s.accept("nN")) {
			return $bytesToString(s.buf);
		}
		s.accept("+-");
		if (s.accept("iI") && s.accept("nN") && s.accept("fF")) {
			return $bytesToString(s.buf);
		}
		while (s.accept("0123456789")) {
		}
		if (s.accept(".")) {
			while (s.accept("0123456789")) {
			}
		}
		if (s.accept("eEp")) {
			s.accept("+-");
			while (s.accept("0123456789")) {
			}
		}
		return $bytesToString(s.buf);
	};
	ss.prototype.floatToken = function() { return this.$val.floatToken(); };
	ss.ptr.prototype.complexTokens = function() {
		var _tmp, _tmp$1, imag = "", imagSign, parens, real = "", s;
		s = this;
		parens = s.accept("(");
		real = s.floatToken();
		s.buf = $subslice(s.buf, 0, 0);
		if (!s.accept("+-")) {
			s.error(complexError);
		}
		imagSign = $bytesToString(s.buf);
		imag = s.floatToken();
		if (!s.accept("i")) {
			s.error(complexError);
		}
		if (parens && !s.accept(")")) {
			s.error(complexError);
		}
		_tmp = real; _tmp$1 = imagSign + imag; real = _tmp; imag = _tmp$1;
		return [real, imag];
	};
	ss.prototype.complexTokens = function() { return this.$val.complexTokens(); };
	ss.ptr.prototype.convertFloat = function(str, n) {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, e, e$1, err, err$1, f, f$1, m, ok, ok$1, p, s;
		s = this;
		p = indexRune(str, 112);
		if (p >= 0) {
			_tuple = strconv.ParseFloat(str.substring(0, p), n); f = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tuple$1 = $assertType(err, ptrType$6, true); e = _tuple$1[0]; ok = _tuple$1[1];
				if (ok) {
					e.Num = str;
				}
				s.error(err);
			}
			_tuple$2 = strconv.Atoi(str.substring((p + 1 >> 0))); m = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tuple$3 = $assertType(err, ptrType$6, true); e$1 = _tuple$3[0]; ok$1 = _tuple$3[1];
				if (ok$1) {
					e$1.Num = str;
				}
				s.error(err);
			}
			return math.Ldexp(f, m);
		}
		_tuple$4 = strconv.ParseFloat(str, n); f$1 = _tuple$4[0]; err$1 = _tuple$4[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			s.error(err$1);
		}
		return f$1;
	};
	ss.prototype.convertFloat = function(str, n) { return this.$val.convertFloat(str, n); };
	ss.ptr.prototype.scanComplex = function(verb, n) {
		var _q, _q$1, _tuple, imag, real, s, simag, sreal;
		s = this;
		if (!s.okVerb(verb, "beEfFgGv", "complex")) {
			return new $Complex128(0, 0);
		}
		s.skipSpace(false);
		s.notEOF();
		_tuple = s.complexTokens(); sreal = _tuple[0]; simag = _tuple[1];
		real = s.convertFloat(sreal, (_q = n / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		imag = s.convertFloat(simag, (_q$1 = n / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
		return new $Complex128(real, imag);
	};
	ss.prototype.scanComplex = function(verb, n) { return this.$val.scanComplex(verb, n); };
	ss.ptr.prototype.convertString = function(verb) {
		var _ref, s, str = "";
		s = this;
		if (!s.okVerb(verb, "svqx", "string")) {
			str = "";
			return str;
		}
		s.skipSpace(false);
		s.notEOF();
		_ref = verb;
		if (_ref === 113) {
			str = s.quotedString();
		} else if (_ref === 120) {
			str = s.hexString();
		} else {
			str = $bytesToString(s.token(true, notSpace));
		}
		return str;
	};
	ss.prototype.convertString = function(verb) { return this.$val.convertString(verb); };
	ss.ptr.prototype.quotedString = function() {
		var _ref, _tuple, err, quote, r, r$1, result, s;
		s = this;
		s.notEOF();
		quote = s.getRune();
		_ref = quote;
		if (_ref === 96) {
			while (true) {
				r = s.mustReadRune();
				if (r === quote) {
					break;
				}
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s).WriteRune(r);
			}
			return $bytesToString(s.buf);
		} else if (_ref === 34) {
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s).WriteRune(quote);
			while (true) {
				r$1 = s.mustReadRune();
				new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s).WriteRune(r$1);
				if (r$1 === 92) {
					new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s).WriteRune(s.mustReadRune());
				} else if (r$1 === 34) {
					break;
				}
			}
			_tuple = strconv.Unquote($bytesToString(s.buf)); result = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				s.error(err);
			}
			return result;
		} else {
			s.errorString("expected quoted string");
		}
		return "";
	};
	ss.prototype.quotedString = function() { return this.$val.quotedString(); };
	ss.ptr.prototype.hexDigit = function(d) {
		var _ref, digit, s;
		s = this;
		digit = (d >> 0);
		_ref = digit;
		if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55 || _ref === 56 || _ref === 57) {
			return digit - 48 >> 0;
		} else if (_ref === 97 || _ref === 98 || _ref === 99 || _ref === 100 || _ref === 101 || _ref === 102) {
			return (10 + digit >> 0) - 97 >> 0;
		} else if (_ref === 65 || _ref === 66 || _ref === 67 || _ref === 68 || _ref === 69 || _ref === 70) {
			return (10 + digit >> 0) - 65 >> 0;
		}
		s.errorString("illegal hex digit");
		return 0;
	};
	ss.prototype.hexDigit = function(d) { return this.$val.hexDigit(d); };
	ss.ptr.prototype.hexByte = function() {
		var _tmp, _tmp$1, b = 0, ok = false, rune1, rune2, s;
		s = this;
		rune1 = s.getRune();
		if (rune1 === -1) {
			return [b, ok];
		}
		if (isSpace(rune1)) {
			s.UnreadRune();
			return [b, ok];
		}
		rune2 = s.mustReadRune();
		_tmp = (((s.hexDigit(rune1) << 4 >> 0) | s.hexDigit(rune2)) << 24 >>> 24); _tmp$1 = true; b = _tmp; ok = _tmp$1;
		return [b, ok];
	};
	ss.prototype.hexByte = function() { return this.$val.hexByte(); };
	ss.ptr.prototype.hexString = function() {
		var _tuple, b, ok, s;
		s = this;
		s.notEOF();
		while (true) {
			_tuple = s.hexByte(); b = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				break;
			}
			new ptrType$1(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s).WriteByte(b);
		}
		if (s.buf.$length === 0) {
			s.errorString("no hex data for %x string");
			return "";
		}
		return $bytesToString(s.buf);
	};
	ss.prototype.hexString = function() { return this.$val.hexString(); };
	ss.ptr.prototype.scanOne = function(verb, arg) {
		var _ref, _ref$1, _tuple, err, i, ok, ptr, s, str, typ, v, v$1, v$2, val, x, x$1, x$2, x$3, x$4;
		s = this;
		s.buf = $subslice(s.buf, 0, 0);
		err = $ifaceNil;
		_tuple = $assertType(arg, Scanner, true); v = _tuple[0]; ok = _tuple[1];
		if (ok) {
			err = v.Scan(s, verb);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				s.error(err);
			}
			return;
		}
		_ref = arg;
		if ($assertType(_ref, ptrType$7, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(s.scanBool(verb));
		} else if ($assertType(_ref, ptrType$8, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set((x = s.scanComplex(verb, 64), new $Complex64(x.$real, x.$imag)));
		} else if ($assertType(_ref, ptrType$9, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(s.scanComplex(verb, 128));
		} else if ($assertType(_ref, ptrType$10, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(((x$1 = s.scanInt(verb, intBits), x$1.$low + ((x$1.$high >> 31) * 4294967296)) >> 0));
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(((x$2 = s.scanInt(verb, 8), x$2.$low + ((x$2.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if ($assertType(_ref, ptrType$12, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(((x$3 = s.scanInt(verb, 16), x$3.$low + ((x$3.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if ($assertType(_ref, ptrType$13, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(((x$4 = s.scanInt(verb, 32), x$4.$low + ((x$4.$high >> 31) * 4294967296)) >> 0));
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(s.scanInt(verb, 64));
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set((s.scanUint(verb, intBits).$low >>> 0));
		} else if ($assertType(_ref, ptrType$16, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set((s.scanUint(verb, 8).$low << 24 >>> 24));
		} else if ($assertType(_ref, ptrType$17, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set((s.scanUint(verb, 16).$low << 16 >>> 16));
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set((s.scanUint(verb, 32).$low >>> 0));
		} else if ($assertType(_ref, ptrType$19, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(s.scanUint(verb, 64));
		} else if ($assertType(_ref, ptrType$20, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set((s.scanUint(verb, uintptrBits).$low >>> 0));
		} else if ($assertType(_ref, ptrType$21, true)[1]) {
			v$1 = _ref.$val;
			if (s.okVerb(verb, "beEfFgGv", "float32")) {
				s.skipSpace(false);
				s.notEOF();
				v$1.$set(s.convertFloat(s.floatToken(), 32));
			}
		} else if ($assertType(_ref, ptrType$22, true)[1]) {
			v$1 = _ref.$val;
			if (s.okVerb(verb, "beEfFgGv", "float64")) {
				s.skipSpace(false);
				s.notEOF();
				v$1.$set(s.convertFloat(s.floatToken(), 64));
			}
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(s.convertString(verb));
		} else if ($assertType(_ref, ptrType$23, true)[1]) {
			v$1 = _ref.$val;
			v$1.$set(new sliceType($stringToBytes(s.convertString(verb))));
		} else {
			v$1 = _ref;
			val = reflect.ValueOf(v$1);
			ptr = val;
			if (!((ptr.Kind() === 22))) {
				s.errorString("type not a pointer: " + val.Type().String());
				return;
			}
			v$2 = ptr.Elem();
			_ref$1 = v$2.Kind();
			if (_ref$1 === 1) {
				v$2.SetBool(s.scanBool(verb));
			} else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) {
				v$2.SetInt(s.scanInt(verb, v$2.Type().Bits()));
			} else if (_ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				v$2.SetUint(s.scanUint(verb, v$2.Type().Bits()));
			} else if (_ref$1 === 24) {
				v$2.SetString(s.convertString(verb));
			} else if (_ref$1 === 23) {
				typ = v$2.Type();
				if (!((typ.Elem().Kind() === 8))) {
					s.errorString("can't scan type: " + val.Type().String());
				}
				str = s.convertString(verb);
				v$2.Set(reflect.MakeSlice(typ, str.length, str.length));
				i = 0;
				while (i < str.length) {
					v$2.Index(i).SetUint(new $Uint64(0, str.charCodeAt(i)));
					i = i + (1) >> 0;
				}
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				s.skipSpace(false);
				s.notEOF();
				v$2.SetFloat(s.convertFloat(s.floatToken(), v$2.Type().Bits()));
			} else if (_ref$1 === 15 || _ref$1 === 16) {
				v$2.SetComplex(s.scanComplex(verb, v$2.Type().Bits()));
			} else {
				s.errorString("can't scan type: " + val.Type().String());
			}
		}
	};
	ss.prototype.scanOne = function(verb, arg) { return this.$val.scanOne(verb, arg); };
	errorHandler = function(errp) {
		var _tuple, _tuple$1, e, eof, ok, ok$1, se;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tuple = $assertType(e, scanError, true); se = $clone(_tuple[0], scanError); ok = _tuple[1];
			if (ok) {
				errp.$set(se.err);
			} else {
				_tuple$1 = $assertType(e, $error, true); eof = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1 && $interfaceIsEqual(eof, io.EOF)) {
					errp.$set(eof);
				} else {
					$panic(e);
				}
			}
		}
	};
	ss.ptr.prototype.doScan = function(a) {
		var $deferred = [], $err = null, _i, _ref, arg, err = $ifaceNil, numProcessed = 0, r, s;
		/* */ try { $deferFrames.push($deferred);
		s = this;
		$deferred.push([errorHandler, [new ptrType$24(function() { return err; }, function($v) { err = $v; })]]);
		_ref = a;
		_i = 0;
		while (_i < _ref.$length) {
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			s.scanOne(118, arg);
			numProcessed = numProcessed + (1) >> 0;
			_i++;
		}
		if (!s.ssave.nlIsSpace) {
			while (true) {
				r = s.getRune();
				if ((r === 10) || (r === -1)) {
					break;
				}
				if (!isSpace(r)) {
					s.errorString("expected newline");
					break;
				}
			}
		}
		return [numProcessed, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [numProcessed, err]; }
	};
	ss.prototype.doScan = function(a) { return this.$val.doScan(a); };
	ptrType$25.methods = [{prop: "clearflags", name: "clearflags", pkg: "fmt", type: $funcType([], [], false)}, {prop: "computePadding", name: "computePadding", pkg: "fmt", type: $funcType([$Int], [sliceType, $Int, $Int], false)}, {prop: "fmt_E32", name: "fmt_E32", pkg: "fmt", type: $funcType([$Float32], [], false)}, {prop: "fmt_E64", name: "fmt_E64", pkg: "fmt", type: $funcType([$Float64], [], false)}, {prop: "fmt_G32", name: "fmt_G32", pkg: "fmt", type: $funcType([$Float32], [], false)}, {prop: "fmt_G64", name: "fmt_G64", pkg: "fmt", type: $funcType([$Float64], [], false)}, {prop: "fmt_boolean", name: "fmt_boolean", pkg: "fmt", type: $funcType([$Bool], [], false)}, {prop: "fmt_bx", name: "fmt_bx", pkg: "fmt", type: $funcType([sliceType, $String], [], false)}, {prop: "fmt_c128", name: "fmt_c128", pkg: "fmt", type: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmt_c64", name: "fmt_c64", pkg: "fmt", type: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmt_complex", name: "fmt_complex", pkg: "fmt", type: $funcType([$Float64, $Float64, $Int, $Int32], [], false)}, {prop: "fmt_e32", name: "fmt_e32", pkg: "fmt", type: $funcType([$Float32], [], false)}, {prop: "fmt_e64", name: "fmt_e64", pkg: "fmt", type: $funcType([$Float64], [], false)}, {prop: "fmt_f32", name: "fmt_f32", pkg: "fmt", type: $funcType([$Float32], [], false)}, {prop: "fmt_f64", name: "fmt_f64", pkg: "fmt", type: $funcType([$Float64], [], false)}, {prop: "fmt_fb32", name: "fmt_fb32", pkg: "fmt", type: $funcType([$Float32], [], false)}, {prop: "fmt_fb64", name: "fmt_fb64", pkg: "fmt", type: $funcType([$Float64], [], false)}, {prop: "fmt_g32", name: "fmt_g32", pkg: "fmt", type: $funcType([$Float32], [], false)}, {prop: "fmt_g64", name: "fmt_g64", pkg: "fmt", type: $funcType([$Float64], [], false)}, {prop: "fmt_q", name: "fmt_q", pkg: "fmt", type: $funcType([$String], [], false)}, {prop: "fmt_qc", name: "fmt_qc", pkg: "fmt", type: $funcType([$Int64], [], false)}, {prop: "fmt_s", name: "fmt_s", pkg: "fmt", type: $funcType([$String], [], false)}, {prop: "fmt_sbx", name: "fmt_sbx", pkg: "fmt", type: $funcType([$String, sliceType, $String], [], false)}, {prop: "fmt_sx", name: "fmt_sx", pkg: "fmt", type: $funcType([$String, $String], [], false)}, {prop: "formatFloat", name: "formatFloat", pkg: "fmt", type: $funcType([$Float64, $Uint8, $Int, $Int], [], false)}, {prop: "init", name: "init", pkg: "fmt", type: $funcType([ptrType$1], [], false)}, {prop: "integer", name: "integer", pkg: "fmt", type: $funcType([$Int64, $Uint64, $Bool, $String], [], false)}, {prop: "pad", name: "pad", pkg: "fmt", type: $funcType([sliceType], [], false)}, {prop: "padString", name: "padString", pkg: "fmt", type: $funcType([$String], [], false)}, {prop: "truncate", name: "truncate", pkg: "fmt", type: $funcType([$String], [$String], false)}, {prop: "writePadding", name: "writePadding", pkg: "fmt", type: $funcType([$Int, sliceType], [], false)}];
	ptrType$1.methods = [{prop: "Write", name: "Write", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", type: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", type: $funcType([$Int32], [$error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", type: $funcType([$String], [$Int, $error], false)}];
	ptrType.methods = [{prop: "Flag", name: "Flag", pkg: "", type: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", type: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", type: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}, {prop: "add", name: "add", pkg: "fmt", type: $funcType([$Int32], [], false)}, {prop: "argNumber", name: "argNumber", pkg: "fmt", type: $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false)}, {prop: "badVerb", name: "badVerb", pkg: "fmt", type: $funcType([$Int32], [], false)}, {prop: "catchPanic", name: "catchPanic", pkg: "fmt", type: $funcType([$emptyInterface, $Int32], [], false)}, {prop: "clearSpecialFlags", name: "clearSpecialFlags", pkg: "fmt", type: $funcType([], [$Bool, $Bool], false)}, {prop: "doPrint", name: "doPrint", pkg: "fmt", type: $funcType([sliceType$1, $Bool, $Bool], [], false)}, {prop: "doPrintf", name: "doPrintf", pkg: "fmt", type: $funcType([$String, sliceType$1], [], false)}, {prop: "fmt0x64", name: "fmt0x64", pkg: "fmt", type: $funcType([$Uint64, $Bool], [], false)}, {prop: "fmtBool", name: "fmtBool", pkg: "fmt", type: $funcType([$Bool, $Int32], [], false)}, {prop: "fmtBytes", name: "fmtBytes", pkg: "fmt", type: $funcType([sliceType, $Int32, reflect.Type, $Int], [], false)}, {prop: "fmtC", name: "fmtC", pkg: "fmt", type: $funcType([$Int64], [], false)}, {prop: "fmtComplex128", name: "fmtComplex128", pkg: "fmt", type: $funcType([$Complex128, $Int32], [], false)}, {prop: "fmtComplex64", name: "fmtComplex64", pkg: "fmt", type: $funcType([$Complex64, $Int32], [], false)}, {prop: "fmtFloat32", name: "fmtFloat32", pkg: "fmt", type: $funcType([$Float32, $Int32], [], false)}, {prop: "fmtFloat64", name: "fmtFloat64", pkg: "fmt", type: $funcType([$Float64, $Int32], [], false)}, {prop: "fmtInt64", name: "fmtInt64", pkg: "fmt", type: $funcType([$Int64, $Int32], [], false)}, {prop: "fmtPointer", name: "fmtPointer", pkg: "fmt", type: $funcType([reflect.Value, $Int32], [], false)}, {prop: "fmtString", name: "fmtString", pkg: "fmt", type: $funcType([$String, $Int32], [], false)}, {prop: "fmtUint64", name: "fmtUint64", pkg: "fmt", type: $funcType([$Uint64, $Int32], [], false)}, {prop: "fmtUnicode", name: "fmtUnicode", pkg: "fmt", type: $funcType([$Int64], [], false)}, {prop: "free", name: "free", pkg: "fmt", type: $funcType([], [], false)}, {prop: "handleMethods", name: "handleMethods", pkg: "fmt", type: $funcType([$Int32, $Int], [$Bool], false)}, {prop: "printArg", name: "printArg", pkg: "fmt", type: $funcType([$emptyInterface, $Int32, $Int], [$Bool], false)}, {prop: "printReflectValue", name: "printReflectValue", pkg: "fmt", type: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "printValue", name: "printValue", pkg: "fmt", type: $funcType([reflect.Value, $Int32, $Int], [$Bool], false)}, {prop: "restoreSpecialFlags", name: "restoreSpecialFlags", pkg: "fmt", type: $funcType([$Bool, $Bool], [], false)}, {prop: "unknownType", name: "unknownType", pkg: "fmt", type: $funcType([reflect.Value], [], false)}];
	ptrType$3.methods = [{prop: "Read", name: "Read", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}];
	ptrType$5.methods = [{prop: "Read", name: "Read", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", type: $funcType([], [$Int32, $Int, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", type: $funcType([], [], false)}, {prop: "Token", name: "Token", pkg: "", type: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", type: $funcType([], [$error], false)}, {prop: "Width", name: "Width", pkg: "", type: $funcType([], [$Int, $Bool], false)}, {prop: "accept", name: "accept", pkg: "fmt", type: $funcType([$String], [$Bool], false)}, {prop: "advance", name: "advance", pkg: "fmt", type: $funcType([$String], [$Int], false)}, {prop: "complexTokens", name: "complexTokens", pkg: "fmt", type: $funcType([], [$String, $String], false)}, {prop: "consume", name: "consume", pkg: "fmt", type: $funcType([$String, $Bool], [$Bool], false)}, {prop: "convertFloat", name: "convertFloat", pkg: "fmt", type: $funcType([$String, $Int], [$Float64], false)}, {prop: "convertString", name: "convertString", pkg: "fmt", type: $funcType([$Int32], [$String], false)}, {prop: "doScan", name: "doScan", pkg: "fmt", type: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "doScanf", name: "doScanf", pkg: "fmt", type: $funcType([$String, sliceType$1], [$Int, $error], false)}, {prop: "error", name: "error", pkg: "fmt", type: $funcType([$error], [], false)}, {prop: "errorString", name: "errorString", pkg: "fmt", type: $funcType([$String], [], false)}, {prop: "floatToken", name: "floatToken", pkg: "fmt", type: $funcType([], [$String], false)}, {prop: "free", name: "free", pkg: "fmt", type: $funcType([ssave], [], false)}, {prop: "getBase", name: "getBase", pkg: "fmt", type: $funcType([$Int32], [$Int, $String], false)}, {prop: "getRune", name: "getRune", pkg: "fmt", type: $funcType([], [$Int32], false)}, {prop: "hexByte", name: "hexByte", pkg: "fmt", type: $funcType([], [$Uint8, $Bool], false)}, {prop: "hexDigit", name: "hexDigit", pkg: "fmt", type: $funcType([$Int32], [$Int], false)}, {prop: "hexString", name: "hexString", pkg: "fmt", type: $funcType([], [$String], false)}, {prop: "mustReadRune", name: "mustReadRune", pkg: "fmt", type: $funcType([], [$Int32], false)}, {prop: "notEOF", name: "notEOF", pkg: "fmt", type: $funcType([], [], false)}, {prop: "okVerb", name: "okVerb", pkg: "fmt", type: $funcType([$Int32, $String, $String], [$Bool], false)}, {prop: "peek", name: "peek", pkg: "fmt", type: $funcType([$String], [$Bool], false)}, {prop: "quotedString", name: "quotedString", pkg: "fmt", type: $funcType([], [$String], false)}, {prop: "scanBasePrefix", name: "scanBasePrefix", pkg: "fmt", type: $funcType([], [$Int, $String, $Bool], false)}, {prop: "scanBool", name: "scanBool", pkg: "fmt", type: $funcType([$Int32], [$Bool], false)}, {prop: "scanComplex", name: "scanComplex", pkg: "fmt", type: $funcType([$Int32, $Int], [$Complex128], false)}, {prop: "scanInt", name: "scanInt", pkg: "fmt", type: $funcType([$Int32, $Int], [$Int64], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "fmt", type: $funcType([$String, $Bool], [$String], false)}, {prop: "scanOne", name: "scanOne", pkg: "fmt", type: $funcType([$Int32, $emptyInterface], [], false)}, {prop: "scanRune", name: "scanRune", pkg: "fmt", type: $funcType([$Int], [$Int64], false)}, {prop: "scanUint", name: "scanUint", pkg: "fmt", type: $funcType([$Int32, $Int], [$Uint64], false)}, {prop: "skipSpace", name: "skipSpace", pkg: "fmt", type: $funcType([$Bool], [], false)}, {prop: "token", name: "token", pkg: "fmt", type: $funcType([$Bool, funcType], [sliceType], false)}];
	ptrType$26.methods = [{prop: "ReadRune", name: "ReadRune", pkg: "", type: $funcType([], [$Int32, $Int, $error], false)}, {prop: "readByte", name: "readByte", pkg: "fmt", type: $funcType([], [$Uint8, $error], false)}, {prop: "unread", name: "unread", pkg: "fmt", type: $funcType([sliceType], [], false)}];
	fmtFlags.init([{prop: "widPresent", name: "widPresent", pkg: "fmt", type: $Bool, tag: ""}, {prop: "precPresent", name: "precPresent", pkg: "fmt", type: $Bool, tag: ""}, {prop: "minus", name: "minus", pkg: "fmt", type: $Bool, tag: ""}, {prop: "plus", name: "plus", pkg: "fmt", type: $Bool, tag: ""}, {prop: "sharp", name: "sharp", pkg: "fmt", type: $Bool, tag: ""}, {prop: "space", name: "space", pkg: "fmt", type: $Bool, tag: ""}, {prop: "unicode", name: "unicode", pkg: "fmt", type: $Bool, tag: ""}, {prop: "uniQuote", name: "uniQuote", pkg: "fmt", type: $Bool, tag: ""}, {prop: "zero", name: "zero", pkg: "fmt", type: $Bool, tag: ""}, {prop: "plusV", name: "plusV", pkg: "fmt", type: $Bool, tag: ""}, {prop: "sharpV", name: "sharpV", pkg: "fmt", type: $Bool, tag: ""}]);
	fmt.init([{prop: "intbuf", name: "intbuf", pkg: "fmt", type: arrayType$2, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", type: ptrType$1, tag: ""}, {prop: "wid", name: "wid", pkg: "fmt", type: $Int, tag: ""}, {prop: "prec", name: "prec", pkg: "fmt", type: $Int, tag: ""}, {prop: "fmtFlags", name: "", pkg: "fmt", type: fmtFlags, tag: ""}]);
	State.init([{prop: "Flag", name: "Flag", pkg: "", type: $funcType([$Int], [$Bool], false)}, {prop: "Precision", name: "Precision", pkg: "", type: $funcType([], [$Int, $Bool], false)}, {prop: "Width", name: "Width", pkg: "", type: $funcType([], [$Int, $Bool], false)}, {prop: "Write", name: "Write", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}]);
	Formatter.init([{prop: "Format", name: "Format", pkg: "", type: $funcType([State, $Int32], [], false)}]);
	Stringer.init([{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}]);
	GoStringer.init([{prop: "GoString", name: "GoString", pkg: "", type: $funcType([], [$String], false)}]);
	buffer.init($Uint8);
	pp.init([{prop: "n", name: "n", pkg: "fmt", type: $Int, tag: ""}, {prop: "panicking", name: "panicking", pkg: "fmt", type: $Bool, tag: ""}, {prop: "erroring", name: "erroring", pkg: "fmt", type: $Bool, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", type: buffer, tag: ""}, {prop: "arg", name: "arg", pkg: "fmt", type: $emptyInterface, tag: ""}, {prop: "value", name: "value", pkg: "fmt", type: reflect.Value, tag: ""}, {prop: "reordered", name: "reordered", pkg: "fmt", type: $Bool, tag: ""}, {prop: "goodArgNum", name: "goodArgNum", pkg: "fmt", type: $Bool, tag: ""}, {prop: "runeBuf", name: "runeBuf", pkg: "fmt", type: arrayType$1, tag: ""}, {prop: "fmt", name: "fmt", pkg: "fmt", type: fmt, tag: ""}]);
	runeUnreader.init([{prop: "UnreadRune", name: "UnreadRune", pkg: "", type: $funcType([], [$error], false)}]);
	ScanState.init([{prop: "Read", name: "Read", pkg: "", type: $funcType([sliceType], [$Int, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", type: $funcType([], [$Int32, $Int, $error], false)}, {prop: "SkipSpace", name: "SkipSpace", pkg: "", type: $funcType([], [], false)}, {prop: "Token", name: "Token", pkg: "", type: $funcType([$Bool, funcType], [sliceType, $error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", type: $funcType([], [$error], false)}, {prop: "Width", name: "Width", pkg: "", type: $funcType([], [$Int, $Bool], false)}]);
	Scanner.init([{prop: "Scan", name: "Scan", pkg: "", type: $funcType([ScanState, $Int32], [$error], false)}]);
	scanError.init([{prop: "err", name: "err", pkg: "fmt", type: $error, tag: ""}]);
	ss.init([{prop: "rr", name: "rr", pkg: "fmt", type: io.RuneReader, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", type: buffer, tag: ""}, {prop: "peekRune", name: "peekRune", pkg: "fmt", type: $Int32, tag: ""}, {prop: "prevRune", name: "prevRune", pkg: "fmt", type: $Int32, tag: ""}, {prop: "count", name: "count", pkg: "fmt", type: $Int, tag: ""}, {prop: "atEOF", name: "atEOF", pkg: "fmt", type: $Bool, tag: ""}, {prop: "ssave", name: "", pkg: "fmt", type: ssave, tag: ""}]);
	ssave.init([{prop: "validSave", name: "validSave", pkg: "fmt", type: $Bool, tag: ""}, {prop: "nlIsEnd", name: "nlIsEnd", pkg: "fmt", type: $Bool, tag: ""}, {prop: "nlIsSpace", name: "nlIsSpace", pkg: "fmt", type: $Bool, tag: ""}, {prop: "argLimit", name: "argLimit", pkg: "fmt", type: $Int, tag: ""}, {prop: "limit", name: "limit", pkg: "fmt", type: $Int, tag: ""}, {prop: "maxWid", name: "maxWid", pkg: "fmt", type: $Int, tag: ""}]);
	readRune.init([{prop: "reader", name: "reader", pkg: "fmt", type: io.Reader, tag: ""}, {prop: "buf", name: "buf", pkg: "fmt", type: arrayType$1, tag: ""}, {prop: "pending", name: "pending", pkg: "fmt", type: $Int, tag: ""}, {prop: "pendBuf", name: "pendBuf", pkg: "fmt", type: arrayType$1, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_fmt = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = math.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = os.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = reflect.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		padZeroBytes = sliceType.make(65);
		padSpaceBytes = sliceType.make(65);
		trueBytes = new sliceType($stringToBytes("true"));
		falseBytes = new sliceType($stringToBytes("false"));
		commaSpaceBytes = new sliceType($stringToBytes(", "));
		nilAngleBytes = new sliceType($stringToBytes("<nil>"));
		nilParenBytes = new sliceType($stringToBytes("(nil)"));
		nilBytes = new sliceType($stringToBytes("nil"));
		mapBytes = new sliceType($stringToBytes("map["));
		percentBangBytes = new sliceType($stringToBytes("%!"));
		missingBytes = new sliceType($stringToBytes("(MISSING)"));
		badIndexBytes = new sliceType($stringToBytes("(BADINDEX)"));
		panicBytes = new sliceType($stringToBytes("(PANIC="));
		extraBytes = new sliceType($stringToBytes("%!(EXTRA "));
		irparenBytes = new sliceType($stringToBytes("i)"));
		bytesBytes = new sliceType($stringToBytes("[]byte{"));
		badWidthBytes = new sliceType($stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new sliceType($stringToBytes("%!(BADPREC)"));
		noVerbBytes = new sliceType($stringToBytes("%!(NOVERB)"));
		ppFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			return new pp.ptr();
		}));
		intBits = reflect.TypeOf(new $Int(0)).Bits();
		uintptrBits = reflect.TypeOf(new $Uintptr(0)).Bits();
		byteType = reflect.TypeOf(new $Uint8(0));
		space = new sliceType$2([$toNativeArray($kindUint16, [9, 13]), $toNativeArray($kindUint16, [32, 32]), $toNativeArray($kindUint16, [133, 133]), $toNativeArray($kindUint16, [160, 160]), $toNativeArray($kindUint16, [5760, 5760]), $toNativeArray($kindUint16, [8192, 8202]), $toNativeArray($kindUint16, [8232, 8233]), $toNativeArray($kindUint16, [8239, 8239]), $toNativeArray($kindUint16, [8287, 8287]), $toNativeArray($kindUint16, [12288, 12288])]);
		ssFree = new sync.Pool.ptr(0, 0, sliceType$1.nil, (function() {
			return new ss.ptr();
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		init();
		/* */ } return; } }; $init_fmt.$blocking = true; return $init_fmt;
	};
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, StringSlice, sliceType$2, ptrType$3, Search, SearchStrings, min, insertionSort, siftDown, heapSort, medianOfThree, swapRange, doPivot, quickSort, Sort, Strings;
	StringSlice = $pkg.StringSlice = $newType(12, $kindSlice, "sort.StringSlice", "StringSlice", "sort", null);
		sliceType$2 = $sliceType($String);
		ptrType$3 = $ptrType(StringSlice);
	Search = $pkg.Search = function(n, f) {
		var _q, _tmp, _tmp$1, h, i, j;
		_tmp = 0; _tmp$1 = n; i = _tmp; j = _tmp$1;
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (!f(h)) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	SearchStrings = $pkg.SearchStrings = function(a, x) {
		return Search(a.$length, (function(i) {
			return ((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]) >= x;
		}));
	};
	StringSlice.prototype.Search = function(x) {
		var p;
		p = this;
		return SearchStrings($subslice(new sliceType$2(p.$array), p.$offset, p.$offset + p.$length), x);
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	min = function(a, b) {
		if (a < b) {
			return a;
		}
		return b;
	};
	insertionSort = function(data, a, b) {
		var i, j;
		i = a + 1 >> 0;
		while (i < b) {
			j = i;
			while (j > a && data.Less(j, j - 1 >> 0)) {
				data.Swap(j, j - 1 >> 0);
				j = j - (1) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	siftDown = function(data, lo, hi, first) {
		var child, root;
		root = lo;
		while (true) {
			child = (2 * root >> 0) + 1 >> 0;
			if (child >= hi) {
				break;
			}
			if ((child + 1 >> 0) < hi && data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0)) {
				child = child + (1) >> 0;
			}
			if (!data.Less(first + root >> 0, first + child >> 0)) {
				return;
			}
			data.Swap(first + root >> 0, first + child >> 0);
			root = child;
		}
	};
	heapSort = function(data, a, b) {
		var _q, first, hi, i, i$1, lo;
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		while (i >= 0) {
			siftDown(data, i, hi, first);
			i = i - (1) >> 0;
		}
		i$1 = hi - 1 >> 0;
		while (i$1 >= 0) {
			data.Swap(first, first + i$1 >> 0);
			siftDown(data, lo, i$1, first);
			i$1 = i$1 - (1) >> 0;
		}
	};
	medianOfThree = function(data, a, b, c) {
		var m0, m1, m2;
		m0 = b;
		m1 = a;
		m2 = c;
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
		if (data.Less(m2, m1)) {
			data.Swap(m2, m1);
		}
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
	};
	swapRange = function(data, a, b, n) {
		var i;
		i = 0;
		while (i < n) {
			data.Swap(a + i >> 0, b + i >> 0);
			i = i + (1) >> 0;
		}
	};
	doPivot = function(data, lo, hi) {
		var _q, _q$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, a, b, c, d, m, midhi = 0, midlo = 0, n, pivot, s;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		if ((hi - lo >> 0) > 40) {
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			medianOfThree(data, lo, lo + s >> 0, lo + (2 * s >> 0) >> 0);
			medianOfThree(data, m, m - s >> 0, m + s >> 0);
			medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - (2 * s >> 0) >> 0);
		}
		medianOfThree(data, lo, m, hi - 1 >> 0);
		pivot = lo;
		_tmp = lo + 1 >> 0; _tmp$1 = lo + 1 >> 0; _tmp$2 = hi; _tmp$3 = hi; a = _tmp; b = _tmp$1; c = _tmp$2; d = _tmp$3;
		while (true) {
			while (b < c) {
				if (data.Less(b, pivot)) {
					b = b + (1) >> 0;
				} else if (!data.Less(pivot, b)) {
					data.Swap(a, b);
					a = a + (1) >> 0;
					b = b + (1) >> 0;
				} else {
					break;
				}
			}
			while (b < c) {
				if (data.Less(pivot, c - 1 >> 0)) {
					c = c - (1) >> 0;
				} else if (!data.Less(c - 1 >> 0, pivot)) {
					data.Swap(c - 1 >> 0, d - 1 >> 0);
					c = c - (1) >> 0;
					d = d - (1) >> 0;
				} else {
					break;
				}
			}
			if (b >= c) {
				break;
			}
			data.Swap(b, c - 1 >> 0);
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		}
		n = min(b - a >> 0, a - lo >> 0);
		swapRange(data, lo, b - n >> 0, n);
		n = min(hi - d >> 0, d - c >> 0);
		swapRange(data, c, hi - n >> 0, n);
		_tmp$4 = (lo + b >> 0) - a >> 0; _tmp$5 = hi - ((d - c >> 0)) >> 0; midlo = _tmp$4; midhi = _tmp$5;
		return [midlo, midhi];
	};
	quickSort = function(data, a, b, maxDepth) {
		var _tuple, mhi, mlo;
		while ((b - a >> 0) > 7) {
			if (maxDepth === 0) {
				heapSort(data, a, b);
				return;
			}
			maxDepth = maxDepth - (1) >> 0;
			_tuple = doPivot(data, a, b); mlo = _tuple[0]; mhi = _tuple[1];
			if ((mlo - a >> 0) < (b - mhi >> 0)) {
				quickSort(data, a, mlo, maxDepth);
				a = mhi;
			} else {
				quickSort(data, mhi, b, maxDepth);
				b = mlo;
			}
		}
		if ((b - a >> 0) > 1) {
			insertionSort(data, a, b);
		}
	};
	Sort = $pkg.Sort = function(data) {
		var i, maxDepth, n;
		n = data.Len();
		maxDepth = 0;
		i = n;
		while (i > 0) {
			maxDepth = maxDepth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		maxDepth = maxDepth * (2) >> 0;
		quickSort(data, 0, n, maxDepth);
	};
	StringSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var p;
		p = this;
		return ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, p;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]); _tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]); (i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp; (j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$1;
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var p;
		p = this;
		Sort(p);
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Strings = $pkg.Strings = function(a) {
		Sort($subslice(new StringSlice(a.$array), a.$offset, a.$offset + a.$length));
	};
	StringSlice.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Search", name: "Search", pkg: "", type: $funcType([$String], [$Int], false)}, {prop: "Sort", name: "Sort", pkg: "", type: $funcType([], [], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	ptrType$3.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Search", name: "Search", pkg: "", type: $funcType([$String], [$Int], false)}, {prop: "Sort", name: "Sort", pkg: "", type: $funcType([], [], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	StringSlice.init($String);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_sort = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_sort.$blocking = true; return $init_sort;
	};
	return $pkg;
})();
$packages["flag"] = (function() {
	var $pkg = {}, errors, fmt, io, os, sort, strconv, time, boolValue, boolFlag, intValue, int64Value, uintValue, uint64Value, stringValue, float64Value, durationValue, Value, ErrorHandling, FlagSet, Flag, sliceType, ptrType, ptrType$1, ptrType$2, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, sliceType$1, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, sliceType$2, funcType, ptrType$17, funcType$1, mapType, x, newBoolValue, newIntValue, newInt64Value, newUintValue, newUint64Value, newStringValue, newFloat64Value, newDurationValue, sortFlags, PrintDefaults, defaultUsage, Bool, Int, String, Duration, NewFlagSet;
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	os = $packages["os"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	time = $packages["time"];
	boolValue = $pkg.boolValue = $newType(1, $kindBool, "flag.boolValue", "boolValue", "flag", null);
	boolFlag = $pkg.boolFlag = $newType(8, $kindInterface, "flag.boolFlag", "boolFlag", "flag", null);
	intValue = $pkg.intValue = $newType(4, $kindInt, "flag.intValue", "intValue", "flag", null);
	int64Value = $pkg.int64Value = $newType(8, $kindInt64, "flag.int64Value", "int64Value", "flag", null);
	uintValue = $pkg.uintValue = $newType(4, $kindUint, "flag.uintValue", "uintValue", "flag", null);
	uint64Value = $pkg.uint64Value = $newType(8, $kindUint64, "flag.uint64Value", "uint64Value", "flag", null);
	stringValue = $pkg.stringValue = $newType(8, $kindString, "flag.stringValue", "stringValue", "flag", null);
	float64Value = $pkg.float64Value = $newType(8, $kindFloat64, "flag.float64Value", "float64Value", "flag", null);
	durationValue = $pkg.durationValue = $newType(8, $kindInt64, "flag.durationValue", "durationValue", "flag", null);
	Value = $pkg.Value = $newType(8, $kindInterface, "flag.Value", "Value", "flag", null);
	ErrorHandling = $pkg.ErrorHandling = $newType(4, $kindInt, "flag.ErrorHandling", "ErrorHandling", "flag", null);
	FlagSet = $pkg.FlagSet = $newType(0, $kindStruct, "flag.FlagSet", "FlagSet", "flag", function(Usage_, name_, parsed_, actual_, formal_, args_, errorHandling_, output_) {
		this.$val = this;
		this.Usage = Usage_ !== undefined ? Usage_ : $throwNilPointerError;
		this.name = name_ !== undefined ? name_ : "";
		this.parsed = parsed_ !== undefined ? parsed_ : false;
		this.actual = actual_ !== undefined ? actual_ : false;
		this.formal = formal_ !== undefined ? formal_ : false;
		this.args = args_ !== undefined ? args_ : sliceType$2.nil;
		this.errorHandling = errorHandling_ !== undefined ? errorHandling_ : 0;
		this.output = output_ !== undefined ? output_ : $ifaceNil;
	});
	Flag = $pkg.Flag = $newType(0, $kindStruct, "flag.Flag", "Flag", "flag", function(Name_, Usage_, Value_, DefValue_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Usage = Usage_ !== undefined ? Usage_ : "";
		this.Value = Value_ !== undefined ? Value_ : $ifaceNil;
		this.DefValue = DefValue_ !== undefined ? DefValue_ : "";
	});
		sliceType = $sliceType($emptyInterface);
		ptrType = $ptrType(boolValue);
		ptrType$1 = $ptrType(intValue);
		ptrType$2 = $ptrType(int64Value);
		ptrType$3 = $ptrType(uintValue);
		ptrType$4 = $ptrType(uint64Value);
		ptrType$5 = $ptrType(stringValue);
		ptrType$6 = $ptrType(float64Value);
		ptrType$7 = $ptrType(durationValue);
		ptrType$8 = $ptrType(time.Duration);
		ptrType$9 = $ptrType(Flag);
		sliceType$1 = $sliceType(ptrType$9);
		ptrType$10 = $ptrType($Bool);
		ptrType$11 = $ptrType($Int);
		ptrType$12 = $ptrType($Int64);
		ptrType$13 = $ptrType($Uint);
		ptrType$14 = $ptrType($Uint64);
		ptrType$15 = $ptrType($String);
		ptrType$16 = $ptrType($Float64);
		sliceType$2 = $sliceType($String);
		funcType = $funcType([ptrType$9], [], false);
		ptrType$17 = $ptrType(FlagSet);
		funcType$1 = $funcType([], [], false);
		mapType = $mapType($String, ptrType$9);
	newBoolValue = function(val, p) {
		p.$set(val);
		return new ptrType(p.$get, p.$set);
	};
	$ptrType(boolValue).prototype.Set = function(s) {
		var _tuple, b, err, v;
		b = this;
		_tuple = strconv.ParseBool(s); v = _tuple[0]; err = _tuple[1];
		b.$set(v);
		return err;
	};
	$ptrType(boolValue).prototype.Get = function() {
		var b;
		b = this;
		return new $Bool(b.$get());
	};
	$ptrType(boolValue).prototype.String = function() {
		var b;
		b = this;
		return fmt.Sprintf("%v", new sliceType([new boolValue(b.$get())]));
	};
	$ptrType(boolValue).prototype.IsBoolFlag = function() {
		var b;
		b = this;
		return true;
	};
	newIntValue = function(val, p) {
		p.$set(val);
		return new ptrType$1(p.$get, p.$set);
	};
	$ptrType(intValue).prototype.Set = function(s) {
		var _tuple, err, i, v;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set(((v.$low + ((v.$high >> 31) * 4294967296)) >> 0));
		return err;
	};
	$ptrType(intValue).prototype.Get = function() {
		var i;
		i = this;
		return new $Int((i.$get() >> 0));
	};
	$ptrType(intValue).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new sliceType([new intValue(i.$get())]));
	};
	newInt64Value = function(val, p) {
		p.$set(val);
		return new ptrType$2(p.$get, p.$set);
	};
	$ptrType(int64Value).prototype.Set = function(s) {
		var _tuple, err, i, v;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set(new int64Value(v.$high, v.$low));
		return err;
	};
	$ptrType(int64Value).prototype.Get = function() {
		var i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Int64(x$1.$high, x$1.$low));
	};
	$ptrType(int64Value).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new sliceType([i.$get()]));
	};
	newUintValue = function(val, p) {
		p.$set(val);
		return new ptrType$3(p.$get, p.$set);
	};
	$ptrType(uintValue).prototype.Set = function(s) {
		var _tuple, err, i, v;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set((v.$low >>> 0));
		return err;
	};
	$ptrType(uintValue).prototype.Get = function() {
		var i;
		i = this;
		return new $Uint((i.$get() >>> 0));
	};
	$ptrType(uintValue).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new sliceType([new uintValue(i.$get())]));
	};
	newUint64Value = function(val, p) {
		p.$set(val);
		return new ptrType$4(p.$get, p.$set);
	};
	$ptrType(uint64Value).prototype.Set = function(s) {
		var _tuple, err, i, v;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set(new uint64Value(v.$high, v.$low));
		return err;
	};
	$ptrType(uint64Value).prototype.Get = function() {
		var i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Uint64(x$1.$high, x$1.$low));
	};
	$ptrType(uint64Value).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new sliceType([i.$get()]));
	};
	newStringValue = function(val, p) {
		p.$set(val);
		return new ptrType$5(p.$get, p.$set);
	};
	$ptrType(stringValue).prototype.Set = function(val) {
		var s;
		s = this;
		s.$set(val);
		return $ifaceNil;
	};
	$ptrType(stringValue).prototype.Get = function() {
		var s;
		s = this;
		return new $String(s.$get());
	};
	$ptrType(stringValue).prototype.String = function() {
		var s;
		s = this;
		return fmt.Sprintf("%s", new sliceType([new stringValue(s.$get())]));
	};
	newFloat64Value = function(val, p) {
		p.$set(val);
		return new ptrType$6(p.$get, p.$set);
	};
	$ptrType(float64Value).prototype.Set = function(s) {
		var _tuple, err, f, v;
		f = this;
		_tuple = strconv.ParseFloat(s, 64); v = _tuple[0]; err = _tuple[1];
		f.$set(v);
		return err;
	};
	$ptrType(float64Value).prototype.Get = function() {
		var f;
		f = this;
		return new $Float64(f.$get());
	};
	$ptrType(float64Value).prototype.String = function() {
		var f;
		f = this;
		return fmt.Sprintf("%v", new sliceType([new float64Value(f.$get())]));
	};
	newDurationValue = function(val, p) {
		p.$set(val);
		return new ptrType$7(p.$get, p.$set);
	};
	$ptrType(durationValue).prototype.Set = function(s) {
		var _tuple, d, err, v;
		d = this;
		_tuple = time.ParseDuration(s); v = _tuple[0]; err = _tuple[1];
		d.$set(new durationValue(v.$high, v.$low));
		return err;
	};
	$ptrType(durationValue).prototype.Get = function() {
		var d, x$1;
		d = this;
		return (x$1 = d.$get(), new time.Duration(x$1.$high, x$1.$low));
	};
	$ptrType(durationValue).prototype.String = function() {
		var d;
		d = this;
		return new ptrType$8(d.$get, d.$set).String();
	};
	sortFlags = function(flags) {
		var _entry, _entry$1, _i, _i$1, _keys, _ref, _ref$1, f, i, i$1, list, name, result;
		list = sort.StringSlice.make($keys(flags).length);
		i = 0;
		_ref = flags;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			f = _entry.v;
			(i < 0 || i >= list.$length) ? $throwRuntimeError("index out of range") : list.$array[list.$offset + i] = f.Name;
			i = i + (1) >> 0;
			_i++;
		}
		list.Sort();
		result = sliceType$1.make(list.$length);
		_ref$1 = list;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			i$1 = _i$1;
			name = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			(i$1 < 0 || i$1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + i$1] = (_entry$1 = flags[name], _entry$1 !== undefined ? _entry$1.v : ptrType$9.nil);
			_i$1++;
		}
		return result;
	};
	FlagSet.ptr.prototype.out = function() {
		var f;
		f = this;
		if ($interfaceIsEqual(f.output, $ifaceNil)) {
			return os.Stderr;
		}
		return f.output;
	};
	FlagSet.prototype.out = function() { return this.$val.out(); };
	FlagSet.ptr.prototype.SetOutput = function(output) {
		var f;
		f = this;
		f.output = output;
	};
	FlagSet.prototype.SetOutput = function(output) { return this.$val.SetOutput(output); };
	FlagSet.ptr.prototype.VisitAll = function(fn) {
		var _i, _ref, f, flag;
		f = this;
		_ref = sortFlags(f.formal);
		_i = 0;
		while (_i < _ref.$length) {
			flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			fn(flag);
			_i++;
		}
	};
	FlagSet.prototype.VisitAll = function(fn) { return this.$val.VisitAll(fn); };
	FlagSet.ptr.prototype.Visit = function(fn) {
		var _i, _ref, f, flag;
		f = this;
		_ref = sortFlags(f.actual);
		_i = 0;
		while (_i < _ref.$length) {
			flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			fn(flag);
			_i++;
		}
	};
	FlagSet.prototype.Visit = function(fn) { return this.$val.Visit(fn); };
	FlagSet.ptr.prototype.Lookup = function(name) {
		var _entry, f;
		f = this;
		return (_entry = f.formal[name], _entry !== undefined ? _entry.v : ptrType$9.nil);
	};
	FlagSet.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	FlagSet.ptr.prototype.Set = function(name, value) {
		var _entry, _key, _tuple, err, f, flag, ok;
		f = this;
		_tuple = (_entry = f.formal[name], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]); flag = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return fmt.Errorf("no such flag -%v", new sliceType([new $String(name)]));
		}
		err = flag.Value.Set(value);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (f.actual === false) {
			f.actual = new $Map();
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: flag };
		return $ifaceNil;
	};
	FlagSet.prototype.Set = function(name, value) { return this.$val.Set(name, value); };
	FlagSet.ptr.prototype.PrintDefaults = function() {
		var f;
		f = this;
		f.VisitAll((function(flag) {
			var _tuple, format, ok;
			format = "  -%s=%s: %s\n";
			_tuple = $assertType(flag.Value, ptrType$5, true); ok = _tuple[1];
			if (ok) {
				format = "  -%s=%q: %s\n";
			}
			fmt.Fprintf(f.out(), format, new sliceType([new $String(flag.Name), new $String(flag.DefValue), new $String(flag.Usage)]));
		}));
	};
	FlagSet.prototype.PrintDefaults = function() { return this.$val.PrintDefaults(); };
	PrintDefaults = $pkg.PrintDefaults = function() {
		$pkg.CommandLine.PrintDefaults();
	};
	defaultUsage = function(f) {
		if (f.name === "") {
			fmt.Fprintf(f.out(), "Usage:\n", new sliceType([]));
		} else {
			fmt.Fprintf(f.out(), "Usage of %s:\n", new sliceType([new $String(f.name)]));
		}
		f.PrintDefaults();
	};
	FlagSet.ptr.prototype.NFlag = function() {
		var f;
		f = this;
		return $keys(f.actual).length;
	};
	FlagSet.prototype.NFlag = function() { return this.$val.NFlag(); };
	FlagSet.ptr.prototype.Arg = function(i) {
		var f, x$1;
		f = this;
		if (i < 0 || i >= f.args.$length) {
			return "";
		}
		return (x$1 = f.args, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
	};
	FlagSet.prototype.Arg = function(i) { return this.$val.Arg(i); };
	FlagSet.ptr.prototype.NArg = function() {
		var f;
		f = this;
		return f.args.$length;
	};
	FlagSet.prototype.NArg = function() { return this.$val.NArg(); };
	FlagSet.ptr.prototype.Args = function() {
		var f;
		f = this;
		return f.args;
	};
	FlagSet.prototype.Args = function() { return this.$val.Args(); };
	FlagSet.ptr.prototype.BoolVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newBoolValue(value, p), name, usage);
	};
	FlagSet.prototype.BoolVar = function(p, name, value, usage) { return this.$val.BoolVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Bool = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(false, ptrType$10);
		f.BoolVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Bool = function(name, value, usage) { return this.$val.Bool(name, value, usage); };
	Bool = $pkg.Bool = function(name, value, usage) {
		return $pkg.CommandLine.Bool(name, value, usage);
	};
	FlagSet.ptr.prototype.IntVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newIntValue(value, p), name, usage);
	};
	FlagSet.prototype.IntVar = function(p, name, value, usage) { return this.$val.IntVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Int = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(0, ptrType$11);
		f.IntVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Int = function(name, value, usage) { return this.$val.Int(name, value, usage); };
	Int = $pkg.Int = function(name, value, usage) {
		return $pkg.CommandLine.Int(name, value, usage);
	};
	FlagSet.ptr.prototype.Int64Var = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newInt64Value(value, p), name, usage);
	};
	FlagSet.prototype.Int64Var = function(p, name, value, usage) { return this.$val.Int64Var(p, name, value, usage); };
	FlagSet.ptr.prototype.Int64 = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(new $Int64(0, 0), ptrType$12);
		f.Int64Var(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Int64 = function(name, value, usage) { return this.$val.Int64(name, value, usage); };
	FlagSet.ptr.prototype.UintVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newUintValue(value, p), name, usage);
	};
	FlagSet.prototype.UintVar = function(p, name, value, usage) { return this.$val.UintVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Uint = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(0, ptrType$13);
		f.UintVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Uint = function(name, value, usage) { return this.$val.Uint(name, value, usage); };
	FlagSet.ptr.prototype.Uint64Var = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newUint64Value(value, p), name, usage);
	};
	FlagSet.prototype.Uint64Var = function(p, name, value, usage) { return this.$val.Uint64Var(p, name, value, usage); };
	FlagSet.ptr.prototype.Uint64 = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(new $Uint64(0, 0), ptrType$14);
		f.Uint64Var(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Uint64 = function(name, value, usage) { return this.$val.Uint64(name, value, usage); };
	FlagSet.ptr.prototype.StringVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newStringValue(value, p), name, usage);
	};
	FlagSet.prototype.StringVar = function(p, name, value, usage) { return this.$val.StringVar(p, name, value, usage); };
	FlagSet.ptr.prototype.String = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer("", ptrType$15);
		f.StringVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.String = function(name, value, usage) { return this.$val.String(name, value, usage); };
	String = $pkg.String = function(name, value, usage) {
		return $pkg.CommandLine.String(name, value, usage);
	};
	FlagSet.ptr.prototype.Float64Var = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newFloat64Value(value, p), name, usage);
	};
	FlagSet.prototype.Float64Var = function(p, name, value, usage) { return this.$val.Float64Var(p, name, value, usage); };
	FlagSet.ptr.prototype.Float64 = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(0, ptrType$16);
		f.Float64Var(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Float64 = function(name, value, usage) { return this.$val.Float64(name, value, usage); };
	FlagSet.ptr.prototype.DurationVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newDurationValue(value, p), name, usage);
	};
	FlagSet.prototype.DurationVar = function(p, name, value, usage) { return this.$val.DurationVar(p, name, value, usage); };
	FlagSet.ptr.prototype.Duration = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(new time.Duration(0, 0), ptrType$8);
		f.DurationVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Duration = function(name, value, usage) { return this.$val.Duration(name, value, usage); };
	Duration = $pkg.Duration = function(name, value, usage) {
		return $pkg.CommandLine.Duration(name, value, usage);
	};
	FlagSet.ptr.prototype.Var = function(value, name, usage) {
		var _entry, _key, _tuple, alreadythere, f, flag, msg;
		f = this;
		flag = new Flag.ptr(name, usage, value, value.String());
		_tuple = (_entry = f.formal[name], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]); alreadythere = _tuple[1];
		if (alreadythere) {
			msg = "";
			if (f.name === "") {
				msg = fmt.Sprintf("flag redefined: %s", new sliceType([new $String(name)]));
			} else {
				msg = fmt.Sprintf("%s flag redefined: %s", new sliceType([new $String(f.name), new $String(name)]));
			}
			fmt.Fprintln(f.out(), new sliceType([new $String(msg)]));
			$panic(new $String(msg));
		}
		if (f.formal === false) {
			f.formal = new $Map();
		}
		_key = name; (f.formal || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: flag };
	};
	FlagSet.prototype.Var = function(value, name, usage) { return this.$val.Var(value, name, usage); };
	FlagSet.ptr.prototype.failf = function(format, a) {
		var err, f;
		f = this;
		err = fmt.Errorf(format, a);
		fmt.Fprintln(f.out(), new sliceType([err]));
		f.usage();
		return err;
	};
	FlagSet.prototype.failf = function(format, a) { return this.$val.failf(format, a); };
	FlagSet.ptr.prototype.usage = function() {
		var f;
		f = this;
		if (f.Usage === $throwNilPointerError) {
			if (f === $pkg.CommandLine) {
				$pkg.Usage();
			} else {
				defaultUsage(f);
			}
		} else {
			f.Usage();
		}
	};
	FlagSet.prototype.usage = function() { return this.$val.usage(); };
	FlagSet.ptr.prototype.parseOne = function() {
		var _entry, _key, _tmp, _tmp$1, _tuple, _tuple$1, alreadythere, err, err$1, f, flag, fv, has_value, i, m, name, num_minuses, ok, s, value, x$1, x$2;
		f = this;
		if (f.args.$length === 0) {
			return [false, $ifaceNil];
		}
		s = (x$1 = f.args, ((0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]));
		if ((s.length === 0) || !((s.charCodeAt(0) === 45)) || (s.length === 1)) {
			return [false, $ifaceNil];
		}
		num_minuses = 1;
		if (s.charCodeAt(1) === 45) {
			num_minuses = num_minuses + (1) >> 0;
			if (s.length === 2) {
				f.args = $subslice(f.args, 1);
				return [false, $ifaceNil];
			}
		}
		name = s.substring(num_minuses);
		if ((name.length === 0) || (name.charCodeAt(0) === 45) || (name.charCodeAt(0) === 61)) {
			return [false, f.failf("bad flag syntax: %s", new sliceType([new $String(s)]))];
		}
		f.args = $subslice(f.args, 1);
		has_value = false;
		value = "";
		i = 1;
		while (i < name.length) {
			if (name.charCodeAt(i) === 61) {
				value = name.substring((i + 1 >> 0));
				has_value = true;
				name = name.substring(0, i);
				break;
			}
			i = i + (1) >> 0;
		}
		m = f.formal;
		_tuple = (_entry = m[name], _entry !== undefined ? [_entry.v, true] : [ptrType$9.nil, false]); flag = _tuple[0]; alreadythere = _tuple[1];
		if (!alreadythere) {
			if (name === "help" || name === "h") {
				f.usage();
				return [false, $pkg.ErrHelp];
			}
			return [false, f.failf("flag provided but not defined: -%s", new sliceType([new $String(name)]))];
		}
		_tuple$1 = $assertType(flag.Value, boolFlag, true); fv = _tuple$1[0]; ok = _tuple$1[1];
		if (ok && fv.IsBoolFlag()) {
			if (has_value) {
				err = fv.Set(value);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [false, f.failf("invalid boolean value %q for -%s: %v", new sliceType([new $String(value), new $String(name), err]))];
				}
			} else {
				fv.Set("true");
			}
		} else {
			if (!has_value && f.args.$length > 0) {
				has_value = true;
				_tmp = (x$2 = f.args, ((0 < 0 || 0 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])); _tmp$1 = $subslice(f.args, 1); value = _tmp; f.args = _tmp$1;
			}
			if (!has_value) {
				return [false, f.failf("flag needs an argument: -%s", new sliceType([new $String(name)]))];
			}
			err$1 = flag.Value.Set(value);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [false, f.failf("invalid value %q for flag -%s: %v", new sliceType([new $String(value), new $String(name), err$1]))];
			}
		}
		if (f.actual === false) {
			f.actual = new $Map();
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: flag };
		return [true, $ifaceNil];
	};
	FlagSet.prototype.parseOne = function() { return this.$val.parseOne(); };
	FlagSet.ptr.prototype.Parse = function(arguments$1) {
		var _ref, _tuple, err, f, seen;
		f = this;
		f.parsed = true;
		f.args = arguments$1;
		while (true) {
			_tuple = f.parseOne(); seen = _tuple[0]; err = _tuple[1];
			if (seen) {
				continue;
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				break;
			}
			_ref = f.errorHandling;
			if (_ref === 0) {
				return err;
			} else if (_ref === 1) {
				os.Exit(2);
			} else if (_ref === 2) {
				$panic(err);
			}
		}
		return $ifaceNil;
	};
	FlagSet.prototype.Parse = function(arguments$1) { return this.$val.Parse(arguments$1); };
	FlagSet.ptr.prototype.Parsed = function() {
		var f;
		f = this;
		return f.parsed;
	};
	FlagSet.prototype.Parsed = function() { return this.$val.Parsed(); };
	NewFlagSet = $pkg.NewFlagSet = function(name, errorHandling) {
		var f;
		f = new FlagSet.ptr($throwNilPointerError, name, false, false, false, sliceType$2.nil, errorHandling, $ifaceNil);
		return f;
	};
	FlagSet.ptr.prototype.Init = function(name, errorHandling) {
		var f;
		f = this;
		f.name = name;
		f.errorHandling = errorHandling;
	};
	FlagSet.prototype.Init = function(name, errorHandling) { return this.$val.Init(name, errorHandling); };
	ptrType.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "IsBoolFlag", name: "IsBoolFlag", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$1.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$3.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$5.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$6.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$7.methods = [{prop: "Get", name: "Get", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$17.methods = [{prop: "Arg", name: "Arg", pkg: "", type: $funcType([$Int], [$String], false)}, {prop: "Args", name: "Args", pkg: "", type: $funcType([], [sliceType$2], false)}, {prop: "Bool", name: "Bool", pkg: "", type: $funcType([$String, $Bool, $String], [ptrType$10], false)}, {prop: "BoolVar", name: "BoolVar", pkg: "", type: $funcType([ptrType$10, $String, $Bool, $String], [], false)}, {prop: "Duration", name: "Duration", pkg: "", type: $funcType([$String, time.Duration, $String], [ptrType$8], false)}, {prop: "DurationVar", name: "DurationVar", pkg: "", type: $funcType([ptrType$8, $String, time.Duration, $String], [], false)}, {prop: "Float64", name: "Float64", pkg: "", type: $funcType([$String, $Float64, $String], [ptrType$16], false)}, {prop: "Float64Var", name: "Float64Var", pkg: "", type: $funcType([ptrType$16, $String, $Float64, $String], [], false)}, {prop: "Init", name: "Init", pkg: "", type: $funcType([$String, ErrorHandling], [], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([$String, $Int, $String], [ptrType$11], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([$String, $Int64, $String], [ptrType$12], false)}, {prop: "Int64Var", name: "Int64Var", pkg: "", type: $funcType([ptrType$12, $String, $Int64, $String], [], false)}, {prop: "IntVar", name: "IntVar", pkg: "", type: $funcType([ptrType$11, $String, $Int, $String], [], false)}, {prop: "Lookup", name: "Lookup", pkg: "", type: $funcType([$String], [ptrType$9], false)}, {prop: "NArg", name: "NArg", pkg: "", type: $funcType([], [$Int], false)}, {prop: "NFlag", name: "NFlag", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Parse", name: "Parse", pkg: "", type: $funcType([sliceType$2], [$error], false)}, {prop: "Parsed", name: "Parsed", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "PrintDefaults", name: "PrintDefaults", pkg: "", type: $funcType([], [], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, $String], [$error], false)}, {prop: "SetOutput", name: "SetOutput", pkg: "", type: $funcType([io.Writer], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([$String, $String, $String], [ptrType$15], false)}, {prop: "StringVar", name: "StringVar", pkg: "", type: $funcType([ptrType$15, $String, $String, $String], [], false)}, {prop: "Uint", name: "Uint", pkg: "", type: $funcType([$String, $Uint, $String], [ptrType$13], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([$String, $Uint64, $String], [ptrType$14], false)}, {prop: "Uint64Var", name: "Uint64Var", pkg: "", type: $funcType([ptrType$14, $String, $Uint64, $String], [], false)}, {prop: "UintVar", name: "UintVar", pkg: "", type: $funcType([ptrType$13, $String, $Uint, $String], [], false)}, {prop: "Var", name: "Var", pkg: "", type: $funcType([Value, $String, $String], [], false)}, {prop: "Visit", name: "Visit", pkg: "", type: $funcType([funcType], [], false)}, {prop: "VisitAll", name: "VisitAll", pkg: "", type: $funcType([funcType], [], false)}, {prop: "failf", name: "failf", pkg: "flag", type: $funcType([$String, sliceType], [$error], true)}, {prop: "out", name: "out", pkg: "flag", type: $funcType([], [io.Writer], false)}, {prop: "parseOne", name: "parseOne", pkg: "flag", type: $funcType([], [$Bool, $error], false)}, {prop: "usage", name: "usage", pkg: "flag", type: $funcType([], [], false)}];
	boolFlag.init([{prop: "IsBoolFlag", name: "IsBoolFlag", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}]);
	Value.init([{prop: "Set", name: "Set", pkg: "", type: $funcType([$String], [$error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}]);
	FlagSet.init([{prop: "Usage", name: "Usage", pkg: "", type: funcType$1, tag: ""}, {prop: "name", name: "name", pkg: "flag", type: $String, tag: ""}, {prop: "parsed", name: "parsed", pkg: "flag", type: $Bool, tag: ""}, {prop: "actual", name: "actual", pkg: "flag", type: mapType, tag: ""}, {prop: "formal", name: "formal", pkg: "flag", type: mapType, tag: ""}, {prop: "args", name: "args", pkg: "flag", type: sliceType$2, tag: ""}, {prop: "errorHandling", name: "errorHandling", pkg: "flag", type: ErrorHandling, tag: ""}, {prop: "output", name: "output", pkg: "flag", type: io.Writer, tag: ""}]);
	Flag.init([{prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}, {prop: "Usage", name: "Usage", pkg: "", type: $String, tag: ""}, {prop: "Value", name: "Value", pkg: "", type: Value, tag: ""}, {prop: "DefValue", name: "DefValue", pkg: "", type: $String, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_flag = function() { while (true) { switch ($s) { case 0:
		$r = errors.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = fmt.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = os.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = sort.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = time.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.ErrHelp = errors.New("flag: help requested");
		$pkg.CommandLine = NewFlagSet((x = os.Args, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), 1);
		$pkg.Usage = (function() {
			var x$1;
			fmt.Fprintf(os.Stderr, "Usage of %s:\n", new sliceType([new $String((x$1 = os.Args, ((0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])))]));
			PrintDefaults();
		});
		/* */ } return; } }; $init_flag.$blocking = true; return $init_flag;
	};
	return $pkg;
})();
$packages["runtime/pprof"] = (function() {
	var $pkg = {}, io, sync;
	io = $packages["io"];
	sync = $packages["sync"];
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_pprof = function() { while (true) { switch ($s) { case 0:
		$r = io.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_pprof.$blocking = true; return $init_pprof;
	};
	return $pkg;
})();
$packages["testing"] = (function() {
	var $pkg = {}, bytes, flag, fmt, nosync, io, os, runtime, pprof, strconv, strings, atomic, time, matchBenchmarks, benchTime, benchmarkMemory, short$1, outputDir, chatty, coverProfile, match, memProfile, memProfileRate, cpuProfile, blockProfile, blockProfileRate, timeout, cpuListStr, parallel;
	bytes = $packages["bytes"];
	flag = $packages["flag"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	pprof = $packages["runtime/pprof"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	atomic = $packages["sync/atomic"];
	time = $packages["time"];
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_testing = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = flag.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = fmt.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = nosync.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = os.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = pprof.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 9; case 9: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 10; case 10: if ($r && $r.$blocking) { $r = $r(); }
		$r = atomic.$init($BLOCKING); /* */ $s = 11; case 11: if ($r && $r.$blocking) { $r = $r(); }
		$r = time.$init($BLOCKING); /* */ $s = 12; case 12: if ($r && $r.$blocking) { $r = $r(); }
		matchBenchmarks = flag.String("test.bench", "", "regular expression to select benchmarks to run");
		benchTime = flag.Duration("test.benchtime", new time.Duration(0, 1000000000), "approximate run time for each benchmark");
		benchmarkMemory = flag.Bool("test.benchmem", false, "print memory allocations for benchmarks");
		short$1 = flag.Bool("test.short", false, "run smaller test suite to save time");
		outputDir = flag.String("test.outputdir", "", "directory in which to write profiles");
		chatty = flag.Bool("test.v", false, "verbose: print additional output");
		coverProfile = flag.String("test.coverprofile", "", "write a coverage profile to the named file after execution");
		match = flag.String("test.run", "", "regular expression to select tests and examples to run");
		memProfile = flag.String("test.memprofile", "", "write a memory profile to the named file after execution");
		memProfileRate = flag.Int("test.memprofilerate", 0, "if >=0, sets runtime.MemProfileRate");
		cpuProfile = flag.String("test.cpuprofile", "", "write a cpu profile to the named file during execution");
		blockProfile = flag.String("test.blockprofile", "", "write a goroutine blocking profile to the named file after execution");
		blockProfileRate = flag.Int("test.blockprofilerate", 1, "if >= 0, calls runtime.SetBlockProfileRate()");
		timeout = flag.Duration("test.timeout", new time.Duration(0, 0), "if positive, sets an aggregate time limit for all tests");
		cpuListStr = flag.String("test.cpu", "", "comma-separated list of number of CPUs to use for each test");
		parallel = flag.Int("test.parallel", runtime.GOMAXPROCS(0), "maximum test parallelism");
		/* */ } return; } }; $init_testing.$blocking = true; return $init_testing;
	};
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, bytes, io, strconv, strings, testing, Encoding, encoder, CorruptInputError, sliceType$1, ptrType, arrayType, arrayType$1, arrayType$2, arrayType$4, ptrType$1, ptrType$2, removeNewlinesMapper, NewEncoding, NewEncoder;
	bytes = $packages["bytes"];
	io = $packages["io"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	testing = $packages["testing"];
	Encoding = $pkg.Encoding = $newType(0, $kindStruct, "base64.Encoding", "Encoding", "encoding/base64", function(encode_, decodeMap_) {
		this.$val = this;
		this.encode = encode_ !== undefined ? encode_ : "";
		this.decodeMap = decodeMap_ !== undefined ? decodeMap_ : arrayType$4.zero();
	});
	encoder = $pkg.encoder = $newType(0, $kindStruct, "base64.encoder", "encoder", "encoding/base64", function(err_, enc_, w_, buf_, nbuf_, out_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.enc = enc_ !== undefined ? enc_ : ptrType.nil;
		this.w = w_ !== undefined ? w_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : arrayType.zero();
		this.nbuf = nbuf_ !== undefined ? nbuf_ : 0;
		this.out = out_ !== undefined ? out_ : arrayType$1.zero();
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, $kindInt64, "base64.CorruptInputError", "CorruptInputError", "encoding/base64", null);
		sliceType$1 = $sliceType($Uint8);
		ptrType = $ptrType(Encoding);
		arrayType = $arrayType($Uint8, 3);
		arrayType$1 = $arrayType($Uint8, 1024);
		arrayType$2 = $arrayType($Uint8, 4);
		arrayType$4 = $arrayType($Uint8, 256);
		ptrType$1 = $ptrType(encoder);
		ptrType$2 = $ptrType(CorruptInputError);
	NewEncoding = $pkg.NewEncoding = function(encoder$1) {
		var e, i, i$1, x, x$1, x$2;
		e = new Encoding.ptr();
		e.encode = encoder$1;
		i = 0;
		while (i < 256) {
			(x = e.decodeMap, (i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 255);
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (i$1 < encoder$1.length) {
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), (x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (i$1 << 24 >>> 24));
			i$1 = i$1 + (1) >> 0;
		}
		return e;
	};
	Encoding.ptr.prototype.Encode = function(dst, src) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, b0, b1, b2, b3, enc;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		while (src.$length > 0) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; _tmp$3 = 0; b0 = _tmp; b1 = _tmp$1; b2 = _tmp$2; b3 = _tmp$3;
			_ref = src.$length;
			if (_ref === 2) {
				b2 = (b2 | (((((((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b1 = ((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 4 << 24 >>> 24;
				b1 = (b1 | (((((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b0 = ((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24;
			} else if (_ref === 1) {
				b1 = (b1 | (((((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b0 = ((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24;
			} else {
				b3 = (((2 < 0 || 2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) & 63) >>> 0;
				b2 = ((2 < 0 || 2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) >>> 6 << 24 >>> 24;
				b2 = (b2 | (((((((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b1 = ((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 4 << 24 >>> 24;
				b1 = (b1 | (((((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				b0 = ((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24;
			}
			(0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = enc.encode.charCodeAt(b0);
			(1 < 0 || 1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = enc.encode.charCodeAt(b1);
			(2 < 0 || 2 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = enc.encode.charCodeAt(b2);
			(3 < 0 || 3 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = enc.encode.charCodeAt(b3);
			if (src.$length < 3) {
				(3 < 0 || 3 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = 61;
				if (src.$length < 2) {
					(2 < 0 || 2 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = 61;
				}
				break;
			}
			src = $subslice(src, 3);
			dst = $subslice(dst, 4);
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.ptr.prototype.EncodeToString = function(src) {
		var buf, enc;
		enc = this;
		buf = sliceType$1.make(enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return $bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	encoder.ptr.prototype.Write = function(p) {
		var _q, _r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, e, err = $ifaceNil, i, i$1, n = 0, nn, x, x$1, x$2;
		e = this;
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			_tmp = 0; _tmp$1 = e.err; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (e.nbuf > 0) {
			i = 0;
			i = 0;
			while (i < p.$length && e.nbuf < 3) {
				(x = e.buf, x$1 = e.nbuf, (x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]));
				e.nbuf = e.nbuf + (1) >> 0;
				i = i + (1) >> 0;
			}
			n = n + (i) >> 0;
			p = $subslice(p, i);
			if (e.nbuf < 3) {
				return [n, err];
			}
			e.enc.Encode($subslice(new sliceType$1(e.out), 0), $subslice(new sliceType$1(e.buf), 0));
			_tuple = e.w.Write($subslice(new sliceType$1(e.out), 0, 4)); e.err = _tuple[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$2 = n; _tmp$3 = e.err; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			e.nbuf = 0;
		}
		while (p.$length >= 3) {
			nn = 768;
			if (nn > p.$length) {
				nn = p.$length;
				nn = nn - ((_r = nn % 3, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))) >> 0;
			}
			e.enc.Encode($subslice(new sliceType$1(e.out), 0), $subslice(p, 0, nn));
			_tuple$1 = e.w.Write($subslice(new sliceType$1(e.out), 0, ((_q = nn / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) * 4 >> 0))); e.err = _tuple$1[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$4 = n; _tmp$5 = e.err; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			n = n + (nn) >> 0;
			p = $subslice(p, nn);
		}
		i$1 = 0;
		while (i$1 < p.$length) {
			(x$2 = e.buf, (i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i$1] = ((i$1 < 0 || i$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i$1]));
			i$1 = i$1 + (1) >> 0;
		}
		e.nbuf = p.$length;
		n = n + (p.$length) >> 0;
		return [n, err];
	};
	encoder.prototype.Write = function(p) { return this.$val.Write(p); };
	encoder.ptr.prototype.Close = function() {
		var _tuple, e;
		e = this;
		if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) {
			e.enc.Encode($subslice(new sliceType$1(e.out), 0), $subslice(new sliceType$1(e.buf), 0, e.nbuf));
			e.nbuf = 0;
			_tuple = e.w.Write($subslice(new sliceType$1(e.out), 0, 4)); e.err = _tuple[1];
		}
		return e.err;
	};
	encoder.prototype.Close = function() { return this.$val.Close(); };
	NewEncoder = $pkg.NewEncoder = function(enc, w) {
		return new encoder.ptr($ifaceNil, enc, w, arrayType.zero(), 0, arrayType$1.zero());
	};
	Encoding.ptr.prototype.EncodedLen = function(n) {
		var _q, enc;
		enc = this;
		return (_q = ((n + 2 >> 0)) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) * 4 >> 0;
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.ptr.prototype.decode = function(dst, src) {
		var _i, _ref, _ref$1, _ref$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, dbuf, dlen, enc, end = false, err = $ifaceNil, in$1, j, n = 0, olen, x;
		enc = this;
		olen = src.$length;
		while (src.$length > 0 && !end) {
			dbuf = $clone(arrayType$2.zero(), arrayType$2);
			dlen = 4;
			_ref = dbuf;
			_i = 0;
			while (_i < 4) {
				j = _i;
				if (src.$length === 0) {
					_tmp = n; _tmp$1 = false; _tmp$2 = new CorruptInputError(0, ((olen - src.$length >> 0) - j >> 0)); n = _tmp; end = _tmp$1; err = _tmp$2;
					return [n, end, err];
				}
				in$1 = ((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]);
				src = $subslice(src, 1);
				if (in$1 === 61) {
					_ref$1 = j;
					if (_ref$1 === 0 || _ref$1 === 1) {
						_tmp$3 = n; _tmp$4 = false; _tmp$5 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$3; end = _tmp$4; err = _tmp$5;
						return [n, end, err];
					} else if (_ref$1 === 2) {
						if (src.$length === 0) {
							_tmp$6 = n; _tmp$7 = false; _tmp$8 = new CorruptInputError(0, olen); n = _tmp$6; end = _tmp$7; err = _tmp$8;
							return [n, end, err];
						}
						if (!((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) === 61))) {
							_tmp$9 = n; _tmp$10 = false; _tmp$11 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$9; end = _tmp$10; err = _tmp$11;
							return [n, end, err];
						}
						src = $subslice(src, 1);
					}
					if (src.$length > 0) {
						err = new CorruptInputError(0, (olen - src.$length >> 0));
					}
					_tmp$12 = j; _tmp$13 = true; dlen = _tmp$12; end = _tmp$13;
					break;
				}
				(j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? $throwRuntimeError("index out of range") : x[in$1]));
				if (((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j]) === 255) {
					_tmp$14 = n; _tmp$15 = false; _tmp$16 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$14; end = _tmp$15; err = _tmp$16;
					return [n, end, err];
				}
				_i++;
			}
			_ref$2 = dlen;
			if (_ref$2 === 4) {
				(2 < 0 || 2 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((dbuf[2] << 6 << 24 >>> 24) | dbuf[3]) >>> 0;
				(1 < 0 || 1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0;
				(0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0;
			} else if (_ref$2 === 3) {
				(1 < 0 || 1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0;
				(0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0;
			} else if (_ref$2 === 2) {
				(0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0;
			}
			dst = $subslice(dst, 3);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tmp$17 = n; _tmp$18 = end; _tmp$19 = err; n = _tmp$17; end = _tmp$18; err = _tmp$19;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.ptr.prototype.Decode = function(dst, src) {
		var _tuple, enc, err = $ifaceNil, n = 0;
		enc = this;
		src = bytes.Map(removeNewlinesMapper, src);
		_tuple = enc.decode(dst, src); n = _tuple[0]; err = _tuple[2];
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.ptr.prototype.DecodeString = function(s) {
		var _tuple, dbuf, enc, err, n;
		enc = this;
		s = strings.Map(removeNewlinesMapper, s);
		dbuf = sliceType$1.make(enc.DecodedLen(s.length));
		_tuple = enc.decode(dbuf, new sliceType$1($stringToBytes(s))); n = _tuple[0]; err = _tuple[2];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.ptr.prototype.DecodedLen = function(n) {
		var _q, enc;
		enc = this;
		return (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) * 3 >> 0;
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	ptrType.methods = [{prop: "Decode", name: "Decode", pkg: "", type: $funcType([sliceType$1, sliceType$1], [$Int, $error], false)}, {prop: "DecodeString", name: "DecodeString", pkg: "", type: $funcType([$String], [sliceType$1, $error], false)}, {prop: "DecodedLen", name: "DecodedLen", pkg: "", type: $funcType([$Int], [$Int], false)}, {prop: "Encode", name: "Encode", pkg: "", type: $funcType([sliceType$1, sliceType$1], [], false)}, {prop: "EncodeToString", name: "EncodeToString", pkg: "", type: $funcType([sliceType$1], [$String], false)}, {prop: "EncodedLen", name: "EncodedLen", pkg: "", type: $funcType([$Int], [$Int], false)}, {prop: "decode", name: "decode", pkg: "encoding/base64", type: $funcType([sliceType$1, sliceType$1], [$Int, $Bool, $error], false)}];
	ptrType$1.methods = [{prop: "Close", name: "Close", pkg: "", type: $funcType([], [$error], false)}, {prop: "Write", name: "Write", pkg: "", type: $funcType([sliceType$1], [$Int, $error], false)}];
	CorruptInputError.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$2.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	Encoding.init([{prop: "encode", name: "encode", pkg: "encoding/base64", type: $String, tag: ""}, {prop: "decodeMap", name: "decodeMap", pkg: "encoding/base64", type: arrayType$4, tag: ""}]);
	encoder.init([{prop: "err", name: "err", pkg: "encoding/base64", type: $error, tag: ""}, {prop: "enc", name: "enc", pkg: "encoding/base64", type: ptrType, tag: ""}, {prop: "w", name: "w", pkg: "encoding/base64", type: io.Writer, tag: ""}, {prop: "buf", name: "buf", pkg: "encoding/base64", type: arrayType, tag: ""}, {prop: "nbuf", name: "nbuf", pkg: "encoding/base64", type: $Int, tag: ""}, {prop: "out", name: "out", pkg: "encoding/base64", type: arrayType$1, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_base64 = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = testing.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		removeNewlinesMapper = (function(r) {
			if ((r === 13) || (r === 10)) {
				return -1;
			}
			return r;
		});
		/* */ } return; } }; $init_base64.$blocking = true; return $init_base64;
	};
	return $pkg;
})();
$packages["encoding/json"] = (function() {
	var $pkg = {}, bytes, encoding, base64, errors, fmt, nosync, io, math, reflect, runtime, sort, strconv, strings, unicode, utf16, utf8, Unmarshaler, UnmarshalTypeError, InvalidUnmarshalError, Number, decodeState, unquotedValue, Marshaler, UnsupportedTypeError, UnsupportedValueError, MarshalerError, encodeState, encoderFunc, floatEncoder, structEncoder, mapEncoder, sliceEncoder, arrayEncoder, ptrEncoder, condAddrEncoder, stringValues, field, byName, byIndex, SyntaxError, scanner, tagOptions, mapType, structType, sliceType, mapType$1, structType$1, sliceType$1, ptrType, ptrType$1, ptrType$2, mapType$2, ptrType$3, sliceType$2, arrayType, ptrType$4, sliceType$3, sliceType$4, ptrType$6, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, funcType, ptrType$23, ptrType$24, ptrType$25, ptrType$26, funcType$1, ptrType$29, errPhase, nullLiteral, numberType, hex, byteSliceType, encoderCache, marshalerType, textMarshalerType, float32Encoder, float64Encoder, fieldCache, Unmarshal, getu4, unquote, unquoteBytes, Marshal, isEmptyValue, valueEncoder, typeEncoder, newTypeEncoder, invalidValueEncoder, marshalerEncoder, addrMarshalerEncoder, textMarshalerEncoder, addrTextMarshalerEncoder, boolEncoder, intEncoder, uintEncoder, stringEncoder, interfaceEncoder, unsupportedTypeEncoder, newStructEncoder, newMapEncoder, encodeByteSlice, newSliceEncoder, newArrayEncoder, newPtrEncoder, newCondAddrEncoder, isValidTag, fieldByIndex, typeByIndex, fillField, typeFields, dominantField, cachedTypeFields, foldFunc, equalFoldRight, asciiEqualFold, simpleLetterEqualFold, compact, checkValid, nextValue, isSpace, stateBeginValueOrEmpty, stateBeginValue, stateBeginStringOrEmpty, stateBeginString, stateEndValue, stateEndTop, stateInString, stateInStringEsc, stateInStringEscU, stateInStringEscU1, stateInStringEscU12, stateInStringEscU123, stateNeg, state1, state0, stateDot, stateDot0, stateE, stateESign, stateE0, stateT, stateTr, stateTru, stateF, stateFa, stateFal, stateFals, stateN, stateNu, stateNul, stateError, quoteChar, stateRedo, parseTag;
	bytes = $packages["bytes"];
	encoding = $packages["encoding"];
	base64 = $packages["encoding/base64"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	io = $packages["io"];
	math = $packages["math"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf16 = $packages["unicode/utf16"];
	utf8 = $packages["unicode/utf8"];
	Unmarshaler = $pkg.Unmarshaler = $newType(8, $kindInterface, "json.Unmarshaler", "Unmarshaler", "encoding/json", null);
	UnmarshalTypeError = $pkg.UnmarshalTypeError = $newType(0, $kindStruct, "json.UnmarshalTypeError", "UnmarshalTypeError", "encoding/json", function(Value_, Type_) {
		this.$val = this;
		this.Value = Value_ !== undefined ? Value_ : "";
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
	});
	InvalidUnmarshalError = $pkg.InvalidUnmarshalError = $newType(0, $kindStruct, "json.InvalidUnmarshalError", "InvalidUnmarshalError", "encoding/json", function(Type_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
	});
	Number = $pkg.Number = $newType(8, $kindString, "json.Number", "Number", "encoding/json", null);
	decodeState = $pkg.decodeState = $newType(0, $kindStruct, "json.decodeState", "decodeState", "encoding/json", function(data_, off_, scan_, nextscan_, savedError_, useNumber_) {
		this.$val = this;
		this.data = data_ !== undefined ? data_ : sliceType$1.nil;
		this.off = off_ !== undefined ? off_ : 0;
		this.scan = scan_ !== undefined ? scan_ : new scanner.ptr();
		this.nextscan = nextscan_ !== undefined ? nextscan_ : new scanner.ptr();
		this.savedError = savedError_ !== undefined ? savedError_ : $ifaceNil;
		this.useNumber = useNumber_ !== undefined ? useNumber_ : false;
	});
	unquotedValue = $pkg.unquotedValue = $newType(0, $kindStruct, "json.unquotedValue", "unquotedValue", "encoding/json", function() {
		this.$val = this;
	});
	Marshaler = $pkg.Marshaler = $newType(8, $kindInterface, "json.Marshaler", "Marshaler", "encoding/json", null);
	UnsupportedTypeError = $pkg.UnsupportedTypeError = $newType(0, $kindStruct, "json.UnsupportedTypeError", "UnsupportedTypeError", "encoding/json", function(Type_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
	});
	UnsupportedValueError = $pkg.UnsupportedValueError = $newType(0, $kindStruct, "json.UnsupportedValueError", "UnsupportedValueError", "encoding/json", function(Value_, Str_) {
		this.$val = this;
		this.Value = Value_ !== undefined ? Value_ : new reflect.Value.ptr();
		this.Str = Str_ !== undefined ? Str_ : "";
	});
	MarshalerError = $pkg.MarshalerError = $newType(0, $kindStruct, "json.MarshalerError", "MarshalerError", "encoding/json", function(Type_, Err_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	encodeState = $pkg.encodeState = $newType(0, $kindStruct, "json.encodeState", "encodeState", "encoding/json", function(Buffer_, scratch_) {
		this.$val = this;
		this.Buffer = Buffer_ !== undefined ? Buffer_ : new bytes.Buffer.ptr();
		this.scratch = scratch_ !== undefined ? scratch_ : arrayType.zero();
	});
	encoderFunc = $pkg.encoderFunc = $newType(4, $kindFunc, "json.encoderFunc", "encoderFunc", "encoding/json", null);
	floatEncoder = $pkg.floatEncoder = $newType(4, $kindInt, "json.floatEncoder", "floatEncoder", "encoding/json", null);
	structEncoder = $pkg.structEncoder = $newType(0, $kindStruct, "json.structEncoder", "structEncoder", "encoding/json", function(fields_, fieldEncs_) {
		this.$val = this;
		this.fields = fields_ !== undefined ? fields_ : sliceType.nil;
		this.fieldEncs = fieldEncs_ !== undefined ? fieldEncs_ : sliceType$3.nil;
	});
	mapEncoder = $pkg.mapEncoder = $newType(0, $kindStruct, "json.mapEncoder", "mapEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		this.elemEnc = elemEnc_ !== undefined ? elemEnc_ : $throwNilPointerError;
	});
	sliceEncoder = $pkg.sliceEncoder = $newType(0, $kindStruct, "json.sliceEncoder", "sliceEncoder", "encoding/json", function(arrayEnc_) {
		this.$val = this;
		this.arrayEnc = arrayEnc_ !== undefined ? arrayEnc_ : $throwNilPointerError;
	});
	arrayEncoder = $pkg.arrayEncoder = $newType(0, $kindStruct, "json.arrayEncoder", "arrayEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		this.elemEnc = elemEnc_ !== undefined ? elemEnc_ : $throwNilPointerError;
	});
	ptrEncoder = $pkg.ptrEncoder = $newType(0, $kindStruct, "json.ptrEncoder", "ptrEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		this.elemEnc = elemEnc_ !== undefined ? elemEnc_ : $throwNilPointerError;
	});
	condAddrEncoder = $pkg.condAddrEncoder = $newType(0, $kindStruct, "json.condAddrEncoder", "condAddrEncoder", "encoding/json", function(canAddrEnc_, elseEnc_) {
		this.$val = this;
		this.canAddrEnc = canAddrEnc_ !== undefined ? canAddrEnc_ : $throwNilPointerError;
		this.elseEnc = elseEnc_ !== undefined ? elseEnc_ : $throwNilPointerError;
	});
	stringValues = $pkg.stringValues = $newType(12, $kindSlice, "json.stringValues", "stringValues", "encoding/json", null);
	field = $pkg.field = $newType(0, $kindStruct, "json.field", "field", "encoding/json", function(name_, nameBytes_, equalFold_, tag_, index_, typ_, omitEmpty_, quoted_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.nameBytes = nameBytes_ !== undefined ? nameBytes_ : sliceType$1.nil;
		this.equalFold = equalFold_ !== undefined ? equalFold_ : $throwNilPointerError;
		this.tag = tag_ !== undefined ? tag_ : false;
		this.index = index_ !== undefined ? index_ : sliceType$4.nil;
		this.typ = typ_ !== undefined ? typ_ : $ifaceNil;
		this.omitEmpty = omitEmpty_ !== undefined ? omitEmpty_ : false;
		this.quoted = quoted_ !== undefined ? quoted_ : false;
	});
	byName = $pkg.byName = $newType(12, $kindSlice, "json.byName", "byName", "encoding/json", null);
	byIndex = $pkg.byIndex = $newType(12, $kindSlice, "json.byIndex", "byIndex", "encoding/json", null);
	SyntaxError = $pkg.SyntaxError = $newType(0, $kindStruct, "json.SyntaxError", "SyntaxError", "encoding/json", function(msg_, Offset_) {
		this.$val = this;
		this.msg = msg_ !== undefined ? msg_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : new $Int64(0, 0);
	});
	scanner = $pkg.scanner = $newType(0, $kindStruct, "json.scanner", "scanner", "encoding/json", function(step_, endTop_, parseState_, err_, redo_, redoCode_, redoState_, bytes_) {
		this.$val = this;
		this.step = step_ !== undefined ? step_ : $throwNilPointerError;
		this.endTop = endTop_ !== undefined ? endTop_ : false;
		this.parseState = parseState_ !== undefined ? parseState_ : sliceType$4.nil;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.redo = redo_ !== undefined ? redo_ : false;
		this.redoCode = redoCode_ !== undefined ? redoCode_ : 0;
		this.redoState = redoState_ !== undefined ? redoState_ : $throwNilPointerError;
		this.bytes = bytes_ !== undefined ? bytes_ : new $Int64(0, 0);
	});
	tagOptions = $pkg.tagOptions = $newType(8, $kindString, "json.tagOptions", "tagOptions", "encoding/json", null);
		mapType = $mapType(reflect.Type, encoderFunc);
		structType = $structType([{prop: "RWMutex", name: "", pkg: "", type: nosync.RWMutex, tag: ""}, {prop: "m", name: "m", pkg: "encoding/json", type: mapType, tag: ""}]);
		sliceType = $sliceType(field);
		mapType$1 = $mapType(reflect.Type, sliceType);
		structType$1 = $structType([{prop: "RWMutex", name: "", pkg: "", type: nosync.RWMutex, tag: ""}, {prop: "m", name: "m", pkg: "encoding/json", type: mapType$1, tag: ""}]);
		sliceType$1 = $sliceType($Uint8);
		ptrType = $ptrType(Marshaler);
		ptrType$1 = $ptrType(encoding.TextMarshaler);
		ptrType$2 = $ptrType(reflect.rtype);
		mapType$2 = $mapType($String, $emptyInterface);
		ptrType$3 = $ptrType(field);
		sliceType$2 = $sliceType($emptyInterface);
		arrayType = $arrayType($Uint8, 64);
		ptrType$4 = $ptrType(encodeState);
		sliceType$3 = $sliceType(encoderFunc);
		sliceType$4 = $sliceType($Int);
		ptrType$6 = $ptrType(UnmarshalTypeError);
		ptrType$8 = $ptrType(InvalidUnmarshalError);
		ptrType$9 = $ptrType(Number);
		ptrType$10 = $ptrType(decodeState);
		ptrType$11 = $ptrType(UnsupportedTypeError);
		ptrType$12 = $ptrType(UnsupportedValueError);
		ptrType$14 = $ptrType(MarshalerError);
		ptrType$15 = $ptrType(floatEncoder);
		ptrType$16 = $ptrType(structEncoder);
		ptrType$17 = $ptrType(mapEncoder);
		ptrType$18 = $ptrType(sliceEncoder);
		ptrType$19 = $ptrType(arrayEncoder);
		ptrType$20 = $ptrType(ptrEncoder);
		ptrType$21 = $ptrType(condAddrEncoder);
		ptrType$22 = $ptrType(stringValues);
		funcType = $funcType([sliceType$1, sliceType$1], [$Bool], false);
		ptrType$23 = $ptrType(byName);
		ptrType$24 = $ptrType(byIndex);
		ptrType$25 = $ptrType(SyntaxError);
		ptrType$26 = $ptrType(scanner);
		funcType$1 = $funcType([ptrType$26, $Int], [$Int], false);
		ptrType$29 = $ptrType(tagOptions);
	Unmarshal = $pkg.Unmarshal = function(data, v) {
		var d, err;
		d = $clone(new decodeState.ptr(), decodeState);
		err = checkValid(data, d.scan);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		d.init(data);
		return d.unmarshal(v);
	};
	UnmarshalTypeError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: cannot unmarshal " + e.Value + " into Go value of type " + e.Type.String();
	};
	UnmarshalTypeError.prototype.Error = function() { return this.$val.Error(); };
	InvalidUnmarshalError.ptr.prototype.Error = function() {
		var e;
		e = this;
		if ($interfaceIsEqual(e.Type, $ifaceNil)) {
			return "json: Unmarshal(nil)";
		}
		if (!((e.Type.Kind() === 22))) {
			return "json: Unmarshal(non-pointer " + e.Type.String() + ")";
		}
		return "json: Unmarshal(nil " + e.Type.String() + ")";
	};
	InvalidUnmarshalError.prototype.Error = function() { return this.$val.Error(); };
	decodeState.ptr.prototype.unmarshal = function(v) {
		var $deferred = [], $err = null, d, err = $ifaceNil, rv;
		/* */ try { $deferFrames.push($deferred);
		d = this;
		$deferred.push([(function() {
			var _tuple, ok, r;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true); ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				err = $assertType(r, $error);
			}
		}), []]);
		rv = reflect.ValueOf(v);
		if (!((rv.Kind() === 22)) || rv.IsNil()) {
			err = new InvalidUnmarshalError.ptr(reflect.TypeOf(v));
			return err;
		}
		d.scan.reset();
		d.value(rv);
		err = d.savedError;
		return err;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return err; }
	};
	decodeState.prototype.unmarshal = function(v) { return this.$val.unmarshal(v); };
	Number.prototype.String = function() {
		var n;
		n = this.$val;
		return n;
	};
	$ptrType(Number).prototype.String = function() { return new Number(this.$get()).String(); };
	Number.prototype.Float64 = function() {
		var n;
		n = this.$val;
		return strconv.ParseFloat(n, 64);
	};
	$ptrType(Number).prototype.Float64 = function() { return new Number(this.$get()).Float64(); };
	Number.prototype.Int64 = function() {
		var n;
		n = this.$val;
		return strconv.ParseInt(n, 10, 64);
	};
	$ptrType(Number).prototype.Int64 = function() { return new Number(this.$get()).Int64(); };
	decodeState.ptr.prototype.init = function(data) {
		var d;
		d = this;
		d.data = data;
		d.off = 0;
		d.savedError = $ifaceNil;
		return d;
	};
	decodeState.prototype.init = function(data) { return this.$val.init(data); };
	decodeState.ptr.prototype.error = function(err) {
		var d;
		d = this;
		$panic(err);
	};
	decodeState.prototype.error = function(err) { return this.$val.error(err); };
	decodeState.ptr.prototype.saveError = function(err) {
		var d;
		d = this;
		if ($interfaceIsEqual(d.savedError, $ifaceNil)) {
			d.savedError = err;
		}
	};
	decodeState.prototype.saveError = function(err) { return this.$val.saveError(err); };
	decodeState.ptr.prototype.next = function() {
		var _tuple, c, d, err, item, rest, x, x$1;
		d = this;
		c = (x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_tuple = nextValue($subslice(d.data, d.off), d.nextscan); item = _tuple[0]; rest = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			d.error(err);
		}
		d.off = d.data.$length - rest.$length >> 0;
		if (c === 123) {
			d.scan.step(d.scan, 125);
		} else {
			d.scan.step(d.scan, 93);
		}
		return item;
	};
	decodeState.prototype.next = function() { return this.$val.next(); };
	decodeState.ptr.prototype.scanWhile = function(op) {
		var c, d, newOp, x, x$1;
		d = this;
		newOp = 0;
		while (true) {
			if (d.off >= d.data.$length) {
				newOp = d.scan.eof();
				d.off = d.data.$length + 1 >> 0;
			} else {
				c = ((x = d.data, x$1 = d.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) >> 0);
				d.off = d.off + (1) >> 0;
				newOp = d.scan.step(d.scan, c);
			}
			if (!((newOp === op))) {
				break;
			}
		}
		return newOp;
	};
	decodeState.prototype.scanWhile = function(op) { return this.$val.scanWhile(op); };
	decodeState.ptr.prototype.value = function(v) {
		var _ref, _tuple, d, err, n, op, rest, x, x$1;
		d = this;
		v = v;
		if (!v.IsValid()) {
			_tuple = nextValue($subslice(d.data, d.off), d.nextscan); rest = _tuple[1]; err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			d.off = d.data.$length - rest.$length >> 0;
			if (d.scan.redo) {
				d.scan.redo = false;
				d.scan.step = stateBeginValue;
			}
			d.scan.step(d.scan, 34);
			d.scan.step(d.scan, 34);
			n = d.scan.parseState.$length;
			if (n > 0 && ((x = d.scan.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) === 0)) {
				d.scan.step(d.scan, 58);
				d.scan.step(d.scan, 34);
				d.scan.step(d.scan, 34);
				d.scan.step(d.scan, 125);
			}
			return;
		}
		op = d.scanWhile(9);
		_ref = op;
		if (_ref === 6) {
			d.array(v);
		} else if (_ref === 2) {
			d.object(v);
		} else if (_ref === 1) {
			d.literal(v);
		} else {
			d.error(errPhase);
		}
	};
	decodeState.prototype.value = function(v) { return this.$val.value(v); };
	decodeState.ptr.prototype.valueQuoted = function() {
		var _ref, _ref$1, d, op, v, x;
		d = this;
		op = d.scanWhile(9);
		_ref = op;
		if (_ref === 6) {
			d.array(new reflect.Value.ptr(ptrType$2.nil, 0, 0));
		} else if (_ref === 2) {
			d.object(new reflect.Value.ptr(ptrType$2.nil, 0, 0));
		} else if (_ref === 1) {
			_ref$1 = d.literalInterface();
			if (_ref$1 === $ifaceNil || $assertType(_ref$1, $String, true)[1]) {
				v = _ref$1;
				return v;
			}
		} else {
			d.error(errPhase);
		}
		return (x = new unquotedValue.ptr(), new x.constructor.elem(x));
	};
	decodeState.prototype.valueQuoted = function() { return this.$val.valueQuoted(); };
	decodeState.ptr.prototype.indirect = function(v, decodingNull) {
		var _tuple, _tuple$1, d, e, ok, ok$1, u, u$1;
		d = this;
		v = v;
		if (!((v.Kind() === 22)) && !(v.Type().Name() === "") && v.CanAddr()) {
			v = v.Addr();
		}
		while (true) {
			if ((v.Kind() === 20) && !v.IsNil()) {
				e = v.Elem();
				if ((e.Kind() === 22) && !e.IsNil() && (!decodingNull || (e.Elem().Kind() === 22))) {
					v = e;
					continue;
				}
			}
			if (!((v.Kind() === 22))) {
				break;
			}
			if (!((v.Elem().Kind() === 22)) && decodingNull && v.CanSet()) {
				break;
			}
			if (v.IsNil()) {
				v.Set(reflect.New(v.Type().Elem()));
			}
			if (v.Type().NumMethod() > 0) {
				_tuple = $assertType(v.Interface(), Unmarshaler, true); u = _tuple[0]; ok = _tuple[1];
				if (ok) {
					return [u, $ifaceNil, new reflect.Value.ptr(ptrType$2.nil, 0, 0)];
				}
				_tuple$1 = $assertType(v.Interface(), encoding.TextUnmarshaler, true); u$1 = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1) {
					return [$ifaceNil, u$1, new reflect.Value.ptr(ptrType$2.nil, 0, 0)];
				}
			}
			v = v.Elem();
		}
		return [$ifaceNil, $ifaceNil, v];
	};
	decodeState.prototype.indirect = function(v, decodingNull) { return this.$val.indirect(v, decodingNull); };
	decodeState.ptr.prototype.array = function(v) {
		var _q, _ref, _tuple, d, err, i, newcap, newv, op, pv, u, ut, z;
		d = this;
		v = v;
		_tuple = d.indirect(v, false); u = _tuple[0]; ut = _tuple[1]; pv = _tuple[2];
		if (!($interfaceIsEqual(u, $ifaceNil))) {
			d.off = d.off - (1) >> 0;
			err = u.UnmarshalJSON(d.next());
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			return;
		}
		if (!($interfaceIsEqual(ut, $ifaceNil))) {
			d.saveError(new UnmarshalTypeError.ptr("array", v.Type()));
			d.off = d.off - (1) >> 0;
			d.next();
			return;
		}
		v = pv;
		_ref = v.Kind();
		switch (0) { default: if (_ref === 20) {
			if (v.NumMethod() === 0) {
				v.Set(reflect.ValueOf(d.arrayInterface()));
				return;
			}
			d.saveError(new UnmarshalTypeError.ptr("array", v.Type()));
			d.off = d.off - (1) >> 0;
			d.next();
			return;
		} else if (_ref === 17) {
		} else if (_ref === 23) {
			break;
		} else {
			d.saveError(new UnmarshalTypeError.ptr("array", v.Type()));
			d.off = d.off - (1) >> 0;
			d.next();
			return;
		} }
		i = 0;
		while (true) {
			op = d.scanWhile(9);
			if (op === 8) {
				break;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			if (v.Kind() === 23) {
				if (i >= v.Cap()) {
					newcap = v.Cap() + (_q = v.Cap() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
					if (newcap < 4) {
						newcap = 4;
					}
					newv = reflect.MakeSlice(v.Type(), v.Len(), newcap);
					reflect.Copy(newv, v);
					v.Set(newv);
				}
				if (i >= v.Len()) {
					v.SetLen(i + 1 >> 0);
				}
			}
			if (i < v.Len()) {
				d.value(v.Index(i));
			} else {
				d.value(new reflect.Value.ptr(ptrType$2.nil, 0, 0));
			}
			i = i + (1) >> 0;
			op = d.scanWhile(9);
			if (op === 8) {
				break;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		}
		if (i < v.Len()) {
			if (v.Kind() === 17) {
				z = reflect.Zero(v.Type().Elem());
				while (i < v.Len()) {
					v.Index(i).Set(z);
					i = i + (1) >> 0;
				}
			} else {
				v.SetLen(i);
			}
		}
		if ((i === 0) && (v.Kind() === 23)) {
			v.Set(reflect.MakeSlice(v.Type(), 0, 0));
		}
	};
	decodeState.prototype.array = function(v) { return this.$val.array(v); };
	decodeState.ptr.prototype.object = function(v) {
		var _i, _i$1, _ref, _ref$1, _ref$2, _ref$3, _tuple, _tuple$1, d, destring, elemType, err, f, ff, fields, i, i$1, item, key, kv, mapElem, ok, op, pv, qv, start, subv, t, u, ut;
		d = this;
		v = v;
		_tuple = d.indirect(v, false); u = _tuple[0]; ut = _tuple[1]; pv = _tuple[2];
		if (!($interfaceIsEqual(u, $ifaceNil))) {
			d.off = d.off - (1) >> 0;
			err = u.UnmarshalJSON(d.next());
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			return;
		}
		if (!($interfaceIsEqual(ut, $ifaceNil))) {
			d.saveError(new UnmarshalTypeError.ptr("object", v.Type()));
			d.off = d.off - (1) >> 0;
			d.next();
			return;
		}
		v = pv;
		if ((v.Kind() === 20) && (v.NumMethod() === 0)) {
			v.Set(reflect.ValueOf(new mapType$2(d.objectInterface())));
			return;
		}
		_ref = v.Kind();
		if (_ref === 21) {
			t = v.Type();
			if (!((t.Key().Kind() === 24))) {
				d.saveError(new UnmarshalTypeError.ptr("object", v.Type()));
				d.off = d.off - (1) >> 0;
				d.next();
				return;
			}
			if (v.IsNil()) {
				v.Set(reflect.MakeMap(t));
			}
		} else if (_ref === 25) {
		} else {
			d.saveError(new UnmarshalTypeError.ptr("object", v.Type()));
			d.off = d.off - (1) >> 0;
			d.next();
			return;
		}
		mapElem = new reflect.Value.ptr();
		while (true) {
			op = d.scanWhile(9);
			if (op === 5) {
				break;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			op = d.scanWhile(0);
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple$1 = unquoteBytes(item); key = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				d.error(errPhase);
			}
			subv = new reflect.Value.ptr();
			destring = false;
			if (v.Kind() === 21) {
				elemType = v.Type().Elem();
				if (!mapElem.IsValid()) {
					mapElem = reflect.New(elemType).Elem();
				} else {
					mapElem.Set(reflect.Zero(elemType));
				}
				subv = mapElem;
			} else {
				f = ptrType$3.nil;
				fields = cachedTypeFields(v.Type());
				_ref$1 = fields;
				_i = 0;
				while (_i < _ref$1.$length) {
					i = _i;
					ff = ((i < 0 || i >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + i]);
					if (bytes.Equal(ff.nameBytes, key)) {
						f = ff;
						break;
					}
					if (f === ptrType$3.nil && ff.equalFold(ff.nameBytes, key)) {
						f = ff;
					}
					_i++;
				}
				if (!(f === ptrType$3.nil)) {
					subv = v;
					destring = f.quoted;
					_ref$2 = f.index;
					_i$1 = 0;
					while (_i$1 < _ref$2.$length) {
						i$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
						if (subv.Kind() === 22) {
							if (subv.IsNil()) {
								subv.Set(reflect.New(subv.Type().Elem()));
							}
							subv = subv.Elem();
						}
						subv = subv.Field(i$1);
						_i$1++;
					}
				}
			}
			if (op === 9) {
				op = d.scanWhile(9);
			}
			if (!((op === 3))) {
				d.error(errPhase);
			}
			if (destring) {
				_ref$3 = d.valueQuoted();
				if (_ref$3 === $ifaceNil) {
					qv = _ref$3;
					d.literalStore(nullLiteral, subv, false);
				} else if ($assertType(_ref$3, $String, true)[1]) {
					qv = _ref$3.$val;
					d.literalStore(new sliceType$1($stringToBytes(qv)), subv, true);
				} else {
					qv = _ref$3;
					d.saveError(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal unquoted value into %v", new sliceType$2([item, v.Type()])));
				}
			} else {
				d.value(subv);
			}
			if (v.Kind() === 21) {
				kv = reflect.ValueOf(key).Convert(v.Type().Key());
				v.SetMapIndex(kv, subv);
			}
			op = d.scanWhile(9);
			if (op === 5) {
				break;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		}
	};
	decodeState.prototype.object = function(v) { return this.$val.object(v); };
	decodeState.ptr.prototype.literal = function(v) {
		var d, op, start;
		d = this;
		v = v;
		start = d.off - 1 >> 0;
		op = d.scanWhile(0);
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		d.literalStore($subslice(d.data, start, d.off), v, false);
	};
	decodeState.prototype.literal = function(v) { return this.$val.literal(v); };
	decodeState.ptr.prototype.convertNumber = function(s) {
		var _tuple, d, err, f;
		d = this;
		if (d.useNumber) {
			return [new Number(s), $ifaceNil];
		}
		_tuple = strconv.ParseFloat(s, 64); f = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, new UnmarshalTypeError.ptr("number " + s, reflect.TypeOf(new $Float64(0)))];
		}
		return [new $Float64(f), $ifaceNil];
	};
	decodeState.prototype.convertNumber = function(s) { return this.$val.convertNumber(s); };
	decodeState.ptr.prototype.literalStore = function(item, v, fromQuoted) {
		var _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, b, c, d, err, err$1, err$2, err$3, err$4, err$5, err$6, n, n$1, n$2, n$3, n$4, ok, ok$1, pv, s, s$1, s$2, u, ut, value, wantptr;
		d = this;
		v = v;
		if (item.$length === 0) {
			d.saveError(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType$2([item, v.Type()])));
			return;
		}
		wantptr = ((0 < 0 || 0 >= item.$length) ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]) === 110;
		_tuple = d.indirect(v, wantptr); u = _tuple[0]; ut = _tuple[1]; pv = _tuple[2];
		if (!($interfaceIsEqual(u, $ifaceNil))) {
			err = u.UnmarshalJSON(item);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.error(err);
			}
			return;
		}
		if (!($interfaceIsEqual(ut, $ifaceNil))) {
			if (!((((0 < 0 || 0 >= item.$length) ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]) === 34))) {
				if (fromQuoted) {
					d.saveError(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType$2([item, v.Type()])));
				} else {
					d.saveError(new UnmarshalTypeError.ptr("string", v.Type()));
				}
			}
			_tuple$1 = unquoteBytes(item); s = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				if (fromQuoted) {
					d.error(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType$2([item, v.Type()])));
				} else {
					d.error(errPhase);
				}
			}
			err$1 = ut.UnmarshalText(s);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				d.error(err$1);
			}
			return;
		}
		v = pv;
		c = ((0 < 0 || 0 >= item.$length) ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]);
		_ref = c;
		if (_ref === 110) {
			_ref$1 = v.Kind();
			if (_ref$1 === 20 || _ref$1 === 22 || _ref$1 === 21 || _ref$1 === 23) {
				v.Set(reflect.Zero(v.Type()));
			}
		} else if (_ref === 116 || _ref === 102) {
			value = c === 116;
			_ref$2 = v.Kind();
			if (_ref$2 === 1) {
				v.SetBool(value);
			} else if (_ref$2 === 20) {
				if (v.NumMethod() === 0) {
					v.Set(reflect.ValueOf(new $Bool(value)));
				} else {
					d.saveError(new UnmarshalTypeError.ptr("bool", v.Type()));
				}
			} else {
				if (fromQuoted) {
					d.saveError(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType$2([item, v.Type()])));
				} else {
					d.saveError(new UnmarshalTypeError.ptr("bool", v.Type()));
				}
			}
		} else if (_ref === 34) {
			_tuple$2 = unquoteBytes(item); s$1 = _tuple$2[0]; ok$1 = _tuple$2[1];
			if (!ok$1) {
				if (fromQuoted) {
					d.error(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType$2([item, v.Type()])));
				} else {
					d.error(errPhase);
				}
			}
			_ref$3 = v.Kind();
			switch (0) { default: if (_ref$3 === 23) {
				if (!($interfaceIsEqual(v.Type(), byteSliceType))) {
					d.saveError(new UnmarshalTypeError.ptr("string", v.Type()));
					break;
				}
				b = sliceType$1.make(base64.StdEncoding.DecodedLen(s$1.$length));
				_tuple$3 = base64.StdEncoding.Decode(b, s$1); n = _tuple$3[0]; err$2 = _tuple$3[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					d.saveError(err$2);
					break;
				}
				v.Set(reflect.ValueOf($subslice(b, 0, n)));
			} else if (_ref$3 === 24) {
				v.SetString($bytesToString(s$1));
			} else if (_ref$3 === 20) {
				if (v.NumMethod() === 0) {
					v.Set(reflect.ValueOf(new $String($bytesToString(s$1))));
				} else {
					d.saveError(new UnmarshalTypeError.ptr("string", v.Type()));
				}
			} else {
				d.saveError(new UnmarshalTypeError.ptr("string", v.Type()));
			} }
		} else {
			if (!((c === 45)) && (c < 48 || c > 57)) {
				if (fromQuoted) {
					d.error(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType$2([item, v.Type()])));
				} else {
					d.error(errPhase);
				}
			}
			s$2 = $bytesToString(item);
			_ref$4 = v.Kind();
			switch (0) { default: if (_ref$4 === 20) {
				_tuple$4 = d.convertNumber(s$2); n$1 = _tuple$4[0]; err$3 = _tuple$4[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					d.saveError(err$3);
					break;
				}
				if (!((v.NumMethod() === 0))) {
					d.saveError(new UnmarshalTypeError.ptr("number", v.Type()));
					break;
				}
				v.Set(reflect.ValueOf(n$1));
			} else if (_ref$4 === 2 || _ref$4 === 3 || _ref$4 === 4 || _ref$4 === 5 || _ref$4 === 6) {
				_tuple$5 = strconv.ParseInt(s$2, 10, 64); n$2 = _tuple$5[0]; err$4 = _tuple$5[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil)) || v.OverflowInt(n$2)) {
					d.saveError(new UnmarshalTypeError.ptr("number " + s$2, v.Type()));
					break;
				}
				v.SetInt(n$2);
			} else if (_ref$4 === 7 || _ref$4 === 8 || _ref$4 === 9 || _ref$4 === 10 || _ref$4 === 11 || _ref$4 === 12) {
				_tuple$6 = strconv.ParseUint(s$2, 10, 64); n$3 = _tuple$6[0]; err$5 = _tuple$6[1];
				if (!($interfaceIsEqual(err$5, $ifaceNil)) || v.OverflowUint(n$3)) {
					d.saveError(new UnmarshalTypeError.ptr("number " + s$2, v.Type()));
					break;
				}
				v.SetUint(n$3);
			} else if (_ref$4 === 13 || _ref$4 === 14) {
				_tuple$7 = strconv.ParseFloat(s$2, v.Type().Bits()); n$4 = _tuple$7[0]; err$6 = _tuple$7[1];
				if (!($interfaceIsEqual(err$6, $ifaceNil)) || v.OverflowFloat(n$4)) {
					d.saveError(new UnmarshalTypeError.ptr("number " + s$2, v.Type()));
					break;
				}
				v.SetFloat(n$4);
			} else {
				if ((v.Kind() === 24) && $interfaceIsEqual(v.Type(), numberType)) {
					v.SetString(s$2);
					break;
				}
				if (fromQuoted) {
					d.error(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new sliceType$2([item, v.Type()])));
				} else {
					d.error(new UnmarshalTypeError.ptr("number", v.Type()));
				}
			} }
		}
	};
	decodeState.prototype.literalStore = function(item, v, fromQuoted) { return this.$val.literalStore(item, v, fromQuoted); };
	decodeState.ptr.prototype.valueInterface = function() {
		var _ref, d;
		d = this;
		_ref = d.scanWhile(9);
		if (_ref === 6) {
			return d.arrayInterface();
		} else if (_ref === 2) {
			return new mapType$2(d.objectInterface());
		} else if (_ref === 1) {
			return d.literalInterface();
		} else {
			d.error(errPhase);
			$panic(new $String("unreachable"));
		}
	};
	decodeState.prototype.valueInterface = function() { return this.$val.valueInterface(); };
	decodeState.ptr.prototype.arrayInterface = function() {
		var d, op, v;
		d = this;
		v = sliceType$2.make(0);
		while (true) {
			op = d.scanWhile(9);
			if (op === 8) {
				break;
			}
			d.off = d.off - (1) >> 0;
			d.scan.undo(op);
			v = $append(v, d.valueInterface());
			op = d.scanWhile(9);
			if (op === 8) {
				break;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		}
		return v;
	};
	decodeState.prototype.arrayInterface = function() { return this.$val.arrayInterface(); };
	decodeState.ptr.prototype.objectInterface = function() {
		var _key, _tuple, d, item, key, m, ok, op, start;
		d = this;
		m = new $Map();
		while (true) {
			op = d.scanWhile(9);
			if (op === 5) {
				break;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			op = d.scanWhile(0);
			item = $subslice(d.data, start, (d.off - 1 >> 0));
			_tuple = unquote(item); key = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			if (op === 9) {
				op = d.scanWhile(9);
			}
			if (!((op === 3))) {
				d.error(errPhase);
			}
			_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: d.valueInterface() };
			op = d.scanWhile(9);
			if (op === 5) {
				break;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		}
		return m;
	};
	decodeState.prototype.objectInterface = function() { return this.$val.objectInterface(); };
	decodeState.ptr.prototype.literalInterface = function() {
		var _ref, _tuple, _tuple$1, c, d, err, item, n, ok, op, s, start;
		d = this;
		start = d.off - 1 >> 0;
		op = d.scanWhile(0);
		d.off = d.off - (1) >> 0;
		d.scan.undo(op);
		item = $subslice(d.data, start, d.off);
		c = ((0 < 0 || 0 >= item.$length) ? $throwRuntimeError("index out of range") : item.$array[item.$offset + 0]);
		_ref = c;
		if (_ref === 110) {
			return $ifaceNil;
		} else if (_ref === 116 || _ref === 102) {
			return new $Bool((c === 116));
		} else if (_ref === 34) {
			_tuple = unquote(item); s = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			return new $String(s);
		} else {
			if (!((c === 45)) && (c < 48 || c > 57)) {
				d.error(errPhase);
			}
			_tuple$1 = d.convertNumber($bytesToString(item)); n = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				d.saveError(err);
			}
			return n;
		}
	};
	decodeState.prototype.literalInterface = function() { return this.$val.literalInterface(); };
	getu4 = function(s) {
		var _tuple, err, r;
		if (s.$length < 6 || !((((0 < 0 || 0 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) === 92)) || !((((1 < 0 || 1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1]) === 117))) {
			return -1;
		}
		_tuple = strconv.ParseUint($bytesToString($subslice(s, 2, 6)), 16, 64); r = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return -1;
		}
		return (r.$low >> 0);
	};
	unquote = function(s) {
		var _tuple, ok = false, t = "";
		_tuple = unquoteBytes(s); s = _tuple[0]; ok = _tuple[1];
		t = $bytesToString(s);
		return [t, ok];
	};
	unquoteBytes = function(s) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, b, c, c$1, dec, nb, ok = false, r, rr, rr$1, rr$2, rr1, size, size$1, t = sliceType$1.nil, w, x;
		if (s.$length < 2 || !((((0 < 0 || 0 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) === 34)) || !(((x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) === 34))) {
			return [t, ok];
		}
		s = $subslice(s, 1, (s.$length - 1 >> 0));
		r = 0;
		while (r < s.$length) {
			c = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
			if ((c === 92) || (c === 34) || c < 32) {
				break;
			}
			if (c < 128) {
				r = r + (1) >> 0;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, r)); rr = _tuple[0]; size = _tuple[1];
			if ((rr === 65533) && (size === 1)) {
				break;
			}
			r = r + (size) >> 0;
		}
		if (r === s.$length) {
			_tmp = s; _tmp$1 = true; t = _tmp; ok = _tmp$1;
			return [t, ok];
		}
		b = sliceType$1.make((s.$length + 8 >> 0));
		w = $copySlice(b, $subslice(s, 0, r));
		while (r < s.$length) {
			if (w >= (b.$length - 8 >> 0)) {
				nb = sliceType$1.make((((b.$length + 4 >> 0)) * 2 >> 0));
				$copySlice(nb, $subslice(b, 0, w));
				b = nb;
			}
			c$1 = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
			if (c$1 === 92) {
				r = r + (1) >> 0;
				if (r >= s.$length) {
					return [t, ok];
				}
				_ref = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
				switch (0) { default: if (_ref === 34 || _ref === 92 || _ref === 47 || _ref === 39) {
					(w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = ((r < 0 || r >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + r]);
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 98) {
					(w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 8;
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 102) {
					(w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 12;
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 110) {
					(w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 10;
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 114) {
					(w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 13;
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 116) {
					(w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = 9;
					r = r + (1) >> 0;
					w = w + (1) >> 0;
				} else if (_ref === 117) {
					r = r - (1) >> 0;
					rr$1 = getu4($subslice(s, r));
					if (rr$1 < 0) {
						return [t, ok];
					}
					r = r + (6) >> 0;
					if (utf16.IsSurrogate(rr$1)) {
						rr1 = getu4($subslice(s, r));
						dec = utf16.DecodeRune(rr$1, rr1);
						if (!((dec === 65533))) {
							r = r + (6) >> 0;
							w = w + (utf8.EncodeRune($subslice(b, w), dec)) >> 0;
							break;
						}
						rr$1 = 65533;
					}
					w = w + (utf8.EncodeRune($subslice(b, w), rr$1)) >> 0;
				} else {
					return [t, ok];
				} }
			} else if (c$1 === 34 || c$1 < 32) {
				return [t, ok];
			} else if (c$1 < 128) {
				(w < 0 || w >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + w] = c$1;
				r = r + (1) >> 0;
				w = w + (1) >> 0;
			} else {
				_tuple$1 = utf8.DecodeRune($subslice(s, r)); rr$2 = _tuple$1[0]; size$1 = _tuple$1[1];
				r = r + (size$1) >> 0;
				w = w + (utf8.EncodeRune($subslice(b, w), rr$2)) >> 0;
			}
		}
		_tmp$2 = $subslice(b, 0, w); _tmp$3 = true; t = _tmp$2; ok = _tmp$3;
		return [t, ok];
	};
	Marshal = $pkg.Marshal = function(v) {
		var e, err;
		e = new encodeState.ptr(new bytes.Buffer.ptr(), arrayType.zero());
		err = e.marshal(v);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType$1.nil, err];
		}
		return [e.Buffer.Bytes(), $ifaceNil];
	};
	UnsupportedTypeError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: unsupported type: " + e.Type.String();
	};
	UnsupportedTypeError.prototype.Error = function() { return this.$val.Error(); };
	UnsupportedValueError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: unsupported value: " + e.Str;
	};
	UnsupportedValueError.prototype.Error = function() { return this.$val.Error(); };
	MarshalerError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: error calling MarshalJSON for type " + e.Type.String() + ": " + e.Err.Error();
	};
	MarshalerError.prototype.Error = function() { return this.$val.Error(); };
	encodeState.ptr.prototype.marshal = function(v) {
		var $deferred = [], $err = null, e, err = $ifaceNil;
		/* */ try { $deferFrames.push($deferred);
		e = this;
		$deferred.push([(function() {
			var _tuple, _tuple$1, ok, ok$1, r, s;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true); ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				_tuple$1 = $assertType(r, $String, true); s = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1) {
					$panic(new $String(s));
				}
				err = $assertType(r, $error);
			}
		}), []]);
		e.reflectValue(reflect.ValueOf(v));
		err = $ifaceNil;
		return err;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return err; }
	};
	encodeState.prototype.marshal = function(v) { return this.$val.marshal(v); };
	encodeState.ptr.prototype.error = function(err) {
		var e;
		e = this;
		$panic(err);
	};
	encodeState.prototype.error = function(err) { return this.$val.error(err); };
	isEmptyValue = function(v) {
		var _ref, x, x$1;
		v = v;
		_ref = v.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 24) {
			return v.Len() === 0;
		} else if (_ref === 1) {
			return !v.Bool();
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return (x = v.Int(), (x.$high === 0 && x.$low === 0));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return (x$1 = v.Uint(), (x$1.$high === 0 && x$1.$low === 0));
		} else if (_ref === 13 || _ref === 14) {
			return v.Float() === 0;
		} else if (_ref === 20 || _ref === 22) {
			return v.IsNil();
		}
		return false;
	};
	encodeState.ptr.prototype.reflectValue = function(v) {
		var e;
		e = this;
		v = v;
		valueEncoder(v)(e, v, false);
	};
	encodeState.prototype.reflectValue = function(v) { return this.$val.reflectValue(v); };
	valueEncoder = function(v) {
		v = v;
		if (!v.IsValid()) {
			return invalidValueEncoder;
		}
		return typeEncoder(v.Type());
	};
	typeEncoder = function(t) {
		var _entry, _key, _key$1, f, wg;
		encoderCache.RWMutex.RLock();
		f = (_entry = encoderCache.m[t.$key()], _entry !== undefined ? _entry.v : $throwNilPointerError);
		encoderCache.RWMutex.RUnlock();
		if (!(f === $throwNilPointerError)) {
			return f;
		}
		encoderCache.RWMutex.Lock();
		if (encoderCache.m === false) {
			encoderCache.m = new $Map();
		}
		wg = $clone(new nosync.WaitGroup.ptr(), nosync.WaitGroup);
		wg.Add(1);
		_key = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: (function(e, v, quoted) {
			wg.Wait();
			f(e, v, quoted);
		}) };
		encoderCache.RWMutex.Unlock();
		f = newTypeEncoder(t, true);
		wg.Done();
		encoderCache.RWMutex.Lock();
		_key$1 = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[_key$1.$key()] = { k: _key$1, v: f };
		encoderCache.RWMutex.Unlock();
		return f;
	};
	newTypeEncoder = function(t, allowAddr) {
		var _ref;
		if (t.Implements(marshalerType)) {
			return marshalerEncoder;
		}
		if (!((t.Kind() === 22)) && allowAddr) {
			if (reflect.PtrTo(t).Implements(marshalerType)) {
				return newCondAddrEncoder(addrMarshalerEncoder, newTypeEncoder(t, false));
			}
		}
		if (t.Implements(textMarshalerType)) {
			return textMarshalerEncoder;
		}
		if (!((t.Kind() === 22)) && allowAddr) {
			if (reflect.PtrTo(t).Implements(textMarshalerType)) {
				return newCondAddrEncoder(addrTextMarshalerEncoder, newTypeEncoder(t, false));
			}
		}
		_ref = t.Kind();
		if (_ref === 1) {
			return boolEncoder;
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return intEncoder;
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return uintEncoder;
		} else if (_ref === 13) {
			return float32Encoder;
		} else if (_ref === 14) {
			return float64Encoder;
		} else if (_ref === 24) {
			return stringEncoder;
		} else if (_ref === 20) {
			return interfaceEncoder;
		} else if (_ref === 25) {
			return newStructEncoder(t);
		} else if (_ref === 21) {
			return newMapEncoder(t);
		} else if (_ref === 23) {
			return newSliceEncoder(t);
		} else if (_ref === 17) {
			return newArrayEncoder(t);
		} else if (_ref === 22) {
			return newPtrEncoder(t);
		} else {
			return unsupportedTypeEncoder;
		}
	};
	invalidValueEncoder = function(e, v, quoted) {
		v = v;
		e.Buffer.WriteString("null");
	};
	marshalerEncoder = function(e, v, quoted) {
		var _tuple, b, err, m;
		v = v;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = $assertType(v.Interface(), Marshaler);
		_tuple = m.MarshalJSON(); b = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			err = compact(e.Buffer, b, true);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
	};
	addrMarshalerEncoder = function(e, v, quoted) {
		var _tuple, b, err, m, va;
		v = v;
		va = v.Addr();
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = $assertType(va.Interface(), Marshaler);
		_tuple = m.MarshalJSON(); b = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			err = compact(e.Buffer, b, true);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
	};
	textMarshalerEncoder = function(e, v, quoted) {
		var _tuple, _tuple$1, b, err, m;
		v = v;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = $assertType(v.Interface(), encoding.TextMarshaler);
		_tuple = m.MarshalText(); b = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			_tuple$1 = e.stringBytes(b); err = _tuple$1[1];
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
	};
	addrTextMarshalerEncoder = function(e, v, quoted) {
		var _tuple, _tuple$1, b, err, m, va;
		v = v;
		va = v.Addr();
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = $assertType(va.Interface(), encoding.TextMarshaler);
		_tuple = m.MarshalText(); b = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			_tuple$1 = e.stringBytes(b); err = _tuple$1[1];
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.ptr(v.Type(), err));
		}
	};
	boolEncoder = function(e, v, quoted) {
		v = v;
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		if (v.Bool()) {
			e.Buffer.WriteString("true");
		} else {
			e.Buffer.WriteString("false");
		}
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	intEncoder = function(e, v, quoted) {
		var b;
		v = v;
		b = strconv.AppendInt($subslice(new sliceType$1(e.scratch), 0, 0), v.Int(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	uintEncoder = function(e, v, quoted) {
		var b;
		v = v;
		b = strconv.AppendUint($subslice(new sliceType$1(e.scratch), 0, 0), v.Uint(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	floatEncoder.prototype.encode = function(e, v, quoted) {
		var b, bits, f;
		bits = this.$val;
		v = v;
		f = v.Float();
		if (math.IsInf(f, 0) || math.IsNaN(f)) {
			e.error(new UnsupportedValueError.ptr($clone(v, reflect.Value), strconv.FormatFloat(f, 103, -1, (bits >> 0))));
		}
		b = strconv.AppendFloat($subslice(new sliceType$1(e.scratch), 0, 0), f, 103, -1, (bits >> 0));
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	$ptrType(floatEncoder).prototype.encode = function(e, v, quoted) { return new floatEncoder(this.$get()).encode(e, v, quoted); };
	stringEncoder = function(e, v, quoted) {
		var _tuple, err, numStr, sb;
		v = v;
		if ($interfaceIsEqual(v.Type(), numberType)) {
			numStr = v.String();
			if (numStr === "") {
				numStr = "0";
			}
			e.Buffer.WriteString(numStr);
			return;
		}
		if (quoted) {
			_tuple = Marshal(new $String(v.String())); sb = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				e.error(err);
			}
			e.string($bytesToString(sb));
		} else {
			e.string(v.String());
		}
	};
	interfaceEncoder = function(e, v, quoted) {
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		e.reflectValue(v.Elem());
	};
	unsupportedTypeEncoder = function(e, v, quoted) {
		v = v;
		e.error(new UnsupportedTypeError.ptr(v.Type()));
	};
	structEncoder.ptr.prototype.encode = function(e, v, quoted) {
		var _i, _ref, f, first, fv, i, se, x;
		se = this;
		v = v;
		e.Buffer.WriteByte(123);
		first = true;
		_ref = se.fields;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			fv = fieldByIndex(v, f.index);
			if (!fv.IsValid() || f.omitEmpty && isEmptyValue(fv)) {
				_i++;
				continue;
			}
			if (first) {
				first = false;
			} else {
				e.Buffer.WriteByte(44);
			}
			e.string(f.name);
			e.Buffer.WriteByte(58);
			(x = se.fieldEncs, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]))(e, fv, f.quoted);
			_i++;
		}
		e.Buffer.WriteByte(125);
	};
	structEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newStructEncoder = function(t) {
		var _i, _ref, f, fields, i, se, x;
		fields = cachedTypeFields(t);
		se = new structEncoder.ptr(fields, sliceType$3.make(fields.$length));
		_ref = fields;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			(x = se.fieldEncs, (i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = typeEncoder(typeByIndex(t, f.index)));
			_i++;
		}
		return $methodVal(se, "encode");
	};
	mapEncoder.ptr.prototype.encode = function(e, v, param) {
		var _i, _ref, i, k, me, sv, x;
		me = this;
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		e.Buffer.WriteByte(123);
		sv = (x = v.MapKeys(), $subslice(new stringValues(x.$array), x.$offset, x.$offset + x.$length));
		sort.Sort(sv);
		_ref = sv;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			k = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			e.string(k.String());
			e.Buffer.WriteByte(58);
			me.elemEnc(e, v.MapIndex(k), false);
			_i++;
		}
		e.Buffer.WriteByte(125);
	};
	mapEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newMapEncoder = function(t) {
		var me;
		if (!((t.Key().Kind() === 24))) {
			return unsupportedTypeEncoder;
		}
		me = new mapEncoder.ptr(typeEncoder(t.Elem()));
		return $methodVal(me, "encode");
	};
	encodeByteSlice = function(e, v, param) {
		var dst, enc, s;
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		s = v.Bytes();
		e.Buffer.WriteByte(34);
		if (s.$length < 1024) {
			dst = sliceType$1.make(base64.StdEncoding.EncodedLen(s.$length));
			base64.StdEncoding.Encode(dst, s);
			e.Buffer.Write(dst);
		} else {
			enc = base64.NewEncoder(base64.StdEncoding, e);
			enc.Write(s);
			enc.Close();
		}
		e.Buffer.WriteByte(34);
	};
	sliceEncoder.ptr.prototype.encode = function(e, v, param) {
		var se;
		se = this;
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		se.arrayEnc(e, v, false);
	};
	sliceEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newSliceEncoder = function(t) {
		var enc;
		if (t.Elem().Kind() === 8) {
			return encodeByteSlice;
		}
		enc = new sliceEncoder.ptr(newArrayEncoder(t));
		return $methodVal(enc, "encode");
	};
	arrayEncoder.ptr.prototype.encode = function(e, v, param) {
		var ae, i, n;
		ae = this;
		v = v;
		e.Buffer.WriteByte(91);
		n = v.Len();
		i = 0;
		while (i < n) {
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			ae.elemEnc(e, v.Index(i), false);
			i = i + (1) >> 0;
		}
		e.Buffer.WriteByte(93);
	};
	arrayEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newArrayEncoder = function(t) {
		var enc;
		enc = new arrayEncoder.ptr(typeEncoder(t.Elem()));
		return $methodVal(enc, "encode");
	};
	ptrEncoder.ptr.prototype.encode = function(e, v, quoted) {
		var pe;
		pe = this;
		v = v;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		pe.elemEnc(e, v.Elem(), quoted);
	};
	ptrEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newPtrEncoder = function(t) {
		var enc;
		enc = new ptrEncoder.ptr(typeEncoder(t.Elem()));
		return $methodVal(enc, "encode");
	};
	condAddrEncoder.ptr.prototype.encode = function(e, v, quoted) {
		var ce;
		ce = this;
		v = v;
		if (v.CanAddr()) {
			ce.canAddrEnc(e, v, quoted);
		} else {
			ce.elseEnc(e, v, quoted);
		}
	};
	condAddrEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newCondAddrEncoder = function(canAddrEnc, elseEnc) {
		var enc;
		enc = new condAddrEncoder.ptr(canAddrEnc, elseEnc);
		return $methodVal(enc, "encode");
	};
	isValidTag = function(s) {
		var _i, _ref, _rune, c;
		if (s === "") {
			return false;
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c)) {
			} else {
				if (!unicode.IsLetter(c) && !unicode.IsDigit(c)) {
					return false;
				}
			}
			_i += _rune[1];
		}
		return true;
	};
	fieldByIndex = function(v, index) {
		var _i, _ref, i;
		v = v;
		_ref = index;
		_i = 0;
		while (_i < _ref.$length) {
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v.Kind() === 22) {
				if (v.IsNil()) {
					return new reflect.Value.ptr(ptrType$2.nil, 0, 0);
				}
				v = v.Elem();
			}
			v = v.Field(i);
			_i++;
		}
		return v;
	};
	typeByIndex = function(t, index) {
		var _i, _ref, i;
		_ref = index;
		_i = 0;
		while (_i < _ref.$length) {
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (t.Kind() === 22) {
				t = t.Elem();
			}
			t = t.Field(i).Type;
			_i++;
		}
		return t;
	};
	stringValues.prototype.Len = function() {
		var sv;
		sv = this;
		return sv.$length;
	};
	$ptrType(stringValues).prototype.Len = function() { return this.$get().Len(); };
	stringValues.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, sv;
		sv = this;
		_tmp = ((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j]); _tmp$1 = ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]); (i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i] = _tmp; (j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j] = _tmp$1;
	};
	$ptrType(stringValues).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	stringValues.prototype.Less = function(i, j) {
		var sv;
		sv = this;
		return sv.get(i) < sv.get(j);
	};
	$ptrType(stringValues).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	stringValues.prototype.get = function(i) {
		var sv;
		sv = this;
		return ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]).String();
	};
	$ptrType(stringValues).prototype.get = function(i) { return this.$get().get(i); };
	encodeState.ptr.prototype.string = function(s) {
		var _ref, _tuple, b, c, e, i, len0, size, start;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (i < s.length) {
			b = s.charCodeAt(i);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				_ref = b;
				if (_ref === 92 || _ref === 34) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_ref === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_ref === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else if (_ref === 9) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(116);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRuneInString(s.substring(i)); c = _tuple[0]; size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.length) {
			e.Buffer.WriteString(s.substring(start));
		}
		e.Buffer.WriteByte(34);
		return [e.Buffer.Len() - len0 >> 0, $ifaceNil];
	};
	encodeState.prototype.string = function(s) { return this.$val.string(s); };
	encodeState.ptr.prototype.stringBytes = function(s) {
		var _ref, _tuple, b, c, e, i, len0, size, start;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (i < s.$length) {
			b = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				_ref = b;
				if (_ref === 92 || _ref === 34) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_ref === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_ref === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else if (_ref === 9) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(116);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, i)); c = _tuple[0]; size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.$length) {
			e.Buffer.Write($subslice(s, start));
		}
		e.Buffer.WriteByte(34);
		return [e.Buffer.Len() - len0 >> 0, $ifaceNil];
	};
	encodeState.prototype.stringBytes = function(s) { return this.$val.stringBytes(s); };
	fillField = function(f) {
		f = $clone(f, field);
		f.nameBytes = new sliceType$1($stringToBytes(f.name));
		f.equalFold = foldFunc(f.nameBytes);
		return f;
	};
	byName.prototype.Len = function() {
		var x;
		x = this;
		return x.$length;
	};
	$ptrType(byName).prototype.Len = function() { return this.$get().Len(); };
	byName.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field); _tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field); $copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp, field); $copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1, field);
	};
	$ptrType(byName).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byName.prototype.Less = function(i, j) {
		var x;
		x = this;
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name;
		}
		if (!((((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length))) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
		}
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).tag)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag;
		}
		return $subslice(new byIndex(x.$array), x.$offset, x.$offset + x.$length).Less(i, j);
	};
	$ptrType(byName).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byIndex.prototype.Len = function() {
		var x;
		x = this;
		return x.$length;
	};
	$ptrType(byIndex).prototype.Len = function() { return this.$get().Len(); };
	byIndex.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, x;
		x = this;
		_tmp = $clone(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field); _tmp$1 = $clone(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field); $copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp, field); $copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1, field);
	};
	$ptrType(byIndex).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byIndex.prototype.Less = function(i, j) {
		var _i, _ref, k, x, x$1, x$2, xik;
		x = this;
		_ref = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index;
		_i = 0;
		while (_i < _ref.$length) {
			k = _i;
			xik = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (k >= ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length) {
				return false;
			}
			if (!((xik === (x$1 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + k]))))) {
				return xik < (x$2 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + k]));
			}
			_i++;
		}
		return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
	};
	$ptrType(byIndex).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	typeFields = function(t) {
		var _entry, _entry$1, _entry$2, _entry$3, _i, _index, _key, _key$1, _key$2, _key$3, _key$4, _key$5, _lhs, _map, _map$1, _map$2, _map$3, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tuple$1, advance, count, current, dominant, f, fi, fields, fj, ft, i, i$1, index, name, name$1, next, nextCount, ok, opts, out, sf, tag, tagged, visited, x, x$1, x$2;
		current = new sliceType([]);
		next = new sliceType([new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$4.nil, t, false, false)]);
		count = (_map = new $Map(), _map);
		nextCount = (_map$1 = new $Map(), _map$1);
		visited = (_map$2 = new $Map(), _map$2);
		fields = sliceType.nil;
		while (next.$length > 0) {
			_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;
			_tmp$2 = nextCount; _tmp$3 = (_map$3 = new $Map(), _map$3); count = _tmp$2; nextCount = _tmp$3;
			_ref = current;
			_i = 0;
			while (_i < _ref.$length) {
				f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
				if ((_entry = visited[f.typ.$key()], _entry !== undefined ? _entry.v : false)) {
					_i++;
					continue;
				}
				_key$4 = f.typ; (visited || $throwRuntimeError("assignment to entry in nil map"))[_key$4.$key()] = { k: _key$4, v: true };
				i = 0;
				while (i < f.typ.NumField()) {
					sf = $clone(f.typ.Field(i), reflect.StructField);
					if (!(sf.PkgPath === "")) {
						i = i + (1) >> 0;
						continue;
					}
					tag = new reflect.StructTag(sf.Tag).Get("json");
					if (tag === "-") {
						i = i + (1) >> 0;
						continue;
					}
					_tuple = parseTag(tag); name = _tuple[0]; opts = _tuple[1];
					if (!isValidTag(name)) {
						name = "";
					}
					index = sliceType$4.make((f.index.$length + 1 >> 0));
					$copySlice(index, f.index);
					(x = f.index.$length, (x < 0 || x >= index.$length) ? $throwRuntimeError("index out of range") : index.$array[index.$offset + x] = i);
					ft = sf.Type;
					if (ft.Name() === "" && (ft.Kind() === 22)) {
						ft = ft.Elem();
					}
					if (!(name === "") || !sf.Anonymous || !((ft.Kind() === 25))) {
						tagged = !(name === "");
						if (name === "") {
							name = sf.Name;
						}
						fields = $append(fields, fillField(new field.ptr(name, sliceType$1.nil, $throwNilPointerError, tagged, index, ft, new tagOptions(opts).Contains("omitempty"), new tagOptions(opts).Contains("string"))));
						if ((_entry$1 = count[f.typ.$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1) {
							fields = $append(fields, (x$1 = fields.$length - 1 >> 0, ((x$1 < 0 || x$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$1])));
						}
						i = i + (1) >> 0;
						continue;
					}
					_lhs = nextCount; _index = ft; _key$5 = _index; (_lhs || $throwRuntimeError("assignment to entry in nil map"))[_key$5.$key()] = { k: _key$5, v: (_entry$2 = _lhs[_index.$key()], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };
					if ((_entry$3 = nextCount[ft.$key()], _entry$3 !== undefined ? _entry$3.v : 0) === 1) {
						next = $append(next, fillField(new field.ptr(ft.Name(), sliceType$1.nil, $throwNilPointerError, false, index, ft, false, false)));
					}
					i = i + (1) >> 0;
				}
				_i++;
			}
		}
		sort.Sort($subslice(new byName(fields.$array), fields.$offset, fields.$offset + fields.$length));
		out = $subslice(fields, 0, 0);
		_tmp$4 = 0; _tmp$5 = 0; advance = _tmp$4; i$1 = _tmp$5;
		while (i$1 < fields.$length) {
			fi = $clone(((i$1 < 0 || i$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + i$1]), field);
			name$1 = fi.name;
			advance = 1;
			while ((i$1 + advance >> 0) < fields.$length) {
				fj = $clone((x$2 = i$1 + advance >> 0, ((x$2 < 0 || x$2 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$2])), field);
				if (!(fj.name === name$1)) {
					break;
				}
				advance = advance + (1) >> 0;
			}
			if (advance === 1) {
				out = $append(out, fi);
				i$1 = i$1 + (advance) >> 0;
				continue;
			}
			_tuple$1 = dominantField($subslice(fields, i$1, (i$1 + advance >> 0))); dominant = $clone(_tuple$1[0], field); ok = _tuple$1[1];
			if (ok) {
				out = $append(out, dominant);
			}
			i$1 = i$1 + (advance) >> 0;
		}
		fields = out;
		sort.Sort($subslice(new byIndex(fields.$array), fields.$offset, fields.$offset + fields.$length));
		return fields;
	};
	dominantField = function(fields) {
		var _i, _ref, f, i, length, tagged;
		length = ((0 < 0 || 0 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]).index.$length;
		tagged = -1;
		_ref = fields;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			f = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			if (f.index.$length > length) {
				fields = $subslice(fields, 0, i);
				break;
			}
			if (f.tag) {
				if (tagged >= 0) {
					return [new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$4.nil, $ifaceNil, false, false), false];
				}
				tagged = i;
			}
			_i++;
		}
		if (tagged >= 0) {
			return [((tagged < 0 || tagged >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + tagged]), true];
		}
		if (fields.$length > 1) {
			return [new field.ptr("", sliceType$1.nil, $throwNilPointerError, false, sliceType$4.nil, $ifaceNil, false, false), false];
		}
		return [((0 < 0 || 0 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]), true];
	};
	cachedTypeFields = function(t) {
		var _entry, _key, _key$1, _map, f;
		fieldCache.RWMutex.RLock();
		f = (_entry = fieldCache.m[t.$key()], _entry !== undefined ? _entry.v : sliceType.nil);
		fieldCache.RWMutex.RUnlock();
		if (!(f === sliceType.nil)) {
			return f;
		}
		f = typeFields(t);
		if (f === sliceType.nil) {
			f = new sliceType([]);
		}
		fieldCache.RWMutex.Lock();
		if (fieldCache.m === false) {
			fieldCache.m = (_map = new $Map(), _map);
		}
		_key$1 = t; (fieldCache.m || $throwRuntimeError("assignment to entry in nil map"))[_key$1.$key()] = { k: _key$1, v: f };
		fieldCache.RWMutex.Unlock();
		return f;
	};
	foldFunc = function(s) {
		var _i, _ref, b, nonLetter, special, upper;
		nonLetter = false;
		special = false;
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				return bytes.EqualFold;
			}
			upper = (b & 223) >>> 0;
			if (upper < 65 || upper > 90) {
				nonLetter = true;
			} else if ((upper === 75) || (upper === 83)) {
				special = true;
			}
			_i++;
		}
		if (special) {
			return equalFoldRight;
		}
		if (nonLetter) {
			return asciiEqualFold;
		}
		return simpleLetterEqualFold;
	};
	equalFoldRight = function(s, t) {
		var _i, _ref, _ref$1, _tuple, sb, sbUpper, size, tb, tr;
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (t.$length === 0) {
				return false;
			}
			tb = ((0 < 0 || 0 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]);
			if (tb < 128) {
				if (!((sb === tb))) {
					sbUpper = (sb & 223) >>> 0;
					if (65 <= sbUpper && sbUpper <= 90) {
						if (!((sbUpper === ((tb & 223) >>> 0)))) {
							return false;
						}
					} else {
						return false;
					}
				}
				t = $subslice(t, 1);
				_i++;
				continue;
			}
			_tuple = utf8.DecodeRune(t); tr = _tuple[0]; size = _tuple[1];
			_ref$1 = sb;
			if (_ref$1 === 115 || _ref$1 === 83) {
				if (!((tr === 383))) {
					return false;
				}
			} else if (_ref$1 === 107 || _ref$1 === 75) {
				if (!((tr === 8490))) {
					return false;
				}
			} else {
				return false;
			}
			t = $subslice(t, size);
			_i++;
		}
		if (t.$length > 0) {
			return false;
		}
		return true;
	};
	asciiEqualFold = function(s, t) {
		var _i, _ref, i, sb, tb;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			tb = ((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]);
			if (sb === tb) {
				_i++;
				continue;
			}
			if ((97 <= sb && sb <= 122) || (65 <= sb && sb <= 90)) {
				if (!((((sb & 223) >>> 0) === ((tb & 223) >>> 0)))) {
					return false;
				}
			} else {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleLetterEqualFold = function(s, t) {
		var _i, _ref, b, i;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((((b & 223) >>> 0) === ((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) & 223) >>> 0)))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	compact = function(dst, src, escape) {
		var _i, _ref, c, i, origLen, scan, start, v, x, x$1, x$2;
		origLen = dst.Len();
		scan = $clone(new scanner.ptr(), scanner);
		scan.reset();
		start = 0;
		_ref = src;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (escape && ((c === 60) || (c === 62) || (c === 38))) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u00");
				dst.WriteByte(hex.charCodeAt((c >>> 4 << 24 >>> 24)));
				dst.WriteByte(hex.charCodeAt(((c & 15) >>> 0)));
				start = i + 1 >> 0;
			}
			if ((c === 226) && (i + 2 >> 0) < src.$length && ((x = i + 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) === 128) && (((x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) & ~1) === 168)) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u202");
				dst.WriteByte(hex.charCodeAt((((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])) & 15) >>> 0)));
				start = i + 3 >> 0;
			}
			v = scan.step(scan, (c >> 0));
			if (v >= 9) {
				if (v === 11) {
					break;
				}
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				start = i + 1 >> 0;
			}
			_i++;
		}
		if (scan.eof() === 11) {
			dst.Truncate(origLen);
			return scan.err;
		}
		if (start < src.$length) {
			dst.Write($subslice(src, start));
		}
		return $ifaceNil;
	};
	checkValid = function(data, scan) {
		var _i, _ref, c, x, x$1;
		scan.reset();
		_ref = data;
		_i = 0;
		while (_i < _ref.$length) {
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			scan.bytes = (x = scan.bytes, x$1 = new $Int64(0, 1), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
			if (scan.step(scan, (c >> 0)) === 11) {
				return scan.err;
			}
			_i++;
		}
		if (scan.eof() === 11) {
			return scan.err;
		}
		return $ifaceNil;
	};
	nextValue = function(data, scan) {
		var _i, _ref, _ref$1, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, err = $ifaceNil, i, rest = sliceType$1.nil, v, value = sliceType$1.nil;
		scan.reset();
		_ref = data;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			v = scan.step(scan, (c >> 0));
			if (v >= 10) {
				_ref$1 = v;
				if (_ref$1 === 11) {
					_tmp = sliceType$1.nil; _tmp$1 = sliceType$1.nil; _tmp$2 = scan.err; value = _tmp; rest = _tmp$1; err = _tmp$2;
					return [value, rest, err];
				} else if (_ref$1 === 10) {
					_tmp$3 = $subslice(data, 0, i); _tmp$4 = $subslice(data, i); _tmp$5 = $ifaceNil; value = _tmp$3; rest = _tmp$4; err = _tmp$5;
					return [value, rest, err];
				}
			}
			_i++;
		}
		if (scan.eof() === 11) {
			_tmp$6 = sliceType$1.nil; _tmp$7 = sliceType$1.nil; _tmp$8 = scan.err; value = _tmp$6; rest = _tmp$7; err = _tmp$8;
			return [value, rest, err];
		}
		_tmp$9 = data; _tmp$10 = sliceType$1.nil; _tmp$11 = $ifaceNil; value = _tmp$9; rest = _tmp$10; err = _tmp$11;
		return [value, rest, err];
	};
	SyntaxError.ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	scanner.ptr.prototype.reset = function() {
		var s;
		s = this;
		s.step = stateBeginValue;
		s.parseState = $subslice(s.parseState, 0, 0);
		s.err = $ifaceNil;
		s.redo = false;
		s.endTop = false;
	};
	scanner.prototype.reset = function() { return this.$val.reset(); };
	scanner.ptr.prototype.eof = function() {
		var s;
		s = this;
		if (!($interfaceIsEqual(s.err, $ifaceNil))) {
			return 11;
		}
		if (s.endTop) {
			return 10;
		}
		s.step(s, 32);
		if (s.endTop) {
			return 10;
		}
		if ($interfaceIsEqual(s.err, $ifaceNil)) {
			s.err = new SyntaxError.ptr("unexpected end of JSON input", s.bytes);
		}
		return 11;
	};
	scanner.prototype.eof = function() { return this.$val.eof(); };
	scanner.ptr.prototype.pushParseState = function(p) {
		var s;
		s = this;
		s.parseState = $append(s.parseState, p);
	};
	scanner.prototype.pushParseState = function(p) { return this.$val.pushParseState(p); };
	scanner.ptr.prototype.popParseState = function() {
		var n, s;
		s = this;
		n = s.parseState.$length - 1 >> 0;
		s.parseState = $subslice(s.parseState, 0, n);
		s.redo = false;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
		} else {
			s.step = stateEndValue;
		}
	};
	scanner.prototype.popParseState = function() { return this.$val.popParseState(); };
	isSpace = function(c) {
		return (c === 32) || (c === 9) || (c === 13) || (c === 10);
	};
	stateBeginValueOrEmpty = function(s, c) {
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 93) {
			return stateEndValue(s, c);
		}
		return stateBeginValue(s, c);
	};
	stateBeginValue = function(s, c) {
		var _ref;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		_ref = c;
		if (_ref === 123) {
			s.step = stateBeginStringOrEmpty;
			s.pushParseState(0);
			return 2;
		} else if (_ref === 91) {
			s.step = stateBeginValueOrEmpty;
			s.pushParseState(2);
			return 6;
		} else if (_ref === 34) {
			s.step = stateInString;
			return 1;
		} else if (_ref === 45) {
			s.step = stateNeg;
			return 1;
		} else if (_ref === 48) {
			s.step = state0;
			return 1;
		} else if (_ref === 116) {
			s.step = stateT;
			return 1;
		} else if (_ref === 102) {
			s.step = stateF;
			return 1;
		} else if (_ref === 110) {
			s.step = stateN;
			return 1;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 1;
		}
		return s.error(c, "looking for beginning of value");
	};
	stateBeginStringOrEmpty = function(s, c) {
		var n, x, x$1;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 125) {
			n = s.parseState.$length;
			(x = s.parseState, x$1 = n - 1 >> 0, (x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = 1);
			return stateEndValue(s, c);
		}
		return stateBeginString(s, c);
	};
	stateBeginString = function(s, c) {
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 34) {
			s.step = stateInString;
			return 1;
		}
		return s.error(c, "looking for beginning of object key string");
	};
	stateEndValue = function(s, c) {
		var _ref, n, ps, x, x$1, x$2, x$3, x$4, x$5;
		n = s.parseState.$length;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
			return stateEndTop(s, c);
		}
		if (c <= 32 && isSpace((c >> 0))) {
			s.step = stateEndValue;
			return 9;
		}
		ps = (x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_ref = ps;
		if (_ref === 0) {
			if (c === 58) {
				(x$2 = s.parseState, x$3 = n - 1 >> 0, (x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3] = 1);
				s.step = stateBeginValue;
				return 3;
			}
			return s.error(c, "after object key");
		} else if (_ref === 1) {
			if (c === 44) {
				(x$4 = s.parseState, x$5 = n - 1 >> 0, (x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = 0);
				s.step = stateBeginString;
				return 4;
			}
			if (c === 125) {
				s.popParseState();
				return 5;
			}
			return s.error(c, "after object key:value pair");
		} else if (_ref === 2) {
			if (c === 44) {
				s.step = stateBeginValue;
				return 7;
			}
			if (c === 93) {
				s.popParseState();
				return 8;
			}
			return s.error(c, "after array element");
		}
		return s.error(c, "");
	};
	stateEndTop = function(s, c) {
		if (!((c === 32)) && !((c === 9)) && !((c === 13)) && !((c === 10))) {
			s.error(c, "after top-level value");
		}
		return 10;
	};
	stateInString = function(s, c) {
		if (c === 34) {
			s.step = stateEndValue;
			return 0;
		}
		if (c === 92) {
			s.step = stateInStringEsc;
			return 0;
		}
		if (c < 32) {
			return s.error(c, "in string literal");
		}
		return 0;
	};
	stateInStringEsc = function(s, c) {
		var _ref;
		_ref = c;
		if (_ref === 98 || _ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 92 || _ref === 47 || _ref === 34) {
			s.step = stateInString;
			return 0;
		}
		if (c === 117) {
			s.step = stateInStringEscU;
			return 0;
		}
		return s.error(c, "in string escape code");
	};
	stateInStringEscU = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU1;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU1 = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU12;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU12 = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU123;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU123 = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInString;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateNeg = function(s, c) {
		if (c === 48) {
			s.step = state0;
			return 0;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return s.error(c, "in numeric literal");
	};
	state1 = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return state0(s, c);
	};
	state0 = function(s, c) {
		if (c === 46) {
			s.step = stateDot;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateDot = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		return s.error(c, "after decimal point in numeric literal");
	};
	stateDot0 = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateE = function(s, c) {
		if (c === 43) {
			s.step = stateESign;
			return 0;
		}
		if (c === 45) {
			s.step = stateESign;
			return 0;
		}
		return stateESign(s, c);
	};
	stateESign = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return s.error(c, "in exponent of numeric literal");
	};
	stateE0 = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateT = function(s, c) {
		if (c === 114) {
			s.step = stateTr;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'r')");
	};
	stateTr = function(s, c) {
		if (c === 117) {
			s.step = stateTru;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'u')");
	};
	stateTru = function(s, c) {
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'e')");
	};
	stateF = function(s, c) {
		if (c === 97) {
			s.step = stateFa;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'a')");
	};
	stateFa = function(s, c) {
		if (c === 108) {
			s.step = stateFal;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'l')");
	};
	stateFal = function(s, c) {
		if (c === 115) {
			s.step = stateFals;
			return 0;
		}
		return s.error(c, "in literal false (expecting 's')");
	};
	stateFals = function(s, c) {
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'e')");
	};
	stateN = function(s, c) {
		if (c === 117) {
			s.step = stateNu;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'u')");
	};
	stateNu = function(s, c) {
		if (c === 108) {
			s.step = stateNul;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateNul = function(s, c) {
		if (c === 108) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateError = function(s, c) {
		return 11;
	};
	scanner.ptr.prototype.error = function(c, context) {
		var s;
		s = this;
		s.step = stateError;
		s.err = new SyntaxError.ptr("invalid character " + quoteChar(c) + " " + context, s.bytes);
		return 11;
	};
	scanner.prototype.error = function(c, context) { return this.$val.error(c, context); };
	quoteChar = function(c) {
		var s;
		if (c === 39) {
			return "'\\''";
		}
		if (c === 34) {
			return "'\"'";
		}
		s = strconv.Quote($encodeRune(c));
		return "'" + s.substring(1, (s.length - 1 >> 0)) + "'";
	};
	scanner.ptr.prototype.undo = function(scanCode) {
		var s;
		s = this;
		if (s.redo) {
			$panic(new $String("json: invalid use of scanner"));
		}
		s.redoCode = scanCode;
		s.redoState = s.step;
		s.step = stateRedo;
		s.redo = true;
	};
	scanner.prototype.undo = function(scanCode) { return this.$val.undo(scanCode); };
	stateRedo = function(s, c) {
		s.redo = false;
		s.step = s.redoState;
		return s.redoCode;
	};
	parseTag = function(tag) {
		var idx;
		idx = strings.Index(tag, ",");
		if (!((idx === -1))) {
			return [tag.substring(0, idx), tag.substring((idx + 1 >> 0))];
		}
		return [tag, ""];
	};
	tagOptions.prototype.Contains = function(optionName) {
		var _tmp, _tmp$1, i, next, o, s;
		o = this.$val;
		if (o.length === 0) {
			return false;
		}
		s = o;
		while (!(s === "")) {
			next = "";
			i = strings.Index(s, ",");
			if (i >= 0) {
				_tmp = s.substring(0, i); _tmp$1 = s.substring((i + 1 >> 0)); s = _tmp; next = _tmp$1;
			}
			if (s === optionName) {
				return true;
			}
			s = next;
		}
		return false;
	};
	$ptrType(tagOptions).prototype.Contains = function(optionName) { return new tagOptions(this.$get()).Contains(optionName); };
	ptrType$6.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$8.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	Number.methods = [{prop: "Float64", name: "Float64", pkg: "", type: $funcType([], [$Float64, $error], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64, $error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$9.methods = [{prop: "Float64", name: "Float64", pkg: "", type: $funcType([], [$Float64, $error], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64, $error], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$10.methods = [{prop: "array", name: "array", pkg: "encoding/json", type: $funcType([reflect.Value], [], false)}, {prop: "arrayInterface", name: "arrayInterface", pkg: "encoding/json", type: $funcType([], [sliceType$2], false)}, {prop: "convertNumber", name: "convertNumber", pkg: "encoding/json", type: $funcType([$String], [$emptyInterface, $error], false)}, {prop: "error", name: "error", pkg: "encoding/json", type: $funcType([$error], [], false)}, {prop: "indirect", name: "indirect", pkg: "encoding/json", type: $funcType([reflect.Value, $Bool], [Unmarshaler, encoding.TextUnmarshaler, reflect.Value], false)}, {prop: "init", name: "init", pkg: "encoding/json", type: $funcType([sliceType$1], [ptrType$10], false)}, {prop: "literal", name: "literal", pkg: "encoding/json", type: $funcType([reflect.Value], [], false)}, {prop: "literalInterface", name: "literalInterface", pkg: "encoding/json", type: $funcType([], [$emptyInterface], false)}, {prop: "literalStore", name: "literalStore", pkg: "encoding/json", type: $funcType([sliceType$1, reflect.Value, $Bool], [], false)}, {prop: "next", name: "next", pkg: "encoding/json", type: $funcType([], [sliceType$1], false)}, {prop: "object", name: "object", pkg: "encoding/json", type: $funcType([reflect.Value], [], false)}, {prop: "objectInterface", name: "objectInterface", pkg: "encoding/json", type: $funcType([], [mapType$2], false)}, {prop: "saveError", name: "saveError", pkg: "encoding/json", type: $funcType([$error], [], false)}, {prop: "scanWhile", name: "scanWhile", pkg: "encoding/json", type: $funcType([$Int], [$Int], false)}, {prop: "unmarshal", name: "unmarshal", pkg: "encoding/json", type: $funcType([$emptyInterface], [$error], false)}, {prop: "value", name: "value", pkg: "encoding/json", type: $funcType([reflect.Value], [], false)}, {prop: "valueInterface", name: "valueInterface", pkg: "encoding/json", type: $funcType([], [$emptyInterface], false)}, {prop: "valueQuoted", name: "valueQuoted", pkg: "encoding/json", type: $funcType([], [$emptyInterface], false)}];
	ptrType$11.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$12.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$14.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Bytes", name: "Bytes", pkg: "", type: $funcType([], [sliceType$1], false)}, {prop: "Grow", name: "Grow", pkg: "", type: $funcType([$Int], [], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Next", name: "Next", pkg: "", type: $funcType([$Int], [sliceType$1], false)}, {prop: "Read", name: "Read", pkg: "", type: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "ReadByte", name: "ReadByte", pkg: "", type: $funcType([], [$Uint8, $error], false)}, {prop: "ReadBytes", name: "ReadBytes", pkg: "", type: $funcType([$Uint8], [sliceType$1, $error], false)}, {prop: "ReadFrom", name: "ReadFrom", pkg: "", type: $funcType([io.Reader], [$Int64, $error], false)}, {prop: "ReadRune", name: "ReadRune", pkg: "", type: $funcType([], [$Int32, $Int, $error], false)}, {prop: "ReadString", name: "ReadString", pkg: "", type: $funcType([$Uint8], [$String, $error], false)}, {prop: "Reset", name: "Reset", pkg: "", type: $funcType([], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Truncate", name: "Truncate", pkg: "", type: $funcType([$Int], [], false)}, {prop: "UnreadByte", name: "UnreadByte", pkg: "", type: $funcType([], [$error], false)}, {prop: "UnreadRune", name: "UnreadRune", pkg: "", type: $funcType([], [$error], false)}, {prop: "Write", name: "Write", pkg: "", type: $funcType([sliceType$1], [$Int, $error], false)}, {prop: "WriteByte", name: "WriteByte", pkg: "", type: $funcType([$Uint8], [$error], false)}, {prop: "WriteRune", name: "WriteRune", pkg: "", type: $funcType([$Int32], [$Int, $error], false)}, {prop: "WriteString", name: "WriteString", pkg: "", type: $funcType([$String], [$Int, $error], false)}, {prop: "WriteTo", name: "WriteTo", pkg: "", type: $funcType([io.Writer], [$Int64, $error], false)}, {prop: "grow", name: "grow", pkg: "bytes", type: $funcType([$Int], [$Int], false)}, {prop: "readSlice", name: "readSlice", pkg: "bytes", type: $funcType([$Uint8], [sliceType$1, $error], false)}, {prop: "error", name: "error", pkg: "encoding/json", type: $funcType([$error], [], false)}, {prop: "marshal", name: "marshal", pkg: "encoding/json", type: $funcType([$emptyInterface], [$error], false)}, {prop: "reflectValue", name: "reflectValue", pkg: "encoding/json", type: $funcType([reflect.Value], [], false)}, {prop: "string", name: "string", pkg: "encoding/json", type: $funcType([$String], [$Int, $error], false)}, {prop: "stringBytes", name: "stringBytes", pkg: "encoding/json", type: $funcType([sliceType$1], [$Int, $error], false)}];
	floatEncoder.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", type: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$15.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", type: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$16.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", type: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$17.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", type: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$18.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", type: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$19.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", type: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$20.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", type: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	ptrType$21.methods = [{prop: "encode", name: "encode", pkg: "encoding/json", type: $funcType([ptrType$4, reflect.Value, $Bool], [], false)}];
	stringValues.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}, {prop: "get", name: "get", pkg: "encoding/json", type: $funcType([$Int], [$String], false)}];
	ptrType$22.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}, {prop: "get", name: "get", pkg: "encoding/json", type: $funcType([$Int], [$String], false)}];
	byName.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	ptrType$23.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	byIndex.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	ptrType$24.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	ptrType$25.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$26.methods = [{prop: "eof", name: "eof", pkg: "encoding/json", type: $funcType([], [$Int], false)}, {prop: "error", name: "error", pkg: "encoding/json", type: $funcType([$Int, $String], [$Int], false)}, {prop: "popParseState", name: "popParseState", pkg: "encoding/json", type: $funcType([], [], false)}, {prop: "pushParseState", name: "pushParseState", pkg: "encoding/json", type: $funcType([$Int], [], false)}, {prop: "reset", name: "reset", pkg: "encoding/json", type: $funcType([], [], false)}, {prop: "undo", name: "undo", pkg: "encoding/json", type: $funcType([$Int], [], false)}];
	tagOptions.methods = [{prop: "Contains", name: "Contains", pkg: "", type: $funcType([$String], [$Bool], false)}];
	ptrType$29.methods = [{prop: "Contains", name: "Contains", pkg: "", type: $funcType([$String], [$Bool], false)}];
	Unmarshaler.init([{prop: "UnmarshalJSON", name: "UnmarshalJSON", pkg: "", type: $funcType([sliceType$1], [$error], false)}]);
	UnmarshalTypeError.init([{prop: "Value", name: "Value", pkg: "", type: $String, tag: ""}, {prop: "Type", name: "Type", pkg: "", type: reflect.Type, tag: ""}]);
	InvalidUnmarshalError.init([{prop: "Type", name: "Type", pkg: "", type: reflect.Type, tag: ""}]);
	decodeState.init([{prop: "data", name: "data", pkg: "encoding/json", type: sliceType$1, tag: ""}, {prop: "off", name: "off", pkg: "encoding/json", type: $Int, tag: ""}, {prop: "scan", name: "scan", pkg: "encoding/json", type: scanner, tag: ""}, {prop: "nextscan", name: "nextscan", pkg: "encoding/json", type: scanner, tag: ""}, {prop: "savedError", name: "savedError", pkg: "encoding/json", type: $error, tag: ""}, {prop: "useNumber", name: "useNumber", pkg: "encoding/json", type: $Bool, tag: ""}]);
	unquotedValue.init([]);
	Marshaler.init([{prop: "MarshalJSON", name: "MarshalJSON", pkg: "", type: $funcType([], [sliceType$1, $error], false)}]);
	UnsupportedTypeError.init([{prop: "Type", name: "Type", pkg: "", type: reflect.Type, tag: ""}]);
	UnsupportedValueError.init([{prop: "Value", name: "Value", pkg: "", type: reflect.Value, tag: ""}, {prop: "Str", name: "Str", pkg: "", type: $String, tag: ""}]);
	MarshalerError.init([{prop: "Type", name: "Type", pkg: "", type: reflect.Type, tag: ""}, {prop: "Err", name: "Err", pkg: "", type: $error, tag: ""}]);
	encodeState.init([{prop: "Buffer", name: "", pkg: "", type: bytes.Buffer, tag: ""}, {prop: "scratch", name: "scratch", pkg: "encoding/json", type: arrayType, tag: ""}]);
	encoderFunc.init([ptrType$4, reflect.Value, $Bool], [], false);
	structEncoder.init([{prop: "fields", name: "fields", pkg: "encoding/json", type: sliceType, tag: ""}, {prop: "fieldEncs", name: "fieldEncs", pkg: "encoding/json", type: sliceType$3, tag: ""}]);
	mapEncoder.init([{prop: "elemEnc", name: "elemEnc", pkg: "encoding/json", type: encoderFunc, tag: ""}]);
	sliceEncoder.init([{prop: "arrayEnc", name: "arrayEnc", pkg: "encoding/json", type: encoderFunc, tag: ""}]);
	arrayEncoder.init([{prop: "elemEnc", name: "elemEnc", pkg: "encoding/json", type: encoderFunc, tag: ""}]);
	ptrEncoder.init([{prop: "elemEnc", name: "elemEnc", pkg: "encoding/json", type: encoderFunc, tag: ""}]);
	condAddrEncoder.init([{prop: "canAddrEnc", name: "canAddrEnc", pkg: "encoding/json", type: encoderFunc, tag: ""}, {prop: "elseEnc", name: "elseEnc", pkg: "encoding/json", type: encoderFunc, tag: ""}]);
	stringValues.init(reflect.Value);
	field.init([{prop: "name", name: "name", pkg: "encoding/json", type: $String, tag: ""}, {prop: "nameBytes", name: "nameBytes", pkg: "encoding/json", type: sliceType$1, tag: ""}, {prop: "equalFold", name: "equalFold", pkg: "encoding/json", type: funcType, tag: ""}, {prop: "tag", name: "tag", pkg: "encoding/json", type: $Bool, tag: ""}, {prop: "index", name: "index", pkg: "encoding/json", type: sliceType$4, tag: ""}, {prop: "typ", name: "typ", pkg: "encoding/json", type: reflect.Type, tag: ""}, {prop: "omitEmpty", name: "omitEmpty", pkg: "encoding/json", type: $Bool, tag: ""}, {prop: "quoted", name: "quoted", pkg: "encoding/json", type: $Bool, tag: ""}]);
	byName.init(field);
	byIndex.init(field);
	SyntaxError.init([{prop: "msg", name: "msg", pkg: "encoding/json", type: $String, tag: ""}, {prop: "Offset", name: "Offset", pkg: "", type: $Int64, tag: ""}]);
	scanner.init([{prop: "step", name: "step", pkg: "encoding/json", type: funcType$1, tag: ""}, {prop: "endTop", name: "endTop", pkg: "encoding/json", type: $Bool, tag: ""}, {prop: "parseState", name: "parseState", pkg: "encoding/json", type: sliceType$4, tag: ""}, {prop: "err", name: "err", pkg: "encoding/json", type: $error, tag: ""}, {prop: "redo", name: "redo", pkg: "encoding/json", type: $Bool, tag: ""}, {prop: "redoCode", name: "redoCode", pkg: "encoding/json", type: $Int, tag: ""}, {prop: "redoState", name: "redoState", pkg: "encoding/json", type: funcType$1, tag: ""}, {prop: "bytes", name: "bytes", pkg: "encoding/json", type: $Int64, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_json = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = encoding.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = base64.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = errors.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = fmt.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = nosync.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = math.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		$r = reflect.$init($BLOCKING); /* */ $s = 9; case 9: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 10; case 10: if ($r && $r.$blocking) { $r = $r(); }
		$r = sort.$init($BLOCKING); /* */ $s = 11; case 11: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 12; case 12: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 13; case 13: if ($r && $r.$blocking) { $r = $r(); }
		$r = unicode.$init($BLOCKING); /* */ $s = 14; case 14: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf16.$init($BLOCKING); /* */ $s = 15; case 15: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 16; case 16: if ($r && $r.$blocking) { $r = $r(); }
		encoderCache = new structType.ptr();
		fieldCache = new structType$1.ptr();
		errPhase = errors.New("JSON decoder out of sync - data changing underfoot?");
		nullLiteral = new sliceType$1($stringToBytes("null"));
		numberType = reflect.TypeOf(new Number(""));
		hex = "0123456789abcdef";
		byteSliceType = reflect.TypeOf(sliceType$1.nil);
		marshalerType = reflect.TypeOf($newDataPointer($ifaceNil, ptrType)).Elem();
		textMarshalerType = reflect.TypeOf($newDataPointer($ifaceNil, ptrType$1)).Elem();
		float32Encoder = $methodVal(new floatEncoder(32), "encode");
		float64Encoder = $methodVal(new floatEncoder(64), "encode");
		/* */ } return; } }; $init_json.$blocking = true; return $init_json;
	};
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, nosync, math, Source, Rand, lockedSource, rngSource, sliceType, ptrType$1, ptrType$2, arrayType, ptrType$3, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, Seed, Intn, seedrand;
	nosync = $packages["github.com/gopherjs/gopherjs/nosync"];
	math = $packages["math"];
	Source = $pkg.Source = $newType(8, $kindInterface, "rand.Source", "Source", "math/rand", null);
	Rand = $pkg.Rand = $newType(0, $kindStruct, "rand.Rand", "Rand", "math/rand", function(src_) {
		this.$val = this;
		this.src = src_ !== undefined ? src_ : $ifaceNil;
	});
	lockedSource = $pkg.lockedSource = $newType(0, $kindStruct, "rand.lockedSource", "lockedSource", "math/rand", function(lk_, src_) {
		this.$val = this;
		this.lk = lk_ !== undefined ? lk_ : new nosync.Mutex.ptr();
		this.src = src_ !== undefined ? src_ : $ifaceNil;
	});
	rngSource = $pkg.rngSource = $newType(0, $kindStruct, "rand.rngSource", "rngSource", "math/rand", function(tap_, feed_, vec_) {
		this.$val = this;
		this.tap = tap_ !== undefined ? tap_ : 0;
		this.feed = feed_ !== undefined ? feed_ : 0;
		this.vec = vec_ !== undefined ? vec_ : arrayType.zero();
	});
		sliceType = $sliceType($Int);
		ptrType$1 = $ptrType(Rand);
		ptrType$2 = $ptrType(lockedSource);
		arrayType = $arrayType($Int64, 607);
		ptrType$3 = $ptrType(rngSource);
	Rand.ptr.prototype.ExpFloat64 = function() {
		var i, j, r, x, x$1;
		r = this;
		while (true) {
			j = r.Uint32();
			i = (j & 255) >>> 0;
			x = j * $coerceFloat32(((i < 0 || i >= we.length) ? $throwRuntimeError("index out of range") : we[i]));
			if (j < ((i < 0 || i >= ke.length) ? $throwRuntimeError("index out of range") : ke[i])) {
				return x;
			}
			if (i === 0) {
				return 7.69711747013105 - math.Log(r.Float64());
			}
			if (((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]) + r.Float64() * ((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? $throwRuntimeError("index out of range") : fe[x$1])) - ((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i])) < math.Exp(-x)) {
				return x;
			}
		}
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		if (i < 0) {
			return (-i >>> 0);
		}
		return (i >>> 0);
	};
	Rand.ptr.prototype.NormFloat64 = function() {
		var i, j, r, x, x$1, y;
		r = this;
		while (true) {
			j = (r.Uint32() >> 0);
			i = j & 127;
			x = j * $coerceFloat32(((i < 0 || i >= wn.length) ? $throwRuntimeError("index out of range") : wn[i]));
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? $throwRuntimeError("index out of range") : kn[i])) {
				return x;
			}
			if (i === 0) {
				while (true) {
					x = -math.Log(r.Float64()) * 0.29047645161474317;
					y = -math.Log(r.Float64());
					if (y + y >= x * x) {
						break;
					}
				}
				if (j > 0) {
					return 3.442619855899 + x;
				}
				return -3.442619855899 - x;
			}
			if (((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]) + r.Float64() * ((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? $throwRuntimeError("index out of range") : fn[x$1])) - ((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i])) < math.Exp(-0.5 * x * x)) {
				return x;
			}
		}
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = $pkg.NewSource = function(seed) {
		var rng;
		rng = $clone(new rngSource.ptr(), rngSource);
		rng.Seed(seed);
		return rng;
	};
	New = $pkg.New = function(src) {
		return new Rand.ptr(src);
	};
	Rand.ptr.prototype.Seed = function(seed) {
		var r;
		r = this;
		r.src.Seed(seed);
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.ptr.prototype.Int63 = function() {
		var r;
		r = this;
		return r.src.Int63();
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.ptr.prototype.Uint32 = function() {
		var r;
		r = this;
		return ($shiftRightInt64(r.Int63(), 31).$low >>> 0);
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.ptr.prototype.Int31 = function() {
		var r, x;
		r = this;
		return ((x = $shiftRightInt64(r.Int63(), 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.ptr.prototype.Int = function() {
		var r, u;
		r = this;
		u = (r.Int63().$low >>> 0);
		return (((u << 1 >>> 0) >>> 1 >>> 0) >> 0);
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.ptr.prototype.Int63n = function(n) {
		var max, r, v, x, x$1, x$2, x$3, x$4, x$5;
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) {
			return (x$2 = r.Int63(), x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		}
		max = (x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), new $Uint64(n.$high, n.$low), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low));
		v = r.Int63();
		while ((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low))) {
			v = r.Int63();
		}
		return $div64(v, n, true);
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.ptr.prototype.Int31n = function(n) {
		var _r, _r$1, max, r, v;
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		if ((n & ((n - 1 >> 0))) === 0) {
			return r.Int31() & ((n - 1 >> 0));
		}
		max = ((2147483647 - (_r = 2147483648 % (n >>> 0), _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0);
		v = r.Int31();
		while (v > max) {
			v = r.Int31();
		}
		return (_r$1 = v % n, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.ptr.prototype.Intn = function(n) {
		var r, x;
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		if (n <= 2147483647) {
			return (r.Int31n((n >> 0)) >> 0);
		}
		return ((x = r.Int63n(new $Int64(0, n)), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.ptr.prototype.Float64 = function() {
		var f, r;
		r = this;
		f = $flatten64(r.Int63()) / 9.223372036854776e+18;
		if (f === 1) {
			f = 0;
		}
		return f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.ptr.prototype.Float32 = function() {
		var f, r;
		r = this;
		f = r.Float64();
		if ($float32IsEqual(f, 1)) {
			f = 0;
		}
		return f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.ptr.prototype.Perm = function(n) {
		var i, j, m, r;
		r = this;
		m = sliceType.make(n);
		i = 0;
		while (i < n) {
			j = r.Intn(i + 1 >> 0);
			(i < 0 || i >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + j]);
			(j < 0 || j >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + j] = i;
			i = i + (1) >> 0;
		}
		return m;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	Seed = $pkg.Seed = function(seed) {
		globalRand.Seed(seed);
	};
	Intn = $pkg.Intn = function(n) {
		return globalRand.Intn(n);
	};
	lockedSource.ptr.prototype.Int63 = function() {
		var n = new $Int64(0, 0), r;
		r = this;
		r.lk.Lock();
		n = r.src.Int63();
		r.lk.Unlock();
		return n;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.ptr.prototype.Seed = function(seed) {
		var r;
		r = this;
		r.lk.Lock();
		r.src.Seed(seed);
		r.lk.Unlock();
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	seedrand = function(x) {
		var _q, _r, hi, lo;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ((((48271 >>> 16 << 16) * lo >> 0) + (48271 << 16 >>> 16) * lo) >> 0) - ((((3399 >>> 16 << 16) * hi >> 0) + (3399 << 16 >>> 16) * hi) >> 0) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.ptr.prototype.Seed = function(seed) {
		var i, rng, u, x, x$1, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = ((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0);
		i = -20;
		while (i < 607) {
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64(new $Int64(0, x$1), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64(new $Int64(0, x$1), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = new $Int64(0, x$1), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? $throwRuntimeError("index out of range") : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, (i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i] = new $Int64(u.$high & 2147483647, (u.$low & 4294967295) >>> 0));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.ptr.prototype.Int63 = function() {
		var rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$7 = (x = (x$1 = (x$2 = rng.vec, x$3 = rng.feed, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3])), x$4 = (x$5 = rng.vec, x$6 = rng.tap, ((x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[x$6])), new $Int64(x$1.$high + x$4.$high, x$1.$low + x$4.$low)), new $Int64(x.$high & 2147483647, (x.$low & 4294967295) >>> 0));
		(x$8 = rng.vec, x$9 = rng.feed, (x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[x$9] = x$7);
		return x$7;
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	ptrType$1.methods = [{prop: "ExpFloat64", name: "ExpFloat64", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Float32", name: "Float32", pkg: "", type: $funcType([], [$Float32], false)}, {prop: "Float64", name: "Float64", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int31", name: "Int31", pkg: "", type: $funcType([], [$Int32], false)}, {prop: "Int31n", name: "Int31n", pkg: "", type: $funcType([$Int32], [$Int32], false)}, {prop: "Int63", name: "Int63", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Int63n", name: "Int63n", pkg: "", type: $funcType([$Int64], [$Int64], false)}, {prop: "Intn", name: "Intn", pkg: "", type: $funcType([$Int], [$Int], false)}, {prop: "NormFloat64", name: "NormFloat64", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Perm", name: "Perm", pkg: "", type: $funcType([$Int], [sliceType], false)}, {prop: "Seed", name: "Seed", pkg: "", type: $funcType([$Int64], [], false)}, {prop: "Uint32", name: "Uint32", pkg: "", type: $funcType([], [$Uint32], false)}];
	ptrType$2.methods = [{prop: "Int63", name: "Int63", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", type: $funcType([$Int64], [], false)}];
	ptrType$3.methods = [{prop: "Int63", name: "Int63", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", type: $funcType([$Int64], [], false)}];
	Source.init([{prop: "Int63", name: "Int63", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Seed", name: "Seed", pkg: "", type: $funcType([$Int64], [], false)}]);
	Rand.init([{prop: "src", name: "src", pkg: "math/rand", type: Source, tag: ""}]);
	lockedSource.init([{prop: "lk", name: "lk", pkg: "math/rand", type: nosync.Mutex, tag: ""}, {prop: "src", name: "src", pkg: "math/rand", type: Source, tag: ""}]);
	rngSource.init([{prop: "tap", name: "tap", pkg: "math/rand", type: $Int, tag: ""}, {prop: "feed", name: "feed", pkg: "math/rand", type: $Int, tag: ""}, {prop: "vec", name: "vec", pkg: "math/rand", type: arrayType, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_rand = function() { while (true) { switch ($s) { case 0:
		$r = nosync.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = math.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		ke = $toNativeArray($kindUint32, [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray($kindFloat32, [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray($kindFloat32, [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray($kindUint32, [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray($kindFloat32, [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray($kindFloat32, [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray($kindInt64, [new $Int64(1173834291, 3952672746), new $Int64(1081821761, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(669549340, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(492609478, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(772864846, 3467012610), new $Int64(2006957225, 2344407434), new $Int64(402115761, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(1178782866, 520164395), new $Int64(555910815, 1341358184), new $Int64(632398609, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(60039534, 998951326), new $Int64(1535158725, 1364957564), new $Int64(63173359, 4090230633), new $Int64(649454641, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(1038377625, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(1035966148, 3922894967), new $Int64(810508934, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(1053232044, 433121399), new $Int64(2451824, 4162580594), new $Int64(2010221076, 4132415622), new $Int64(611252600, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(1522878809, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(1863677552, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(79673492, 3430061722), new $Int64(663048513, 3820169661), new $Int64(481498454, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(1295374591, 2472200560), new $Int64(1587026100, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(1972496813, 95608918), new $Int64(392686347, 3690479145), new $Int64(941912722, 1397922290), new $Int64(988169623, 1516129515), new $Int64(1827305493, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(194013850, 1336785672), new $Int64(2102397034, 4131677129), new $Int64(755205548, 4246329084), new $Int64(1004983461, 3788585631), new $Int64(2081005363, 3080389532), new $Int64(1501045284, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(1628305930, 2276716302), new $Int64(1779030508, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(634572984, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(1213226718, 4159821533), new $Int64(2070861710, 1894661), new $Int64(1472989750, 1156868282), new $Int64(348271067, 776219088), new $Int64(1646054810, 2425634259), new $Int64(1716021749, 680510161), new $Int64(1573220192, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(1821788136, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(7834944, 1232604732), new $Int64(309412934, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(521080809, 3589632480), new $Int64(1198416575, 864579159), new $Int64(208735487, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(403198876, 100794388), new $Int64(956062190, 2991674471), new $Int64(1938816907, 2224662036), new $Int64(1973824487, 977097250), new $Int64(1351320195, 726419512), new $Int64(1964023751, 1747974366), new $Int64(1394388465, 1556430604), new $Int64(1097991433, 1080776742), new $Int64(1761636690, 280794874), new $Int64(117767733, 919835643), new $Int64(1180474222, 3434019658), new $Int64(196069168, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(879802240, 2724693469), new $Int64(547796833, 598827710), new $Int64(300924196, 3452273442), new $Int64(2071705424, 649274915), new $Int64(1346182319, 2585724112), new $Int64(636549385, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(2094573470, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(2022678706, 681540375), new $Int64(1375448925, 537050586), new $Int64(182715304, 315246468), new $Int64(226402871, 849323088), new $Int64(1262421183, 45543944), new $Int64(1201038398, 2319052083), new $Int64(2106775454, 3613090841), new $Int64(560472520, 2992171180), new $Int64(1765620479, 2068244785), new $Int64(917538188, 4239862634), new $Int64(777927839, 3892253031), new $Int64(720683925, 958186149), new $Int64(1724185863, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(267722611, 2764496274), new $Int64(341003118, 4196182374), new $Int64(1080717893, 550964545), new $Int64(818747069, 420611474), new $Int64(222653272, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(780007692, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(419862118, 281976339), new $Int64(574970164, 3619802330), new $Int64(1715552825, 3084554784), new $Int64(882872465, 4129772886), new $Int64(43084605, 1680378557), new $Int64(525521057, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(211654685, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(1312620086, 3958162143), new $Int64(920972075, 2773705983), new $Int64(1876039582, 225908689), new $Int64(963748535, 908216283), new $Int64(1541787429, 3574646075), new $Int64(319760557, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(1546084160, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(908474287, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(1594236910, 807894872), new $Int64(366158341, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(671241040, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(988084219, 1906263026), new $Int64(475781207, 3904421704), new $Int64(1523946520, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(404732502, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(1917039957, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(1990909507, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(1257737460, 209092916), new $Int64(1899814242, 1242699167), new $Int64(1433653252, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(949899753, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(201241205, 1766109365), new $Int64(700596547, 3257093788), new $Int64(1962768719, 2365720207), new $Int64(93384808, 3742754173), new $Int64(1689098413, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(1313222695, 3573511231), new $Int64(1392911121, 1760299077), new $Int64(771856457, 2260779833), new $Int64(1281464374, 1452805722), new $Int64(917811730, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(172616216, 500935732), new $Int64(1403501753, 676580929), new $Int64(581571365, 1184984890), new $Int64(1455515235, 1271474274), new $Int64(318728910, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(94256461, 1488599718), new $Int64(966951817, 3408913763), new $Int64(60951736, 2501050084), new $Int64(1272353200, 1639124157), new $Int64(138001144, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(1982239940, 3414355209), new $Int64(1355154361, 2275136352), new $Int64(89709303, 2151835223), new $Int64(1216338715, 1654534827), new $Int64(1467562197, 377892833), new $Int64(1664767638, 660204544), new $Int64(85706799, 390828249), new $Int64(725310955, 3402783878), new $Int64(678849488, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(2079333076, 2452299106), new $Int64(1251318826, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(952516517, 182675323), new $Int64(548928884, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(1295624457, 3622207527), new $Int64(338126939, 432729309), new $Int64(480013522, 2391914317), new $Int64(297925497, 235747924), new $Int64(2120733629, 3088823825), new $Int64(1402403853, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(1406657158, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(1482330167, 1583624461), new $Int64(1261660694, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(76914806, 2207265429), new $Int64(260686035, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(1791233343, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(201728503, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(1195302398, 286492130), new $Int64(2045622690, 2795735007), new $Int64(1431753082, 3703961339), new $Int64(1999047161, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(482063550, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(1396904208, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(1399463792, 3573129983), new $Int64(1256901817, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(193076235, 268782709), new $Int64(1145360145, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(1235864944, 2205342611), new $Int64(1474779655, 1411666394), new $Int64(619028749, 677744900), new $Int64(270855115, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(1029966689, 1082141470), new $Int64(377371856, 4046134367), new $Int64(51415528, 2142943655), new $Int64(1897659315, 3124627521), new $Int64(998228909, 219992939), new $Int64(1068692697, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(1621625642, 1647770243), new $Int64(111523943, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(100152742, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(154500578, 2011457303), new $Int64(796460974, 3057425772), new $Int64(667839456, 81484597), new $Int64(465502760, 3646681560), new $Int64(775020923, 635548515), new $Int64(602489502, 2508044581), new $Int64(353263531, 1014917157), new $Int64(719992433, 3214891315), new $Int64(852684611, 959582252), new $Int64(226415134, 3347040449), new $Int64(1784615552, 4102971975), new $Int64(397887437, 4078022210), new $Int64(1610679822, 2851767182), new $Int64(749162636, 1540160644), new $Int64(598384772, 1057290595), new $Int64(2034890660, 3907769253), new $Int64(579300318, 4248952684), new $Int64(1092907599, 132554364), new $Int64(1061621234, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(1064490251, 2230939180), new $Int64(342915576, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(1418222537, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(1034385958, 3188942166), new $Int64(2073003539, 350070824), new $Int64(144881592, 61758415), new $Int64(1405659422, 3492950336), new $Int64(117440928, 3093818430), new $Int64(1693893113, 2962480613), new $Int64(235432940, 3154871160), new $Int64(511005079, 3228564679), new $Int64(610731502, 888276216), new $Int64(1200780674, 3574998604), new $Int64(870415268, 1967526716), new $Int64(591335707, 1554691298), new $Int64(574459414, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(279882768, 3764362170), new $Int64(492091056, 266611402), new $Int64(1754227768, 2047856075), new $Int64(1146757215, 21444105), new $Int64(1198058894, 3065563181), new $Int64(1915064845, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(1661896145, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(1552335120, 2036813414), new $Int64(152606527, 3105536507), new $Int64(13954645, 3396176938), new $Int64(1426081645, 1377154485), new $Int64(2085644467, 3807014186), new $Int64(543009040, 3710110597), new $Int64(396058129, 916420443), new $Int64(734556788, 2103831255), new $Int64(381322154, 717331943), new $Int64(572884752, 3550505941), new $Int64(45939673, 378749927), new $Int64(149867929, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(1107028706, 1407468696), new $Int64(469292398, 970098704), new $Int64(1862426162, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(842317902, 3916463034), new $Int64(1758884993, 3474113316), new $Int64(1036101639, 316544223), new $Int64(373738757, 1650844677), new $Int64(1240292229, 4267565603), new $Int64(1077208624, 2501167616), new $Int64(626831785, 3929401789), new $Int64(56122796, 337170252), new $Int64(1186981558, 2061966842), new $Int64(1843292800, 2508461464), new $Int64(206012532, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(1145186199, 2887126398), new $Int64(700372314, 296561685), new $Int64(700300844, 3729960077), new $Int64(575172304, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(1041887929, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(498390553, 2145871984), new $Int64(564717933, 3565480803), new $Int64(578829821, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(2050927384, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(304003901, 2087477361), new $Int64(381315848, 2407950639), new $Int64(851258090, 3942568569), new $Int64(923583198, 4088074412), new $Int64(723260036, 2964773675), new $Int64(1473561819, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(542912908, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(1116124348, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(1293910447, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(1351896723, 2500816079), new $Int64(1657235204, 514015239), new $Int64(1377565129, 543520454), new $Int64(107706923, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(644556607, 3166972343), new $Int64(372256200, 1517638666), new $Int64(1212207984, 173466846), new $Int64(1451709187, 4241513471), new $Int64(733932806, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(1236582087, 1539634186), new $Int64(1551526350, 178241987), new $Int64(2034206012, 182168164), new $Int64(1044953189, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(32803926, 1732699140), new $Int64(1726425903, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(638124245, 2228431183), new $Int64(1337169671, 3554678728), new $Int64(1396494601, 173470263), new $Int64(2061597383, 3848297795), new $Int64(1220546671, 246236185), new $Int64(163293187, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(1548631747, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(240999859, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(1475638791, 3375313137), new $Int64(503615608, 881302957), new $Int64(638698903, 2514186393), new $Int64(443860803, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(208500981, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(2058057389, 2884561259), new $Int64(1341742553, 2456511185), new $Int64(983726246, 561175414), new $Int64(427994085, 432588903), new $Int64(885133709, 4059399550), new $Int64(2054387382, 1075014784), new $Int64(413651020, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(989129637, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(409904655, 3870530098), new $Int64(1662989391, 1717789158), new $Int64(1914486492, 1153452491), new $Int64(1157059232, 3948827651), new $Int64(790338018, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(762206335, 1202710438), new $Int64(1582574611, 2072216740), new $Int64(705690639, 2066751068), new $Int64(33900336, 173902580), new $Int64(1405499842, 142459001), new $Int64(172391592, 1889151926), new $Int64(1648540523, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(68662295, 2953948865), new $Int64(1826544975, 4041040923), new $Int64(204965672, 592046130), new $Int64(1441840008, 384297211), new $Int64(95834184, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(444060402, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(1804436145, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(1849156454, 2675874918), new $Int64(316128071, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(1283216186, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(56149435, 306752547), new $Int64(720795581, 2162363077), new $Int64(2090431015, 2767224719), new $Int64(675859549, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(403352367, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(353777175, 1240875658), new $Int64(1232590226, 2577342868), new $Int64(1146185433, 4136853496), new $Int64(670368674, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(1970921600, 371758825), new $Int64(1706420536, 1528834084), new $Int64(2075795018, 1504757260), new $Int64(685663576, 699052551), new $Int64(1641940109, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.ptr(new nosync.Mutex.ptr(), NewSource(new $Int64(0, 1))));
		/* */ } return; } }; $init_rand.$blocking = true; return $init_rand;
	};
	return $pkg;
})();
$packages["github.com/gopherjs/todomvc/utils"] = (function() {
	var $pkg = {}, json, fmt, js, rand, time, Router, sliceType, ptrType, sliceType$1, funcType, sliceType$2, ptrType$1, Store, Retrieve, Pluralize, Uuid, NewRouter;
	json = $packages["encoding/json"];
	fmt = $packages["fmt"];
	js = $packages["github.com/gopherjs/gopherjs/js"];
	rand = $packages["math/rand"];
	time = $packages["time"];
	Router = $pkg.Router = $newType(0, $kindStruct, "utils.Router", "Router", "github.com/gopherjs/todomvc/utils", function(Object_) {
		this.$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
		sliceType = $sliceType($Uint8);
		ptrType = $ptrType($emptyInterface);
		sliceType$1 = $sliceType($emptyInterface);
		funcType = $funcType([$String], [], false);
		sliceType$2 = $sliceType(js.Any);
		ptrType$1 = $ptrType(Router);
	Store = $pkg.Store = function(key, val) {
		var _tuple, byteArr, str;
		_tuple = json.Marshal(val); byteArr = _tuple[0];
		str = $bytesToString(byteArr);
		$global.localStorage.setItem($externalize(key, $String), $externalize(str, $String));
	};
	Retrieve = $pkg.Retrieve = function(key, val) {
		var item, str;
		item = $global.localStorage.getItem($externalize(key, $String));
		if (item === undefined) {
			val = $ifaceNil;
			return;
		}
		str = $internalize(item, $String);
		json.Unmarshal(new sliceType($stringToBytes(str)), new ptrType(function() { return val; }, function($v) { val = $v; }));
	};
	Pluralize = $pkg.Pluralize = function(count, word) {
		if (count === 1) {
			return word;
		}
		return word + "s";
	};
	Uuid = $pkg.Uuid = function() {
		var _ref, _ref$1, i, random, uuid = "", x, x$1;
		i = 0;
		while (i < 32) {
			rand.Seed((x = time.Now().UnixNano(), x$1 = new $Int64(0, i), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low)));
			random = rand.Intn(16);
			_ref = i;
			if (_ref === 8 || _ref === 12 || _ref === 16 || _ref === 20) {
				uuid = uuid + ("-");
			}
			_ref$1 = i;
			if (_ref$1 === 12) {
				uuid = uuid + (fmt.Sprintf("%x", new sliceType$1([new $Int(4)])));
			} else if (_ref$1 === 16) {
				uuid = uuid + (fmt.Sprintf("%x", new sliceType$1([new $Int(((random & 3) | 8))])));
			} else {
				uuid = uuid + (fmt.Sprintf("%x", new sliceType$1([new $Int(random)])));
			}
			i = i + (1) >> 0;
		}
		return uuid;
	};
	NewRouter = $pkg.NewRouter = function() {
		return new Router.ptr(new ($global.Router)());
	};
	Router.ptr.prototype.On = function(path, handler) {
		var r;
		r = $clone(this, Router);
		r.Object.on($externalize(path, $String), $externalize(handler, funcType));
	};
	Router.prototype.On = function(path, handler) { return this.$val.On(path, handler); };
	Router.ptr.prototype.Init = function(path) {
		var r;
		r = $clone(this, Router);
		r.Object.init($externalize(path, $String));
	};
	Router.prototype.Init = function(path) { return this.$val.Init(path); };
	Router.methods = [{prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([$String, sliceType$2], [js.Object], true)}, {prop: "Delete", name: "Delete", pkg: "", type: $funcType([$String], [], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [js.Object], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [js.Object], false)}, {prop: "Init", name: "Init", pkg: "", type: $funcType([$String], [], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Invoke", name: "Invoke", pkg: "", type: $funcType([sliceType$2], [js.Object], true)}, {prop: "Length", name: "Length", pkg: "", type: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([sliceType$2], [js.Object], true)}, {prop: "On", name: "On", pkg: "", type: $funcType([$String, funcType], [], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, js.Any], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", type: $funcType([$Int, js.Any], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", type: $funcType([], [$Uintptr], false)}];
	ptrType$1.methods = [{prop: "Bool", name: "Bool", pkg: "", type: $funcType([], [$Bool], false)}, {prop: "Call", name: "Call", pkg: "", type: $funcType([$String, sliceType$2], [js.Object], true)}, {prop: "Delete", name: "Delete", pkg: "", type: $funcType([$String], [], false)}, {prop: "Float", name: "Float", pkg: "", type: $funcType([], [$Float64], false)}, {prop: "Get", name: "Get", pkg: "", type: $funcType([$String], [js.Object], false)}, {prop: "Index", name: "Index", pkg: "", type: $funcType([$Int], [js.Object], false)}, {prop: "Init", name: "Init", pkg: "", type: $funcType([$String], [], false)}, {prop: "Int", name: "Int", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Int64", name: "Int64", pkg: "", type: $funcType([], [$Int64], false)}, {prop: "Interface", name: "Interface", pkg: "", type: $funcType([], [$emptyInterface], false)}, {prop: "Invoke", name: "Invoke", pkg: "", type: $funcType([sliceType$2], [js.Object], true)}, {prop: "Length", name: "Length", pkg: "", type: $funcType([], [$Int], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([sliceType$2], [js.Object], true)}, {prop: "On", name: "On", pkg: "", type: $funcType([$String, funcType], [], false)}, {prop: "Set", name: "Set", pkg: "", type: $funcType([$String, js.Any], [], false)}, {prop: "SetIndex", name: "SetIndex", pkg: "", type: $funcType([$Int, js.Any], [], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Uint64", name: "Uint64", pkg: "", type: $funcType([], [$Uint64], false)}, {prop: "Unsafe", name: "Unsafe", pkg: "", type: $funcType([], [$Uintptr], false)}];
	Router.init([{prop: "Object", name: "", pkg: "", type: js.Object, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_utils = function() { while (true) { switch ($s) { case 0:
		$r = json.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = fmt.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = js.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = rand.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = time.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_utils.$blocking = true; return $init_utils;
	};
	return $pkg;
})();
$packages["html"] = (function() {
	var $pkg = {}, bytes, strings, utf8, arrayType, sliceType, entity, entity2, replacementTable, _map, _key, _map$1, _key$1, unescapeEntity, unescape, UnescapeString;
	bytes = $packages["bytes"];
	strings = $packages["strings"];
	utf8 = $packages["unicode/utf8"];
		arrayType = $arrayType($Int32, 2);
		sliceType = $sliceType($Uint8);
	unescapeEntity = function(b, dst, src, attribute) {
		var _entry, _entry$1, _entry$2, _tmp, _tmp$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, c, c$1, dst1 = 0, dst1$1, entityName, hex, i, j, maxLen, s, src1 = 0, x, x$1, x$2, x$3, x$4;
		_tmp = 1; _tmp$1 = $subslice(b, src); i = _tmp; s = _tmp$1;
		if (s.$length <= 1) {
			(dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]);
			_tmp$2 = dst + 1 >> 0; _tmp$3 = src + 1 >> 0; dst1 = _tmp$2; src1 = _tmp$3;
			return [dst1, src1];
		}
		if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 35) {
			if (s.$length <= 3) {
				(dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]);
				_tmp$4 = dst + 1 >> 0; _tmp$5 = src + 1 >> 0; dst1 = _tmp$4; src1 = _tmp$5;
				return [dst1, src1];
			}
			i = i + (1) >> 0;
			c = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			hex = false;
			if ((c === 120) || (c === 88)) {
				hex = true;
				i = i + (1) >> 0;
			}
			x = 0;
			while (i < s.$length) {
				c = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
				i = i + (1) >> 0;
				if (hex) {
					if (48 <= c && c <= 57) {
						x = (((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 48 >> 0;
						continue;
					} else if (97 <= c && c <= 102) {
						x = ((((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 97 >> 0) + 10 >> 0;
						continue;
					} else if (65 <= c && c <= 70) {
						x = ((((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 65 >> 0) + 10 >> 0;
						continue;
					}
				} else if (48 <= c && c <= 57) {
					x = (((((10 >>> 16 << 16) * x >> 0) + (10 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 48 >> 0;
					continue;
				}
				if (!((c === 59))) {
					i = i - (1) >> 0;
				}
				break;
			}
			if (i <= 3) {
				(dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]);
				_tmp$6 = dst + 1 >> 0; _tmp$7 = src + 1 >> 0; dst1 = _tmp$6; src1 = _tmp$7;
				return [dst1, src1];
			}
			if (128 <= x && x <= 159) {
				x = (x$1 = x - 128 >> 0, ((x$1 < 0 || x$1 >= replacementTable.length) ? $throwRuntimeError("index out of range") : replacementTable[x$1]));
			} else if ((x === 0) || (55296 <= x && x <= 57343) || x > 1114111) {
				x = 65533;
			}
			_tmp$8 = dst + utf8.EncodeRune($subslice(b, dst), x) >> 0; _tmp$9 = src + i >> 0; dst1 = _tmp$8; src1 = _tmp$9;
			return [dst1, src1];
		}
		while (i < s.$length) {
			c$1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			i = i + (1) >> 0;
			if (97 <= c$1 && c$1 <= 122 || 65 <= c$1 && c$1 <= 90 || 48 <= c$1 && c$1 <= 57) {
				continue;
			}
			if (!((c$1 === 59))) {
				i = i - (1) >> 0;
			}
			break;
		}
		entityName = $bytesToString($subslice(s, 1, i));
		if (entityName === "") {
		} else if (attribute && !((entityName.charCodeAt((entityName.length - 1 >> 0)) === 59)) && s.$length > i && (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 61)) {
		} else {
			x$2 = (_entry = entity[entityName], _entry !== undefined ? _entry.v : 0);
			if (!((x$2 === 0))) {
				_tmp$10 = dst + utf8.EncodeRune($subslice(b, dst), x$2) >> 0; _tmp$11 = src + i >> 0; dst1 = _tmp$10; src1 = _tmp$11;
				return [dst1, src1];
			} else {
				x$3 = $clone((_entry$1 = entity2[entityName], _entry$1 !== undefined ? _entry$1.v : arrayType.zero()), arrayType);
				if (!((x$3[0] === 0))) {
					dst1$1 = dst + utf8.EncodeRune($subslice(b, dst), x$3[0]) >> 0;
					_tmp$12 = dst1$1 + utf8.EncodeRune($subslice(b, dst1$1), x$3[1]) >> 0; _tmp$13 = src + i >> 0; dst1 = _tmp$12; src1 = _tmp$13;
					return [dst1, src1];
				} else if (!attribute) {
					maxLen = entityName.length - 1 >> 0;
					if (maxLen > 6) {
						maxLen = 6;
					}
					j = maxLen;
					while (j > 1) {
						x$4 = (_entry$2 = entity[entityName.substring(0, j)], _entry$2 !== undefined ? _entry$2.v : 0);
						if (!((x$4 === 0))) {
							_tmp$14 = dst + utf8.EncodeRune($subslice(b, dst), x$4) >> 0; _tmp$15 = (src + j >> 0) + 1 >> 0; dst1 = _tmp$14; src1 = _tmp$15;
							return [dst1, src1];
						}
						j = j - (1) >> 0;
					}
				}
			}
		}
		_tmp$16 = dst + i >> 0; _tmp$17 = src + i >> 0; dst1 = _tmp$16; src1 = _tmp$17;
		$copySlice($subslice(b, dst, dst1), $subslice(b, src, src1));
		_tmp$18 = dst1; _tmp$19 = src1; dst1 = _tmp$18; src1 = _tmp$19;
		return [dst1, src1];
	};
	unescape = function(b) {
		var _i, _ref, _tmp, _tmp$1, _tuple, _tuple$1, c, c$1, dst, i, src;
		_ref = b;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (c === 38) {
				_tuple = unescapeEntity(b, i, i, false); dst = _tuple[0]; src = _tuple[1];
				while (src < b.$length) {
					c$1 = ((src < 0 || src >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + src]);
					if (c$1 === 38) {
						_tuple$1 = unescapeEntity(b, dst, src, false); dst = _tuple$1[0]; src = _tuple$1[1];
					} else {
						(dst < 0 || dst >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + dst] = c$1;
						_tmp = dst + 1 >> 0; _tmp$1 = src + 1 >> 0; dst = _tmp; src = _tmp$1;
					}
				}
				return $subslice(b, 0, dst);
			}
			_i++;
		}
		return b;
	};
	UnescapeString = $pkg.UnescapeString = function(s) {
		var _i, _ref, _rune, c;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (c === 38) {
				return $bytesToString(unescape(new sliceType($stringToBytes(s))));
			}
			_i += _rune[1];
		}
		return s;
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_html = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		entity = (_map = new $Map(), _key = "AElig;", _map[_key] = { k: _key, v: 198 }, _key = "AMP;", _map[_key] = { k: _key, v: 38 }, _key = "Aacute;", _map[_key] = { k: _key, v: 193 }, _key = "Abreve;", _map[_key] = { k: _key, v: 258 }, _key = "Acirc;", _map[_key] = { k: _key, v: 194 }, _key = "Acy;", _map[_key] = { k: _key, v: 1040 }, _key = "Afr;", _map[_key] = { k: _key, v: 120068 }, _key = "Agrave;", _map[_key] = { k: _key, v: 192 }, _key = "Alpha;", _map[_key] = { k: _key, v: 913 }, _key = "Amacr;", _map[_key] = { k: _key, v: 256 }, _key = "And;", _map[_key] = { k: _key, v: 10835 }, _key = "Aogon;", _map[_key] = { k: _key, v: 260 }, _key = "Aopf;", _map[_key] = { k: _key, v: 120120 }, _key = "ApplyFunction;", _map[_key] = { k: _key, v: 8289 }, _key = "Aring;", _map[_key] = { k: _key, v: 197 }, _key = "Ascr;", _map[_key] = { k: _key, v: 119964 }, _key = "Assign;", _map[_key] = { k: _key, v: 8788 }, _key = "Atilde;", _map[_key] = { k: _key, v: 195 }, _key = "Auml;", _map[_key] = { k: _key, v: 196 }, _key = "Backslash;", _map[_key] = { k: _key, v: 8726 }, _key = "Barv;", _map[_key] = { k: _key, v: 10983 }, _key = "Barwed;", _map[_key] = { k: _key, v: 8966 }, _key = "Bcy;", _map[_key] = { k: _key, v: 1041 }, _key = "Because;", _map[_key] = { k: _key, v: 8757 }, _key = "Bernoullis;", _map[_key] = { k: _key, v: 8492 }, _key = "Beta;", _map[_key] = { k: _key, v: 914 }, _key = "Bfr;", _map[_key] = { k: _key, v: 120069 }, _key = "Bopf;", _map[_key] = { k: _key, v: 120121 }, _key = "Breve;", _map[_key] = { k: _key, v: 728 }, _key = "Bscr;", _map[_key] = { k: _key, v: 8492 }, _key = "Bumpeq;", _map[_key] = { k: _key, v: 8782 }, _key = "CHcy;", _map[_key] = { k: _key, v: 1063 }, _key = "COPY;", _map[_key] = { k: _key, v: 169 }, _key = "Cacute;", _map[_key] = { k: _key, v: 262 }, _key = "Cap;", _map[_key] = { k: _key, v: 8914 }, _key = "CapitalDifferentialD;", _map[_key] = { k: _key, v: 8517 }, _key = "Cayleys;", _map[_key] = { k: _key, v: 8493 }, _key = "Ccaron;", _map[_key] = { k: _key, v: 268 }, _key = "Ccedil;", _map[_key] = { k: _key, v: 199 }, _key = "Ccirc;", _map[_key] = { k: _key, v: 264 }, _key = "Cconint;", _map[_key] = { k: _key, v: 8752 }, _key = "Cdot;", _map[_key] = { k: _key, v: 266 }, _key = "Cedilla;", _map[_key] = { k: _key, v: 184 }, _key = "CenterDot;", _map[_key] = { k: _key, v: 183 }, _key = "Cfr;", _map[_key] = { k: _key, v: 8493 }, _key = "Chi;", _map[_key] = { k: _key, v: 935 }, _key = "CircleDot;", _map[_key] = { k: _key, v: 8857 }, _key = "CircleMinus;", _map[_key] = { k: _key, v: 8854 }, _key = "CirclePlus;", _map[_key] = { k: _key, v: 8853 }, _key = "CircleTimes;", _map[_key] = { k: _key, v: 8855 }, _key = "ClockwiseContourIntegral;", _map[_key] = { k: _key, v: 8754 }, _key = "CloseCurlyDoubleQuote;", _map[_key] = { k: _key, v: 8221 }, _key = "CloseCurlyQuote;", _map[_key] = { k: _key, v: 8217 }, _key = "Colon;", _map[_key] = { k: _key, v: 8759 }, _key = "Colone;", _map[_key] = { k: _key, v: 10868 }, _key = "Congruent;", _map[_key] = { k: _key, v: 8801 }, _key = "Conint;", _map[_key] = { k: _key, v: 8751 }, _key = "ContourIntegral;", _map[_key] = { k: _key, v: 8750 }, _key = "Copf;", _map[_key] = { k: _key, v: 8450 }, _key = "Coproduct;", _map[_key] = { k: _key, v: 8720 }, _key = "CounterClockwiseContourIntegral;", _map[_key] = { k: _key, v: 8755 }, _key = "Cross;", _map[_key] = { k: _key, v: 10799 }, _key = "Cscr;", _map[_key] = { k: _key, v: 119966 }, _key = "Cup;", _map[_key] = { k: _key, v: 8915 }, _key = "CupCap;", _map[_key] = { k: _key, v: 8781 }, _key = "DD;", _map[_key] = { k: _key, v: 8517 }, _key = "DDotrahd;", _map[_key] = { k: _key, v: 10513 }, _key = "DJcy;", _map[_key] = { k: _key, v: 1026 }, _key = "DScy;", _map[_key] = { k: _key, v: 1029 }, _key = "DZcy;", _map[_key] = { k: _key, v: 1039 }, _key = "Dagger;", _map[_key] = { k: _key, v: 8225 }, _key = "Darr;", _map[_key] = { k: _key, v: 8609 }, _key = "Dashv;", _map[_key] = { k: _key, v: 10980 }, _key = "Dcaron;", _map[_key] = { k: _key, v: 270 }, _key = "Dcy;", _map[_key] = { k: _key, v: 1044 }, _key = "Del;", _map[_key] = { k: _key, v: 8711 }, _key = "Delta;", _map[_key] = { k: _key, v: 916 }, _key = "Dfr;", _map[_key] = { k: _key, v: 120071 }, _key = "DiacriticalAcute;", _map[_key] = { k: _key, v: 180 }, _key = "DiacriticalDot;", _map[_key] = { k: _key, v: 729 }, _key = "DiacriticalDoubleAcute;", _map[_key] = { k: _key, v: 733 }, _key = "DiacriticalGrave;", _map[_key] = { k: _key, v: 96 }, _key = "DiacriticalTilde;", _map[_key] = { k: _key, v: 732 }, _key = "Diamond;", _map[_key] = { k: _key, v: 8900 }, _key = "DifferentialD;", _map[_key] = { k: _key, v: 8518 }, _key = "Dopf;", _map[_key] = { k: _key, v: 120123 }, _key = "Dot;", _map[_key] = { k: _key, v: 168 }, _key = "DotDot;", _map[_key] = { k: _key, v: 8412 }, _key = "DotEqual;", _map[_key] = { k: _key, v: 8784 }, _key = "DoubleContourIntegral;", _map[_key] = { k: _key, v: 8751 }, _key = "DoubleDot;", _map[_key] = { k: _key, v: 168 }, _key = "DoubleDownArrow;", _map[_key] = { k: _key, v: 8659 }, _key = "DoubleLeftArrow;", _map[_key] = { k: _key, v: 8656 }, _key = "DoubleLeftRightArrow;", _map[_key] = { k: _key, v: 8660 }, _key = "DoubleLeftTee;", _map[_key] = { k: _key, v: 10980 }, _key = "DoubleLongLeftArrow;", _map[_key] = { k: _key, v: 10232 }, _key = "DoubleLongLeftRightArrow;", _map[_key] = { k: _key, v: 10234 }, _key = "DoubleLongRightArrow;", _map[_key] = { k: _key, v: 10233 }, _key = "DoubleRightArrow;", _map[_key] = { k: _key, v: 8658 }, _key = "DoubleRightTee;", _map[_key] = { k: _key, v: 8872 }, _key = "DoubleUpArrow;", _map[_key] = { k: _key, v: 8657 }, _key = "DoubleUpDownArrow;", _map[_key] = { k: _key, v: 8661 }, _key = "DoubleVerticalBar;", _map[_key] = { k: _key, v: 8741 }, _key = "DownArrow;", _map[_key] = { k: _key, v: 8595 }, _key = "DownArrowBar;", _map[_key] = { k: _key, v: 10515 }, _key = "DownArrowUpArrow;", _map[_key] = { k: _key, v: 8693 }, _key = "DownBreve;", _map[_key] = { k: _key, v: 785 }, _key = "DownLeftRightVector;", _map[_key] = { k: _key, v: 10576 }, _key = "DownLeftTeeVector;", _map[_key] = { k: _key, v: 10590 }, _key = "DownLeftVector;", _map[_key] = { k: _key, v: 8637 }, _key = "DownLeftVectorBar;", _map[_key] = { k: _key, v: 10582 }, _key = "DownRightTeeVector;", _map[_key] = { k: _key, v: 10591 }, _key = "DownRightVector;", _map[_key] = { k: _key, v: 8641 }, _key = "DownRightVectorBar;", _map[_key] = { k: _key, v: 10583 }, _key = "DownTee;", _map[_key] = { k: _key, v: 8868 }, _key = "DownTeeArrow;", _map[_key] = { k: _key, v: 8615 }, _key = "Downarrow;", _map[_key] = { k: _key, v: 8659 }, _key = "Dscr;", _map[_key] = { k: _key, v: 119967 }, _key = "Dstrok;", _map[_key] = { k: _key, v: 272 }, _key = "ENG;", _map[_key] = { k: _key, v: 330 }, _key = "ETH;", _map[_key] = { k: _key, v: 208 }, _key = "Eacute;", _map[_key] = { k: _key, v: 201 }, _key = "Ecaron;", _map[_key] = { k: _key, v: 282 }, _key = "Ecirc;", _map[_key] = { k: _key, v: 202 }, _key = "Ecy;", _map[_key] = { k: _key, v: 1069 }, _key = "Edot;", _map[_key] = { k: _key, v: 278 }, _key = "Efr;", _map[_key] = { k: _key, v: 120072 }, _key = "Egrave;", _map[_key] = { k: _key, v: 200 }, _key = "Element;", _map[_key] = { k: _key, v: 8712 }, _key = "Emacr;", _map[_key] = { k: _key, v: 274 }, _key = "EmptySmallSquare;", _map[_key] = { k: _key, v: 9723 }, _key = "EmptyVerySmallSquare;", _map[_key] = { k: _key, v: 9643 }, _key = "Eogon;", _map[_key] = { k: _key, v: 280 }, _key = "Eopf;", _map[_key] = { k: _key, v: 120124 }, _key = "Epsilon;", _map[_key] = { k: _key, v: 917 }, _key = "Equal;", _map[_key] = { k: _key, v: 10869 }, _key = "EqualTilde;", _map[_key] = { k: _key, v: 8770 }, _key = "Equilibrium;", _map[_key] = { k: _key, v: 8652 }, _key = "Escr;", _map[_key] = { k: _key, v: 8496 }, _key = "Esim;", _map[_key] = { k: _key, v: 10867 }, _key = "Eta;", _map[_key] = { k: _key, v: 919 }, _key = "Euml;", _map[_key] = { k: _key, v: 203 }, _key = "Exists;", _map[_key] = { k: _key, v: 8707 }, _key = "ExponentialE;", _map[_key] = { k: _key, v: 8519 }, _key = "Fcy;", _map[_key] = { k: _key, v: 1060 }, _key = "Ffr;", _map[_key] = { k: _key, v: 120073 }, _key = "FilledSmallSquare;", _map[_key] = { k: _key, v: 9724 }, _key = "FilledVerySmallSquare;", _map[_key] = { k: _key, v: 9642 }, _key = "Fopf;", _map[_key] = { k: _key, v: 120125 }, _key = "ForAll;", _map[_key] = { k: _key, v: 8704 }, _key = "Fouriertrf;", _map[_key] = { k: _key, v: 8497 }, _key = "Fscr;", _map[_key] = { k: _key, v: 8497 }, _key = "GJcy;", _map[_key] = { k: _key, v: 1027 }, _key = "GT;", _map[_key] = { k: _key, v: 62 }, _key = "Gamma;", _map[_key] = { k: _key, v: 915 }, _key = "Gammad;", _map[_key] = { k: _key, v: 988 }, _key = "Gbreve;", _map[_key] = { k: _key, v: 286 }, _key = "Gcedil;", _map[_key] = { k: _key, v: 290 }, _key = "Gcirc;", _map[_key] = { k: _key, v: 284 }, _key = "Gcy;", _map[_key] = { k: _key, v: 1043 }, _key = "Gdot;", _map[_key] = { k: _key, v: 288 }, _key = "Gfr;", _map[_key] = { k: _key, v: 120074 }, _key = "Gg;", _map[_key] = { k: _key, v: 8921 }, _key = "Gopf;", _map[_key] = { k: _key, v: 120126 }, _key = "GreaterEqual;", _map[_key] = { k: _key, v: 8805 }, _key = "GreaterEqualLess;", _map[_key] = { k: _key, v: 8923 }, _key = "GreaterFullEqual;", _map[_key] = { k: _key, v: 8807 }, _key = "GreaterGreater;", _map[_key] = { k: _key, v: 10914 }, _key = "GreaterLess;", _map[_key] = { k: _key, v: 8823 }, _key = "GreaterSlantEqual;", _map[_key] = { k: _key, v: 10878 }, _key = "GreaterTilde;", _map[_key] = { k: _key, v: 8819 }, _key = "Gscr;", _map[_key] = { k: _key, v: 119970 }, _key = "Gt;", _map[_key] = { k: _key, v: 8811 }, _key = "HARDcy;", _map[_key] = { k: _key, v: 1066 }, _key = "Hacek;", _map[_key] = { k: _key, v: 711 }, _key = "Hat;", _map[_key] = { k: _key, v: 94 }, _key = "Hcirc;", _map[_key] = { k: _key, v: 292 }, _key = "Hfr;", _map[_key] = { k: _key, v: 8460 }, _key = "HilbertSpace;", _map[_key] = { k: _key, v: 8459 }, _key = "Hopf;", _map[_key] = { k: _key, v: 8461 }, _key = "HorizontalLine;", _map[_key] = { k: _key, v: 9472 }, _key = "Hscr;", _map[_key] = { k: _key, v: 8459 }, _key = "Hstrok;", _map[_key] = { k: _key, v: 294 }, _key = "HumpDownHump;", _map[_key] = { k: _key, v: 8782 }, _key = "HumpEqual;", _map[_key] = { k: _key, v: 8783 }, _key = "IEcy;", _map[_key] = { k: _key, v: 1045 }, _key = "IJlig;", _map[_key] = { k: _key, v: 306 }, _key = "IOcy;", _map[_key] = { k: _key, v: 1025 }, _key = "Iacute;", _map[_key] = { k: _key, v: 205 }, _key = "Icirc;", _map[_key] = { k: _key, v: 206 }, _key = "Icy;", _map[_key] = { k: _key, v: 1048 }, _key = "Idot;", _map[_key] = { k: _key, v: 304 }, _key = "Ifr;", _map[_key] = { k: _key, v: 8465 }, _key = "Igrave;", _map[_key] = { k: _key, v: 204 }, _key = "Im;", _map[_key] = { k: _key, v: 8465 }, _key = "Imacr;", _map[_key] = { k: _key, v: 298 }, _key = "ImaginaryI;", _map[_key] = { k: _key, v: 8520 }, _key = "Implies;", _map[_key] = { k: _key, v: 8658 }, _key = "Int;", _map[_key] = { k: _key, v: 8748 }, _key = "Integral;", _map[_key] = { k: _key, v: 8747 }, _key = "Intersection;", _map[_key] = { k: _key, v: 8898 }, _key = "InvisibleComma;", _map[_key] = { k: _key, v: 8291 }, _key = "InvisibleTimes;", _map[_key] = { k: _key, v: 8290 }, _key = "Iogon;", _map[_key] = { k: _key, v: 302 }, _key = "Iopf;", _map[_key] = { k: _key, v: 120128 }, _key = "Iota;", _map[_key] = { k: _key, v: 921 }, _key = "Iscr;", _map[_key] = { k: _key, v: 8464 }, _key = "Itilde;", _map[_key] = { k: _key, v: 296 }, _key = "Iukcy;", _map[_key] = { k: _key, v: 1030 }, _key = "Iuml;", _map[_key] = { k: _key, v: 207 }, _key = "Jcirc;", _map[_key] = { k: _key, v: 308 }, _key = "Jcy;", _map[_key] = { k: _key, v: 1049 }, _key = "Jfr;", _map[_key] = { k: _key, v: 120077 }, _key = "Jopf;", _map[_key] = { k: _key, v: 120129 }, _key = "Jscr;", _map[_key] = { k: _key, v: 119973 }, _key = "Jsercy;", _map[_key] = { k: _key, v: 1032 }, _key = "Jukcy;", _map[_key] = { k: _key, v: 1028 }, _key = "KHcy;", _map[_key] = { k: _key, v: 1061 }, _key = "KJcy;", _map[_key] = { k: _key, v: 1036 }, _key = "Kappa;", _map[_key] = { k: _key, v: 922 }, _key = "Kcedil;", _map[_key] = { k: _key, v: 310 }, _key = "Kcy;", _map[_key] = { k: _key, v: 1050 }, _key = "Kfr;", _map[_key] = { k: _key, v: 120078 }, _key = "Kopf;", _map[_key] = { k: _key, v: 120130 }, _key = "Kscr;", _map[_key] = { k: _key, v: 119974 }, _key = "LJcy;", _map[_key] = { k: _key, v: 1033 }, _key = "LT;", _map[_key] = { k: _key, v: 60 }, _key = "Lacute;", _map[_key] = { k: _key, v: 313 }, _key = "Lambda;", _map[_key] = { k: _key, v: 923 }, _key = "Lang;", _map[_key] = { k: _key, v: 10218 }, _key = "Laplacetrf;", _map[_key] = { k: _key, v: 8466 }, _key = "Larr;", _map[_key] = { k: _key, v: 8606 }, _key = "Lcaron;", _map[_key] = { k: _key, v: 317 }, _key = "Lcedil;", _map[_key] = { k: _key, v: 315 }, _key = "Lcy;", _map[_key] = { k: _key, v: 1051 }, _key = "LeftAngleBracket;", _map[_key] = { k: _key, v: 10216 }, _key = "LeftArrow;", _map[_key] = { k: _key, v: 8592 }, _key = "LeftArrowBar;", _map[_key] = { k: _key, v: 8676 }, _key = "LeftArrowRightArrow;", _map[_key] = { k: _key, v: 8646 }, _key = "LeftCeiling;", _map[_key] = { k: _key, v: 8968 }, _key = "LeftDoubleBracket;", _map[_key] = { k: _key, v: 10214 }, _key = "LeftDownTeeVector;", _map[_key] = { k: _key, v: 10593 }, _key = "LeftDownVector;", _map[_key] = { k: _key, v: 8643 }, _key = "LeftDownVectorBar;", _map[_key] = { k: _key, v: 10585 }, _key = "LeftFloor;", _map[_key] = { k: _key, v: 8970 }, _key = "LeftRightArrow;", _map[_key] = { k: _key, v: 8596 }, _key = "LeftRightVector;", _map[_key] = { k: _key, v: 10574 }, _key = "LeftTee;", _map[_key] = { k: _key, v: 8867 }, _key = "LeftTeeArrow;", _map[_key] = { k: _key, v: 8612 }, _key = "LeftTeeVector;", _map[_key] = { k: _key, v: 10586 }, _key = "LeftTriangle;", _map[_key] = { k: _key, v: 8882 }, _key = "LeftTriangleBar;", _map[_key] = { k: _key, v: 10703 }, _key = "LeftTriangleEqual;", _map[_key] = { k: _key, v: 8884 }, _key = "LeftUpDownVector;", _map[_key] = { k: _key, v: 10577 }, _key = "LeftUpTeeVector;", _map[_key] = { k: _key, v: 10592 }, _key = "LeftUpVector;", _map[_key] = { k: _key, v: 8639 }, _key = "LeftUpVectorBar;", _map[_key] = { k: _key, v: 10584 }, _key = "LeftVector;", _map[_key] = { k: _key, v: 8636 }, _key = "LeftVectorBar;", _map[_key] = { k: _key, v: 10578 }, _key = "Leftarrow;", _map[_key] = { k: _key, v: 8656 }, _key = "Leftrightarrow;", _map[_key] = { k: _key, v: 8660 }, _key = "LessEqualGreater;", _map[_key] = { k: _key, v: 8922 }, _key = "LessFullEqual;", _map[_key] = { k: _key, v: 8806 }, _key = "LessGreater;", _map[_key] = { k: _key, v: 8822 }, _key = "LessLess;", _map[_key] = { k: _key, v: 10913 }, _key = "LessSlantEqual;", _map[_key] = { k: _key, v: 10877 }, _key = "LessTilde;", _map[_key] = { k: _key, v: 8818 }, _key = "Lfr;", _map[_key] = { k: _key, v: 120079 }, _key = "Ll;", _map[_key] = { k: _key, v: 8920 }, _key = "Lleftarrow;", _map[_key] = { k: _key, v: 8666 }, _key = "Lmidot;", _map[_key] = { k: _key, v: 319 }, _key = "LongLeftArrow;", _map[_key] = { k: _key, v: 10229 }, _key = "LongLeftRightArrow;", _map[_key] = { k: _key, v: 10231 }, _key = "LongRightArrow;", _map[_key] = { k: _key, v: 10230 }, _key = "Longleftarrow;", _map[_key] = { k: _key, v: 10232 }, _key = "Longleftrightarrow;", _map[_key] = { k: _key, v: 10234 }, _key = "Longrightarrow;", _map[_key] = { k: _key, v: 10233 }, _key = "Lopf;", _map[_key] = { k: _key, v: 120131 }, _key = "LowerLeftArrow;", _map[_key] = { k: _key, v: 8601 }, _key = "LowerRightArrow;", _map[_key] = { k: _key, v: 8600 }, _key = "Lscr;", _map[_key] = { k: _key, v: 8466 }, _key = "Lsh;", _map[_key] = { k: _key, v: 8624 }, _key = "Lstrok;", _map[_key] = { k: _key, v: 321 }, _key = "Lt;", _map[_key] = { k: _key, v: 8810 }, _key = "Map;", _map[_key] = { k: _key, v: 10501 }, _key = "Mcy;", _map[_key] = { k: _key, v: 1052 }, _key = "MediumSpace;", _map[_key] = { k: _key, v: 8287 }, _key = "Mellintrf;", _map[_key] = { k: _key, v: 8499 }, _key = "Mfr;", _map[_key] = { k: _key, v: 120080 }, _key = "MinusPlus;", _map[_key] = { k: _key, v: 8723 }, _key = "Mopf;", _map[_key] = { k: _key, v: 120132 }, _key = "Mscr;", _map[_key] = { k: _key, v: 8499 }, _key = "Mu;", _map[_key] = { k: _key, v: 924 }, _key = "NJcy;", _map[_key] = { k: _key, v: 1034 }, _key = "Nacute;", _map[_key] = { k: _key, v: 323 }, _key = "Ncaron;", _map[_key] = { k: _key, v: 327 }, _key = "Ncedil;", _map[_key] = { k: _key, v: 325 }, _key = "Ncy;", _map[_key] = { k: _key, v: 1053 }, _key = "NegativeMediumSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NegativeThickSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NegativeThinSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NegativeVeryThinSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NestedGreaterGreater;", _map[_key] = { k: _key, v: 8811 }, _key = "NestedLessLess;", _map[_key] = { k: _key, v: 8810 }, _key = "NewLine;", _map[_key] = { k: _key, v: 10 }, _key = "Nfr;", _map[_key] = { k: _key, v: 120081 }, _key = "NoBreak;", _map[_key] = { k: _key, v: 8288 }, _key = "NonBreakingSpace;", _map[_key] = { k: _key, v: 160 }, _key = "Nopf;", _map[_key] = { k: _key, v: 8469 }, _key = "Not;", _map[_key] = { k: _key, v: 10988 }, _key = "NotCongruent;", _map[_key] = { k: _key, v: 8802 }, _key = "NotCupCap;", _map[_key] = { k: _key, v: 8813 }, _key = "NotDoubleVerticalBar;", _map[_key] = { k: _key, v: 8742 }, _key = "NotElement;", _map[_key] = { k: _key, v: 8713 }, _key = "NotEqual;", _map[_key] = { k: _key, v: 8800 }, _key = "NotExists;", _map[_key] = { k: _key, v: 8708 }, _key = "NotGreater;", _map[_key] = { k: _key, v: 8815 }, _key = "NotGreaterEqual;", _map[_key] = { k: _key, v: 8817 }, _key = "NotGreaterLess;", _map[_key] = { k: _key, v: 8825 }, _key = "NotGreaterTilde;", _map[_key] = { k: _key, v: 8821 }, _key = "NotLeftTriangle;", _map[_key] = { k: _key, v: 8938 }, _key = "NotLeftTriangleEqual;", _map[_key] = { k: _key, v: 8940 }, _key = "NotLess;", _map[_key] = { k: _key, v: 8814 }, _key = "NotLessEqual;", _map[_key] = { k: _key, v: 8816 }, _key = "NotLessGreater;", _map[_key] = { k: _key, v: 8824 }, _key = "NotLessTilde;", _map[_key] = { k: _key, v: 8820 }, _key = "NotPrecedes;", _map[_key] = { k: _key, v: 8832 }, _key = "NotPrecedesSlantEqual;", _map[_key] = { k: _key, v: 8928 }, _key = "NotReverseElement;", _map[_key] = { k: _key, v: 8716 }, _key = "NotRightTriangle;", _map[_key] = { k: _key, v: 8939 }, _key = "NotRightTriangleEqual;", _map[_key] = { k: _key, v: 8941 }, _key = "NotSquareSubsetEqual;", _map[_key] = { k: _key, v: 8930 }, _key = "NotSquareSupersetEqual;", _map[_key] = { k: _key, v: 8931 }, _key = "NotSubsetEqual;", _map[_key] = { k: _key, v: 8840 }, _key = "NotSucceeds;", _map[_key] = { k: _key, v: 8833 }, _key = "NotSucceedsSlantEqual;", _map[_key] = { k: _key, v: 8929 }, _key = "NotSupersetEqual;", _map[_key] = { k: _key, v: 8841 }, _key = "NotTilde;", _map[_key] = { k: _key, v: 8769 }, _key = "NotTildeEqual;", _map[_key] = { k: _key, v: 8772 }, _key = "NotTildeFullEqual;", _map[_key] = { k: _key, v: 8775 }, _key = "NotTildeTilde;", _map[_key] = { k: _key, v: 8777 }, _key = "NotVerticalBar;", _map[_key] = { k: _key, v: 8740 }, _key = "Nscr;", _map[_key] = { k: _key, v: 119977 }, _key = "Ntilde;", _map[_key] = { k: _key, v: 209 }, _key = "Nu;", _map[_key] = { k: _key, v: 925 }, _key = "OElig;", _map[_key] = { k: _key, v: 338 }, _key = "Oacute;", _map[_key] = { k: _key, v: 211 }, _key = "Ocirc;", _map[_key] = { k: _key, v: 212 }, _key = "Ocy;", _map[_key] = { k: _key, v: 1054 }, _key = "Odblac;", _map[_key] = { k: _key, v: 336 }, _key = "Ofr;", _map[_key] = { k: _key, v: 120082 }, _key = "Ograve;", _map[_key] = { k: _key, v: 210 }, _key = "Omacr;", _map[_key] = { k: _key, v: 332 }, _key = "Omega;", _map[_key] = { k: _key, v: 937 }, _key = "Omicron;", _map[_key] = { k: _key, v: 927 }, _key = "Oopf;", _map[_key] = { k: _key, v: 120134 }, _key = "OpenCurlyDoubleQuote;", _map[_key] = { k: _key, v: 8220 }, _key = "OpenCurlyQuote;", _map[_key] = { k: _key, v: 8216 }, _key = "Or;", _map[_key] = { k: _key, v: 10836 }, _key = "Oscr;", _map[_key] = { k: _key, v: 119978 }, _key = "Oslash;", _map[_key] = { k: _key, v: 216 }, _key = "Otilde;", _map[_key] = { k: _key, v: 213 }, _key = "Otimes;", _map[_key] = { k: _key, v: 10807 }, _key = "Ouml;", _map[_key] = { k: _key, v: 214 }, _key = "OverBar;", _map[_key] = { k: _key, v: 8254 }, _key = "OverBrace;", _map[_key] = { k: _key, v: 9182 }, _key = "OverBracket;", _map[_key] = { k: _key, v: 9140 }, _key = "OverParenthesis;", _map[_key] = { k: _key, v: 9180 }, _key = "PartialD;", _map[_key] = { k: _key, v: 8706 }, _key = "Pcy;", _map[_key] = { k: _key, v: 1055 }, _key = "Pfr;", _map[_key] = { k: _key, v: 120083 }, _key = "Phi;", _map[_key] = { k: _key, v: 934 }, _key = "Pi;", _map[_key] = { k: _key, v: 928 }, _key = "PlusMinus;", _map[_key] = { k: _key, v: 177 }, _key = "Poincareplane;", _map[_key] = { k: _key, v: 8460 }, _key = "Popf;", _map[_key] = { k: _key, v: 8473 }, _key = "Pr;", _map[_key] = { k: _key, v: 10939 }, _key = "Precedes;", _map[_key] = { k: _key, v: 8826 }, _key = "PrecedesEqual;", _map[_key] = { k: _key, v: 10927 }, _key = "PrecedesSlantEqual;", _map[_key] = { k: _key, v: 8828 }, _key = "PrecedesTilde;", _map[_key] = { k: _key, v: 8830 }, _key = "Prime;", _map[_key] = { k: _key, v: 8243 }, _key = "Product;", _map[_key] = { k: _key, v: 8719 }, _key = "Proportion;", _map[_key] = { k: _key, v: 8759 }, _key = "Proportional;", _map[_key] = { k: _key, v: 8733 }, _key = "Pscr;", _map[_key] = { k: _key, v: 119979 }, _key = "Psi;", _map[_key] = { k: _key, v: 936 }, _key = "QUOT;", _map[_key] = { k: _key, v: 34 }, _key = "Qfr;", _map[_key] = { k: _key, v: 120084 }, _key = "Qopf;", _map[_key] = { k: _key, v: 8474 }, _key = "Qscr;", _map[_key] = { k: _key, v: 119980 }, _key = "RBarr;", _map[_key] = { k: _key, v: 10512 }, _key = "REG;", _map[_key] = { k: _key, v: 174 }, _key = "Racute;", _map[_key] = { k: _key, v: 340 }, _key = "Rang;", _map[_key] = { k: _key, v: 10219 }, _key = "Rarr;", _map[_key] = { k: _key, v: 8608 }, _key = "Rarrtl;", _map[_key] = { k: _key, v: 10518 }, _key = "Rcaron;", _map[_key] = { k: _key, v: 344 }, _key = "Rcedil;", _map[_key] = { k: _key, v: 342 }, _key = "Rcy;", _map[_key] = { k: _key, v: 1056 }, _key = "Re;", _map[_key] = { k: _key, v: 8476 }, _key = "ReverseElement;", _map[_key] = { k: _key, v: 8715 }, _key = "ReverseEquilibrium;", _map[_key] = { k: _key, v: 8651 }, _key = "ReverseUpEquilibrium;", _map[_key] = { k: _key, v: 10607 }, _key = "Rfr;", _map[_key] = { k: _key, v: 8476 }, _key = "Rho;", _map[_key] = { k: _key, v: 929 }, _key = "RightAngleBracket;", _map[_key] = { k: _key, v: 10217 }, _key = "RightArrow;", _map[_key] = { k: _key, v: 8594 }, _key = "RightArrowBar;", _map[_key] = { k: _key, v: 8677 }, _key = "RightArrowLeftArrow;", _map[_key] = { k: _key, v: 8644 }, _key = "RightCeiling;", _map[_key] = { k: _key, v: 8969 }, _key = "RightDoubleBracket;", _map[_key] = { k: _key, v: 10215 }, _key = "RightDownTeeVector;", _map[_key] = { k: _key, v: 10589 }, _key = "RightDownVector;", _map[_key] = { k: _key, v: 8642 }, _key = "RightDownVectorBar;", _map[_key] = { k: _key, v: 10581 }, _key = "RightFloor;", _map[_key] = { k: _key, v: 8971 }, _key = "RightTee;", _map[_key] = { k: _key, v: 8866 }, _key = "RightTeeArrow;", _map[_key] = { k: _key, v: 8614 }, _key = "RightTeeVector;", _map[_key] = { k: _key, v: 10587 }, _key = "RightTriangle;", _map[_key] = { k: _key, v: 8883 }, _key = "RightTriangleBar;", _map[_key] = { k: _key, v: 10704 }, _key = "RightTriangleEqual;", _map[_key] = { k: _key, v: 8885 }, _key = "RightUpDownVector;", _map[_key] = { k: _key, v: 10575 }, _key = "RightUpTeeVector;", _map[_key] = { k: _key, v: 10588 }, _key = "RightUpVector;", _map[_key] = { k: _key, v: 8638 }, _key = "RightUpVectorBar;", _map[_key] = { k: _key, v: 10580 }, _key = "RightVector;", _map[_key] = { k: _key, v: 8640 }, _key = "RightVectorBar;", _map[_key] = { k: _key, v: 10579 }, _key = "Rightarrow;", _map[_key] = { k: _key, v: 8658 }, _key = "Ropf;", _map[_key] = { k: _key, v: 8477 }, _key = "RoundImplies;", _map[_key] = { k: _key, v: 10608 }, _key = "Rrightarrow;", _map[_key] = { k: _key, v: 8667 }, _key = "Rscr;", _map[_key] = { k: _key, v: 8475 }, _key = "Rsh;", _map[_key] = { k: _key, v: 8625 }, _key = "RuleDelayed;", _map[_key] = { k: _key, v: 10740 }, _key = "SHCHcy;", _map[_key] = { k: _key, v: 1065 }, _key = "SHcy;", _map[_key] = { k: _key, v: 1064 }, _key = "SOFTcy;", _map[_key] = { k: _key, v: 1068 }, _key = "Sacute;", _map[_key] = { k: _key, v: 346 }, _key = "Sc;", _map[_key] = { k: _key, v: 10940 }, _key = "Scaron;", _map[_key] = { k: _key, v: 352 }, _key = "Scedil;", _map[_key] = { k: _key, v: 350 }, _key = "Scirc;", _map[_key] = { k: _key, v: 348 }, _key = "Scy;", _map[_key] = { k: _key, v: 1057 }, _key = "Sfr;", _map[_key] = { k: _key, v: 120086 }, _key = "ShortDownArrow;", _map[_key] = { k: _key, v: 8595 }, _key = "ShortLeftArrow;", _map[_key] = { k: _key, v: 8592 }, _key = "ShortRightArrow;", _map[_key] = { k: _key, v: 8594 }, _key = "ShortUpArrow;", _map[_key] = { k: _key, v: 8593 }, _key = "Sigma;", _map[_key] = { k: _key, v: 931 }, _key = "SmallCircle;", _map[_key] = { k: _key, v: 8728 }, _key = "Sopf;", _map[_key] = { k: _key, v: 120138 }, _key = "Sqrt;", _map[_key] = { k: _key, v: 8730 }, _key = "Square;", _map[_key] = { k: _key, v: 9633 }, _key = "SquareIntersection;", _map[_key] = { k: _key, v: 8851 }, _key = "SquareSubset;", _map[_key] = { k: _key, v: 8847 }, _key = "SquareSubsetEqual;", _map[_key] = { k: _key, v: 8849 }, _key = "SquareSuperset;", _map[_key] = { k: _key, v: 8848 }, _key = "SquareSupersetEqual;", _map[_key] = { k: _key, v: 8850 }, _key = "SquareUnion;", _map[_key] = { k: _key, v: 8852 }, _key = "Sscr;", _map[_key] = { k: _key, v: 119982 }, _key = "Star;", _map[_key] = { k: _key, v: 8902 }, _key = "Sub;", _map[_key] = { k: _key, v: 8912 }, _key = "Subset;", _map[_key] = { k: _key, v: 8912 }, _key = "SubsetEqual;", _map[_key] = { k: _key, v: 8838 }, _key = "Succeeds;", _map[_key] = { k: _key, v: 8827 }, _key = "SucceedsEqual;", _map[_key] = { k: _key, v: 10928 }, _key = "SucceedsSlantEqual;", _map[_key] = { k: _key, v: 8829 }, _key = "SucceedsTilde;", _map[_key] = { k: _key, v: 8831 }, _key = "SuchThat;", _map[_key] = { k: _key, v: 8715 }, _key = "Sum;", _map[_key] = { k: _key, v: 8721 }, _key = "Sup;", _map[_key] = { k: _key, v: 8913 }, _key = "Superset;", _map[_key] = { k: _key, v: 8835 }, _key = "SupersetEqual;", _map[_key] = { k: _key, v: 8839 }, _key = "Supset;", _map[_key] = { k: _key, v: 8913 }, _key = "THORN;", _map[_key] = { k: _key, v: 222 }, _key = "TRADE;", _map[_key] = { k: _key, v: 8482 }, _key = "TSHcy;", _map[_key] = { k: _key, v: 1035 }, _key = "TScy;", _map[_key] = { k: _key, v: 1062 }, _key = "Tab;", _map[_key] = { k: _key, v: 9 }, _key = "Tau;", _map[_key] = { k: _key, v: 932 }, _key = "Tcaron;", _map[_key] = { k: _key, v: 356 }, _key = "Tcedil;", _map[_key] = { k: _key, v: 354 }, _key = "Tcy;", _map[_key] = { k: _key, v: 1058 }, _key = "Tfr;", _map[_key] = { k: _key, v: 120087 }, _key = "Therefore;", _map[_key] = { k: _key, v: 8756 }, _key = "Theta;", _map[_key] = { k: _key, v: 920 }, _key = "ThinSpace;", _map[_key] = { k: _key, v: 8201 }, _key = "Tilde;", _map[_key] = { k: _key, v: 8764 }, _key = "TildeEqual;", _map[_key] = { k: _key, v: 8771 }, _key = "TildeFullEqual;", _map[_key] = { k: _key, v: 8773 }, _key = "TildeTilde;", _map[_key] = { k: _key, v: 8776 }, _key = "Topf;", _map[_key] = { k: _key, v: 120139 }, _key = "TripleDot;", _map[_key] = { k: _key, v: 8411 }, _key = "Tscr;", _map[_key] = { k: _key, v: 119983 }, _key = "Tstrok;", _map[_key] = { k: _key, v: 358 }, _key = "Uacute;", _map[_key] = { k: _key, v: 218 }, _key = "Uarr;", _map[_key] = { k: _key, v: 8607 }, _key = "Uarrocir;", _map[_key] = { k: _key, v: 10569 }, _key = "Ubrcy;", _map[_key] = { k: _key, v: 1038 }, _key = "Ubreve;", _map[_key] = { k: _key, v: 364 }, _key = "Ucirc;", _map[_key] = { k: _key, v: 219 }, _key = "Ucy;", _map[_key] = { k: _key, v: 1059 }, _key = "Udblac;", _map[_key] = { k: _key, v: 368 }, _key = "Ufr;", _map[_key] = { k: _key, v: 120088 }, _key = "Ugrave;", _map[_key] = { k: _key, v: 217 }, _key = "Umacr;", _map[_key] = { k: _key, v: 362 }, _key = "UnderBar;", _map[_key] = { k: _key, v: 95 }, _key = "UnderBrace;", _map[_key] = { k: _key, v: 9183 }, _key = "UnderBracket;", _map[_key] = { k: _key, v: 9141 }, _key = "UnderParenthesis;", _map[_key] = { k: _key, v: 9181 }, _key = "Union;", _map[_key] = { k: _key, v: 8899 }, _key = "UnionPlus;", _map[_key] = { k: _key, v: 8846 }, _key = "Uogon;", _map[_key] = { k: _key, v: 370 }, _key = "Uopf;", _map[_key] = { k: _key, v: 120140 }, _key = "UpArrow;", _map[_key] = { k: _key, v: 8593 }, _key = "UpArrowBar;", _map[_key] = { k: _key, v: 10514 }, _key = "UpArrowDownArrow;", _map[_key] = { k: _key, v: 8645 }, _key = "UpDownArrow;", _map[_key] = { k: _key, v: 8597 }, _key = "UpEquilibrium;", _map[_key] = { k: _key, v: 10606 }, _key = "UpTee;", _map[_key] = { k: _key, v: 8869 }, _key = "UpTeeArrow;", _map[_key] = { k: _key, v: 8613 }, _key = "Uparrow;", _map[_key] = { k: _key, v: 8657 }, _key = "Updownarrow;", _map[_key] = { k: _key, v: 8661 }, _key = "UpperLeftArrow;", _map[_key] = { k: _key, v: 8598 }, _key = "UpperRightArrow;", _map[_key] = { k: _key, v: 8599 }, _key = "Upsi;", _map[_key] = { k: _key, v: 978 }, _key = "Upsilon;", _map[_key] = { k: _key, v: 933 }, _key = "Uring;", _map[_key] = { k: _key, v: 366 }, _key = "Uscr;", _map[_key] = { k: _key, v: 119984 }, _key = "Utilde;", _map[_key] = { k: _key, v: 360 }, _key = "Uuml;", _map[_key] = { k: _key, v: 220 }, _key = "VDash;", _map[_key] = { k: _key, v: 8875 }, _key = "Vbar;", _map[_key] = { k: _key, v: 10987 }, _key = "Vcy;", _map[_key] = { k: _key, v: 1042 }, _key = "Vdash;", _map[_key] = { k: _key, v: 8873 }, _key = "Vdashl;", _map[_key] = { k: _key, v: 10982 }, _key = "Vee;", _map[_key] = { k: _key, v: 8897 }, _key = "Verbar;", _map[_key] = { k: _key, v: 8214 }, _key = "Vert;", _map[_key] = { k: _key, v: 8214 }, _key = "VerticalBar;", _map[_key] = { k: _key, v: 8739 }, _key = "VerticalLine;", _map[_key] = { k: _key, v: 124 }, _key = "VerticalSeparator;", _map[_key] = { k: _key, v: 10072 }, _key = "VerticalTilde;", _map[_key] = { k: _key, v: 8768 }, _key = "VeryThinSpace;", _map[_key] = { k: _key, v: 8202 }, _key = "Vfr;", _map[_key] = { k: _key, v: 120089 }, _key = "Vopf;", _map[_key] = { k: _key, v: 120141 }, _key = "Vscr;", _map[_key] = { k: _key, v: 119985 }, _key = "Vvdash;", _map[_key] = { k: _key, v: 8874 }, _key = "Wcirc;", _map[_key] = { k: _key, v: 372 }, _key = "Wedge;", _map[_key] = { k: _key, v: 8896 }, _key = "Wfr;", _map[_key] = { k: _key, v: 120090 }, _key = "Wopf;", _map[_key] = { k: _key, v: 120142 }, _key = "Wscr;", _map[_key] = { k: _key, v: 119986 }, _key = "Xfr;", _map[_key] = { k: _key, v: 120091 }, _key = "Xi;", _map[_key] = { k: _key, v: 926 }, _key = "Xopf;", _map[_key] = { k: _key, v: 120143 }, _key = "Xscr;", _map[_key] = { k: _key, v: 119987 }, _key = "YAcy;", _map[_key] = { k: _key, v: 1071 }, _key = "YIcy;", _map[_key] = { k: _key, v: 1031 }, _key = "YUcy;", _map[_key] = { k: _key, v: 1070 }, _key = "Yacute;", _map[_key] = { k: _key, v: 221 }, _key = "Ycirc;", _map[_key] = { k: _key, v: 374 }, _key = "Ycy;", _map[_key] = { k: _key, v: 1067 }, _key = "Yfr;", _map[_key] = { k: _key, v: 120092 }, _key = "Yopf;", _map[_key] = { k: _key, v: 120144 }, _key = "Yscr;", _map[_key] = { k: _key, v: 119988 }, _key = "Yuml;", _map[_key] = { k: _key, v: 376 }, _key = "ZHcy;", _map[_key] = { k: _key, v: 1046 }, _key = "Zacute;", _map[_key] = { k: _key, v: 377 }, _key = "Zcaron;", _map[_key] = { k: _key, v: 381 }, _key = "Zcy;", _map[_key] = { k: _key, v: 1047 }, _key = "Zdot;", _map[_key] = { k: _key, v: 379 }, _key = "ZeroWidthSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "Zeta;", _map[_key] = { k: _key, v: 918 }, _key = "Zfr;", _map[_key] = { k: _key, v: 8488 }, _key = "Zopf;", _map[_key] = { k: _key, v: 8484 }, _key = "Zscr;", _map[_key] = { k: _key, v: 119989 }, _key = "aacute;", _map[_key] = { k: _key, v: 225 }, _key = "abreve;", _map[_key] = { k: _key, v: 259 }, _key = "ac;", _map[_key] = { k: _key, v: 8766 }, _key = "acd;", _map[_key] = { k: _key, v: 8767 }, _key = "acirc;", _map[_key] = { k: _key, v: 226 }, _key = "acute;", _map[_key] = { k: _key, v: 180 }, _key = "acy;", _map[_key] = { k: _key, v: 1072 }, _key = "aelig;", _map[_key] = { k: _key, v: 230 }, _key = "af;", _map[_key] = { k: _key, v: 8289 }, _key = "afr;", _map[_key] = { k: _key, v: 120094 }, _key = "agrave;", _map[_key] = { k: _key, v: 224 }, _key = "alefsym;", _map[_key] = { k: _key, v: 8501 }, _key = "aleph;", _map[_key] = { k: _key, v: 8501 }, _key = "alpha;", _map[_key] = { k: _key, v: 945 }, _key = "amacr;", _map[_key] = { k: _key, v: 257 }, _key = "amalg;", _map[_key] = { k: _key, v: 10815 }, _key = "amp;", _map[_key] = { k: _key, v: 38 }, _key = "and;", _map[_key] = { k: _key, v: 8743 }, _key = "andand;", _map[_key] = { k: _key, v: 10837 }, _key = "andd;", _map[_key] = { k: _key, v: 10844 }, _key = "andslope;", _map[_key] = { k: _key, v: 10840 }, _key = "andv;", _map[_key] = { k: _key, v: 10842 }, _key = "ang;", _map[_key] = { k: _key, v: 8736 }, _key = "ange;", _map[_key] = { k: _key, v: 10660 }, _key = "angle;", _map[_key] = { k: _key, v: 8736 }, _key = "angmsd;", _map[_key] = { k: _key, v: 8737 }, _key = "angmsdaa;", _map[_key] = { k: _key, v: 10664 }, _key = "angmsdab;", _map[_key] = { k: _key, v: 10665 }, _key = "angmsdac;", _map[_key] = { k: _key, v: 10666 }, _key = "angmsdad;", _map[_key] = { k: _key, v: 10667 }, _key = "angmsdae;", _map[_key] = { k: _key, v: 10668 }, _key = "angmsdaf;", _map[_key] = { k: _key, v: 10669 }, _key = "angmsdag;", _map[_key] = { k: _key, v: 10670 }, _key = "angmsdah;", _map[_key] = { k: _key, v: 10671 }, _key = "angrt;", _map[_key] = { k: _key, v: 8735 }, _key = "angrtvb;", _map[_key] = { k: _key, v: 8894 }, _key = "angrtvbd;", _map[_key] = { k: _key, v: 10653 }, _key = "angsph;", _map[_key] = { k: _key, v: 8738 }, _key = "angst;", _map[_key] = { k: _key, v: 197 }, _key = "angzarr;", _map[_key] = { k: _key, v: 9084 }, _key = "aogon;", _map[_key] = { k: _key, v: 261 }, _key = "aopf;", _map[_key] = { k: _key, v: 120146 }, _key = "ap;", _map[_key] = { k: _key, v: 8776 }, _key = "apE;", _map[_key] = { k: _key, v: 10864 }, _key = "apacir;", _map[_key] = { k: _key, v: 10863 }, _key = "ape;", _map[_key] = { k: _key, v: 8778 }, _key = "apid;", _map[_key] = { k: _key, v: 8779 }, _key = "apos;", _map[_key] = { k: _key, v: 39 }, _key = "approx;", _map[_key] = { k: _key, v: 8776 }, _key = "approxeq;", _map[_key] = { k: _key, v: 8778 }, _key = "aring;", _map[_key] = { k: _key, v: 229 }, _key = "ascr;", _map[_key] = { k: _key, v: 119990 }, _key = "ast;", _map[_key] = { k: _key, v: 42 }, _key = "asymp;", _map[_key] = { k: _key, v: 8776 }, _key = "asympeq;", _map[_key] = { k: _key, v: 8781 }, _key = "atilde;", _map[_key] = { k: _key, v: 227 }, _key = "auml;", _map[_key] = { k: _key, v: 228 }, _key = "awconint;", _map[_key] = { k: _key, v: 8755 }, _key = "awint;", _map[_key] = { k: _key, v: 10769 }, _key = "bNot;", _map[_key] = { k: _key, v: 10989 }, _key = "backcong;", _map[_key] = { k: _key, v: 8780 }, _key = "backepsilon;", _map[_key] = { k: _key, v: 1014 }, _key = "backprime;", _map[_key] = { k: _key, v: 8245 }, _key = "backsim;", _map[_key] = { k: _key, v: 8765 }, _key = "backsimeq;", _map[_key] = { k: _key, v: 8909 }, _key = "barvee;", _map[_key] = { k: _key, v: 8893 }, _key = "barwed;", _map[_key] = { k: _key, v: 8965 }, _key = "barwedge;", _map[_key] = { k: _key, v: 8965 }, _key = "bbrk;", _map[_key] = { k: _key, v: 9141 }, _key = "bbrktbrk;", _map[_key] = { k: _key, v: 9142 }, _key = "bcong;", _map[_key] = { k: _key, v: 8780 }, _key = "bcy;", _map[_key] = { k: _key, v: 1073 }, _key = "bdquo;", _map[_key] = { k: _key, v: 8222 }, _key = "becaus;", _map[_key] = { k: _key, v: 8757 }, _key = "because;", _map[_key] = { k: _key, v: 8757 }, _key = "bemptyv;", _map[_key] = { k: _key, v: 10672 }, _key = "bepsi;", _map[_key] = { k: _key, v: 1014 }, _key = "bernou;", _map[_key] = { k: _key, v: 8492 }, _key = "beta;", _map[_key] = { k: _key, v: 946 }, _key = "beth;", _map[_key] = { k: _key, v: 8502 }, _key = "between;", _map[_key] = { k: _key, v: 8812 }, _key = "bfr;", _map[_key] = { k: _key, v: 120095 }, _key = "bigcap;", _map[_key] = { k: _key, v: 8898 }, _key = "bigcirc;", _map[_key] = { k: _key, v: 9711 }, _key = "bigcup;", _map[_key] = { k: _key, v: 8899 }, _key = "bigodot;", _map[_key] = { k: _key, v: 10752 }, _key = "bigoplus;", _map[_key] = { k: _key, v: 10753 }, _key = "bigotimes;", _map[_key] = { k: _key, v: 10754 }, _key = "bigsqcup;", _map[_key] = { k: _key, v: 10758 }, _key = "bigstar;", _map[_key] = { k: _key, v: 9733 }, _key = "bigtriangledown;", _map[_key] = { k: _key, v: 9661 }, _key = "bigtriangleup;", _map[_key] = { k: _key, v: 9651 }, _key = "biguplus;", _map[_key] = { k: _key, v: 10756 }, _key = "bigvee;", _map[_key] = { k: _key, v: 8897 }, _key = "bigwedge;", _map[_key] = { k: _key, v: 8896 }, _key = "bkarow;", _map[_key] = { k: _key, v: 10509 }, _key = "blacklozenge;", _map[_key] = { k: _key, v: 10731 }, _key = "blacksquare;", _map[_key] = { k: _key, v: 9642 }, _key = "blacktriangle;", _map[_key] = { k: _key, v: 9652 }, _key = "blacktriangledown;", _map[_key] = { k: _key, v: 9662 }, _key = "blacktriangleleft;", _map[_key] = { k: _key, v: 9666 }, _key = "blacktriangleright;", _map[_key] = { k: _key, v: 9656 }, _key = "blank;", _map[_key] = { k: _key, v: 9251 }, _key = "blk12;", _map[_key] = { k: _key, v: 9618 }, _key = "blk14;", _map[_key] = { k: _key, v: 9617 }, _key = "blk34;", _map[_key] = { k: _key, v: 9619 }, _key = "block;", _map[_key] = { k: _key, v: 9608 }, _key = "bnot;", _map[_key] = { k: _key, v: 8976 }, _key = "bopf;", _map[_key] = { k: _key, v: 120147 }, _key = "bot;", _map[_key] = { k: _key, v: 8869 }, _key = "bottom;", _map[_key] = { k: _key, v: 8869 }, _key = "bowtie;", _map[_key] = { k: _key, v: 8904 }, _key = "boxDL;", _map[_key] = { k: _key, v: 9559 }, _key = "boxDR;", _map[_key] = { k: _key, v: 9556 }, _key = "boxDl;", _map[_key] = { k: _key, v: 9558 }, _key = "boxDr;", _map[_key] = { k: _key, v: 9555 }, _key = "boxH;", _map[_key] = { k: _key, v: 9552 }, _key = "boxHD;", _map[_key] = { k: _key, v: 9574 }, _key = "boxHU;", _map[_key] = { k: _key, v: 9577 }, _key = "boxHd;", _map[_key] = { k: _key, v: 9572 }, _key = "boxHu;", _map[_key] = { k: _key, v: 9575 }, _key = "boxUL;", _map[_key] = { k: _key, v: 9565 }, _key = "boxUR;", _map[_key] = { k: _key, v: 9562 }, _key = "boxUl;", _map[_key] = { k: _key, v: 9564 }, _key = "boxUr;", _map[_key] = { k: _key, v: 9561 }, _key = "boxV;", _map[_key] = { k: _key, v: 9553 }, _key = "boxVH;", _map[_key] = { k: _key, v: 9580 }, _key = "boxVL;", _map[_key] = { k: _key, v: 9571 }, _key = "boxVR;", _map[_key] = { k: _key, v: 9568 }, _key = "boxVh;", _map[_key] = { k: _key, v: 9579 }, _key = "boxVl;", _map[_key] = { k: _key, v: 9570 }, _key = "boxVr;", _map[_key] = { k: _key, v: 9567 }, _key = "boxbox;", _map[_key] = { k: _key, v: 10697 }, _key = "boxdL;", _map[_key] = { k: _key, v: 9557 }, _key = "boxdR;", _map[_key] = { k: _key, v: 9554 }, _key = "boxdl;", _map[_key] = { k: _key, v: 9488 }, _key = "boxdr;", _map[_key] = { k: _key, v: 9484 }, _key = "boxh;", _map[_key] = { k: _key, v: 9472 }, _key = "boxhD;", _map[_key] = { k: _key, v: 9573 }, _key = "boxhU;", _map[_key] = { k: _key, v: 9576 }, _key = "boxhd;", _map[_key] = { k: _key, v: 9516 }, _key = "boxhu;", _map[_key] = { k: _key, v: 9524 }, _key = "boxminus;", _map[_key] = { k: _key, v: 8863 }, _key = "boxplus;", _map[_key] = { k: _key, v: 8862 }, _key = "boxtimes;", _map[_key] = { k: _key, v: 8864 }, _key = "boxuL;", _map[_key] = { k: _key, v: 9563 }, _key = "boxuR;", _map[_key] = { k: _key, v: 9560 }, _key = "boxul;", _map[_key] = { k: _key, v: 9496 }, _key = "boxur;", _map[_key] = { k: _key, v: 9492 }, _key = "boxv;", _map[_key] = { k: _key, v: 9474 }, _key = "boxvH;", _map[_key] = { k: _key, v: 9578 }, _key = "boxvL;", _map[_key] = { k: _key, v: 9569 }, _key = "boxvR;", _map[_key] = { k: _key, v: 9566 }, _key = "boxvh;", _map[_key] = { k: _key, v: 9532 }, _key = "boxvl;", _map[_key] = { k: _key, v: 9508 }, _key = "boxvr;", _map[_key] = { k: _key, v: 9500 }, _key = "bprime;", _map[_key] = { k: _key, v: 8245 }, _key = "breve;", _map[_key] = { k: _key, v: 728 }, _key = "brvbar;", _map[_key] = { k: _key, v: 166 }, _key = "bscr;", _map[_key] = { k: _key, v: 119991 }, _key = "bsemi;", _map[_key] = { k: _key, v: 8271 }, _key = "bsim;", _map[_key] = { k: _key, v: 8765 }, _key = "bsime;", _map[_key] = { k: _key, v: 8909 }, _key = "bsol;", _map[_key] = { k: _key, v: 92 }, _key = "bsolb;", _map[_key] = { k: _key, v: 10693 }, _key = "bsolhsub;", _map[_key] = { k: _key, v: 10184 }, _key = "bull;", _map[_key] = { k: _key, v: 8226 }, _key = "bullet;", _map[_key] = { k: _key, v: 8226 }, _key = "bump;", _map[_key] = { k: _key, v: 8782 }, _key = "bumpE;", _map[_key] = { k: _key, v: 10926 }, _key = "bumpe;", _map[_key] = { k: _key, v: 8783 }, _key = "bumpeq;", _map[_key] = { k: _key, v: 8783 }, _key = "cacute;", _map[_key] = { k: _key, v: 263 }, _key = "cap;", _map[_key] = { k: _key, v: 8745 }, _key = "capand;", _map[_key] = { k: _key, v: 10820 }, _key = "capbrcup;", _map[_key] = { k: _key, v: 10825 }, _key = "capcap;", _map[_key] = { k: _key, v: 10827 }, _key = "capcup;", _map[_key] = { k: _key, v: 10823 }, _key = "capdot;", _map[_key] = { k: _key, v: 10816 }, _key = "caret;", _map[_key] = { k: _key, v: 8257 }, _key = "caron;", _map[_key] = { k: _key, v: 711 }, _key = "ccaps;", _map[_key] = { k: _key, v: 10829 }, _key = "ccaron;", _map[_key] = { k: _key, v: 269 }, _key = "ccedil;", _map[_key] = { k: _key, v: 231 }, _key = "ccirc;", _map[_key] = { k: _key, v: 265 }, _key = "ccups;", _map[_key] = { k: _key, v: 10828 }, _key = "ccupssm;", _map[_key] = { k: _key, v: 10832 }, _key = "cdot;", _map[_key] = { k: _key, v: 267 }, _key = "cedil;", _map[_key] = { k: _key, v: 184 }, _key = "cemptyv;", _map[_key] = { k: _key, v: 10674 }, _key = "cent;", _map[_key] = { k: _key, v: 162 }, _key = "centerdot;", _map[_key] = { k: _key, v: 183 }, _key = "cfr;", _map[_key] = { k: _key, v: 120096 }, _key = "chcy;", _map[_key] = { k: _key, v: 1095 }, _key = "check;", _map[_key] = { k: _key, v: 10003 }, _key = "checkmark;", _map[_key] = { k: _key, v: 10003 }, _key = "chi;", _map[_key] = { k: _key, v: 967 }, _key = "cir;", _map[_key] = { k: _key, v: 9675 }, _key = "cirE;", _map[_key] = { k: _key, v: 10691 }, _key = "circ;", _map[_key] = { k: _key, v: 710 }, _key = "circeq;", _map[_key] = { k: _key, v: 8791 }, _key = "circlearrowleft;", _map[_key] = { k: _key, v: 8634 }, _key = "circlearrowright;", _map[_key] = { k: _key, v: 8635 }, _key = "circledR;", _map[_key] = { k: _key, v: 174 }, _key = "circledS;", _map[_key] = { k: _key, v: 9416 }, _key = "circledast;", _map[_key] = { k: _key, v: 8859 }, _key = "circledcirc;", _map[_key] = { k: _key, v: 8858 }, _key = "circleddash;", _map[_key] = { k: _key, v: 8861 }, _key = "cire;", _map[_key] = { k: _key, v: 8791 }, _key = "cirfnint;", _map[_key] = { k: _key, v: 10768 }, _key = "cirmid;", _map[_key] = { k: _key, v: 10991 }, _key = "cirscir;", _map[_key] = { k: _key, v: 10690 }, _key = "clubs;", _map[_key] = { k: _key, v: 9827 }, _key = "clubsuit;", _map[_key] = { k: _key, v: 9827 }, _key = "colon;", _map[_key] = { k: _key, v: 58 }, _key = "colone;", _map[_key] = { k: _key, v: 8788 }, _key = "coloneq;", _map[_key] = { k: _key, v: 8788 }, _key = "comma;", _map[_key] = { k: _key, v: 44 }, _key = "commat;", _map[_key] = { k: _key, v: 64 }, _key = "comp;", _map[_key] = { k: _key, v: 8705 }, _key = "compfn;", _map[_key] = { k: _key, v: 8728 }, _key = "complement;", _map[_key] = { k: _key, v: 8705 }, _key = "complexes;", _map[_key] = { k: _key, v: 8450 }, _key = "cong;", _map[_key] = { k: _key, v: 8773 }, _key = "congdot;", _map[_key] = { k: _key, v: 10861 }, _key = "conint;", _map[_key] = { k: _key, v: 8750 }, _key = "copf;", _map[_key] = { k: _key, v: 120148 }, _key = "coprod;", _map[_key] = { k: _key, v: 8720 }, _key = "copy;", _map[_key] = { k: _key, v: 169 }, _key = "copysr;", _map[_key] = { k: _key, v: 8471 }, _key = "crarr;", _map[_key] = { k: _key, v: 8629 }, _key = "cross;", _map[_key] = { k: _key, v: 10007 }, _key = "cscr;", _map[_key] = { k: _key, v: 119992 }, _key = "csub;", _map[_key] = { k: _key, v: 10959 }, _key = "csube;", _map[_key] = { k: _key, v: 10961 }, _key = "csup;", _map[_key] = { k: _key, v: 10960 }, _key = "csupe;", _map[_key] = { k: _key, v: 10962 }, _key = "ctdot;", _map[_key] = { k: _key, v: 8943 }, _key = "cudarrl;", _map[_key] = { k: _key, v: 10552 }, _key = "cudarrr;", _map[_key] = { k: _key, v: 10549 }, _key = "cuepr;", _map[_key] = { k: _key, v: 8926 }, _key = "cuesc;", _map[_key] = { k: _key, v: 8927 }, _key = "cularr;", _map[_key] = { k: _key, v: 8630 }, _key = "cularrp;", _map[_key] = { k: _key, v: 10557 }, _key = "cup;", _map[_key] = { k: _key, v: 8746 }, _key = "cupbrcap;", _map[_key] = { k: _key, v: 10824 }, _key = "cupcap;", _map[_key] = { k: _key, v: 10822 }, _key = "cupcup;", _map[_key] = { k: _key, v: 10826 }, _key = "cupdot;", _map[_key] = { k: _key, v: 8845 }, _key = "cupor;", _map[_key] = { k: _key, v: 10821 }, _key = "curarr;", _map[_key] = { k: _key, v: 8631 }, _key = "curarrm;", _map[_key] = { k: _key, v: 10556 }, _key = "curlyeqprec;", _map[_key] = { k: _key, v: 8926 }, _key = "curlyeqsucc;", _map[_key] = { k: _key, v: 8927 }, _key = "curlyvee;", _map[_key] = { k: _key, v: 8910 }, _key = "curlywedge;", _map[_key] = { k: _key, v: 8911 }, _key = "curren;", _map[_key] = { k: _key, v: 164 }, _key = "curvearrowleft;", _map[_key] = { k: _key, v: 8630 }, _key = "curvearrowright;", _map[_key] = { k: _key, v: 8631 }, _key = "cuvee;", _map[_key] = { k: _key, v: 8910 }, _key = "cuwed;", _map[_key] = { k: _key, v: 8911 }, _key = "cwconint;", _map[_key] = { k: _key, v: 8754 }, _key = "cwint;", _map[_key] = { k: _key, v: 8753 }, _key = "cylcty;", _map[_key] = { k: _key, v: 9005 }, _key = "dArr;", _map[_key] = { k: _key, v: 8659 }, _key = "dHar;", _map[_key] = { k: _key, v: 10597 }, _key = "dagger;", _map[_key] = { k: _key, v: 8224 }, _key = "daleth;", _map[_key] = { k: _key, v: 8504 }, _key = "darr;", _map[_key] = { k: _key, v: 8595 }, _key = "dash;", _map[_key] = { k: _key, v: 8208 }, _key = "dashv;", _map[_key] = { k: _key, v: 8867 }, _key = "dbkarow;", _map[_key] = { k: _key, v: 10511 }, _key = "dblac;", _map[_key] = { k: _key, v: 733 }, _key = "dcaron;", _map[_key] = { k: _key, v: 271 }, _key = "dcy;", _map[_key] = { k: _key, v: 1076 }, _key = "dd;", _map[_key] = { k: _key, v: 8518 }, _key = "ddagger;", _map[_key] = { k: _key, v: 8225 }, _key = "ddarr;", _map[_key] = { k: _key, v: 8650 }, _key = "ddotseq;", _map[_key] = { k: _key, v: 10871 }, _key = "deg;", _map[_key] = { k: _key, v: 176 }, _key = "delta;", _map[_key] = { k: _key, v: 948 }, _key = "demptyv;", _map[_key] = { k: _key, v: 10673 }, _key = "dfisht;", _map[_key] = { k: _key, v: 10623 }, _key = "dfr;", _map[_key] = { k: _key, v: 120097 }, _key = "dharl;", _map[_key] = { k: _key, v: 8643 }, _key = "dharr;", _map[_key] = { k: _key, v: 8642 }, _key = "diam;", _map[_key] = { k: _key, v: 8900 }, _key = "diamond;", _map[_key] = { k: _key, v: 8900 }, _key = "diamondsuit;", _map[_key] = { k: _key, v: 9830 }, _key = "diams;", _map[_key] = { k: _key, v: 9830 }, _key = "die;", _map[_key] = { k: _key, v: 168 }, _key = "digamma;", _map[_key] = { k: _key, v: 989 }, _key = "disin;", _map[_key] = { k: _key, v: 8946 }, _key = "div;", _map[_key] = { k: _key, v: 247 }, _key = "divide;", _map[_key] = { k: _key, v: 247 }, _key = "divideontimes;", _map[_key] = { k: _key, v: 8903 }, _key = "divonx;", _map[_key] = { k: _key, v: 8903 }, _key = "djcy;", _map[_key] = { k: _key, v: 1106 }, _key = "dlcorn;", _map[_key] = { k: _key, v: 8990 }, _key = "dlcrop;", _map[_key] = { k: _key, v: 8973 }, _key = "dollar;", _map[_key] = { k: _key, v: 36 }, _key = "dopf;", _map[_key] = { k: _key, v: 120149 }, _key = "dot;", _map[_key] = { k: _key, v: 729 }, _key = "doteq;", _map[_key] = { k: _key, v: 8784 }, _key = "doteqdot;", _map[_key] = { k: _key, v: 8785 }, _key = "dotminus;", _map[_key] = { k: _key, v: 8760 }, _key = "dotplus;", _map[_key] = { k: _key, v: 8724 }, _key = "dotsquare;", _map[_key] = { k: _key, v: 8865 }, _key = "doublebarwedge;", _map[_key] = { k: _key, v: 8966 }, _key = "downarrow;", _map[_key] = { k: _key, v: 8595 }, _key = "downdownarrows;", _map[_key] = { k: _key, v: 8650 }, _key = "downharpoonleft;", _map[_key] = { k: _key, v: 8643 }, _key = "downharpoonright;", _map[_key] = { k: _key, v: 8642 }, _key = "drbkarow;", _map[_key] = { k: _key, v: 10512 }, _key = "drcorn;", _map[_key] = { k: _key, v: 8991 }, _key = "drcrop;", _map[_key] = { k: _key, v: 8972 }, _key = "dscr;", _map[_key] = { k: _key, v: 119993 }, _key = "dscy;", _map[_key] = { k: _key, v: 1109 }, _key = "dsol;", _map[_key] = { k: _key, v: 10742 }, _key = "dstrok;", _map[_key] = { k: _key, v: 273 }, _key = "dtdot;", _map[_key] = { k: _key, v: 8945 }, _key = "dtri;", _map[_key] = { k: _key, v: 9663 }, _key = "dtrif;", _map[_key] = { k: _key, v: 9662 }, _key = "duarr;", _map[_key] = { k: _key, v: 8693 }, _key = "duhar;", _map[_key] = { k: _key, v: 10607 }, _key = "dwangle;", _map[_key] = { k: _key, v: 10662 }, _key = "dzcy;", _map[_key] = { k: _key, v: 1119 }, _key = "dzigrarr;", _map[_key] = { k: _key, v: 10239 }, _key = "eDDot;", _map[_key] = { k: _key, v: 10871 }, _key = "eDot;", _map[_key] = { k: _key, v: 8785 }, _key = "eacute;", _map[_key] = { k: _key, v: 233 }, _key = "easter;", _map[_key] = { k: _key, v: 10862 }, _key = "ecaron;", _map[_key] = { k: _key, v: 283 }, _key = "ecir;", _map[_key] = { k: _key, v: 8790 }, _key = "ecirc;", _map[_key] = { k: _key, v: 234 }, _key = "ecolon;", _map[_key] = { k: _key, v: 8789 }, _key = "ecy;", _map[_key] = { k: _key, v: 1101 }, _key = "edot;", _map[_key] = { k: _key, v: 279 }, _key = "ee;", _map[_key] = { k: _key, v: 8519 }, _key = "efDot;", _map[_key] = { k: _key, v: 8786 }, _key = "efr;", _map[_key] = { k: _key, v: 120098 }, _key = "eg;", _map[_key] = { k: _key, v: 10906 }, _key = "egrave;", _map[_key] = { k: _key, v: 232 }, _key = "egs;", _map[_key] = { k: _key, v: 10902 }, _key = "egsdot;", _map[_key] = { k: _key, v: 10904 }, _key = "el;", _map[_key] = { k: _key, v: 10905 }, _key = "elinters;", _map[_key] = { k: _key, v: 9191 }, _key = "ell;", _map[_key] = { k: _key, v: 8467 }, _key = "els;", _map[_key] = { k: _key, v: 10901 }, _key = "elsdot;", _map[_key] = { k: _key, v: 10903 }, _key = "emacr;", _map[_key] = { k: _key, v: 275 }, _key = "empty;", _map[_key] = { k: _key, v: 8709 }, _key = "emptyset;", _map[_key] = { k: _key, v: 8709 }, _key = "emptyv;", _map[_key] = { k: _key, v: 8709 }, _key = "emsp;", _map[_key] = { k: _key, v: 8195 }, _key = "emsp13;", _map[_key] = { k: _key, v: 8196 }, _key = "emsp14;", _map[_key] = { k: _key, v: 8197 }, _key = "eng;", _map[_key] = { k: _key, v: 331 }, _key = "ensp;", _map[_key] = { k: _key, v: 8194 }, _key = "eogon;", _map[_key] = { k: _key, v: 281 }, _key = "eopf;", _map[_key] = { k: _key, v: 120150 }, _key = "epar;", _map[_key] = { k: _key, v: 8917 }, _key = "eparsl;", _map[_key] = { k: _key, v: 10723 }, _key = "eplus;", _map[_key] = { k: _key, v: 10865 }, _key = "epsi;", _map[_key] = { k: _key, v: 949 }, _key = "epsilon;", _map[_key] = { k: _key, v: 949 }, _key = "epsiv;", _map[_key] = { k: _key, v: 1013 }, _key = "eqcirc;", _map[_key] = { k: _key, v: 8790 }, _key = "eqcolon;", _map[_key] = { k: _key, v: 8789 }, _key = "eqsim;", _map[_key] = { k: _key, v: 8770 }, _key = "eqslantgtr;", _map[_key] = { k: _key, v: 10902 }, _key = "eqslantless;", _map[_key] = { k: _key, v: 10901 }, _key = "equals;", _map[_key] = { k: _key, v: 61 }, _key = "equest;", _map[_key] = { k: _key, v: 8799 }, _key = "equiv;", _map[_key] = { k: _key, v: 8801 }, _key = "equivDD;", _map[_key] = { k: _key, v: 10872 }, _key = "eqvparsl;", _map[_key] = { k: _key, v: 10725 }, _key = "erDot;", _map[_key] = { k: _key, v: 8787 }, _key = "erarr;", _map[_key] = { k: _key, v: 10609 }, _key = "escr;", _map[_key] = { k: _key, v: 8495 }, _key = "esdot;", _map[_key] = { k: _key, v: 8784 }, _key = "esim;", _map[_key] = { k: _key, v: 8770 }, _key = "eta;", _map[_key] = { k: _key, v: 951 }, _key = "eth;", _map[_key] = { k: _key, v: 240 }, _key = "euml;", _map[_key] = { k: _key, v: 235 }, _key = "euro;", _map[_key] = { k: _key, v: 8364 }, _key = "excl;", _map[_key] = { k: _key, v: 33 }, _key = "exist;", _map[_key] = { k: _key, v: 8707 }, _key = "expectation;", _map[_key] = { k: _key, v: 8496 }, _key = "exponentiale;", _map[_key] = { k: _key, v: 8519 }, _key = "fallingdotseq;", _map[_key] = { k: _key, v: 8786 }, _key = "fcy;", _map[_key] = { k: _key, v: 1092 }, _key = "female;", _map[_key] = { k: _key, v: 9792 }, _key = "ffilig;", _map[_key] = { k: _key, v: 64259 }, _key = "fflig;", _map[_key] = { k: _key, v: 64256 }, _key = "ffllig;", _map[_key] = { k: _key, v: 64260 }, _key = "ffr;", _map[_key] = { k: _key, v: 120099 }, _key = "filig;", _map[_key] = { k: _key, v: 64257 }, _key = "flat;", _map[_key] = { k: _key, v: 9837 }, _key = "fllig;", _map[_key] = { k: _key, v: 64258 }, _key = "fltns;", _map[_key] = { k: _key, v: 9649 }, _key = "fnof;", _map[_key] = { k: _key, v: 402 }, _key = "fopf;", _map[_key] = { k: _key, v: 120151 }, _key = "forall;", _map[_key] = { k: _key, v: 8704 }, _key = "fork;", _map[_key] = { k: _key, v: 8916 }, _key = "forkv;", _map[_key] = { k: _key, v: 10969 }, _key = "fpartint;", _map[_key] = { k: _key, v: 10765 }, _key = "frac12;", _map[_key] = { k: _key, v: 189 }, _key = "frac13;", _map[_key] = { k: _key, v: 8531 }, _key = "frac14;", _map[_key] = { k: _key, v: 188 }, _key = "frac15;", _map[_key] = { k: _key, v: 8533 }, _key = "frac16;", _map[_key] = { k: _key, v: 8537 }, _key = "frac18;", _map[_key] = { k: _key, v: 8539 }, _key = "frac23;", _map[_key] = { k: _key, v: 8532 }, _key = "frac25;", _map[_key] = { k: _key, v: 8534 }, _key = "frac34;", _map[_key] = { k: _key, v: 190 }, _key = "frac35;", _map[_key] = { k: _key, v: 8535 }, _key = "frac38;", _map[_key] = { k: _key, v: 8540 }, _key = "frac45;", _map[_key] = { k: _key, v: 8536 }, _key = "frac56;", _map[_key] = { k: _key, v: 8538 }, _key = "frac58;", _map[_key] = { k: _key, v: 8541 }, _key = "frac78;", _map[_key] = { k: _key, v: 8542 }, _key = "frasl;", _map[_key] = { k: _key, v: 8260 }, _key = "frown;", _map[_key] = { k: _key, v: 8994 }, _key = "fscr;", _map[_key] = { k: _key, v: 119995 }, _key = "gE;", _map[_key] = { k: _key, v: 8807 }, _key = "gEl;", _map[_key] = { k: _key, v: 10892 }, _key = "gacute;", _map[_key] = { k: _key, v: 501 }, _key = "gamma;", _map[_key] = { k: _key, v: 947 }, _key = "gammad;", _map[_key] = { k: _key, v: 989 }, _key = "gap;", _map[_key] = { k: _key, v: 10886 }, _key = "gbreve;", _map[_key] = { k: _key, v: 287 }, _key = "gcirc;", _map[_key] = { k: _key, v: 285 }, _key = "gcy;", _map[_key] = { k: _key, v: 1075 }, _key = "gdot;", _map[_key] = { k: _key, v: 289 }, _key = "ge;", _map[_key] = { k: _key, v: 8805 }, _key = "gel;", _map[_key] = { k: _key, v: 8923 }, _key = "geq;", _map[_key] = { k: _key, v: 8805 }, _key = "geqq;", _map[_key] = { k: _key, v: 8807 }, _key = "geqslant;", _map[_key] = { k: _key, v: 10878 }, _key = "ges;", _map[_key] = { k: _key, v: 10878 }, _key = "gescc;", _map[_key] = { k: _key, v: 10921 }, _key = "gesdot;", _map[_key] = { k: _key, v: 10880 }, _key = "gesdoto;", _map[_key] = { k: _key, v: 10882 }, _key = "gesdotol;", _map[_key] = { k: _key, v: 10884 }, _key = "gesles;", _map[_key] = { k: _key, v: 10900 }, _key = "gfr;", _map[_key] = { k: _key, v: 120100 }, _key = "gg;", _map[_key] = { k: _key, v: 8811 }, _key = "ggg;", _map[_key] = { k: _key, v: 8921 }, _key = "gimel;", _map[_key] = { k: _key, v: 8503 }, _key = "gjcy;", _map[_key] = { k: _key, v: 1107 }, _key = "gl;", _map[_key] = { k: _key, v: 8823 }, _key = "glE;", _map[_key] = { k: _key, v: 10898 }, _key = "gla;", _map[_key] = { k: _key, v: 10917 }, _key = "glj;", _map[_key] = { k: _key, v: 10916 }, _key = "gnE;", _map[_key] = { k: _key, v: 8809 }, _key = "gnap;", _map[_key] = { k: _key, v: 10890 }, _key = "gnapprox;", _map[_key] = { k: _key, v: 10890 }, _key = "gne;", _map[_key] = { k: _key, v: 10888 }, _key = "gneq;", _map[_key] = { k: _key, v: 10888 }, _key = "gneqq;", _map[_key] = { k: _key, v: 8809 }, _key = "gnsim;", _map[_key] = { k: _key, v: 8935 }, _key = "gopf;", _map[_key] = { k: _key, v: 120152 }, _key = "grave;", _map[_key] = { k: _key, v: 96 }, _key = "gscr;", _map[_key] = { k: _key, v: 8458 }, _key = "gsim;", _map[_key] = { k: _key, v: 8819 }, _key = "gsime;", _map[_key] = { k: _key, v: 10894 }, _key = "gsiml;", _map[_key] = { k: _key, v: 10896 }, _key = "gt;", _map[_key] = { k: _key, v: 62 }, _key = "gtcc;", _map[_key] = { k: _key, v: 10919 }, _key = "gtcir;", _map[_key] = { k: _key, v: 10874 }, _key = "gtdot;", _map[_key] = { k: _key, v: 8919 }, _key = "gtlPar;", _map[_key] = { k: _key, v: 10645 }, _key = "gtquest;", _map[_key] = { k: _key, v: 10876 }, _key = "gtrapprox;", _map[_key] = { k: _key, v: 10886 }, _key = "gtrarr;", _map[_key] = { k: _key, v: 10616 }, _key = "gtrdot;", _map[_key] = { k: _key, v: 8919 }, _key = "gtreqless;", _map[_key] = { k: _key, v: 8923 }, _key = "gtreqqless;", _map[_key] = { k: _key, v: 10892 }, _key = "gtrless;", _map[_key] = { k: _key, v: 8823 }, _key = "gtrsim;", _map[_key] = { k: _key, v: 8819 }, _key = "hArr;", _map[_key] = { k: _key, v: 8660 }, _key = "hairsp;", _map[_key] = { k: _key, v: 8202 }, _key = "half;", _map[_key] = { k: _key, v: 189 }, _key = "hamilt;", _map[_key] = { k: _key, v: 8459 }, _key = "hardcy;", _map[_key] = { k: _key, v: 1098 }, _key = "harr;", _map[_key] = { k: _key, v: 8596 }, _key = "harrcir;", _map[_key] = { k: _key, v: 10568 }, _key = "harrw;", _map[_key] = { k: _key, v: 8621 }, _key = "hbar;", _map[_key] = { k: _key, v: 8463 }, _key = "hcirc;", _map[_key] = { k: _key, v: 293 }, _key = "hearts;", _map[_key] = { k: _key, v: 9829 }, _key = "heartsuit;", _map[_key] = { k: _key, v: 9829 }, _key = "hellip;", _map[_key] = { k: _key, v: 8230 }, _key = "hercon;", _map[_key] = { k: _key, v: 8889 }, _key = "hfr;", _map[_key] = { k: _key, v: 120101 }, _key = "hksearow;", _map[_key] = { k: _key, v: 10533 }, _key = "hkswarow;", _map[_key] = { k: _key, v: 10534 }, _key = "hoarr;", _map[_key] = { k: _key, v: 8703 }, _key = "homtht;", _map[_key] = { k: _key, v: 8763 }, _key = "hookleftarrow;", _map[_key] = { k: _key, v: 8617 }, _key = "hookrightarrow;", _map[_key] = { k: _key, v: 8618 }, _key = "hopf;", _map[_key] = { k: _key, v: 120153 }, _key = "horbar;", _map[_key] = { k: _key, v: 8213 }, _key = "hscr;", _map[_key] = { k: _key, v: 119997 }, _key = "hslash;", _map[_key] = { k: _key, v: 8463 }, _key = "hstrok;", _map[_key] = { k: _key, v: 295 }, _key = "hybull;", _map[_key] = { k: _key, v: 8259 }, _key = "hyphen;", _map[_key] = { k: _key, v: 8208 }, _key = "iacute;", _map[_key] = { k: _key, v: 237 }, _key = "ic;", _map[_key] = { k: _key, v: 8291 }, _key = "icirc;", _map[_key] = { k: _key, v: 238 }, _key = "icy;", _map[_key] = { k: _key, v: 1080 }, _key = "iecy;", _map[_key] = { k: _key, v: 1077 }, _key = "iexcl;", _map[_key] = { k: _key, v: 161 }, _key = "iff;", _map[_key] = { k: _key, v: 8660 }, _key = "ifr;", _map[_key] = { k: _key, v: 120102 }, _key = "igrave;", _map[_key] = { k: _key, v: 236 }, _key = "ii;", _map[_key] = { k: _key, v: 8520 }, _key = "iiiint;", _map[_key] = { k: _key, v: 10764 }, _key = "iiint;", _map[_key] = { k: _key, v: 8749 }, _key = "iinfin;", _map[_key] = { k: _key, v: 10716 }, _key = "iiota;", _map[_key] = { k: _key, v: 8489 }, _key = "ijlig;", _map[_key] = { k: _key, v: 307 }, _key = "imacr;", _map[_key] = { k: _key, v: 299 }, _key = "image;", _map[_key] = { k: _key, v: 8465 }, _key = "imagline;", _map[_key] = { k: _key, v: 8464 }, _key = "imagpart;", _map[_key] = { k: _key, v: 8465 }, _key = "imath;", _map[_key] = { k: _key, v: 305 }, _key = "imof;", _map[_key] = { k: _key, v: 8887 }, _key = "imped;", _map[_key] = { k: _key, v: 437 }, _key = "in;", _map[_key] = { k: _key, v: 8712 }, _key = "incare;", _map[_key] = { k: _key, v: 8453 }, _key = "infin;", _map[_key] = { k: _key, v: 8734 }, _key = "infintie;", _map[_key] = { k: _key, v: 10717 }, _key = "inodot;", _map[_key] = { k: _key, v: 305 }, _key = "int;", _map[_key] = { k: _key, v: 8747 }, _key = "intcal;", _map[_key] = { k: _key, v: 8890 }, _key = "integers;", _map[_key] = { k: _key, v: 8484 }, _key = "intercal;", _map[_key] = { k: _key, v: 8890 }, _key = "intlarhk;", _map[_key] = { k: _key, v: 10775 }, _key = "intprod;", _map[_key] = { k: _key, v: 10812 }, _key = "iocy;", _map[_key] = { k: _key, v: 1105 }, _key = "iogon;", _map[_key] = { k: _key, v: 303 }, _key = "iopf;", _map[_key] = { k: _key, v: 120154 }, _key = "iota;", _map[_key] = { k: _key, v: 953 }, _key = "iprod;", _map[_key] = { k: _key, v: 10812 }, _key = "iquest;", _map[_key] = { k: _key, v: 191 }, _key = "iscr;", _map[_key] = { k: _key, v: 119998 }, _key = "isin;", _map[_key] = { k: _key, v: 8712 }, _key = "isinE;", _map[_key] = { k: _key, v: 8953 }, _key = "isindot;", _map[_key] = { k: _key, v: 8949 }, _key = "isins;", _map[_key] = { k: _key, v: 8948 }, _key = "isinsv;", _map[_key] = { k: _key, v: 8947 }, _key = "isinv;", _map[_key] = { k: _key, v: 8712 }, _key = "it;", _map[_key] = { k: _key, v: 8290 }, _key = "itilde;", _map[_key] = { k: _key, v: 297 }, _key = "iukcy;", _map[_key] = { k: _key, v: 1110 }, _key = "iuml;", _map[_key] = { k: _key, v: 239 }, _key = "jcirc;", _map[_key] = { k: _key, v: 309 }, _key = "jcy;", _map[_key] = { k: _key, v: 1081 }, _key = "jfr;", _map[_key] = { k: _key, v: 120103 }, _key = "jmath;", _map[_key] = { k: _key, v: 567 }, _key = "jopf;", _map[_key] = { k: _key, v: 120155 }, _key = "jscr;", _map[_key] = { k: _key, v: 119999 }, _key = "jsercy;", _map[_key] = { k: _key, v: 1112 }, _key = "jukcy;", _map[_key] = { k: _key, v: 1108 }, _key = "kappa;", _map[_key] = { k: _key, v: 954 }, _key = "kappav;", _map[_key] = { k: _key, v: 1008 }, _key = "kcedil;", _map[_key] = { k: _key, v: 311 }, _key = "kcy;", _map[_key] = { k: _key, v: 1082 }, _key = "kfr;", _map[_key] = { k: _key, v: 120104 }, _key = "kgreen;", _map[_key] = { k: _key, v: 312 }, _key = "khcy;", _map[_key] = { k: _key, v: 1093 }, _key = "kjcy;", _map[_key] = { k: _key, v: 1116 }, _key = "kopf;", _map[_key] = { k: _key, v: 120156 }, _key = "kscr;", _map[_key] = { k: _key, v: 120000 }, _key = "lAarr;", _map[_key] = { k: _key, v: 8666 }, _key = "lArr;", _map[_key] = { k: _key, v: 8656 }, _key = "lAtail;", _map[_key] = { k: _key, v: 10523 }, _key = "lBarr;", _map[_key] = { k: _key, v: 10510 }, _key = "lE;", _map[_key] = { k: _key, v: 8806 }, _key = "lEg;", _map[_key] = { k: _key, v: 10891 }, _key = "lHar;", _map[_key] = { k: _key, v: 10594 }, _key = "lacute;", _map[_key] = { k: _key, v: 314 }, _key = "laemptyv;", _map[_key] = { k: _key, v: 10676 }, _key = "lagran;", _map[_key] = { k: _key, v: 8466 }, _key = "lambda;", _map[_key] = { k: _key, v: 955 }, _key = "lang;", _map[_key] = { k: _key, v: 10216 }, _key = "langd;", _map[_key] = { k: _key, v: 10641 }, _key = "langle;", _map[_key] = { k: _key, v: 10216 }, _key = "lap;", _map[_key] = { k: _key, v: 10885 }, _key = "laquo;", _map[_key] = { k: _key, v: 171 }, _key = "larr;", _map[_key] = { k: _key, v: 8592 }, _key = "larrb;", _map[_key] = { k: _key, v: 8676 }, _key = "larrbfs;", _map[_key] = { k: _key, v: 10527 }, _key = "larrfs;", _map[_key] = { k: _key, v: 10525 }, _key = "larrhk;", _map[_key] = { k: _key, v: 8617 }, _key = "larrlp;", _map[_key] = { k: _key, v: 8619 }, _key = "larrpl;", _map[_key] = { k: _key, v: 10553 }, _key = "larrsim;", _map[_key] = { k: _key, v: 10611 }, _key = "larrtl;", _map[_key] = { k: _key, v: 8610 }, _key = "lat;", _map[_key] = { k: _key, v: 10923 }, _key = "latail;", _map[_key] = { k: _key, v: 10521 }, _key = "late;", _map[_key] = { k: _key, v: 10925 }, _key = "lbarr;", _map[_key] = { k: _key, v: 10508 }, _key = "lbbrk;", _map[_key] = { k: _key, v: 10098 }, _key = "lbrace;", _map[_key] = { k: _key, v: 123 }, _key = "lbrack;", _map[_key] = { k: _key, v: 91 }, _key = "lbrke;", _map[_key] = { k: _key, v: 10635 }, _key = "lbrksld;", _map[_key] = { k: _key, v: 10639 }, _key = "lbrkslu;", _map[_key] = { k: _key, v: 10637 }, _key = "lcaron;", _map[_key] = { k: _key, v: 318 }, _key = "lcedil;", _map[_key] = { k: _key, v: 316 }, _key = "lceil;", _map[_key] = { k: _key, v: 8968 }, _key = "lcub;", _map[_key] = { k: _key, v: 123 }, _key = "lcy;", _map[_key] = { k: _key, v: 1083 }, _key = "ldca;", _map[_key] = { k: _key, v: 10550 }, _key = "ldquo;", _map[_key] = { k: _key, v: 8220 }, _key = "ldquor;", _map[_key] = { k: _key, v: 8222 }, _key = "ldrdhar;", _map[_key] = { k: _key, v: 10599 }, _key = "ldrushar;", _map[_key] = { k: _key, v: 10571 }, _key = "ldsh;", _map[_key] = { k: _key, v: 8626 }, _key = "le;", _map[_key] = { k: _key, v: 8804 }, _key = "leftarrow;", _map[_key] = { k: _key, v: 8592 }, _key = "leftarrowtail;", _map[_key] = { k: _key, v: 8610 }, _key = "leftharpoondown;", _map[_key] = { k: _key, v: 8637 }, _key = "leftharpoonup;", _map[_key] = { k: _key, v: 8636 }, _key = "leftleftarrows;", _map[_key] = { k: _key, v: 8647 }, _key = "leftrightarrow;", _map[_key] = { k: _key, v: 8596 }, _key = "leftrightarrows;", _map[_key] = { k: _key, v: 8646 }, _key = "leftrightharpoons;", _map[_key] = { k: _key, v: 8651 }, _key = "leftrightsquigarrow;", _map[_key] = { k: _key, v: 8621 }, _key = "leftthreetimes;", _map[_key] = { k: _key, v: 8907 }, _key = "leg;", _map[_key] = { k: _key, v: 8922 }, _key = "leq;", _map[_key] = { k: _key, v: 8804 }, _key = "leqq;", _map[_key] = { k: _key, v: 8806 }, _key = "leqslant;", _map[_key] = { k: _key, v: 10877 }, _key = "les;", _map[_key] = { k: _key, v: 10877 }, _key = "lescc;", _map[_key] = { k: _key, v: 10920 }, _key = "lesdot;", _map[_key] = { k: _key, v: 10879 }, _key = "lesdoto;", _map[_key] = { k: _key, v: 10881 }, _key = "lesdotor;", _map[_key] = { k: _key, v: 10883 }, _key = "lesges;", _map[_key] = { k: _key, v: 10899 }, _key = "lessapprox;", _map[_key] = { k: _key, v: 10885 }, _key = "lessdot;", _map[_key] = { k: _key, v: 8918 }, _key = "lesseqgtr;", _map[_key] = { k: _key, v: 8922 }, _key = "lesseqqgtr;", _map[_key] = { k: _key, v: 10891 }, _key = "lessgtr;", _map[_key] = { k: _key, v: 8822 }, _key = "lesssim;", _map[_key] = { k: _key, v: 8818 }, _key = "lfisht;", _map[_key] = { k: _key, v: 10620 }, _key = "lfloor;", _map[_key] = { k: _key, v: 8970 }, _key = "lfr;", _map[_key] = { k: _key, v: 120105 }, _key = "lg;", _map[_key] = { k: _key, v: 8822 }, _key = "lgE;", _map[_key] = { k: _key, v: 10897 }, _key = "lhard;", _map[_key] = { k: _key, v: 8637 }, _key = "lharu;", _map[_key] = { k: _key, v: 8636 }, _key = "lharul;", _map[_key] = { k: _key, v: 10602 }, _key = "lhblk;", _map[_key] = { k: _key, v: 9604 }, _key = "ljcy;", _map[_key] = { k: _key, v: 1113 }, _key = "ll;", _map[_key] = { k: _key, v: 8810 }, _key = "llarr;", _map[_key] = { k: _key, v: 8647 }, _key = "llcorner;", _map[_key] = { k: _key, v: 8990 }, _key = "llhard;", _map[_key] = { k: _key, v: 10603 }, _key = "lltri;", _map[_key] = { k: _key, v: 9722 }, _key = "lmidot;", _map[_key] = { k: _key, v: 320 }, _key = "lmoust;", _map[_key] = { k: _key, v: 9136 }, _key = "lmoustache;", _map[_key] = { k: _key, v: 9136 }, _key = "lnE;", _map[_key] = { k: _key, v: 8808 }, _key = "lnap;", _map[_key] = { k: _key, v: 10889 }, _key = "lnapprox;", _map[_key] = { k: _key, v: 10889 }, _key = "lne;", _map[_key] = { k: _key, v: 10887 }, _key = "lneq;", _map[_key] = { k: _key, v: 10887 }, _key = "lneqq;", _map[_key] = { k: _key, v: 8808 }, _key = "lnsim;", _map[_key] = { k: _key, v: 8934 }, _key = "loang;", _map[_key] = { k: _key, v: 10220 }, _key = "loarr;", _map[_key] = { k: _key, v: 8701 }, _key = "lobrk;", _map[_key] = { k: _key, v: 10214 }, _key = "longleftarrow;", _map[_key] = { k: _key, v: 10229 }, _key = "longleftrightarrow;", _map[_key] = { k: _key, v: 10231 }, _key = "longmapsto;", _map[_key] = { k: _key, v: 10236 }, _key = "longrightarrow;", _map[_key] = { k: _key, v: 10230 }, _key = "looparrowleft;", _map[_key] = { k: _key, v: 8619 }, _key = "looparrowright;", _map[_key] = { k: _key, v: 8620 }, _key = "lopar;", _map[_key] = { k: _key, v: 10629 }, _key = "lopf;", _map[_key] = { k: _key, v: 120157 }, _key = "loplus;", _map[_key] = { k: _key, v: 10797 }, _key = "lotimes;", _map[_key] = { k: _key, v: 10804 }, _key = "lowast;", _map[_key] = { k: _key, v: 8727 }, _key = "lowbar;", _map[_key] = { k: _key, v: 95 }, _key = "loz;", _map[_key] = { k: _key, v: 9674 }, _key = "lozenge;", _map[_key] = { k: _key, v: 9674 }, _key = "lozf;", _map[_key] = { k: _key, v: 10731 }, _key = "lpar;", _map[_key] = { k: _key, v: 40 }, _key = "lparlt;", _map[_key] = { k: _key, v: 10643 }, _key = "lrarr;", _map[_key] = { k: _key, v: 8646 }, _key = "lrcorner;", _map[_key] = { k: _key, v: 8991 }, _key = "lrhar;", _map[_key] = { k: _key, v: 8651 }, _key = "lrhard;", _map[_key] = { k: _key, v: 10605 }, _key = "lrm;", _map[_key] = { k: _key, v: 8206 }, _key = "lrtri;", _map[_key] = { k: _key, v: 8895 }, _key = "lsaquo;", _map[_key] = { k: _key, v: 8249 }, _key = "lscr;", _map[_key] = { k: _key, v: 120001 }, _key = "lsh;", _map[_key] = { k: _key, v: 8624 }, _key = "lsim;", _map[_key] = { k: _key, v: 8818 }, _key = "lsime;", _map[_key] = { k: _key, v: 10893 }, _key = "lsimg;", _map[_key] = { k: _key, v: 10895 }, _key = "lsqb;", _map[_key] = { k: _key, v: 91 }, _key = "lsquo;", _map[_key] = { k: _key, v: 8216 }, _key = "lsquor;", _map[_key] = { k: _key, v: 8218 }, _key = "lstrok;", _map[_key] = { k: _key, v: 322 }, _key = "lt;", _map[_key] = { k: _key, v: 60 }, _key = "ltcc;", _map[_key] = { k: _key, v: 10918 }, _key = "ltcir;", _map[_key] = { k: _key, v: 10873 }, _key = "ltdot;", _map[_key] = { k: _key, v: 8918 }, _key = "lthree;", _map[_key] = { k: _key, v: 8907 }, _key = "ltimes;", _map[_key] = { k: _key, v: 8905 }, _key = "ltlarr;", _map[_key] = { k: _key, v: 10614 }, _key = "ltquest;", _map[_key] = { k: _key, v: 10875 }, _key = "ltrPar;", _map[_key] = { k: _key, v: 10646 }, _key = "ltri;", _map[_key] = { k: _key, v: 9667 }, _key = "ltrie;", _map[_key] = { k: _key, v: 8884 }, _key = "ltrif;", _map[_key] = { k: _key, v: 9666 }, _key = "lurdshar;", _map[_key] = { k: _key, v: 10570 }, _key = "luruhar;", _map[_key] = { k: _key, v: 10598 }, _key = "mDDot;", _map[_key] = { k: _key, v: 8762 }, _key = "macr;", _map[_key] = { k: _key, v: 175 }, _key = "male;", _map[_key] = { k: _key, v: 9794 }, _key = "malt;", _map[_key] = { k: _key, v: 10016 }, _key = "maltese;", _map[_key] = { k: _key, v: 10016 }, _key = "map;", _map[_key] = { k: _key, v: 8614 }, _key = "mapsto;", _map[_key] = { k: _key, v: 8614 }, _key = "mapstodown;", _map[_key] = { k: _key, v: 8615 }, _key = "mapstoleft;", _map[_key] = { k: _key, v: 8612 }, _key = "mapstoup;", _map[_key] = { k: _key, v: 8613 }, _key = "marker;", _map[_key] = { k: _key, v: 9646 }, _key = "mcomma;", _map[_key] = { k: _key, v: 10793 }, _key = "mcy;", _map[_key] = { k: _key, v: 1084 }, _key = "mdash;", _map[_key] = { k: _key, v: 8212 }, _key = "measuredangle;", _map[_key] = { k: _key, v: 8737 }, _key = "mfr;", _map[_key] = { k: _key, v: 120106 }, _key = "mho;", _map[_key] = { k: _key, v: 8487 }, _key = "micro;", _map[_key] = { k: _key, v: 181 }, _key = "mid;", _map[_key] = { k: _key, v: 8739 }, _key = "midast;", _map[_key] = { k: _key, v: 42 }, _key = "midcir;", _map[_key] = { k: _key, v: 10992 }, _key = "middot;", _map[_key] = { k: _key, v: 183 }, _key = "minus;", _map[_key] = { k: _key, v: 8722 }, _key = "minusb;", _map[_key] = { k: _key, v: 8863 }, _key = "minusd;", _map[_key] = { k: _key, v: 8760 }, _key = "minusdu;", _map[_key] = { k: _key, v: 10794 }, _key = "mlcp;", _map[_key] = { k: _key, v: 10971 }, _key = "mldr;", _map[_key] = { k: _key, v: 8230 }, _key = "mnplus;", _map[_key] = { k: _key, v: 8723 }, _key = "models;", _map[_key] = { k: _key, v: 8871 }, _key = "mopf;", _map[_key] = { k: _key, v: 120158 }, _key = "mp;", _map[_key] = { k: _key, v: 8723 }, _key = "mscr;", _map[_key] = { k: _key, v: 120002 }, _key = "mstpos;", _map[_key] = { k: _key, v: 8766 }, _key = "mu;", _map[_key] = { k: _key, v: 956 }, _key = "multimap;", _map[_key] = { k: _key, v: 8888 }, _key = "mumap;", _map[_key] = { k: _key, v: 8888 }, _key = "nLeftarrow;", _map[_key] = { k: _key, v: 8653 }, _key = "nLeftrightarrow;", _map[_key] = { k: _key, v: 8654 }, _key = "nRightarrow;", _map[_key] = { k: _key, v: 8655 }, _key = "nVDash;", _map[_key] = { k: _key, v: 8879 }, _key = "nVdash;", _map[_key] = { k: _key, v: 8878 }, _key = "nabla;", _map[_key] = { k: _key, v: 8711 }, _key = "nacute;", _map[_key] = { k: _key, v: 324 }, _key = "nap;", _map[_key] = { k: _key, v: 8777 }, _key = "napos;", _map[_key] = { k: _key, v: 329 }, _key = "napprox;", _map[_key] = { k: _key, v: 8777 }, _key = "natur;", _map[_key] = { k: _key, v: 9838 }, _key = "natural;", _map[_key] = { k: _key, v: 9838 }, _key = "naturals;", _map[_key] = { k: _key, v: 8469 }, _key = "nbsp;", _map[_key] = { k: _key, v: 160 }, _key = "ncap;", _map[_key] = { k: _key, v: 10819 }, _key = "ncaron;", _map[_key] = { k: _key, v: 328 }, _key = "ncedil;", _map[_key] = { k: _key, v: 326 }, _key = "ncong;", _map[_key] = { k: _key, v: 8775 }, _key = "ncup;", _map[_key] = { k: _key, v: 10818 }, _key = "ncy;", _map[_key] = { k: _key, v: 1085 }, _key = "ndash;", _map[_key] = { k: _key, v: 8211 }, _key = "ne;", _map[_key] = { k: _key, v: 8800 }, _key = "neArr;", _map[_key] = { k: _key, v: 8663 }, _key = "nearhk;", _map[_key] = { k: _key, v: 10532 }, _key = "nearr;", _map[_key] = { k: _key, v: 8599 }, _key = "nearrow;", _map[_key] = { k: _key, v: 8599 }, _key = "nequiv;", _map[_key] = { k: _key, v: 8802 }, _key = "nesear;", _map[_key] = { k: _key, v: 10536 }, _key = "nexist;", _map[_key] = { k: _key, v: 8708 }, _key = "nexists;", _map[_key] = { k: _key, v: 8708 }, _key = "nfr;", _map[_key] = { k: _key, v: 120107 }, _key = "nge;", _map[_key] = { k: _key, v: 8817 }, _key = "ngeq;", _map[_key] = { k: _key, v: 8817 }, _key = "ngsim;", _map[_key] = { k: _key, v: 8821 }, _key = "ngt;", _map[_key] = { k: _key, v: 8815 }, _key = "ngtr;", _map[_key] = { k: _key, v: 8815 }, _key = "nhArr;", _map[_key] = { k: _key, v: 8654 }, _key = "nharr;", _map[_key] = { k: _key, v: 8622 }, _key = "nhpar;", _map[_key] = { k: _key, v: 10994 }, _key = "ni;", _map[_key] = { k: _key, v: 8715 }, _key = "nis;", _map[_key] = { k: _key, v: 8956 }, _key = "nisd;", _map[_key] = { k: _key, v: 8954 }, _key = "niv;", _map[_key] = { k: _key, v: 8715 }, _key = "njcy;", _map[_key] = { k: _key, v: 1114 }, _key = "nlArr;", _map[_key] = { k: _key, v: 8653 }, _key = "nlarr;", _map[_key] = { k: _key, v: 8602 }, _key = "nldr;", _map[_key] = { k: _key, v: 8229 }, _key = "nle;", _map[_key] = { k: _key, v: 8816 }, _key = "nleftarrow;", _map[_key] = { k: _key, v: 8602 }, _key = "nleftrightarrow;", _map[_key] = { k: _key, v: 8622 }, _key = "nleq;", _map[_key] = { k: _key, v: 8816 }, _key = "nless;", _map[_key] = { k: _key, v: 8814 }, _key = "nlsim;", _map[_key] = { k: _key, v: 8820 }, _key = "nlt;", _map[_key] = { k: _key, v: 8814 }, _key = "nltri;", _map[_key] = { k: _key, v: 8938 }, _key = "nltrie;", _map[_key] = { k: _key, v: 8940 }, _key = "nmid;", _map[_key] = { k: _key, v: 8740 }, _key = "nopf;", _map[_key] = { k: _key, v: 120159 }, _key = "not;", _map[_key] = { k: _key, v: 172 }, _key = "notin;", _map[_key] = { k: _key, v: 8713 }, _key = "notinva;", _map[_key] = { k: _key, v: 8713 }, _key = "notinvb;", _map[_key] = { k: _key, v: 8951 }, _key = "notinvc;", _map[_key] = { k: _key, v: 8950 }, _key = "notni;", _map[_key] = { k: _key, v: 8716 }, _key = "notniva;", _map[_key] = { k: _key, v: 8716 }, _key = "notnivb;", _map[_key] = { k: _key, v: 8958 }, _key = "notnivc;", _map[_key] = { k: _key, v: 8957 }, _key = "npar;", _map[_key] = { k: _key, v: 8742 }, _key = "nparallel;", _map[_key] = { k: _key, v: 8742 }, _key = "npolint;", _map[_key] = { k: _key, v: 10772 }, _key = "npr;", _map[_key] = { k: _key, v: 8832 }, _key = "nprcue;", _map[_key] = { k: _key, v: 8928 }, _key = "nprec;", _map[_key] = { k: _key, v: 8832 }, _key = "nrArr;", _map[_key] = { k: _key, v: 8655 }, _key = "nrarr;", _map[_key] = { k: _key, v: 8603 }, _key = "nrightarrow;", _map[_key] = { k: _key, v: 8603 }, _key = "nrtri;", _map[_key] = { k: _key, v: 8939 }, _key = "nrtrie;", _map[_key] = { k: _key, v: 8941 }, _key = "nsc;", _map[_key] = { k: _key, v: 8833 }, _key = "nsccue;", _map[_key] = { k: _key, v: 8929 }, _key = "nscr;", _map[_key] = { k: _key, v: 120003 }, _key = "nshortmid;", _map[_key] = { k: _key, v: 8740 }, _key = "nshortparallel;", _map[_key] = { k: _key, v: 8742 }, _key = "nsim;", _map[_key] = { k: _key, v: 8769 }, _key = "nsime;", _map[_key] = { k: _key, v: 8772 }, _key = "nsimeq;", _map[_key] = { k: _key, v: 8772 }, _key = "nsmid;", _map[_key] = { k: _key, v: 8740 }, _key = "nspar;", _map[_key] = { k: _key, v: 8742 }, _key = "nsqsube;", _map[_key] = { k: _key, v: 8930 }, _key = "nsqsupe;", _map[_key] = { k: _key, v: 8931 }, _key = "nsub;", _map[_key] = { k: _key, v: 8836 }, _key = "nsube;", _map[_key] = { k: _key, v: 8840 }, _key = "nsubseteq;", _map[_key] = { k: _key, v: 8840 }, _key = "nsucc;", _map[_key] = { k: _key, v: 8833 }, _key = "nsup;", _map[_key] = { k: _key, v: 8837 }, _key = "nsupe;", _map[_key] = { k: _key, v: 8841 }, _key = "nsupseteq;", _map[_key] = { k: _key, v: 8841 }, _key = "ntgl;", _map[_key] = { k: _key, v: 8825 }, _key = "ntilde;", _map[_key] = { k: _key, v: 241 }, _key = "ntlg;", _map[_key] = { k: _key, v: 8824 }, _key = "ntriangleleft;", _map[_key] = { k: _key, v: 8938 }, _key = "ntrianglelefteq;", _map[_key] = { k: _key, v: 8940 }, _key = "ntriangleright;", _map[_key] = { k: _key, v: 8939 }, _key = "ntrianglerighteq;", _map[_key] = { k: _key, v: 8941 }, _key = "nu;", _map[_key] = { k: _key, v: 957 }, _key = "num;", _map[_key] = { k: _key, v: 35 }, _key = "numero;", _map[_key] = { k: _key, v: 8470 }, _key = "numsp;", _map[_key] = { k: _key, v: 8199 }, _key = "nvDash;", _map[_key] = { k: _key, v: 8877 }, _key = "nvHarr;", _map[_key] = { k: _key, v: 10500 }, _key = "nvdash;", _map[_key] = { k: _key, v: 8876 }, _key = "nvinfin;", _map[_key] = { k: _key, v: 10718 }, _key = "nvlArr;", _map[_key] = { k: _key, v: 10498 }, _key = "nvrArr;", _map[_key] = { k: _key, v: 10499 }, _key = "nwArr;", _map[_key] = { k: _key, v: 8662 }, _key = "nwarhk;", _map[_key] = { k: _key, v: 10531 }, _key = "nwarr;", _map[_key] = { k: _key, v: 8598 }, _key = "nwarrow;", _map[_key] = { k: _key, v: 8598 }, _key = "nwnear;", _map[_key] = { k: _key, v: 10535 }, _key = "oS;", _map[_key] = { k: _key, v: 9416 }, _key = "oacute;", _map[_key] = { k: _key, v: 243 }, _key = "oast;", _map[_key] = { k: _key, v: 8859 }, _key = "ocir;", _map[_key] = { k: _key, v: 8858 }, _key = "ocirc;", _map[_key] = { k: _key, v: 244 }, _key = "ocy;", _map[_key] = { k: _key, v: 1086 }, _key = "odash;", _map[_key] = { k: _key, v: 8861 }, _key = "odblac;", _map[_key] = { k: _key, v: 337 }, _key = "odiv;", _map[_key] = { k: _key, v: 10808 }, _key = "odot;", _map[_key] = { k: _key, v: 8857 }, _key = "odsold;", _map[_key] = { k: _key, v: 10684 }, _key = "oelig;", _map[_key] = { k: _key, v: 339 }, _key = "ofcir;", _map[_key] = { k: _key, v: 10687 }, _key = "ofr;", _map[_key] = { k: _key, v: 120108 }, _key = "ogon;", _map[_key] = { k: _key, v: 731 }, _key = "ograve;", _map[_key] = { k: _key, v: 242 }, _key = "ogt;", _map[_key] = { k: _key, v: 10689 }, _key = "ohbar;", _map[_key] = { k: _key, v: 10677 }, _key = "ohm;", _map[_key] = { k: _key, v: 937 }, _key = "oint;", _map[_key] = { k: _key, v: 8750 }, _key = "olarr;", _map[_key] = { k: _key, v: 8634 }, _key = "olcir;", _map[_key] = { k: _key, v: 10686 }, _key = "olcross;", _map[_key] = { k: _key, v: 10683 }, _key = "oline;", _map[_key] = { k: _key, v: 8254 }, _key = "olt;", _map[_key] = { k: _key, v: 10688 }, _key = "omacr;", _map[_key] = { k: _key, v: 333 }, _key = "omega;", _map[_key] = { k: _key, v: 969 }, _key = "omicron;", _map[_key] = { k: _key, v: 959 }, _key = "omid;", _map[_key] = { k: _key, v: 10678 }, _key = "ominus;", _map[_key] = { k: _key, v: 8854 }, _key = "oopf;", _map[_key] = { k: _key, v: 120160 }, _key = "opar;", _map[_key] = { k: _key, v: 10679 }, _key = "operp;", _map[_key] = { k: _key, v: 10681 }, _key = "oplus;", _map[_key] = { k: _key, v: 8853 }, _key = "or;", _map[_key] = { k: _key, v: 8744 }, _key = "orarr;", _map[_key] = { k: _key, v: 8635 }, _key = "ord;", _map[_key] = { k: _key, v: 10845 }, _key = "order;", _map[_key] = { k: _key, v: 8500 }, _key = "orderof;", _map[_key] = { k: _key, v: 8500 }, _key = "ordf;", _map[_key] = { k: _key, v: 170 }, _key = "ordm;", _map[_key] = { k: _key, v: 186 }, _key = "origof;", _map[_key] = { k: _key, v: 8886 }, _key = "oror;", _map[_key] = { k: _key, v: 10838 }, _key = "orslope;", _map[_key] = { k: _key, v: 10839 }, _key = "orv;", _map[_key] = { k: _key, v: 10843 }, _key = "oscr;", _map[_key] = { k: _key, v: 8500 }, _key = "oslash;", _map[_key] = { k: _key, v: 248 }, _key = "osol;", _map[_key] = { k: _key, v: 8856 }, _key = "otilde;", _map[_key] = { k: _key, v: 245 }, _key = "otimes;", _map[_key] = { k: _key, v: 8855 }, _key = "otimesas;", _map[_key] = { k: _key, v: 10806 }, _key = "ouml;", _map[_key] = { k: _key, v: 246 }, _key = "ovbar;", _map[_key] = { k: _key, v: 9021 }, _key = "par;", _map[_key] = { k: _key, v: 8741 }, _key = "para;", _map[_key] = { k: _key, v: 182 }, _key = "parallel;", _map[_key] = { k: _key, v: 8741 }, _key = "parsim;", _map[_key] = { k: _key, v: 10995 }, _key = "parsl;", _map[_key] = { k: _key, v: 11005 }, _key = "part;", _map[_key] = { k: _key, v: 8706 }, _key = "pcy;", _map[_key] = { k: _key, v: 1087 }, _key = "percnt;", _map[_key] = { k: _key, v: 37 }, _key = "period;", _map[_key] = { k: _key, v: 46 }, _key = "permil;", _map[_key] = { k: _key, v: 8240 }, _key = "perp;", _map[_key] = { k: _key, v: 8869 }, _key = "pertenk;", _map[_key] = { k: _key, v: 8241 }, _key = "pfr;", _map[_key] = { k: _key, v: 120109 }, _key = "phi;", _map[_key] = { k: _key, v: 966 }, _key = "phiv;", _map[_key] = { k: _key, v: 981 }, _key = "phmmat;", _map[_key] = { k: _key, v: 8499 }, _key = "phone;", _map[_key] = { k: _key, v: 9742 }, _key = "pi;", _map[_key] = { k: _key, v: 960 }, _key = "pitchfork;", _map[_key] = { k: _key, v: 8916 }, _key = "piv;", _map[_key] = { k: _key, v: 982 }, _key = "planck;", _map[_key] = { k: _key, v: 8463 }, _key = "planckh;", _map[_key] = { k: _key, v: 8462 }, _key = "plankv;", _map[_key] = { k: _key, v: 8463 }, _key = "plus;", _map[_key] = { k: _key, v: 43 }, _key = "plusacir;", _map[_key] = { k: _key, v: 10787 }, _key = "plusb;", _map[_key] = { k: _key, v: 8862 }, _key = "pluscir;", _map[_key] = { k: _key, v: 10786 }, _key = "plusdo;", _map[_key] = { k: _key, v: 8724 }, _key = "plusdu;", _map[_key] = { k: _key, v: 10789 }, _key = "pluse;", _map[_key] = { k: _key, v: 10866 }, _key = "plusmn;", _map[_key] = { k: _key, v: 177 }, _key = "plussim;", _map[_key] = { k: _key, v: 10790 }, _key = "plustwo;", _map[_key] = { k: _key, v: 10791 }, _key = "pm;", _map[_key] = { k: _key, v: 177 }, _key = "pointint;", _map[_key] = { k: _key, v: 10773 }, _key = "popf;", _map[_key] = { k: _key, v: 120161 }, _key = "pound;", _map[_key] = { k: _key, v: 163 }, _key = "pr;", _map[_key] = { k: _key, v: 8826 }, _key = "prE;", _map[_key] = { k: _key, v: 10931 }, _key = "prap;", _map[_key] = { k: _key, v: 10935 }, _key = "prcue;", _map[_key] = { k: _key, v: 8828 }, _key = "pre;", _map[_key] = { k: _key, v: 10927 }, _key = "prec;", _map[_key] = { k: _key, v: 8826 }, _key = "precapprox;", _map[_key] = { k: _key, v: 10935 }, _key = "preccurlyeq;", _map[_key] = { k: _key, v: 8828 }, _key = "preceq;", _map[_key] = { k: _key, v: 10927 }, _key = "precnapprox;", _map[_key] = { k: _key, v: 10937 }, _key = "precneqq;", _map[_key] = { k: _key, v: 10933 }, _key = "precnsim;", _map[_key] = { k: _key, v: 8936 }, _key = "precsim;", _map[_key] = { k: _key, v: 8830 }, _key = "prime;", _map[_key] = { k: _key, v: 8242 }, _key = "primes;", _map[_key] = { k: _key, v: 8473 }, _key = "prnE;", _map[_key] = { k: _key, v: 10933 }, _key = "prnap;", _map[_key] = { k: _key, v: 10937 }, _key = "prnsim;", _map[_key] = { k: _key, v: 8936 }, _key = "prod;", _map[_key] = { k: _key, v: 8719 }, _key = "profalar;", _map[_key] = { k: _key, v: 9006 }, _key = "profline;", _map[_key] = { k: _key, v: 8978 }, _key = "profsurf;", _map[_key] = { k: _key, v: 8979 }, _key = "prop;", _map[_key] = { k: _key, v: 8733 }, _key = "propto;", _map[_key] = { k: _key, v: 8733 }, _key = "prsim;", _map[_key] = { k: _key, v: 8830 }, _key = "prurel;", _map[_key] = { k: _key, v: 8880 }, _key = "pscr;", _map[_key] = { k: _key, v: 120005 }, _key = "psi;", _map[_key] = { k: _key, v: 968 }, _key = "puncsp;", _map[_key] = { k: _key, v: 8200 }, _key = "qfr;", _map[_key] = { k: _key, v: 120110 }, _key = "qint;", _map[_key] = { k: _key, v: 10764 }, _key = "qopf;", _map[_key] = { k: _key, v: 120162 }, _key = "qprime;", _map[_key] = { k: _key, v: 8279 }, _key = "qscr;", _map[_key] = { k: _key, v: 120006 }, _key = "quaternions;", _map[_key] = { k: _key, v: 8461 }, _key = "quatint;", _map[_key] = { k: _key, v: 10774 }, _key = "quest;", _map[_key] = { k: _key, v: 63 }, _key = "questeq;", _map[_key] = { k: _key, v: 8799 }, _key = "quot;", _map[_key] = { k: _key, v: 34 }, _key = "rAarr;", _map[_key] = { k: _key, v: 8667 }, _key = "rArr;", _map[_key] = { k: _key, v: 8658 }, _key = "rAtail;", _map[_key] = { k: _key, v: 10524 }, _key = "rBarr;", _map[_key] = { k: _key, v: 10511 }, _key = "rHar;", _map[_key] = { k: _key, v: 10596 }, _key = "racute;", _map[_key] = { k: _key, v: 341 }, _key = "radic;", _map[_key] = { k: _key, v: 8730 }, _key = "raemptyv;", _map[_key] = { k: _key, v: 10675 }, _key = "rang;", _map[_key] = { k: _key, v: 10217 }, _key = "rangd;", _map[_key] = { k: _key, v: 10642 }, _key = "range;", _map[_key] = { k: _key, v: 10661 }, _key = "rangle;", _map[_key] = { k: _key, v: 10217 }, _key = "raquo;", _map[_key] = { k: _key, v: 187 }, _key = "rarr;", _map[_key] = { k: _key, v: 8594 }, _key = "rarrap;", _map[_key] = { k: _key, v: 10613 }, _key = "rarrb;", _map[_key] = { k: _key, v: 8677 }, _key = "rarrbfs;", _map[_key] = { k: _key, v: 10528 }, _key = "rarrc;", _map[_key] = { k: _key, v: 10547 }, _key = "rarrfs;", _map[_key] = { k: _key, v: 10526 }, _key = "rarrhk;", _map[_key] = { k: _key, v: 8618 }, _key = "rarrlp;", _map[_key] = { k: _key, v: 8620 }, _key = "rarrpl;", _map[_key] = { k: _key, v: 10565 }, _key = "rarrsim;", _map[_key] = { k: _key, v: 10612 }, _key = "rarrtl;", _map[_key] = { k: _key, v: 8611 }, _key = "rarrw;", _map[_key] = { k: _key, v: 8605 }, _key = "ratail;", _map[_key] = { k: _key, v: 10522 }, _key = "ratio;", _map[_key] = { k: _key, v: 8758 }, _key = "rationals;", _map[_key] = { k: _key, v: 8474 }, _key = "rbarr;", _map[_key] = { k: _key, v: 10509 }, _key = "rbbrk;", _map[_key] = { k: _key, v: 10099 }, _key = "rbrace;", _map[_key] = { k: _key, v: 125 }, _key = "rbrack;", _map[_key] = { k: _key, v: 93 }, _key = "rbrke;", _map[_key] = { k: _key, v: 10636 }, _key = "rbrksld;", _map[_key] = { k: _key, v: 10638 }, _key = "rbrkslu;", _map[_key] = { k: _key, v: 10640 }, _key = "rcaron;", _map[_key] = { k: _key, v: 345 }, _key = "rcedil;", _map[_key] = { k: _key, v: 343 }, _key = "rceil;", _map[_key] = { k: _key, v: 8969 }, _key = "rcub;", _map[_key] = { k: _key, v: 125 }, _key = "rcy;", _map[_key] = { k: _key, v: 1088 }, _key = "rdca;", _map[_key] = { k: _key, v: 10551 }, _key = "rdldhar;", _map[_key] = { k: _key, v: 10601 }, _key = "rdquo;", _map[_key] = { k: _key, v: 8221 }, _key = "rdquor;", _map[_key] = { k: _key, v: 8221 }, _key = "rdsh;", _map[_key] = { k: _key, v: 8627 }, _key = "real;", _map[_key] = { k: _key, v: 8476 }, _key = "realine;", _map[_key] = { k: _key, v: 8475 }, _key = "realpart;", _map[_key] = { k: _key, v: 8476 }, _key = "reals;", _map[_key] = { k: _key, v: 8477 }, _key = "rect;", _map[_key] = { k: _key, v: 9645 }, _key = "reg;", _map[_key] = { k: _key, v: 174 }, _key = "rfisht;", _map[_key] = { k: _key, v: 10621 }, _key = "rfloor;", _map[_key] = { k: _key, v: 8971 }, _key = "rfr;", _map[_key] = { k: _key, v: 120111 }, _key = "rhard;", _map[_key] = { k: _key, v: 8641 }, _key = "rharu;", _map[_key] = { k: _key, v: 8640 }, _key = "rharul;", _map[_key] = { k: _key, v: 10604 }, _key = "rho;", _map[_key] = { k: _key, v: 961 }, _key = "rhov;", _map[_key] = { k: _key, v: 1009 }, _key = "rightarrow;", _map[_key] = { k: _key, v: 8594 }, _key = "rightarrowtail;", _map[_key] = { k: _key, v: 8611 }, _key = "rightharpoondown;", _map[_key] = { k: _key, v: 8641 }, _key = "rightharpoonup;", _map[_key] = { k: _key, v: 8640 }, _key = "rightleftarrows;", _map[_key] = { k: _key, v: 8644 }, _key = "rightleftharpoons;", _map[_key] = { k: _key, v: 8652 }, _key = "rightrightarrows;", _map[_key] = { k: _key, v: 8649 }, _key = "rightsquigarrow;", _map[_key] = { k: _key, v: 8605 }, _key = "rightthreetimes;", _map[_key] = { k: _key, v: 8908 }, _key = "ring;", _map[_key] = { k: _key, v: 730 }, _key = "risingdotseq;", _map[_key] = { k: _key, v: 8787 }, _key = "rlarr;", _map[_key] = { k: _key, v: 8644 }, _key = "rlhar;", _map[_key] = { k: _key, v: 8652 }, _key = "rlm;", _map[_key] = { k: _key, v: 8207 }, _key = "rmoust;", _map[_key] = { k: _key, v: 9137 }, _key = "rmoustache;", _map[_key] = { k: _key, v: 9137 }, _key = "rnmid;", _map[_key] = { k: _key, v: 10990 }, _key = "roang;", _map[_key] = { k: _key, v: 10221 }, _key = "roarr;", _map[_key] = { k: _key, v: 8702 }, _key = "robrk;", _map[_key] = { k: _key, v: 10215 }, _key = "ropar;", _map[_key] = { k: _key, v: 10630 }, _key = "ropf;", _map[_key] = { k: _key, v: 120163 }, _key = "roplus;", _map[_key] = { k: _key, v: 10798 }, _key = "rotimes;", _map[_key] = { k: _key, v: 10805 }, _key = "rpar;", _map[_key] = { k: _key, v: 41 }, _key = "rpargt;", _map[_key] = { k: _key, v: 10644 }, _key = "rppolint;", _map[_key] = { k: _key, v: 10770 }, _key = "rrarr;", _map[_key] = { k: _key, v: 8649 }, _key = "rsaquo;", _map[_key] = { k: _key, v: 8250 }, _key = "rscr;", _map[_key] = { k: _key, v: 120007 }, _key = "rsh;", _map[_key] = { k: _key, v: 8625 }, _key = "rsqb;", _map[_key] = { k: _key, v: 93 }, _key = "rsquo;", _map[_key] = { k: _key, v: 8217 }, _key = "rsquor;", _map[_key] = { k: _key, v: 8217 }, _key = "rthree;", _map[_key] = { k: _key, v: 8908 }, _key = "rtimes;", _map[_key] = { k: _key, v: 8906 }, _key = "rtri;", _map[_key] = { k: _key, v: 9657 }, _key = "rtrie;", _map[_key] = { k: _key, v: 8885 }, _key = "rtrif;", _map[_key] = { k: _key, v: 9656 }, _key = "rtriltri;", _map[_key] = { k: _key, v: 10702 }, _key = "ruluhar;", _map[_key] = { k: _key, v: 10600 }, _key = "rx;", _map[_key] = { k: _key, v: 8478 }, _key = "sacute;", _map[_key] = { k: _key, v: 347 }, _key = "sbquo;", _map[_key] = { k: _key, v: 8218 }, _key = "sc;", _map[_key] = { k: _key, v: 8827 }, _key = "scE;", _map[_key] = { k: _key, v: 10932 }, _key = "scap;", _map[_key] = { k: _key, v: 10936 }, _key = "scaron;", _map[_key] = { k: _key, v: 353 }, _key = "sccue;", _map[_key] = { k: _key, v: 8829 }, _key = "sce;", _map[_key] = { k: _key, v: 10928 }, _key = "scedil;", _map[_key] = { k: _key, v: 351 }, _key = "scirc;", _map[_key] = { k: _key, v: 349 }, _key = "scnE;", _map[_key] = { k: _key, v: 10934 }, _key = "scnap;", _map[_key] = { k: _key, v: 10938 }, _key = "scnsim;", _map[_key] = { k: _key, v: 8937 }, _key = "scpolint;", _map[_key] = { k: _key, v: 10771 }, _key = "scsim;", _map[_key] = { k: _key, v: 8831 }, _key = "scy;", _map[_key] = { k: _key, v: 1089 }, _key = "sdot;", _map[_key] = { k: _key, v: 8901 }, _key = "sdotb;", _map[_key] = { k: _key, v: 8865 }, _key = "sdote;", _map[_key] = { k: _key, v: 10854 }, _key = "seArr;", _map[_key] = { k: _key, v: 8664 }, _key = "searhk;", _map[_key] = { k: _key, v: 10533 }, _key = "searr;", _map[_key] = { k: _key, v: 8600 }, _key = "searrow;", _map[_key] = { k: _key, v: 8600 }, _key = "sect;", _map[_key] = { k: _key, v: 167 }, _key = "semi;", _map[_key] = { k: _key, v: 59 }, _key = "seswar;", _map[_key] = { k: _key, v: 10537 }, _key = "setminus;", _map[_key] = { k: _key, v: 8726 }, _key = "setmn;", _map[_key] = { k: _key, v: 8726 }, _key = "sext;", _map[_key] = { k: _key, v: 10038 }, _key = "sfr;", _map[_key] = { k: _key, v: 120112 }, _key = "sfrown;", _map[_key] = { k: _key, v: 8994 }, _key = "sharp;", _map[_key] = { k: _key, v: 9839 }, _key = "shchcy;", _map[_key] = { k: _key, v: 1097 }, _key = "shcy;", _map[_key] = { k: _key, v: 1096 }, _key = "shortmid;", _map[_key] = { k: _key, v: 8739 }, _key = "shortparallel;", _map[_key] = { k: _key, v: 8741 }, _key = "shy;", _map[_key] = { k: _key, v: 173 }, _key = "sigma;", _map[_key] = { k: _key, v: 963 }, _key = "sigmaf;", _map[_key] = { k: _key, v: 962 }, _key = "sigmav;", _map[_key] = { k: _key, v: 962 }, _key = "sim;", _map[_key] = { k: _key, v: 8764 }, _key = "simdot;", _map[_key] = { k: _key, v: 10858 }, _key = "sime;", _map[_key] = { k: _key, v: 8771 }, _key = "simeq;", _map[_key] = { k: _key, v: 8771 }, _key = "simg;", _map[_key] = { k: _key, v: 10910 }, _key = "simgE;", _map[_key] = { k: _key, v: 10912 }, _key = "siml;", _map[_key] = { k: _key, v: 10909 }, _key = "simlE;", _map[_key] = { k: _key, v: 10911 }, _key = "simne;", _map[_key] = { k: _key, v: 8774 }, _key = "simplus;", _map[_key] = { k: _key, v: 10788 }, _key = "simrarr;", _map[_key] = { k: _key, v: 10610 }, _key = "slarr;", _map[_key] = { k: _key, v: 8592 }, _key = "smallsetminus;", _map[_key] = { k: _key, v: 8726 }, _key = "smashp;", _map[_key] = { k: _key, v: 10803 }, _key = "smeparsl;", _map[_key] = { k: _key, v: 10724 }, _key = "smid;", _map[_key] = { k: _key, v: 8739 }, _key = "smile;", _map[_key] = { k: _key, v: 8995 }, _key = "smt;", _map[_key] = { k: _key, v: 10922 }, _key = "smte;", _map[_key] = { k: _key, v: 10924 }, _key = "softcy;", _map[_key] = { k: _key, v: 1100 }, _key = "sol;", _map[_key] = { k: _key, v: 47 }, _key = "solb;", _map[_key] = { k: _key, v: 10692 }, _key = "solbar;", _map[_key] = { k: _key, v: 9023 }, _key = "sopf;", _map[_key] = { k: _key, v: 120164 }, _key = "spades;", _map[_key] = { k: _key, v: 9824 }, _key = "spadesuit;", _map[_key] = { k: _key, v: 9824 }, _key = "spar;", _map[_key] = { k: _key, v: 8741 }, _key = "sqcap;", _map[_key] = { k: _key, v: 8851 }, _key = "sqcup;", _map[_key] = { k: _key, v: 8852 }, _key = "sqsub;", _map[_key] = { k: _key, v: 8847 }, _key = "sqsube;", _map[_key] = { k: _key, v: 8849 }, _key = "sqsubset;", _map[_key] = { k: _key, v: 8847 }, _key = "sqsubseteq;", _map[_key] = { k: _key, v: 8849 }, _key = "sqsup;", _map[_key] = { k: _key, v: 8848 }, _key = "sqsupe;", _map[_key] = { k: _key, v: 8850 }, _key = "sqsupset;", _map[_key] = { k: _key, v: 8848 }, _key = "sqsupseteq;", _map[_key] = { k: _key, v: 8850 }, _key = "squ;", _map[_key] = { k: _key, v: 9633 }, _key = "square;", _map[_key] = { k: _key, v: 9633 }, _key = "squarf;", _map[_key] = { k: _key, v: 9642 }, _key = "squf;", _map[_key] = { k: _key, v: 9642 }, _key = "srarr;", _map[_key] = { k: _key, v: 8594 }, _key = "sscr;", _map[_key] = { k: _key, v: 120008 }, _key = "ssetmn;", _map[_key] = { k: _key, v: 8726 }, _key = "ssmile;", _map[_key] = { k: _key, v: 8995 }, _key = "sstarf;", _map[_key] = { k: _key, v: 8902 }, _key = "star;", _map[_key] = { k: _key, v: 9734 }, _key = "starf;", _map[_key] = { k: _key, v: 9733 }, _key = "straightepsilon;", _map[_key] = { k: _key, v: 1013 }, _key = "straightphi;", _map[_key] = { k: _key, v: 981 }, _key = "strns;", _map[_key] = { k: _key, v: 175 }, _key = "sub;", _map[_key] = { k: _key, v: 8834 }, _key = "subE;", _map[_key] = { k: _key, v: 10949 }, _key = "subdot;", _map[_key] = { k: _key, v: 10941 }, _key = "sube;", _map[_key] = { k: _key, v: 8838 }, _key = "subedot;", _map[_key] = { k: _key, v: 10947 }, _key = "submult;", _map[_key] = { k: _key, v: 10945 }, _key = "subnE;", _map[_key] = { k: _key, v: 10955 }, _key = "subne;", _map[_key] = { k: _key, v: 8842 }, _key = "subplus;", _map[_key] = { k: _key, v: 10943 }, _key = "subrarr;", _map[_key] = { k: _key, v: 10617 }, _key = "subset;", _map[_key] = { k: _key, v: 8834 }, _key = "subseteq;", _map[_key] = { k: _key, v: 8838 }, _key = "subseteqq;", _map[_key] = { k: _key, v: 10949 }, _key = "subsetneq;", _map[_key] = { k: _key, v: 8842 }, _key = "subsetneqq;", _map[_key] = { k: _key, v: 10955 }, _key = "subsim;", _map[_key] = { k: _key, v: 10951 }, _key = "subsub;", _map[_key] = { k: _key, v: 10965 }, _key = "subsup;", _map[_key] = { k: _key, v: 10963 }, _key = "succ;", _map[_key] = { k: _key, v: 8827 }, _key = "succapprox;", _map[_key] = { k: _key, v: 10936 }, _key = "succcurlyeq;", _map[_key] = { k: _key, v: 8829 }, _key = "succeq;", _map[_key] = { k: _key, v: 10928 }, _key = "succnapprox;", _map[_key] = { k: _key, v: 10938 }, _key = "succneqq;", _map[_key] = { k: _key, v: 10934 }, _key = "succnsim;", _map[_key] = { k: _key, v: 8937 }, _key = "succsim;", _map[_key] = { k: _key, v: 8831 }, _key = "sum;", _map[_key] = { k: _key, v: 8721 }, _key = "sung;", _map[_key] = { k: _key, v: 9834 }, _key = "sup;", _map[_key] = { k: _key, v: 8835 }, _key = "sup1;", _map[_key] = { k: _key, v: 185 }, _key = "sup2;", _map[_key] = { k: _key, v: 178 }, _key = "sup3;", _map[_key] = { k: _key, v: 179 }, _key = "supE;", _map[_key] = { k: _key, v: 10950 }, _key = "supdot;", _map[_key] = { k: _key, v: 10942 }, _key = "supdsub;", _map[_key] = { k: _key, v: 10968 }, _key = "supe;", _map[_key] = { k: _key, v: 8839 }, _key = "supedot;", _map[_key] = { k: _key, v: 10948 }, _key = "suphsol;", _map[_key] = { k: _key, v: 10185 }, _key = "suphsub;", _map[_key] = { k: _key, v: 10967 }, _key = "suplarr;", _map[_key] = { k: _key, v: 10619 }, _key = "supmult;", _map[_key] = { k: _key, v: 10946 }, _key = "supnE;", _map[_key] = { k: _key, v: 10956 }, _key = "supne;", _map[_key] = { k: _key, v: 8843 }, _key = "supplus;", _map[_key] = { k: _key, v: 10944 }, _key = "supset;", _map[_key] = { k: _key, v: 8835 }, _key = "supseteq;", _map[_key] = { k: _key, v: 8839 }, _key = "supseteqq;", _map[_key] = { k: _key, v: 10950 }, _key = "supsetneq;", _map[_key] = { k: _key, v: 8843 }, _key = "supsetneqq;", _map[_key] = { k: _key, v: 10956 }, _key = "supsim;", _map[_key] = { k: _key, v: 10952 }, _key = "supsub;", _map[_key] = { k: _key, v: 10964 }, _key = "supsup;", _map[_key] = { k: _key, v: 10966 }, _key = "swArr;", _map[_key] = { k: _key, v: 8665 }, _key = "swarhk;", _map[_key] = { k: _key, v: 10534 }, _key = "swarr;", _map[_key] = { k: _key, v: 8601 }, _key = "swarrow;", _map[_key] = { k: _key, v: 8601 }, _key = "swnwar;", _map[_key] = { k: _key, v: 10538 }, _key = "szlig;", _map[_key] = { k: _key, v: 223 }, _key = "target;", _map[_key] = { k: _key, v: 8982 }, _key = "tau;", _map[_key] = { k: _key, v: 964 }, _key = "tbrk;", _map[_key] = { k: _key, v: 9140 }, _key = "tcaron;", _map[_key] = { k: _key, v: 357 }, _key = "tcedil;", _map[_key] = { k: _key, v: 355 }, _key = "tcy;", _map[_key] = { k: _key, v: 1090 }, _key = "tdot;", _map[_key] = { k: _key, v: 8411 }, _key = "telrec;", _map[_key] = { k: _key, v: 8981 }, _key = "tfr;", _map[_key] = { k: _key, v: 120113 }, _key = "there4;", _map[_key] = { k: _key, v: 8756 }, _key = "therefore;", _map[_key] = { k: _key, v: 8756 }, _key = "theta;", _map[_key] = { k: _key, v: 952 }, _key = "thetasym;", _map[_key] = { k: _key, v: 977 }, _key = "thetav;", _map[_key] = { k: _key, v: 977 }, _key = "thickapprox;", _map[_key] = { k: _key, v: 8776 }, _key = "thicksim;", _map[_key] = { k: _key, v: 8764 }, _key = "thinsp;", _map[_key] = { k: _key, v: 8201 }, _key = "thkap;", _map[_key] = { k: _key, v: 8776 }, _key = "thksim;", _map[_key] = { k: _key, v: 8764 }, _key = "thorn;", _map[_key] = { k: _key, v: 254 }, _key = "tilde;", _map[_key] = { k: _key, v: 732 }, _key = "times;", _map[_key] = { k: _key, v: 215 }, _key = "timesb;", _map[_key] = { k: _key, v: 8864 }, _key = "timesbar;", _map[_key] = { k: _key, v: 10801 }, _key = "timesd;", _map[_key] = { k: _key, v: 10800 }, _key = "tint;", _map[_key] = { k: _key, v: 8749 }, _key = "toea;", _map[_key] = { k: _key, v: 10536 }, _key = "top;", _map[_key] = { k: _key, v: 8868 }, _key = "topbot;", _map[_key] = { k: _key, v: 9014 }, _key = "topcir;", _map[_key] = { k: _key, v: 10993 }, _key = "topf;", _map[_key] = { k: _key, v: 120165 }, _key = "topfork;", _map[_key] = { k: _key, v: 10970 }, _key = "tosa;", _map[_key] = { k: _key, v: 10537 }, _key = "tprime;", _map[_key] = { k: _key, v: 8244 }, _key = "trade;", _map[_key] = { k: _key, v: 8482 }, _key = "triangle;", _map[_key] = { k: _key, v: 9653 }, _key = "triangledown;", _map[_key] = { k: _key, v: 9663 }, _key = "triangleleft;", _map[_key] = { k: _key, v: 9667 }, _key = "trianglelefteq;", _map[_key] = { k: _key, v: 8884 }, _key = "triangleq;", _map[_key] = { k: _key, v: 8796 }, _key = "triangleright;", _map[_key] = { k: _key, v: 9657 }, _key = "trianglerighteq;", _map[_key] = { k: _key, v: 8885 }, _key = "tridot;", _map[_key] = { k: _key, v: 9708 }, _key = "trie;", _map[_key] = { k: _key, v: 8796 }, _key = "triminus;", _map[_key] = { k: _key, v: 10810 }, _key = "triplus;", _map[_key] = { k: _key, v: 10809 }, _key = "trisb;", _map[_key] = { k: _key, v: 10701 }, _key = "tritime;", _map[_key] = { k: _key, v: 10811 }, _key = "trpezium;", _map[_key] = { k: _key, v: 9186 }, _key = "tscr;", _map[_key] = { k: _key, v: 120009 }, _key = "tscy;", _map[_key] = { k: _key, v: 1094 }, _key = "tshcy;", _map[_key] = { k: _key, v: 1115 }, _key = "tstrok;", _map[_key] = { k: _key, v: 359 }, _key = "twixt;", _map[_key] = { k: _key, v: 8812 }, _key = "twoheadleftarrow;", _map[_key] = { k: _key, v: 8606 }, _key = "twoheadrightarrow;", _map[_key] = { k: _key, v: 8608 }, _key = "uArr;", _map[_key] = { k: _key, v: 8657 }, _key = "uHar;", _map[_key] = { k: _key, v: 10595 }, _key = "uacute;", _map[_key] = { k: _key, v: 250 }, _key = "uarr;", _map[_key] = { k: _key, v: 8593 }, _key = "ubrcy;", _map[_key] = { k: _key, v: 1118 }, _key = "ubreve;", _map[_key] = { k: _key, v: 365 }, _key = "ucirc;", _map[_key] = { k: _key, v: 251 }, _key = "ucy;", _map[_key] = { k: _key, v: 1091 }, _key = "udarr;", _map[_key] = { k: _key, v: 8645 }, _key = "udblac;", _map[_key] = { k: _key, v: 369 }, _key = "udhar;", _map[_key] = { k: _key, v: 10606 }, _key = "ufisht;", _map[_key] = { k: _key, v: 10622 }, _key = "ufr;", _map[_key] = { k: _key, v: 120114 }, _key = "ugrave;", _map[_key] = { k: _key, v: 249 }, _key = "uharl;", _map[_key] = { k: _key, v: 8639 }, _key = "uharr;", _map[_key] = { k: _key, v: 8638 }, _key = "uhblk;", _map[_key] = { k: _key, v: 9600 }, _key = "ulcorn;", _map[_key] = { k: _key, v: 8988 }, _key = "ulcorner;", _map[_key] = { k: _key, v: 8988 }, _key = "ulcrop;", _map[_key] = { k: _key, v: 8975 }, _key = "ultri;", _map[_key] = { k: _key, v: 9720 }, _key = "umacr;", _map[_key] = { k: _key, v: 363 }, _key = "uml;", _map[_key] = { k: _key, v: 168 }, _key = "uogon;", _map[_key] = { k: _key, v: 371 }, _key = "uopf;", _map[_key] = { k: _key, v: 120166 }, _key = "uparrow;", _map[_key] = { k: _key, v: 8593 }, _key = "updownarrow;", _map[_key] = { k: _key, v: 8597 }, _key = "upharpoonleft;", _map[_key] = { k: _key, v: 8639 }, _key = "upharpoonright;", _map[_key] = { k: _key, v: 8638 }, _key = "uplus;", _map[_key] = { k: _key, v: 8846 }, _key = "upsi;", _map[_key] = { k: _key, v: 965 }, _key = "upsih;", _map[_key] = { k: _key, v: 978 }, _key = "upsilon;", _map[_key] = { k: _key, v: 965 }, _key = "upuparrows;", _map[_key] = { k: _key, v: 8648 }, _key = "urcorn;", _map[_key] = { k: _key, v: 8989 }, _key = "urcorner;", _map[_key] = { k: _key, v: 8989 }, _key = "urcrop;", _map[_key] = { k: _key, v: 8974 }, _key = "uring;", _map[_key] = { k: _key, v: 367 }, _key = "urtri;", _map[_key] = { k: _key, v: 9721 }, _key = "uscr;", _map[_key] = { k: _key, v: 120010 }, _key = "utdot;", _map[_key] = { k: _key, v: 8944 }, _key = "utilde;", _map[_key] = { k: _key, v: 361 }, _key = "utri;", _map[_key] = { k: _key, v: 9653 }, _key = "utrif;", _map[_key] = { k: _key, v: 9652 }, _key = "uuarr;", _map[_key] = { k: _key, v: 8648 }, _key = "uuml;", _map[_key] = { k: _key, v: 252 }, _key = "uwangle;", _map[_key] = { k: _key, v: 10663 }, _key = "vArr;", _map[_key] = { k: _key, v: 8661 }, _key = "vBar;", _map[_key] = { k: _key, v: 10984 }, _key = "vBarv;", _map[_key] = { k: _key, v: 10985 }, _key = "vDash;", _map[_key] = { k: _key, v: 8872 }, _key = "vangrt;", _map[_key] = { k: _key, v: 10652 }, _key = "varepsilon;", _map[_key] = { k: _key, v: 1013 }, _key = "varkappa;", _map[_key] = { k: _key, v: 1008 }, _key = "varnothing;", _map[_key] = { k: _key, v: 8709 }, _key = "varphi;", _map[_key] = { k: _key, v: 981 }, _key = "varpi;", _map[_key] = { k: _key, v: 982 }, _key = "varpropto;", _map[_key] = { k: _key, v: 8733 }, _key = "varr;", _map[_key] = { k: _key, v: 8597 }, _key = "varrho;", _map[_key] = { k: _key, v: 1009 }, _key = "varsigma;", _map[_key] = { k: _key, v: 962 }, _key = "vartheta;", _map[_key] = { k: _key, v: 977 }, _key = "vartriangleleft;", _map[_key] = { k: _key, v: 8882 }, _key = "vartriangleright;", _map[_key] = { k: _key, v: 8883 }, _key = "vcy;", _map[_key] = { k: _key, v: 1074 }, _key = "vdash;", _map[_key] = { k: _key, v: 8866 }, _key = "vee;", _map[_key] = { k: _key, v: 8744 }, _key = "veebar;", _map[_key] = { k: _key, v: 8891 }, _key = "veeeq;", _map[_key] = { k: _key, v: 8794 }, _key = "vellip;", _map[_key] = { k: _key, v: 8942 }, _key = "verbar;", _map[_key] = { k: _key, v: 124 }, _key = "vert;", _map[_key] = { k: _key, v: 124 }, _key = "vfr;", _map[_key] = { k: _key, v: 120115 }, _key = "vltri;", _map[_key] = { k: _key, v: 8882 }, _key = "vopf;", _map[_key] = { k: _key, v: 120167 }, _key = "vprop;", _map[_key] = { k: _key, v: 8733 }, _key = "vrtri;", _map[_key] = { k: _key, v: 8883 }, _key = "vscr;", _map[_key] = { k: _key, v: 120011 }, _key = "vzigzag;", _map[_key] = { k: _key, v: 10650 }, _key = "wcirc;", _map[_key] = { k: _key, v: 373 }, _key = "wedbar;", _map[_key] = { k: _key, v: 10847 }, _key = "wedge;", _map[_key] = { k: _key, v: 8743 }, _key = "wedgeq;", _map[_key] = { k: _key, v: 8793 }, _key = "weierp;", _map[_key] = { k: _key, v: 8472 }, _key = "wfr;", _map[_key] = { k: _key, v: 120116 }, _key = "wopf;", _map[_key] = { k: _key, v: 120168 }, _key = "wp;", _map[_key] = { k: _key, v: 8472 }, _key = "wr;", _map[_key] = { k: _key, v: 8768 }, _key = "wreath;", _map[_key] = { k: _key, v: 8768 }, _key = "wscr;", _map[_key] = { k: _key, v: 120012 }, _key = "xcap;", _map[_key] = { k: _key, v: 8898 }, _key = "xcirc;", _map[_key] = { k: _key, v: 9711 }, _key = "xcup;", _map[_key] = { k: _key, v: 8899 }, _key = "xdtri;", _map[_key] = { k: _key, v: 9661 }, _key = "xfr;", _map[_key] = { k: _key, v: 120117 }, _key = "xhArr;", _map[_key] = { k: _key, v: 10234 }, _key = "xharr;", _map[_key] = { k: _key, v: 10231 }, _key = "xi;", _map[_key] = { k: _key, v: 958 }, _key = "xlArr;", _map[_key] = { k: _key, v: 10232 }, _key = "xlarr;", _map[_key] = { k: _key, v: 10229 }, _key = "xmap;", _map[_key] = { k: _key, v: 10236 }, _key = "xnis;", _map[_key] = { k: _key, v: 8955 }, _key = "xodot;", _map[_key] = { k: _key, v: 10752 }, _key = "xopf;", _map[_key] = { k: _key, v: 120169 }, _key = "xoplus;", _map[_key] = { k: _key, v: 10753 }, _key = "xotime;", _map[_key] = { k: _key, v: 10754 }, _key = "xrArr;", _map[_key] = { k: _key, v: 10233 }, _key = "xrarr;", _map[_key] = { k: _key, v: 10230 }, _key = "xscr;", _map[_key] = { k: _key, v: 120013 }, _key = "xsqcup;", _map[_key] = { k: _key, v: 10758 }, _key = "xuplus;", _map[_key] = { k: _key, v: 10756 }, _key = "xutri;", _map[_key] = { k: _key, v: 9651 }, _key = "xvee;", _map[_key] = { k: _key, v: 8897 }, _key = "xwedge;", _map[_key] = { k: _key, v: 8896 }, _key = "yacute;", _map[_key] = { k: _key, v: 253 }, _key = "yacy;", _map[_key] = { k: _key, v: 1103 }, _key = "ycirc;", _map[_key] = { k: _key, v: 375 }, _key = "ycy;", _map[_key] = { k: _key, v: 1099 }, _key = "yen;", _map[_key] = { k: _key, v: 165 }, _key = "yfr;", _map[_key] = { k: _key, v: 120118 }, _key = "yicy;", _map[_key] = { k: _key, v: 1111 }, _key = "yopf;", _map[_key] = { k: _key, v: 120170 }, _key = "yscr;", _map[_key] = { k: _key, v: 120014 }, _key = "yucy;", _map[_key] = { k: _key, v: 1102 }, _key = "yuml;", _map[_key] = { k: _key, v: 255 }, _key = "zacute;", _map[_key] = { k: _key, v: 378 }, _key = "zcaron;", _map[_key] = { k: _key, v: 382 }, _key = "zcy;", _map[_key] = { k: _key, v: 1079 }, _key = "zdot;", _map[_key] = { k: _key, v: 380 }, _key = "zeetrf;", _map[_key] = { k: _key, v: 8488 }, _key = "zeta;", _map[_key] = { k: _key, v: 950 }, _key = "zfr;", _map[_key] = { k: _key, v: 120119 }, _key = "zhcy;", _map[_key] = { k: _key, v: 1078 }, _key = "zigrarr;", _map[_key] = { k: _key, v: 8669 }, _key = "zopf;", _map[_key] = { k: _key, v: 120171 }, _key = "zscr;", _map[_key] = { k: _key, v: 120015 }, _key = "zwj;", _map[_key] = { k: _key, v: 8205 }, _key = "zwnj;", _map[_key] = { k: _key, v: 8204 }, _key = "AElig", _map[_key] = { k: _key, v: 198 }, _key = "AMP", _map[_key] = { k: _key, v: 38 }, _key = "Aacute", _map[_key] = { k: _key, v: 193 }, _key = "Acirc", _map[_key] = { k: _key, v: 194 }, _key = "Agrave", _map[_key] = { k: _key, v: 192 }, _key = "Aring", _map[_key] = { k: _key, v: 197 }, _key = "Atilde", _map[_key] = { k: _key, v: 195 }, _key = "Auml", _map[_key] = { k: _key, v: 196 }, _key = "COPY", _map[_key] = { k: _key, v: 169 }, _key = "Ccedil", _map[_key] = { k: _key, v: 199 }, _key = "ETH", _map[_key] = { k: _key, v: 208 }, _key = "Eacute", _map[_key] = { k: _key, v: 201 }, _key = "Ecirc", _map[_key] = { k: _key, v: 202 }, _key = "Egrave", _map[_key] = { k: _key, v: 200 }, _key = "Euml", _map[_key] = { k: _key, v: 203 }, _key = "GT", _map[_key] = { k: _key, v: 62 }, _key = "Iacute", _map[_key] = { k: _key, v: 205 }, _key = "Icirc", _map[_key] = { k: _key, v: 206 }, _key = "Igrave", _map[_key] = { k: _key, v: 204 }, _key = "Iuml", _map[_key] = { k: _key, v: 207 }, _key = "LT", _map[_key] = { k: _key, v: 60 }, _key = "Ntilde", _map[_key] = { k: _key, v: 209 }, _key = "Oacute", _map[_key] = { k: _key, v: 211 }, _key = "Ocirc", _map[_key] = { k: _key, v: 212 }, _key = "Ograve", _map[_key] = { k: _key, v: 210 }, _key = "Oslash", _map[_key] = { k: _key, v: 216 }, _key = "Otilde", _map[_key] = { k: _key, v: 213 }, _key = "Ouml", _map[_key] = { k: _key, v: 214 }, _key = "QUOT", _map[_key] = { k: _key, v: 34 }, _key = "REG", _map[_key] = { k: _key, v: 174 }, _key = "THORN", _map[_key] = { k: _key, v: 222 }, _key = "Uacute", _map[_key] = { k: _key, v: 218 }, _key = "Ucirc", _map[_key] = { k: _key, v: 219 }, _key = "Ugrave", _map[_key] = { k: _key, v: 217 }, _key = "Uuml", _map[_key] = { k: _key, v: 220 }, _key = "Yacute", _map[_key] = { k: _key, v: 221 }, _key = "aacute", _map[_key] = { k: _key, v: 225 }, _key = "acirc", _map[_key] = { k: _key, v: 226 }, _key = "acute", _map[_key] = { k: _key, v: 180 }, _key = "aelig", _map[_key] = { k: _key, v: 230 }, _key = "agrave", _map[_key] = { k: _key, v: 224 }, _key = "amp", _map[_key] = { k: _key, v: 38 }, _key = "aring", _map[_key] = { k: _key, v: 229 }, _key = "atilde", _map[_key] = { k: _key, v: 227 }, _key = "auml", _map[_key] = { k: _key, v: 228 }, _key = "brvbar", _map[_key] = { k: _key, v: 166 }, _key = "ccedil", _map[_key] = { k: _key, v: 231 }, _key = "cedil", _map[_key] = { k: _key, v: 184 }, _key = "cent", _map[_key] = { k: _key, v: 162 }, _key = "copy", _map[_key] = { k: _key, v: 169 }, _key = "curren", _map[_key] = { k: _key, v: 164 }, _key = "deg", _map[_key] = { k: _key, v: 176 }, _key = "divide", _map[_key] = { k: _key, v: 247 }, _key = "eacute", _map[_key] = { k: _key, v: 233 }, _key = "ecirc", _map[_key] = { k: _key, v: 234 }, _key = "egrave", _map[_key] = { k: _key, v: 232 }, _key = "eth", _map[_key] = { k: _key, v: 240 }, _key = "euml", _map[_key] = { k: _key, v: 235 }, _key = "frac12", _map[_key] = { k: _key, v: 189 }, _key = "frac14", _map[_key] = { k: _key, v: 188 }, _key = "frac34", _map[_key] = { k: _key, v: 190 }, _key = "gt", _map[_key] = { k: _key, v: 62 }, _key = "iacute", _map[_key] = { k: _key, v: 237 }, _key = "icirc", _map[_key] = { k: _key, v: 238 }, _key = "iexcl", _map[_key] = { k: _key, v: 161 }, _key = "igrave", _map[_key] = { k: _key, v: 236 }, _key = "iquest", _map[_key] = { k: _key, v: 191 }, _key = "iuml", _map[_key] = { k: _key, v: 239 }, _key = "laquo", _map[_key] = { k: _key, v: 171 }, _key = "lt", _map[_key] = { k: _key, v: 60 }, _key = "macr", _map[_key] = { k: _key, v: 175 }, _key = "micro", _map[_key] = { k: _key, v: 181 }, _key = "middot", _map[_key] = { k: _key, v: 183 }, _key = "nbsp", _map[_key] = { k: _key, v: 160 }, _key = "not", _map[_key] = { k: _key, v: 172 }, _key = "ntilde", _map[_key] = { k: _key, v: 241 }, _key = "oacute", _map[_key] = { k: _key, v: 243 }, _key = "ocirc", _map[_key] = { k: _key, v: 244 }, _key = "ograve", _map[_key] = { k: _key, v: 242 }, _key = "ordf", _map[_key] = { k: _key, v: 170 }, _key = "ordm", _map[_key] = { k: _key, v: 186 }, _key = "oslash", _map[_key] = { k: _key, v: 248 }, _key = "otilde", _map[_key] = { k: _key, v: 245 }, _key = "ouml", _map[_key] = { k: _key, v: 246 }, _key = "para", _map[_key] = { k: _key, v: 182 }, _key = "plusmn", _map[_key] = { k: _key, v: 177 }, _key = "pound", _map[_key] = { k: _key, v: 163 }, _key = "quot", _map[_key] = { k: _key, v: 34 }, _key = "raquo", _map[_key] = { k: _key, v: 187 }, _key = "reg", _map[_key] = { k: _key, v: 174 }, _key = "sect", _map[_key] = { k: _key, v: 167 }, _key = "shy", _map[_key] = { k: _key, v: 173 }, _key = "sup1", _map[_key] = { k: _key, v: 185 }, _key = "sup2", _map[_key] = { k: _key, v: 178 }, _key = "sup3", _map[_key] = { k: _key, v: 179 }, _key = "szlig", _map[_key] = { k: _key, v: 223 }, _key = "thorn", _map[_key] = { k: _key, v: 254 }, _key = "times", _map[_key] = { k: _key, v: 215 }, _key = "uacute", _map[_key] = { k: _key, v: 250 }, _key = "ucirc", _map[_key] = { k: _key, v: 251 }, _key = "ugrave", _map[_key] = { k: _key, v: 249 }, _key = "uml", _map[_key] = { k: _key, v: 168 }, _key = "uuml", _map[_key] = { k: _key, v: 252 }, _key = "yacute", _map[_key] = { k: _key, v: 253 }, _key = "yen", _map[_key] = { k: _key, v: 165 }, _key = "yuml", _map[_key] = { k: _key, v: 255 }, _map);
		entity2 = (_map$1 = new $Map(), _key$1 = "NotEqualTilde;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8770, 824]) }, _key$1 = "NotGreaterFullEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8807, 824]) }, _key$1 = "NotGreaterGreater;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8811, 824]) }, _key$1 = "NotGreaterSlantEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10878, 824]) }, _key$1 = "NotHumpDownHump;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8782, 824]) }, _key$1 = "NotHumpEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8783, 824]) }, _key$1 = "NotLeftTriangleBar;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10703, 824]) }, _key$1 = "NotLessLess;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8810, 824]) }, _key$1 = "NotLessSlantEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10877, 824]) }, _key$1 = "NotNestedGreaterGreater;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10914, 824]) }, _key$1 = "NotNestedLessLess;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10913, 824]) }, _key$1 = "NotPrecedesEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10927, 824]) }, _key$1 = "NotRightTriangleBar;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10704, 824]) }, _key$1 = "NotSquareSubset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8847, 824]) }, _key$1 = "NotSquareSuperset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8848, 824]) }, _key$1 = "NotSubset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8834, 8402]) }, _key$1 = "NotSucceedsEqual;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10928, 824]) }, _key$1 = "NotSucceedsTilde;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8831, 824]) }, _key$1 = "NotSuperset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8835, 8402]) }, _key$1 = "ThickSpace;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8287, 8202]) }, _key$1 = "acE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8766, 819]) }, _key$1 = "bne;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [61, 8421]) }, _key$1 = "bnequiv;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8801, 8421]) }, _key$1 = "caps;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8745, 65024]) }, _key$1 = "cups;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8746, 65024]) }, _key$1 = "fjlig;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [102, 106]) }, _key$1 = "gesl;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8923, 65024]) }, _key$1 = "gvertneqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8809, 65024]) }, _key$1 = "gvnE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8809, 65024]) }, _key$1 = "lates;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10925, 65024]) }, _key$1 = "lesg;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8922, 65024]) }, _key$1 = "lvertneqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8808, 65024]) }, _key$1 = "lvnE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8808, 65024]) }, _key$1 = "nGg;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8921, 824]) }, _key$1 = "nGtv;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8811, 824]) }, _key$1 = "nLl;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8920, 824]) }, _key$1 = "nLtv;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8810, 824]) }, _key$1 = "nang;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8736, 8402]) }, _key$1 = "napE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10864, 824]) }, _key$1 = "napid;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8779, 824]) }, _key$1 = "nbump;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8782, 824]) }, _key$1 = "nbumpe;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8783, 824]) }, _key$1 = "ncongdot;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10861, 824]) }, _key$1 = "nedot;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8784, 824]) }, _key$1 = "nesim;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8770, 824]) }, _key$1 = "ngE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8807, 824]) }, _key$1 = "ngeqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8807, 824]) }, _key$1 = "ngeqslant;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10878, 824]) }, _key$1 = "nges;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10878, 824]) }, _key$1 = "nlE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8806, 824]) }, _key$1 = "nleqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8806, 824]) }, _key$1 = "nleqslant;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10877, 824]) }, _key$1 = "nles;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10877, 824]) }, _key$1 = "notinE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8953, 824]) }, _key$1 = "notindot;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8949, 824]) }, _key$1 = "nparsl;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [11005, 8421]) }, _key$1 = "npart;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8706, 824]) }, _key$1 = "npre;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10927, 824]) }, _key$1 = "npreceq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10927, 824]) }, _key$1 = "nrarrc;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10547, 824]) }, _key$1 = "nrarrw;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8605, 824]) }, _key$1 = "nsce;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10928, 824]) }, _key$1 = "nsubE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10949, 824]) }, _key$1 = "nsubset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8834, 8402]) }, _key$1 = "nsubseteqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10949, 824]) }, _key$1 = "nsucceq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10928, 824]) }, _key$1 = "nsupE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10950, 824]) }, _key$1 = "nsupset;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8835, 8402]) }, _key$1 = "nsupseteqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10950, 824]) }, _key$1 = "nvap;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8781, 8402]) }, _key$1 = "nvge;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8805, 8402]) }, _key$1 = "nvgt;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [62, 8402]) }, _key$1 = "nvle;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8804, 8402]) }, _key$1 = "nvlt;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [60, 8402]) }, _key$1 = "nvltrie;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8884, 8402]) }, _key$1 = "nvrtrie;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8885, 8402]) }, _key$1 = "nvsim;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8764, 8402]) }, _key$1 = "race;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8765, 817]) }, _key$1 = "smtes;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10924, 65024]) }, _key$1 = "sqcaps;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8851, 65024]) }, _key$1 = "sqcups;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8852, 65024]) }, _key$1 = "varsubsetneq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8842, 65024]) }, _key$1 = "varsubsetneqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10955, 65024]) }, _key$1 = "varsupsetneq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8843, 65024]) }, _key$1 = "varsupsetneqq;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10956, 65024]) }, _key$1 = "vnsub;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8834, 8402]) }, _key$1 = "vnsup;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8835, 8402]) }, _key$1 = "vsubnE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10955, 65024]) }, _key$1 = "vsubne;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8842, 65024]) }, _key$1 = "vsupnE;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [10956, 65024]) }, _key$1 = "vsupne;", _map$1[_key$1] = { k: _key$1, v: $toNativeArray($kindInt32, [8843, 65024]) }, _map$1);
		replacementTable = $toNativeArray($kindInt32, [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376]);
		/* */ } return; } }; $init_html.$blocking = true; return $init_html;
	};
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, bytes, errors, os, runtime, sort, strings, syscall, utf8, lazybuf, sliceType, sliceType$1, ptrType$1, Match, scanChunk, matchChunk, getEsc, Glob, glob, hasMeta, Clean, FromSlash, Split, Join, Base, VolumeName, isSlash, volumeNameLen;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	os = $packages["os"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	syscall = $packages["syscall"];
	utf8 = $packages["unicode/utf8"];
	lazybuf = $pkg.lazybuf = $newType(0, $kindStruct, "filepath.lazybuf", "lazybuf", "path/filepath", function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		this.path = path_ !== undefined ? path_ : "";
		this.buf = buf_ !== undefined ? buf_ : sliceType$1.nil;
		this.w = w_ !== undefined ? w_ : 0;
		this.volAndPath = volAndPath_ !== undefined ? volAndPath_ : "";
		this.volLen = volLen_ !== undefined ? volLen_ : 0;
	});
		sliceType = $sliceType($String);
		sliceType$1 = $sliceType($Uint8);
		ptrType$1 = $ptrType(lazybuf);
	Match = $pkg.Match = function(pattern, name) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple, _tuple$1, _tuple$2, chunk, err = $ifaceNil, err$1, err$2, i, matched = false, ok, ok$1, star, t, t$1;
		Pattern:
		while (pattern.length > 0) {
			star = false;
			chunk = "";
			_tuple = scanChunk(pattern); star = _tuple[0]; chunk = _tuple[1]; pattern = _tuple[2];
			if (star && chunk === "") {
				_tmp = strings.Index(name, "\\") < 0; _tmp$1 = $ifaceNil; matched = _tmp; err = _tmp$1;
				return [matched, err];
			}
			_tuple$1 = matchChunk(chunk, name); t = _tuple$1[0]; ok = _tuple$1[1]; err$1 = _tuple$1[2];
			if (ok && ((t.length === 0) || pattern.length > 0)) {
				name = t;
				continue;
			}
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$2 = false; _tmp$3 = err$1; matched = _tmp$2; err = _tmp$3;
				return [matched, err];
			}
			if (star) {
				i = 0;
				while (i < name.length && !((name.charCodeAt(i) === 92))) {
					_tuple$2 = matchChunk(chunk, name.substring((i + 1 >> 0))); t$1 = _tuple$2[0]; ok$1 = _tuple$2[1]; err$2 = _tuple$2[2];
					if (ok$1) {
						if ((pattern.length === 0) && t$1.length > 0) {
							i = i + (1) >> 0;
							continue;
						}
						name = t$1;
						continue Pattern;
					}
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						_tmp$4 = false; _tmp$5 = err$2; matched = _tmp$4; err = _tmp$5;
						return [matched, err];
					}
					i = i + (1) >> 0;
				}
			}
			_tmp$6 = false; _tmp$7 = $ifaceNil; matched = _tmp$6; err = _tmp$7;
			return [matched, err];
		}
		_tmp$8 = name.length === 0; _tmp$9 = $ifaceNil; matched = _tmp$8; err = _tmp$9;
		return [matched, err];
	};
	scanChunk = function(pattern) {
		var _ref, _tmp, _tmp$1, _tmp$2, chunk = "", i, inrange, rest = "", star = false;
		while (pattern.length > 0 && (pattern.charCodeAt(0) === 42)) {
			pattern = pattern.substring(1);
			star = true;
		}
		inrange = false;
		i = 0;
		i = 0;
		Scan:
		while (i < pattern.length) {
			_ref = pattern.charCodeAt(i);
			if (_ref === 92) {
			} else if (_ref === 91) {
				inrange = true;
			} else if (_ref === 93) {
				inrange = false;
			} else if (_ref === 42) {
				if (!inrange) {
					break Scan;
				}
			}
			i = i + (1) >> 0;
		}
		_tmp = star; _tmp$1 = pattern.substring(0, i); _tmp$2 = pattern.substring(i); star = _tmp; chunk = _tmp$1; rest = _tmp$2;
		return [star, chunk, rest];
	};
	matchChunk = function(chunk, s) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, _tuple$1, _tuple$2, _tuple$3, err = $ifaceNil, hi, lo, match, n, n$1, negated, nrange, ok = false, r, rest = "";
		while (chunk.length > 0) {
			if (s.length === 0) {
				return [rest, ok, err];
			}
			_ref = chunk.charCodeAt(0);
			if (_ref === 91) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; n = _tuple[1];
				s = s.substring(n);
				chunk = chunk.substring(1);
				if (chunk.length === 0) {
					err = $pkg.ErrBadPattern;
					return [rest, ok, err];
				}
				negated = chunk.charCodeAt(0) === 94;
				if (negated) {
					chunk = chunk.substring(1);
				}
				match = false;
				nrange = 0;
				while (true) {
					if (chunk.length > 0 && (chunk.charCodeAt(0) === 93) && nrange > 0) {
						chunk = chunk.substring(1);
						break;
					}
					_tmp = 0; _tmp$1 = 0; lo = _tmp; hi = _tmp$1;
					_tuple$1 = getEsc(chunk); lo = _tuple$1[0]; chunk = _tuple$1[1]; err = _tuple$1[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [rest, ok, err];
					}
					hi = lo;
					if (chunk.charCodeAt(0) === 45) {
						_tuple$2 = getEsc(chunk.substring(1)); hi = _tuple$2[0]; chunk = _tuple$2[1]; err = _tuple$2[2];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							return [rest, ok, err];
						}
					}
					if (lo <= r && r <= hi) {
						match = true;
					}
					nrange = nrange + (1) >> 0;
				}
				if (match === negated) {
					return [rest, ok, err];
				}
			} else if (_ref === 63) {
				if (s.charCodeAt(0) === 92) {
					return [rest, ok, err];
				}
				_tuple$3 = utf8.DecodeRuneInString(s); n$1 = _tuple$3[1];
				s = s.substring(n$1);
				chunk = chunk.substring(1);
			} else if (_ref === 92) {
				if (!((chunk.charCodeAt(0) === s.charCodeAt(0)))) {
					return [rest, ok, err];
				}
				s = s.substring(1);
				chunk = chunk.substring(1);
			} else {
				if (!((chunk.charCodeAt(0) === s.charCodeAt(0)))) {
					return [rest, ok, err];
				}
				s = s.substring(1);
				chunk = chunk.substring(1);
			}
		}
		_tmp$2 = s; _tmp$3 = true; _tmp$4 = $ifaceNil; rest = _tmp$2; ok = _tmp$3; err = _tmp$4;
		return [rest, ok, err];
	};
	getEsc = function(chunk) {
		var _tuple, err = $ifaceNil, n, nchunk = "", r = 0;
		if ((chunk.length === 0) || (chunk.charCodeAt(0) === 45) || (chunk.charCodeAt(0) === 93)) {
			err = $pkg.ErrBadPattern;
			return [r, nchunk, err];
		}
		if ((chunk.charCodeAt(0) === 92) && false) {
			chunk = chunk.substring(1);
			if (chunk.length === 0) {
				err = $pkg.ErrBadPattern;
				return [r, nchunk, err];
			}
		}
		_tuple = utf8.DecodeRuneInString(chunk); r = _tuple[0]; n = _tuple[1];
		if ((r === 65533) && (n === 1)) {
			err = $pkg.ErrBadPattern;
		}
		nchunk = chunk.substring(n);
		if (nchunk.length === 0) {
			err = $pkg.ErrBadPattern;
		}
		return [r, nchunk, err];
	};
	Glob = $pkg.Glob = function(pattern) {
		var _i, _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, d, dir, err = $ifaceNil, file, m, matches = sliceType.nil;
		if (!hasMeta(pattern)) {
			_tuple = os.Lstat(pattern); err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = sliceType.nil; _tmp$1 = $ifaceNil; matches = _tmp; err = _tmp$1;
				return [matches, err];
			}
			_tmp$2 = new sliceType([pattern]); _tmp$3 = $ifaceNil; matches = _tmp$2; err = _tmp$3;
			return [matches, err];
		}
		_tuple$1 = Split(pattern); dir = _tuple$1[0]; file = _tuple$1[1];
		_ref = dir;
		if (_ref === "") {
			dir = ".";
		} else if (_ref === "\\") {
		} else {
			dir = dir.substring(0, (dir.length - 1 >> 0));
		}
		if (!hasMeta(dir)) {
			_tuple$2 = glob(dir, file, sliceType.nil); matches = _tuple$2[0]; err = _tuple$2[1];
			return [matches, err];
		}
		m = sliceType.nil;
		_tuple$3 = Glob(dir); m = _tuple$3[0]; err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [matches, err];
		}
		_ref$1 = m;
		_i = 0;
		while (_i < _ref$1.$length) {
			d = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
			_tuple$4 = glob(d, file, matches); matches = _tuple$4[0]; err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [matches, err];
			}
			_i++;
		}
		return [matches, err];
	};
	glob = function(dir, pattern, matches) {
		var $deferred = [], $err = null, _i, _ref, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2, _tuple$3, d, e = $ifaceNil, err, err$1, fi, m = sliceType.nil, matched, n, names;
		/* */ try { $deferFrames.push($deferred);
		m = matches;
		_tuple = os.Stat(dir); fi = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [m, e];
		}
		if (!fi.IsDir()) {
			return [m, e];
		}
		_tuple$1 = os.Open(dir); d = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [m, e];
		}
		$deferred.push([$methodVal(d, "Close"), []]);
		_tuple$2 = d.Readdirnames(-1); names = _tuple$2[0];
		sort.Strings(names);
		_ref = names;
		_i = 0;
		while (_i < _ref.$length) {
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple$3 = Match(pattern, n); matched = _tuple$3[0]; err$1 = _tuple$3[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = m; _tmp$1 = err$1; m = _tmp; e = _tmp$1;
				return [m, e];
			}
			if (matched) {
				m = $append(m, Join(new sliceType([dir, n])));
			}
			_i++;
		}
		return [m, e];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [m, e]; }
	};
	hasMeta = function(path) {
		return strings.IndexAny(path, "*?[") >= 0;
	};
	lazybuf.ptr.prototype.index = function(i) {
		var b, x;
		b = this;
		if (!(b.buf === sliceType$1.nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.ptr.prototype.append = function(c) {
		var b, x, x$1;
		b = this;
		if (b.buf === sliceType$1.nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = sliceType$1.make(b.path.length);
			$copyString(b.buf, b.path.substring(0, b.w));
		}
		(x = b.buf, x$1 = b.w, (x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c);
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === sliceType$1.nil) {
			return b.volAndPath.substring(0, (b.volLen + b.w >> 0));
		}
		return b.volAndPath.substring(0, b.volLen) + $bytesToString($subslice(b.buf, 0, b.w));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = $pkg.Clean = function(path) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, dotdot, n, originalPath, out, r, rooted, volLen;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = path.substring(volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.ptr(path, sliceType$1.nil, 0, originalPath, volLen);
		_tmp = 0; _tmp$1 = 0; r = _tmp; dotdot = _tmp$1;
		if (rooted) {
			out.append(92);
			_tmp$2 = 1; _tmp$3 = 1; r = _tmp$2; dotdot = _tmp$3;
		}
		while (r < n) {
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (out.w > dotdot && !os.IsPathSeparator(out.index(out.w))) {
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(92);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(92);
				}
				while (r < n && !os.IsPathSeparator(path.charCodeAt(r))) {
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	FromSlash = $pkg.FromSlash = function(path) {
		return strings.Replace(path, "/", "\\", -1);
	};
	Split = $pkg.Split = function(path) {
		var _tmp, _tmp$1, dir = "", file = "", i, vol;
		vol = VolumeName(path);
		i = path.length - 1 >> 0;
		while (i >= vol.length && !os.IsPathSeparator(path.charCodeAt(i))) {
			i = i - (1) >> 0;
		}
		_tmp = path.substring(0, (i + 1 >> 0)); _tmp$1 = path.substring((i + 1 >> 0)); dir = _tmp; file = _tmp$1;
		return [dir, file];
	};
	Join = $pkg.Join = function(elem) {
		var _i, _ref, e, i;
		_ref = elem;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "\\"));
			}
			_i++;
		}
		return "";
	};
	Base = $pkg.Base = function(path) {
		var i;
		if (path === "") {
			return ".";
		}
		while (path.length > 0 && os.IsPathSeparator(path.charCodeAt((path.length - 1 >> 0)))) {
			path = path.substring(0, (path.length - 1 >> 0));
		}
		path = path.substring(VolumeName(path).length);
		i = path.length - 1 >> 0;
		while (i >= 0 && !os.IsPathSeparator(path.charCodeAt(i))) {
			i = i - (1) >> 0;
		}
		if (i >= 0) {
			path = path.substring((i + 1 >> 0));
		}
		if (path === "") {
			return "\\";
		}
		return path;
	};
	VolumeName = $pkg.VolumeName = function(path) {
		var v = "";
		v = path.substring(0, volumeNameLen(path));
		return v;
	};
	isSlash = function(c) {
		return (c === 92) || (c === 47);
	};
	volumeNameLen = function(path) {
		var c, l, n;
		if (path.length < 2) {
			return 0;
		}
		c = path.charCodeAt(0);
		if ((path.charCodeAt(1) === 58) && (97 <= c && c <= 122 || 65 <= c && c <= 90)) {
			return 2;
		}
		l = path.length;
		if (l >= 5 && isSlash(path.charCodeAt(0)) && isSlash(path.charCodeAt(1)) && !isSlash(path.charCodeAt(2)) && !((path.charCodeAt(2) === 46))) {
			n = 3;
			while (n < (l - 1 >> 0)) {
				if (isSlash(path.charCodeAt(n))) {
					n = n + (1) >> 0;
					if (!isSlash(path.charCodeAt(n))) {
						if (path.charCodeAt(n) === 46) {
							break;
						}
						while (n < l) {
							if (isSlash(path.charCodeAt(n))) {
								break;
							}
							n = n + (1) >> 0;
						}
						return n;
					}
					break;
				}
				n = n + (1) >> 0;
			}
		}
		return 0;
	};
	ptrType$1.methods = [{prop: "append", name: "append", pkg: "path/filepath", type: $funcType([$Uint8], [], false)}, {prop: "index", name: "index", pkg: "path/filepath", type: $funcType([$Int], [$Uint8], false)}, {prop: "string", name: "string", pkg: "path/filepath", type: $funcType([], [$String], false)}];
	lazybuf.init([{prop: "path", name: "path", pkg: "path/filepath", type: $String, tag: ""}, {prop: "buf", name: "buf", pkg: "path/filepath", type: sliceType$1, tag: ""}, {prop: "w", name: "w", pkg: "path/filepath", type: $Int, tag: ""}, {prop: "volAndPath", name: "volAndPath", pkg: "path/filepath", type: $String, tag: ""}, {prop: "volLen", name: "volLen", pkg: "path/filepath", type: $Int, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_filepath = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = errors.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = os.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = sort.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = syscall.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
		/* */ } return; } }; $init_filepath.$blocking = true; return $init_filepath;
	};
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, bytes, io, os, filepath, sort, strconv, sync, time, sliceType, sliceType$1, ptrType, blackHolePool, readAll, ReadFile;
	bytes = $packages["bytes"];
	io = $packages["io"];
	os = $packages["os"];
	filepath = $packages["path/filepath"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	sync = $packages["sync"];
	time = $packages["time"];
		sliceType = $sliceType($emptyInterface);
		sliceType$1 = $sliceType($Uint8);
		ptrType = $ptrType(sliceType$1);
	readAll = function(r, capacity) {
		var $deferred = [], $err = null, _tmp, _tmp$1, _tuple, b = sliceType$1.nil, buf, err = $ifaceNil;
		/* */ try { $deferFrames.push($deferred);
		buf = bytes.NewBuffer(sliceType$1.make(0, $flatten64(capacity)));
		$deferred.push([(function() {
			var _tuple, e, ok, panicErr;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple = $assertType(e, $error, true); panicErr = _tuple[0]; ok = _tuple[1];
			if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
				err = panicErr;
			} else {
				$panic(e);
			}
		}), []]);
		_tuple = buf.ReadFrom(r); err = _tuple[1];
		_tmp = buf.Bytes(); _tmp$1 = err; b = _tmp; err = _tmp$1;
		return [b, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [b, err]; }
	};
	ReadFile = $pkg.ReadFile = function(filename) {
		var $deferred = [], $err = null, _tuple, _tuple$1, err, err$1, f, fi, n, size;
		/* */ try { $deferFrames.push($deferred);
		_tuple = os.Open(filename); f = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sliceType$1.nil, err];
		}
		$deferred.push([$methodVal(f, "Close"), []]);
		n = new $Int64(0, 0);
		_tuple$1 = f.Stat(); fi = _tuple$1[0]; err$1 = _tuple$1[1];
		if ($interfaceIsEqual(err$1, $ifaceNil)) {
			size = fi.Size();
			if ((size.$high < 0 || (size.$high === 0 && size.$low < 1000000000))) {
				n = size;
			}
		}
		return readAll(f, new $Int64(n.$high + 0, n.$low + 512));
		/* */ } catch(err) { $err = err; return [sliceType$1.nil, $ifaceNil]; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_ioutil = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = os.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = filepath.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = sort.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = time.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		blackHolePool = new sync.Pool.ptr(0, 0, sliceType.nil, (function() {
			var b;
			b = sliceType$1.make(8192);
			return new ptrType(function() { return b; }, function($v) { b = $v; });
		}));
		/* */ } return; } }; $init_ioutil.$blocking = true; return $init_ioutil;
	};
	return $pkg;
})();
$packages["net/url"] = (function() {
	var $pkg = {}, bytes, errors, sort, strconv, strings, sliceType, shouldEscape, QueryEscape, escape;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	sort = $packages["sort"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
		sliceType = $sliceType($Uint8);
	shouldEscape = function(c, mode) {
		var _ref, _ref$1;
		if (65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57) {
			return false;
		}
		_ref = c;
		if (_ref === 45 || _ref === 95 || _ref === 46 || _ref === 126) {
			return false;
		} else if (_ref === 36 || _ref === 38 || _ref === 43 || _ref === 44 || _ref === 47 || _ref === 58 || _ref === 59 || _ref === 61 || _ref === 63 || _ref === 64) {
			_ref$1 = mode;
			if (_ref$1 === 1) {
				return c === 63;
			} else if (_ref$1 === 2) {
				return (c === 64) || (c === 47) || (c === 63) || (c === 58);
			} else if (_ref$1 === 3) {
				return true;
			} else if (_ref$1 === 4) {
				return false;
			}
		}
		return true;
	};
	QueryEscape = $pkg.QueryEscape = function(s) {
		return escape(s, 3);
	};
	escape = function(s, mode) {
		var _tmp, _tmp$1, c, c$1, hexCount, i, i$1, j, spaceCount, t, x, x$1;
		_tmp = 0; _tmp$1 = 0; spaceCount = _tmp; hexCount = _tmp$1;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (shouldEscape(c, mode)) {
				if ((c === 32) && (mode === 3)) {
					spaceCount = spaceCount + (1) >> 0;
				} else {
					hexCount = hexCount + (1) >> 0;
				}
			}
			i = i + (1) >> 0;
		}
		if ((spaceCount === 0) && (hexCount === 0)) {
			return s;
		}
		t = sliceType.make((s.length + (2 * hexCount >> 0) >> 0));
		j = 0;
		i$1 = 0;
		while (i$1 < s.length) {
			c$1 = s.charCodeAt(i$1);
			if ((c$1 === 32) && (mode === 3)) {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 43;
				j = j + (1) >> 0;
			} else if (shouldEscape(c$1, mode)) {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 37;
				(x = j + 1 >> 0, (x < 0 || x >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x] = "0123456789ABCDEF".charCodeAt((c$1 >>> 4 << 24 >>> 24)));
				(x$1 = j + 2 >> 0, (x$1 < 0 || x$1 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x$1] = "0123456789ABCDEF".charCodeAt(((c$1 & 15) >>> 0)));
				j = j + (3) >> 0;
			} else {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1);
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(t);
	};
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_url = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = errors.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = sort.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $init_url.$blocking = true; return $init_url;
	};
	return $pkg;
})();
$packages["container/list"] = (function() {
	var $pkg = {}, Element, List, ptrType, ptrType$1, New;
	Element = $pkg.Element = $newType(0, $kindStruct, "list.Element", "Element", "container/list", function(next_, prev_, list_, Value_) {
		this.$val = this;
		this.next = next_ !== undefined ? next_ : ptrType$1.nil;
		this.prev = prev_ !== undefined ? prev_ : ptrType$1.nil;
		this.list = list_ !== undefined ? list_ : ptrType.nil;
		this.Value = Value_ !== undefined ? Value_ : $ifaceNil;
	});
	List = $pkg.List = $newType(0, $kindStruct, "list.List", "List", "container/list", function(root_, len_) {
		this.$val = this;
		this.root = root_ !== undefined ? root_ : new Element.ptr();
		this.len = len_ !== undefined ? len_ : 0;
	});
		ptrType = $ptrType(List);
		ptrType$1 = $ptrType(Element);
	Element.ptr.prototype.Next = function() {
		var e, p;
		e = this;
		p = e.next;
		if (!(e.list === ptrType.nil) && !(p === e.list.root)) {
			return p;
		}
		return ptrType$1.nil;
	};
	Element.prototype.Next = function() { return this.$val.Next(); };
	Element.ptr.prototype.Prev = function() {
		var e, p;
		e = this;
		p = e.prev;
		if (!(e.list === ptrType.nil) && !(p === e.list.root)) {
			return p;
		}
		return ptrType$1.nil;
	};
	Element.prototype.Prev = function() { return this.$val.Prev(); };
	List.ptr.prototype.Init = function() {
		var l;
		l = this;
		l.root.next = l.root;
		l.root.prev = l.root;
		l.len = 0;
		return l;
	};
	List.prototype.Init = function() { return this.$val.Init(); };
	New = $pkg.New = function() {
		return new List.ptr().Init();
	};
	List.ptr.prototype.Len = function() {
		var l;
		l = this;
		return l.len;
	};
	List.prototype.Len = function() { return this.$val.Len(); };
	List.ptr.prototype.Front = function() {
		var l;
		l = this;
		if (l.len === 0) {
			return ptrType$1.nil;
		}
		return l.root.next;
	};
	List.prototype.Front = function() { return this.$val.Front(); };
	List.ptr.prototype.Back = function() {
		var l;
		l = this;
		if (l.len === 0) {
			return ptrType$1.nil;
		}
		return l.root.prev;
	};
	List.prototype.Back = function() { return this.$val.Back(); };
	List.ptr.prototype.lazyInit = function() {
		var l;
		l = this;
		if (l.root.next === ptrType$1.nil) {
			l.Init();
		}
	};
	List.prototype.lazyInit = function() { return this.$val.lazyInit(); };
	List.ptr.prototype.insert = function(e, at) {
		var l, n;
		l = this;
		n = at.next;
		at.next = e;
		e.prev = at;
		e.next = n;
		n.prev = e;
		e.list = l;
		l.len = l.len + (1) >> 0;
		return e;
	};
	List.prototype.insert = function(e, at) { return this.$val.insert(e, at); };
	List.ptr.prototype.insertValue = function(v, at) {
		var l;
		l = this;
		return l.insert(new Element.ptr(ptrType$1.nil, ptrType$1.nil, ptrType.nil, v), at);
	};
	List.prototype.insertValue = function(v, at) { return this.$val.insertValue(v, at); };
	List.ptr.prototype.remove = function(e) {
		var l;
		l = this;
		e.prev.next = e.next;
		e.next.prev = e.prev;
		e.next = ptrType$1.nil;
		e.prev = ptrType$1.nil;
		e.list = ptrType.nil;
		l.len = l.len - (1) >> 0;
		return e;
	};
	List.prototype.remove = function(e) { return this.$val.remove(e); };
	List.ptr.prototype.Remove = function(e) {
		var l;
		l = this;
		if (e.list === l) {
			l.remove(e);
		}
		return e.Value;
	};
	List.prototype.Remove = function(e) { return this.$val.Remove(e); };
	List.ptr.prototype.PushFront = function(v) {
		var l;
		l = this;
		l.lazyInit();
		return l.insertValue(v, l.root);
	};
	List.prototype.PushFront = function(v) { return this.$val.PushFront(v); };
	List.ptr.prototype.PushBack = function(v) {
		var l;
		l = this;
		l.lazyInit();
		return l.insertValue(v, l.root.prev);
	};
	List.prototype.PushBack = function(v) { return this.$val.PushBack(v); };
	List.ptr.prototype.InsertBefore = function(v, mark) {
		var l;
		l = this;
		if (!(mark.list === l)) {
			return ptrType$1.nil;
		}
		return l.insertValue(v, mark.prev);
	};
	List.prototype.InsertBefore = function(v, mark) { return this.$val.InsertBefore(v, mark); };
	List.ptr.prototype.InsertAfter = function(v, mark) {
		var l;
		l = this;
		if (!(mark.list === l)) {
			return ptrType$1.nil;
		}
		return l.insertValue(v, mark);
	};
	List.prototype.InsertAfter = function(v, mark) { return this.$val.InsertAfter(v, mark); };
	List.ptr.prototype.MoveToFront = function(e) {
		var l;
		l = this;
		if (!(e.list === l) || l.root.next === e) {
			return;
		}
		l.insert(l.remove(e), l.root);
	};
	List.prototype.MoveToFront = function(e) { return this.$val.MoveToFront(e); };
	List.ptr.prototype.MoveToBack = function(e) {
		var l;
		l = this;
		if (!(e.list === l) || l.root.prev === e) {
			return;
		}
		l.insert(l.remove(e), l.root.prev);
	};
	List.prototype.MoveToBack = function(e) { return this.$val.MoveToBack(e); };
	List.ptr.prototype.MoveBefore = function(e, mark) {
		var l;
		l = this;
		if (!(e.list === l) || e === mark || !(mark.list === l)) {
			return;
		}
		l.insert(l.remove(e), mark.prev);
	};
	List.prototype.MoveBefore = function(e, mark) { return this.$val.MoveBefore(e, mark); };
	List.ptr.prototype.MoveAfter = function(e, mark) {
		var l;
		l = this;
		if (!(e.list === l) || e === mark || !(mark.list === l)) {
			return;
		}
		l.insert(l.remove(e), mark);
	};
	List.prototype.MoveAfter = function(e, mark) { return this.$val.MoveAfter(e, mark); };
	List.ptr.prototype.PushBackList = function(other) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, i, l;
		l = this;
		l.lazyInit();
		_tmp = other.Len(); _tmp$1 = other.Front(); i = _tmp; e = _tmp$1;
		while (i > 0) {
			l.insertValue(e.Value, l.root.prev);
			_tmp$2 = i - 1 >> 0; _tmp$3 = e.Next(); i = _tmp$2; e = _tmp$3;
		}
	};
	List.prototype.PushBackList = function(other) { return this.$val.PushBackList(other); };
	List.ptr.prototype.PushFrontList = function(other) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, e, i, l;
		l = this;
		l.lazyInit();
		_tmp = other.Len(); _tmp$1 = other.Back(); i = _tmp; e = _tmp$1;
		while (i > 0) {
			l.insertValue(e.Value, l.root);
			_tmp$2 = i - 1 >> 0; _tmp$3 = e.Prev(); i = _tmp$2; e = _tmp$3;
		}
	};
	List.prototype.PushFrontList = function(other) { return this.$val.PushFrontList(other); };
	ptrType$1.methods = [{prop: "Next", name: "Next", pkg: "", type: $funcType([], [ptrType$1], false)}, {prop: "Prev", name: "Prev", pkg: "", type: $funcType([], [ptrType$1], false)}];
	ptrType.methods = [{prop: "Back", name: "Back", pkg: "", type: $funcType([], [ptrType$1], false)}, {prop: "Front", name: "Front", pkg: "", type: $funcType([], [ptrType$1], false)}, {prop: "Init", name: "Init", pkg: "", type: $funcType([], [ptrType], false)}, {prop: "InsertAfter", name: "InsertAfter", pkg: "", type: $funcType([$emptyInterface, ptrType$1], [ptrType$1], false)}, {prop: "InsertBefore", name: "InsertBefore", pkg: "", type: $funcType([$emptyInterface, ptrType$1], [ptrType$1], false)}, {prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "MoveAfter", name: "MoveAfter", pkg: "", type: $funcType([ptrType$1, ptrType$1], [], false)}, {prop: "MoveBefore", name: "MoveBefore", pkg: "", type: $funcType([ptrType$1, ptrType$1], [], false)}, {prop: "MoveToBack", name: "MoveToBack", pkg: "", type: $funcType([ptrType$1], [], false)}, {prop: "MoveToFront", name: "MoveToFront", pkg: "", type: $funcType([ptrType$1], [], false)}, {prop: "PushBack", name: "PushBack", pkg: "", type: $funcType([$emptyInterface], [ptrType$1], false)}, {prop: "PushBackList", name: "PushBackList", pkg: "", type: $funcType([ptrType], [], false)}, {prop: "PushFront", name: "PushFront", pkg: "", type: $funcType([$emptyInterface], [ptrType$1], false)}, {prop: "PushFrontList", name: "PushFrontList", pkg: "", type: $funcType([ptrType], [], false)}, {prop: "Remove", name: "Remove", pkg: "", type: $funcType([ptrType$1], [$emptyInterface], false)}, {prop: "insert", name: "insert", pkg: "container/list", type: $funcType([ptrType$1, ptrType$1], [ptrType$1], false)}, {prop: "insertValue", name: "insertValue", pkg: "container/list", type: $funcType([$emptyInterface, ptrType$1], [ptrType$1], false)}, {prop: "lazyInit", name: "lazyInit", pkg: "container/list", type: $funcType([], [], false)}, {prop: "remove", name: "remove", pkg: "container/list", type: $funcType([ptrType$1], [ptrType$1], false)}];
	Element.init([{prop: "next", name: "next", pkg: "container/list", type: ptrType$1, tag: ""}, {prop: "prev", name: "prev", pkg: "container/list", type: ptrType$1, tag: ""}, {prop: "list", name: "list", pkg: "container/list", type: ptrType, tag: ""}, {prop: "Value", name: "Value", pkg: "", type: $emptyInterface, tag: ""}]);
	List.init([{prop: "root", name: "root", pkg: "container/list", type: Element, tag: ""}, {prop: "len", name: "len", pkg: "container/list", type: $Int, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_list = function() { while (true) { switch ($s) { case 0:
		/* */ } return; } }; $init_list.$blocking = true; return $init_list;
	};
	return $pkg;
})();
$packages["text/template/parse"] = (function() {
	var $pkg = {}, bytes, list, fmt, runtime, strconv, strings, unicode, utf8, lexer, item, itemType, stateFn, Node, NodeType, Pos, ListNode, TextNode, PipeNode, ActionNode, CommandNode, IdentifierNode, VariableNode, DotNode, NilNode, FieldNode, ChainNode, BoolNode, NumberNode, StringNode, endNode, elseNode, BranchNode, IfNode, RangeNode, WithNode, TemplateNode, Tree, ptrType, chanType, ptrType$1, sliceType, ptrType$2, sliceType$1, ptrType$3, sliceType$2, ptrType$4, sliceType$3, ptrType$5, sliceType$4, ptrType$6, sliceType$5, ptrType$7, ptrType$8, mapType, sliceType$6, ptrType$9, arrayType, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, mapType$1, key, textFormat, _map, _key, lex, lexText, lexLeftDelim, lexComment, lexRightDelim, lexInsideAction, lexSpace, lexIdentifier, lexField, lexVariable, lexFieldOrVariable, lexChar, lexNumber, lexQuote, lexRawQuote, isSpace, isEndOfLine, isAlphaNumeric, NewIdentifier, Parse, New, IsEmptyTree;
	bytes = $packages["bytes"];
	list = $packages["container/list"];
	fmt = $packages["fmt"];
	runtime = $packages["runtime"];
	strconv = $packages["strconv"];
	strings = $packages["strings"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	lexer = $pkg.lexer = $newType(0, $kindStruct, "parse.lexer", "lexer", "text/template/parse", function(name_, input_, leftDelim_, rightDelim_, state_, pos_, start_, width_, lastPos_, items_, parenDepth_, itemsList_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.input = input_ !== undefined ? input_ : "";
		this.leftDelim = leftDelim_ !== undefined ? leftDelim_ : "";
		this.rightDelim = rightDelim_ !== undefined ? rightDelim_ : "";
		this.state = state_ !== undefined ? state_ : $throwNilPointerError;
		this.pos = pos_ !== undefined ? pos_ : 0;
		this.start = start_ !== undefined ? start_ : 0;
		this.width = width_ !== undefined ? width_ : 0;
		this.lastPos = lastPos_ !== undefined ? lastPos_ : 0;
		this.items = items_ !== undefined ? items_ : chanType.nil;
		this.parenDepth = parenDepth_ !== undefined ? parenDepth_ : 0;
		this.itemsList = itemsList_ !== undefined ? itemsList_ : ptrType$1.nil;
	});
	item = $pkg.item = $newType(0, $kindStruct, "parse.item", "item", "text/template/parse", function(typ_, pos_, val_) {
		this.$val = this;
		this.typ = typ_ !== undefined ? typ_ : 0;
		this.pos = pos_ !== undefined ? pos_ : 0;
		this.val = val_ !== undefined ? val_ : "";
	});
	itemType = $pkg.itemType = $newType(4, $kindInt, "parse.itemType", "itemType", "text/template/parse", null);
	stateFn = $pkg.stateFn = $newType(4, $kindFunc, "parse.stateFn", "stateFn", "text/template/parse", null);
	Node = $pkg.Node = $newType(8, $kindInterface, "parse.Node", "Node", "text/template/parse", null);
	NodeType = $pkg.NodeType = $newType(4, $kindInt, "parse.NodeType", "NodeType", "text/template/parse", null);
	Pos = $pkg.Pos = $newType(4, $kindInt, "parse.Pos", "Pos", "text/template/parse", null);
	ListNode = $pkg.ListNode = $newType(0, $kindStruct, "parse.ListNode", "ListNode", "text/template/parse", function(NodeType_, Pos_, tr_, Nodes_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Nodes = Nodes_ !== undefined ? Nodes_ : sliceType$1.nil;
	});
	TextNode = $pkg.TextNode = $newType(0, $kindStruct, "parse.TextNode", "TextNode", "text/template/parse", function(NodeType_, Pos_, tr_, Text_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Text = Text_ !== undefined ? Text_ : sliceType$2.nil;
	});
	PipeNode = $pkg.PipeNode = $newType(0, $kindStruct, "parse.PipeNode", "PipeNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_, Decl_, Cmds_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Decl = Decl_ !== undefined ? Decl_ : sliceType$3.nil;
		this.Cmds = Cmds_ !== undefined ? Cmds_ : sliceType$4.nil;
	});
	ActionNode = $pkg.ActionNode = $newType(0, $kindStruct, "parse.ActionNode", "ActionNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_, Pipe_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Pipe = Pipe_ !== undefined ? Pipe_ : ptrType$6.nil;
	});
	CommandNode = $pkg.CommandNode = $newType(0, $kindStruct, "parse.CommandNode", "CommandNode", "text/template/parse", function(NodeType_, Pos_, tr_, Args_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Args = Args_ !== undefined ? Args_ : sliceType$1.nil;
	});
	IdentifierNode = $pkg.IdentifierNode = $newType(0, $kindStruct, "parse.IdentifierNode", "IdentifierNode", "text/template/parse", function(NodeType_, Pos_, tr_, Ident_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Ident = Ident_ !== undefined ? Ident_ : "";
	});
	VariableNode = $pkg.VariableNode = $newType(0, $kindStruct, "parse.VariableNode", "VariableNode", "text/template/parse", function(NodeType_, Pos_, tr_, Ident_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Ident = Ident_ !== undefined ? Ident_ : sliceType$5.nil;
	});
	DotNode = $pkg.DotNode = $newType(0, $kindStruct, "parse.DotNode", "DotNode", "text/template/parse", function(NodeType_, Pos_, tr_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
	});
	NilNode = $pkg.NilNode = $newType(0, $kindStruct, "parse.NilNode", "NilNode", "text/template/parse", function(NodeType_, Pos_, tr_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
	});
	FieldNode = $pkg.FieldNode = $newType(0, $kindStruct, "parse.FieldNode", "FieldNode", "text/template/parse", function(NodeType_, Pos_, tr_, Ident_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Ident = Ident_ !== undefined ? Ident_ : sliceType$5.nil;
	});
	ChainNode = $pkg.ChainNode = $newType(0, $kindStruct, "parse.ChainNode", "ChainNode", "text/template/parse", function(NodeType_, Pos_, tr_, Node_, Field_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Node = Node_ !== undefined ? Node_ : $ifaceNil;
		this.Field = Field_ !== undefined ? Field_ : sliceType$5.nil;
	});
	BoolNode = $pkg.BoolNode = $newType(0, $kindStruct, "parse.BoolNode", "BoolNode", "text/template/parse", function(NodeType_, Pos_, tr_, True_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.True = True_ !== undefined ? True_ : false;
	});
	NumberNode = $pkg.NumberNode = $newType(0, $kindStruct, "parse.NumberNode", "NumberNode", "text/template/parse", function(NodeType_, Pos_, tr_, IsInt_, IsUint_, IsFloat_, IsComplex_, Int64_, Uint64_, Float64_, Complex128_, Text_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.IsInt = IsInt_ !== undefined ? IsInt_ : false;
		this.IsUint = IsUint_ !== undefined ? IsUint_ : false;
		this.IsFloat = IsFloat_ !== undefined ? IsFloat_ : false;
		this.IsComplex = IsComplex_ !== undefined ? IsComplex_ : false;
		this.Int64 = Int64_ !== undefined ? Int64_ : new $Int64(0, 0);
		this.Uint64 = Uint64_ !== undefined ? Uint64_ : new $Uint64(0, 0);
		this.Float64 = Float64_ !== undefined ? Float64_ : 0;
		this.Complex128 = Complex128_ !== undefined ? Complex128_ : new $Complex128(0, 0);
		this.Text = Text_ !== undefined ? Text_ : "";
	});
	StringNode = $pkg.StringNode = $newType(0, $kindStruct, "parse.StringNode", "StringNode", "text/template/parse", function(NodeType_, Pos_, tr_, Quoted_, Text_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Quoted = Quoted_ !== undefined ? Quoted_ : "";
		this.Text = Text_ !== undefined ? Text_ : "";
	});
	endNode = $pkg.endNode = $newType(0, $kindStruct, "parse.endNode", "endNode", "text/template/parse", function(NodeType_, Pos_, tr_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
	});
	elseNode = $pkg.elseNode = $newType(0, $kindStruct, "parse.elseNode", "elseNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Line = Line_ !== undefined ? Line_ : 0;
	});
	BranchNode = $pkg.BranchNode = $newType(0, $kindStruct, "parse.BranchNode", "BranchNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_, Pipe_, List_, ElseList_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Pipe = Pipe_ !== undefined ? Pipe_ : ptrType$6.nil;
		this.List = List_ !== undefined ? List_ : ptrType$3.nil;
		this.ElseList = ElseList_ !== undefined ? ElseList_ : ptrType$3.nil;
	});
	IfNode = $pkg.IfNode = $newType(0, $kindStruct, "parse.IfNode", "IfNode", "text/template/parse", function(BranchNode_) {
		this.$val = this;
		this.BranchNode = BranchNode_ !== undefined ? BranchNode_ : new BranchNode.ptr();
	});
	RangeNode = $pkg.RangeNode = $newType(0, $kindStruct, "parse.RangeNode", "RangeNode", "text/template/parse", function(BranchNode_) {
		this.$val = this;
		this.BranchNode = BranchNode_ !== undefined ? BranchNode_ : new BranchNode.ptr();
	});
	WithNode = $pkg.WithNode = $newType(0, $kindStruct, "parse.WithNode", "WithNode", "text/template/parse", function(BranchNode_) {
		this.$val = this;
		this.BranchNode = BranchNode_ !== undefined ? BranchNode_ : new BranchNode.ptr();
	});
	TemplateNode = $pkg.TemplateNode = $newType(0, $kindStruct, "parse.TemplateNode", "TemplateNode", "text/template/parse", function(NodeType_, Pos_, tr_, Line_, Name_, Pipe_) {
		this.$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.tr = tr_ !== undefined ? tr_ : ptrType$2.nil;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Pipe = Pipe_ !== undefined ? Pipe_ : ptrType$6.nil;
	});
	Tree = $pkg.Tree = $newType(0, $kindStruct, "parse.Tree", "Tree", "text/template/parse", function(Name_, ParseName_, Root_, text_, funcs_, lex_, token_, peekCount_, vars_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.ParseName = ParseName_ !== undefined ? ParseName_ : "";
		this.Root = Root_ !== undefined ? Root_ : ptrType$3.nil;
		this.text = text_ !== undefined ? text_ : "";
		this.funcs = funcs_ !== undefined ? funcs_ : sliceType$6.nil;
		this.lex = lex_ !== undefined ? lex_ : ptrType$9.nil;
		this.token = token_ !== undefined ? token_ : arrayType.zero();
		this.peekCount = peekCount_ !== undefined ? peekCount_ : 0;
		this.vars = vars_ !== undefined ? vars_ : sliceType$5.nil;
	});
		ptrType = $ptrType(list.Element);
		chanType = $chanType(item, false, false);
		ptrType$1 = $ptrType(list.List);
		sliceType = $sliceType($emptyInterface);
		ptrType$2 = $ptrType(Tree);
		sliceType$1 = $sliceType(Node);
		ptrType$3 = $ptrType(ListNode);
		sliceType$2 = $sliceType($Uint8);
		ptrType$4 = $ptrType(VariableNode);
		sliceType$3 = $sliceType(ptrType$4);
		ptrType$5 = $ptrType(CommandNode);
		sliceType$4 = $sliceType(ptrType$5);
		ptrType$6 = $ptrType(PipeNode);
		sliceType$5 = $sliceType($String);
		ptrType$7 = $ptrType(NumberNode);
		ptrType$8 = $ptrType($Complex128);
		mapType = $mapType($String, $emptyInterface);
		sliceType$6 = $sliceType(mapType);
		ptrType$9 = $ptrType(lexer);
		arrayType = $arrayType(item, 3);
		ptrType$10 = $ptrType($error);
		ptrType$11 = $ptrType(ActionNode);
		ptrType$12 = $ptrType(IfNode);
		ptrType$13 = $ptrType(RangeNode);
		ptrType$14 = $ptrType(TemplateNode);
		ptrType$15 = $ptrType(TextNode);
		ptrType$16 = $ptrType(WithNode);
		ptrType$17 = $ptrType(item);
		ptrType$18 = $ptrType(NodeType);
		ptrType$19 = $ptrType(Pos);
		ptrType$20 = $ptrType(IdentifierNode);
		ptrType$21 = $ptrType(DotNode);
		ptrType$22 = $ptrType(NilNode);
		ptrType$23 = $ptrType(FieldNode);
		ptrType$24 = $ptrType(ChainNode);
		ptrType$25 = $ptrType(BoolNode);
		ptrType$26 = $ptrType(StringNode);
		ptrType$27 = $ptrType(endNode);
		ptrType$28 = $ptrType(elseNode);
		ptrType$29 = $ptrType(BranchNode);
		mapType$1 = $mapType($String, ptrType$2);
	lexer.ptr.prototype.emit = function(t) {
		var l, x;
		l = this;
		l.itemsList.PushBack((x = new item.ptr(t, l.start, l.input.substring(l.start, l.pos)), new x.constructor.elem(x)));
		l.start = l.pos;
	};
	lexer.prototype.emit = function(t) { return this.$val.emit(t); };
	lexer.ptr.prototype.errorf = function(format, args) {
		var l, x;
		l = this;
		l.itemsList.PushBack((x = new item.ptr(0, l.start, fmt.Sprintf(format, args)), new x.constructor.elem(x)));
		return $throwNilPointerError;
	};
	lexer.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	lexer.ptr.prototype.nextItem = function() {
		var element, item$1, l;
		l = this;
		element = l.itemsList.Front();
		while (element === ptrType.nil) {
			l.state = l.state(l);
			element = l.itemsList.Front();
		}
		l.itemsList.Remove(element);
		item$1 = $clone($assertType(element.Value, item), item);
		l.lastPos = item$1.pos;
		return item$1;
	};
	lexer.prototype.nextItem = function() { return this.$val.nextItem(); };
	lex = function(name, input, left, right) {
		var l;
		if (left === "") {
			left = "{{";
		}
		if (right === "") {
			right = "}}";
		}
		l = new lexer.ptr(name, input, left, right, $throwNilPointerError, 0, 0, 0, 0, chanType.nil, 0, list.New());
		l.state = lexText;
		return l;
	};
	item.ptr.prototype.String = function() {
		var i;
		i = $clone(this, item);
		if (i.typ === 6) {
			return "EOF";
		} else if (i.typ === 0) {
			return i.val;
		} else if (i.typ > 20) {
			return fmt.Sprintf("<%s>", new sliceType([new $String(i.val)]));
		} else if (i.val.length > 10) {
			return fmt.Sprintf("%.10q...", new sliceType([new $String(i.val)]));
		}
		return fmt.Sprintf("%q", new sliceType([new $String(i.val)]));
	};
	item.prototype.String = function() { return this.$val.String(); };
	lexer.ptr.prototype.next = function() {
		var _tuple, l, r, w;
		l = this;
		if ((l.pos >> 0) >= l.input.length) {
			l.width = 0;
			return -1;
		}
		_tuple = utf8.DecodeRuneInString(l.input.substring(l.pos)); r = _tuple[0]; w = _tuple[1];
		l.width = (w >> 0);
		l.pos = l.pos + (l.width) >> 0;
		return r;
	};
	lexer.prototype.next = function() { return this.$val.next(); };
	lexer.ptr.prototype.peek = function() {
		var l, r;
		l = this;
		r = l.next();
		l.backup();
		return r;
	};
	lexer.prototype.peek = function() { return this.$val.peek(); };
	lexer.ptr.prototype.backup = function() {
		var l;
		l = this;
		l.pos = l.pos - (l.width) >> 0;
	};
	lexer.prototype.backup = function() { return this.$val.backup(); };
	lexer.ptr.prototype.ignore = function() {
		var l;
		l = this;
		l.start = l.pos;
	};
	lexer.prototype.ignore = function() { return this.$val.ignore(); };
	lexer.ptr.prototype.accept = function(valid) {
		var l;
		l = this;
		if (strings.IndexRune(valid, l.next()) >= 0) {
			return true;
		}
		l.backup();
		return false;
	};
	lexer.prototype.accept = function(valid) { return this.$val.accept(valid); };
	lexer.ptr.prototype.acceptRun = function(valid) {
		var l;
		l = this;
		while (strings.IndexRune(valid, l.next()) >= 0) {
		}
		l.backup();
	};
	lexer.prototype.acceptRun = function(valid) { return this.$val.acceptRun(valid); };
	lexer.ptr.prototype.lineNumber = function() {
		var l;
		l = this;
		return 1 + strings.Count(l.input.substring(0, l.lastPos), "\n") >> 0;
	};
	lexer.prototype.lineNumber = function() { return this.$val.lineNumber(); };
	lexText = function(l) {
		while (true) {
			if (strings.HasPrefix(l.input.substring(l.pos), l.leftDelim)) {
				if (l.pos > l.start) {
					l.emit(18);
				}
				return lexLeftDelim;
			}
			if (l.next() === -1) {
				break;
			}
		}
		if (l.pos > l.start) {
			l.emit(18);
		}
		l.emit(6);
		return $throwNilPointerError;
	};
	lexLeftDelim = function(l) {
		l.pos = l.pos + ((l.leftDelim.length >> 0)) >> 0;
		if (strings.HasPrefix(l.input.substring(l.pos), "/*")) {
			return lexComment;
		}
		l.emit(9);
		l.parenDepth = 0;
		return lexInsideAction;
	};
	lexComment = function(l) {
		var i;
		l.pos = l.pos + (2) >> 0;
		i = strings.Index(l.input.substring(l.pos), "*/");
		if (i < 0) {
			return l.errorf("unclosed comment", new sliceType([]));
		}
		l.pos = l.pos + (((i + 2 >> 0) >> 0)) >> 0;
		if (!strings.HasPrefix(l.input.substring(l.pos), l.rightDelim)) {
			return l.errorf("comment ends before closing delimiter", new sliceType([]));
		}
		l.pos = l.pos + ((l.rightDelim.length >> 0)) >> 0;
		l.ignore();
		return lexText;
	};
	lexRightDelim = function(l) {
		l.pos = l.pos + ((l.rightDelim.length >> 0)) >> 0;
		l.emit(14);
		return lexText;
	};
	lexInsideAction = function(l) {
		var r, r$1;
		if (strings.HasPrefix(l.input.substring(l.pos), l.rightDelim)) {
			if (l.parenDepth === 0) {
				return lexRightDelim;
			}
			return l.errorf("unclosed left paren", new sliceType([]));
		}
		r = l.next();
		if ((r === -1) || isEndOfLine(r)) {
			return l.errorf("unclosed action", new sliceType([]));
		} else if (isSpace(r)) {
			return lexSpace;
		} else if (r === 58) {
			if (!((l.next() === 61))) {
				return l.errorf("expected :=", new sliceType([]));
			}
			l.emit(5);
		} else if (r === 124) {
			l.emit(12);
		} else if (r === 34) {
			return lexQuote;
		} else if (r === 96) {
			return lexRawQuote;
		} else if (r === 36) {
			return lexVariable;
		} else if (r === 39) {
			return lexChar;
		} else if (r === 46) {
			if (l.pos < (l.input.length >> 0)) {
				r$1 = l.input.charCodeAt(l.pos);
				if (r$1 < 48 || 57 < r$1) {
					return lexField;
				}
			}
			l.backup();
			return lexNumber;
		} else if ((r === 43) || (r === 45) || (48 <= r && r <= 57)) {
			l.backup();
			return lexNumber;
		} else if (isAlphaNumeric(r)) {
			l.backup();
			return lexIdentifier;
		} else if (r === 40) {
			l.emit(10);
			l.parenDepth = l.parenDepth + (1) >> 0;
			return lexInsideAction;
		} else if (r === 41) {
			l.emit(15);
			l.parenDepth = l.parenDepth - (1) >> 0;
			if (l.parenDepth < 0) {
				return l.errorf("unexpected right paren %#U", new sliceType([new $Int32(r)]));
			}
			return lexInsideAction;
		} else if (r <= 127 && unicode.IsPrint(r)) {
			l.emit(2);
			return lexInsideAction;
		} else {
			return l.errorf("unrecognized character in action: %#U", new sliceType([new $Int32(r)]));
		}
		return lexInsideAction;
	};
	lexSpace = function(l) {
		while (isSpace(l.peek())) {
			l.next();
		}
		l.emit(16);
		return lexInsideAction;
	};
	lexIdentifier = function(l) {
		var _entry, _entry$1, r, word;
		Loop:
		while (true) {
			r = l.next();
			if (isAlphaNumeric(r)) {
			} else {
				l.backup();
				word = l.input.substring(l.start, l.pos);
				if (!l.atTerminator()) {
					return l.errorf("bad character %#U", new sliceType([new $Int32(r)]));
				}
				if ((_entry = key[word], _entry !== undefined ? _entry.v : 0) > 20) {
					l.emit((_entry$1 = key[word], _entry$1 !== undefined ? _entry$1.v : 0));
				} else if (word.charCodeAt(0) === 46) {
					l.emit(7);
				} else if (word === "true" || word === "false") {
					l.emit(1);
				} else {
					l.emit(8);
				}
				break Loop;
			}
		}
		return lexInsideAction;
	};
	lexField = function(l) {
		return lexFieldOrVariable(l, 7);
	};
	lexVariable = function(l) {
		if (l.atTerminator()) {
			l.emit(19);
			return lexInsideAction;
		}
		return lexFieldOrVariable(l, 19);
	};
	lexFieldOrVariable = function(l, typ) {
		var r;
		if (l.atTerminator()) {
			if (typ === 19) {
				l.emit(19);
			} else {
				l.emit(21);
			}
			return lexInsideAction;
		}
		r = 0;
		while (true) {
			r = l.next();
			if (!isAlphaNumeric(r)) {
				l.backup();
				break;
			}
		}
		if (!l.atTerminator()) {
			return l.errorf("bad character %#U", new sliceType([new $Int32(r)]));
		}
		l.emit(typ);
		return lexInsideAction;
	};
	lexer.ptr.prototype.atTerminator = function() {
		var _ref, _tuple, l, r, rd;
		l = this;
		r = l.peek();
		if (isSpace(r) || isEndOfLine(r)) {
			return true;
		}
		_ref = r;
		if (_ref === -1 || _ref === 46 || _ref === 44 || _ref === 124 || _ref === 58 || _ref === 41 || _ref === 40) {
			return true;
		}
		_tuple = utf8.DecodeRuneInString(l.rightDelim); rd = _tuple[0];
		if (rd === r) {
			return true;
		}
		return false;
	};
	lexer.prototype.atTerminator = function() { return this.$val.atTerminator(); };
	lexChar = function(l) {
		var _ref, r;
		Loop:
		while (true) {
			_ref = l.next();
			switch (0) { default: if (_ref === 92) {
				r = l.next();
				if (!((r === -1)) && !((r === 10))) {
					break;
				}
				return l.errorf("unterminated character constant", new sliceType([]));
			} else if (_ref === -1 || _ref === 10) {
				return l.errorf("unterminated character constant", new sliceType([]));
			} else if (_ref === 39) {
				break Loop;
			} }
		}
		l.emit(3);
		return lexInsideAction;
	};
	lexNumber = function(l) {
		var sign;
		if (!l.scanNumber()) {
			return l.errorf("bad number syntax: %q", new sliceType([new $String(l.input.substring(l.start, l.pos))]));
		}
		sign = l.peek();
		if ((sign === 43) || (sign === 45)) {
			if (!l.scanNumber() || !((l.input.charCodeAt((l.pos - 1 >> 0)) === 105))) {
				return l.errorf("bad number syntax: %q", new sliceType([new $String(l.input.substring(l.start, l.pos))]));
			}
			l.emit(4);
		} else {
			l.emit(11);
		}
		return lexInsideAction;
	};
	lexer.ptr.prototype.scanNumber = function() {
		var digits, l;
		l = this;
		l.accept("+-");
		digits = "0123456789";
		if (l.accept("0") && l.accept("xX")) {
			digits = "0123456789abcdefABCDEF";
		}
		l.acceptRun(digits);
		if (l.accept(".")) {
			l.acceptRun(digits);
		}
		if (l.accept("eE")) {
			l.accept("+-");
			l.acceptRun("0123456789");
		}
		l.accept("i");
		if (isAlphaNumeric(l.peek())) {
			l.next();
			return false;
		}
		return true;
	};
	lexer.prototype.scanNumber = function() { return this.$val.scanNumber(); };
	lexQuote = function(l) {
		var _ref, r;
		Loop:
		while (true) {
			_ref = l.next();
			switch (0) { default: if (_ref === 92) {
				r = l.next();
				if (!((r === -1)) && !((r === 10))) {
					break;
				}
				return l.errorf("unterminated quoted string", new sliceType([]));
			} else if (_ref === -1 || _ref === 10) {
				return l.errorf("unterminated quoted string", new sliceType([]));
			} else if (_ref === 34) {
				break Loop;
			} }
		}
		l.emit(17);
		return lexInsideAction;
	};
	lexRawQuote = function(l) {
		var _ref;
		Loop:
		while (true) {
			_ref = l.next();
			if (_ref === -1 || _ref === 10) {
				return l.errorf("unterminated raw quoted string", new sliceType([]));
			} else if (_ref === 96) {
				break Loop;
			}
		}
		l.emit(13);
		return lexInsideAction;
	};
	isSpace = function(r) {
		return (r === 32) || (r === 9);
	};
	isEndOfLine = function(r) {
		return (r === 13) || (r === 10);
	};
	isAlphaNumeric = function(r) {
		return (r === 95) || unicode.IsLetter(r) || unicode.IsDigit(r);
	};
	Pos.prototype.Position = function() {
		var p;
		p = this.$val;
		return p;
	};
	$ptrType(Pos).prototype.Position = function() { return new Pos(this.$get()).Position(); };
	NodeType.prototype.Type = function() {
		var t;
		t = this.$val;
		return t;
	};
	$ptrType(NodeType).prototype.Type = function() { return new NodeType(this.$get()).Type(); };
	Tree.ptr.prototype.newList = function(pos) {
		var t;
		t = this;
		return new ListNode.ptr(11, pos, t, sliceType$1.nil);
	};
	Tree.prototype.newList = function(pos) { return this.$val.newList(pos); };
	ListNode.ptr.prototype.append = function(n) {
		var l;
		l = this;
		l.Nodes = $append(l.Nodes, n);
	};
	ListNode.prototype.append = function(n) { return this.$val.append(n); };
	ListNode.ptr.prototype.tree = function() {
		var l;
		l = this;
		return l.tr;
	};
	ListNode.prototype.tree = function() { return this.$val.tree(); };
	ListNode.ptr.prototype.String = function() {
		var _i, _ref, b, l, n;
		l = this;
		b = new bytes.Buffer.ptr();
		_ref = l.Nodes;
		_i = 0;
		while (_i < _ref.$length) {
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			fmt.Fprint(b, new sliceType([n]));
			_i++;
		}
		return b.String();
	};
	ListNode.prototype.String = function() { return this.$val.String(); };
	ListNode.ptr.prototype.CopyList = function() {
		var _i, _ref, elem, l, n;
		l = this;
		if (l === ptrType$3.nil) {
			return l;
		}
		n = l.tr.newList(l.Pos);
		_ref = l.Nodes;
		_i = 0;
		while (_i < _ref.$length) {
			elem = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			n.append(elem.Copy());
			_i++;
		}
		return n;
	};
	ListNode.prototype.CopyList = function() { return this.$val.CopyList(); };
	ListNode.ptr.prototype.Copy = function() {
		var l;
		l = this;
		return l.CopyList();
	};
	ListNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newText = function(pos, text) {
		var t;
		t = this;
		return new TextNode.ptr(0, pos, t, new sliceType$2($stringToBytes(text)));
	};
	Tree.prototype.newText = function(pos, text) { return this.$val.newText(pos, text); };
	TextNode.ptr.prototype.String = function() {
		var t;
		t = this;
		return fmt.Sprintf(textFormat, new sliceType([t.Text]));
	};
	TextNode.prototype.String = function() { return this.$val.String(); };
	TextNode.ptr.prototype.tree = function() {
		var t;
		t = this;
		return t.tr;
	};
	TextNode.prototype.tree = function() { return this.$val.tree(); };
	TextNode.ptr.prototype.Copy = function() {
		var t;
		t = this;
		return new TextNode.ptr(0, t.Pos, t.tr, $appendSlice(new sliceType$2([]), t.Text));
	};
	TextNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newPipeline = function(pos, line, decl) {
		var t;
		t = this;
		return new PipeNode.ptr(14, pos, t, line, decl, sliceType$4.nil);
	};
	Tree.prototype.newPipeline = function(pos, line, decl) { return this.$val.newPipeline(pos, line, decl); };
	PipeNode.ptr.prototype.append = function(command) {
		var p;
		p = this;
		p.Cmds = $append(p.Cmds, command);
	};
	PipeNode.prototype.append = function(command) { return this.$val.append(command); };
	PipeNode.ptr.prototype.String = function() {
		var _i, _i$1, _ref, _ref$1, c, i, i$1, p, s, v;
		p = this;
		s = "";
		if (p.Decl.$length > 0) {
			_ref = p.Decl;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					s = s + (", ");
				}
				s = s + (v.String());
				_i++;
			}
			s = s + (" := ");
		}
		_ref$1 = p.Cmds;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			i$1 = _i$1;
			c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (i$1 > 0) {
				s = s + (" | ");
			}
			s = s + (c.String());
			_i$1++;
		}
		return s;
	};
	PipeNode.prototype.String = function() { return this.$val.String(); };
	PipeNode.ptr.prototype.tree = function() {
		var p;
		p = this;
		return p.tr;
	};
	PipeNode.prototype.tree = function() { return this.$val.tree(); };
	PipeNode.ptr.prototype.CopyPipe = function() {
		var _i, _i$1, _ref, _ref$1, c, d, decl, n, p;
		p = this;
		if (p === ptrType$6.nil) {
			return p;
		}
		decl = sliceType$3.nil;
		_ref = p.Decl;
		_i = 0;
		while (_i < _ref.$length) {
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			decl = $append(decl, $assertType(d.Copy(), ptrType$4));
			_i++;
		}
		n = p.tr.newPipeline(p.Pos, p.Line, decl);
		_ref$1 = p.Cmds;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			n.append($assertType(c.Copy(), ptrType$5));
			_i$1++;
		}
		return n;
	};
	PipeNode.prototype.CopyPipe = function() { return this.$val.CopyPipe(); };
	PipeNode.ptr.prototype.Copy = function() {
		var p;
		p = this;
		return p.CopyPipe();
	};
	PipeNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newAction = function(pos, line, pipe) {
		var t;
		t = this;
		return new ActionNode.ptr(1, pos, t, line, pipe);
	};
	Tree.prototype.newAction = function(pos, line, pipe) { return this.$val.newAction(pos, line, pipe); };
	ActionNode.ptr.prototype.String = function() {
		var a;
		a = this;
		return fmt.Sprintf("{{%s}}", new sliceType([a.Pipe]));
	};
	ActionNode.prototype.String = function() { return this.$val.String(); };
	ActionNode.ptr.prototype.tree = function() {
		var a;
		a = this;
		return a.tr;
	};
	ActionNode.prototype.tree = function() { return this.$val.tree(); };
	ActionNode.ptr.prototype.Copy = function() {
		var a;
		a = this;
		return a.tr.newAction(a.Pos, a.Line, a.Pipe.CopyPipe());
	};
	ActionNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newCommand = function(pos) {
		var t;
		t = this;
		return new CommandNode.ptr(4, pos, t, sliceType$1.nil);
	};
	Tree.prototype.newCommand = function(pos) { return this.$val.newCommand(pos); };
	CommandNode.ptr.prototype.append = function(arg) {
		var c;
		c = this;
		c.Args = $append(c.Args, arg);
	};
	CommandNode.prototype.append = function(arg) { return this.$val.append(arg); };
	CommandNode.ptr.prototype.String = function() {
		var _i, _ref, _tuple, arg, arg$1, c, i, ok, s;
		c = this;
		s = "";
		_ref = c.Args;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				s = s + (" ");
			}
			_tuple = $assertType(arg, ptrType$6, true); arg$1 = _tuple[0]; ok = _tuple[1];
			if (ok) {
				s = s + ("(" + arg$1.String() + ")");
				_i++;
				continue;
			}
			s = s + (arg.String());
			_i++;
		}
		return s;
	};
	CommandNode.prototype.String = function() { return this.$val.String(); };
	CommandNode.ptr.prototype.tree = function() {
		var c;
		c = this;
		return c.tr;
	};
	CommandNode.prototype.tree = function() { return this.$val.tree(); };
	CommandNode.ptr.prototype.Copy = function() {
		var _i, _ref, c, c$1, n;
		c = this;
		if (c === ptrType$5.nil) {
			return c;
		}
		n = c.tr.newCommand(c.Pos);
		_ref = c.Args;
		_i = 0;
		while (_i < _ref.$length) {
			c$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			n.append(c$1.Copy());
			_i++;
		}
		return n;
	};
	CommandNode.prototype.Copy = function() { return this.$val.Copy(); };
	NewIdentifier = $pkg.NewIdentifier = function(ident) {
		return new IdentifierNode.ptr(9, 0, ptrType$2.nil, ident);
	};
	IdentifierNode.ptr.prototype.SetPos = function(pos) {
		var i;
		i = this;
		i.Pos = pos;
		return i;
	};
	IdentifierNode.prototype.SetPos = function(pos) { return this.$val.SetPos(pos); };
	IdentifierNode.ptr.prototype.SetTree = function(t) {
		var i;
		i = this;
		i.tr = t;
		return i;
	};
	IdentifierNode.prototype.SetTree = function(t) { return this.$val.SetTree(t); };
	IdentifierNode.ptr.prototype.String = function() {
		var i;
		i = this;
		return i.Ident;
	};
	IdentifierNode.prototype.String = function() { return this.$val.String(); };
	IdentifierNode.ptr.prototype.tree = function() {
		var i;
		i = this;
		return i.tr;
	};
	IdentifierNode.prototype.tree = function() { return this.$val.tree(); };
	IdentifierNode.ptr.prototype.Copy = function() {
		var i;
		i = this;
		return NewIdentifier(i.Ident).SetTree(i.tr).SetPos(i.Pos);
	};
	IdentifierNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newVariable = function(pos, ident) {
		var t;
		t = this;
		return new VariableNode.ptr(18, pos, t, strings.Split(ident, "."));
	};
	Tree.prototype.newVariable = function(pos, ident) { return this.$val.newVariable(pos, ident); };
	VariableNode.ptr.prototype.String = function() {
		var _i, _ref, i, id, s, v;
		v = this;
		s = "";
		_ref = v.Ident;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			id = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				s = s + (".");
			}
			s = s + (id);
			_i++;
		}
		return s;
	};
	VariableNode.prototype.String = function() { return this.$val.String(); };
	VariableNode.ptr.prototype.tree = function() {
		var v;
		v = this;
		return v.tr;
	};
	VariableNode.prototype.tree = function() { return this.$val.tree(); };
	VariableNode.ptr.prototype.Copy = function() {
		var v;
		v = this;
		return new VariableNode.ptr(18, v.Pos, v.tr, $appendSlice(new sliceType$5([]), v.Ident));
	};
	VariableNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newDot = function(pos) {
		var t;
		t = this;
		return new DotNode.ptr(5, pos, t);
	};
	Tree.prototype.newDot = function(pos) { return this.$val.newDot(pos); };
	DotNode.ptr.prototype.Type = function() {
		var d;
		d = this;
		return 5;
	};
	DotNode.prototype.Type = function() { return this.$val.Type(); };
	DotNode.ptr.prototype.String = function() {
		var d;
		d = this;
		return ".";
	};
	DotNode.prototype.String = function() { return this.$val.String(); };
	DotNode.ptr.prototype.tree = function() {
		var d;
		d = this;
		return d.tr;
	};
	DotNode.prototype.tree = function() { return this.$val.tree(); };
	DotNode.ptr.prototype.Copy = function() {
		var d;
		d = this;
		return d.tr.newDot(d.Pos);
	};
	DotNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newNil = function(pos) {
		var t;
		t = this;
		return new NilNode.ptr(12, pos, t);
	};
	Tree.prototype.newNil = function(pos) { return this.$val.newNil(pos); };
	NilNode.ptr.prototype.Type = function() {
		var n;
		n = this;
		return 12;
	};
	NilNode.prototype.Type = function() { return this.$val.Type(); };
	NilNode.ptr.prototype.String = function() {
		var n;
		n = this;
		return "nil";
	};
	NilNode.prototype.String = function() { return this.$val.String(); };
	NilNode.ptr.prototype.tree = function() {
		var n;
		n = this;
		return n.tr;
	};
	NilNode.prototype.tree = function() { return this.$val.tree(); };
	NilNode.ptr.prototype.Copy = function() {
		var n;
		n = this;
		return n.tr.newNil(n.Pos);
	};
	NilNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newField = function(pos, ident) {
		var t;
		t = this;
		return new FieldNode.ptr(8, pos, t, strings.Split(ident.substring(1), "."));
	};
	Tree.prototype.newField = function(pos, ident) { return this.$val.newField(pos, ident); };
	FieldNode.ptr.prototype.String = function() {
		var _i, _ref, f, id, s;
		f = this;
		s = "";
		_ref = f.Ident;
		_i = 0;
		while (_i < _ref.$length) {
			id = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			s = s + ("." + id);
			_i++;
		}
		return s;
	};
	FieldNode.prototype.String = function() { return this.$val.String(); };
	FieldNode.ptr.prototype.tree = function() {
		var f;
		f = this;
		return f.tr;
	};
	FieldNode.prototype.tree = function() { return this.$val.tree(); };
	FieldNode.ptr.prototype.Copy = function() {
		var f;
		f = this;
		return new FieldNode.ptr(8, f.Pos, f.tr, $appendSlice(new sliceType$5([]), f.Ident));
	};
	FieldNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newChain = function(pos, node) {
		var t;
		t = this;
		return new ChainNode.ptr(3, pos, t, node, sliceType$5.nil);
	};
	Tree.prototype.newChain = function(pos, node) { return this.$val.newChain(pos, node); };
	ChainNode.ptr.prototype.Add = function(field) {
		var c;
		c = this;
		if ((field.length === 0) || !((field.charCodeAt(0) === 46))) {
			$panic(new $String("no dot in field"));
		}
		field = field.substring(1);
		if (field === "") {
			$panic(new $String("empty field"));
		}
		c.Field = $append(c.Field, field);
	};
	ChainNode.prototype.Add = function(field) { return this.$val.Add(field); };
	ChainNode.ptr.prototype.String = function() {
		var _i, _ref, _tuple, c, field, ok, s;
		c = this;
		s = c.Node.String();
		_tuple = $assertType(c.Node, ptrType$6, true); ok = _tuple[1];
		if (ok) {
			s = "(" + s + ")";
		}
		_ref = c.Field;
		_i = 0;
		while (_i < _ref.$length) {
			field = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			s = s + ("." + field);
			_i++;
		}
		return s;
	};
	ChainNode.prototype.String = function() { return this.$val.String(); };
	ChainNode.ptr.prototype.tree = function() {
		var c;
		c = this;
		return c.tr;
	};
	ChainNode.prototype.tree = function() { return this.$val.tree(); };
	ChainNode.ptr.prototype.Copy = function() {
		var c;
		c = this;
		return new ChainNode.ptr(3, c.Pos, c.tr, c.Node, $appendSlice(new sliceType$5([]), c.Field));
	};
	ChainNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newBool = function(pos, true$1) {
		var t;
		t = this;
		return new BoolNode.ptr(2, pos, t, true$1);
	};
	Tree.prototype.newBool = function(pos, true$1) { return this.$val.newBool(pos, true$1); };
	BoolNode.ptr.prototype.String = function() {
		var b;
		b = this;
		if (b.True) {
			return "true";
		}
		return "false";
	};
	BoolNode.prototype.String = function() { return this.$val.String(); };
	BoolNode.ptr.prototype.tree = function() {
		var b;
		b = this;
		return b.tr;
	};
	BoolNode.prototype.tree = function() { return this.$val.tree(); };
	BoolNode.ptr.prototype.Copy = function() {
		var b;
		b = this;
		return b.tr.newBool(b.Pos, b.True);
	};
	BoolNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newNumber = function(pos, text, typ) {
		var _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, err, err$1, err$2, err$3, err$4, f, f$1, i, n, rune, t, tail, u;
		t = this;
		n = new NumberNode.ptr(13, pos, t, false, false, false, false, new $Int64(0, 0), new $Uint64(0, 0), 0, new $Complex128(0, 0), text);
		_ref = typ;
		if (_ref === 3) {
			_tuple = strconv.UnquoteChar(text.substring(1), text.charCodeAt(0)); rune = _tuple[0]; tail = _tuple[2]; err = _tuple[3];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$7.nil, err];
			}
			if (!(tail === "'")) {
				return [ptrType$7.nil, fmt.Errorf("malformed character constant: %s", new sliceType([new $String(text)]))];
			}
			n.Int64 = new $Int64(0, rune);
			n.IsInt = true;
			n.Uint64 = new $Uint64(0, rune);
			n.IsUint = true;
			n.Float64 = rune;
			n.IsFloat = true;
			return [n, $ifaceNil];
		} else if (_ref === 4) {
			_tuple$1 = fmt.Sscan(text, new sliceType([new ptrType$8(function() { return this.$target.Complex128; }, function($v) { this.$target.Complex128 = $v; }, n)])); err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [ptrType$7.nil, err$1];
			}
			n.IsComplex = true;
			n.simplifyComplex();
			return [n, $ifaceNil];
		}
		if (text.length > 0 && (text.charCodeAt((text.length - 1 >> 0)) === 105)) {
			_tuple$2 = strconv.ParseFloat(text.substring(0, (text.length - 1 >> 0)), 64); f = _tuple$2[0]; err$2 = _tuple$2[1];
			if ($interfaceIsEqual(err$2, $ifaceNil)) {
				n.IsComplex = true;
				n.Complex128 = new $Complex128(0, f);
				n.simplifyComplex();
				return [n, $ifaceNil];
			}
		}
		_tuple$3 = strconv.ParseUint(text, 0, 64); u = _tuple$3[0]; err$3 = _tuple$3[1];
		if ($interfaceIsEqual(err$3, $ifaceNil)) {
			n.IsUint = true;
			n.Uint64 = u;
		}
		_tuple$4 = strconv.ParseInt(text, 0, 64); i = _tuple$4[0]; err$3 = _tuple$4[1];
		if ($interfaceIsEqual(err$3, $ifaceNil)) {
			n.IsInt = true;
			n.Int64 = i;
			if ((i.$high === 0 && i.$low === 0)) {
				n.IsUint = true;
				n.Uint64 = u;
			}
		}
		if (n.IsInt) {
			n.IsFloat = true;
			n.Float64 = $flatten64(n.Int64);
		} else if (n.IsUint) {
			n.IsFloat = true;
			n.Float64 = $flatten64(n.Uint64);
		} else {
			_tuple$5 = strconv.ParseFloat(text, 64); f$1 = _tuple$5[0]; err$4 = _tuple$5[1];
			if ($interfaceIsEqual(err$4, $ifaceNil)) {
				n.IsFloat = true;
				n.Float64 = f$1;
				if (!n.IsInt && ($flatten64(new $Int64(0, f$1)) === f$1)) {
					n.IsInt = true;
					n.Int64 = new $Int64(0, f$1);
				}
				if (!n.IsUint && ($flatten64(new $Uint64(0, f$1)) === f$1)) {
					n.IsUint = true;
					n.Uint64 = new $Uint64(0, f$1);
				}
			}
		}
		if (!n.IsInt && !n.IsUint && !n.IsFloat) {
			return [ptrType$7.nil, fmt.Errorf("illegal number syntax: %q", new sliceType([new $String(text)]))];
		}
		return [n, $ifaceNil];
	};
	Tree.prototype.newNumber = function(pos, text, typ) { return this.$val.newNumber(pos, text, typ); };
	NumberNode.ptr.prototype.simplifyComplex = function() {
		var n;
		n = this;
		n.IsFloat = n.Complex128.$imag === 0;
		if (n.IsFloat) {
			n.Float64 = n.Complex128.$real;
			n.IsInt = $flatten64(new $Int64(0, n.Float64)) === n.Float64;
			if (n.IsInt) {
				n.Int64 = new $Int64(0, n.Float64);
			}
			n.IsUint = $flatten64(new $Uint64(0, n.Float64)) === n.Float64;
			if (n.IsUint) {
				n.Uint64 = new $Uint64(0, n.Float64);
			}
		}
	};
	NumberNode.prototype.simplifyComplex = function() { return this.$val.simplifyComplex(); };
	NumberNode.ptr.prototype.String = function() {
		var n;
		n = this;
		return n.Text;
	};
	NumberNode.prototype.String = function() { return this.$val.String(); };
	NumberNode.ptr.prototype.tree = function() {
		var n;
		n = this;
		return n.tr;
	};
	NumberNode.prototype.tree = function() { return this.$val.tree(); };
	NumberNode.ptr.prototype.Copy = function() {
		var n, nn;
		n = this;
		nn = new NumberNode.ptr();
		$copy(nn, n, NumberNode);
		return nn;
	};
	NumberNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newString = function(pos, orig, text) {
		var t;
		t = this;
		return new StringNode.ptr(16, pos, t, orig, text);
	};
	Tree.prototype.newString = function(pos, orig, text) { return this.$val.newString(pos, orig, text); };
	StringNode.ptr.prototype.String = function() {
		var s;
		s = this;
		return s.Quoted;
	};
	StringNode.prototype.String = function() { return this.$val.String(); };
	StringNode.ptr.prototype.tree = function() {
		var s;
		s = this;
		return s.tr;
	};
	StringNode.prototype.tree = function() { return this.$val.tree(); };
	StringNode.ptr.prototype.Copy = function() {
		var s;
		s = this;
		return s.tr.newString(s.Pos, s.Quoted, s.Text);
	};
	StringNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newEnd = function(pos) {
		var t;
		t = this;
		return new endNode.ptr(7, pos, t);
	};
	Tree.prototype.newEnd = function(pos) { return this.$val.newEnd(pos); };
	endNode.ptr.prototype.String = function() {
		var e;
		e = this;
		return "{{end}}";
	};
	endNode.prototype.String = function() { return this.$val.String(); };
	endNode.ptr.prototype.tree = function() {
		var e;
		e = this;
		return e.tr;
	};
	endNode.prototype.tree = function() { return this.$val.tree(); };
	endNode.ptr.prototype.Copy = function() {
		var e;
		e = this;
		return e.tr.newEnd(e.Pos);
	};
	endNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newElse = function(pos, line) {
		var t;
		t = this;
		return new elseNode.ptr(6, pos, t, line);
	};
	Tree.prototype.newElse = function(pos, line) { return this.$val.newElse(pos, line); };
	elseNode.ptr.prototype.Type = function() {
		var e;
		e = this;
		return 6;
	};
	elseNode.prototype.Type = function() { return this.$val.Type(); };
	elseNode.ptr.prototype.String = function() {
		var e;
		e = this;
		return "{{else}}";
	};
	elseNode.prototype.String = function() { return this.$val.String(); };
	elseNode.ptr.prototype.tree = function() {
		var e;
		e = this;
		return e.tr;
	};
	elseNode.prototype.tree = function() { return this.$val.tree(); };
	elseNode.ptr.prototype.Copy = function() {
		var e;
		e = this;
		return e.tr.newElse(e.Pos, e.Line);
	};
	elseNode.prototype.Copy = function() { return this.$val.Copy(); };
	BranchNode.ptr.prototype.String = function() {
		var _ref, b, name;
		b = this;
		name = "";
		_ref = b.NodeType;
		if (_ref === 10) {
			name = "if";
		} else if (_ref === 15) {
			name = "range";
		} else if (_ref === 19) {
			name = "with";
		} else {
			$panic(new $String("unknown branch type"));
		}
		if (!(b.ElseList === ptrType$3.nil)) {
			return fmt.Sprintf("{{%s %s}}%s{{else}}%s{{end}}", new sliceType([new $String(name), b.Pipe, b.List, b.ElseList]));
		}
		return fmt.Sprintf("{{%s %s}}%s{{end}}", new sliceType([new $String(name), b.Pipe, b.List]));
	};
	BranchNode.prototype.String = function() { return this.$val.String(); };
	BranchNode.ptr.prototype.tree = function() {
		var b;
		b = this;
		return b.tr;
	};
	BranchNode.prototype.tree = function() { return this.$val.tree(); };
	BranchNode.ptr.prototype.Copy = function() {
		var _ref, b;
		b = this;
		_ref = b.NodeType;
		if (_ref === 10) {
			return b.tr.newIf(b.Pos, b.Line, b.Pipe, b.List, b.ElseList);
		} else if (_ref === 15) {
			return b.tr.newRange(b.Pos, b.Line, b.Pipe, b.List, b.ElseList);
		} else if (_ref === 19) {
			return b.tr.newWith(b.Pos, b.Line, b.Pipe, b.List, b.ElseList);
		} else {
			$panic(new $String("unknown branch type"));
		}
	};
	BranchNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newIf = function(pos, line, pipe, list$1, elseList) {
		var t;
		t = this;
		return new IfNode.ptr(new BranchNode.ptr(10, pos, t, line, pipe, list$1, elseList));
	};
	Tree.prototype.newIf = function(pos, line, pipe, list$1, elseList) { return this.$val.newIf(pos, line, pipe, list$1, elseList); };
	IfNode.ptr.prototype.Copy = function() {
		var i;
		i = this;
		return i.BranchNode.tr.newIf(i.BranchNode.Pos, i.BranchNode.Line, i.BranchNode.Pipe.CopyPipe(), i.BranchNode.List.CopyList(), i.BranchNode.ElseList.CopyList());
	};
	IfNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newRange = function(pos, line, pipe, list$1, elseList) {
		var t;
		t = this;
		return new RangeNode.ptr(new BranchNode.ptr(15, pos, t, line, pipe, list$1, elseList));
	};
	Tree.prototype.newRange = function(pos, line, pipe, list$1, elseList) { return this.$val.newRange(pos, line, pipe, list$1, elseList); };
	RangeNode.ptr.prototype.Copy = function() {
		var r;
		r = this;
		return r.BranchNode.tr.newRange(r.BranchNode.Pos, r.BranchNode.Line, r.BranchNode.Pipe.CopyPipe(), r.BranchNode.List.CopyList(), r.BranchNode.ElseList.CopyList());
	};
	RangeNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newWith = function(pos, line, pipe, list$1, elseList) {
		var t;
		t = this;
		return new WithNode.ptr(new BranchNode.ptr(19, pos, t, line, pipe, list$1, elseList));
	};
	Tree.prototype.newWith = function(pos, line, pipe, list$1, elseList) { return this.$val.newWith(pos, line, pipe, list$1, elseList); };
	WithNode.ptr.prototype.Copy = function() {
		var w;
		w = this;
		return w.BranchNode.tr.newWith(w.BranchNode.Pos, w.BranchNode.Line, w.BranchNode.Pipe.CopyPipe(), w.BranchNode.List.CopyList(), w.BranchNode.ElseList.CopyList());
	};
	WithNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.newTemplate = function(pos, line, name, pipe) {
		var t;
		t = this;
		return new TemplateNode.ptr(17, pos, t, line, name, pipe);
	};
	Tree.prototype.newTemplate = function(pos, line, name, pipe) { return this.$val.newTemplate(pos, line, name, pipe); };
	TemplateNode.ptr.prototype.String = function() {
		var t;
		t = this;
		if (t.Pipe === ptrType$6.nil) {
			return fmt.Sprintf("{{template %q}}", new sliceType([new $String(t.Name)]));
		}
		return fmt.Sprintf("{{template %q %s}}", new sliceType([new $String(t.Name), t.Pipe]));
	};
	TemplateNode.prototype.String = function() { return this.$val.String(); };
	TemplateNode.ptr.prototype.tree = function() {
		var t;
		t = this;
		return t.tr;
	};
	TemplateNode.prototype.tree = function() { return this.$val.tree(); };
	TemplateNode.ptr.prototype.Copy = function() {
		var t;
		t = this;
		return t.tr.newTemplate(t.Pos, t.Line, t.Name, t.Pipe.CopyPipe());
	};
	TemplateNode.prototype.Copy = function() { return this.$val.Copy(); };
	Tree.ptr.prototype.Copy = function() {
		var t;
		t = this;
		if (t === ptrType$2.nil) {
			return ptrType$2.nil;
		}
		return new Tree.ptr(t.Name, t.ParseName, t.Root.CopyList(), t.text, sliceType$6.nil, ptrType$9.nil, arrayType.zero(), 0, sliceType$5.nil);
	};
	Tree.prototype.Copy = function() { return this.$val.Copy(); };
	Parse = $pkg.Parse = function(name, text, leftDelim, rightDelim, funcs) {
		var _tuple, err = $ifaceNil, t, treeSet = false;
		treeSet = new $Map();
		t = New(name, new sliceType$6([]));
		t.text = text;
		_tuple = t.Parse(text, leftDelim, rightDelim, treeSet, funcs); err = _tuple[1];
		return [treeSet, err];
	};
	Tree.ptr.prototype.next = function() {
		var t, x, x$1;
		t = this;
		if (t.peekCount > 0) {
			t.peekCount = t.peekCount - (1) >> 0;
		} else {
			$copy(t.token[0], t.lex.nextItem(), item);
		}
		return (x = t.token, x$1 = t.peekCount, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
	};
	Tree.prototype.next = function() { return this.$val.next(); };
	Tree.ptr.prototype.backup = function() {
		var t;
		t = this;
		t.peekCount = t.peekCount + (1) >> 0;
	};
	Tree.prototype.backup = function() { return this.$val.backup(); };
	Tree.ptr.prototype.backup2 = function(t1) {
		var t;
		t = this;
		t1 = $clone(t1, item);
		$copy(t.token[1], t1, item);
		t.peekCount = 2;
	};
	Tree.prototype.backup2 = function(t1) { return this.$val.backup2(t1); };
	Tree.ptr.prototype.backup3 = function(t2, t1) {
		var t;
		t = this;
		t1 = $clone(t1, item);
		t2 = $clone(t2, item);
		$copy(t.token[1], t1, item);
		$copy(t.token[2], t2, item);
		t.peekCount = 3;
	};
	Tree.prototype.backup3 = function(t2, t1) { return this.$val.backup3(t2, t1); };
	Tree.ptr.prototype.peek = function() {
		var t, x, x$1;
		t = this;
		if (t.peekCount > 0) {
			return (x = t.token, x$1 = t.peekCount - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
		}
		t.peekCount = 1;
		$copy(t.token[0], t.lex.nextItem(), item);
		return t.token[0];
	};
	Tree.prototype.peek = function() { return this.$val.peek(); };
	Tree.ptr.prototype.nextNonSpace = function() {
		var t, token = new item.ptr();
		t = this;
		while (true) {
			$copy(token, t.next(), item);
			if (!((token.typ === 16))) {
				break;
			}
		}
		$copy(token, token, item);
		return token;
	};
	Tree.prototype.nextNonSpace = function() { return this.$val.nextNonSpace(); };
	Tree.ptr.prototype.peekNonSpace = function() {
		var t, token = new item.ptr();
		t = this;
		while (true) {
			$copy(token, t.next(), item);
			if (!((token.typ === 16))) {
				break;
			}
		}
		t.backup();
		$copy(token, token, item);
		return token;
	};
	Tree.prototype.peekNonSpace = function() { return this.$val.peekNonSpace(); };
	New = $pkg.New = function(name, funcs) {
		return new Tree.ptr(name, "", ptrType$3.nil, "", funcs, ptrType$9.nil, arrayType.zero(), 0, sliceType$5.nil);
	};
	Tree.ptr.prototype.ErrorContext = function(n) {
		var _tmp, _tmp$1, byteNum, context = "", lineNum, location = "", pos, t, text, tree;
		t = this;
		pos = (n.Position() >> 0);
		tree = n.tree();
		if (tree === ptrType$2.nil) {
			tree = t;
		}
		text = tree.text.substring(0, pos);
		byteNum = strings.LastIndex(text, "\n");
		if (byteNum === -1) {
			byteNum = pos;
		} else {
			byteNum = byteNum + (1) >> 0;
			byteNum = pos - byteNum >> 0;
		}
		lineNum = 1 + strings.Count(text, "\n") >> 0;
		context = n.String();
		if (context.length > 20) {
			context = fmt.Sprintf("%.20s...", new sliceType([new $String(context)]));
		}
		_tmp = fmt.Sprintf("%s:%d:%d", new sliceType([new $String(tree.ParseName), new $Int(lineNum), new $Int(byteNum)])); _tmp$1 = context; location = _tmp; context = _tmp$1;
		return [location, context];
	};
	Tree.prototype.ErrorContext = function(n) { return this.$val.ErrorContext(n); };
	Tree.ptr.prototype.errorf = function(format, args) {
		var t;
		t = this;
		t.Root = ptrType$3.nil;
		format = fmt.Sprintf("template: %s:%d: %s", new sliceType([new $String(t.ParseName), new $Int(t.lex.lineNumber()), new $String(format)]));
		$panic(fmt.Errorf(format, args));
	};
	Tree.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	Tree.ptr.prototype.error = function(err) {
		var t;
		t = this;
		t.errorf("%s", new sliceType([err]));
	};
	Tree.prototype.error = function(err) { return this.$val.error(err); };
	Tree.ptr.prototype.expect = function(expected, context) {
		var t, token;
		t = this;
		token = $clone(t.nextNonSpace(), item);
		if (!((token.typ === expected))) {
			t.unexpected(token, context);
		}
		return token;
	};
	Tree.prototype.expect = function(expected, context) { return this.$val.expect(expected, context); };
	Tree.ptr.prototype.expectOneOf = function(expected1, expected2, context) {
		var t, token;
		t = this;
		token = $clone(t.nextNonSpace(), item);
		if (!((token.typ === expected1)) && !((token.typ === expected2))) {
			t.unexpected(token, context);
		}
		return token;
	};
	Tree.prototype.expectOneOf = function(expected1, expected2, context) { return this.$val.expectOneOf(expected1, expected2, context); };
	Tree.ptr.prototype.unexpected = function(token, context) {
		var t;
		t = this;
		token = $clone(token, item);
		t.errorf("unexpected %s in %s", new sliceType([new token.constructor.elem(token), new $String(context)]));
	};
	Tree.prototype.unexpected = function(token, context) { return this.$val.unexpected(token, context); };
	Tree.ptr.prototype.recover = function(errp) {
		var _tuple, e, ok, t;
		t = this;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tuple = $assertType(e, runtime.Error, true); ok = _tuple[1];
			if (ok) {
				$panic(e);
			}
			if (!(t === ptrType$2.nil)) {
				t.stopParse();
			}
			errp.$set($assertType(e, $error));
		}
		return;
	};
	Tree.prototype.recover = function(errp) { return this.$val.recover(errp); };
	Tree.ptr.prototype.startParse = function(funcs, lex$1) {
		var t;
		t = this;
		t.Root = ptrType$3.nil;
		t.lex = lex$1;
		t.vars = new sliceType$5(["$"]);
		t.funcs = funcs;
	};
	Tree.prototype.startParse = function(funcs, lex$1) { return this.$val.startParse(funcs, lex$1); };
	Tree.ptr.prototype.stopParse = function() {
		var t;
		t = this;
		t.lex = ptrType$9.nil;
		t.vars = sliceType$5.nil;
		t.funcs = sliceType$6.nil;
	};
	Tree.prototype.stopParse = function() { return this.$val.stopParse(); };
	Tree.ptr.prototype.Parse = function(text, leftDelim, rightDelim, treeSet, funcs) {
		var $deferred = [], $err = null, _tmp, _tmp$1, err = $ifaceNil, t, tree = ptrType$2.nil;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		$deferred.push([$methodVal(t, "recover"), [new ptrType$10(function() { return err; }, function($v) { err = $v; })]]);
		t.ParseName = t.Name;
		t.startParse(funcs, lex(t.Name, text, leftDelim, rightDelim));
		t.text = text;
		t.parse(treeSet);
		t.add(treeSet);
		t.stopParse();
		_tmp = t; _tmp$1 = $ifaceNil; tree = _tmp; err = _tmp$1;
		return [tree, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [tree, err]; }
	};
	Tree.prototype.Parse = function(text, leftDelim, rightDelim, treeSet, funcs) { return this.$val.Parse(text, leftDelim, rightDelim, treeSet, funcs); };
	Tree.ptr.prototype.add = function(treeSet) {
		var _entry, _key$1, t, tree;
		t = this;
		tree = (_entry = treeSet[t.Name], _entry !== undefined ? _entry.v : ptrType$2.nil);
		if (tree === ptrType$2.nil || IsEmptyTree(tree.Root)) {
			_key$1 = t.Name; (treeSet || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: t };
			return;
		}
		if (!IsEmptyTree(t.Root)) {
			t.errorf("template: multiple definition of template %q", new sliceType([new $String(t.Name)]));
		}
	};
	Tree.prototype.add = function(treeSet) { return this.$val.add(treeSet); };
	IsEmptyTree = $pkg.IsEmptyTree = function(n) {
		var _i, _ref, _ref$1, n$1, node;
		_ref = n;
		if (_ref === $ifaceNil) {
			n$1 = _ref;
			return true;
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			n$1 = _ref.$val;
		} else if ($assertType(_ref, ptrType$12, true)[1]) {
			n$1 = _ref.$val;
		} else if ($assertType(_ref, ptrType$3, true)[1]) {
			n$1 = _ref.$val;
			_ref$1 = n$1.Nodes;
			_i = 0;
			while (_i < _ref$1.$length) {
				node = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (!IsEmptyTree(node)) {
					return false;
				}
				_i++;
			}
			return true;
		} else if ($assertType(_ref, ptrType$13, true)[1]) {
			n$1 = _ref.$val;
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			n$1 = _ref.$val;
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			n$1 = _ref.$val;
			return bytes.TrimSpace(n$1.Text).$length === 0;
		} else if ($assertType(_ref, ptrType$16, true)[1]) {
			n$1 = _ref.$val;
		} else {
			n$1 = _ref;
			$panic(new $String("unknown node: " + n$1.String()));
		}
		return false;
	};
	Tree.ptr.prototype.parse = function(treeSet) {
		var delim, n, newT, next = $ifaceNil, t;
		t = this;
		t.Root = t.newList(t.peek().pos);
		while (!((t.peek().typ === 6))) {
			if (t.peek().typ === 9) {
				delim = $clone(t.next(), item);
				if (t.nextNonSpace().typ === 22) {
					newT = New("definition", new sliceType$6([]));
					newT.text = t.text;
					newT.ParseName = t.ParseName;
					newT.startParse(t.funcs, t.lex);
					newT.parseDefinition(treeSet);
					continue;
				}
				t.backup2(delim);
			}
			n = t.textOrAction();
			if (n.Type() === 7) {
				t.errorf("unexpected %s", new sliceType([n]));
			}
			t.Root.append(n);
		}
		next = $ifaceNil;
		return next;
	};
	Tree.prototype.parse = function(treeSet) { return this.$val.parse(treeSet); };
	Tree.ptr.prototype.parseDefinition = function(treeSet) {
		var _tuple, _tuple$1, end, err, name, t;
		t = this;
		name = $clone(t.expectOneOf(17, 13, "define clause"), item);
		err = $ifaceNil;
		_tuple = strconv.Unquote(name.val); t.Name = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			t.error(err);
		}
		t.expect(14, "define clause");
		end = $ifaceNil;
		_tuple$1 = t.itemList(); t.Root = _tuple$1[0]; end = _tuple$1[1];
		if (!((end.Type() === 7))) {
			t.errorf("unexpected %s in %s", new sliceType([end, new $String("define clause")]));
		}
		t.add(treeSet);
		t.stopParse();
	};
	Tree.prototype.parseDefinition = function(treeSet) { return this.$val.parseDefinition(treeSet); };
	Tree.ptr.prototype.itemList = function() {
		var _ref, _tmp, _tmp$1, list$1 = ptrType$3.nil, n, next = $ifaceNil, t;
		t = this;
		list$1 = t.newList(t.peekNonSpace().pos);
		while (!((t.peekNonSpace().typ === 6))) {
			n = t.textOrAction();
			_ref = n.Type();
			if (_ref === 7 || _ref === 6) {
				_tmp = list$1; _tmp$1 = n; list$1 = _tmp; next = _tmp$1;
				return [list$1, next];
			}
			list$1.append(n);
		}
		t.errorf("unexpected EOF", new sliceType([]));
		return [list$1, next];
	};
	Tree.prototype.itemList = function() { return this.$val.itemList(); };
	Tree.ptr.prototype.textOrAction = function() {
		var _ref, t, token;
		t = this;
		token = $clone(t.nextNonSpace(), item);
		_ref = token.typ;
		if (_ref === 18) {
			return t.newText(token.pos, token.val);
		} else if (_ref === 9) {
			return t.action();
		} else {
			t.unexpected(token, "input");
		}
		return $ifaceNil;
	};
	Tree.prototype.textOrAction = function() { return this.$val.textOrAction(); };
	Tree.ptr.prototype.action = function() {
		var _ref, n = $ifaceNil, t, token;
		t = this;
		token = $clone(t.nextNonSpace(), item);
		_ref = token.typ;
		if (_ref === 23) {
			n = t.elseControl();
			return n;
		} else if (_ref === 24) {
			n = t.endControl();
			return n;
		} else if (_ref === 25) {
			n = t.ifControl();
			return n;
		} else if (_ref === 27) {
			n = t.rangeControl();
			return n;
		} else if (_ref === 28) {
			n = t.templateControl();
			return n;
		} else if (_ref === 29) {
			n = t.withControl();
			return n;
		}
		t.backup();
		n = t.newAction(t.peek().pos, t.lex.lineNumber(), t.pipeline("command"));
		return n;
	};
	Tree.prototype.action = function() { return this.$val.action(); };
	Tree.ptr.prototype.pipeline = function(context) {
		var _ref, decl, next, pipe = ptrType$6.nil, pos, t, token, tokenAfterVariable, v, variable;
		t = this;
		decl = sliceType$3.nil;
		pos = t.peekNonSpace().pos;
		while (true) {
			v = $clone(t.peekNonSpace(), item);
			if (v.typ === 19) {
				t.next();
				tokenAfterVariable = $clone(t.peek(), item);
				next = $clone(t.peekNonSpace(), item);
				if ((next.typ === 5) || ((next.typ === 2) && next.val === ",")) {
					t.nextNonSpace();
					variable = t.newVariable(v.pos, v.val);
					decl = $append(decl, variable);
					t.vars = $append(t.vars, v.val);
					if ((next.typ === 2) && next.val === ",") {
						if (context === "range" && decl.$length < 2) {
							continue;
						}
						t.errorf("too many declarations in %s", new sliceType([new $String(context)]));
					}
				} else if (tokenAfterVariable.typ === 16) {
					t.backup3(v, tokenAfterVariable);
				} else {
					t.backup2(v);
				}
			}
			break;
		}
		pipe = t.newPipeline(pos, t.lex.lineNumber(), decl);
		while (true) {
			token = $clone(t.nextNonSpace(), item);
			_ref = token.typ;
			if (_ref === 14 || _ref === 15) {
				if (pipe.Cmds.$length === 0) {
					t.errorf("missing value for %s", new sliceType([new $String(context)]));
				}
				if (token.typ === 15) {
					t.backup();
				}
				return pipe;
			} else if (_ref === 1 || _ref === 3 || _ref === 4 || _ref === 21 || _ref === 7 || _ref === 8 || _ref === 11 || _ref === 26 || _ref === 13 || _ref === 17 || _ref === 19 || _ref === 10) {
				t.backup();
				pipe.append(t.command());
			} else {
				t.unexpected(token, context);
			}
		}
	};
	Tree.prototype.pipeline = function(context) { return this.$val.pipeline(context); };
	Tree.ptr.prototype.parseControl = function(allowElseIf, context) {
		var $deferred = [], $err = null, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tuple, _tuple$1, elseList = ptrType$3.nil, line = 0, list$1 = ptrType$3.nil, next, pipe = ptrType$6.nil, pos = 0, t;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		$deferred.push([$methodVal(t, "popVars"), [t.vars.$length]]);
		line = t.lex.lineNumber();
		pipe = t.pipeline(context);
		next = $ifaceNil;
		_tuple = t.itemList(); list$1 = _tuple[0]; next = _tuple[1];
		_ref = next.Type();
		switch (0) { default: if (_ref === 7) {
		} else if (_ref === 6) {
			if (allowElseIf) {
				if (t.peek().typ === 25) {
					t.next();
					elseList = t.newList(next.Position());
					elseList.append(t.ifControl());
					break;
				}
			}
			_tuple$1 = t.itemList(); elseList = _tuple$1[0]; next = _tuple$1[1];
			if (!((next.Type() === 7))) {
				t.errorf("expected end; found %s", new sliceType([next]));
			}
		} }
		_tmp = new Pos(pipe.Pos).Position(); _tmp$1 = line; _tmp$2 = pipe; _tmp$3 = list$1; _tmp$4 = elseList; pos = _tmp; line = _tmp$1; pipe = _tmp$2; list$1 = _tmp$3; elseList = _tmp$4;
		return [pos, line, pipe, list$1, elseList];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [pos, line, pipe, list$1, elseList]; }
	};
	Tree.prototype.parseControl = function(allowElseIf, context) { return this.$val.parseControl(allowElseIf, context); };
	Tree.ptr.prototype.ifControl = function() {
		var _tuple, t;
		t = this;
		_tuple = t.parseControl(true, "if");
		return t.newIf(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]);
	};
	Tree.prototype.ifControl = function() { return this.$val.ifControl(); };
	Tree.ptr.prototype.rangeControl = function() {
		var _tuple, t;
		t = this;
		_tuple = t.parseControl(false, "range");
		return t.newRange(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]);
	};
	Tree.prototype.rangeControl = function() { return this.$val.rangeControl(); };
	Tree.ptr.prototype.withControl = function() {
		var _tuple, t;
		t = this;
		_tuple = t.parseControl(false, "with");
		return t.newWith(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]);
	};
	Tree.prototype.withControl = function() { return this.$val.withControl(); };
	Tree.ptr.prototype.endControl = function() {
		var t;
		t = this;
		return t.newEnd(t.expect(14, "end").pos);
	};
	Tree.prototype.endControl = function() { return this.$val.endControl(); };
	Tree.ptr.prototype.elseControl = function() {
		var peek, t;
		t = this;
		peek = $clone(t.peekNonSpace(), item);
		if (peek.typ === 25) {
			return t.newElse(peek.pos, t.lex.lineNumber());
		}
		return t.newElse(t.expect(14, "else").pos, t.lex.lineNumber());
	};
	Tree.prototype.elseControl = function() { return this.$val.elseControl(); };
	Tree.ptr.prototype.templateControl = function() {
		var _ref, _tuple, err, name, pipe, s, t, token;
		t = this;
		name = "";
		token = $clone(t.nextNonSpace(), item);
		_ref = token.typ;
		if (_ref === 17 || _ref === 13) {
			_tuple = strconv.Unquote(token.val); s = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				t.error(err);
			}
			name = s;
		} else {
			t.unexpected(token, "template invocation");
		}
		pipe = ptrType$6.nil;
		if (!((t.nextNonSpace().typ === 14))) {
			t.backup();
			pipe = t.pipeline("template");
		}
		return t.newTemplate(token.pos, t.lex.lineNumber(), name, pipe);
	};
	Tree.prototype.templateControl = function() { return this.$val.templateControl(); };
	Tree.ptr.prototype.command = function() {
		var _ref, cmd, operand, t, token;
		t = this;
		cmd = t.newCommand(t.peekNonSpace().pos);
		while (true) {
			t.peekNonSpace();
			operand = t.operand();
			if (!($interfaceIsEqual(operand, $ifaceNil))) {
				cmd.append(operand);
			}
			token = $clone(t.next(), item);
			_ref = token.typ;
			if (_ref === 16) {
				continue;
			} else if (_ref === 0) {
				t.errorf("%s", new sliceType([new $String(token.val)]));
			} else if (_ref === 14 || _ref === 15) {
				t.backup();
			} else if (_ref === 12) {
			} else {
				t.errorf("unexpected %s in operand; missing space?", new sliceType([new token.constructor.elem(token)]));
			}
			break;
		}
		if (cmd.Args.$length === 0) {
			t.errorf("empty command", new sliceType([]));
		}
		return cmd;
	};
	Tree.prototype.command = function() { return this.$val.command(); };
	Tree.ptr.prototype.operand = function() {
		var _ref, chain, node, t;
		t = this;
		node = t.term();
		if ($interfaceIsEqual(node, $ifaceNil)) {
			return $ifaceNil;
		}
		if (t.peek().typ === 7) {
			chain = t.newChain(t.peek().pos, node);
			while (t.peek().typ === 7) {
				chain.Add(t.next().val);
			}
			_ref = node.Type();
			if (_ref === 8) {
				node = t.newField(new Pos(chain.Pos).Position(), chain.String());
			} else if (_ref === 18) {
				node = t.newVariable(new Pos(chain.Pos).Position(), chain.String());
			} else {
				node = chain;
			}
		}
		return node;
	};
	Tree.prototype.operand = function() { return this.$val.operand(); };
	Tree.ptr.prototype.term = function() {
		var _ref, _tuple, _tuple$1, err, err$1, number, pipe, s, t, token, token$1;
		t = this;
		token = $clone(t.nextNonSpace(), item);
		_ref = token.typ;
		if (_ref === 0) {
			t.errorf("%s", new sliceType([new $String(token.val)]));
		} else if (_ref === 8) {
			if (!t.hasFunction(token.val)) {
				t.errorf("function %q not defined", new sliceType([new $String(token.val)]));
			}
			return NewIdentifier(token.val).SetTree(t).SetPos(token.pos);
		} else if (_ref === 21) {
			return t.newDot(token.pos);
		} else if (_ref === 26) {
			return t.newNil(token.pos);
		} else if (_ref === 19) {
			return t.useVar(token.pos, token.val);
		} else if (_ref === 7) {
			return t.newField(token.pos, token.val);
		} else if (_ref === 1) {
			return t.newBool(token.pos, token.val === "true");
		} else if (_ref === 3 || _ref === 4 || _ref === 11) {
			_tuple = t.newNumber(token.pos, token.val, token.typ); number = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				t.error(err);
			}
			return number;
		} else if (_ref === 10) {
			pipe = t.pipeline("parenthesized pipeline");
			token$1 = $clone(t.next(), item);
			if (!((token$1.typ === 15))) {
				t.errorf("unclosed right paren: unexpected %s", new sliceType([new token$1.constructor.elem(token$1)]));
			}
			return pipe;
		} else if (_ref === 17 || _ref === 13) {
			_tuple$1 = strconv.Unquote(token.val); s = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				t.error(err$1);
			}
			return t.newString(token.pos, token.val, s);
		}
		t.backup();
		return $ifaceNil;
	};
	Tree.prototype.term = function() { return this.$val.term(); };
	Tree.ptr.prototype.hasFunction = function(name) {
		var _entry, _i, _ref, funcMap, t;
		t = this;
		_ref = t.funcs;
		_i = 0;
		while (_i < _ref.$length) {
			funcMap = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (funcMap === false) {
				_i++;
				continue;
			}
			if (!($interfaceIsEqual((_entry = funcMap[name], _entry !== undefined ? _entry.v : $ifaceNil), $ifaceNil))) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Tree.prototype.hasFunction = function(name) { return this.$val.hasFunction(name); };
	Tree.ptr.prototype.popVars = function(n) {
		var t;
		t = this;
		t.vars = $subslice(t.vars, 0, n);
	};
	Tree.prototype.popVars = function(n) { return this.$val.popVars(n); };
	Tree.ptr.prototype.useVar = function(pos, name) {
		var _i, _ref, t, v, varName, x, x$1;
		t = this;
		v = t.newVariable(pos, name);
		_ref = t.vars;
		_i = 0;
		while (_i < _ref.$length) {
			varName = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (varName === (x = v.Ident, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))) {
				return v;
			}
			_i++;
		}
		t.errorf("undefined variable %q", new sliceType([new $String((x$1 = v.Ident, ((0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])))]));
		return $ifaceNil;
	};
	Tree.prototype.useVar = function(pos, name) { return this.$val.useVar(pos, name); };
	ptrType$9.methods = [{prop: "accept", name: "accept", pkg: "text/template/parse", type: $funcType([$String], [$Bool], false)}, {prop: "acceptRun", name: "acceptRun", pkg: "text/template/parse", type: $funcType([$String], [], false)}, {prop: "atTerminator", name: "atTerminator", pkg: "text/template/parse", type: $funcType([], [$Bool], false)}, {prop: "backup", name: "backup", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "emit", name: "emit", pkg: "text/template/parse", type: $funcType([itemType], [], false)}, {prop: "errorf", name: "errorf", pkg: "text/template/parse", type: $funcType([$String, sliceType], [stateFn], true)}, {prop: "ignore", name: "ignore", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "lineNumber", name: "lineNumber", pkg: "text/template/parse", type: $funcType([], [$Int], false)}, {prop: "next", name: "next", pkg: "text/template/parse", type: $funcType([], [$Int32], false)}, {prop: "nextItem", name: "nextItem", pkg: "text/template/parse", type: $funcType([], [item], false)}, {prop: "peek", name: "peek", pkg: "text/template/parse", type: $funcType([], [$Int32], false)}, {prop: "run", name: "run", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "scanNumber", name: "scanNumber", pkg: "text/template/parse", type: $funcType([], [$Bool], false)}];
	item.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$17.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	NodeType.methods = [{prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$18.methods = [{prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	Pos.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}];
	ptrType$19.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}];
	ListNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$3.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "CopyList", name: "CopyList", pkg: "", type: $funcType([], [ptrType$3], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "append", name: "append", pkg: "text/template/parse", type: $funcType([Node], [], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	TextNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$15.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	PipeNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$6.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "CopyPipe", name: "CopyPipe", pkg: "", type: $funcType([], [ptrType$6], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "append", name: "append", pkg: "text/template/parse", type: $funcType([ptrType$5], [], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	ActionNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$11.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	CommandNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$5.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "append", name: "append", pkg: "text/template/parse", type: $funcType([Node], [], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	IdentifierNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$20.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "SetPos", name: "SetPos", pkg: "", type: $funcType([Pos], [ptrType$20], false)}, {prop: "SetTree", name: "SetTree", pkg: "", type: $funcType([ptrType$2], [ptrType$20], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	VariableNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$4.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	DotNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}];
	ptrType$21.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	NilNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}];
	ptrType$22.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	FieldNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$23.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	ChainNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$24.methods = [{prop: "Add", name: "Add", pkg: "", type: $funcType([$String], [], false)}, {prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	BoolNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$25.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	NumberNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$7.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "simplifyComplex", name: "simplifyComplex", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	StringNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$26.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	endNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$27.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	elseNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}];
	ptrType$28.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	BranchNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$29.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	IfNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$12.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	RangeNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$13.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	WithNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$16.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	TemplateNode.methods = [{prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}];
	ptrType$14.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}];
	ptrType$2.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [ptrType$2], false)}, {prop: "ErrorContext", name: "ErrorContext", pkg: "", type: $funcType([Node], [$String, $String], false)}, {prop: "Parse", name: "Parse", pkg: "", type: $funcType([$String, $String, $String, mapType$1, sliceType$6], [ptrType$2, $error], true)}, {prop: "action", name: "action", pkg: "text/template/parse", type: $funcType([], [Node], false)}, {prop: "add", name: "add", pkg: "text/template/parse", type: $funcType([mapType$1], [], false)}, {prop: "backup", name: "backup", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "backup2", name: "backup2", pkg: "text/template/parse", type: $funcType([item], [], false)}, {prop: "backup3", name: "backup3", pkg: "text/template/parse", type: $funcType([item, item], [], false)}, {prop: "command", name: "command", pkg: "text/template/parse", type: $funcType([], [ptrType$5], false)}, {prop: "elseControl", name: "elseControl", pkg: "text/template/parse", type: $funcType([], [Node], false)}, {prop: "endControl", name: "endControl", pkg: "text/template/parse", type: $funcType([], [Node], false)}, {prop: "error", name: "error", pkg: "text/template/parse", type: $funcType([$error], [], false)}, {prop: "errorf", name: "errorf", pkg: "text/template/parse", type: $funcType([$String, sliceType], [], true)}, {prop: "expect", name: "expect", pkg: "text/template/parse", type: $funcType([itemType, $String], [item], false)}, {prop: "expectOneOf", name: "expectOneOf", pkg: "text/template/parse", type: $funcType([itemType, itemType, $String], [item], false)}, {prop: "hasFunction", name: "hasFunction", pkg: "text/template/parse", type: $funcType([$String], [$Bool], false)}, {prop: "ifControl", name: "ifControl", pkg: "text/template/parse", type: $funcType([], [Node], false)}, {prop: "itemList", name: "itemList", pkg: "text/template/parse", type: $funcType([], [ptrType$3, Node], false)}, {prop: "newAction", name: "newAction", pkg: "text/template/parse", type: $funcType([Pos, $Int, ptrType$6], [ptrType$11], false)}, {prop: "newBool", name: "newBool", pkg: "text/template/parse", type: $funcType([Pos, $Bool], [ptrType$25], false)}, {prop: "newChain", name: "newChain", pkg: "text/template/parse", type: $funcType([Pos, Node], [ptrType$24], false)}, {prop: "newCommand", name: "newCommand", pkg: "text/template/parse", type: $funcType([Pos], [ptrType$5], false)}, {prop: "newDot", name: "newDot", pkg: "text/template/parse", type: $funcType([Pos], [ptrType$21], false)}, {prop: "newElse", name: "newElse", pkg: "text/template/parse", type: $funcType([Pos, $Int], [ptrType$28], false)}, {prop: "newEnd", name: "newEnd", pkg: "text/template/parse", type: $funcType([Pos], [ptrType$27], false)}, {prop: "newField", name: "newField", pkg: "text/template/parse", type: $funcType([Pos, $String], [ptrType$23], false)}, {prop: "newIf", name: "newIf", pkg: "text/template/parse", type: $funcType([Pos, $Int, ptrType$6, ptrType$3, ptrType$3], [ptrType$12], false)}, {prop: "newList", name: "newList", pkg: "text/template/parse", type: $funcType([Pos], [ptrType$3], false)}, {prop: "newNil", name: "newNil", pkg: "text/template/parse", type: $funcType([Pos], [ptrType$22], false)}, {prop: "newNumber", name: "newNumber", pkg: "text/template/parse", type: $funcType([Pos, $String, itemType], [ptrType$7, $error], false)}, {prop: "newPipeline", name: "newPipeline", pkg: "text/template/parse", type: $funcType([Pos, $Int, sliceType$3], [ptrType$6], false)}, {prop: "newRange", name: "newRange", pkg: "text/template/parse", type: $funcType([Pos, $Int, ptrType$6, ptrType$3, ptrType$3], [ptrType$13], false)}, {prop: "newString", name: "newString", pkg: "text/template/parse", type: $funcType([Pos, $String, $String], [ptrType$26], false)}, {prop: "newTemplate", name: "newTemplate", pkg: "text/template/parse", type: $funcType([Pos, $Int, $String, ptrType$6], [ptrType$14], false)}, {prop: "newText", name: "newText", pkg: "text/template/parse", type: $funcType([Pos, $String], [ptrType$15], false)}, {prop: "newVariable", name: "newVariable", pkg: "text/template/parse", type: $funcType([Pos, $String], [ptrType$4], false)}, {prop: "newWith", name: "newWith", pkg: "text/template/parse", type: $funcType([Pos, $Int, ptrType$6, ptrType$3, ptrType$3], [ptrType$16], false)}, {prop: "next", name: "next", pkg: "text/template/parse", type: $funcType([], [item], false)}, {prop: "nextNonSpace", name: "nextNonSpace", pkg: "text/template/parse", type: $funcType([], [item], false)}, {prop: "operand", name: "operand", pkg: "text/template/parse", type: $funcType([], [Node], false)}, {prop: "parse", name: "parse", pkg: "text/template/parse", type: $funcType([mapType$1], [Node], false)}, {prop: "parseControl", name: "parseControl", pkg: "text/template/parse", type: $funcType([$Bool, $String], [Pos, $Int, ptrType$6, ptrType$3, ptrType$3], false)}, {prop: "parseDefinition", name: "parseDefinition", pkg: "text/template/parse", type: $funcType([mapType$1], [], false)}, {prop: "peek", name: "peek", pkg: "text/template/parse", type: $funcType([], [item], false)}, {prop: "peekNonSpace", name: "peekNonSpace", pkg: "text/template/parse", type: $funcType([], [item], false)}, {prop: "pipeline", name: "pipeline", pkg: "text/template/parse", type: $funcType([$String], [ptrType$6], false)}, {prop: "popVars", name: "popVars", pkg: "text/template/parse", type: $funcType([$Int], [], false)}, {prop: "rangeControl", name: "rangeControl", pkg: "text/template/parse", type: $funcType([], [Node], false)}, {prop: "recover", name: "recover", pkg: "text/template/parse", type: $funcType([ptrType$10], [], false)}, {prop: "startParse", name: "startParse", pkg: "text/template/parse", type: $funcType([sliceType$6, ptrType$9], [], false)}, {prop: "stopParse", name: "stopParse", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "templateControl", name: "templateControl", pkg: "text/template/parse", type: $funcType([], [Node], false)}, {prop: "term", name: "term", pkg: "text/template/parse", type: $funcType([], [Node], false)}, {prop: "textOrAction", name: "textOrAction", pkg: "text/template/parse", type: $funcType([], [Node], false)}, {prop: "unexpected", name: "unexpected", pkg: "text/template/parse", type: $funcType([item, $String], [], false)}, {prop: "useVar", name: "useVar", pkg: "text/template/parse", type: $funcType([Pos, $String], [Node], false)}, {prop: "withControl", name: "withControl", pkg: "text/template/parse", type: $funcType([], [Node], false)}];
	lexer.init([{prop: "name", name: "name", pkg: "text/template/parse", type: $String, tag: ""}, {prop: "input", name: "input", pkg: "text/template/parse", type: $String, tag: ""}, {prop: "leftDelim", name: "leftDelim", pkg: "text/template/parse", type: $String, tag: ""}, {prop: "rightDelim", name: "rightDelim", pkg: "text/template/parse", type: $String, tag: ""}, {prop: "state", name: "state", pkg: "text/template/parse", type: stateFn, tag: ""}, {prop: "pos", name: "pos", pkg: "text/template/parse", type: Pos, tag: ""}, {prop: "start", name: "start", pkg: "text/template/parse", type: Pos, tag: ""}, {prop: "width", name: "width", pkg: "text/template/parse", type: Pos, tag: ""}, {prop: "lastPos", name: "lastPos", pkg: "text/template/parse", type: Pos, tag: ""}, {prop: "items", name: "items", pkg: "text/template/parse", type: chanType, tag: ""}, {prop: "parenDepth", name: "parenDepth", pkg: "text/template/parse", type: $Int, tag: ""}, {prop: "itemsList", name: "itemsList", pkg: "text/template/parse", type: ptrType$1, tag: ""}]);
	item.init([{prop: "typ", name: "typ", pkg: "text/template/parse", type: itemType, tag: ""}, {prop: "pos", name: "pos", pkg: "text/template/parse", type: Pos, tag: ""}, {prop: "val", name: "val", pkg: "text/template/parse", type: $String, tag: ""}]);
	stateFn.init([ptrType$9], [stateFn], false);
	Node.init([{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [Node], false)}, {prop: "Position", name: "Position", pkg: "", type: $funcType([], [Pos], false)}, {prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "Type", name: "Type", pkg: "", type: $funcType([], [NodeType], false)}, {prop: "tree", name: "tree", pkg: "text/template/parse", type: $funcType([], [ptrType$2], false)}]);
	ListNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Nodes", name: "Nodes", pkg: "", type: sliceType$1, tag: ""}]);
	TextNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Text", name: "Text", pkg: "", type: sliceType$2, tag: ""}]);
	PipeNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Line", name: "Line", pkg: "", type: $Int, tag: ""}, {prop: "Decl", name: "Decl", pkg: "", type: sliceType$3, tag: ""}, {prop: "Cmds", name: "Cmds", pkg: "", type: sliceType$4, tag: ""}]);
	ActionNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Line", name: "Line", pkg: "", type: $Int, tag: ""}, {prop: "Pipe", name: "Pipe", pkg: "", type: ptrType$6, tag: ""}]);
	CommandNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Args", name: "Args", pkg: "", type: sliceType$1, tag: ""}]);
	IdentifierNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Ident", name: "Ident", pkg: "", type: $String, tag: ""}]);
	VariableNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Ident", name: "Ident", pkg: "", type: sliceType$5, tag: ""}]);
	DotNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}]);
	NilNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}]);
	FieldNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Ident", name: "Ident", pkg: "", type: sliceType$5, tag: ""}]);
	ChainNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Node", name: "Node", pkg: "", type: Node, tag: ""}, {prop: "Field", name: "Field", pkg: "", type: sliceType$5, tag: ""}]);
	BoolNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "True", name: "True", pkg: "", type: $Bool, tag: ""}]);
	NumberNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "IsInt", name: "IsInt", pkg: "", type: $Bool, tag: ""}, {prop: "IsUint", name: "IsUint", pkg: "", type: $Bool, tag: ""}, {prop: "IsFloat", name: "IsFloat", pkg: "", type: $Bool, tag: ""}, {prop: "IsComplex", name: "IsComplex", pkg: "", type: $Bool, tag: ""}, {prop: "Int64", name: "Int64", pkg: "", type: $Int64, tag: ""}, {prop: "Uint64", name: "Uint64", pkg: "", type: $Uint64, tag: ""}, {prop: "Float64", name: "Float64", pkg: "", type: $Float64, tag: ""}, {prop: "Complex128", name: "Complex128", pkg: "", type: $Complex128, tag: ""}, {prop: "Text", name: "Text", pkg: "", type: $String, tag: ""}]);
	StringNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Quoted", name: "Quoted", pkg: "", type: $String, tag: ""}, {prop: "Text", name: "Text", pkg: "", type: $String, tag: ""}]);
	endNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}]);
	elseNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Line", name: "Line", pkg: "", type: $Int, tag: ""}]);
	BranchNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Line", name: "Line", pkg: "", type: $Int, tag: ""}, {prop: "Pipe", name: "Pipe", pkg: "", type: ptrType$6, tag: ""}, {prop: "List", name: "List", pkg: "", type: ptrType$3, tag: ""}, {prop: "ElseList", name: "ElseList", pkg: "", type: ptrType$3, tag: ""}]);
	IfNode.init([{prop: "BranchNode", name: "", pkg: "", type: BranchNode, tag: ""}]);
	RangeNode.init([{prop: "BranchNode", name: "", pkg: "", type: BranchNode, tag: ""}]);
	WithNode.init([{prop: "BranchNode", name: "", pkg: "", type: BranchNode, tag: ""}]);
	TemplateNode.init([{prop: "NodeType", name: "", pkg: "", type: NodeType, tag: ""}, {prop: "Pos", name: "", pkg: "", type: Pos, tag: ""}, {prop: "tr", name: "tr", pkg: "text/template/parse", type: ptrType$2, tag: ""}, {prop: "Line", name: "Line", pkg: "", type: $Int, tag: ""}, {prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}, {prop: "Pipe", name: "Pipe", pkg: "", type: ptrType$6, tag: ""}]);
	Tree.init([{prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}, {prop: "ParseName", name: "ParseName", pkg: "", type: $String, tag: ""}, {prop: "Root", name: "Root", pkg: "", type: ptrType$3, tag: ""}, {prop: "text", name: "text", pkg: "text/template/parse", type: $String, tag: ""}, {prop: "funcs", name: "funcs", pkg: "text/template/parse", type: sliceType$6, tag: ""}, {prop: "lex", name: "lex", pkg: "text/template/parse", type: ptrType$9, tag: ""}, {prop: "token", name: "token", pkg: "text/template/parse", type: arrayType, tag: ""}, {prop: "peekCount", name: "peekCount", pkg: "text/template/parse", type: $Int, tag: ""}, {prop: "vars", name: "vars", pkg: "text/template/parse", type: sliceType$5, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_parse = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = list.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = fmt.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = strconv.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = unicode.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		key = (_map = new $Map(), _key = ".", _map[_key] = { k: _key, v: 21 }, _key = "define", _map[_key] = { k: _key, v: 22 }, _key = "else", _map[_key] = { k: _key, v: 23 }, _key = "end", _map[_key] = { k: _key, v: 24 }, _key = "if", _map[_key] = { k: _key, v: 25 }, _key = "range", _map[_key] = { k: _key, v: 27 }, _key = "nil", _map[_key] = { k: _key, v: 26 }, _key = "template", _map[_key] = { k: _key, v: 28 }, _key = "with", _map[_key] = { k: _key, v: 29 }, _map);
		textFormat = "%s";
		/* */ } return; } }; $init_parse.$blocking = true; return $init_parse;
	};
	return $pkg;
})();
$packages["text/template"] = (function() {
	var $pkg = {}, bytes, errors, fmt, io, ioutil, url, filepath, reflect, runtime, sort, strings, parse, unicode, utf8, state, variable, rvs, rvInts, rvUints, rvFloats, rvStrings, FuncMap, common, Template, ptrType, ptrType$1, sliceType, sliceType$1, funcType, funcType$1, funcType$2, funcType$3, funcType$4, funcType$5, funcType$6, funcType$7, funcType$8, funcType$9, sliceType$2, ptrType$2, sliceType$3, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, ptrType$16, ptrType$17, ptrType$18, ptrType$19, ptrType$20, sliceType$4, sliceType$5, ptrType$21, ptrType$22, sliceType$6, mapType, sliceType$7, ptrType$23, ptrType$24, ptrType$25, ptrType$26, ptrType$27, ptrType$28, ptrType$29, mapType$1, mapType$2, mapType$3, ptrType$30, ptrType$31, sliceType$8, ptrType$32, zero, errorType, fmtStringerType, builtins, builtinFuncs, errBadComparisonType, errBadComparison, errNoComparison, htmlQuot, htmlApos, htmlAmp, htmlLt, htmlGt, jsLowUni, hex, jsBackslash, jsApos, jsQuot, jsLt, jsGt, _map, _key, doublePercent, errRecover, isTrue, isHexConstant, canBeNil, indirect, printableValue, sortKeys, createValueFuncs, addValueFuncs, addFuncs, goodFunc, findFunction, index, length, call, truth, and, or, not, basicKind, eq, ne, lt, le, gt, ge, HTMLEscape, HTMLEscapeString, HTMLEscaper, JSEscape, JSEscapeString, jsIsSpecial, JSEscaper, URLQueryEscaper, evalArgs, parseFiles, parseGlob, New;
	bytes = $packages["bytes"];
	errors = $packages["errors"];
	fmt = $packages["fmt"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	url = $packages["net/url"];
	filepath = $packages["path/filepath"];
	reflect = $packages["reflect"];
	runtime = $packages["runtime"];
	sort = $packages["sort"];
	strings = $packages["strings"];
	parse = $packages["text/template/parse"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	state = $pkg.state = $newType(0, $kindStruct, "template.state", "state", "text/template", function(tmpl_, wr_, node_, vars_) {
		this.$val = this;
		this.tmpl = tmpl_ !== undefined ? tmpl_ : ptrType$2.nil;
		this.wr = wr_ !== undefined ? wr_ : $ifaceNil;
		this.node = node_ !== undefined ? node_ : $ifaceNil;
		this.vars = vars_ !== undefined ? vars_ : sliceType$3.nil;
	});
	variable = $pkg.variable = $newType(0, $kindStruct, "template.variable", "variable", "text/template", function(name_, value_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.value = value_ !== undefined ? value_ : new reflect.Value.ptr();
	});
	rvs = $pkg.rvs = $newType(12, $kindSlice, "template.rvs", "rvs", "text/template", null);
	rvInts = $pkg.rvInts = $newType(0, $kindStruct, "template.rvInts", "rvInts", "text/template", function(rvs_) {
		this.$val = this;
		this.rvs = rvs_ !== undefined ? rvs_ : rvs.nil;
	});
	rvUints = $pkg.rvUints = $newType(0, $kindStruct, "template.rvUints", "rvUints", "text/template", function(rvs_) {
		this.$val = this;
		this.rvs = rvs_ !== undefined ? rvs_ : rvs.nil;
	});
	rvFloats = $pkg.rvFloats = $newType(0, $kindStruct, "template.rvFloats", "rvFloats", "text/template", function(rvs_) {
		this.$val = this;
		this.rvs = rvs_ !== undefined ? rvs_ : rvs.nil;
	});
	rvStrings = $pkg.rvStrings = $newType(0, $kindStruct, "template.rvStrings", "rvStrings", "text/template", function(rvs_) {
		this.$val = this;
		this.rvs = rvs_ !== undefined ? rvs_ : rvs.nil;
	});
	FuncMap = $pkg.FuncMap = $newType(4, $kindMap, "template.FuncMap", "FuncMap", "text/template", null);
	common = $pkg.common = $newType(0, $kindStruct, "template.common", "common", "text/template", function(tmpl_, parseFuncs_, execFuncs_) {
		this.$val = this;
		this.tmpl = tmpl_ !== undefined ? tmpl_ : false;
		this.parseFuncs = parseFuncs_ !== undefined ? parseFuncs_ : false;
		this.execFuncs = execFuncs_ !== undefined ? execFuncs_ : false;
	});
	Template = $pkg.Template = $newType(0, $kindStruct, "template.Template", "Template", "text/template", function(name_, Tree_, common_, leftDelim_, rightDelim_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.Tree = Tree_ !== undefined ? Tree_ : ptrType$3.nil;
		this.common = common_ !== undefined ? common_ : ptrType$21.nil;
		this.leftDelim = leftDelim_ !== undefined ? leftDelim_ : "";
		this.rightDelim = rightDelim_ !== undefined ? rightDelim_ : "";
	});
		ptrType = $ptrType($error);
		ptrType$1 = $ptrType(fmt.Stringer);
		sliceType = $sliceType($Uint8);
		sliceType$1 = $sliceType($emptyInterface);
		funcType = $funcType([$emptyInterface, sliceType$1], [$emptyInterface], true);
		funcType$1 = $funcType([$emptyInterface, sliceType$1], [$emptyInterface, $error], true);
		funcType$2 = $funcType([sliceType$1], [$String], true);
		funcType$3 = $funcType([$emptyInterface, sliceType$1], [$emptyInterface, $error], true);
		funcType$4 = $funcType([$emptyInterface], [$Int, $error], false);
		funcType$5 = $funcType([$emptyInterface], [$Bool], false);
		funcType$6 = $funcType([sliceType$1], [$String], true);
		funcType$7 = $funcType([$String, sliceType$1], [$String], true);
		funcType$8 = $funcType([$emptyInterface, sliceType$1], [$Bool, $error], true);
		funcType$9 = $funcType([$emptyInterface, $emptyInterface], [$Bool, $error], false);
		sliceType$2 = $sliceType($String);
		ptrType$2 = $ptrType(Template);
		sliceType$3 = $sliceType(variable);
		ptrType$3 = $ptrType(parse.Tree);
		ptrType$4 = $ptrType(parse.ListNode);
		ptrType$5 = $ptrType(parse.ActionNode);
		ptrType$6 = $ptrType(parse.IfNode);
		ptrType$7 = $ptrType(parse.RangeNode);
		ptrType$8 = $ptrType(parse.TemplateNode);
		ptrType$9 = $ptrType(parse.TextNode);
		ptrType$10 = $ptrType(parse.WithNode);
		ptrType$11 = $ptrType(parse.PipeNode);
		ptrType$12 = $ptrType(parse.FieldNode);
		ptrType$13 = $ptrType(parse.ChainNode);
		ptrType$14 = $ptrType(parse.IdentifierNode);
		ptrType$15 = $ptrType(parse.VariableNode);
		ptrType$16 = $ptrType(parse.BoolNode);
		ptrType$17 = $ptrType(parse.DotNode);
		ptrType$18 = $ptrType(parse.NilNode);
		ptrType$19 = $ptrType(parse.NumberNode);
		ptrType$20 = $ptrType(parse.StringNode);
		sliceType$4 = $sliceType(parse.Node);
		sliceType$5 = $sliceType(reflect.Value);
		ptrType$21 = $ptrType(common);
		ptrType$22 = $ptrType(reflect.rtype);
		sliceType$6 = $sliceType(ptrType$2);
		mapType = $mapType($String, $emptyInterface);
		sliceType$7 = $sliceType(mapType);
		ptrType$23 = $ptrType(parse.CommandNode);
		ptrType$24 = $ptrType(state);
		ptrType$25 = $ptrType(rvs);
		ptrType$26 = $ptrType(rvInts);
		ptrType$27 = $ptrType(rvUints);
		ptrType$28 = $ptrType(rvFloats);
		ptrType$29 = $ptrType(rvStrings);
		mapType$1 = $mapType($String, ptrType$2);
		mapType$2 = $mapType($String, reflect.Value);
		mapType$3 = $mapType($String, ptrType$3);
		ptrType$30 = $ptrType(parse.elseNode);
		ptrType$31 = $ptrType(parse.endNode);
		sliceType$8 = $sliceType(ptrType$15);
		ptrType$32 = $ptrType(parse.lexer);
	state.ptr.prototype.push = function(name, value) {
		var s;
		s = this;
		value = value;
		s.vars = $append(s.vars, new variable.ptr(name, $clone(value, reflect.Value)));
	};
	state.prototype.push = function(name, value) { return this.$val.push(name, value); };
	state.ptr.prototype.mark = function() {
		var s;
		s = this;
		return s.vars.$length;
	};
	state.prototype.mark = function() { return this.$val.mark(); };
	state.ptr.prototype.pop = function(mark) {
		var s;
		s = this;
		s.vars = $subslice(s.vars, 0, mark);
	};
	state.prototype.pop = function(mark) { return this.$val.pop(mark); };
	state.ptr.prototype.setVar = function(n, value) {
		var s, x, x$1;
		s = this;
		value = value;
		(x = s.vars, x$1 = s.vars.$length - n >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).value = value;
	};
	state.prototype.setVar = function(n, value) { return this.$val.setVar(n, value); };
	state.ptr.prototype.varValue = function(name) {
		var i, s, x, x$1;
		s = this;
		i = s.mark() - 1 >> 0;
		while (i >= 0) {
			if ((x = s.vars, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).name === name) {
				return (x$1 = s.vars, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).value;
			}
			i = i - (1) >> 0;
		}
		s.errorf("undefined variable: %s", new sliceType$1([new $String(name)]));
		return zero;
	};
	state.prototype.varValue = function(name) { return this.$val.varValue(name); };
	state.ptr.prototype.at = function(node) {
		var s;
		s = this;
		s.node = node;
	};
	state.prototype.at = function(node) { return this.$val.at(node); };
	doublePercent = function(str) {
		if (strings.Contains(str, "%")) {
			str = strings.Replace(str, "%", "%%", -1);
		}
		return str;
	};
	state.ptr.prototype.errorf = function(format, args) {
		var _tuple, context, location, name, s;
		s = this;
		name = doublePercent(s.tmpl.Name());
		if ($interfaceIsEqual(s.node, $ifaceNil)) {
			format = fmt.Sprintf("template: %s: %s", new sliceType$1([new $String(name), new $String(format)]));
		} else {
			_tuple = s.tmpl.Tree.ErrorContext(s.node); location = _tuple[0]; context = _tuple[1];
			format = fmt.Sprintf("template: %s: executing %q at <%s>: %s", new sliceType$1([new $String(location), new $String(name), new $String(doublePercent(context)), new $String(format)]));
		}
		$panic(fmt.Errorf(format, args));
	};
	state.prototype.errorf = function(format, args) { return this.$val.errorf(format, args); };
	errRecover = function(errp) {
		var _ref, e, err;
		e = $recover();
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_ref = e;
			if ($assertType(_ref, runtime.Error, true)[1]) {
				err = _ref;
				$panic(e);
			} else if ($assertType(_ref, $error, true)[1]) {
				err = _ref;
				errp.$set(err);
			} else {
				err = _ref;
				$panic(e);
			}
		}
	};
	Template.ptr.prototype.ExecuteTemplate = function(wr, name, data) {
		var _entry, t, tmpl;
		t = this;
		tmpl = (_entry = t.common.tmpl[name], _entry !== undefined ? _entry.v : ptrType$2.nil);
		if (tmpl === ptrType$2.nil) {
			return fmt.Errorf("template: no template %q associated with template %q", new sliceType$1([new $String(name), new $String(t.name)]));
		}
		return tmpl.Execute(wr, data);
	};
	Template.prototype.ExecuteTemplate = function(wr, name, data) { return this.$val.ExecuteTemplate(wr, name, data); };
	Template.ptr.prototype.Execute = function(wr, data) {
		var $deferred = [], $err = null, _entry, _i, _keys, _ref, b, err = $ifaceNil, name, s, state$1, t, tmpl, value;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		$deferred.push([errRecover, [new ptrType(function() { return err; }, function($v) { err = $v; })]]);
		value = reflect.ValueOf(data);
		state$1 = new state.ptr(t, wr, $ifaceNil, new sliceType$3([new variable.ptr("$", $clone(value, reflect.Value))]));
		t.init();
		if (t.Tree === ptrType$3.nil || t.Tree.Root === ptrType$4.nil) {
			b = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
			_ref = t.common.tmpl;
			_i = 0;
			_keys = $keys(_ref);
			while (_i < _keys.length) {
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					continue;
				}
				name = _entry.k;
				tmpl = _entry.v;
				if (tmpl.Tree === ptrType$3.nil || tmpl.Tree.Root === ptrType$4.nil) {
					_i++;
					continue;
				}
				if (b.Len() > 0) {
					b.WriteString(", ");
				}
				fmt.Fprintf(b, "%q", new sliceType$1([new $String(name)]));
				_i++;
			}
			s = "";
			if (b.Len() > 0) {
				s = "; defined templates are: " + b.String();
			}
			state$1.errorf("%q is an incomplete or empty template%s", new sliceType$1([new $String(t.Name()), new $String(s)]));
		}
		state$1.walk(value, t.Tree.Root);
		return err;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return err; }
	};
	Template.prototype.Execute = function(wr, data) { return this.$val.Execute(wr, data); };
	state.ptr.prototype.walk = function(dot, node) {
		var _i, _ref, _ref$1, _tuple, err, node$1, node$2, s, val;
		s = this;
		dot = dot;
		s.at(node);
		_ref = node;
		if ($assertType(_ref, ptrType$5, true)[1]) {
			node$1 = _ref.$val;
			val = s.evalPipeline(dot, node$1.Pipe);
			if (node$1.Pipe.Decl.$length === 0) {
				s.printValue(node$1, val);
			}
		} else if ($assertType(_ref, ptrType$6, true)[1]) {
			node$1 = _ref.$val;
			s.walkIfOrWith(10, dot, node$1.BranchNode.Pipe, node$1.BranchNode.List, node$1.BranchNode.ElseList);
		} else if ($assertType(_ref, ptrType$4, true)[1]) {
			node$1 = _ref.$val;
			_ref$1 = node$1.Nodes;
			_i = 0;
			while (_i < _ref$1.$length) {
				node$2 = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				s.walk(dot, node$2);
				_i++;
			}
		} else if ($assertType(_ref, ptrType$7, true)[1]) {
			node$1 = _ref.$val;
			s.walkRange(dot, node$1);
		} else if ($assertType(_ref, ptrType$8, true)[1]) {
			node$1 = _ref.$val;
			s.walkTemplate(dot, node$1);
		} else if ($assertType(_ref, ptrType$9, true)[1]) {
			node$1 = _ref.$val;
			_tuple = s.wr.Write(node$1.Text); err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				s.errorf("%s", new sliceType$1([err]));
			}
		} else if ($assertType(_ref, ptrType$10, true)[1]) {
			node$1 = _ref.$val;
			s.walkIfOrWith(19, dot, node$1.BranchNode.Pipe, node$1.BranchNode.List, node$1.BranchNode.ElseList);
		} else {
			node$1 = _ref;
			s.errorf("unknown node: %s", new sliceType$1([node$1]));
		}
	};
	state.prototype.walk = function(dot, node) { return this.$val.walk(dot, node); };
	state.ptr.prototype.walkIfOrWith = function(typ, dot, pipe, list, elseList) {
		var $deferred = [], $err = null, _tuple, ok, s, truth$1, val;
		/* */ try { $deferFrames.push($deferred);
		s = this;
		dot = dot;
		$deferred.push([$methodVal(s, "pop"), [s.mark()]]);
		val = s.evalPipeline(dot, pipe);
		_tuple = isTrue(val); truth$1 = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			s.errorf("if/with can't use %v", new sliceType$1([new val.constructor.elem(val)]));
		}
		if (truth$1) {
			if (typ === 19) {
				s.walk(val, list);
			} else {
				s.walk(dot, list);
			}
		} else if (!(elseList === ptrType$4.nil)) {
			s.walk(dot, elseList);
		}
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	state.prototype.walkIfOrWith = function(typ, dot, pipe, list, elseList) { return this.$val.walkIfOrWith(typ, dot, pipe, list, elseList); };
	isTrue = function(val) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, ok = false, truth$1 = false, x, x$1, x$2;
		val = val;
		if (!val.IsValid()) {
			_tmp = false; _tmp$1 = true; truth$1 = _tmp; ok = _tmp$1;
			return [truth$1, ok];
		}
		_ref = val.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 24) {
			truth$1 = val.Len() > 0;
		} else if (_ref === 1) {
			truth$1 = val.Bool();
		} else if (_ref === 15 || _ref === 16) {
			truth$1 = !((x = val.Complex(), (x.$real === 0 && x.$imag === 0)));
		} else if (_ref === 18 || _ref === 19 || _ref === 22 || _ref === 20) {
			truth$1 = !val.IsNil();
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			truth$1 = !((x$1 = val.Int(), (x$1.$high === 0 && x$1.$low === 0)));
		} else if (_ref === 13 || _ref === 14) {
			truth$1 = !((val.Float() === 0));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			truth$1 = !((x$2 = val.Uint(), (x$2.$high === 0 && x$2.$low === 0)));
		} else if (_ref === 25) {
			truth$1 = true;
		} else {
			return [truth$1, ok];
		}
		_tmp$2 = truth$1; _tmp$3 = true; truth$1 = _tmp$2; ok = _tmp$3;
		return [truth$1, ok];
	};
	state.ptr.prototype.walkRange = function(dot, r) {
		var $deferred = [], $err = null, _i, _ref, _ref$1, _tuple, _tuple$1, elem, i, i$1, key, mark, ok, oneIteration, s, val;
		/* */ try { $deferFrames.push($deferred);
		s = this;
		dot = dot;
		s.at(r);
		$deferred.push([$methodVal(s, "pop"), [s.mark()]]);
		_tuple = indirect(s.evalPipeline(dot, r.BranchNode.Pipe)); val = _tuple[0];
		mark = s.mark();
		oneIteration = (function(index$1, elem) {
			if (r.BranchNode.Pipe.Decl.$length > 0) {
				s.setVar(1, elem);
			}
			if (r.BranchNode.Pipe.Decl.$length > 1) {
				s.setVar(2, index$1);
			}
			s.walk(elem, r.BranchNode.List);
			s.pop(mark);
		});
		_ref = val.Kind();
		switch (0) { default: if (_ref === 17 || _ref === 23) {
			if (val.Len() === 0) {
				break;
			}
			i = 0;
			while (i < val.Len()) {
				oneIteration(reflect.ValueOf(new $Int(i)), val.Index(i));
				i = i + (1) >> 0;
			}
			return;
		} else if (_ref === 21) {
			if (val.Len() === 0) {
				break;
			}
			_ref$1 = sortKeys(val.MapKeys());
			_i = 0;
			while (_i < _ref$1.$length) {
				key = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				oneIteration(key, val.MapIndex(key));
				_i++;
			}
			return;
		} else if (_ref === 18) {
			if (val.IsNil()) {
				break;
			}
			i$1 = 0;
			while (true) {
				_tuple$1 = val.Recv(); elem = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					break;
				}
				oneIteration(reflect.ValueOf(new $Int(i$1)), elem);
				i$1 = i$1 + (1) >> 0;
			}
			if (i$1 === 0) {
				break;
			}
			return;
		} else if (_ref === 0) {
			break;
		} else {
			s.errorf("range can't iterate over %v", new sliceType$1([new val.constructor.elem(val)]));
		} }
		if (!(r.BranchNode.ElseList === ptrType$4.nil)) {
			s.walk(dot, r.BranchNode.ElseList);
		}
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	state.prototype.walkRange = function(dot, r) { return this.$val.walkRange(dot, r); };
	state.ptr.prototype.walkTemplate = function(dot, t) {
		var _entry, newState, s, tmpl;
		s = this;
		dot = dot;
		s.at(t);
		tmpl = (_entry = s.tmpl.common.tmpl[t.Name], _entry !== undefined ? _entry.v : ptrType$2.nil);
		if (tmpl === ptrType$2.nil) {
			s.errorf("template %q not defined", new sliceType$1([new $String(t.Name)]));
		}
		dot = s.evalPipeline(dot, t.Pipe);
		newState = $clone(s, state);
		newState.tmpl = tmpl;
		newState.vars = new sliceType$3([new variable.ptr("$", $clone(dot, reflect.Value))]);
		newState.walk(dot, tmpl.Tree.Root);
	};
	state.prototype.walkTemplate = function(dot, t) { return this.$val.walkTemplate(dot, t); };
	state.ptr.prototype.evalPipeline = function(dot, pipe) {
		var _i, _i$1, _ref, _ref$1, cmd, s, value = new reflect.Value.ptr(), variable$1, x;
		s = this;
		dot = dot;
		if (pipe === ptrType$11.nil) {
			return value;
		}
		s.at(pipe);
		_ref = pipe.Cmds;
		_i = 0;
		while (_i < _ref.$length) {
			cmd = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			value = s.evalCommand(dot, cmd, value);
			if ((value.Kind() === 20) && (value.Type().NumMethod() === 0)) {
				value = reflect.ValueOf(value.Interface());
			}
			_i++;
		}
		_ref$1 = pipe.Decl;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			variable$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			s.push((x = variable$1.Ident, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), value);
			_i$1++;
		}
		value = value;
		return value;
	};
	state.prototype.evalPipeline = function(dot, pipe) { return this.$val.evalPipeline(dot, pipe); };
	state.ptr.prototype.notAFunction = function(args, final$1) {
		var s;
		s = this;
		final$1 = final$1;
		if (args.$length > 1 || final$1.IsValid()) {
			s.errorf("can't give argument to non-function %s", new sliceType$1([((0 < 0 || 0 >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0])]));
		}
	};
	state.prototype.notAFunction = function(args, final$1) { return this.$val.notAFunction(args, final$1); };
	state.ptr.prototype.evalCommand = function(dot, cmd, final$1) {
		var _ref, _ref$1, firstWord, n, s, word, x;
		s = this;
		final$1 = final$1;
		dot = dot;
		firstWord = (x = cmd.Args, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		_ref = firstWord;
		if ($assertType(_ref, ptrType$12, true)[1]) {
			n = _ref.$val;
			return s.evalFieldNode(dot, n, cmd.Args, final$1);
		} else if ($assertType(_ref, ptrType$13, true)[1]) {
			n = _ref.$val;
			return s.evalChainNode(dot, n, cmd.Args, final$1);
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			n = _ref.$val;
			return s.evalFunction(dot, n, cmd, cmd.Args, final$1);
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			n = _ref.$val;
			return s.evalPipeline(dot, n);
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			n = _ref.$val;
			return s.evalVariableNode(dot, n, cmd.Args, final$1);
		}
		s.at(firstWord);
		s.notAFunction(cmd.Args, final$1);
		_ref$1 = firstWord;
		if ($assertType(_ref$1, ptrType$16, true)[1]) {
			word = _ref$1.$val;
			return reflect.ValueOf(new $Bool(word.True));
		} else if ($assertType(_ref$1, ptrType$17, true)[1]) {
			word = _ref$1.$val;
			return dot;
		} else if ($assertType(_ref$1, ptrType$18, true)[1]) {
			word = _ref$1.$val;
			s.errorf("nil is not a command", new sliceType$1([]));
		} else if ($assertType(_ref$1, ptrType$19, true)[1]) {
			word = _ref$1.$val;
			return s.idealConstant(word);
		} else if ($assertType(_ref$1, ptrType$20, true)[1]) {
			word = _ref$1.$val;
			return reflect.ValueOf(new $String(word.Text));
		}
		s.errorf("can't evaluate command %q", new sliceType$1([firstWord]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalCommand = function(dot, cmd, final$1) { return this.$val.evalCommand(dot, cmd, final$1); };
	state.ptr.prototype.idealConstant = function(constant) {
		var n, s, x, x$1, x$2;
		s = this;
		s.at(constant);
		if (constant.IsComplex) {
			return reflect.ValueOf(constant.Complex128);
		} else if (constant.IsFloat && !isHexConstant(constant.Text) && strings.IndexAny(constant.Text, ".eE") >= 0) {
			return reflect.ValueOf(new $Float64(constant.Float64));
		} else if (constant.IsInt) {
			n = ((x = constant.Int64, x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
			if (!((x$1 = new $Int64(0, n), x$2 = constant.Int64, (x$1.$high === x$2.$high && x$1.$low === x$2.$low)))) {
				s.errorf("%s overflows int", new sliceType$1([new $String(constant.Text)]));
			}
			return reflect.ValueOf(new $Int(n));
		} else if (constant.IsUint) {
			s.errorf("%s overflows int", new sliceType$1([new $String(constant.Text)]));
		}
		return zero;
	};
	state.prototype.idealConstant = function(constant) { return this.$val.idealConstant(constant); };
	isHexConstant = function(s) {
		return s.length > 2 && (s.charCodeAt(0) === 48) && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88));
	};
	state.ptr.prototype.evalFieldNode = function(dot, field, args, final$1) {
		var s;
		s = this;
		final$1 = final$1;
		dot = dot;
		s.at(field);
		return s.evalFieldChain(dot, dot, field, field.Ident, args, final$1);
	};
	state.prototype.evalFieldNode = function(dot, field, args, final$1) { return this.$val.evalFieldNode(dot, field, args, final$1); };
	state.ptr.prototype.evalChainNode = function(dot, chain, args, final$1) {
		var pipe, s;
		s = this;
		final$1 = final$1;
		dot = dot;
		s.at(chain);
		pipe = s.evalArg(dot, $ifaceNil, chain.Node);
		if (chain.Field.$length === 0) {
			s.errorf("internal error: no fields in evalChainNode", new sliceType$1([]));
		}
		return s.evalFieldChain(dot, pipe, chain, chain.Field, args, final$1);
	};
	state.prototype.evalChainNode = function(dot, chain, args, final$1) { return this.$val.evalChainNode(dot, chain, args, final$1); };
	state.ptr.prototype.evalVariableNode = function(dot, variable$1, args, final$1) {
		var s, value, x;
		s = this;
		final$1 = final$1;
		dot = dot;
		s.at(variable$1);
		value = s.varValue((x = variable$1.Ident, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])));
		if (variable$1.Ident.$length === 1) {
			s.notAFunction(args, final$1);
			return value;
		}
		return s.evalFieldChain(dot, value, variable$1, $subslice(variable$1.Ident, 1), args, final$1);
	};
	state.prototype.evalVariableNode = function(dot, variable$1, args, final$1) { return this.$val.evalVariableNode(dot, variable$1, args, final$1); };
	state.ptr.prototype.evalFieldChain = function(dot, receiver, node, ident, args, final$1) {
		var i, n, s, x;
		s = this;
		final$1 = final$1;
		receiver = receiver;
		dot = dot;
		n = ident.$length;
		i = 0;
		while (i < (n - 1 >> 0)) {
			receiver = s.evalField(dot, ((i < 0 || i >= ident.$length) ? $throwRuntimeError("index out of range") : ident.$array[ident.$offset + i]), node, sliceType$4.nil, zero, receiver);
			i = i + (1) >> 0;
		}
		return s.evalField(dot, (x = n - 1 >> 0, ((x < 0 || x >= ident.$length) ? $throwRuntimeError("index out of range") : ident.$array[ident.$offset + x])), node, args, final$1, receiver);
	};
	state.prototype.evalFieldChain = function(dot, receiver, node, ident, args, final$1) { return this.$val.evalFieldChain(dot, receiver, node, ident, args, final$1); };
	state.ptr.prototype.evalFunction = function(dot, node, cmd, args, final$1) {
		var _tuple, function$1, name, ok, s;
		s = this;
		final$1 = final$1;
		dot = dot;
		s.at(node);
		name = node.Ident;
		_tuple = findFunction(name, s.tmpl); function$1 = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			s.errorf("%q is not a defined function", new sliceType$1([new $String(name)]));
		}
		return s.evalCall(dot, function$1, cmd, name, args, final$1);
	};
	state.prototype.evalFunction = function(dot, node, cmd, args, final$1) { return this.$val.evalFunction(dot, node, cmd, args, final$1); };
	state.ptr.prototype.evalField = function(dot, fieldName, node, args, final$1, receiver) {
		var _ref, _tuple, _tuple$1, _tuple$2, field, hasArgs, isNil, method, nameVal, ok, ptr, s, tField, typ;
		s = this;
		receiver = receiver;
		final$1 = final$1;
		dot = dot;
		if (!receiver.IsValid()) {
			return zero;
		}
		typ = receiver.Type();
		_tuple = indirect(receiver); receiver = _tuple[0];
		ptr = receiver;
		if (!((ptr.Kind() === 20)) && ptr.CanAddr()) {
			ptr = ptr.Addr();
		}
		method = ptr.MethodByName(fieldName);
		if (method.IsValid()) {
			return s.evalCall(dot, method, node, fieldName, args, final$1);
		}
		hasArgs = args.$length > 1 || final$1.IsValid();
		_tuple$1 = indirect(receiver); receiver = _tuple$1[0]; isNil = _tuple$1[1];
		if (isNil) {
			s.errorf("nil pointer evaluating %s.%s", new sliceType$1([typ, new $String(fieldName)]));
		}
		_ref = receiver.Kind();
		if (_ref === 25) {
			_tuple$2 = receiver.Type().FieldByName(fieldName); tField = $clone(_tuple$2[0], reflect.StructField); ok = _tuple$2[1];
			if (ok) {
				field = receiver.FieldByIndex(tField.Index);
				if (!(tField.PkgPath === "")) {
					s.errorf("%s is an unexported field of struct type %s", new sliceType$1([new $String(fieldName), typ]));
				}
				if (hasArgs) {
					s.errorf("%s has arguments but cannot be invoked as function", new sliceType$1([new $String(fieldName)]));
				}
				return field;
			}
			s.errorf("%s is not a field of struct type %s", new sliceType$1([new $String(fieldName), typ]));
		} else if (_ref === 21) {
			nameVal = reflect.ValueOf(new $String(fieldName));
			if (nameVal.Type().AssignableTo(receiver.Type().Key())) {
				if (hasArgs) {
					s.errorf("%s is not a method but has arguments", new sliceType$1([new $String(fieldName)]));
				}
				return receiver.MapIndex(nameVal);
			}
		}
		s.errorf("can't evaluate field %s in type %s", new sliceType$1([new $String(fieldName), typ]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalField = function(dot, fieldName, node, args, final$1, receiver) { return this.$val.evalField(dot, fieldName, node, args, final$1, receiver); };
	state.ptr.prototype.evalCall = function(dot, fun, node, name, args, final$1) {
		var argType, argv, i, numFixed, numIn, result, s, t, typ;
		s = this;
		final$1 = final$1;
		fun = fun;
		dot = dot;
		if (!(args === sliceType$4.nil)) {
			args = $subslice(args, 1);
		}
		typ = fun.Type();
		numIn = args.$length;
		if (final$1.IsValid()) {
			numIn = numIn + (1) >> 0;
		}
		numFixed = args.$length;
		if (typ.IsVariadic()) {
			numFixed = typ.NumIn() - 1 >> 0;
			if (numIn < numFixed) {
				s.errorf("wrong number of args for %s: want at least %d got %d", new sliceType$1([new $String(name), new $Int((typ.NumIn() - 1 >> 0)), new $Int(args.$length)]));
			}
		} else if (numIn < (typ.NumIn() - 1 >> 0) || !typ.IsVariadic() && !((numIn === typ.NumIn()))) {
			s.errorf("wrong number of args for %s: want %d got %d", new sliceType$1([new $String(name), new $Int(typ.NumIn()), new $Int(args.$length)]));
		}
		if (!goodFunc(typ)) {
			s.errorf("can't call method/function %q with %d results", new sliceType$1([new $String(name), new $Int(typ.NumOut())]));
		}
		argv = sliceType$5.make(numIn);
		i = 0;
		while (i < numFixed && i < args.$length) {
			(i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = s.evalArg(dot, typ.In(i), ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]));
			i = i + (1) >> 0;
		}
		if (typ.IsVariadic()) {
			argType = typ.In(typ.NumIn() - 1 >> 0).Elem();
			while (i < args.$length) {
				(i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = s.evalArg(dot, argType, ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]));
				i = i + (1) >> 0;
			}
		}
		if (final$1.IsValid()) {
			t = typ.In(typ.NumIn() - 1 >> 0);
			if (typ.IsVariadic()) {
				t = t.Elem();
			}
			(i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = s.validateType(final$1, t);
		}
		result = fun.Call(argv);
		if ((result.$length === 2) && !((1 < 0 || 1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) {
			s.at(node);
			s.errorf("error calling %s: %s", new sliceType$1([new $String(name), $assertType(((1 < 0 || 1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).Interface(), $error)]));
		}
		return ((0 < 0 || 0 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]);
	};
	state.prototype.evalCall = function(dot, fun, node, name, args, final$1) { return this.$val.evalCall(dot, fun, node, name, args, final$1); };
	canBeNil = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 18 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 22 || _ref === 23) {
			return true;
		}
		return false;
	};
	state.ptr.prototype.validateType = function(value, typ) {
		var s;
		s = this;
		value = value;
		if (!value.IsValid()) {
			if ($interfaceIsEqual(typ, $ifaceNil) || canBeNil(typ)) {
				return reflect.Zero(typ);
			}
			s.errorf("invalid value; expected %s", new sliceType$1([typ]));
		}
		if (!($interfaceIsEqual(typ, $ifaceNil)) && !value.Type().AssignableTo(typ)) {
			if ((value.Kind() === 20) && !value.IsNil()) {
				value = value.Elem();
				if (value.Type().AssignableTo(typ)) {
					return value;
				}
			}
			if ((value.Kind() === 22) && value.Type().Elem().AssignableTo(typ)) {
				value = value.Elem();
				if (!value.IsValid()) {
					s.errorf("dereference of nil pointer of type %s", new sliceType$1([typ]));
				}
			} else if (reflect.PtrTo(value.Type()).AssignableTo(typ) && value.CanAddr()) {
				value = value.Addr();
			} else {
				s.errorf("wrong type for value; expected %s; got %s", new sliceType$1([typ, value.Type()]));
			}
		}
		return value;
	};
	state.prototype.validateType = function(value, typ) { return this.$val.validateType(value, typ); };
	state.ptr.prototype.evalArg = function(dot, typ, n) {
		var _ref, _ref$1, arg, s;
		s = this;
		dot = dot;
		s.at(n);
		_ref = n;
		if ($assertType(_ref, ptrType$17, true)[1]) {
			arg = _ref.$val;
			return s.validateType(dot, typ);
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			arg = _ref.$val;
			if (canBeNil(typ)) {
				return reflect.Zero(typ);
			}
			s.errorf("cannot assign nil to %s", new sliceType$1([typ]));
		} else if ($assertType(_ref, ptrType$12, true)[1]) {
			arg = _ref.$val;
			return s.validateType(s.evalFieldNode(dot, arg, new sliceType$4([n]), zero), typ);
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			arg = _ref.$val;
			return s.validateType(s.evalVariableNode(dot, arg, sliceType$4.nil, zero), typ);
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			arg = _ref.$val;
			return s.validateType(s.evalPipeline(dot, arg), typ);
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			arg = _ref.$val;
			return s.evalFunction(dot, arg, arg, sliceType$4.nil, zero);
		} else if ($assertType(_ref, ptrType$13, true)[1]) {
			arg = _ref.$val;
			return s.validateType(s.evalChainNode(dot, arg, sliceType$4.nil, zero), typ);
		}
		_ref$1 = typ.Kind();
		if (_ref$1 === 1) {
			return s.evalBool(typ, n);
		} else if (_ref$1 === 15 || _ref$1 === 16) {
			return s.evalComplex(typ, n);
		} else if (_ref$1 === 13 || _ref$1 === 14) {
			return s.evalFloat(typ, n);
		} else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) {
			return s.evalInteger(typ, n);
		} else if (_ref$1 === 20) {
			if (typ.NumMethod() === 0) {
				return s.evalEmptyInterface(dot, n);
			}
		} else if (_ref$1 === 24) {
			return s.evalString(typ, n);
		} else if (_ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
			return s.evalUnsignedInteger(typ, n);
		}
		s.errorf("can't handle %s for arg of type %s", new sliceType$1([n, typ]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalArg = function(dot, typ, n) { return this.$val.evalArg(dot, typ, n); };
	state.ptr.prototype.evalBool = function(typ, n) {
		var _tuple, n$1, ok, s, value;
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$16, true); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok) {
			value = reflect.New(typ).Elem();
			value.SetBool(n$1.True);
			return value;
		}
		s.errorf("expected bool; found %s", new sliceType$1([n]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalBool = function(typ, n) { return this.$val.evalBool(typ, n); };
	state.ptr.prototype.evalString = function(typ, n) {
		var _tuple, n$1, ok, s, value;
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$20, true); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok) {
			value = reflect.New(typ).Elem();
			value.SetString(n$1.Text);
			return value;
		}
		s.errorf("expected string; found %s", new sliceType$1([n]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalString = function(typ, n) { return this.$val.evalString(typ, n); };
	state.ptr.prototype.evalInteger = function(typ, n) {
		var _tuple, n$1, ok, s, value;
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$19, true); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok && n$1.IsInt) {
			value = reflect.New(typ).Elem();
			value.SetInt(n$1.Int64);
			return value;
		}
		s.errorf("expected integer; found %s", new sliceType$1([n]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalInteger = function(typ, n) { return this.$val.evalInteger(typ, n); };
	state.ptr.prototype.evalUnsignedInteger = function(typ, n) {
		var _tuple, n$1, ok, s, value;
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$19, true); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok && n$1.IsUint) {
			value = reflect.New(typ).Elem();
			value.SetUint(n$1.Uint64);
			return value;
		}
		s.errorf("expected unsigned integer; found %s", new sliceType$1([n]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalUnsignedInteger = function(typ, n) { return this.$val.evalUnsignedInteger(typ, n); };
	state.ptr.prototype.evalFloat = function(typ, n) {
		var _tuple, n$1, ok, s, value;
		s = this;
		s.at(n);
		_tuple = $assertType(n, ptrType$19, true); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok && n$1.IsFloat) {
			value = reflect.New(typ).Elem();
			value.SetFloat(n$1.Float64);
			return value;
		}
		s.errorf("expected float; found %s", new sliceType$1([n]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalFloat = function(typ, n) { return this.$val.evalFloat(typ, n); };
	state.ptr.prototype.evalComplex = function(typ, n) {
		var _tuple, n$1, ok, s, value;
		s = this;
		_tuple = $assertType(n, ptrType$19, true); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok && n$1.IsComplex) {
			value = reflect.New(typ).Elem();
			value.SetComplex(n$1.Complex128);
			return value;
		}
		s.errorf("expected complex; found %s", new sliceType$1([n]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalComplex = function(typ, n) { return this.$val.evalComplex(typ, n); };
	state.ptr.prototype.evalEmptyInterface = function(dot, n) {
		var _ref, n$1, s;
		s = this;
		dot = dot;
		s.at(n);
		_ref = n;
		if ($assertType(_ref, ptrType$16, true)[1]) {
			n$1 = _ref.$val;
			return reflect.ValueOf(new $Bool(n$1.True));
		} else if ($assertType(_ref, ptrType$17, true)[1]) {
			n$1 = _ref.$val;
			return dot;
		} else if ($assertType(_ref, ptrType$12, true)[1]) {
			n$1 = _ref.$val;
			return s.evalFieldNode(dot, n$1, sliceType$4.nil, zero);
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			n$1 = _ref.$val;
			return s.evalFunction(dot, n$1, n$1, sliceType$4.nil, zero);
		} else if ($assertType(_ref, ptrType$18, true)[1]) {
			n$1 = _ref.$val;
			s.errorf("evalEmptyInterface: nil (can't happen)", new sliceType$1([]));
		} else if ($assertType(_ref, ptrType$19, true)[1]) {
			n$1 = _ref.$val;
			return s.idealConstant(n$1);
		} else if ($assertType(_ref, ptrType$20, true)[1]) {
			n$1 = _ref.$val;
			return reflect.ValueOf(new $String(n$1.Text));
		} else if ($assertType(_ref, ptrType$15, true)[1]) {
			n$1 = _ref.$val;
			return s.evalVariableNode(dot, n$1, sliceType$4.nil, zero);
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			n$1 = _ref.$val;
			return s.evalPipeline(dot, n$1);
		}
		s.errorf("can't handle assignment of %s to empty interface argument", new sliceType$1([n]));
		$panic(new $String("not reached"));
	};
	state.prototype.evalEmptyInterface = function(dot, n) { return this.$val.evalEmptyInterface(dot, n); };
	indirect = function(v) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, isNil = false, rv = new reflect.Value.ptr();
		v = v;
		while ((v.Kind() === 22) || (v.Kind() === 20)) {
			if (v.IsNil()) {
				_tmp = v; _tmp$1 = true; rv = _tmp; isNil = _tmp$1;
				return [rv, isNil];
			}
			if ((v.Kind() === 20) && v.NumMethod() > 0) {
				break;
			}
			v = v.Elem();
		}
		_tmp$2 = v; _tmp$3 = false; rv = _tmp$2; isNil = _tmp$3;
		return [rv, isNil];
	};
	state.ptr.prototype.printValue = function(n, v) {
		var _tuple, iface, ok, s;
		s = this;
		v = v;
		s.at(n);
		_tuple = printableValue(v); iface = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			s.errorf("can't print %s of type %s", new sliceType$1([n, v.Type()]));
		}
		fmt.Fprint(s.wr, new sliceType$1([iface]));
	};
	state.prototype.printValue = function(n, v) { return this.$val.printValue(n, v); };
	printableValue = function(v) {
		var _ref, _tuple;
		v = v;
		if (v.Kind() === 22) {
			_tuple = indirect(v); v = _tuple[0];
		}
		if (!v.IsValid()) {
			return [new $String("<no value>"), true];
		}
		if (!v.Type().Implements(errorType) && !v.Type().Implements(fmtStringerType)) {
			if (v.CanAddr() && (reflect.PtrTo(v.Type()).Implements(errorType) || reflect.PtrTo(v.Type()).Implements(fmtStringerType))) {
				v = v.Addr();
			} else {
				_ref = v.Kind();
				if (_ref === 18 || _ref === 19) {
					return [$ifaceNil, false];
				}
			}
		}
		return [v.Interface(), true];
	};
	rvs.prototype.Len = function() {
		var x;
		x = this;
		return x.$length;
	};
	$ptrType(rvs).prototype.Len = function() { return this.$get().Len(); };
	rvs.prototype.Swap = function(i, j) {
		var _tmp, _tmp$1, x;
		x = this;
		_tmp = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]); _tmp$1 = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]); (i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = _tmp; (j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = _tmp$1;
	};
	$ptrType(rvs).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	rvInts.ptr.prototype.Less = function(i, j) {
		var x, x$1, x$2, x$3, x$4;
		x = $clone(this, rvInts);
		return (x$1 = (x$2 = x.rvs, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Int(), x$3 = (x$4 = x.rvs, ((j < 0 || j >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + j])).Int(), (x$1.$high < x$3.$high || (x$1.$high === x$3.$high && x$1.$low < x$3.$low)));
	};
	rvInts.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	rvUints.ptr.prototype.Less = function(i, j) {
		var x, x$1, x$2, x$3, x$4;
		x = $clone(this, rvUints);
		return (x$1 = (x$2 = x.rvs, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])).Uint(), x$3 = (x$4 = x.rvs, ((j < 0 || j >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + j])).Uint(), (x$1.$high < x$3.$high || (x$1.$high === x$3.$high && x$1.$low < x$3.$low)));
	};
	rvUints.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	rvFloats.ptr.prototype.Less = function(i, j) {
		var x, x$1, x$2;
		x = $clone(this, rvFloats);
		return (x$1 = x.rvs, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).Float() < (x$2 = x.rvs, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])).Float();
	};
	rvFloats.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	rvStrings.ptr.prototype.Less = function(i, j) {
		var x, x$1, x$2;
		x = $clone(this, rvStrings);
		return (x$1 = x.rvs, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).String() < (x$2 = x.rvs, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])).String();
	};
	rvStrings.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	sortKeys = function(v) {
		var _ref, x, x$1, x$2, x$3;
		if (v.$length <= 1) {
			return v;
		}
		_ref = ((0 < 0 || 0 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + 0]).Kind();
		if (_ref === 13 || _ref === 14) {
			sort.Sort((x = new rvFloats.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x.constructor.elem(x)));
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			sort.Sort((x$1 = new rvInts.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x$1.constructor.elem(x$1)));
		} else if (_ref === 24) {
			sort.Sort((x$2 = new rvStrings.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x$2.constructor.elem(x$2)));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			sort.Sort((x$3 = new rvUints.ptr($subslice(new rvs(v.$array), v.$offset, v.$offset + v.$length)), new x$3.constructor.elem(x$3)));
		}
		return v;
	};
	createValueFuncs = function(funcMap) {
		var m;
		m = new $Map();
		addValueFuncs(m, funcMap);
		return m;
	};
	addValueFuncs = function(out, in$1) {
		var _entry, _i, _key$1, _keys, _ref, fn, name, v;
		_ref = in$1;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			name = _entry.k;
			fn = _entry.v;
			v = reflect.ValueOf(fn);
			if (!((v.Kind() === 19))) {
				$panic(new $String("value for " + name + " not a function"));
			}
			if (!goodFunc(v.Type())) {
				$panic(fmt.Errorf("can't install method/function %q with %d results", new sliceType$1([new $String(name), new $Int(v.Type().NumOut())])));
			}
			_key$1 = name; (out || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: $clone(v, reflect.Value) };
			_i++;
		}
	};
	addFuncs = function(out, in$1) {
		var _entry, _i, _key$1, _keys, _ref, fn, name;
		_ref = in$1;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			name = _entry.k;
			fn = _entry.v;
			_key$1 = name; (out || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: fn };
			_i++;
		}
	};
	goodFunc = function(typ) {
		if (typ.NumOut() === 1) {
			return true;
		} else if ((typ.NumOut() === 2) && $interfaceIsEqual(typ.Out(1), errorType)) {
			return true;
		}
		return false;
	};
	findFunction = function(name, tmpl) {
		var _entry, _entry$1, fn, fn$1;
		if (!(tmpl === ptrType$2.nil) && !(tmpl.common === ptrType$21.nil)) {
			fn = (_entry = tmpl.common.execFuncs[name], _entry !== undefined ? _entry.v : new reflect.Value.ptr());
			if (fn.IsValid()) {
				return [fn, true];
			}
		}
		fn$1 = (_entry$1 = builtinFuncs[name], _entry$1 !== undefined ? _entry$1.v : new reflect.Value.ptr());
		if (fn$1.IsValid()) {
			return [fn$1, true];
		}
		return [new reflect.Value.ptr(ptrType$22.nil, 0, 0), false];
	};
	index = function(item, indices) {
		var _i, _ref, _ref$1, _ref$2, _tuple, i, index$1, isNil, v, x, x$1, x$2, x$3;
		v = reflect.ValueOf(item);
		_ref = indices;
		_i = 0;
		while (_i < _ref.$length) {
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			index$1 = reflect.ValueOf(i);
			isNil = false;
			_tuple = indirect(v); v = _tuple[0]; isNil = _tuple[1];
			if (isNil) {
				return [$ifaceNil, fmt.Errorf("index of nil pointer", new sliceType$1([]))];
			}
			_ref$1 = v.Kind();
			if (_ref$1 === 17 || _ref$1 === 23 || _ref$1 === 24) {
				x = new $Int64(0, 0);
				_ref$2 = index$1.Kind();
				if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6) {
					x = index$1.Int();
				} else if (_ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
					x = (x$1 = index$1.Uint(), new $Int64(x$1.$high, x$1.$low));
				} else {
					return [$ifaceNil, fmt.Errorf("cannot index slice/array with type %s", new sliceType$1([index$1.Type()]))];
				}
				if ((x.$high < 0 || (x.$high === 0 && x.$low < 0)) || (x$2 = new $Int64(0, v.Len()), (x.$high > x$2.$high || (x.$high === x$2.$high && x.$low >= x$2.$low)))) {
					return [$ifaceNil, fmt.Errorf("index out of range: %d", new sliceType$1([x]))];
				}
				v = v.Index(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
			} else if (_ref$1 === 21) {
				if (!index$1.IsValid()) {
					index$1 = reflect.Zero(v.Type().Key());
				}
				if (!index$1.Type().AssignableTo(v.Type().Key())) {
					return [$ifaceNil, fmt.Errorf("%s is not index type for %s", new sliceType$1([index$1.Type(), v.Type()]))];
				}
				x$3 = v.MapIndex(index$1);
				if (x$3.IsValid()) {
					v = x$3;
				} else {
					v = reflect.Zero(v.Type().Elem());
				}
			} else {
				return [$ifaceNil, fmt.Errorf("can't index item of type %s", new sliceType$1([v.Type()]))];
			}
			_i++;
		}
		return [v.Interface(), $ifaceNil];
	};
	length = function(item) {
		var _ref, _tuple, isNil, v;
		_tuple = indirect(reflect.ValueOf(item)); v = _tuple[0]; isNil = _tuple[1];
		if (isNil) {
			return [0, fmt.Errorf("len of nil pointer", new sliceType$1([]))];
		}
		_ref = v.Kind();
		if (_ref === 17 || _ref === 18 || _ref === 21 || _ref === 23 || _ref === 24) {
			return [v.Len(), $ifaceNil];
		}
		return [0, fmt.Errorf("len of type %s", new sliceType$1([v.Type()]))];
	};
	call = function(fn, args) {
		var _i, _ref, arg, argType, argv, dddType, i, numIn, result, typ, v, value;
		v = reflect.ValueOf(fn);
		typ = v.Type();
		if (!((typ.Kind() === 19))) {
			return [$ifaceNil, fmt.Errorf("non-function of type %s", new sliceType$1([typ]))];
		}
		if (!goodFunc(typ)) {
			return [$ifaceNil, fmt.Errorf("function called with %d args; should be 1 or 2", new sliceType$1([new $Int(typ.NumOut())]))];
		}
		numIn = typ.NumIn();
		dddType = $ifaceNil;
		if (typ.IsVariadic()) {
			if (args.$length < (numIn - 1 >> 0)) {
				return [$ifaceNil, fmt.Errorf("wrong number of args: got %d want at least %d", new sliceType$1([new $Int(args.$length), new $Int((numIn - 1 >> 0))]))];
			}
			dddType = typ.In(numIn - 1 >> 0).Elem();
		} else {
			if (!((args.$length === numIn))) {
				return [$ifaceNil, fmt.Errorf("wrong number of args: got %d want %d", new sliceType$1([new $Int(args.$length), new $Int(numIn)]))];
			}
		}
		argv = sliceType$5.make(args.$length);
		_ref = args;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			value = reflect.ValueOf(arg);
			argType = $ifaceNil;
			if (!typ.IsVariadic() || i < (numIn - 1 >> 0)) {
				argType = typ.In(i);
			} else {
				argType = dddType;
			}
			if (!value.IsValid() && canBeNil(argType)) {
				value = reflect.Zero(argType);
			}
			if (!value.Type().AssignableTo(argType)) {
				return [$ifaceNil, fmt.Errorf("arg %d has type %s; should be %s", new sliceType$1([new $Int(i), value.Type(), argType]))];
			}
			(i < 0 || i >= argv.$length) ? $throwRuntimeError("index out of range") : argv.$array[argv.$offset + i] = value;
			_i++;
		}
		result = v.Call(argv);
		if ((result.$length === 2) && !((1 < 0 || 1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).IsNil()) {
			return [((0 < 0 || 0 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]).Interface(), $assertType(((1 < 0 || 1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 1]).Interface(), $error)];
		}
		return [((0 < 0 || 0 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + 0]).Interface(), $ifaceNil];
	};
	truth = function(a) {
		var _tuple, t;
		_tuple = isTrue(reflect.ValueOf(a)); t = _tuple[0];
		return t;
	};
	and = function(arg0, args) {
		var _i, _ref, i;
		if (!truth(arg0)) {
			return arg0;
		}
		_ref = args;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			arg0 = ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]);
			if (!truth(arg0)) {
				break;
			}
			_i++;
		}
		return arg0;
	};
	or = function(arg0, args) {
		var _i, _ref, i;
		if (truth(arg0)) {
			return arg0;
		}
		_ref = args;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			arg0 = ((i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i]);
			if (truth(arg0)) {
				break;
			}
			_i++;
		}
		return arg0;
	};
	not = function(arg) {
		var _tuple, truth$1 = false;
		_tuple = isTrue(reflect.ValueOf(arg)); truth$1 = _tuple[0];
		truth$1 = !truth$1;
		return truth$1;
	};
	basicKind = function(v) {
		var _ref;
		v = v;
		_ref = v.Kind();
		if (_ref === 1) {
			return [1, $ifaceNil];
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return [3, $ifaceNil];
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return [7, $ifaceNil];
		} else if (_ref === 13 || _ref === 14) {
			return [4, $ifaceNil];
		} else if (_ref === 15 || _ref === 16) {
			return [2, $ifaceNil];
		} else if (_ref === 24) {
			return [6, $ifaceNil];
		}
		return [0, errBadComparisonType];
	};
	eq = function(arg1, arg2) {
		var _i, _ref, _ref$1, _tuple, _tuple$1, arg, err, err$1, k1, k2, truth$1, v1, v2, x, x$1, x$10, x$11, x$12, x$13, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		v1 = reflect.ValueOf(arg1);
		_tuple = basicKind(v1); k1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		if (arg2.$length === 0) {
			return [false, errNoComparison];
		}
		_ref = arg2;
		_i = 0;
		while (_i < _ref.$length) {
			arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			v2 = reflect.ValueOf(arg);
			_tuple$1 = basicKind(v2); k2 = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [false, err$1];
			}
			truth$1 = false;
			if (!((k1 === k2))) {
				if ((k1 === 3) && (k2 === 7)) {
					truth$1 = (x = v1.Int(), (x.$high > 0 || (x.$high === 0 && x.$low >= 0))) && (x$1 = (x$2 = v1.Int(), new $Uint64(x$2.$high, x$2.$low)), x$3 = v2.Uint(), (x$1.$high === x$3.$high && x$1.$low === x$3.$low));
				} else if ((k1 === 7) && (k2 === 3)) {
					truth$1 = (x$4 = v2.Int(), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0))) && (x$5 = v1.Uint(), x$6 = (x$7 = v2.Int(), new $Uint64(x$7.$high, x$7.$low)), (x$5.$high === x$6.$high && x$5.$low === x$6.$low));
				} else {
					return [false, errBadComparison];
				}
			} else {
				_ref$1 = k1;
				if (_ref$1 === 1) {
					truth$1 = v1.Bool() === v2.Bool();
				} else if (_ref$1 === 2) {
					truth$1 = (x$8 = v1.Complex(), x$9 = v2.Complex(), (x$8.$real === x$9.$real && x$8.$imag === x$9.$imag));
				} else if (_ref$1 === 4) {
					truth$1 = v1.Float() === v2.Float();
				} else if (_ref$1 === 3) {
					truth$1 = (x$10 = v1.Int(), x$11 = v2.Int(), (x$10.$high === x$11.$high && x$10.$low === x$11.$low));
				} else if (_ref$1 === 6) {
					truth$1 = v1.String() === v2.String();
				} else if (_ref$1 === 7) {
					truth$1 = (x$12 = v1.Uint(), x$13 = v2.Uint(), (x$12.$high === x$13.$high && x$12.$low === x$13.$low));
				} else {
					$panic(new $String("invalid kind"));
				}
			}
			if (truth$1) {
				return [true, $ifaceNil];
			}
			_i++;
		}
		return [false, $ifaceNil];
	};
	ne = function(arg1, arg2) {
		var _tuple, equal, err;
		_tuple = eq(arg1, new sliceType$1([arg2])); equal = _tuple[0]; err = _tuple[1];
		return [!equal, err];
	};
	lt = function(arg1, arg2) {
		var _ref, _tuple, _tuple$1, err, k1, k2, truth$1, v1, v2, x, x$1, x$10, x$11, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		v1 = reflect.ValueOf(arg1);
		_tuple = basicKind(v1); k1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		v2 = reflect.ValueOf(arg2);
		_tuple$1 = basicKind(v2); k2 = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		truth$1 = false;
		if (!((k1 === k2))) {
			if ((k1 === 3) && (k2 === 7)) {
				truth$1 = (x = v1.Int(), (x.$high < 0 || (x.$high === 0 && x.$low < 0))) || (x$1 = (x$2 = v1.Int(), new $Uint64(x$2.$high, x$2.$low)), x$3 = v2.Uint(), (x$1.$high < x$3.$high || (x$1.$high === x$3.$high && x$1.$low < x$3.$low)));
			} else if ((k1 === 7) && (k2 === 3)) {
				truth$1 = (x$4 = v2.Int(), (x$4.$high > 0 || (x$4.$high === 0 && x$4.$low >= 0))) && (x$5 = v1.Uint(), x$6 = (x$7 = v2.Int(), new $Uint64(x$7.$high, x$7.$low)), (x$5.$high < x$6.$high || (x$5.$high === x$6.$high && x$5.$low < x$6.$low)));
			} else {
				return [false, errBadComparison];
			}
		} else {
			_ref = k1;
			if (_ref === 1 || _ref === 2) {
				return [false, errBadComparisonType];
			} else if (_ref === 4) {
				truth$1 = v1.Float() < v2.Float();
			} else if (_ref === 3) {
				truth$1 = (x$8 = v1.Int(), x$9 = v2.Int(), (x$8.$high < x$9.$high || (x$8.$high === x$9.$high && x$8.$low < x$9.$low)));
			} else if (_ref === 6) {
				truth$1 = v1.String() < v2.String();
			} else if (_ref === 7) {
				truth$1 = (x$10 = v1.Uint(), x$11 = v2.Uint(), (x$10.$high < x$11.$high || (x$10.$high === x$11.$high && x$10.$low < x$11.$low)));
			} else {
				$panic(new $String("invalid kind"));
			}
		}
		return [truth$1, $ifaceNil];
	};
	le = function(arg1, arg2) {
		var _tuple, err, lessThan;
		_tuple = lt(arg1, arg2); lessThan = _tuple[0]; err = _tuple[1];
		if (lessThan || !($interfaceIsEqual(err, $ifaceNil))) {
			return [lessThan, err];
		}
		return eq(arg1, new sliceType$1([arg2]));
	};
	gt = function(arg1, arg2) {
		var _tuple, err, lessOrEqual;
		_tuple = le(arg1, arg2); lessOrEqual = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		return [!lessOrEqual, $ifaceNil];
	};
	ge = function(arg1, arg2) {
		var _tuple, err, lessThan;
		_tuple = lt(arg1, arg2); lessThan = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [false, err];
		}
		return [!lessThan, $ifaceNil];
	};
	HTMLEscape = $pkg.HTMLEscape = function(w, b) {
		var _i, _ref, _ref$1, c, html, i, last;
		last = 0;
		_ref = b;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			html = sliceType.nil;
			_ref$1 = c;
			if (_ref$1 === 34) {
				html = htmlQuot;
			} else if (_ref$1 === 39) {
				html = htmlApos;
			} else if (_ref$1 === 38) {
				html = htmlAmp;
			} else if (_ref$1 === 60) {
				html = htmlLt;
			} else if (_ref$1 === 62) {
				html = htmlGt;
			} else {
				_i++;
				continue;
			}
			w.Write($subslice(b, last, i));
			w.Write(html);
			last = i + 1 >> 0;
			_i++;
		}
		w.Write($subslice(b, last));
	};
	HTMLEscapeString = $pkg.HTMLEscapeString = function(s) {
		var b;
		if (strings.IndexAny(s, "'\"&<>") < 0) {
			return s;
		}
		b = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		HTMLEscape(b, new sliceType($stringToBytes(s)));
		return b.String();
	};
	HTMLEscaper = $pkg.HTMLEscaper = function(args) {
		return HTMLEscapeString(evalArgs(args));
	};
	JSEscape = $pkg.JSEscape = function(w, b) {
		var _ref, _tmp, _tmp$1, _tuple, b$1, c, i, last, r, size, t;
		last = 0;
		i = 0;
		while (i < b.$length) {
			c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			if (!jsIsSpecial((c >> 0))) {
				i = i + (1) >> 0;
				continue;
			}
			w.Write($subslice(b, last, i));
			if (c < 128) {
				_ref = c;
				if (_ref === 92) {
					w.Write(jsBackslash);
				} else if (_ref === 39) {
					w.Write(jsApos);
				} else if (_ref === 34) {
					w.Write(jsQuot);
				} else if (_ref === 60) {
					w.Write(jsLt);
				} else if (_ref === 62) {
					w.Write(jsGt);
				} else {
					w.Write(jsLowUni);
					_tmp = c >>> 4 << 24 >>> 24; _tmp$1 = (c & 15) >>> 0; t = _tmp; b$1 = _tmp$1;
					w.Write($subslice(hex, t, (t + 1 << 24 >>> 24)));
					w.Write($subslice(hex, b$1, (b$1 + 1 << 24 >>> 24)));
				}
			} else {
				_tuple = utf8.DecodeRune($subslice(b, i)); r = _tuple[0]; size = _tuple[1];
				if (unicode.IsPrint(r)) {
					w.Write($subslice(b, i, (i + size >> 0)));
				} else {
					fmt.Fprintf(w, "\\u%04X", new sliceType$1([new $Int32(r)]));
				}
				i = i + ((size - 1 >> 0)) >> 0;
			}
			last = i + 1 >> 0;
			i = i + (1) >> 0;
		}
		w.Write($subslice(b, last));
	};
	JSEscapeString = $pkg.JSEscapeString = function(s) {
		var b;
		if (strings.IndexFunc(s, jsIsSpecial) < 0) {
			return s;
		}
		b = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		JSEscape(b, new sliceType($stringToBytes(s)));
		return b.String();
	};
	jsIsSpecial = function(r) {
		var _ref;
		_ref = r;
		if (_ref === 92 || _ref === 39 || _ref === 34 || _ref === 60 || _ref === 62) {
			return true;
		}
		return r < 32 || 128 <= r;
	};
	JSEscaper = $pkg.JSEscaper = function(args) {
		return JSEscapeString(evalArgs(args));
	};
	URLQueryEscaper = $pkg.URLQueryEscaper = function(args) {
		return url.QueryEscape(evalArgs(args));
	};
	evalArgs = function(args) {
		var _i, _ref, _tuple, _tuple$1, a, arg, i, ok, ok$1, s;
		ok = false;
		s = "";
		if (args.$length === 1) {
			_tuple = $assertType(((0 < 0 || 0 >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0]), $String, true); s = _tuple[0]; ok = _tuple[1];
		}
		if (!ok) {
			_ref = args;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				arg = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				_tuple$1 = printableValue(reflect.ValueOf(arg)); a = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1) {
					(i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i] = a;
				}
				_i++;
			}
			s = fmt.Sprint(args);
		}
		return s;
	};
	Template.ptr.prototype.ParseFiles = function(filenames) {
		var t;
		t = this;
		return parseFiles(t, filenames);
	};
	Template.prototype.ParseFiles = function(filenames) { return this.$val.ParseFiles(filenames); };
	parseFiles = function(t, filenames) {
		var _i, _ref, _tuple, _tuple$1, b, err, filename, name, s, tmpl;
		if (filenames.$length === 0) {
			return [ptrType$2.nil, fmt.Errorf("template: no files named in call to ParseFiles", new sliceType$1([]))];
		}
		_ref = filenames;
		_i = 0;
		while (_i < _ref.$length) {
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple = ioutil.ReadFile(filename); b = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$2.nil, err];
			}
			s = $bytesToString(b);
			name = filepath.Base(filename);
			tmpl = ptrType$2.nil;
			if (t === ptrType$2.nil) {
				t = New(name);
			}
			if (name === t.Name()) {
				tmpl = t;
			} else {
				tmpl = t.New(name);
			}
			_tuple$1 = tmpl.Parse(s); err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$2.nil, err];
			}
			_i++;
		}
		return [t, $ifaceNil];
	};
	Template.ptr.prototype.ParseGlob = function(pattern) {
		var t;
		t = this;
		return parseGlob(t, pattern);
	};
	Template.prototype.ParseGlob = function(pattern) { return this.$val.ParseGlob(pattern); };
	parseGlob = function(t, pattern) {
		var _tuple, err, filenames;
		_tuple = filepath.Glob(pattern); filenames = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$2.nil, err];
		}
		if (filenames.$length === 0) {
			return [ptrType$2.nil, fmt.Errorf("template: pattern matches no files: %#q", new sliceType$1([new $String(pattern)]))];
		}
		return parseFiles(t, filenames);
	};
	New = $pkg.New = function(name) {
		return new Template.ptr(name, ptrType$3.nil, ptrType$21.nil, "", "");
	};
	Template.ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.name;
	};
	Template.prototype.Name = function() { return this.$val.Name(); };
	Template.ptr.prototype.New = function(name) {
		var t;
		t = this;
		t.init();
		return new Template.ptr(name, ptrType$3.nil, t.common, t.leftDelim, t.rightDelim);
	};
	Template.prototype.New = function(name) { return this.$val.New(name); };
	Template.ptr.prototype.init = function() {
		var t;
		t = this;
		if (t.common === ptrType$21.nil) {
			t.common = new common.ptr();
			t.common.tmpl = new $Map();
			t.common.parseFuncs = new $Map();
			t.common.execFuncs = new $Map();
		}
	};
	Template.prototype.init = function() { return this.$val.init(); };
	Template.ptr.prototype.Clone = function() {
		var _entry, _entry$1, _entry$2, _i, _i$1, _i$2, _key$1, _key$2, _key$3, _key$4, _keys, _keys$1, _keys$2, _ref, _ref$1, _ref$2, k, k$1, k$2, nt, t, tmpl, v, v$1, v$2;
		t = this;
		nt = t.copy(ptrType$21.nil);
		nt.init();
		_key$1 = t.name; (nt.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: nt };
		_ref = t.common.tmpl;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = _entry.v;
			if (k === t.name) {
				_i++;
				continue;
			}
			tmpl = v.copy(nt.common);
			_key$2 = k; (nt.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: tmpl };
			_i++;
		}
		_ref$1 = t.common.parseFuncs;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (_i$1 < _keys$1.length) {
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			k$1 = _entry$1.k;
			v$1 = _entry$1.v;
			_key$3 = k$1; (nt.common.parseFuncs || $throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: v$1 };
			_i$1++;
		}
		_ref$2 = t.common.execFuncs;
		_i$2 = 0;
		_keys$2 = $keys(_ref$2);
		while (_i$2 < _keys$2.length) {
			_entry$2 = _ref$2[_keys$2[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				continue;
			}
			k$2 = _entry$2.k;
			v$2 = _entry$2.v;
			_key$4 = k$2; (nt.common.execFuncs || $throwRuntimeError("assignment to entry in nil map"))[_key$4] = { k: _key$4, v: $clone(v$2, reflect.Value) };
			_i$2++;
		}
		return [nt, $ifaceNil];
	};
	Template.prototype.Clone = function() { return this.$val.Clone(); };
	Template.ptr.prototype.copy = function(c) {
		var nt, t;
		t = this;
		nt = New(t.name);
		nt.Tree = t.Tree;
		nt.common = c;
		nt.leftDelim = t.leftDelim;
		nt.rightDelim = t.rightDelim;
		return nt;
	};
	Template.prototype.copy = function(c) { return this.$val.copy(c); };
	Template.ptr.prototype.AddParseTree = function(name, tree) {
		var _entry, _key$1, nt, t;
		t = this;
		if (!(t.common === ptrType$21.nil) && !((_entry = t.common.tmpl[name], _entry !== undefined ? _entry.v : ptrType$2.nil) === ptrType$2.nil)) {
			return [ptrType$2.nil, fmt.Errorf("template: redefinition of template %q", new sliceType$1([new $String(name)]))];
		}
		nt = t.New(name);
		nt.Tree = tree;
		_key$1 = name; (t.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: nt };
		return [nt, $ifaceNil];
	};
	Template.prototype.AddParseTree = function(name, tree) { return this.$val.AddParseTree(name, tree); };
	Template.ptr.prototype.Templates = function() {
		var _entry, _i, _keys, _ref, m, t, v;
		t = this;
		if (t.common === ptrType$21.nil) {
			return sliceType$6.nil;
		}
		m = sliceType$6.make(0, $keys(t.common.tmpl).length);
		_ref = t.common.tmpl;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			v = _entry.v;
			m = $append(m, v);
			_i++;
		}
		return m;
	};
	Template.prototype.Templates = function() { return this.$val.Templates(); };
	Template.ptr.prototype.Delims = function(left, right) {
		var t;
		t = this;
		t.leftDelim = left;
		t.rightDelim = right;
		return t;
	};
	Template.prototype.Delims = function(left, right) { return this.$val.Delims(left, right); };
	Template.ptr.prototype.Funcs = function(funcMap) {
		var t;
		t = this;
		t.init();
		addValueFuncs(t.common.execFuncs, funcMap);
		addFuncs(t.common.parseFuncs, funcMap);
		return t;
	};
	Template.prototype.Funcs = function(funcMap) { return this.$val.Funcs(funcMap); };
	Template.ptr.prototype.Lookup = function(name) {
		var _entry, t;
		t = this;
		if (t.common === ptrType$21.nil) {
			return ptrType$2.nil;
		}
		return (_entry = t.common.tmpl[name], _entry !== undefined ? _entry.v : ptrType$2.nil);
	};
	Template.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	Template.ptr.prototype.Parse = function(text) {
		var _entry, _i, _keys, _ref, _tuple, _tuple$1, err, err$1, name, replace, t, tmpl, tree, trees;
		t = this;
		t.init();
		_tuple = parse.Parse(t.name, text, t.leftDelim, t.rightDelim, new sliceType$7([t.common.parseFuncs, builtins])); trees = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$2.nil, err];
		}
		_ref = trees;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			name = _entry.k;
			tree = _entry.v;
			tmpl = t;
			if (!(name === t.name)) {
				tmpl = t.New(name);
			}
			_tuple$1 = t.associate(tmpl, tree); replace = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [ptrType$2.nil, err$1];
			} else if (replace) {
				tmpl.Tree = tree;
			}
			tmpl.leftDelim = t.leftDelim;
			tmpl.rightDelim = t.rightDelim;
			_i++;
		}
		return [t, $ifaceNil];
	};
	Template.prototype.Parse = function(text) { return this.$val.Parse(text); };
	Template.ptr.prototype.associate = function(new$1, tree) {
		var _entry, _key$1, name, newIsEmpty, old, oldIsEmpty, t;
		t = this;
		if (!(new$1.common === t.common)) {
			$panic(new $String("internal error: associate not common"));
		}
		name = new$1.name;
		old = (_entry = t.common.tmpl[name], _entry !== undefined ? _entry.v : ptrType$2.nil);
		if (!(old === ptrType$2.nil)) {
			oldIsEmpty = parse.IsEmptyTree(old.Tree.Root);
			newIsEmpty = parse.IsEmptyTree(tree.Root);
			if (newIsEmpty) {
				return [false, $ifaceNil];
			}
			if (!oldIsEmpty) {
				return [false, fmt.Errorf("template: redefinition of template %q", new sliceType$1([new $String(name)]))];
			}
		}
		_key$1 = name; (t.common.tmpl || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: new$1 };
		return [true, $ifaceNil];
	};
	Template.prototype.associate = function(new$1, tree) { return this.$val.associate(new$1, tree); };
	ptrType$24.methods = [{prop: "at", name: "at", pkg: "text/template", type: $funcType([parse.Node], [], false)}, {prop: "errorf", name: "errorf", pkg: "text/template", type: $funcType([$String, sliceType$1], [], true)}, {prop: "evalArg", name: "evalArg", pkg: "text/template", type: $funcType([reflect.Value, reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalBool", name: "evalBool", pkg: "text/template", type: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalCall", name: "evalCall", pkg: "text/template", type: $funcType([reflect.Value, reflect.Value, parse.Node, $String, sliceType$4, reflect.Value], [reflect.Value], false)}, {prop: "evalChainNode", name: "evalChainNode", pkg: "text/template", type: $funcType([reflect.Value, ptrType$13, sliceType$4, reflect.Value], [reflect.Value], false)}, {prop: "evalCommand", name: "evalCommand", pkg: "text/template", type: $funcType([reflect.Value, ptrType$23, reflect.Value], [reflect.Value], false)}, {prop: "evalComplex", name: "evalComplex", pkg: "text/template", type: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalEmptyInterface", name: "evalEmptyInterface", pkg: "text/template", type: $funcType([reflect.Value, parse.Node], [reflect.Value], false)}, {prop: "evalField", name: "evalField", pkg: "text/template", type: $funcType([reflect.Value, $String, parse.Node, sliceType$4, reflect.Value, reflect.Value], [reflect.Value], false)}, {prop: "evalFieldChain", name: "evalFieldChain", pkg: "text/template", type: $funcType([reflect.Value, reflect.Value, parse.Node, sliceType$2, sliceType$4, reflect.Value], [reflect.Value], false)}, {prop: "evalFieldNode", name: "evalFieldNode", pkg: "text/template", type: $funcType([reflect.Value, ptrType$12, sliceType$4, reflect.Value], [reflect.Value], false)}, {prop: "evalFloat", name: "evalFloat", pkg: "text/template", type: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalFunction", name: "evalFunction", pkg: "text/template", type: $funcType([reflect.Value, ptrType$14, parse.Node, sliceType$4, reflect.Value], [reflect.Value], false)}, {prop: "evalInteger", name: "evalInteger", pkg: "text/template", type: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalPipeline", name: "evalPipeline", pkg: "text/template", type: $funcType([reflect.Value, ptrType$11], [reflect.Value], false)}, {prop: "evalString", name: "evalString", pkg: "text/template", type: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalUnsignedInteger", name: "evalUnsignedInteger", pkg: "text/template", type: $funcType([reflect.Type, parse.Node], [reflect.Value], false)}, {prop: "evalVariableNode", name: "evalVariableNode", pkg: "text/template", type: $funcType([reflect.Value, ptrType$15, sliceType$4, reflect.Value], [reflect.Value], false)}, {prop: "idealConstant", name: "idealConstant", pkg: "text/template", type: $funcType([ptrType$19], [reflect.Value], false)}, {prop: "mark", name: "mark", pkg: "text/template", type: $funcType([], [$Int], false)}, {prop: "notAFunction", name: "notAFunction", pkg: "text/template", type: $funcType([sliceType$4, reflect.Value], [], false)}, {prop: "pop", name: "pop", pkg: "text/template", type: $funcType([$Int], [], false)}, {prop: "printValue", name: "printValue", pkg: "text/template", type: $funcType([parse.Node, reflect.Value], [], false)}, {prop: "push", name: "push", pkg: "text/template", type: $funcType([$String, reflect.Value], [], false)}, {prop: "setVar", name: "setVar", pkg: "text/template", type: $funcType([$Int, reflect.Value], [], false)}, {prop: "validateType", name: "validateType", pkg: "text/template", type: $funcType([reflect.Value, reflect.Type], [reflect.Value], false)}, {prop: "varValue", name: "varValue", pkg: "text/template", type: $funcType([$String], [reflect.Value], false)}, {prop: "walk", name: "walk", pkg: "text/template", type: $funcType([reflect.Value, parse.Node], [], false)}, {prop: "walkIfOrWith", name: "walkIfOrWith", pkg: "text/template", type: $funcType([parse.NodeType, reflect.Value, ptrType$11, ptrType$4, ptrType$4], [], false)}, {prop: "walkRange", name: "walkRange", pkg: "text/template", type: $funcType([reflect.Value, ptrType$7], [], false)}, {prop: "walkTemplate", name: "walkTemplate", pkg: "text/template", type: $funcType([reflect.Value, ptrType$8], [], false)}];
	rvs.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	ptrType$25.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	rvInts.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	ptrType$26.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	rvUints.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	ptrType$27.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	rvFloats.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	ptrType$28.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	rvStrings.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	ptrType$29.methods = [{prop: "Len", name: "Len", pkg: "", type: $funcType([], [$Int], false)}, {prop: "Less", name: "Less", pkg: "", type: $funcType([$Int, $Int], [$Bool], false)}, {prop: "Swap", name: "Swap", pkg: "", type: $funcType([$Int, $Int], [], false)}];
	Template.methods = [{prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [ptrType$3], false)}, {prop: "ErrorContext", name: "ErrorContext", pkg: "", type: $funcType([parse.Node], [$String, $String], false)}, {prop: "action", name: "action", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "add", name: "add", pkg: "text/template/parse", type: $funcType([mapType$3], [], false)}, {prop: "backup", name: "backup", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "backup2", name: "backup2", pkg: "text/template/parse", type: $funcType([parse.item], [], false)}, {prop: "backup3", name: "backup3", pkg: "text/template/parse", type: $funcType([parse.item, parse.item], [], false)}, {prop: "command", name: "command", pkg: "text/template/parse", type: $funcType([], [ptrType$23], false)}, {prop: "elseControl", name: "elseControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "endControl", name: "endControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "error", name: "error", pkg: "text/template/parse", type: $funcType([$error], [], false)}, {prop: "errorf", name: "errorf", pkg: "text/template/parse", type: $funcType([$String, sliceType$1], [], true)}, {prop: "expect", name: "expect", pkg: "text/template/parse", type: $funcType([parse.itemType, $String], [parse.item], false)}, {prop: "expectOneOf", name: "expectOneOf", pkg: "text/template/parse", type: $funcType([parse.itemType, parse.itemType, $String], [parse.item], false)}, {prop: "hasFunction", name: "hasFunction", pkg: "text/template/parse", type: $funcType([$String], [$Bool], false)}, {prop: "ifControl", name: "ifControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "itemList", name: "itemList", pkg: "text/template/parse", type: $funcType([], [ptrType$4, parse.Node], false)}, {prop: "newAction", name: "newAction", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, ptrType$11], [ptrType$5], false)}, {prop: "newBool", name: "newBool", pkg: "text/template/parse", type: $funcType([parse.Pos, $Bool], [ptrType$16], false)}, {prop: "newChain", name: "newChain", pkg: "text/template/parse", type: $funcType([parse.Pos, parse.Node], [ptrType$13], false)}, {prop: "newCommand", name: "newCommand", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$23], false)}, {prop: "newDot", name: "newDot", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$17], false)}, {prop: "newElse", name: "newElse", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int], [ptrType$30], false)}, {prop: "newEnd", name: "newEnd", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$31], false)}, {prop: "newField", name: "newField", pkg: "text/template/parse", type: $funcType([parse.Pos, $String], [ptrType$12], false)}, {prop: "newIf", name: "newIf", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, ptrType$11, ptrType$4, ptrType$4], [ptrType$6], false)}, {prop: "newList", name: "newList", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$4], false)}, {prop: "newNil", name: "newNil", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$18], false)}, {prop: "newNumber", name: "newNumber", pkg: "text/template/parse", type: $funcType([parse.Pos, $String, parse.itemType], [ptrType$19, $error], false)}, {prop: "newPipeline", name: "newPipeline", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, sliceType$8], [ptrType$11], false)}, {prop: "newRange", name: "newRange", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, ptrType$11, ptrType$4, ptrType$4], [ptrType$7], false)}, {prop: "newString", name: "newString", pkg: "text/template/parse", type: $funcType([parse.Pos, $String, $String], [ptrType$20], false)}, {prop: "newTemplate", name: "newTemplate", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, $String, ptrType$11], [ptrType$8], false)}, {prop: "newText", name: "newText", pkg: "text/template/parse", type: $funcType([parse.Pos, $String], [ptrType$9], false)}, {prop: "newVariable", name: "newVariable", pkg: "text/template/parse", type: $funcType([parse.Pos, $String], [ptrType$15], false)}, {prop: "newWith", name: "newWith", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, ptrType$11, ptrType$4, ptrType$4], [ptrType$10], false)}, {prop: "next", name: "next", pkg: "text/template/parse", type: $funcType([], [parse.item], false)}, {prop: "nextNonSpace", name: "nextNonSpace", pkg: "text/template/parse", type: $funcType([], [parse.item], false)}, {prop: "operand", name: "operand", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "parse", name: "parse", pkg: "text/template/parse", type: $funcType([mapType$3], [parse.Node], false)}, {prop: "parseControl", name: "parseControl", pkg: "text/template/parse", type: $funcType([$Bool, $String], [parse.Pos, $Int, ptrType$11, ptrType$4, ptrType$4], false)}, {prop: "parseDefinition", name: "parseDefinition", pkg: "text/template/parse", type: $funcType([mapType$3], [], false)}, {prop: "peek", name: "peek", pkg: "text/template/parse", type: $funcType([], [parse.item], false)}, {prop: "peekNonSpace", name: "peekNonSpace", pkg: "text/template/parse", type: $funcType([], [parse.item], false)}, {prop: "pipeline", name: "pipeline", pkg: "text/template/parse", type: $funcType([$String], [ptrType$11], false)}, {prop: "popVars", name: "popVars", pkg: "text/template/parse", type: $funcType([$Int], [], false)}, {prop: "rangeControl", name: "rangeControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "recover", name: "recover", pkg: "text/template/parse", type: $funcType([ptrType], [], false)}, {prop: "startParse", name: "startParse", pkg: "text/template/parse", type: $funcType([sliceType$7, ptrType$32], [], false)}, {prop: "stopParse", name: "stopParse", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "templateControl", name: "templateControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "term", name: "term", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "textOrAction", name: "textOrAction", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "unexpected", name: "unexpected", pkg: "text/template/parse", type: $funcType([parse.item, $String], [], false)}, {prop: "useVar", name: "useVar", pkg: "text/template/parse", type: $funcType([parse.Pos, $String], [parse.Node], false)}, {prop: "withControl", name: "withControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}];
	ptrType$2.methods = [{prop: "AddParseTree", name: "AddParseTree", pkg: "", type: $funcType([$String, ptrType$3], [ptrType$2, $error], false)}, {prop: "Clone", name: "Clone", pkg: "", type: $funcType([], [ptrType$2, $error], false)}, {prop: "Copy", name: "Copy", pkg: "", type: $funcType([], [ptrType$3], false)}, {prop: "Delims", name: "Delims", pkg: "", type: $funcType([$String, $String], [ptrType$2], false)}, {prop: "ErrorContext", name: "ErrorContext", pkg: "", type: $funcType([parse.Node], [$String, $String], false)}, {prop: "Execute", name: "Execute", pkg: "", type: $funcType([io.Writer, $emptyInterface], [$error], false)}, {prop: "ExecuteTemplate", name: "ExecuteTemplate", pkg: "", type: $funcType([io.Writer, $String, $emptyInterface], [$error], false)}, {prop: "Funcs", name: "Funcs", pkg: "", type: $funcType([FuncMap], [ptrType$2], false)}, {prop: "Lookup", name: "Lookup", pkg: "", type: $funcType([$String], [ptrType$2], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([$String], [ptrType$2], false)}, {prop: "Parse", name: "Parse", pkg: "", type: $funcType([$String], [ptrType$2, $error], false)}, {prop: "ParseFiles", name: "ParseFiles", pkg: "", type: $funcType([sliceType$2], [ptrType$2, $error], true)}, {prop: "ParseGlob", name: "ParseGlob", pkg: "", type: $funcType([$String], [ptrType$2, $error], false)}, {prop: "Templates", name: "Templates", pkg: "", type: $funcType([], [sliceType$6], false)}, {prop: "associate", name: "associate", pkg: "text/template", type: $funcType([ptrType$2, ptrType$3], [$Bool, $error], false)}, {prop: "copy", name: "copy", pkg: "text/template", type: $funcType([ptrType$21], [ptrType$2], false)}, {prop: "init", name: "init", pkg: "text/template", type: $funcType([], [], false)}, {prop: "action", name: "action", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "add", name: "add", pkg: "text/template/parse", type: $funcType([mapType$3], [], false)}, {prop: "backup", name: "backup", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "backup2", name: "backup2", pkg: "text/template/parse", type: $funcType([parse.item], [], false)}, {prop: "backup3", name: "backup3", pkg: "text/template/parse", type: $funcType([parse.item, parse.item], [], false)}, {prop: "command", name: "command", pkg: "text/template/parse", type: $funcType([], [ptrType$23], false)}, {prop: "elseControl", name: "elseControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "endControl", name: "endControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "error", name: "error", pkg: "text/template/parse", type: $funcType([$error], [], false)}, {prop: "errorf", name: "errorf", pkg: "text/template/parse", type: $funcType([$String, sliceType$1], [], true)}, {prop: "expect", name: "expect", pkg: "text/template/parse", type: $funcType([parse.itemType, $String], [parse.item], false)}, {prop: "expectOneOf", name: "expectOneOf", pkg: "text/template/parse", type: $funcType([parse.itemType, parse.itemType, $String], [parse.item], false)}, {prop: "hasFunction", name: "hasFunction", pkg: "text/template/parse", type: $funcType([$String], [$Bool], false)}, {prop: "ifControl", name: "ifControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "itemList", name: "itemList", pkg: "text/template/parse", type: $funcType([], [ptrType$4, parse.Node], false)}, {prop: "newAction", name: "newAction", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, ptrType$11], [ptrType$5], false)}, {prop: "newBool", name: "newBool", pkg: "text/template/parse", type: $funcType([parse.Pos, $Bool], [ptrType$16], false)}, {prop: "newChain", name: "newChain", pkg: "text/template/parse", type: $funcType([parse.Pos, parse.Node], [ptrType$13], false)}, {prop: "newCommand", name: "newCommand", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$23], false)}, {prop: "newDot", name: "newDot", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$17], false)}, {prop: "newElse", name: "newElse", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int], [ptrType$30], false)}, {prop: "newEnd", name: "newEnd", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$31], false)}, {prop: "newField", name: "newField", pkg: "text/template/parse", type: $funcType([parse.Pos, $String], [ptrType$12], false)}, {prop: "newIf", name: "newIf", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, ptrType$11, ptrType$4, ptrType$4], [ptrType$6], false)}, {prop: "newList", name: "newList", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$4], false)}, {prop: "newNil", name: "newNil", pkg: "text/template/parse", type: $funcType([parse.Pos], [ptrType$18], false)}, {prop: "newNumber", name: "newNumber", pkg: "text/template/parse", type: $funcType([parse.Pos, $String, parse.itemType], [ptrType$19, $error], false)}, {prop: "newPipeline", name: "newPipeline", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, sliceType$8], [ptrType$11], false)}, {prop: "newRange", name: "newRange", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, ptrType$11, ptrType$4, ptrType$4], [ptrType$7], false)}, {prop: "newString", name: "newString", pkg: "text/template/parse", type: $funcType([parse.Pos, $String, $String], [ptrType$20], false)}, {prop: "newTemplate", name: "newTemplate", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, $String, ptrType$11], [ptrType$8], false)}, {prop: "newText", name: "newText", pkg: "text/template/parse", type: $funcType([parse.Pos, $String], [ptrType$9], false)}, {prop: "newVariable", name: "newVariable", pkg: "text/template/parse", type: $funcType([parse.Pos, $String], [ptrType$15], false)}, {prop: "newWith", name: "newWith", pkg: "text/template/parse", type: $funcType([parse.Pos, $Int, ptrType$11, ptrType$4, ptrType$4], [ptrType$10], false)}, {prop: "next", name: "next", pkg: "text/template/parse", type: $funcType([], [parse.item], false)}, {prop: "nextNonSpace", name: "nextNonSpace", pkg: "text/template/parse", type: $funcType([], [parse.item], false)}, {prop: "operand", name: "operand", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "parse", name: "parse", pkg: "text/template/parse", type: $funcType([mapType$3], [parse.Node], false)}, {prop: "parseControl", name: "parseControl", pkg: "text/template/parse", type: $funcType([$Bool, $String], [parse.Pos, $Int, ptrType$11, ptrType$4, ptrType$4], false)}, {prop: "parseDefinition", name: "parseDefinition", pkg: "text/template/parse", type: $funcType([mapType$3], [], false)}, {prop: "peek", name: "peek", pkg: "text/template/parse", type: $funcType([], [parse.item], false)}, {prop: "peekNonSpace", name: "peekNonSpace", pkg: "text/template/parse", type: $funcType([], [parse.item], false)}, {prop: "pipeline", name: "pipeline", pkg: "text/template/parse", type: $funcType([$String], [ptrType$11], false)}, {prop: "popVars", name: "popVars", pkg: "text/template/parse", type: $funcType([$Int], [], false)}, {prop: "rangeControl", name: "rangeControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "recover", name: "recover", pkg: "text/template/parse", type: $funcType([ptrType], [], false)}, {prop: "startParse", name: "startParse", pkg: "text/template/parse", type: $funcType([sliceType$7, ptrType$32], [], false)}, {prop: "stopParse", name: "stopParse", pkg: "text/template/parse", type: $funcType([], [], false)}, {prop: "templateControl", name: "templateControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "term", name: "term", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "textOrAction", name: "textOrAction", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}, {prop: "unexpected", name: "unexpected", pkg: "text/template/parse", type: $funcType([parse.item, $String], [], false)}, {prop: "useVar", name: "useVar", pkg: "text/template/parse", type: $funcType([parse.Pos, $String], [parse.Node], false)}, {prop: "withControl", name: "withControl", pkg: "text/template/parse", type: $funcType([], [parse.Node], false)}];
	state.init([{prop: "tmpl", name: "tmpl", pkg: "text/template", type: ptrType$2, tag: ""}, {prop: "wr", name: "wr", pkg: "text/template", type: io.Writer, tag: ""}, {prop: "node", name: "node", pkg: "text/template", type: parse.Node, tag: ""}, {prop: "vars", name: "vars", pkg: "text/template", type: sliceType$3, tag: ""}]);
	variable.init([{prop: "name", name: "name", pkg: "text/template", type: $String, tag: ""}, {prop: "value", name: "value", pkg: "text/template", type: reflect.Value, tag: ""}]);
	rvs.init(reflect.Value);
	rvInts.init([{prop: "rvs", name: "", pkg: "text/template", type: rvs, tag: ""}]);
	rvUints.init([{prop: "rvs", name: "", pkg: "text/template", type: rvs, tag: ""}]);
	rvFloats.init([{prop: "rvs", name: "", pkg: "text/template", type: rvs, tag: ""}]);
	rvStrings.init([{prop: "rvs", name: "", pkg: "text/template", type: rvs, tag: ""}]);
	FuncMap.init($String, $emptyInterface);
	common.init([{prop: "tmpl", name: "tmpl", pkg: "text/template", type: mapType$1, tag: ""}, {prop: "parseFuncs", name: "parseFuncs", pkg: "text/template", type: FuncMap, tag: ""}, {prop: "execFuncs", name: "execFuncs", pkg: "text/template", type: mapType$2, tag: ""}]);
	Template.init([{prop: "name", name: "name", pkg: "text/template", type: $String, tag: ""}, {prop: "Tree", name: "", pkg: "", type: ptrType$3, tag: ""}, {prop: "common", name: "", pkg: "text/template", type: ptrType$21, tag: ""}, {prop: "leftDelim", name: "leftDelim", pkg: "text/template", type: $String, tag: ""}, {prop: "rightDelim", name: "rightDelim", pkg: "text/template", type: $String, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_template = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = errors.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = fmt.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = ioutil.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = url.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = filepath.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = reflect.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		$r = runtime.$init($BLOCKING); /* */ $s = 9; case 9: if ($r && $r.$blocking) { $r = $r(); }
		$r = sort.$init($BLOCKING); /* */ $s = 10; case 10: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 11; case 11: if ($r && $r.$blocking) { $r = $r(); }
		$r = parse.$init($BLOCKING); /* */ $s = 12; case 12: if ($r && $r.$blocking) { $r = $r(); }
		$r = unicode.$init($BLOCKING); /* */ $s = 13; case 13: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 14; case 14: if ($r && $r.$blocking) { $r = $r(); }
		zero = new reflect.Value.ptr();
		errorType = reflect.TypeOf(ptrType.nil).Elem();
		fmtStringerType = reflect.TypeOf(ptrType$1.nil).Elem();
		errBadComparisonType = errors.New("invalid type for comparison");
		errBadComparison = errors.New("incompatible types for comparison");
		errNoComparison = errors.New("missing argument for comparison");
		htmlQuot = new sliceType($stringToBytes("&#34;"));
		htmlApos = new sliceType($stringToBytes("&#39;"));
		htmlAmp = new sliceType($stringToBytes("&amp;"));
		htmlLt = new sliceType($stringToBytes("&lt;"));
		htmlGt = new sliceType($stringToBytes("&gt;"));
		jsLowUni = new sliceType($stringToBytes("\\u00"));
		hex = new sliceType($stringToBytes("0123456789ABCDEF"));
		jsBackslash = new sliceType($stringToBytes("\\\\"));
		jsApos = new sliceType($stringToBytes("\\'"));
		jsQuot = new sliceType($stringToBytes("\\\""));
		jsLt = new sliceType($stringToBytes("\\x3C"));
		jsGt = new sliceType($stringToBytes("\\x3E"));
		builtins = (_map = new $Map(), _key = "and", _map[_key] = { k: _key, v: new funcType(and) }, _key = "call", _map[_key] = { k: _key, v: new funcType$1(call) }, _key = "html", _map[_key] = { k: _key, v: new funcType$2(HTMLEscaper) }, _key = "index", _map[_key] = { k: _key, v: new funcType$3(index) }, _key = "js", _map[_key] = { k: _key, v: new funcType$2(JSEscaper) }, _key = "len", _map[_key] = { k: _key, v: new funcType$4(length) }, _key = "not", _map[_key] = { k: _key, v: new funcType$5(not) }, _key = "or", _map[_key] = { k: _key, v: new funcType(or) }, _key = "print", _map[_key] = { k: _key, v: new funcType$6(fmt.Sprint) }, _key = "printf", _map[_key] = { k: _key, v: new funcType$7(fmt.Sprintf) }, _key = "println", _map[_key] = { k: _key, v: new funcType$6(fmt.Sprintln) }, _key = "urlquery", _map[_key] = { k: _key, v: new funcType$2(URLQueryEscaper) }, _key = "eq", _map[_key] = { k: _key, v: new funcType$8(eq) }, _key = "ge", _map[_key] = { k: _key, v: new funcType$9(ge) }, _key = "gt", _map[_key] = { k: _key, v: new funcType$9(gt) }, _key = "le", _map[_key] = { k: _key, v: new funcType$9(le) }, _key = "lt", _map[_key] = { k: _key, v: new funcType$9(lt) }, _key = "ne", _map[_key] = { k: _key, v: new funcType$9(ne) }, _map);
		builtinFuncs = createValueFuncs(builtins);
		/* */ } return; } }; $init_template.$blocking = true; return $init_template;
	};
	return $pkg;
})();
$packages["html/template"] = (function() {
	var $pkg = {}, bytes, json, fmt, html, io, ioutil, filepath, reflect, strings, sync, template, parse, unicode, utf8, CSS, HTML, HTMLAttr, JS, JSStr, URL, context, state, delim, urlPart, jsCtx, element, attr, Error, ErrorCode, escaper, Template, nameSpace, FuncMap, ptrType, ptrType$1, sliceType, sliceType$1, ptrType$2, sliceType$2, funcType, ptrType$3, ptrType$4, ptrType$5, ptrType$6, ptrType$7, ptrType$8, ptrType$9, ptrType$10, ptrType$11, ptrType$12, ptrType$13, ptrType$14, ptrType$15, sliceType$3, sliceType$4, ptrType$16, mapType, sliceType$5, ptrType$17, arrayType, sliceType$6, ptrType$18, ptrType$19, ptrType$20, ptrType$21, ptrType$22, ptrType$23, ptrType$24, ptrType$25, ptrType$26, funcType$1, mapType$1, mapType$2, mapType$3, mapType$4, mapType$5, mapType$6, ptrType$27, mapType$7, attrTypeMap, errorType, fmtStringerType, stateNames, delimNames, urlPartNames, elementNames, attrNames, expressionBytes, mozBindingBytes, funcMap, equivEscapers, redundantFuncs, delimEnds, doctypeBytes, htmlReplacementTable, htmlNormReplacementTable, htmlNospaceReplacementTable, htmlNospaceNormReplacementTable, regexpPrecederKeywords, jsonMarshalType, jsStrReplacementTable, jsStrNormReplacementTable, jsRegexpReplacementTable, escapeOK, transitionFunc, commentStart, commentEnd, elementContentType, attrStartStates, specialTagEndMarkers, blockCommentEnd, elementNameMap, _map, _key, _map$1, _key$1, _map$2, _key$2, _map$3, _key$3, _map$4, _key$4, _map$5, _key$5, _map$6, _key$6, _map$7, _key$7, _map$8, _key$8, _map$9, _key$9, _map$10, _key$10, attrType, indirect, indirectToStringerOrError, stringify, isComment, isInTag, endsWithCSSKeyword, isCSSNmchar, decodeCSS, isHex, hexDecode, skipCSSSpace, isCSSSpace, cssEscaper, cssValueFilter, errorf, escapeTemplate, newEscaper, allIdents, ensurePipelineContains, appendCmd, indexOfStr, escFnsEq, newIdentCmd, nudge, join, contextAfterText, htmlNospaceEscaper, attrEscaper, rcdataEscaper, htmlEscaper, htmlReplacer, stripTags, htmlNameFilter, commentEscaper, nextJSCtx, indirectToJSONMarshaler, jsValEscaper, jsStrEscaper, jsRegexpEscaper, replace, isJSIdentPart, New, Must, parseFiles, parseGlob, tText, tTag, tAttrName, tAfterName, tBeforeValue, tHTMLCmt, tSpecialTagEnd, tAttr, tURL, tJS, tJSDelimited, tBlockCmt, tLineCmt, tCSS, tCSSStr, tError, eatAttrName, asciiAlpha, asciiAlphaNum, eatTagName, eatWhiteSpace, urlFilter, urlEscaper, urlNormalizer, urlProcessor;
	bytes = $packages["bytes"];
	json = $packages["encoding/json"];
	fmt = $packages["fmt"];
	html = $packages["html"];
	io = $packages["io"];
	ioutil = $packages["io/ioutil"];
	filepath = $packages["path/filepath"];
	reflect = $packages["reflect"];
	strings = $packages["strings"];
	sync = $packages["sync"];
	template = $packages["text/template"];
	parse = $packages["text/template/parse"];
	unicode = $packages["unicode"];
	utf8 = $packages["unicode/utf8"];
	CSS = $pkg.CSS = $newType(8, $kindString, "template.CSS", "CSS", "html/template", null);
	HTML = $pkg.HTML = $newType(8, $kindString, "template.HTML", "HTML", "html/template", null);
	HTMLAttr = $pkg.HTMLAttr = $newType(8, $kindString, "template.HTMLAttr", "HTMLAttr", "html/template", null);
	JS = $pkg.JS = $newType(8, $kindString, "template.JS", "JS", "html/template", null);
	JSStr = $pkg.JSStr = $newType(8, $kindString, "template.JSStr", "JSStr", "html/template", null);
	URL = $pkg.URL = $newType(8, $kindString, "template.URL", "URL", "html/template", null);
	context = $pkg.context = $newType(0, $kindStruct, "template.context", "context", "html/template", function(state_, delim_, urlPart_, jsCtx_, attr_, element_, err_) {
		this.$val = this;
		this.state = state_ !== undefined ? state_ : 0;
		this.delim = delim_ !== undefined ? delim_ : 0;
		this.urlPart = urlPart_ !== undefined ? urlPart_ : 0;
		this.jsCtx = jsCtx_ !== undefined ? jsCtx_ : 0;
		this.attr = attr_ !== undefined ? attr_ : 0;
		this.element = element_ !== undefined ? element_ : 0;
		this.err = err_ !== undefined ? err_ : ptrType$4.nil;
	});
	state = $pkg.state = $newType(1, $kindUint8, "template.state", "state", "html/template", null);
	delim = $pkg.delim = $newType(1, $kindUint8, "template.delim", "delim", "html/template", null);
	urlPart = $pkg.urlPart = $newType(1, $kindUint8, "template.urlPart", "urlPart", "html/template", null);
	jsCtx = $pkg.jsCtx = $newType(1, $kindUint8, "template.jsCtx", "jsCtx", "html/template", null);
	element = $pkg.element = $newType(1, $kindUint8, "template.element", "element", "html/template", null);
	attr = $pkg.attr = $newType(1, $kindUint8, "template.attr", "attr", "html/template", null);
	Error = $pkg.Error = $newType(0, $kindStruct, "template.Error", "Error", "html/template", function(ErrorCode_, Node_, Name_, Line_, Description_) {
		this.$val = this;
		this.ErrorCode = ErrorCode_ !== undefined ? ErrorCode_ : 0;
		this.Node = Node_ !== undefined ? Node_ : $ifaceNil;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Description = Description_ !== undefined ? Description_ : "";
	});
	ErrorCode = $pkg.ErrorCode = $newType(4, $kindInt, "template.ErrorCode", "ErrorCode", "html/template", null);
	escaper = $pkg.escaper = $newType(0, $kindStruct, "template.escaper", "escaper", "html/template", function(tmpl_, output_, derived_, called_, actionNodeEdits_, templateNodeEdits_, textNodeEdits_) {
		this.$val = this;
		this.tmpl = tmpl_ !== undefined ? tmpl_ : ptrType$5.nil;
		this.output = output_ !== undefined ? output_ : false;
		this.derived = derived_ !== undefined ? derived_ : false;
		this.called = called_ !== undefined ? called_ : false;
		this.actionNodeEdits = actionNodeEdits_ !== undefined ? actionNodeEdits_ : false;
		this.templateNodeEdits = templateNodeEdits_ !== undefined ? templateNodeEdits_ : false;
		this.textNodeEdits = textNodeEdits_ !== undefined ? textNodeEdits_ : false;
	});
	Template = $pkg.Template = $newType(0, $kindStruct, "template.Template", "Template", "html/template", function(escapeErr_, text_, Tree_, nameSpace_) {
		this.$val = this;
		this.escapeErr = escapeErr_ !== undefined ? escapeErr_ : $ifaceNil;
		this.text = text_ !== undefined ? text_ : ptrType$16.nil;
		this.Tree = Tree_ !== undefined ? Tree_ : ptrType$3.nil;
		this.nameSpace = nameSpace_ !== undefined ? nameSpace_ : ptrType$27.nil;
	});
	nameSpace = $pkg.nameSpace = $newType(0, $kindStruct, "template.nameSpace", "nameSpace", "html/template", function(mu_, set_) {
		this.$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.ptr();
		this.set = set_ !== undefined ? set_ : false;
	});
	FuncMap = $pkg.FuncMap = $newType(4, $kindMap, "template.FuncMap", "FuncMap", "html/template", null);
		ptrType = $ptrType($error);
		ptrType$1 = $ptrType(fmt.Stringer);
		sliceType = $sliceType($Uint8);
		sliceType$1 = $sliceType($String);
		ptrType$2 = $ptrType(json.Marshaler);
		sliceType$2 = $sliceType($emptyInterface);
		funcType = $funcType([sliceType$2], [$String], true);
		ptrType$3 = $ptrType(parse.Tree);
		ptrType$4 = $ptrType(Error);
		ptrType$5 = $ptrType(Template);
		ptrType$6 = $ptrType(parse.ActionNode);
		ptrType$7 = $ptrType(parse.IfNode);
		ptrType$8 = $ptrType(parse.ListNode);
		ptrType$9 = $ptrType(parse.RangeNode);
		ptrType$10 = $ptrType(parse.TemplateNode);
		ptrType$11 = $ptrType(parse.TextNode);
		ptrType$12 = $ptrType(parse.WithNode);
		ptrType$13 = $ptrType(parse.IdentifierNode);
		ptrType$14 = $ptrType(parse.FieldNode);
		ptrType$15 = $ptrType(parse.CommandNode);
		sliceType$3 = $sliceType(ptrType$15);
		sliceType$4 = $sliceType(parse.Node);
		ptrType$16 = $ptrType(template.Template);
		mapType = $mapType($String, $emptyInterface);
		sliceType$5 = $sliceType(mapType);
		ptrType$17 = $ptrType(parse.lexer);
		arrayType = $arrayType(parse.item, 3);
		sliceType$6 = $sliceType(ptrType$5);
		ptrType$18 = $ptrType(context);
		ptrType$19 = $ptrType(state);
		ptrType$20 = $ptrType(delim);
		ptrType$21 = $ptrType(urlPart);
		ptrType$22 = $ptrType(jsCtx);
		ptrType$23 = $ptrType(element);
		ptrType$24 = $ptrType(attr);
		ptrType$25 = $ptrType(parse.BranchNode);
		ptrType$26 = $ptrType(escaper);
		funcType$1 = $funcType([ptrType$26, context], [$Bool], false);
		mapType$1 = $mapType($String, context);
		mapType$2 = $mapType($String, ptrType$16);
		mapType$3 = $mapType($String, $Bool);
		mapType$4 = $mapType(ptrType$6, sliceType$1);
		mapType$5 = $mapType(ptrType$10, $String);
		mapType$6 = $mapType(ptrType$11, sliceType);
		ptrType$27 = $ptrType(nameSpace);
		mapType$7 = $mapType($String, ptrType$5);
	attrType = function(name) {
		var _entry, _tuple, colon, ok, t;
		name = strings.ToLower(name);
		if (strings.HasPrefix(name, "data-")) {
			name = name.substring(5);
		} else {
			colon = strings.IndexRune(name, 58);
			if (!((colon === -1))) {
				if (name.substring(0, colon) === "xmlns") {
					return 6;
				}
				name = name.substring((colon + 1 >> 0));
			}
		}
		_tuple = (_entry = attrTypeMap[name], _entry !== undefined ? [_entry.v, true] : [0, false]); t = _tuple[0]; ok = _tuple[1];
		if (ok) {
			return t;
		}
		if (strings.HasPrefix(name, "on")) {
			return 4;
		}
		if (strings.Contains(name, "src") || strings.Contains(name, "uri") || strings.Contains(name, "url")) {
			return 6;
		}
		return 0;
	};
	indirect = function(a) {
		var t, v;
		if ($interfaceIsEqual(a, $ifaceNil)) {
			return $ifaceNil;
		}
		t = reflect.TypeOf(a);
		if (!((t.Kind() === 22))) {
			return a;
		}
		v = reflect.ValueOf(a);
		while ((v.Kind() === 22) && !v.IsNil()) {
			v = v.Elem();
		}
		return v.Interface();
	};
	indirectToStringerOrError = function(a) {
		var v;
		if ($interfaceIsEqual(a, $ifaceNil)) {
			return $ifaceNil;
		}
		v = reflect.ValueOf(a);
		while (!v.Type().Implements(fmtStringerType) && !v.Type().Implements(errorType) && (v.Kind() === 22) && !v.IsNil()) {
			v = v.Elem();
		}
		return v.Interface();
	};
	stringify = function(args) {
		var _i, _ref, _ref$1, arg, i, s;
		if (args.$length === 1) {
			_ref = indirect(((0 < 0 || 0 >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0]));
			if ($assertType(_ref, $String, true)[1]) {
				s = _ref.$val;
				return [s, 0];
			} else if ($assertType(_ref, CSS, true)[1]) {
				s = _ref.$val;
				return [s, 1];
			} else if ($assertType(_ref, HTML, true)[1]) {
				s = _ref.$val;
				return [s, 2];
			} else if ($assertType(_ref, HTMLAttr, true)[1]) {
				s = _ref.$val;
				return [s, 3];
			} else if ($assertType(_ref, JS, true)[1]) {
				s = _ref.$val;
				return [s, 4];
			} else if ($assertType(_ref, JSStr, true)[1]) {
				s = _ref.$val;
				return [s, 5];
			} else if ($assertType(_ref, URL, true)[1]) {
				s = _ref.$val;
				return [s, 6];
			}
		}
		_ref$1 = args;
		_i = 0;
		while (_i < _ref$1.$length) {
			i = _i;
			arg = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
			(i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i] = indirectToStringerOrError(arg);
			_i++;
		}
		return [fmt.Sprint(args), 0];
	};
	context.ptr.prototype.String = function() {
		var c;
		c = $clone(this, context);
		return fmt.Sprintf("{%v %v %v %v %v %v %v}", new sliceType$2([new state(c.state), new delim(c.delim), new urlPart(c.urlPart), new jsCtx(c.jsCtx), new attr(c.attr), new element(c.element), c.err]));
	};
	context.prototype.String = function() { return this.$val.String(); };
	context.ptr.prototype.eq = function(d) {
		var c;
		c = $clone(this, context);
		d = $clone(d, context);
		return (c.state === d.state) && (c.delim === d.delim) && (c.urlPart === d.urlPart) && (c.jsCtx === d.jsCtx) && (c.attr === d.attr) && (c.element === d.element) && c.err === d.err;
	};
	context.prototype.eq = function(d) { return this.$val.eq(d); };
	context.ptr.prototype.mangle = function(templateName) {
		var c, s;
		c = $clone(this, context);
		if (c.state === 0) {
			return templateName;
		}
		s = templateName + "$htmltemplate_" + new state(c.state).String();
		if (!((c.delim === 0))) {
			s = s + ("_" + new delim(c.delim).String());
		}
		if (!((c.urlPart === 0))) {
			s = s + ("_" + new urlPart(c.urlPart).String());
		}
		if (!((c.jsCtx === 0))) {
			s = s + ("_" + new jsCtx(c.jsCtx).String());
		}
		if (!((c.attr === 0))) {
			s = s + ("_" + new attr(c.attr).String());
		}
		if (!((c.element === 0))) {
			s = s + ("_" + new element(c.element).String());
		}
		return s;
	};
	context.prototype.mangle = function(templateName) { return this.$val.mangle(templateName); };
	state.prototype.String = function() {
		var s;
		s = this.$val;
		if ((s >> 0) < 24) {
			return ((s < 0 || s >= stateNames.length) ? $throwRuntimeError("index out of range") : stateNames[s]);
		}
		return fmt.Sprintf("illegal state %d", new sliceType$2([new $Int((s >> 0))]));
	};
	$ptrType(state).prototype.String = function() { return new state(this.$get()).String(); };
	isComment = function(s) {
		var _ref;
		_ref = s;
		if (_ref === 5 || _ref === 13 || _ref === 14 || _ref === 21 || _ref === 22) {
			return true;
		}
		return false;
	};
	isInTag = function(s) {
		var _ref;
		_ref = s;
		if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 7) {
			return true;
		}
		return false;
	};
	delim.prototype.String = function() {
		var d;
		d = this.$val;
		if ((d >> 0) < 4) {
			return ((d < 0 || d >= delimNames.length) ? $throwRuntimeError("index out of range") : delimNames[d]);
		}
		return fmt.Sprintf("illegal delim %d", new sliceType$2([new $Int((d >> 0))]));
	};
	$ptrType(delim).prototype.String = function() { return new delim(this.$get()).String(); };
	urlPart.prototype.String = function() {
		var u;
		u = this.$val;
		if ((u >> 0) < 4) {
			return ((u < 0 || u >= urlPartNames.length) ? $throwRuntimeError("index out of range") : urlPartNames[u]);
		}
		return fmt.Sprintf("illegal urlPart %d", new sliceType$2([new $Int((u >> 0))]));
	};
	$ptrType(urlPart).prototype.String = function() { return new urlPart(this.$get()).String(); };
	jsCtx.prototype.String = function() {
		var _ref, c;
		c = this.$val;
		_ref = c;
		if (_ref === 0) {
			return "jsCtxRegexp";
		} else if (_ref === 1) {
			return "jsCtxDivOp";
		} else if (_ref === 2) {
			return "jsCtxUnknown";
		}
		return fmt.Sprintf("illegal jsCtx %d", new sliceType$2([new $Int((c >> 0))]));
	};
	$ptrType(jsCtx).prototype.String = function() { return new jsCtx(this.$get()).String(); };
	element.prototype.String = function() {
		var e;
		e = this.$val;
		if ((e >> 0) < 5) {
			return ((e < 0 || e >= elementNames.length) ? $throwRuntimeError("index out of range") : elementNames[e]);
		}
		return fmt.Sprintf("illegal element %d", new sliceType$2([new $Int((e >> 0))]));
	};
	$ptrType(element).prototype.String = function() { return new element(this.$get()).String(); };
	attr.prototype.String = function() {
		var a;
		a = this.$val;
		if ((a >> 0) < 4) {
			return ((a < 0 || a >= attrNames.length) ? $throwRuntimeError("index out of range") : attrNames[a]);
		}
		return fmt.Sprintf("illegal attr %d", new sliceType$2([new $Int((a >> 0))]));
	};
	$ptrType(attr).prototype.String = function() { return new attr(this.$get()).String(); };
	endsWithCSSKeyword = function(b, kw) {
		var _tuple, i, r;
		i = b.$length - kw.length >> 0;
		if (i < 0) {
			return false;
		}
		if (!((i === 0))) {
			_tuple = utf8.DecodeLastRune($subslice(b, 0, i)); r = _tuple[0];
			if (isCSSNmchar(r)) {
				return false;
			}
		}
		return $bytesToString(bytes.ToLower($subslice(b, i))) === kw;
	};
	isCSSNmchar = function(r) {
		return 97 <= r && r <= 122 || 65 <= r && r <= 90 || 48 <= r && r <= 57 || (r === 45) || (r === 95) || 128 <= r && r <= 55295 || 57344 <= r && r <= 65533 || 65536 <= r && r <= 1114111;
	};
	decodeCSS = function(s) {
		var _q, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, b, i, i$1, j, n, n$1, r;
		i = bytes.IndexByte(s, 92);
		if (i === -1) {
			return s;
		}
		b = sliceType.make(0, s.$length);
		while (!((s.$length === 0))) {
			i$1 = bytes.IndexByte(s, 92);
			if (i$1 === -1) {
				i$1 = s.$length;
			}
			_tmp = $appendSlice(b, $subslice(s, 0, i$1)); _tmp$1 = $subslice(s, i$1); b = _tmp; s = _tmp$1;
			if (s.$length < 2) {
				break;
			}
			if (isHex(((1 < 0 || 1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1]))) {
				j = 2;
				while (j < s.$length && j < 7 && isHex(((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]))) {
					j = j + (1) >> 0;
				}
				r = hexDecode($subslice(s, 1, j));
				if (r > 1114111) {
					_tmp$2 = (_q = r / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")); _tmp$3 = j - 1 >> 0; r = _tmp$2; j = _tmp$3;
				}
				n = utf8.EncodeRune($subslice(b, b.$length, b.$capacity), r);
				_tmp$4 = $subslice(b, 0, (b.$length + n >> 0)); _tmp$5 = skipCSSSpace($subslice(s, j)); b = _tmp$4; s = _tmp$5;
			} else {
				_tuple = utf8.DecodeRune($subslice(s, 1)); n$1 = _tuple[1];
				_tmp$6 = $appendSlice(b, $subslice(s, 1, (1 + n$1 >> 0))); _tmp$7 = $subslice(s, (1 + n$1 >> 0)); b = _tmp$6; s = _tmp$7;
			}
		}
		return b;
	};
	isHex = function(c) {
		return 48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70;
	};
	hexDecode = function(s) {
		var _i, _ref, c, n, y;
		n = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			n = (y = (4), y < 32 ? (n << y) : 0) >> 0;
			if (48 <= c && c <= 57) {
				n = n | (((c - 48 << 24 >>> 24) >> 0));
			} else if (97 <= c && c <= 102) {
				n = n | ((((c - 97 << 24 >>> 24) >> 0) + 10 >> 0));
			} else if (65 <= c && c <= 70) {
				n = n | ((((c - 65 << 24 >>> 24) >> 0) + 10 >> 0));
			} else {
				$panic(new $String(fmt.Sprintf("Bad hex digit in %q", new sliceType$2([s]))));
			}
			_i++;
		}
		return n;
	};
	skipCSSSpace = function(c) {
		var _ref;
		if (c.$length === 0) {
			return c;
		}
		_ref = ((0 < 0 || 0 >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + 0]);
		if (_ref === 9 || _ref === 10 || _ref === 12 || _ref === 32) {
			return $subslice(c, 1);
		} else if (_ref === 13) {
			if (c.$length >= 2 && (((1 < 0 || 1 >= c.$length) ? $throwRuntimeError("index out of range") : c.$array[c.$offset + 1]) === 10)) {
				return $subslice(c, 2);
			}
			return $subslice(c, 1);
		}
		return c;
	};
	isCSSSpace = function(b) {
		var _ref;
		_ref = b;
		if (_ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 32) {
			return true;
		}
		return false;
	};
	cssEscaper = function(args) {
		var _i, _ref, _ref$1, _rune, _tuple, b, i, r, repl, s, written;
		_tuple = stringify(args); s = _tuple[0];
		b = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		written = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			repl = "";
			_ref$1 = r;
			if (_ref$1 === 0) {
				repl = "\\0";
			} else if (_ref$1 === 9) {
				repl = "\\9";
			} else if (_ref$1 === 10) {
				repl = "\\a";
			} else if (_ref$1 === 12) {
				repl = "\\c";
			} else if (_ref$1 === 13) {
				repl = "\\d";
			} else if (_ref$1 === 34) {
				repl = "\\22";
			} else if (_ref$1 === 38) {
				repl = "\\26";
			} else if (_ref$1 === 39) {
				repl = "\\27";
			} else if (_ref$1 === 40) {
				repl = "\\28";
			} else if (_ref$1 === 41) {
				repl = "\\29";
			} else if (_ref$1 === 43) {
				repl = "\\2b";
			} else if (_ref$1 === 47) {
				repl = "\\2f";
			} else if (_ref$1 === 58) {
				repl = "\\3a";
			} else if (_ref$1 === 59) {
				repl = "\\3b";
			} else if (_ref$1 === 60) {
				repl = "\\3c";
			} else if (_ref$1 === 62) {
				repl = "\\3e";
			} else if (_ref$1 === 92) {
				repl = "\\\\";
			} else if (_ref$1 === 123) {
				repl = "\\7b";
			} else if (_ref$1 === 125) {
				repl = "\\7d";
			} else {
				_i += _rune[1];
				continue;
			}
			b.WriteString(s.substring(written, i));
			b.WriteString(repl);
			written = i + utf8.RuneLen(r) >> 0;
			if (!(repl === "\\\\") && ((written === s.length) || isHex(s.charCodeAt(written)) || isCSSSpace(s.charCodeAt(written)))) {
				b.WriteByte(32);
			}
			_i += _rune[1];
		}
		if (written === 0) {
			return s;
		}
		b.WriteString(s.substring(written));
		return b.String();
	};
	cssValueFilter = function(args) {
		var _i, _ref, _ref$1, _tmp, _tmp$1, _tuple, b, c, i, id, s, t, x;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 1) {
			return s;
		}
		_tmp = decodeCSS(new sliceType($stringToBytes(s))); _tmp$1 = sliceType.make(0, 64); b = _tmp; id = _tmp$1;
		_ref = b;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = c;
			if (_ref$1 === 0 || _ref$1 === 34 || _ref$1 === 39 || _ref$1 === 40 || _ref$1 === 41 || _ref$1 === 47 || _ref$1 === 59 || _ref$1 === 64 || _ref$1 === 91 || _ref$1 === 92 || _ref$1 === 93 || _ref$1 === 96 || _ref$1 === 123 || _ref$1 === 125) {
				return "ZgotmplZ";
			} else if (_ref$1 === 45) {
				if (!((i === 0)) && ((x = i - 1 >> 0, ((x < 0 || x >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x])) === 45)) {
					return "ZgotmplZ";
				}
			} else {
				if (c < 128 && isCSSNmchar((c >> 0))) {
					id = $append(id, c);
				}
			}
			_i++;
		}
		id = bytes.ToLower(id);
		if (!((bytes.Index(id, expressionBytes) === -1)) || !((bytes.Index(id, mozBindingBytes) === -1))) {
			return "ZgotmplZ";
		}
		return $bytesToString(b);
	};
	Error.ptr.prototype.Error = function() {
		var _tuple, e, loc;
		e = this;
		if (!($interfaceIsEqual(e.Node, $ifaceNil))) {
			_tuple = ptrType$3.nil.ErrorContext(e.Node); loc = _tuple[0];
			return fmt.Sprintf("html/template:%s: %s", new sliceType$2([new $String(loc), new $String(e.Description)]));
		} else if (!((e.Line === 0))) {
			return fmt.Sprintf("html/template:%s:%d: %s", new sliceType$2([new $String(e.Name), new $Int(e.Line), new $String(e.Description)]));
		} else if (!(e.Name === "")) {
			return fmt.Sprintf("html/template:%s: %s", new sliceType$2([new $String(e.Name), new $String(e.Description)]));
		}
		return "html/template: " + e.Description;
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	errorf = function(k, node, line, f, args) {
		return new Error.ptr(k, node, "", line, fmt.Sprintf(f, args));
	};
	escapeTemplate = function(tmpl, node, name) {
		var _entry, _entry$1, _tmp, _tmp$1, _tuple, c, e, err, t, t$1;
		e = newEscaper(tmpl);
		_tuple = e.escapeTree(new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), node, name, 0); c = $clone(_tuple[0], context);
		err = $ifaceNil;
		if (!(c.err === ptrType$4.nil)) {
			_tmp = c.err; _tmp$1 = name; err = _tmp; c.err.Name = _tmp$1;
		} else if (!((c.state === 0))) {
			err = new Error.ptr(4, $ifaceNil, name, 0, fmt.Sprintf("ends in a non-text context: %v", new sliceType$2([new c.constructor.elem(c)])));
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			t = (_entry = tmpl.nameSpace.set[name], _entry !== undefined ? _entry.v : ptrType$5.nil);
			if (!(t === ptrType$5.nil)) {
				t.escapeErr = err;
				t.text.Tree = ptrType$3.nil;
				t.Tree = ptrType$3.nil;
			}
			return err;
		}
		e.commit();
		t$1 = (_entry$1 = tmpl.nameSpace.set[name], _entry$1 !== undefined ? _entry$1.v : ptrType$5.nil);
		if (!(t$1 === ptrType$5.nil)) {
			t$1.escapeErr = escapeOK;
			t$1.Tree = t$1.text.Tree;
		}
		return $ifaceNil;
	};
	newEscaper = function(t) {
		var _key$11, _key$12, _key$13, _key$14, _key$15, _key$16, _map$11, _map$12, _map$13, _map$14, _map$15, _map$16;
		return new escaper.ptr(t, (_map$11 = new $Map(), _map$11), (_map$12 = new $Map(), _map$12), (_map$13 = new $Map(), _map$13), (_map$14 = new $Map(), _map$14), (_map$15 = new $Map(), _map$15), (_map$16 = new $Map(), _map$16));
	};
	escaper.ptr.prototype.escape = function(c, n) {
		var _ref, e, n$1;
		e = this;
		c = $clone(c, context);
		_ref = n;
		if ($assertType(_ref, ptrType$6, true)[1]) {
			n$1 = _ref.$val;
			return e.escapeAction(c, n$1);
		} else if ($assertType(_ref, ptrType$7, true)[1]) {
			n$1 = _ref.$val;
			return e.escapeBranch(c, n$1.BranchNode, "if");
		} else if ($assertType(_ref, ptrType$8, true)[1]) {
			n$1 = _ref.$val;
			return e.escapeList(c, n$1);
		} else if ($assertType(_ref, ptrType$9, true)[1]) {
			n$1 = _ref.$val;
			return e.escapeBranch(c, n$1.BranchNode, "range");
		} else if ($assertType(_ref, ptrType$10, true)[1]) {
			n$1 = _ref.$val;
			return e.escapeTemplate(c, n$1);
		} else if ($assertType(_ref, ptrType$11, true)[1]) {
			n$1 = _ref.$val;
			return e.escapeText(c, n$1);
		} else if ($assertType(_ref, ptrType$12, true)[1]) {
			n$1 = _ref.$val;
			return e.escapeBranch(c, n$1.BranchNode, "with");
		}
		$panic(new $String("escaping " + n.String() + " is unimplemented"));
	};
	escaper.prototype.escape = function(c, n) { return this.$val.escape(c, n); };
	escaper.ptr.prototype.escapeAction = function(c, n) {
		var _ref, _ref$1, _ref$2, _ref$3, _ref$4, e, s;
		e = this;
		c = $clone(c, context);
		if (!((n.Pipe.Decl.$length === 0))) {
			return c;
		}
		$copy(c, nudge(c), context);
		s = sliceType$1.make(0, 3);
		_ref = c.state;
		if (_ref === 23) {
			return c;
		} else if (_ref === 8 || _ref === 16 || _ref === 17 || _ref === 18 || _ref === 19 || _ref === 20) {
			_ref$1 = c.urlPart;
			if (_ref$1 === 0) {
				s = $append(s, "html_template_urlfilter");
				_ref$2 = c.state;
				if (_ref$2 === 16 || _ref$2 === 17) {
					s = $append(s, "html_template_cssescaper");
				} else {
					s = $append(s, "html_template_urlnormalizer");
				}
			} else if (_ref$1 === 1) {
				_ref$3 = c.state;
				if (_ref$3 === 16 || _ref$3 === 17) {
					s = $append(s, "html_template_cssescaper");
				} else {
					s = $append(s, "html_template_urlnormalizer");
				}
			} else if (_ref$1 === 2) {
				s = $append(s, "html_template_urlescaper");
			} else if (_ref$1 === 3) {
				return new context.ptr(23, 0, 0, 0, 0, 0, errorf(1, n, n.Line, "%s appears in an ambiguous URL context", new sliceType$2([n])));
			} else {
				$panic(new $String(new urlPart(c.urlPart).String()));
			}
		} else if (_ref === 9) {
			s = $append(s, "html_template_jsvalescaper");
			c.jsCtx = 1;
		} else if (_ref === 10 || _ref === 11) {
			s = $append(s, "html_template_jsstrescaper");
		} else if (_ref === 12) {
			s = $append(s, "html_template_jsregexpescaper");
		} else if (_ref === 15) {
			s = $append(s, "html_template_cssvaluefilter");
		} else if (_ref === 0) {
			s = $append(s, "html_template_htmlescaper");
		} else if (_ref === 6) {
			s = $append(s, "html_template_rcdataescaper");
		} else if (_ref === 7) {
		} else if (_ref === 2 || _ref === 1) {
			c.state = 2;
			s = $append(s, "html_template_htmlnamefilter");
		} else {
			if (isComment(c.state)) {
				s = $append(s, "html_template_commentescaper");
			} else {
				$panic(new $String("unexpected state " + new state(c.state).String()));
			}
		}
		_ref$4 = c.delim;
		if (_ref$4 === 0) {
		} else if (_ref$4 === 3) {
			s = $append(s, "html_template_nospaceescaper");
		} else {
			s = $append(s, "html_template_attrescaper");
		}
		e.editActionNode(n, s);
		return c;
	};
	escaper.prototype.escapeAction = function(c, n) { return this.$val.escapeAction(c, n); };
	allIdents = function(node) {
		var _ref, node$1;
		_ref = node;
		if ($assertType(_ref, ptrType$13, true)[1]) {
			node$1 = _ref.$val;
			return new sliceType$1([node$1.Ident]);
		} else if ($assertType(_ref, ptrType$14, true)[1]) {
			node$1 = _ref.$val;
			return node$1.Ident;
		}
		$panic(new $String("unidentified node type in allIdents"));
	};
	ensurePipelineContains = function(p, s) {
		var _i, _i$1, _i$2, _i$3, _i$4, _i$5, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _tuple, cmd, dups, i, i$1, idNode, idNode$1, ident, ident$1, idents, n, name, name$1, newCmds, ok, pos, x, x$1, x$2, x$3, x$4;
		if (s.$length === 0) {
			return;
		}
		n = p.Cmds.$length;
		idents = p.Cmds;
		i = n - 1 >> 0;
		while (i >= 0) {
			cmd = (x = p.Cmds, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!((cmd.Args.$length === 0))) {
				_tuple = $assertType((x$1 = cmd.Args, ((0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])), ptrType$13, true); ok = _tuple[1];
				if (ok) {
					i = i - (1) >> 0;
					continue;
				}
			}
			idents = $subslice(p.Cmds, (i + 1 >> 0));
			i = i - (1) >> 0;
		}
		dups = 0;
		_ref = idents;
		_i = 0;
		while (_i < _ref.$length) {
			idNode = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = allIdents((x$2 = idNode.Args, ((0 < 0 || 0 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])));
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				ident = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (escFnsEq(((dups < 0 || dups >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + dups]), ident)) {
					dups = dups + (1) >> 0;
					if (dups === s.$length) {
						return;
					}
				}
				_i$1++;
			}
			_i++;
		}
		newCmds = sliceType$3.make((n - idents.$length >> 0), ((n + s.$length >> 0) - dups >> 0));
		$copySlice(newCmds, p.Cmds);
		_ref$2 = idents;
		_i$2 = 0;
		while (_i$2 < _ref$2.$length) {
			idNode$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			pos = (x$3 = idNode$1.Args, ((0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).Position();
			_ref$3 = allIdents((x$4 = idNode$1.Args, ((0 < 0 || 0 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0])));
			_i$3 = 0;
			while (_i$3 < _ref$3.$length) {
				ident$1 = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
				i$1 = indexOfStr(ident$1, s, escFnsEq);
				if (!((i$1 === -1))) {
					_ref$4 = $subslice(s, 0, i$1);
					_i$4 = 0;
					while (_i$4 < _ref$4.$length) {
						name = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$4]);
						newCmds = appendCmd(newCmds, newIdentCmd(name, pos));
						_i$4++;
					}
					s = $subslice(s, (i$1 + 1 >> 0));
				}
				_i$3++;
			}
			newCmds = appendCmd(newCmds, idNode$1);
			_i$2++;
		}
		_ref$5 = s;
		_i$5 = 0;
		while (_i$5 < _ref$5.$length) {
			name$1 = ((_i$5 < 0 || _i$5 >= _ref$5.$length) ? $throwRuntimeError("index out of range") : _ref$5.$array[_ref$5.$offset + _i$5]);
			newCmds = appendCmd(newCmds, newIdentCmd(name$1, new parse.Pos(p.Pos).Position()));
			_i$5++;
		}
		p.Cmds = newCmds;
	};
	appendCmd = function(cmds, cmd) {
		var _entry, _entry$1, _tuple, _tuple$1, last, n, next, ok, x, x$1, x$2;
		n = cmds.$length;
		if (!((n === 0))) {
			_tuple = $assertType((x = (x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= cmds.$length) ? $throwRuntimeError("index out of range") : cmds.$array[cmds.$offset + x$1])).Args, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), ptrType$13, true); last = _tuple[0]; ok = _tuple[1];
			_tuple$1 = $assertType((x$2 = cmd.Args, ((0 < 0 || 0 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])), ptrType$13, true); next = _tuple$1[0];
			if (ok && (_entry = (_entry$1 = redundantFuncs[last.Ident], _entry$1 !== undefined ? _entry$1.v : false)[next.Ident], _entry !== undefined ? _entry.v : false)) {
				return cmds;
			}
		}
		return $append(cmds, cmd);
	};
	indexOfStr = function(s, strs, eq) {
		var _i, _ref, i, t;
		_ref = strs;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			t = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (eq(s, t)) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	escFnsEq = function(a, b) {
		var _entry, _entry$1, e, e$1;
		e = (_entry = equivEscapers[a], _entry !== undefined ? _entry.v : "");
		if (!(e === "")) {
			a = e;
		}
		e$1 = (_entry$1 = equivEscapers[b], _entry$1 !== undefined ? _entry$1.v : "");
		if (!(e$1 === "")) {
			b = e$1;
		}
		return a === b;
	};
	newIdentCmd = function(identifier, pos) {
		return new parse.CommandNode.ptr(4, 0, ptrType$3.nil, new sliceType$4([parse.NewIdentifier(identifier).SetTree(ptrType$3.nil).SetPos(pos)]));
	};
	nudge = function(c) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, x;
		c = $clone(c, context);
		_ref = c.state;
		if (_ref === 1) {
			c.state = 2;
		} else if (_ref === 4) {
			_tmp = (x = c.attr, ((x < 0 || x >= attrStartStates.length) ? $throwRuntimeError("index out of range") : attrStartStates[x])); _tmp$1 = 3; _tmp$2 = 0; c.state = _tmp; c.delim = _tmp$1; c.attr = _tmp$2;
		} else if (_ref === 3) {
			_tmp$3 = 2; _tmp$4 = 0; c.state = _tmp$3; c.attr = _tmp$4;
		}
		return c;
	};
	join = function(a, b, node, nodeName) {
		var _tmp, _tmp$1, c, c$1, d, e;
		b = $clone(b, context);
		a = $clone(a, context);
		if (a.state === 23) {
			return a;
		}
		if (b.state === 23) {
			return b;
		}
		if (a.eq(b)) {
			return a;
		}
		c = $clone(a, context);
		c.urlPart = b.urlPart;
		if (c.eq(b)) {
			c.urlPart = 3;
			return c;
		}
		$copy(c, a, context);
		c.jsCtx = b.jsCtx;
		if (c.eq(b)) {
			c.jsCtx = 2;
			return c;
		}
		_tmp = $clone(nudge(a), context); _tmp$1 = $clone(nudge(b), context); c$1 = $clone(_tmp, context); d = $clone(_tmp$1, context);
		if (!(c$1.eq(a) && d.eq(b))) {
			e = $clone(join(c$1, d, node, nodeName), context);
			if (!((e.state === 23))) {
				return e;
			}
		}
		return new context.ptr(23, 0, 0, 0, 0, 0, errorf(3, node, 0, "{{%s}} branches end in different contexts: %v, %v", new sliceType$2([new $String(nodeName), new a.constructor.elem(a), new b.constructor.elem(b)])));
	};
	escaper.ptr.prototype.escapeBranch = function(c, n, nodeName) {
		var _tuple, c0, c1, c1$1, e;
		e = this;
		c = $clone(c, context);
		c0 = $clone(e.escapeList(c, n.List), context);
		if (nodeName === "range" && !((c0.state === 23))) {
			_tuple = e.escapeListConditionally(c0, n.List, $throwNilPointerError); c1 = $clone(_tuple[0], context);
			$copy(c0, join(c0, c1, n, nodeName), context);
			if (c0.state === 23) {
				c0.err.Line = n.Line;
				c0.err.Description = "on range loop re-entry: " + c0.err.Description;
				return c0;
			}
		}
		c1$1 = $clone(e.escapeList(c, n.ElseList), context);
		return join(c0, c1$1, n, nodeName);
	};
	escaper.prototype.escapeBranch = function(c, n, nodeName) { return this.$val.escapeBranch(c, n, nodeName); };
	escaper.ptr.prototype.escapeList = function(c, n) {
		var _i, _ref, e, m;
		e = this;
		c = $clone(c, context);
		if (n === ptrType$8.nil) {
			return c;
		}
		_ref = n.Nodes;
		_i = 0;
		while (_i < _ref.$length) {
			m = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			$copy(c, e.escape(c, m), context);
			_i++;
		}
		return c;
	};
	escaper.prototype.escapeList = function(c, n) { return this.$val.escapeList(c, n); };
	escaper.ptr.prototype.escapeListConditionally = function(c, n, filter) {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _entry$5, _entry$6, _i, _i$1, _i$2, _i$3, _i$4, _i$5, _i$6, _key$11, _key$12, _key$13, _key$14, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _keys$5, _keys$6, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6, e, e1, k, k$1, k$2, k$3, k$4, k$5, k$6, ok, v, v$1, v$2, v$3, v$4, v$5, v$6;
		e = this;
		c = $clone(c, context);
		e1 = newEscaper(e.tmpl);
		_ref = e.output;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = $clone(_entry.v, context);
			_key$11 = k; (e1.output || $throwRuntimeError("assignment to entry in nil map"))[_key$11] = { k: _key$11, v: $clone(v, context) };
			_i++;
		}
		$copy(c, e1.escapeList(c, n), context);
		ok = !(filter === $throwNilPointerError) && filter(e1, c);
		if (ok) {
			_ref$1 = e1.output;
			_i$1 = 0;
			_keys$1 = $keys(_ref$1);
			while (_i$1 < _keys$1.length) {
				_entry$1 = _ref$1[_keys$1[_i$1]];
				if (_entry$1 === undefined) {
					_i$1++;
					continue;
				}
				k$1 = _entry$1.k;
				v$1 = $clone(_entry$1.v, context);
				_key$12 = k$1; (e.output || $throwRuntimeError("assignment to entry in nil map"))[_key$12] = { k: _key$12, v: $clone(v$1, context) };
				_i$1++;
			}
			_ref$2 = e1.derived;
			_i$2 = 0;
			_keys$2 = $keys(_ref$2);
			while (_i$2 < _keys$2.length) {
				_entry$2 = _ref$2[_keys$2[_i$2]];
				if (_entry$2 === undefined) {
					_i$2++;
					continue;
				}
				k$2 = _entry$2.k;
				v$2 = _entry$2.v;
				_key$13 = k$2; (e.derived || $throwRuntimeError("assignment to entry in nil map"))[_key$13] = { k: _key$13, v: v$2 };
				_i$2++;
			}
			_ref$3 = e1.called;
			_i$3 = 0;
			_keys$3 = $keys(_ref$3);
			while (_i$3 < _keys$3.length) {
				_entry$3 = _ref$3[_keys$3[_i$3]];
				if (_entry$3 === undefined) {
					_i$3++;
					continue;
				}
				k$3 = _entry$3.k;
				v$3 = _entry$3.v;
				_key$14 = k$3; (e.called || $throwRuntimeError("assignment to entry in nil map"))[_key$14] = { k: _key$14, v: v$3 };
				_i$3++;
			}
			_ref$4 = e1.actionNodeEdits;
			_i$4 = 0;
			_keys$4 = $keys(_ref$4);
			while (_i$4 < _keys$4.length) {
				_entry$4 = _ref$4[_keys$4[_i$4]];
				if (_entry$4 === undefined) {
					_i$4++;
					continue;
				}
				k$4 = _entry$4.k;
				v$4 = _entry$4.v;
				e.editActionNode(k$4, v$4);
				_i$4++;
			}
			_ref$5 = e1.templateNodeEdits;
			_i$5 = 0;
			_keys$5 = $keys(_ref$5);
			while (_i$5 < _keys$5.length) {
				_entry$5 = _ref$5[_keys$5[_i$5]];
				if (_entry$5 === undefined) {
					_i$5++;
					continue;
				}
				k$5 = _entry$5.k;
				v$5 = _entry$5.v;
				e.editTemplateNode(k$5, v$5);
				_i$5++;
			}
			_ref$6 = e1.textNodeEdits;
			_i$6 = 0;
			_keys$6 = $keys(_ref$6);
			while (_i$6 < _keys$6.length) {
				_entry$6 = _ref$6[_keys$6[_i$6]];
				if (_entry$6 === undefined) {
					_i$6++;
					continue;
				}
				k$6 = _entry$6.k;
				v$6 = _entry$6.v;
				e.editTextNode(k$6, v$6);
				_i$6++;
			}
		}
		return [c, ok];
	};
	escaper.prototype.escapeListConditionally = function(c, n, filter) { return this.$val.escapeListConditionally(c, n, filter); };
	escaper.ptr.prototype.escapeTemplate = function(c, n) {
		var _tuple, e, name;
		e = this;
		c = $clone(c, context);
		_tuple = e.escapeTree(c, n, n.Name, n.Line); c = $clone(_tuple[0], context); name = _tuple[1];
		if (!(name === n.Name)) {
			e.editTemplateNode(n, name);
		}
		return c;
	};
	escaper.prototype.escapeTemplate = function(c, n) { return this.$val.escapeTemplate(c, n); };
	escaper.ptr.prototype.escapeTree = function(c, node, name, line) {
		var _entry, _entry$1, _key$11, _key$12, _tuple, dname, dt, e, ok, out, t;
		e = this;
		c = $clone(c, context);
		dname = c.mangle(name);
		_key$11 = dname; (e.called || $throwRuntimeError("assignment to entry in nil map"))[_key$11] = { k: _key$11, v: true };
		_tuple = (_entry = e.output[dname], _entry !== undefined ? [_entry.v, true] : [new context.ptr(), false]); out = $clone(_tuple[0], context); ok = _tuple[1];
		if (ok) {
			return [out, dname];
		}
		t = e.template(name);
		if (t === ptrType$16.nil) {
			if (!((_entry$1 = e.tmpl.nameSpace.set[name], _entry$1 !== undefined ? _entry$1.v : ptrType$5.nil) === ptrType$5.nil)) {
				return [new context.ptr(23, 0, 0, 0, 0, 0, errorf(5, node, line, "%q is an incomplete or empty template", new sliceType$2([new $String(name)]))), dname];
			}
			return [new context.ptr(23, 0, 0, 0, 0, 0, errorf(5, node, line, "no such template %q", new sliceType$2([new $String(name)]))), dname];
		}
		if (!(dname === name)) {
			dt = e.template(dname);
			if (dt === ptrType$16.nil) {
				dt = template.New(dname);
				dt.Tree = new parse.Tree.ptr(dname, "", t.Tree.Root.CopyList(), "", sliceType$5.nil, ptrType$17.nil, arrayType.zero(), 0, sliceType$1.nil);
				_key$12 = dname; (e.derived || $throwRuntimeError("assignment to entry in nil map"))[_key$12] = { k: _key$12, v: dt };
			}
			t = dt;
		}
		return [e.computeOutCtx(c, t), dname];
	};
	escaper.prototype.escapeTree = function(c, node, name, line) { return this.$val.escapeTree(c, node, name, line); };
	escaper.ptr.prototype.computeOutCtx = function(c, t) {
		var _tmp, _tmp$1, _tuple, _tuple$1, c1, c2, e, ok, ok2;
		e = this;
		c = $clone(c, context);
		_tuple = e.escapeTemplateBody(c, t); c1 = $clone(_tuple[0], context); ok = _tuple[1];
		if (!ok) {
			_tuple$1 = e.escapeTemplateBody(c1, t); c2 = $clone(_tuple$1[0], context); ok2 = _tuple$1[1];
			if (ok2) {
				_tmp = $clone(c2, context); _tmp$1 = true; $copy(c1, _tmp, context); ok = _tmp$1;
			}
		}
		if (!ok && !((c1.state === 23))) {
			return new context.ptr(23, 0, 0, 0, 0, 0, errorf(6, t.Tree.Root, 0, "cannot compute output context for template %s", new sliceType$2([new $String(t.Name())])));
		}
		return c1;
	};
	escaper.prototype.computeOutCtx = function(c, t) { return this.$val.computeOutCtx(c, t); };
	escaper.ptr.prototype.escapeTemplateBody = function(c, t) {
		var _key$11, e, filter;
		e = this;
		c = $clone(c, context);
		filter = (function(e1, c1) {
			var _entry;
			if (c1.state === 23) {
				return false;
			}
			if (!(_entry = e1.called[t.Name()], _entry !== undefined ? _entry.v : false)) {
				return true;
			}
			return c.eq(c1);
		});
		_key$11 = t.Name(); (e.output || $throwRuntimeError("assignment to entry in nil map"))[_key$11] = { k: _key$11, v: $clone(c, context) };
		return e.escapeListConditionally(c, t.Tree.Root, filter);
	};
	escaper.prototype.escapeTemplateBody = function(c, t) { return this.$val.escapeTemplateBody(c, t); };
	escaper.ptr.prototype.escapeText = function(c, n) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, b, c1, cs, e, end, i, i1, j, j$1, nread, s, written;
		e = this;
		c = $clone(c, context);
		_tmp = n.Text; _tmp$1 = 0; _tmp$2 = 0; _tmp$3 = new bytes.Buffer.ptr(); s = _tmp; written = _tmp$1; i = _tmp$2; b = _tmp$3;
		while (!((i === s.$length))) {
			_tuple = contextAfterText(c, $subslice(s, i)); c1 = $clone(_tuple[0], context); nread = _tuple[1];
			i1 = i + nread >> 0;
			if ((c.state === 0) || (c.state === 6)) {
				end = i1;
				if (!((c1.state === c.state))) {
					j = end - 1 >> 0;
					while (j >= i) {
						if (((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]) === 60) {
							end = j;
							break;
						}
						j = j - (1) >> 0;
					}
				}
				j$1 = i;
				while (j$1 < end) {
					if ((((j$1 < 0 || j$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j$1]) === 60) && !bytes.HasPrefix(bytes.ToUpper($subslice(s, j$1)), doctypeBytes)) {
						b.Write($subslice(s, written, j$1));
						b.WriteString("&lt;");
						written = j$1 + 1 >> 0;
					}
					j$1 = j$1 + (1) >> 0;
				}
			} else if (isComment(c.state) && (c.delim === 0)) {
				_ref = c.state;
				if (_ref === 13) {
					if (!((bytes.IndexAny($subslice(s, written, i1), "\n\r\xE2\x80\xA8\xE2\x80\xA9") === -1))) {
						b.WriteByte(10);
					} else {
						b.WriteByte(32);
					}
				} else if (_ref === 21) {
					b.WriteByte(32);
				}
				written = i1;
			}
			if (!((c.state === c1.state)) && isComment(c1.state) && (c1.delim === 0)) {
				cs = i1 - 2 >> 0;
				if (c1.state === 5) {
					cs = cs - (2) >> 0;
				}
				b.Write($subslice(s, written, cs));
				written = i1;
			}
			if ((i === i1) && (c.state === c1.state)) {
				$panic(new $String(fmt.Sprintf("infinite loop from %v to %v on %q..%q", new sliceType$2([new c.constructor.elem(c), new c1.constructor.elem(c1), $subslice(s, 0, i), $subslice(s, i)]))));
			}
			_tmp$4 = $clone(c1, context); _tmp$5 = i1; $copy(c, _tmp$4, context); i = _tmp$5;
		}
		if (!((written === 0)) && !((c.state === 23))) {
			if (!isComment(c.state) || !((c.delim === 0))) {
				b.Write($subslice(n.Text, written));
			}
			e.editTextNode(n, b.Bytes());
		}
		return c;
	};
	escaper.prototype.escapeText = function(c, n) { return this.$val.escapeText(c, n); };
	contextAfterText = function(c, s) {
		var _tmp, _tmp$1, _tuple, _tuple$1, c1, c1$1, i, i$1, i1, j, u, x, x$1, x$2;
		c = $clone(c, context);
		if (c.delim === 0) {
			_tuple = tSpecialTagEnd(c, s); c1 = $clone(_tuple[0], context); i = _tuple[1];
			if (i === 0) {
				return [c1, 0];
			}
			return (x = c.state, ((x < 0 || x >= transitionFunc.length) ? $throwRuntimeError("index out of range") : transitionFunc[x]))(c, $subslice(s, 0, i));
		}
		i$1 = bytes.IndexAny(s, (x$1 = c.delim, ((x$1 < 0 || x$1 >= delimEnds.length) ? $throwRuntimeError("index out of range") : delimEnds[x$1])));
		if (i$1 === -1) {
			i$1 = s.$length;
		}
		if (c.delim === 3) {
			j = bytes.IndexAny($subslice(s, 0, i$1), "\"'<=`");
			if (j >= 0) {
				return [new context.ptr(23, 0, 0, 0, 0, 0, errorf(2, $ifaceNil, 0, "%q in unquoted attr: %q", new sliceType$2([$subslice(s, j, (j + 1 >> 0)), $subslice(s, 0, i$1)]))), s.$length];
			}
		}
		if (i$1 === s.$length) {
			u = new sliceType($stringToBytes(html.UnescapeString($bytesToString(s))));
			while (!((u.$length === 0))) {
				_tuple$1 = (x$2 = c.state, ((x$2 < 0 || x$2 >= transitionFunc.length) ? $throwRuntimeError("index out of range") : transitionFunc[x$2]))(c, u); c1$1 = $clone(_tuple$1[0], context); i1 = _tuple$1[1];
				_tmp = $clone(c1$1, context); _tmp$1 = $subslice(u, i1); $copy(c, _tmp, context); u = _tmp$1;
			}
			return [c, s.$length];
		}
		if (!((c.delim === 3))) {
			i$1 = i$1 + (1) >> 0;
		}
		return [new context.ptr(1, 0, 0, 0, 0, c.element, ptrType$4.nil), i$1];
	};
	escaper.ptr.prototype.editActionNode = function(n, cmds) {
		var _entry, _key$11, _tuple, e, ok;
		e = this;
		_tuple = (_entry = e.actionNodeEdits[n.$key()], _entry !== undefined ? [_entry.v, true] : [sliceType$1.nil, false]); ok = _tuple[1];
		if (ok) {
			$panic(new $String(fmt.Sprintf("node %s shared between templates", new sliceType$2([n]))));
		}
		_key$11 = n; (e.actionNodeEdits || $throwRuntimeError("assignment to entry in nil map"))[_key$11.$key()] = { k: _key$11, v: cmds };
	};
	escaper.prototype.editActionNode = function(n, cmds) { return this.$val.editActionNode(n, cmds); };
	escaper.ptr.prototype.editTemplateNode = function(n, callee) {
		var _entry, _key$11, _tuple, e, ok;
		e = this;
		_tuple = (_entry = e.templateNodeEdits[n.$key()], _entry !== undefined ? [_entry.v, true] : ["", false]); ok = _tuple[1];
		if (ok) {
			$panic(new $String(fmt.Sprintf("node %s shared between templates", new sliceType$2([n]))));
		}
		_key$11 = n; (e.templateNodeEdits || $throwRuntimeError("assignment to entry in nil map"))[_key$11.$key()] = { k: _key$11, v: callee };
	};
	escaper.prototype.editTemplateNode = function(n, callee) { return this.$val.editTemplateNode(n, callee); };
	escaper.ptr.prototype.editTextNode = function(n, text) {
		var _entry, _key$11, _tuple, e, ok;
		e = this;
		_tuple = (_entry = e.textNodeEdits[n.$key()], _entry !== undefined ? [_entry.v, true] : [sliceType.nil, false]); ok = _tuple[1];
		if (ok) {
			$panic(new $String(fmt.Sprintf("node %s shared between templates", new sliceType$2([n]))));
		}
		_key$11 = n; (e.textNodeEdits || $throwRuntimeError("assignment to entry in nil map"))[_key$11.$key()] = { k: _key$11, v: text };
	};
	escaper.prototype.editTextNode = function(n, text) { return this.$val.editTextNode(n, text); };
	escaper.ptr.prototype.commit = function() {
		var _entry, _entry$1, _entry$2, _entry$3, _entry$4, _i, _i$1, _i$2, _i$3, _i$4, _keys, _keys$1, _keys$2, _keys$3, _keys$4, _ref, _ref$1, _ref$2, _ref$3, _ref$4, _tuple, e, err, n, n$1, n$2, name, name$1, s, s$1, t;
		e = this;
		_ref = e.output;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			name = _entry.k;
			e.template(name).Funcs(funcMap);
			_i++;
		}
		_ref$1 = e.derived;
		_i$1 = 0;
		_keys$1 = $keys(_ref$1);
		while (_i$1 < _keys$1.length) {
			_entry$1 = _ref$1[_keys$1[_i$1]];
			if (_entry$1 === undefined) {
				_i$1++;
				continue;
			}
			t = _entry$1.v;
			_tuple = e.tmpl.text.AddParseTree(t.Name(), t.Tree); err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				$panic(new $String("error adding derived template"));
			}
			_i$1++;
		}
		_ref$2 = e.actionNodeEdits;
		_i$2 = 0;
		_keys$2 = $keys(_ref$2);
		while (_i$2 < _keys$2.length) {
			_entry$2 = _ref$2[_keys$2[_i$2]];
			if (_entry$2 === undefined) {
				_i$2++;
				continue;
			}
			n = _entry$2.k;
			s = _entry$2.v;
			ensurePipelineContains(n.Pipe, s);
			_i$2++;
		}
		_ref$3 = e.templateNodeEdits;
		_i$3 = 0;
		_keys$3 = $keys(_ref$3);
		while (_i$3 < _keys$3.length) {
			_entry$3 = _ref$3[_keys$3[_i$3]];
			if (_entry$3 === undefined) {
				_i$3++;
				continue;
			}
			n$1 = _entry$3.k;
			name$1 = _entry$3.v;
			n$1.Name = name$1;
			_i$3++;
		}
		_ref$4 = e.textNodeEdits;
		_i$4 = 0;
		_keys$4 = $keys(_ref$4);
		while (_i$4 < _keys$4.length) {
			_entry$4 = _ref$4[_keys$4[_i$4]];
			if (_entry$4 === undefined) {
				_i$4++;
				continue;
			}
			n$2 = _entry$4.k;
			s$1 = _entry$4.v;
			n$2.Text = s$1;
			_i$4++;
		}
	};
	escaper.prototype.commit = function() { return this.$val.commit(); };
	escaper.ptr.prototype.template = function(name) {
		var _entry, e, t;
		e = this;
		t = e.tmpl.text.Lookup(name);
		if (t === ptrType$16.nil) {
			t = (_entry = e.derived[name], _entry !== undefined ? _entry.v : ptrType$16.nil);
		}
		return t;
	};
	escaper.prototype.template = function(name) { return this.$val.template(name); };
	htmlNospaceEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 2) {
			return htmlReplacer(stripTags(s), htmlNospaceNormReplacementTable, false);
		}
		return htmlReplacer(s, htmlNospaceReplacementTable, false);
	};
	attrEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 2) {
			return htmlReplacer(stripTags(s), htmlNormReplacementTable, true);
		}
		return htmlReplacer(s, htmlReplacementTable, true);
	};
	rcdataEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 2) {
			return htmlReplacer(s, htmlNormReplacementTable, true);
		}
		return htmlReplacer(s, htmlReplacementTable, true);
	};
	htmlEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 2) {
			return s;
		}
		return htmlReplacer(s, htmlReplacementTable, true);
	};
	htmlReplacer = function(s, replacementTable, badRunes) {
		var _i, _ref, _rune, _tmp, _tmp$1, b, i, r, repl, written;
		_tmp = 0; _tmp$1 = new bytes.Buffer.ptr(); written = _tmp; b = _tmp$1;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			if ((r >> 0) < replacementTable.$length) {
				repl = ((r < 0 || r >= replacementTable.$length) ? $throwRuntimeError("index out of range") : replacementTable.$array[replacementTable.$offset + r]);
				if (!((repl.length === 0))) {
					b.WriteString(s.substring(written, i));
					b.WriteString(repl);
					written = i + utf8.RuneLen(r) >> 0;
				}
			} else if (badRunes) {
			} else if (64976 <= r && r <= 65007 || 65520 <= r && r <= 65535) {
				fmt.Fprintf(b, "%s&#x%x;", new sliceType$2([new $String(s.substring(written, i)), new $Int32(r)]));
				written = i + utf8.RuneLen(r) >> 0;
			}
			_i += _rune[1];
		}
		if (written === 0) {
			return s;
		}
		b.WriteString(s.substring(written));
		return b.String();
	};
	stripTags = function(html$1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple, allText, b, c, d, i, i1, i1$1, j, j1, nread, s, st, x;
		b = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		_tmp = new sliceType($stringToBytes(html$1)); _tmp$1 = new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil); _tmp$2 = 0; _tmp$3 = true; s = _tmp; c = $clone(_tmp$1, context); i = _tmp$2; allText = _tmp$3;
		while (!((i === s.$length))) {
			if (c.delim === 0) {
				st = c.state;
				if (!((c.element === 0)) && !isInTag(st)) {
					st = 6;
				}
				_tuple = ((st < 0 || st >= transitionFunc.length) ? $throwRuntimeError("index out of range") : transitionFunc[st])(c, $subslice(s, i)); d = $clone(_tuple[0], context); nread = _tuple[1];
				i1 = i + nread >> 0;
				if ((c.state === 0) || (c.state === 6)) {
					j = i1;
					if (!((d.state === c.state))) {
						j1 = j - 1 >> 0;
						while (j1 >= i) {
							if (((j1 < 0 || j1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j1]) === 60) {
								j = j1;
								break;
							}
							j1 = j1 - (1) >> 0;
						}
					}
					b.Write($subslice(s, i, j));
				} else {
					allText = false;
				}
				_tmp$4 = $clone(d, context); _tmp$5 = i1; $copy(c, _tmp$4, context); i = _tmp$5;
				continue;
			}
			i1$1 = i + bytes.IndexAny($subslice(s, i), (x = c.delim, ((x < 0 || x >= delimEnds.length) ? $throwRuntimeError("index out of range") : delimEnds[x]))) >> 0;
			if (i1$1 < i) {
				break;
			}
			if (!((c.delim === 3))) {
				i1$1 = i1$1 + (1) >> 0;
			}
			_tmp$6 = new context.ptr(1, 0, 0, 0, 0, c.element, ptrType$4.nil); _tmp$7 = i1$1; $copy(c, _tmp$6, context); i = _tmp$7;
		}
		if (allText) {
			return html$1;
		} else if ((c.state === 0) || (c.state === 6)) {
			b.Write($subslice(s, i));
		}
		return b.String();
	};
	htmlNameFilter = function(args) {
		var _i, _ref, _rune, _tuple, r, s, t, t$1;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 3) {
			return s;
		}
		if (s.length === 0) {
			return "ZgotmplZ";
		}
		s = strings.ToLower(s);
		t$1 = attrType(s);
		if (!((t$1 === 0))) {
			return "ZgotmplZ";
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			r = _rune[0];
			if (48 <= r && r <= 57) {
			} else if (97 <= r && r <= 122) {
			} else {
				return "ZgotmplZ";
			}
			_i += _rune[1];
		}
		return s;
	};
	commentEscaper = function(args) {
		return "";
	};
	nextJSCtx = function(s, preceding) {
		var _entry, _ref, _tmp, _tmp$1, c, j, n, start, x, x$1, x$2, x$3, x$4;
		s = bytes.TrimRight(s, "\t\n\f\r \xE2\x80\xA8\xE2\x80\xA9");
		if (s.$length === 0) {
			return preceding;
		}
		_tmp = (x = s.$length - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])); _tmp$1 = s.$length; c = _tmp; n = _tmp$1;
		_ref = c;
		if (_ref === 43 || _ref === 45) {
			start = n - 1 >> 0;
			while (start > 0 && ((x$1 = start - 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])) === c)) {
				start = start - (1) >> 0;
			}
			if ((((n - start >> 0)) & 1) === 1) {
				return 0;
			}
			return 1;
		} else if (_ref === 46) {
			if (!((n === 1)) && 48 <= (x$2 = n - 2 >> 0, ((x$2 < 0 || x$2 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$2])) && (x$3 = n - 2 >> 0, ((x$3 < 0 || x$3 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$3])) <= 57) {
				return 1;
			}
			return 0;
		} else if (_ref === 44 || _ref === 60 || _ref === 62 || _ref === 61 || _ref === 42 || _ref === 37 || _ref === 38 || _ref === 124 || _ref === 94 || _ref === 63) {
			return 0;
		} else if (_ref === 33 || _ref === 126) {
			return 0;
		} else if (_ref === 40 || _ref === 91) {
			return 0;
		} else if (_ref === 58 || _ref === 59 || _ref === 123) {
			return 0;
		} else if (_ref === 125) {
			return 0;
		} else {
			j = n;
			while (j > 0 && isJSIdentPart(((x$4 = j - 1 >> 0, ((x$4 < 0 || x$4 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$4])) >> 0))) {
				j = j - (1) >> 0;
			}
			if ((_entry = regexpPrecederKeywords[$bytesToString($subslice(s, j))], _entry !== undefined ? _entry.v : false)) {
				return 0;
			}
		}
		return 1;
	};
	indirectToJSONMarshaler = function(a) {
		var v;
		v = reflect.ValueOf(a);
		while (!v.Type().Implements(jsonMarshalType) && (v.Kind() === 22) && !v.IsNil()) {
			v = v.Elem();
		}
		return v.Interface();
	};
	jsValEscaper = function(args) {
		var _i, _ref, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3, a, arg, b, buf, err, first, i, i$1, last, n, pad, repl, rune, t, written;
		a = $ifaceNil;
		if (args.$length === 1) {
			a = indirectToJSONMarshaler(((0 < 0 || 0 >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + 0]));
			_ref = a;
			if ($assertType(_ref, JS, true)[1]) {
				t = _ref.$val;
				return t;
			} else if ($assertType(_ref, JSStr, true)[1]) {
				t = _ref.$val;
				return "\"" + t + "\"";
			} else if ($assertType(_ref, json.Marshaler, true)[1]) {
				t = _ref;
			} else if ($assertType(_ref, fmt.Stringer, true)[1]) {
				t = _ref;
				a = new $String(t.String());
			}
		} else {
			_ref$1 = args;
			_i = 0;
			while (_i < _ref$1.$length) {
				i = _i;
				arg = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				(i < 0 || i >= args.$length) ? $throwRuntimeError("index out of range") : args.$array[args.$offset + i] = indirectToJSONMarshaler(arg);
				_i++;
			}
			a = new $String(fmt.Sprint(args));
		}
		_tuple = json.Marshal(a); b = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return fmt.Sprintf(" /* %s */null ", new sliceType$2([new $String(strings.Replace(err.Error(), "*/", "* /", -1))]));
		}
		if (b.$length === 0) {
			return " null ";
		}
		_tuple$1 = utf8.DecodeRune(b); first = _tuple$1[0];
		_tuple$2 = utf8.DecodeLastRune(b); last = _tuple$2[0];
		buf = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		pad = isJSIdentPart(first) || isJSIdentPart(last);
		if (pad) {
			buf.WriteByte(32);
		}
		written = 0;
		i$1 = 0;
		while (i$1 < b.$length) {
			_tuple$3 = utf8.DecodeRune($subslice(b, i$1)); rune = _tuple$3[0]; n = _tuple$3[1];
			repl = "";
			if (rune === 8232) {
				repl = "\\u2028";
			} else if (rune === 8233) {
				repl = "\\u2029";
			}
			if (!(repl === "")) {
				buf.Write($subslice(b, written, i$1));
				buf.WriteString(repl);
				written = i$1 + n >> 0;
			}
			i$1 = i$1 + (n) >> 0;
		}
		if (!((buf.Len() === 0))) {
			buf.Write($subslice(b, written));
			if (pad) {
				buf.WriteByte(32);
			}
			b = buf.Bytes();
		}
		return $bytesToString(b);
	};
	jsStrEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 5) {
			return replace(s, jsStrNormReplacementTable);
		}
		return replace(s, jsStrReplacementTable);
	};
	jsRegexpEscaper = function(args) {
		var _tuple, s;
		_tuple = stringify(args); s = _tuple[0];
		s = replace(s, jsRegexpReplacementTable);
		if (s === "") {
			return "(?:)";
		}
		return s;
	};
	replace = function(s, replacementTable) {
		var _i, _ref, _rune, b, i, r, repl, written;
		b = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		written = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			repl = "";
			if ((r >> 0) < replacementTable.$length && !(((r < 0 || r >= replacementTable.$length) ? $throwRuntimeError("index out of range") : replacementTable.$array[replacementTable.$offset + r]) === "")) {
				repl = ((r < 0 || r >= replacementTable.$length) ? $throwRuntimeError("index out of range") : replacementTable.$array[replacementTable.$offset + r]);
			} else if (r === 8232) {
				repl = "\\u2028";
			} else if (r === 8233) {
				repl = "\\u2029";
			} else {
				_i += _rune[1];
				continue;
			}
			b.WriteString(s.substring(written, i));
			b.WriteString(repl);
			written = i + utf8.RuneLen(r) >> 0;
			_i += _rune[1];
		}
		if (written === 0) {
			return s;
		}
		b.WriteString(s.substring(written));
		return b.String();
	};
	isJSIdentPart = function(r) {
		if (r === 36) {
			return true;
		} else if (48 <= r && r <= 57) {
			return true;
		} else if (65 <= r && r <= 90) {
			return true;
		} else if (r === 95) {
			return true;
		} else if (97 <= r && r <= 122) {
			return true;
		}
		return false;
	};
	Template.ptr.prototype.Templates = function() {
		var $deferred = [], $err = null, _entry, _i, _keys, _ref, m, ns, t, v;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		ns = t.nameSpace;
		ns.mu.Lock();
		$deferred.push([$methodVal(ns.mu, "Unlock"), []]);
		m = sliceType$6.make(0, $keys(ns.set).length);
		_ref = ns.set;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			v = _entry.v;
			m = $append(m, v);
			_i++;
		}
		return m;
		/* */ } catch(err) { $err = err; return sliceType$6.nil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Template.prototype.Templates = function() { return this.$val.Templates(); };
	Template.ptr.prototype.escape = function() {
		var $deferred = [], $err = null, err, t;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		t.nameSpace.mu.Lock();
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		if ($interfaceIsEqual(t.escapeErr, $ifaceNil)) {
			err = escapeTemplate(t, t.text.Tree.Root, t.Name());
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		} else if (!($interfaceIsEqual(t.escapeErr, escapeOK))) {
			return t.escapeErr;
		}
		return $ifaceNil;
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Template.prototype.escape = function() { return this.$val.escape(); };
	Template.ptr.prototype.Execute = function(wr, data) {
		var err, t;
		t = this;
		err = t.escape();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return t.text.Execute(wr, data);
	};
	Template.prototype.Execute = function(wr, data) { return this.$val.Execute(wr, data); };
	Template.ptr.prototype.ExecuteTemplate = function(wr, name, data) {
		var _tuple, err, t, tmpl;
		t = this;
		_tuple = t.lookupAndEscapeTemplate(name); tmpl = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return tmpl.text.Execute(wr, data);
	};
	Template.prototype.ExecuteTemplate = function(wr, name, data) { return this.$val.ExecuteTemplate(wr, name, data); };
	Template.ptr.prototype.lookupAndEscapeTemplate = function(name) {
		var $deferred = [], $err = null, _entry, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, err = $ifaceNil, t, tmpl = ptrType$5.nil;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		t.nameSpace.mu.Lock();
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		tmpl = (_entry = t.nameSpace.set[name], _entry !== undefined ? _entry.v : ptrType$5.nil);
		if (tmpl === ptrType$5.nil) {
			_tmp = ptrType$5.nil; _tmp$1 = fmt.Errorf("html/template: %q is undefined", new sliceType$2([new $String(name)])); tmpl = _tmp; err = _tmp$1;
			return [tmpl, err];
		}
		if (!($interfaceIsEqual(tmpl.escapeErr, $ifaceNil)) && !($interfaceIsEqual(tmpl.escapeErr, escapeOK))) {
			_tmp$2 = ptrType$5.nil; _tmp$3 = tmpl.escapeErr; tmpl = _tmp$2; err = _tmp$3;
			return [tmpl, err];
		}
		if (tmpl.text.Tree === ptrType$3.nil || tmpl.text.Tree.Root === ptrType$8.nil) {
			_tmp$4 = ptrType$5.nil; _tmp$5 = fmt.Errorf("html/template: %q is an incomplete template", new sliceType$2([new $String(name)])); tmpl = _tmp$4; err = _tmp$5;
			return [tmpl, err];
		}
		if (t.text.Lookup(name) === ptrType$16.nil) {
			$panic(new $String("html/template internal error: template escaping out of sync"));
		}
		if ($interfaceIsEqual(tmpl.escapeErr, $ifaceNil)) {
			err = escapeTemplate(tmpl, tmpl.text.Tree.Root, name);
		}
		_tmp$6 = tmpl; _tmp$7 = err; tmpl = _tmp$6; err = _tmp$7;
		return [tmpl, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [tmpl, err]; }
	};
	Template.prototype.lookupAndEscapeTemplate = function(name) { return this.$val.lookupAndEscapeTemplate(name); };
	Template.ptr.prototype.Parse = function(src) {
		var $deferred = [], $err = null, _entry, _i, _ref, _tuple, err, name, ret, t, tmpl, v;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		t.nameSpace.mu.Lock();
		t.escapeErr = $ifaceNil;
		t.nameSpace.mu.Unlock();
		_tuple = t.text.Parse(src); ret = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$5.nil, err];
		}
		t.nameSpace.mu.Lock();
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		_ref = ret.Templates();
		_i = 0;
		while (_i < _ref.$length) {
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			name = v.Name();
			tmpl = (_entry = t.nameSpace.set[name], _entry !== undefined ? _entry.v : ptrType$5.nil);
			if (tmpl === ptrType$5.nil) {
				tmpl = t.new$(name);
			}
			tmpl.escapeErr = $ifaceNil;
			tmpl.text = v;
			tmpl.Tree = v.Tree;
			_i++;
		}
		return [t, $ifaceNil];
		/* */ } catch(err) { $err = err; return [ptrType$5.nil, $ifaceNil]; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Template.prototype.Parse = function(src) { return this.$val.Parse(src); };
	Template.ptr.prototype.AddParseTree = function(name, tree) {
		var $deferred = [], $err = null, _key$11, _tuple, err, ret, t, text;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		t.nameSpace.mu.Lock();
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		if (!($interfaceIsEqual(t.escapeErr, $ifaceNil))) {
			return [ptrType$5.nil, fmt.Errorf("html/template: cannot AddParseTree to %q after it has executed", new sliceType$2([new $String(t.Name())]))];
		}
		_tuple = t.text.AddParseTree(name, tree); text = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$5.nil, err];
		}
		ret = new Template.ptr($ifaceNil, text, text.Tree, t.nameSpace);
		_key$11 = name; (t.nameSpace.set || $throwRuntimeError("assignment to entry in nil map"))[_key$11] = { k: _key$11, v: ret };
		return [ret, $ifaceNil];
		/* */ } catch(err) { $err = err; return [ptrType$5.nil, $ifaceNil]; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Template.prototype.AddParseTree = function(name, tree) { return this.$val.AddParseTree(name, tree); };
	Template.ptr.prototype.Clone = function() {
		var $deferred = [], $err = null, _entry, _i, _key$11, _ref, _tuple, err, name, ret, src, t, textClone, x;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		t.nameSpace.mu.Lock();
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		if (!($interfaceIsEqual(t.escapeErr, $ifaceNil))) {
			return [ptrType$5.nil, fmt.Errorf("html/template: cannot Clone %q after it has executed", new sliceType$2([new $String(t.Name())]))];
		}
		_tuple = t.text.Clone(); textClone = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$5.nil, err];
		}
		ret = new Template.ptr($ifaceNil, textClone, textClone.Tree, new nameSpace.ptr(new sync.Mutex.ptr(), new $Map()));
		_ref = textClone.Templates();
		_i = 0;
		while (_i < _ref.$length) {
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			name = x.Name();
			src = (_entry = t.nameSpace.set[name], _entry !== undefined ? _entry.v : ptrType$5.nil);
			if (src === ptrType$5.nil || !($interfaceIsEqual(src.escapeErr, $ifaceNil))) {
				return [ptrType$5.nil, fmt.Errorf("html/template: cannot Clone %q after it has executed", new sliceType$2([new $String(t.Name())]))];
			}
			x.Tree = x.Tree.Copy();
			_key$11 = name; (ret.nameSpace.set || $throwRuntimeError("assignment to entry in nil map"))[_key$11] = { k: _key$11, v: new Template.ptr($ifaceNil, x, x.Tree, ret.nameSpace) };
			_i++;
		}
		return [ret, $ifaceNil];
		/* */ } catch(err) { $err = err; return [ptrType$5.nil, $ifaceNil]; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Template.prototype.Clone = function() { return this.$val.Clone(); };
	New = $pkg.New = function(name) {
		var _key$11, tmpl;
		tmpl = new Template.ptr($ifaceNil, template.New(name), ptrType$3.nil, new nameSpace.ptr(new sync.Mutex.ptr(), new $Map()));
		_key$11 = name; (tmpl.nameSpace.set || $throwRuntimeError("assignment to entry in nil map"))[_key$11] = { k: _key$11, v: tmpl };
		return tmpl;
	};
	Template.ptr.prototype.New = function(name) {
		var $deferred = [], $err = null, t;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		t.nameSpace.mu.Lock();
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		return t.new$(name);
		/* */ } catch(err) { $err = err; return ptrType$5.nil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Template.prototype.New = function(name) { return this.$val.New(name); };
	Template.ptr.prototype.new$ = function(name) {
		var _key$11, t, tmpl;
		t = this;
		tmpl = new Template.ptr($ifaceNil, t.text.New(name), ptrType$3.nil, t.nameSpace);
		_key$11 = name; (tmpl.nameSpace.set || $throwRuntimeError("assignment to entry in nil map"))[_key$11] = { k: _key$11, v: tmpl };
		return tmpl;
	};
	Template.prototype.new$ = function(name) { return this.$val.new$(name); };
	Template.ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.text.Name();
	};
	Template.prototype.Name = function() { return this.$val.Name(); };
	Template.ptr.prototype.Funcs = function(funcMap$1) {
		var t;
		t = this;
		t.text.Funcs(funcMap$1);
		return t;
	};
	Template.prototype.Funcs = function(funcMap$1) { return this.$val.Funcs(funcMap$1); };
	Template.ptr.prototype.Delims = function(left, right) {
		var t;
		t = this;
		t.text.Delims(left, right);
		return t;
	};
	Template.prototype.Delims = function(left, right) { return this.$val.Delims(left, right); };
	Template.ptr.prototype.Lookup = function(name) {
		var $deferred = [], $err = null, _entry, t;
		/* */ try { $deferFrames.push($deferred);
		t = this;
		t.nameSpace.mu.Lock();
		$deferred.push([$methodVal(t.nameSpace.mu, "Unlock"), []]);
		return (_entry = t.nameSpace.set[name], _entry !== undefined ? _entry.v : ptrType$5.nil);
		/* */ } catch(err) { $err = err; return ptrType$5.nil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Template.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	Must = $pkg.Must = function(t, err) {
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		return t;
	};
	Template.ptr.prototype.ParseFiles = function(filenames) {
		var t;
		t = this;
		return parseFiles(t, filenames);
	};
	Template.prototype.ParseFiles = function(filenames) { return this.$val.ParseFiles(filenames); };
	parseFiles = function(t, filenames) {
		var _i, _ref, _tuple, _tuple$1, b, err, filename, name, s, tmpl;
		if (filenames.$length === 0) {
			return [ptrType$5.nil, fmt.Errorf("html/template: no files named in call to ParseFiles", new sliceType$2([]))];
		}
		_ref = filenames;
		_i = 0;
		while (_i < _ref.$length) {
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple = ioutil.ReadFile(filename); b = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$5.nil, err];
			}
			s = $bytesToString(b);
			name = filepath.Base(filename);
			tmpl = ptrType$5.nil;
			if (t === ptrType$5.nil) {
				t = New(name);
			}
			if (name === t.Name()) {
				tmpl = t;
			} else {
				tmpl = t.New(name);
			}
			_tuple$1 = tmpl.Parse(s); err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ptrType$5.nil, err];
			}
			_i++;
		}
		return [t, $ifaceNil];
	};
	Template.ptr.prototype.ParseGlob = function(pattern) {
		var t;
		t = this;
		return parseGlob(t, pattern);
	};
	Template.prototype.ParseGlob = function(pattern) { return this.$val.ParseGlob(pattern); };
	parseGlob = function(t, pattern) {
		var _tuple, err, filenames;
		_tuple = filepath.Glob(pattern); filenames = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ptrType$5.nil, err];
		}
		if (filenames.$length === 0) {
			return [ptrType$5.nil, fmt.Errorf("html/template: pattern matches no files: %#q", new sliceType$2([new $String(pattern)]))];
		}
		return parseFiles(t, filenames);
	};
	tText = function(c, s) {
		var _tmp, _tmp$1, _tuple, e, end, i, j, k;
		c = $clone(c, context);
		k = 0;
		while (true) {
			i = k + bytes.IndexByte($subslice(s, k), 60) >> 0;
			if (i < k || ((i + 1 >> 0) === s.$length)) {
				return [c, s.$length];
			} else if ((i + 4 >> 0) <= s.$length && bytes.Equal(commentStart, $subslice(s, i, (i + 4 >> 0)))) {
				return [new context.ptr(5, 0, 0, 0, 0, 0, ptrType$4.nil), i + 4 >> 0];
			}
			i = i + (1) >> 0;
			end = false;
			if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 47) {
				if ((i + 1 >> 0) === s.$length) {
					return [c, s.$length];
				}
				_tmp = true; _tmp$1 = i + 1 >> 0; end = _tmp; i = _tmp$1;
			}
			_tuple = eatTagName(s, i); j = _tuple[0]; e = _tuple[1];
			if (!((j === i))) {
				if (end) {
					e = 0;
				}
				return [new context.ptr(1, 0, 0, 0, 0, e, ptrType$4.nil), j];
			}
			k = j;
		}
	};
	tTag = function(c, s) {
		var _ref, _tmp, _tmp$1, _tuple, attr$1, err, i, j, state$1, x;
		c = $clone(c, context);
		i = eatWhiteSpace(s, 0);
		if (i === s.$length) {
			return [c, s.$length];
		}
		if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 62) {
			return [new context.ptr((x = c.element, ((x < 0 || x >= elementContentType.length) ? $throwRuntimeError("index out of range") : elementContentType[x])), 0, 0, 0, 0, c.element, ptrType$4.nil), i + 1 >> 0];
		}
		_tuple = eatAttrName(s, i); j = _tuple[0]; err = _tuple[1];
		if (!(err === ptrType$4.nil)) {
			return [new context.ptr(23, 0, 0, 0, 0, 0, err), s.$length];
		}
		_tmp = 1; _tmp$1 = 0; state$1 = _tmp; attr$1 = _tmp$1;
		if (i === j) {
			return [new context.ptr(23, 0, 0, 0, 0, 0, errorf(2, $ifaceNil, 0, "expected space, attr name, or end of tag, but got %q", new sliceType$2([$subslice(s, i)]))), s.$length];
		}
		_ref = attrType($bytesToString($subslice(s, i, j)));
		if (_ref === 6) {
			attr$1 = 3;
		} else if (_ref === 1) {
			attr$1 = 2;
		} else if (_ref === 4) {
			attr$1 = 1;
		}
		if (j === s.$length) {
			state$1 = 2;
		} else {
			state$1 = 3;
		}
		return [new context.ptr(state$1, 0, 0, 0, attr$1, c.element, ptrType$4.nil), j];
	};
	tAttrName = function(c, s) {
		var _tuple, err, i;
		c = $clone(c, context);
		_tuple = eatAttrName(s, 0); i = _tuple[0]; err = _tuple[1];
		if (!(err === ptrType$4.nil)) {
			return [new context.ptr(23, 0, 0, 0, 0, 0, err), s.$length];
		} else if (!((i === s.$length))) {
			c.state = 3;
		}
		return [c, i];
	};
	tAfterName = function(c, s) {
		var i;
		c = $clone(c, context);
		i = eatWhiteSpace(s, 0);
		if (i === s.$length) {
			return [c, s.$length];
		} else if (!((((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 61))) {
			c.state = 1;
			return [c, i];
		}
		c.state = 4;
		return [c, i + 1 >> 0];
	};
	tBeforeValue = function(c, s) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, delim$1, i, x;
		c = $clone(c, context);
		i = eatWhiteSpace(s, 0);
		if (i === s.$length) {
			return [c, s.$length];
		}
		delim$1 = 3;
		_ref = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
		if (_ref === 39) {
			_tmp = 2; _tmp$1 = i + 1 >> 0; delim$1 = _tmp; i = _tmp$1;
		} else if (_ref === 34) {
			_tmp$2 = 1; _tmp$3 = i + 1 >> 0; delim$1 = _tmp$2; i = _tmp$3;
		}
		_tmp$4 = (x = c.attr, ((x < 0 || x >= attrStartStates.length) ? $throwRuntimeError("index out of range") : attrStartStates[x])); _tmp$5 = delim$1; _tmp$6 = 0; c.state = _tmp$4; c.delim = _tmp$5; c.attr = _tmp$6;
		return [c, i];
	};
	tHTMLCmt = function(c, s) {
		var i;
		c = $clone(c, context);
		i = bytes.Index(s, commentEnd);
		if (!((i === -1))) {
			return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), i + 3 >> 0];
		}
		return [c, s.$length];
	};
	tSpecialTagEnd = function(c, s) {
		var i, x;
		c = $clone(c, context);
		if (!((c.element === 0))) {
			i = strings.Index(strings.ToLower($bytesToString(s)), (x = c.element, ((x < 0 || x >= specialTagEndMarkers.length) ? $throwRuntimeError("index out of range") : specialTagEndMarkers[x])));
			if (!((i === -1))) {
				return [new context.ptr(0, 0, 0, 0, 0, 0, ptrType$4.nil), i];
			}
		}
		return [c, s.$length];
	};
	tAttr = function(c, s) {
		c = $clone(c, context);
		return [c, s.$length];
	};
	tURL = function(c, s) {
		c = $clone(c, context);
		if (bytes.IndexAny(s, "#?") >= 0) {
			c.urlPart = 2;
		} else if (!((s.$length === eatWhiteSpace(s, 0))) && (c.urlPart === 0)) {
			c.urlPart = 1;
		}
		return [c, s.$length];
	};
	tJS = function(c, s) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, i, x, x$1;
		c = $clone(c, context);
		i = bytes.IndexAny(s, "\"'/");
		if (i === -1) {
			c.jsCtx = nextJSCtx(s, c.jsCtx);
			return [c, s.$length];
		}
		c.jsCtx = nextJSCtx($subslice(s, 0, i), c.jsCtx);
		_ref = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
		if (_ref === 34) {
			_tmp = 10; _tmp$1 = 0; c.state = _tmp; c.jsCtx = _tmp$1;
		} else if (_ref === 39) {
			_tmp$2 = 11; _tmp$3 = 0; c.state = _tmp$2; c.jsCtx = _tmp$3;
		} else if (_ref === 47) {
			if ((i + 1 >> 0) < s.$length && ((x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) === 47)) {
				_tmp$4 = 14; _tmp$5 = i + 1 >> 0; c.state = _tmp$4; i = _tmp$5;
			} else if ((i + 1 >> 0) < s.$length && ((x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])) === 42)) {
				_tmp$6 = 13; _tmp$7 = i + 1 >> 0; c.state = _tmp$6; i = _tmp$7;
			} else if (c.jsCtx === 0) {
				c.state = 12;
			} else if (c.jsCtx === 1) {
				c.jsCtx = 0;
			} else {
				return [new context.ptr(23, 0, 0, 0, 0, 0, errorf(10, $ifaceNil, 0, "'/' could start a division or regexp: %.32q", new sliceType$2([$subslice(s, i)]))), s.$length];
			}
		} else {
			$panic(new $String("unreachable"));
		}
		return [c, i + 1 >> 0];
	};
	tJSDelimited = function(c, s) {
		var _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, i, inCharset, k, specials;
		c = $clone(c, context);
		specials = "\\\"";
		_ref = c.state;
		if (_ref === 11) {
			specials = "\\'";
		} else if (_ref === 12) {
			specials = "\\/[]";
		}
		_tmp = 0; _tmp$1 = false; k = _tmp; inCharset = _tmp$1;
		while (true) {
			i = k + bytes.IndexAny($subslice(s, k), specials) >> 0;
			if (i < k) {
				break;
			}
			_ref$1 = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (_ref$1 === 92) {
				i = i + (1) >> 0;
				if (i === s.$length) {
					return [new context.ptr(23, 0, 0, 0, 0, 0, errorf(8, $ifaceNil, 0, "unfinished escape sequence in JS string: %q", new sliceType$2([s]))), s.$length];
				}
			} else if (_ref$1 === 91) {
				inCharset = true;
			} else if (_ref$1 === 93) {
				inCharset = false;
			} else {
				if (!inCharset) {
					_tmp$2 = 9; _tmp$3 = 1; c.state = _tmp$2; c.jsCtx = _tmp$3;
					return [c, i + 1 >> 0];
				}
			}
			k = i + 1 >> 0;
		}
		if (inCharset) {
			return [new context.ptr(23, 0, 0, 0, 0, 0, errorf(7, $ifaceNil, 0, "unfinished JS regexp charset: %q", new sliceType$2([s]))), s.$length];
		}
		return [c, s.$length];
	};
	tBlockCmt = function(c, s) {
		var _ref, i;
		c = $clone(c, context);
		i = bytes.Index(s, blockCommentEnd);
		if (i === -1) {
			return [c, s.$length];
		}
		_ref = c.state;
		if (_ref === 13) {
			c.state = 9;
		} else if (_ref === 21) {
			c.state = 15;
		} else {
			$panic(new $String(new state(c.state).String()));
		}
		return [c, i + 2 >> 0];
	};
	tLineCmt = function(c, s) {
		var _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, endState, i, lineTerminators;
		c = $clone(c, context);
		lineTerminators = "";
		endState = 0;
		_ref = c.state;
		if (_ref === 14) {
			_tmp = "\n\r\xE2\x80\xA8\xE2\x80\xA9"; _tmp$1 = 9; lineTerminators = _tmp; endState = _tmp$1;
		} else if (_ref === 22) {
			_tmp$2 = "\n\f\r"; _tmp$3 = 15; lineTerminators = _tmp$2; endState = _tmp$3;
		} else {
			$panic(new $String(new state(c.state).String()));
		}
		i = bytes.IndexAny(s, lineTerminators);
		if (i === -1) {
			return [c, s.$length];
		}
		c.state = endState;
		return [c, i];
	};
	tCSS = function(c, s) {
		var _ref, _ref$1, _tmp, _tmp$1, _tmp$2, _tmp$3, i, j, k, p, x;
		c = $clone(c, context);
		k = 0;
		while (true) {
			i = k + bytes.IndexAny($subslice(s, k), "(\"'/") >> 0;
			if (i < k) {
				return [c, s.$length];
			}
			_ref = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (_ref === 40) {
				p = bytes.TrimRight($subslice(s, 0, i), "\t\n\f\r ");
				if (endsWithCSSKeyword(p, "url")) {
					j = s.$length - bytes.TrimLeft($subslice(s, (i + 1 >> 0)), "\t\n\f\r ").$length >> 0;
					if (!((j === s.$length)) && (((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]) === 34)) {
						_tmp = 18; _tmp$1 = j + 1 >> 0; c.state = _tmp; j = _tmp$1;
					} else if (!((j === s.$length)) && (((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]) === 39)) {
						_tmp$2 = 19; _tmp$3 = j + 1 >> 0; c.state = _tmp$2; j = _tmp$3;
					} else {
						c.state = 20;
					}
					return [c, j];
				}
			} else if (_ref === 47) {
				if ((i + 1 >> 0) < s.$length) {
					_ref$1 = (x = i + 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x]));
					if (_ref$1 === 47) {
						c.state = 22;
						return [c, i + 2 >> 0];
					} else if (_ref$1 === 42) {
						c.state = 21;
						return [c, i + 2 >> 0];
					}
				}
			} else if (_ref === 34) {
				c.state = 16;
				return [c, i + 1 >> 0];
			} else if (_ref === 39) {
				c.state = 17;
				return [c, i + 1 >> 0];
			}
			k = i + 1 >> 0;
		}
	};
	tCSSStr = function(c, s) {
		var _ref, _tuple, _tuple$1, c$1, endAndEsc, i, k, nread;
		c = $clone(c, context);
		endAndEsc = "";
		_ref = c.state;
		if (_ref === 16 || _ref === 18) {
			endAndEsc = "\\\"";
		} else if (_ref === 17 || _ref === 19) {
			endAndEsc = "\\'";
		} else if (_ref === 20) {
			endAndEsc = "\\\t\n\f\r )";
		} else {
			$panic(new $String(new state(c.state).String()));
		}
		k = 0;
		while (true) {
			i = k + bytes.IndexAny($subslice(s, k), endAndEsc) >> 0;
			if (i < k) {
				_tuple = tURL(c, decodeCSS($subslice(s, k))); c$1 = $clone(_tuple[0], context); nread = _tuple[1];
				return [c$1, k + nread >> 0];
			}
			if (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 92) {
				i = i + (1) >> 0;
				if (i === s.$length) {
					return [new context.ptr(23, 0, 0, 0, 0, 0, errorf(8, $ifaceNil, 0, "unfinished escape sequence in CSS string: %q", new sliceType$2([s]))), s.$length];
				}
			} else {
				c.state = 15;
				return [c, i + 1 >> 0];
			}
			_tuple$1 = tURL(c, decodeCSS($subslice(s, 0, (i + 1 >> 0)))); $copy(c, _tuple$1[0], context);
			k = i + 1 >> 0;
		}
	};
	tError = function(c, s) {
		c = $clone(c, context);
		return [c, s.$length];
	};
	eatAttrName = function(s, i) {
		var _ref, j;
		j = i;
		while (j < s.$length) {
			_ref = ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]);
			if (_ref === 32 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 61 || _ref === 62) {
				return [j, ptrType$4.nil];
			} else if (_ref === 39 || _ref === 34 || _ref === 60) {
				return [-1, errorf(2, $ifaceNil, 0, "%q in attribute name: %.32q", new sliceType$2([$subslice(s, j, (j + 1 >> 0)), s]))];
			} else {
			}
			j = j + (1) >> 0;
		}
		return [s.$length, ptrType$4.nil];
	};
	asciiAlpha = function(c) {
		return 65 <= c && c <= 90 || 97 <= c && c <= 122;
	};
	asciiAlphaNum = function(c) {
		return asciiAlpha(c) || 48 <= c && c <= 57;
	};
	eatTagName = function(s, i) {
		var _entry, j, x, x$1;
		if ((i === s.$length) || !asciiAlpha(((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]))) {
			return [i, 0];
		}
		j = i + 1 >> 0;
		while (j < s.$length) {
			x = ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]);
			if (asciiAlphaNum(x)) {
				j = j + (1) >> 0;
				continue;
			}
			if (((x === 58) || (x === 45)) && (j + 1 >> 0) < s.$length && asciiAlphaNum((x$1 = j + 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])))) {
				j = j + (2) >> 0;
				continue;
			}
			break;
		}
		return [j, (_entry = elementNameMap[strings.ToLower($bytesToString($subslice(s, i, j)))], _entry !== undefined ? _entry.v : 0)];
	};
	eatWhiteSpace = function(s, i) {
		var _ref, j;
		j = i;
		while (j < s.$length) {
			_ref = ((j < 0 || j >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + j]);
			if (_ref === 32 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13) {
			} else {
				return j;
			}
			j = j + (1) >> 0;
		}
		return s.$length;
	};
	urlFilter = function(args) {
		var _tuple, i, protocol, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 6) {
			return s;
		}
		i = strings.IndexRune(s, 58);
		if (i >= 0 && strings.IndexRune(s.substring(0, i), 47) < 0) {
			protocol = strings.ToLower(s.substring(0, i));
			if (!(protocol === "http") && !(protocol === "https") && !(protocol === "mailto")) {
				return "#ZgotmplZ";
			}
		}
		return s;
	};
	urlEscaper = function(args) {
		return urlProcessor(false, args);
	};
	urlNormalizer = function(args) {
		return urlProcessor(true, args);
	};
	urlProcessor = function(norm, args) {
		var _ref, _tmp, _tmp$1, _tuple, b, c, i, n, s, t, written;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 6) {
			norm = true;
		}
		b = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		written = 0;
		_tmp = 0; _tmp$1 = s.length; i = _tmp; n = _tmp$1;
		while (i < n) {
			c = s.charCodeAt(i);
			_ref = c;
			if (_ref === 33 || _ref === 35 || _ref === 36 || _ref === 38 || _ref === 42 || _ref === 43 || _ref === 44 || _ref === 47 || _ref === 58 || _ref === 59 || _ref === 61 || _ref === 63 || _ref === 64 || _ref === 91 || _ref === 93) {
				if (norm) {
					i = i + (1) >> 0;
					continue;
				}
			} else if (_ref === 45 || _ref === 46 || _ref === 95 || _ref === 126) {
				i = i + (1) >> 0;
				continue;
			} else if (_ref === 37) {
				if (norm && (i + 2 >> 0) < s.length && isHex(s.charCodeAt((i + 1 >> 0))) && isHex(s.charCodeAt((i + 2 >> 0)))) {
					i = i + (1) >> 0;
					continue;
				}
			} else {
				if (97 <= c && c <= 122) {
					i = i + (1) >> 0;
					continue;
				}
				if (65 <= c && c <= 90) {
					i = i + (1) >> 0;
					continue;
				}
				if (48 <= c && c <= 57) {
					i = i + (1) >> 0;
					continue;
				}
			}
			b.WriteString(s.substring(written, i));
			fmt.Fprintf(b, "%%%02x", new sliceType$2([new $Uint8(c)]));
			written = i + 1 >> 0;
			i = i + (1) >> 0;
		}
		if (written === 0) {
			return s;
		}
		b.WriteString(s.substring(written));
		return b.String();
	};
	context.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "eq", name: "eq", pkg: "html/template", type: $funcType([context], [$Bool], false)}, {prop: "mangle", name: "mangle", pkg: "html/template", type: $funcType([$String], [$String], false)}];
	ptrType$18.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}, {prop: "eq", name: "eq", pkg: "html/template", type: $funcType([context], [$Bool], false)}, {prop: "mangle", name: "mangle", pkg: "html/template", type: $funcType([$String], [$String], false)}];
	state.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$19.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	delim.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$20.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	urlPart.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$21.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	jsCtx.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$22.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	element.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$23.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	attr.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$24.methods = [{prop: "String", name: "String", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$4.methods = [{prop: "Error", name: "Error", pkg: "", type: $funcType([], [$String], false)}];
	ptrType$26.methods = [{prop: "commit", name: "commit", pkg: "html/template", type: $funcType([], [], false)}, {prop: "computeOutCtx", name: "computeOutCtx", pkg: "html/template", type: $funcType([context, ptrType$16], [context], false)}, {prop: "editActionNode", name: "editActionNode", pkg: "html/template", type: $funcType([ptrType$6, sliceType$1], [], false)}, {prop: "editTemplateNode", name: "editTemplateNode", pkg: "html/template", type: $funcType([ptrType$10, $String], [], false)}, {prop: "editTextNode", name: "editTextNode", pkg: "html/template", type: $funcType([ptrType$11, sliceType], [], false)}, {prop: "escape", name: "escape", pkg: "html/template", type: $funcType([context, parse.Node], [context], false)}, {prop: "escapeAction", name: "escapeAction", pkg: "html/template", type: $funcType([context, ptrType$6], [context], false)}, {prop: "escapeBranch", name: "escapeBranch", pkg: "html/template", type: $funcType([context, ptrType$25, $String], [context], false)}, {prop: "escapeList", name: "escapeList", pkg: "html/template", type: $funcType([context, ptrType$8], [context], false)}, {prop: "escapeListConditionally", name: "escapeListConditionally", pkg: "html/template", type: $funcType([context, ptrType$8, funcType$1], [context, $Bool], false)}, {prop: "escapeTemplate", name: "escapeTemplate", pkg: "html/template", type: $funcType([context, ptrType$10], [context], false)}, {prop: "escapeTemplateBody", name: "escapeTemplateBody", pkg: "html/template", type: $funcType([context, ptrType$16], [context, $Bool], false)}, {prop: "escapeText", name: "escapeText", pkg: "html/template", type: $funcType([context, ptrType$11], [context], false)}, {prop: "escapeTree", name: "escapeTree", pkg: "html/template", type: $funcType([context, parse.Node, $String, $Int], [context, $String], false)}, {prop: "template", name: "template", pkg: "html/template", type: $funcType([$String], [ptrType$16], false)}];
	ptrType$5.methods = [{prop: "AddParseTree", name: "AddParseTree", pkg: "", type: $funcType([$String, ptrType$3], [ptrType$5, $error], false)}, {prop: "Clone", name: "Clone", pkg: "", type: $funcType([], [ptrType$5, $error], false)}, {prop: "Delims", name: "Delims", pkg: "", type: $funcType([$String, $String], [ptrType$5], false)}, {prop: "Execute", name: "Execute", pkg: "", type: $funcType([io.Writer, $emptyInterface], [$error], false)}, {prop: "ExecuteTemplate", name: "ExecuteTemplate", pkg: "", type: $funcType([io.Writer, $String, $emptyInterface], [$error], false)}, {prop: "Funcs", name: "Funcs", pkg: "", type: $funcType([FuncMap], [ptrType$5], false)}, {prop: "Lookup", name: "Lookup", pkg: "", type: $funcType([$String], [ptrType$5], false)}, {prop: "Name", name: "Name", pkg: "", type: $funcType([], [$String], false)}, {prop: "New", name: "New", pkg: "", type: $funcType([$String], [ptrType$5], false)}, {prop: "Parse", name: "Parse", pkg: "", type: $funcType([$String], [ptrType$5, $error], false)}, {prop: "ParseFiles", name: "ParseFiles", pkg: "", type: $funcType([sliceType$1], [ptrType$5, $error], true)}, {prop: "ParseGlob", name: "ParseGlob", pkg: "", type: $funcType([$String], [ptrType$5, $error], false)}, {prop: "Templates", name: "Templates", pkg: "", type: $funcType([], [sliceType$6], false)}, {prop: "escape", name: "escape", pkg: "html/template", type: $funcType([], [$error], false)}, {prop: "lookupAndEscapeTemplate", name: "lookupAndEscapeTemplate", pkg: "html/template", type: $funcType([$String], [ptrType$5, $error], false)}, {prop: "new$", name: "new", pkg: "html/template", type: $funcType([$String], [ptrType$5], false)}];
	context.init([{prop: "state", name: "state", pkg: "html/template", type: state, tag: ""}, {prop: "delim", name: "delim", pkg: "html/template", type: delim, tag: ""}, {prop: "urlPart", name: "urlPart", pkg: "html/template", type: urlPart, tag: ""}, {prop: "jsCtx", name: "jsCtx", pkg: "html/template", type: jsCtx, tag: ""}, {prop: "attr", name: "attr", pkg: "html/template", type: attr, tag: ""}, {prop: "element", name: "element", pkg: "html/template", type: element, tag: ""}, {prop: "err", name: "err", pkg: "html/template", type: ptrType$4, tag: ""}]);
	Error.init([{prop: "ErrorCode", name: "ErrorCode", pkg: "", type: ErrorCode, tag: ""}, {prop: "Node", name: "Node", pkg: "", type: parse.Node, tag: ""}, {prop: "Name", name: "Name", pkg: "", type: $String, tag: ""}, {prop: "Line", name: "Line", pkg: "", type: $Int, tag: ""}, {prop: "Description", name: "Description", pkg: "", type: $String, tag: ""}]);
	escaper.init([{prop: "tmpl", name: "tmpl", pkg: "html/template", type: ptrType$5, tag: ""}, {prop: "output", name: "output", pkg: "html/template", type: mapType$1, tag: ""}, {prop: "derived", name: "derived", pkg: "html/template", type: mapType$2, tag: ""}, {prop: "called", name: "called", pkg: "html/template", type: mapType$3, tag: ""}, {prop: "actionNodeEdits", name: "actionNodeEdits", pkg: "html/template", type: mapType$4, tag: ""}, {prop: "templateNodeEdits", name: "templateNodeEdits", pkg: "html/template", type: mapType$5, tag: ""}, {prop: "textNodeEdits", name: "textNodeEdits", pkg: "html/template", type: mapType$6, tag: ""}]);
	Template.init([{prop: "escapeErr", name: "escapeErr", pkg: "html/template", type: $error, tag: ""}, {prop: "text", name: "text", pkg: "html/template", type: ptrType$16, tag: ""}, {prop: "Tree", name: "Tree", pkg: "", type: ptrType$3, tag: ""}, {prop: "nameSpace", name: "", pkg: "html/template", type: ptrType$27, tag: ""}]);
	nameSpace.init([{prop: "mu", name: "mu", pkg: "html/template", type: sync.Mutex, tag: ""}, {prop: "set", name: "set", pkg: "html/template", type: mapType$7, tag: ""}]);
	FuncMap.init($String, $emptyInterface);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_template = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = json.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = fmt.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = html.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		$r = io.$init($BLOCKING); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
		$r = ioutil.$init($BLOCKING); /* */ $s = 6; case 6: if ($r && $r.$blocking) { $r = $r(); }
		$r = filepath.$init($BLOCKING); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
		$r = reflect.$init($BLOCKING); /* */ $s = 8; case 8: if ($r && $r.$blocking) { $r = $r(); }
		$r = strings.$init($BLOCKING); /* */ $s = 9; case 9: if ($r && $r.$blocking) { $r = $r(); }
		$r = sync.$init($BLOCKING); /* */ $s = 10; case 10: if ($r && $r.$blocking) { $r = $r(); }
		$r = template.$init($BLOCKING); /* */ $s = 11; case 11: if ($r && $r.$blocking) { $r = $r(); }
		$r = parse.$init($BLOCKING); /* */ $s = 12; case 12: if ($r && $r.$blocking) { $r = $r(); }
		$r = unicode.$init($BLOCKING); /* */ $s = 13; case 13: if ($r && $r.$blocking) { $r = $r(); }
		$r = utf8.$init($BLOCKING); /* */ $s = 14; case 14: if ($r && $r.$blocking) { $r = $r(); }
		attrTypeMap = (_map = new $Map(), _key = "accept", _map[_key] = { k: _key, v: 0 }, _key = "accept-charset", _map[_key] = { k: _key, v: 7 }, _key = "action", _map[_key] = { k: _key, v: 6 }, _key = "alt", _map[_key] = { k: _key, v: 0 }, _key = "archive", _map[_key] = { k: _key, v: 6 }, _key = "async", _map[_key] = { k: _key, v: 7 }, _key = "autocomplete", _map[_key] = { k: _key, v: 0 }, _key = "autofocus", _map[_key] = { k: _key, v: 0 }, _key = "autoplay", _map[_key] = { k: _key, v: 0 }, _key = "background", _map[_key] = { k: _key, v: 6 }, _key = "border", _map[_key] = { k: _key, v: 0 }, _key = "checked", _map[_key] = { k: _key, v: 0 }, _key = "cite", _map[_key] = { k: _key, v: 6 }, _key = "challenge", _map[_key] = { k: _key, v: 7 }, _key = "charset", _map[_key] = { k: _key, v: 7 }, _key = "class", _map[_key] = { k: _key, v: 0 }, _key = "classid", _map[_key] = { k: _key, v: 6 }, _key = "codebase", _map[_key] = { k: _key, v: 6 }, _key = "cols", _map[_key] = { k: _key, v: 0 }, _key = "colspan", _map[_key] = { k: _key, v: 0 }, _key = "content", _map[_key] = { k: _key, v: 7 }, _key = "contenteditable", _map[_key] = { k: _key, v: 0 }, _key = "contextmenu", _map[_key] = { k: _key, v: 0 }, _key = "controls", _map[_key] = { k: _key, v: 0 }, _key = "coords", _map[_key] = { k: _key, v: 0 }, _key = "crossorigin", _map[_key] = { k: _key, v: 7 }, _key = "data", _map[_key] = { k: _key, v: 6 }, _key = "datetime", _map[_key] = { k: _key, v: 0 }, _key = "default", _map[_key] = { k: _key, v: 0 }, _key = "defer", _map[_key] = { k: _key, v: 7 }, _key = "dir", _map[_key] = { k: _key, v: 0 }, _key = "dirname", _map[_key] = { k: _key, v: 0 }, _key = "disabled", _map[_key] = { k: _key, v: 0 }, _key = "draggable", _map[_key] = { k: _key, v: 0 }, _key = "dropzone", _map[_key] = { k: _key, v: 0 }, _key = "enctype", _map[_key] = { k: _key, v: 7 }, _key = "for", _map[_key] = { k: _key, v: 0 }, _key = "form", _map[_key] = { k: _key, v: 7 }, _key = "formaction", _map[_key] = { k: _key, v: 6 }, _key = "formenctype", _map[_key] = { k: _key, v: 7 }, _key = "formmethod", _map[_key] = { k: _key, v: 7 }, _key = "formnovalidate", _map[_key] = { k: _key, v: 7 }, _key = "formtarget", _map[_key] = { k: _key, v: 0 }, _key = "headers", _map[_key] = { k: _key, v: 0 }, _key = "height", _map[_key] = { k: _key, v: 0 }, _key = "hidden", _map[_key] = { k: _key, v: 0 }, _key = "high", _map[_key] = { k: _key, v: 0 }, _key = "href", _map[_key] = { k: _key, v: 6 }, _key = "hreflang", _map[_key] = { k: _key, v: 0 }, _key = "http-equiv", _map[_key] = { k: _key, v: 7 }, _key = "icon", _map[_key] = { k: _key, v: 6 }, _key = "id", _map[_key] = { k: _key, v: 0 }, _key = "ismap", _map[_key] = { k: _key, v: 0 }, _key = "keytype", _map[_key] = { k: _key, v: 7 }, _key = "kind", _map[_key] = { k: _key, v: 0 }, _key = "label", _map[_key] = { k: _key, v: 0 }, _key = "lang", _map[_key] = { k: _key, v: 0 }, _key = "language", _map[_key] = { k: _key, v: 7 }, _key = "list", _map[_key] = { k: _key, v: 0 }, _key = "longdesc", _map[_key] = { k: _key, v: 6 }, _key = "loop", _map[_key] = { k: _key, v: 0 }, _key = "low", _map[_key] = { k: _key, v: 0 }, _key = "manifest", _map[_key] = { k: _key, v: 6 }, _key = "max", _map[_key] = { k: _key, v: 0 }, _key = "maxlength", _map[_key] = { k: _key, v: 0 }, _key = "media", _map[_key] = { k: _key, v: 0 }, _key = "mediagroup", _map[_key] = { k: _key, v: 0 }, _key = "method", _map[_key] = { k: _key, v: 7 }, _key = "min", _map[_key] = { k: _key, v: 0 }, _key = "multiple", _map[_key] = { k: _key, v: 0 }, _key = "name", _map[_key] = { k: _key, v: 0 }, _key = "novalidate", _map[_key] = { k: _key, v: 7 }, _key = "open", _map[_key] = { k: _key, v: 0 }, _key = "optimum", _map[_key] = { k: _key, v: 0 }, _key = "pattern", _map[_key] = { k: _key, v: 7 }, _key = "placeholder", _map[_key] = { k: _key, v: 0 }, _key = "poster", _map[_key] = { k: _key, v: 6 }, _key = "profile", _map[_key] = { k: _key, v: 6 }, _key = "preload", _map[_key] = { k: _key, v: 0 }, _key = "pubdate", _map[_key] = { k: _key, v: 0 }, _key = "radiogroup", _map[_key] = { k: _key, v: 0 }, _key = "readonly", _map[_key] = { k: _key, v: 0 }, _key = "rel", _map[_key] = { k: _key, v: 7 }, _key = "required", _map[_key] = { k: _key, v: 0 }, _key = "reversed", _map[_key] = { k: _key, v: 0 }, _key = "rows", _map[_key] = { k: _key, v: 0 }, _key = "rowspan", _map[_key] = { k: _key, v: 0 }, _key = "sandbox", _map[_key] = { k: _key, v: 7 }, _key = "spellcheck", _map[_key] = { k: _key, v: 0 }, _key = "scope", _map[_key] = { k: _key, v: 0 }, _key = "scoped", _map[_key] = { k: _key, v: 0 }, _key = "seamless", _map[_key] = { k: _key, v: 0 }, _key = "selected", _map[_key] = { k: _key, v: 0 }, _key = "shape", _map[_key] = { k: _key, v: 0 }, _key = "size", _map[_key] = { k: _key, v: 0 }, _key = "sizes", _map[_key] = { k: _key, v: 0 }, _key = "span", _map[_key] = { k: _key, v: 0 }, _key = "src", _map[_key] = { k: _key, v: 6 }, _key = "srcdoc", _map[_key] = { k: _key, v: 2 }, _key = "srclang", _map[_key] = { k: _key, v: 0 }, _key = "start", _map[_key] = { k: _key, v: 0 }, _key = "step", _map[_key] = { k: _key, v: 0 }, _key = "style", _map[_key] = { k: _key, v: 1 }, _key = "tabindex", _map[_key] = { k: _key, v: 0 }, _key = "target", _map[_key] = { k: _key, v: 0 }, _key = "title", _map[_key] = { k: _key, v: 0 }, _key = "type", _map[_key] = { k: _key, v: 7 }, _key = "usemap", _map[_key] = { k: _key, v: 6 }, _key = "value", _map[_key] = { k: _key, v: 7 }, _key = "width", _map[_key] = { k: _key, v: 0 }, _key = "wrap", _map[_key] = { k: _key, v: 0 }, _key = "xmlns", _map[_key] = { k: _key, v: 6 }, _map);
		errorType = reflect.TypeOf(ptrType.nil).Elem();
		fmtStringerType = reflect.TypeOf(ptrType$1.nil).Elem();
		stateNames = $toNativeArray($kindString, ["stateText", "stateTag", "stateAttrName", "stateAfterName", "stateBeforeValue", "stateHTMLCmt", "stateRCDATA", "stateAttr", "stateURL", "stateJS", "stateJSDqStr", "stateJSSqStr", "stateJSRegexp", "stateJSBlockCmt", "stateJSLineCmt", "stateCSS", "stateCSSDqStr", "stateCSSSqStr", "stateCSSDqURL", "stateCSSSqURL", "stateCSSURL", "stateCSSBlockCmt", "stateCSSLineCmt", "stateError"]);
		delimNames = $toNativeArray($kindString, ["delimNone", "delimDoubleQuote", "delimSingleQuote", "delimSpaceOrTagEnd"]);
		urlPartNames = $toNativeArray($kindString, ["urlPartNone", "urlPartPreQuery", "urlPartQueryOrFrag", "urlPartUnknown"]);
		elementNames = $toNativeArray($kindString, ["elementNone", "elementScript", "elementStyle", "elementTextarea", "elementTitle"]);
		attrNames = $toNativeArray($kindString, ["attrNone", "attrScript", "attrStyle", "attrURL"]);
		expressionBytes = new sliceType($stringToBytes("expression"));
		mozBindingBytes = new sliceType($stringToBytes("mozbinding"));
		equivEscapers = (_map$1 = new $Map(), _key$1 = "html_template_attrescaper", _map$1[_key$1] = { k: _key$1, v: "html" }, _key$1 = "html_template_htmlescaper", _map$1[_key$1] = { k: _key$1, v: "html" }, _key$1 = "html_template_nospaceescaper", _map$1[_key$1] = { k: _key$1, v: "html" }, _key$1 = "html_template_rcdataescaper", _map$1[_key$1] = { k: _key$1, v: "html" }, _key$1 = "html_template_urlescaper", _map$1[_key$1] = { k: _key$1, v: "urlquery" }, _key$1 = "html_template_urlnormalizer", _map$1[_key$1] = { k: _key$1, v: "urlquery" }, _map$1);
		redundantFuncs = (_map$2 = new $Map(), _key$2 = "html_template_commentescaper", _map$2[_key$2] = { k: _key$2, v: (_map$3 = new $Map(), _key$3 = "html_template_attrescaper", _map$3[_key$3] = { k: _key$3, v: true }, _key$3 = "html_template_nospaceescaper", _map$3[_key$3] = { k: _key$3, v: true }, _key$3 = "html_template_htmlescaper", _map$3[_key$3] = { k: _key$3, v: true }, _map$3) }, _key$2 = "html_template_cssescaper", _map$2[_key$2] = { k: _key$2, v: (_map$4 = new $Map(), _key$4 = "html_template_attrescaper", _map$4[_key$4] = { k: _key$4, v: true }, _map$4) }, _key$2 = "html_template_jsregexpescaper", _map$2[_key$2] = { k: _key$2, v: (_map$5 = new $Map(), _key$5 = "html_template_attrescaper", _map$5[_key$5] = { k: _key$5, v: true }, _map$5) }, _key$2 = "html_template_jsstrescaper", _map$2[_key$2] = { k: _key$2, v: (_map$6 = new $Map(), _key$6 = "html_template_attrescaper", _map$6[_key$6] = { k: _key$6, v: true }, _map$6) }, _key$2 = "html_template_urlescaper", _map$2[_key$2] = { k: _key$2, v: (_map$7 = new $Map(), _key$7 = "html_template_urlnormalizer", _map$7[_key$7] = { k: _key$7, v: true }, _map$7) }, _map$2);
		delimEnds = $toNativeArray($kindString, ["", "\"", "'", " \t\n\f\r>"]);
		doctypeBytes = new sliceType($stringToBytes("<!DOCTYPE"));
		htmlReplacementTable = new sliceType$1(["\xEF\xBF\xBD", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#34;", "", "", "", "&amp;", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "", "&gt;"]);
		htmlNormReplacementTable = new sliceType$1(["\xEF\xBF\xBD", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#34;", "", "", "", "", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "", "&gt;"]);
		htmlNospaceReplacementTable = new sliceType$1(["&#xfffd;", "", "", "", "", "", "", "", "", "&#9;", "&#10;", "&#11;", "&#12;", "&#13;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#32;", "", "&#34;", "", "", "", "&amp;", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "&#61;", "&gt;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#96;"]);
		htmlNospaceNormReplacementTable = new sliceType$1(["&#xfffd;", "", "", "", "", "", "", "", "", "&#9;", "&#10;", "&#11;", "&#12;", "&#13;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#32;", "", "&#34;", "", "", "", "", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "&#61;", "&gt;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#96;"]);
		regexpPrecederKeywords = (_map$8 = new $Map(), _key$8 = "break", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "case", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "continue", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "delete", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "do", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "else", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "finally", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "in", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "instanceof", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "return", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "throw", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "try", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "typeof", _map$8[_key$8] = { k: _key$8, v: true }, _key$8 = "void", _map$8[_key$8] = { k: _key$8, v: true }, _map$8);
		jsonMarshalType = reflect.TypeOf(ptrType$2.nil).Elem();
		jsStrReplacementTable = new sliceType$1(["\\0", "", "", "", "", "", "", "", "", "\\t", "\\n", "\\x0b", "\\f", "\\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\x22", "", "", "", "\\x26", "\\x27", "", "", "", "\\x2b", "", "", "", "\\/", "", "", "", "", "", "", "", "", "", "", "", "", "\\x3c", "", "\\x3e", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\\\"]);
		jsStrNormReplacementTable = new sliceType$1(["\\0", "", "", "", "", "", "", "", "", "\\t", "\\n", "\\x0b", "\\f", "\\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\x22", "", "", "", "\\x26", "\\x27", "", "", "", "\\x2b", "", "", "", "\\/", "", "", "", "", "", "", "", "", "", "", "", "", "\\x3c", "", "\\x3e"]);
		jsRegexpReplacementTable = new sliceType$1(["\\0", "", "", "", "", "", "", "", "", "\\t", "\\n", "\\x0b", "\\f", "\\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\x22", "", "\\$", "", "\\x26", "\\x27", "\\(", "\\)", "\\*", "\\x2b", "", "\\-", "\\.", "\\/", "", "", "", "", "", "", "", "", "", "", "", "", "\\x3c", "", "\\x3e", "\\?", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\[", "\\\\", "\\]", "\\^", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\{", "\\|", "\\}"]);
		escapeOK = fmt.Errorf("template escaped correctly", new sliceType$2([]));
		commentStart = new sliceType($stringToBytes("<!--"));
		commentEnd = new sliceType($stringToBytes("-->"));
		elementContentType = $toNativeArray($kindUint8, [0, 9, 15, 6, 6]);
		attrStartStates = $toNativeArray($kindUint8, [7, 9, 15, 8]);
		specialTagEndMarkers = $toNativeArray($kindString, ["", "</script", "</style", "</textarea", "</title"]);
		blockCommentEnd = new sliceType($stringToBytes("*/"));
		elementNameMap = (_map$9 = new $Map(), _key$9 = "script", _map$9[_key$9] = { k: _key$9, v: 1 }, _key$9 = "style", _map$9[_key$9] = { k: _key$9, v: 2 }, _key$9 = "textarea", _map$9[_key$9] = { k: _key$9, v: 3 }, _key$9 = "title", _map$9[_key$9] = { k: _key$9, v: 4 }, _map$9);
		transitionFunc = $toNativeArray($kindFunc, [tText, tTag, tAttrName, tAfterName, tBeforeValue, tHTMLCmt, tSpecialTagEnd, tAttr, tURL, tJS, tJSDelimited, tJSDelimited, tJSDelimited, tBlockCmt, tLineCmt, tCSS, tCSSStr, tCSSStr, tCSSStr, tCSSStr, tCSSStr, tBlockCmt, tLineCmt, tError]);
		funcMap = (_map$10 = new $Map(), _key$10 = "html_template_attrescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(attrEscaper) }, _key$10 = "html_template_commentescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(commentEscaper) }, _key$10 = "html_template_cssescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(cssEscaper) }, _key$10 = "html_template_cssvaluefilter", _map$10[_key$10] = { k: _key$10, v: new funcType(cssValueFilter) }, _key$10 = "html_template_htmlnamefilter", _map$10[_key$10] = { k: _key$10, v: new funcType(htmlNameFilter) }, _key$10 = "html_template_htmlescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(htmlEscaper) }, _key$10 = "html_template_jsregexpescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(jsRegexpEscaper) }, _key$10 = "html_template_jsstrescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(jsStrEscaper) }, _key$10 = "html_template_jsvalescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(jsValEscaper) }, _key$10 = "html_template_nospaceescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(htmlNospaceEscaper) }, _key$10 = "html_template_rcdataescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(rcdataEscaper) }, _key$10 = "html_template_urlescaper", _map$10[_key$10] = { k: _key$10, v: new funcType(urlEscaper) }, _key$10 = "html_template_urlfilter", _map$10[_key$10] = { k: _key$10, v: new funcType(urlFilter) }, _key$10 = "html_template_urlnormalizer", _map$10[_key$10] = { k: _key$10, v: new funcType(urlNormalizer) }, _map$10);
		/* */ } return; } }; $init_template.$blocking = true; return $init_template;
	};
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, bytes, jquery, utils, template, ToDo, App, sliceType, ptrType, sliceType$1, funcType, structType, ptrType$1, ptrType$2, jQuery, main, NewApp;
	bytes = $packages["bytes"];
	jquery = $packages["github.com/gopherjs/jquery"];
	utils = $packages["github.com/gopherjs/todomvc/utils"];
	template = $packages["html/template"];
	ToDo = $pkg.ToDo = $newType(0, $kindStruct, "main.ToDo", "ToDo", "main", function(Id_, Text_, Completed_) {
		this.$val = this;
		this.Id = Id_ !== undefined ? Id_ : "";
		this.Text = Text_ !== undefined ? Text_ : "";
		this.Completed = Completed_ !== undefined ? Completed_ : false;
	});
	App = $pkg.App = $newType(0, $kindStruct, "main.App", "App", "main", function(todos_, todoTmpl_, footerTmpl_, todoAppJQuery_, headerJQuery_, mainJQuery_, footerJQuery_, newTodoJQuery_, toggleAllJQuery_, todoListJQuery_, countJQuery_, clearBtnJQuery_, filter_) {
		this.$val = this;
		this.todos = todos_ !== undefined ? todos_ : sliceType.nil;
		this.todoTmpl = todoTmpl_ !== undefined ? todoTmpl_ : ptrType$1.nil;
		this.footerTmpl = footerTmpl_ !== undefined ? footerTmpl_ : ptrType$1.nil;
		this.todoAppJQuery = todoAppJQuery_ !== undefined ? todoAppJQuery_ : new jquery.JQuery.ptr();
		this.headerJQuery = headerJQuery_ !== undefined ? headerJQuery_ : new jquery.JQuery.ptr();
		this.mainJQuery = mainJQuery_ !== undefined ? mainJQuery_ : new jquery.JQuery.ptr();
		this.footerJQuery = footerJQuery_ !== undefined ? footerJQuery_ : new jquery.JQuery.ptr();
		this.newTodoJQuery = newTodoJQuery_ !== undefined ? newTodoJQuery_ : new jquery.JQuery.ptr();
		this.toggleAllJQuery = toggleAllJQuery_ !== undefined ? toggleAllJQuery_ : new jquery.JQuery.ptr();
		this.todoListJQuery = todoListJQuery_ !== undefined ? todoListJQuery_ : new jquery.JQuery.ptr();
		this.countJQuery = countJQuery_ !== undefined ? countJQuery_ : new jquery.JQuery.ptr();
		this.clearBtnJQuery = clearBtnJQuery_ !== undefined ? clearBtnJQuery_ : new jquery.JQuery.ptr();
		this.filter = filter_ !== undefined ? filter_ : "";
	});
		sliceType = $sliceType(ToDo);
		ptrType = $ptrType(sliceType);
		sliceType$1 = $sliceType($packages["github.com/gopherjs/gopherjs/js"].Any);
		funcType = $funcType([jquery.Event], [], false);
		structType = $structType([{prop: "ActiveTodoCount", name: "ActiveTodoCount", pkg: "", type: $Int, tag: ""}, {prop: "ActiveTodoWord", name: "ActiveTodoWord", pkg: "", type: $String, tag: ""}, {prop: "CompletedTodos", name: "CompletedTodos", pkg: "", type: $Int, tag: ""}, {prop: "Filter", name: "Filter", pkg: "", type: $String, tag: ""}]);
		ptrType$1 = $ptrType(template.Template);
		ptrType$2 = $ptrType(App);
	main = function() {
		var app;
		app = NewApp();
		app.bindEvents();
		app.initRouter();
		app.render();
	};
	NewApp = $pkg.NewApp = function() {
		var _tuple, _tuple$1, clearBtnJQuery, countJQuery, filter, footerHtml, footerJQuery, footerTmpl, headerJQuery, mainJQuery, newTodoJQuery, somethingToDo, todoAppJQuery, todoHtml, todoListJQuery, todoTmpl, toggleAllJQuery;
		somethingToDo = sliceType.make(0);
		utils.Retrieve("TodoMVC4GopherJS", new ptrType(function() { return somethingToDo; }, function($v) { somethingToDo = $v; }));
		todoHtml = jQuery(new sliceType$1([new $String("#todo-template")])).Html();
		_tuple = template.New("todo").Parse(todoHtml);
		todoTmpl = template.Must(_tuple[0], _tuple[1]);
		footerHtml = jQuery(new sliceType$1([new $String("#footer-template")])).Html();
		_tuple$1 = template.New("footer").Parse(footerHtml);
		footerTmpl = template.Must(_tuple$1[0], _tuple$1[1]);
		todoAppJQuery = $clone(jQuery(new sliceType$1([new $String("#todoapp")])), jquery.JQuery);
		headerJQuery = $clone(todoAppJQuery.Find(new sliceType$1([new $String("#header")])), jquery.JQuery);
		mainJQuery = $clone(todoAppJQuery.Find(new sliceType$1([new $String("#main")])), jquery.JQuery);
		footerJQuery = $clone(todoAppJQuery.Find(new sliceType$1([new $String("#footer")])), jquery.JQuery);
		newTodoJQuery = $clone(headerJQuery.Find(new sliceType$1([new $String("#new-todo")])), jquery.JQuery);
		toggleAllJQuery = $clone(mainJQuery.Find(new sliceType$1([new $String("#toggle-all")])), jquery.JQuery);
		todoListJQuery = $clone(mainJQuery.Find(new sliceType$1([new $String("#todo-list")])), jquery.JQuery);
		countJQuery = $clone(footerJQuery.Find(new sliceType$1([new $String("#todo-count")])), jquery.JQuery);
		clearBtnJQuery = $clone(footerJQuery.Find(new sliceType$1([new $String("#clear-completed")])), jquery.JQuery);
		filter = "all";
		return new App.ptr(somethingToDo, todoTmpl, footerTmpl, $clone(todoAppJQuery, jquery.JQuery), $clone(headerJQuery, jquery.JQuery), $clone(mainJQuery, jquery.JQuery), $clone(footerJQuery, jquery.JQuery), $clone(newTodoJQuery, jquery.JQuery), $clone(toggleAllJQuery, jquery.JQuery), $clone(todoListJQuery, jquery.JQuery), $clone(countJQuery, jquery.JQuery), $clone(clearBtnJQuery, jquery.JQuery), filter);
	};
	App.ptr.prototype.bindEvents = function() {
		var a;
		a = this;
		a.newTodoJQuery.On(new sliceType$1([new $String("keyup"), new funcType($methodVal(a, "create"))]));
		a.toggleAllJQuery.On(new sliceType$1([new $String("change"), new funcType($methodVal(a, "toggleAll"))]));
		a.footerJQuery.On(new sliceType$1([new $String("click"), new $String("#clear-completed"), new funcType($methodVal(a, "destroyCompleted"))]));
		a.todoListJQuery.On(new sliceType$1([new $String("change"), new $String(".toggle"), new funcType($methodVal(a, "toggle"))]));
		a.todoListJQuery.On(new sliceType$1([new $String("dblclick"), new $String("label"), new funcType($methodVal(a, "edit"))]));
		a.todoListJQuery.On(new sliceType$1([new $String("keyup"), new $String(".edit"), new funcType($methodVal(a, "blurOnEnter"))]));
		a.todoListJQuery.On(new sliceType$1([new $String("focusout"), new $String(".edit"), new funcType($methodVal(a, "update"))]));
		a.todoListJQuery.On(new sliceType$1([new $String("click"), new $String(".destroy"), new funcType($methodVal(a, "destroy"))]));
	};
	App.prototype.bindEvents = function() { return this.$val.bindEvents(); };
	App.ptr.prototype.initRouter = function() {
		var a, router;
		a = this;
		router = $clone(utils.NewRouter(), utils.Router);
		router.On("/:filter", (function(filter) {
			a.filter = filter;
			a.render();
		}));
		router.Init("/all");
	};
	App.prototype.initRouter = function() { return this.$val.initRouter(); };
	App.ptr.prototype.render = function() {
		var a, b, strtodoTmpl, todos;
		a = this;
		todos = a.getFilteredTodos();
		b = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		a.todoTmpl.Execute(b, todos);
		strtodoTmpl = b.String();
		a.todoListJQuery.SetHtml(new $String(strtodoTmpl));
		a.mainJQuery.Toggle(a.todos.$length > 0);
		a.toggleAllJQuery.SetProp(new sliceType$1([new $String("checked"), new $Bool(!((a.getActiveTodos().$length === 0)))]));
		a.renderfooter();
		a.newTodoJQuery.Focus();
		utils.Store("TodoMVC4GopherJS", a.todos);
	};
	App.prototype.render = function() { return this.$val.render(); };
	App.ptr.prototype.renderfooter = function() {
		var a, activeTodoCount, activeTodoWord, b, completedTodos, filter, footerData, footerJQueryStr;
		a = this;
		activeTodoCount = a.getActiveTodos().$length;
		activeTodoWord = utils.Pluralize(activeTodoCount, "item");
		completedTodos = a.todos.$length - activeTodoCount >> 0;
		filter = a.filter;
		footerData = new structType.ptr(activeTodoCount, activeTodoWord, completedTodos, filter);
		b = $clone(new bytes.Buffer.ptr(), bytes.Buffer);
		a.footerTmpl.Execute(b, new footerData.constructor.elem(footerData));
		footerJQueryStr = b.String();
		a.footerJQuery.Toggle(a.todos.$length > 0).SetHtml(new $String(footerJQueryStr));
	};
	App.prototype.renderfooter = function() { return this.$val.renderfooter(); };
	App.ptr.prototype.toggleAll = function(e) {
		var _i, _ref, a, checked, idx, x;
		a = this;
		e = $clone(e, jquery.Event);
		checked = !$assertType(a.toggleAllJQuery.Prop("checked"), $Bool);
		_ref = a.todos;
		_i = 0;
		while (_i < _ref.$length) {
			idx = _i;
			(x = a.todos, ((idx < 0 || idx >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + idx])).Completed = checked;
			_i++;
		}
		a.render();
	};
	App.prototype.toggleAll = function(e) { return this.$val.toggleAll(e); };
	App.ptr.prototype.getActiveTodos = function() {
		var _i, _ref, a, todosTmp, val;
		a = this;
		todosTmp = sliceType.make(0);
		_ref = a.todos;
		_i = 0;
		while (_i < _ref.$length) {
			val = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), ToDo);
			if (!val.Completed) {
				todosTmp = $append(todosTmp, val);
			}
			_i++;
		}
		return todosTmp;
	};
	App.prototype.getActiveTodos = function() { return this.$val.getActiveTodos(); };
	App.ptr.prototype.getCompletedTodos = function() {
		var _i, _ref, a, todosTmp, val;
		a = this;
		todosTmp = sliceType.make(0);
		_ref = a.todos;
		_i = 0;
		while (_i < _ref.$length) {
			val = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), ToDo);
			if (val.Completed) {
				todosTmp = $append(todosTmp, val);
			}
			_i++;
		}
		return todosTmp;
	};
	App.prototype.getCompletedTodos = function() { return this.$val.getCompletedTodos(); };
	App.ptr.prototype.getFilteredTodos = function() {
		var _ref, a;
		a = this;
		_ref = a.filter;
		if (_ref === "active") {
			return a.getActiveTodos();
		} else if (_ref === "completed") {
			return a.getCompletedTodos();
		} else {
			return a.todos;
		}
	};
	App.prototype.getFilteredTodos = function() { return this.$val.getFilteredTodos(); };
	App.ptr.prototype.destroyCompleted = function(e) {
		var a;
		a = this;
		e = $clone(e, jquery.Event);
		a.todos = a.getActiveTodos();
		a.filter = "all";
		a.render();
	};
	App.prototype.destroyCompleted = function(e) { return this.$val.destroyCompleted(e); };
	App.ptr.prototype.indexFromEl = function(e) {
		var _i, _ref, a, id, idx, val;
		a = this;
		e = $clone(e, jquery.Event);
		id = jQuery(new sliceType$1([e.Object.target])).Closest(new sliceType$1([new $String("li")])).Data("id");
		_ref = a.todos;
		_i = 0;
		while (_i < _ref.$length) {
			idx = _i;
			val = $clone(((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), ToDo);
			if ($interfaceIsEqual(new $String(val.Id), id)) {
				return idx;
			}
			_i++;
		}
		return -1;
	};
	App.prototype.indexFromEl = function(e) { return this.$val.indexFromEl(e); };
	App.ptr.prototype.create = function(e) {
		var a, newToDo, val;
		a = this;
		e = $clone(e, jquery.Event);
		val = jquery.Trim(a.newTodoJQuery.Val());
		if ((val.length === 0) || !((($parseInt(e.Object.keyCode) >> 0) === 13))) {
			return;
		}
		newToDo = new ToDo.ptr(utils.Uuid(), val, false);
		a.todos = $append(a.todos, newToDo);
		a.newTodoJQuery.SetVal(new $String(""));
		a.render();
	};
	App.prototype.create = function(e) { return this.$val.create(e); };
	App.ptr.prototype.toggle = function(e) {
		var a, idx, x, x$1;
		a = this;
		e = $clone(e, jquery.Event);
		idx = a.indexFromEl(e);
		(x$1 = a.todos, ((idx < 0 || idx >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + idx])).Completed = !(x = a.todos, ((idx < 0 || idx >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + idx])).Completed;
		a.render();
	};
	App.prototype.toggle = function(e) { return this.$val.toggle(e); };
	App.ptr.prototype.edit = function(e) {
		var a, input;
		a = this;
		e = $clone(e, jquery.Event);
		input = $clone(jQuery(new sliceType$1([e.Object.target])).Closest(new sliceType$1([new $String("li")])).AddClass(new $String("editing")).Find(new sliceType$1([new $String(".edit")])), jquery.JQuery);
		input.SetVal(new $String(input.Val())).Focus();
	};
	App.prototype.edit = function(e) { return this.$val.edit(e); };
	App.ptr.prototype.blurOnEnter = function(e) {
		var _ref, a;
		a = this;
		e = $clone(e, jquery.Event);
		_ref = $parseInt(e.Object.keyCode) >> 0;
		if (_ref === 13) {
			jQuery(new sliceType$1([e.Object.target])).Blur();
		} else if (_ref === 27) {
			jQuery(new sliceType$1([e.Object.target])).SetData("abort", new $String("true")).Blur();
		}
	};
	App.prototype.blurOnEnter = function(e) { return this.$val.blurOnEnter(e); };
	App.ptr.prototype.update = function(e) {
		var a, idx, thisJQuery, val, x;
		a = this;
		e = $clone(e, jquery.Event);
		thisJQuery = $clone(jQuery(new sliceType$1([e.Object.target])), jquery.JQuery);
		val = jquery.Trim(thisJQuery.Val());
		if ($interfaceIsEqual(thisJQuery.Data("abort"), new $String("true"))) {
			thisJQuery.SetData("abort", new $String("false"));
			a.render();
			return;
		}
		idx = a.indexFromEl(e);
		if (val.length > 0) {
			(x = a.todos, ((idx < 0 || idx >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + idx])).Text = val;
		} else {
			a.todos = $appendSlice($subslice(a.todos, 0, idx), $subslice(a.todos, (idx + 1 >> 0)));
		}
		a.render();
	};
	App.prototype.update = function(e) { return this.$val.update(e); };
	App.ptr.prototype.destroy = function(e) {
		var a, idx;
		a = this;
		e = $clone(e, jquery.Event);
		idx = a.indexFromEl(e);
		a.todos = $appendSlice($subslice(a.todos, 0, idx), $subslice(a.todos, (idx + 1 >> 0)));
		a.render();
	};
	App.prototype.destroy = function(e) { return this.$val.destroy(e); };
	ptrType$2.methods = [{prop: "bindEvents", name: "bindEvents", pkg: "main", type: $funcType([], [], false)}, {prop: "blurOnEnter", name: "blurOnEnter", pkg: "main", type: $funcType([jquery.Event], [], false)}, {prop: "create", name: "create", pkg: "main", type: $funcType([jquery.Event], [], false)}, {prop: "destroy", name: "destroy", pkg: "main", type: $funcType([jquery.Event], [], false)}, {prop: "destroyCompleted", name: "destroyCompleted", pkg: "main", type: $funcType([jquery.Event], [], false)}, {prop: "edit", name: "edit", pkg: "main", type: $funcType([jquery.Event], [], false)}, {prop: "getActiveTodos", name: "getActiveTodos", pkg: "main", type: $funcType([], [sliceType], false)}, {prop: "getCompletedTodos", name: "getCompletedTodos", pkg: "main", type: $funcType([], [sliceType], false)}, {prop: "getFilteredTodos", name: "getFilteredTodos", pkg: "main", type: $funcType([], [sliceType], false)}, {prop: "indexFromEl", name: "indexFromEl", pkg: "main", type: $funcType([jquery.Event], [$Int], false)}, {prop: "initRouter", name: "initRouter", pkg: "main", type: $funcType([], [], false)}, {prop: "render", name: "render", pkg: "main", type: $funcType([], [], false)}, {prop: "renderfooter", name: "renderfooter", pkg: "main", type: $funcType([], [], false)}, {prop: "toggle", name: "toggle", pkg: "main", type: $funcType([jquery.Event], [], false)}, {prop: "toggleAll", name: "toggleAll", pkg: "main", type: $funcType([jquery.Event], [], false)}, {prop: "update", name: "update", pkg: "main", type: $funcType([jquery.Event], [], false)}];
	ToDo.init([{prop: "Id", name: "Id", pkg: "", type: $String, tag: ""}, {prop: "Text", name: "Text", pkg: "", type: $String, tag: ""}, {prop: "Completed", name: "Completed", pkg: "", type: $Bool, tag: ""}]);
	App.init([{prop: "todos", name: "todos", pkg: "main", type: sliceType, tag: ""}, {prop: "todoTmpl", name: "todoTmpl", pkg: "main", type: ptrType$1, tag: ""}, {prop: "footerTmpl", name: "footerTmpl", pkg: "main", type: ptrType$1, tag: ""}, {prop: "todoAppJQuery", name: "todoAppJQuery", pkg: "main", type: jquery.JQuery, tag: ""}, {prop: "headerJQuery", name: "headerJQuery", pkg: "main", type: jquery.JQuery, tag: ""}, {prop: "mainJQuery", name: "mainJQuery", pkg: "main", type: jquery.JQuery, tag: ""}, {prop: "footerJQuery", name: "footerJQuery", pkg: "main", type: jquery.JQuery, tag: ""}, {prop: "newTodoJQuery", name: "newTodoJQuery", pkg: "main", type: jquery.JQuery, tag: ""}, {prop: "toggleAllJQuery", name: "toggleAllJQuery", pkg: "main", type: jquery.JQuery, tag: ""}, {prop: "todoListJQuery", name: "todoListJQuery", pkg: "main", type: jquery.JQuery, tag: ""}, {prop: "countJQuery", name: "countJQuery", pkg: "main", type: jquery.JQuery, tag: ""}, {prop: "clearBtnJQuery", name: "clearBtnJQuery", pkg: "main", type: jquery.JQuery, tag: ""}, {prop: "filter", name: "filter", pkg: "main", type: $String, tag: ""}]);
	$pkg.$init = function() {
		$pkg.$init = function() {};
		/* */ var $r, $s = 0; var $init_main = function() { while (true) { switch ($s) { case 0:
		$r = bytes.$init($BLOCKING); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$r = jquery.$init($BLOCKING); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		$r = utils.$init($BLOCKING); /* */ $s = 3; case 3: if ($r && $r.$blocking) { $r = $r(); }
		$r = template.$init($BLOCKING); /* */ $s = 4; case 4: if ($r && $r.$blocking) { $r = $r(); }
		jQuery = jquery.NewJQuery;
		main();
		/* */ } return; } }; $init_main.$blocking = true; return $init_main;
	};
	return $pkg;
})();
$initAnonTypes();
$packages["runtime"].$init()();
$go($packages["main"].$init, [], true);
$flushConsole();

})(this);
//# sourceMappingURL=app.js.map
