"use strict";
(function() {

Error.stackTraceLimit = -1;

var go$reservedKeywords = ["abstract", "arguments", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "eval", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "var", "void", "volatile", "while", "with", "yield"];

var go$global;
if (typeof window !== "undefined") {
	go$global = window;
} else if (typeof GLOBAL !== "undefined") {
	go$global = GLOBAL;
}

var go$idCounter = 0;
var go$keys = function(m) { return m ? Object.keys(m) : []; };
var go$min = Math.min;
var go$parseInt = parseInt;
var go$parseFloat = function(f) {
	if (f.constructor === Number) {
		return f;
	}
	return parseFloat(f);
};
var go$mod = function(x, y) { return x % y; };
var go$toString = String;
var go$reflect, go$newStringPtr;
var Go$Array = Array;
var Go$Error = Error;

var go$floatKey = function(f) {
	if (f !== f) {
		go$idCounter++;
		return "NaN$" + go$idCounter;
	}
	return String(f);
};

var go$mapArray = function(array, f) {
	var newArray = new array.constructor(array.length), i;
	for (i = 0; i < array.length; i++) {
		newArray[i] = f(array[i]);
	}
	return newArray;
};

var go$newType = function(size, kind, string, name, pkgPath, constructor) {
	var typ;
	switch(kind) {
	case "Bool":
	case "Int":
	case "Int8":
	case "Int16":
	case "Int32":
	case "Uint":
	case "Uint8" :
	case "Uint16":
	case "Uint32":
	case "Uintptr":
	case "String":
	case "UnsafePointer":
		typ = function(v) { this.go$val = v; };
		typ.prototype.go$key = function() { return string + "$" + this.go$val; };
		break;

	case "Float32":
	case "Float64":
		typ = function(v) { this.go$val = v; };
		typ.prototype.go$key = function() { return string + "$" + go$floatKey(this.go$val); };
		break;

	case "Int64":
		typ = function(high, low) {
			this.high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
			this.low = low >>> 0;
			this.go$val = this;
		};
		typ.prototype.go$key = function() { return string + "$" + this.high + "$" + this.low; };
		break;

	case "Uint64":
		typ = function(high, low) {
			this.high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
			this.low = low >>> 0;
			this.go$val = this;
		};
		typ.prototype.go$key = function() { return string + "$" + this.high + "$" + this.low; };
		break;

	case "Complex64":
	case "Complex128":
		typ = function(real, imag) {
			this.real = real;
			this.imag = imag;
			this.go$val = this;
		};
		typ.prototype.go$key = function() { return string + "$" + this.real + "$" + this.imag; };
		break;

	case "Array":
		typ = function(v) { this.go$val = v; };
		typ.Ptr = go$newType(4, "Ptr", "*" + string, "", "", function(array) {
			this.go$get = function() { return array; };
			this.go$val = array;
		});
		typ.init = function(elem, len) {
			typ.elem = elem;
			typ.len = len;
			typ.prototype.go$key = function() {
				return string + "$" + go$mapArray(this.go$val, function(e) {
					var key = e.go$key ? e.go$key() : String(e);
					return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
				}).join("$");
			};
			typ.extendReflectType = function(rt) {
				rt.arrayType = new go$reflect.arrayType(rt, elem.reflectType(), undefined, len);
			};
			typ.Ptr.init(typ);
		};
		break;

	case "Chan":
		typ = function() { this.go$val = this; };
		typ.prototype.go$key = function() {
			if (this.go$id === undefined) {
				go$idCounter++;
				this.go$id = go$idCounter;
			}
			return String(this.go$id);
		};
		typ.init = function(elem, sendOnly, recvOnly) {
			typ.nil = new typ();
			typ.extendReflectType = function(rt) {
				rt.chanType = new go$reflect.chanType(rt, elem.reflectType(), sendOnly ? go$reflect.SendDir : (recvOnly ? go$reflect.RecvDir : go$reflect.BothDir));
			};
		};
		break;

	case "Func":
		typ = function(v) { this.go$val = v; };
		typ.init = function(params, results, variadic) {
			typ.params = params;
			typ.results = results;
			typ.variadic = variadic;
			typ.extendReflectType = function(rt) {
				var typeSlice = (go$sliceType(go$ptrType(go$reflect.rtype)));
				rt.funcType = new go$reflect.funcType(rt, variadic, new typeSlice(go$mapArray(params, function(p) { return p.reflectType(); })), new typeSlice(go$mapArray(results, function(p) { return p.reflectType(); })));
			};
		};
		break;

	case "Interface":
		typ = { implementedBy: [] };
		typ.init = function(methods) {
			typ.extendReflectType = function(rt) {
				var imethods = go$mapArray(methods, function(m) {
					return new go$reflect.imethod(go$newStringPtr(m[0]), go$newStringPtr(m[1]), m[2].reflectType());
				});
				var methodSlice = (go$sliceType(go$ptrType(go$reflect.imethod)));
				rt.interfaceType = new go$reflect.interfaceType(rt, new methodSlice(imethods));
			};
		};
		break;

	case "Map":
		typ = function(v) { this.go$val = v; };
		typ.init = function(key, elem) {
			typ.key = key;
			typ.elem = elem;
			typ.extendReflectType = function(rt) {
				rt.mapType = new go$reflect.mapType(rt, key.reflectType(), elem.reflectType(), undefined, undefined);
			};
		};
		break;

	case "Ptr":
		typ = constructor || function(getter, setter) {
			this.go$get = getter;
			this.go$set = setter;
			this.go$val = this;
		};
		typ.prototype.go$key = function() {
			if (this.go$id === undefined) {
				go$idCounter++;
				this.go$id = go$idCounter;
			}
			return String(this.go$id);
		};
		typ.init = function(elem) {
			typ.nil = new typ(go$throwNilPointerError, go$throwNilPointerError);
			typ.extendReflectType = function(rt) {
				rt.ptrType = new go$reflect.ptrType(rt, elem.reflectType());
			};
		};
		break;

	case "Slice":
		var nativeArray;
		typ = function(array) {
			if (array.constructor !== nativeArray) {
				array = new nativeArray(array);
			}
			this.array = array;
			this.offset = 0;
			this.length = array.length;
			this.capacity = array.length;
			this.go$val = this;
		};
		typ.make = function(length, capacity, zero) {
			capacity = capacity || length;
			var array = new nativeArray(capacity), i;
			for (i = 0; i < capacity; i++) {
				array[i] = zero();
			}
			var slice = new typ(array);
			slice.length = length;
			return slice;
		};
		typ.init = function(elem) {
			typ.elem = elem;
			nativeArray = go$nativeArray(elem.kind);
			typ.nil = new typ([]);
			typ.extendReflectType = function(rt) {
				rt.sliceType = new go$reflect.sliceType(rt, elem.reflectType());
			};
		};
		break;

	case "Struct":
		typ = function(v) { this.go$val = v; };
		typ.Ptr = go$newType(4, "Ptr", "*" + string, "", "", constructor);
		typ.Ptr.Struct = typ;
		typ.init = function(fields) {
			var i;
			typ.fields = fields;
			typ.Ptr.init(typ);
			// nil value
			typ.Ptr.nil = new constructor();
			for (i = 0; i < fields.length; i++) {
				var field = fields[i];
				Object.defineProperty(typ.Ptr.nil, field[1], { get: go$throwNilPointerError, set: go$throwNilPointerError });
			}
			// methods for embedded fields
			for (i = 0; i < typ.methods.length; i++) {
				var method = typ.methods[i];
				if (method[5] != -1) {
					(function(field, methodName) {
						typ.prototype[methodName] = function() {
							var v = this.go$val[field[0]];
							return v[methodName].apply(v, arguments);
						};
					})(fields[method[5]], method[0]);
				}
			}
			for (i = 0; i < typ.Ptr.methods.length; i++) {
				var method = typ.Ptr.methods[i];
				if (method[5] != -1) {
					(function(field, methodName) {
						typ.Ptr.prototype[methodName] = function() {
							var v = this[field[0]];
							if (v.go$val === undefined) {
								v = new field[3](v);
							}
							return v[methodName].apply(v, arguments);
						};
					})(fields[method[5]], method[0]);
				}
			}
			// map key
			typ.prototype.go$key = function() {
				var keys = new Array(fields.length);
				for (i = 0; i < fields.length; i++) {
					var v = this.go$val[fields[i][0]];
					var key = v.go$key ? v.go$key() : String(v);
					keys[i] = key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
				}
				return string + "$" + keys.join("$");
			};
			// reflect type
			typ.extendReflectType = function(rt) {
				var reflectFields = new Array(fields.length), i;
				for (i = 0; i < fields.length; i++) {
					var field = fields[i];
					reflectFields[i] = new go$reflect.structField(go$newStringPtr(field[1]), go$newStringPtr(field[2]), field[3].reflectType(), go$newStringPtr(field[4]), i);
				}
				rt.structType = new go$reflect.structType(rt, new (go$sliceType(go$reflect.structField))(reflectFields));
			};
		};
		break;

	default:
		throw go$panic(new Go$String("invalid kind: " + kind));
	}

	typ.kind = kind;
	typ.string = string;
	typ.typeName = name;
	typ.pkgPath = pkgPath;
	typ.methods = [];
	var rt = null;
	typ.reflectType = function() {
		if (rt === null) {
			rt = new go$reflect.rtype(size, 0, 0, 0, 0, go$reflect.kinds[kind], undefined, undefined, go$newStringPtr(string), undefined, undefined);
			rt.jsType = typ;

			var methods = [];
			if (typ.methods !== undefined) {
				var i;
				for (i = 0; i < typ.methods.length; i++) {
					var m = typ.methods[i];
					methods.push(new go$reflect.method(go$newStringPtr(m[0]), go$newStringPtr(m[1]), go$funcType(m[2], m[3], m[4]).reflectType(), go$funcType([typ].concat(m[2]), m[3], m[4]).reflectType(), undefined, undefined));
				}
			}
			if (name !== "" || methods.length !== 0) {
				var methodSlice = (go$sliceType(go$ptrType(go$reflect.method)));
				rt.uncommonType = new go$reflect.uncommonType(go$newStringPtr(name), go$newStringPtr(pkgPath), new methodSlice(methods));
			}

			if (typ.extendReflectType !== undefined) {
				typ.extendReflectType(rt);
			}
		}
		return rt;
	};
	return typ;
};

var Go$Bool          = go$newType( 1, "Bool",          "bool",           "bool",       "", null);
var Go$Int           = go$newType( 4, "Int",           "int",            "int",        "", null);
var Go$Int8          = go$newType( 1, "Int8",          "int8",           "int8",       "", null);
var Go$Int16         = go$newType( 2, "Int16",         "int16",          "int16",      "", null);
var Go$Int32         = go$newType( 4, "Int32",         "int32",          "int32",      "", null);
var Go$Int64         = go$newType( 8, "Int64",         "int64",          "int64",      "", null);
var Go$Uint          = go$newType( 4, "Uint",          "uint",           "uint",       "", null);
var Go$Uint8         = go$newType( 1, "Uint8",         "uint8",          "uint8",      "", null);
var Go$Uint16        = go$newType( 2, "Uint16",        "uint16",         "uint16",     "", null);
var Go$Uint32        = go$newType( 4, "Uint32",        "uint32",         "uint32",     "", null);
var Go$Uint64        = go$newType( 8, "Uint64",        "uint64",         "uint64",     "", null);
var Go$Uintptr       = go$newType( 4, "Uintptr",       "uintptr",        "uintptr",    "", null);
var Go$Float32       = go$newType( 4, "Float32",       "float32",        "float32",    "", null);
var Go$Float64       = go$newType( 8, "Float64",       "float64",        "float64",    "", null);
var Go$Complex64     = go$newType( 8, "Complex64",     "complex64",      "complex64",  "", null);
var Go$Complex128    = go$newType(16, "Complex128",    "complex128",     "complex128", "", null);
var Go$String        = go$newType( 0, "String",        "string",         "string",     "", null);
var Go$UnsafePointer = go$newType( 4, "UnsafePointer", "unsafe.Pointer", "Pointer",    "", null);

var go$nativeArray = function(elemKind) {
	return ({ Int: Int32Array, Int8: Int8Array, Int16: Int16Array, Int32: Int32Array, Uint: Uint32Array, Uint8: Uint8Array, Uint16: Uint16Array, Uint32: Uint32Array, Uintptr: Uint32Array, Float32: Float32Array, Float64: Float64Array })[elemKind] || Array;
};
var go$toNativeArray = function(elemKind, array) {
	var nativeArray = go$nativeArray(elemKind);
	if (nativeArray === Array) {
		return array;
	}
	return new nativeArray(array);
};
var go$makeNativeArray = function(elemKind, length, zero) {
	var array = new (go$nativeArray(elemKind))(length), i;
	for (i = 0; i < length; i++) {
		array[i] = zero();
	}
	return array;
};
var go$arrayTypes = {};
var go$arrayType = function(elem, len) {
	var string = "[" + len + "]" + elem.string;
	var typ = go$arrayTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Array", string, "", "", null);
		typ.init(elem, len);
		go$arrayTypes[string] = typ;
	}
	return typ;
};

var go$chanType = function(elem, sendOnly, recvOnly) {
	var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
	var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
	var typ = elem[field];
	if (typ === undefined) {
		typ = go$newType(0, "Chan", string, "", "", null);
		typ.init(elem, sendOnly, recvOnly);
		elem[field] = typ;
	}
	return typ;
};

var go$funcTypes = {};
var go$funcType = function(params, results, variadic) {
	var paramTypes = go$mapArray(params, function(p) { return p.string; });
	if (variadic) {
		paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
	}
	var string = "func(" + paramTypes.join(", ") + ")";
	if (results.length === 1) {
		string += " " + results[0].string;
	} else if (results.length > 1) {
		string += " (" + go$mapArray(results, function(r) { return r.string; }).join(", ") + ")";
	}
	var typ = go$funcTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Func", string, "", "", null);
		typ.init(params, results, variadic);
		go$funcTypes[string] = typ;
	}
	return typ;
};

var go$interfaceTypes = {};
var go$interfaceType = function(methods) {
	var string = "interface {}";
	if (methods.length !== 0) {
		string = "interface { " + go$mapArray(methods, function(m) {
			return (m[1] !== "" ? m[1] + "." : "") + m[0] + m[2].string.substr(4);
		}).join("; ") + " }";
	}
	var typ = go$interfaceTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Interface", string, "", "", null);
		typ.init(methods);
		go$interfaceTypes[string] = typ;
	}
	return typ;
};
var go$emptyInterface = go$interfaceType([]);
var go$interfaceNil = { go$key: function() { return "nil"; } };
var go$error = go$newType(8, "Interface", "error", "error", "", null);
go$error.init([["Error", "", go$funcType([], [Go$String], false)]]);

var Go$Map = function() {};
(function() {
	var names = Object.getOwnPropertyNames(Object.prototype), i;
	for (i = 0; i < names.length; i++) {
		Go$Map.prototype[names[i]] = undefined;
	}
})();
var go$mapTypes = {};
var go$mapType = function(key, elem) {
	var string = "map[" + key.string + "]" + elem.string;
	var typ = go$mapTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Map", string, "", "", null);
		typ.init(key, elem);
		go$mapTypes[string] = typ;
	}
	return typ;
};

var go$throwNilPointerError = function() { go$throwRuntimeError("invalid memory address or nil pointer dereference"); };
var go$ptrType = function(elem) {
	var typ = elem.Ptr;
	if (typ === undefined) {
		typ = go$newType(0, "Ptr", "*" + elem.string, "", "", null);
		typ.init(elem);
		elem.Ptr = typ;
	}
	return typ;
};

var go$sliceType = function(elem) {
	var typ = elem.Slice;
	if (typ === undefined) {
		typ = go$newType(0, "Slice", "[]" + elem.string, "", "", null);
		typ.init(elem);
		elem.Slice = typ;
	}
	return typ;
};

var go$structTypes = {};
var go$structType = function(fields) {
	var string = "struct { " + go$mapArray(fields, function(f) {
		return f[1] + " " + f[3].string + (f[4] !== "" ? (' "' + f[4].replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"') : "");
	}).join("; ") + " }";
	var typ = go$structTypes[string];
	if (typ === undefined) {
		typ = go$newType(0, "Struct", string, "", "", function() {
			this.go$val = this;
			var i;
			for (i = 0; i < fields.length; i++) {
				this[fields[i][0]] = arguments[i];
			}
		});
		typ.init(fields);
		go$structTypes[string] = typ;
	}
	return typ;
};

var go$stringPtrMap = new Go$Map();
go$newStringPtr = function(str) {
	if (str === undefined || str === "") {
		return go$ptrType(Go$String).nil;
	}
	var ptr = go$stringPtrMap[str];
	if (ptr === undefined) {
		ptr = new (go$ptrType(Go$String))(function() { return str; }, function(v) { str = v; });
		go$stringPtrMap[str] = ptr;
	}
	return ptr;
};
var go$newDataPointer = function(data, constructor) {
	return new constructor(function() { return data; }, function(v) { data = v; });
};

var go$coerceFloat32 = function(f) {
	var math = go$packages["math"];
	if (math === undefined) {
		return f;
	}
	return math.Float32frombits(math.Float32bits(f));
};
var go$flatten64 = function(x) {
	return x.high * 4294967296 + x.low;
};
var go$shiftLeft64 = function(x, y) {
	if (y === 0) {
		return x;
	}
	if (y < 32) {
		return new x.constructor(x.high << y | x.low >>> (32 - y), (x.low << y) >>> 0);
	}
	if (y < 64) {
		return new x.constructor(x.low << (y - 32), 0);
	}
	return new x.constructor(0, 0);
};
var go$shiftRightInt64 = function(x, y) {
	if (y === 0) {
		return x;
	}
	if (y < 32) {
		return new x.constructor(x.high >> y, (x.low >>> y | x.high << (32 - y)) >>> 0);
	}
	if (y < 64) {
		return new x.constructor(x.high >> 31, (x.high >> (y - 32)) >>> 0);
	}
	if (x.high < 0) {
		return new x.constructor(-1, 4294967295);
	}
	return new x.constructor(0, 0);
};
var go$shiftRightUint64 = function(x, y) {
	if (y === 0) {
		return x;
	}
	if (y < 32) {
		return new x.constructor(x.high >>> y, (x.low >>> y | x.high << (32 - y)) >>> 0);
	}
	if (y < 64) {
		return new x.constructor(0, x.high >>> (y - 32));
	}
	return new x.constructor(0, 0);
};
var go$mul64 = function(x, y) {
	var high = 0, low = 0, i;
	if ((y.low & 1) !== 0) {
		high = x.high;
		low = x.low;
	}
	for (i = 1; i < 32; i++) {
		if ((y.low & 1<<i) !== 0) {
			high += x.high << i | x.low >>> (32 - i);
			low += (x.low << i) >>> 0;
		}
	}
	for (i = 0; i < 32; i++) {
		if ((y.high & 1<<i) !== 0) {
			high += x.low << i;
		}
	}
	return new x.constructor(high, low);
};
var go$div64 = function(x, y, returnRemainder) {
	if (y.high === 0 && y.low === 0) {
		go$throwRuntimeError("integer divide by zero");
	}

	var s = 1;
	var rs = 1;

	var xHigh = x.high;
	var xLow = x.low;
	if (xHigh < 0) {
		s = -1;
		rs = -1;
		xHigh = -xHigh;
		if (xLow !== 0) {
			xHigh--;
			xLow = 4294967296 - xLow;
		}
	}

	var yHigh = y.high;
	var yLow = y.low;
	if (y.high < 0) {
		s *= -1;
		yHigh = -yHigh;
		if (yLow !== 0) {
			yHigh--;
			yLow = 4294967296 - yLow;
		}
	}

	var high = 0, low = 0, n = 0, i;
	while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
		yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
		yLow = (yLow << 1) >>> 0;
		n++;
	}
	for (i = 0; i <= n; i++) {
		high = high << 1 | low >>> 31;
		low = (low << 1) >>> 0;
		if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
			xHigh = xHigh - yHigh;
			xLow = xLow - yLow;
			if (xLow < 0) {
				xHigh--;
				xLow += 4294967296;
			}
			low++;
			if (low === 4294967296) {
				high++;
				low = 0;
			}
		}
		yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
		yHigh = yHigh >>> 1;
	}

	if (returnRemainder) {
		return new x.constructor(xHigh * rs, xLow * rs);
	}
	return new x.constructor(high * s, low * s);
};

var go$divComplex = function(n, d) {
	var ninf = n.real === 1/0 || n.real === -1/0 || n.imag === 1/0 || n.imag === -1/0;
	var dinf = d.real === 1/0 || d.real === -1/0 || d.imag === 1/0 || d.imag === -1/0;
	var nnan = !ninf && (n.real !== n.real || n.imag !== n.imag);
	var dnan = !dinf && (d.real !== d.real || d.imag !== d.imag);
	if(nnan || dnan) {
		return new n.constructor(0/0, 0/0);
	}
	if (ninf && !dinf) {
		return new n.constructor(1/0, 1/0);
	}
	if (!ninf && dinf) {
		return new n.constructor(0, 0);
	}
	if (d.real === 0 && d.imag === 0) {
		if (n.real === 0 && n.imag === 0) {
			return new n.constructor(0/0, 0/0);
		}
		return new n.constructor(1/0, 1/0);
	}
	var a = Math.abs(d.real);
	var b = Math.abs(d.imag);
	if (a <= b) {
		var ratio = d.real / d.imag;
		var denom = d.real * ratio + d.imag;
		return new n.constructor((n.real * ratio + n.imag) / denom, (n.imag * ratio - n.real) / denom);
	}
	var ratio = d.imag / d.real;
	var denom = d.imag * ratio + d.real;
	return new n.constructor((n.imag * ratio + n.real) / denom, (n.imag - n.real * ratio) / denom);
};

var go$subslice = function(slice, low, high, max) {
	if (low < 0 || high < low || max < high || high > slice.capacity || max > slice.capacity) {
		go$throwRuntimeError("slice bounds out of range");
	}
	var s = new slice.constructor(slice.array);
	s.offset = slice.offset + low;
	s.length = slice.length - low;
	s.capacity = slice.capacity - low;
	if (high !== undefined) {
		s.length = high - low;
	}
	if (max !== undefined) {
		s.capacity = max - low;
	}
	return s;
};

var go$sliceToArray = function(slice) {
	if (slice.length === 0) {
		return [];
	}
	if (slice.array.constructor !== Array) {
		return slice.array.subarray(slice.offset, slice.offset + slice.length);
	}
	return slice.array.slice(slice.offset, slice.offset + slice.length);
};

var go$decodeRune = function(str, pos) {
	var c0 = str.charCodeAt(pos);

	if (c0 < 0x80) {
		return [c0, 1];
	}

	if (c0 !== c0 || c0 < 0xC0) {
		return [0xFFFD, 1];
	}

	var c1 = str.charCodeAt(pos + 1);
	if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
		return [0xFFFD, 1];
	}

	if (c0 < 0xE0) {
		var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
		if (r <= 0x7F) {
			return [0xFFFD, 1];
		}
		return [r, 2];
	}

	var c2 = str.charCodeAt(pos + 2);
	if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
		return [0xFFFD, 1];
	}

	if (c0 < 0xF0) {
		var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
		if (r <= 0x7FF) {
			return [0xFFFD, 1];
		}
		if (0xD800 <= r && r <= 0xDFFF) {
			return [0xFFFD, 1];
		}
		return [r, 3];
	}

	var c3 = str.charCodeAt(pos + 3);
	if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
		return [0xFFFD, 1];
	}

	if (c0 < 0xF8) {
		var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
		if (r <= 0xFFFF || 0x10FFFF < r) {
			return [0xFFFD, 1];
		}
		return [r, 4];
	}

	return [0xFFFD, 1];
};

var go$encodeRune = function(r) {
	if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
		r = 0xFFFD;
	}
	if (r <= 0x7F) {
		return String.fromCharCode(r);
	}
	if (r <= 0x7FF) {
		return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
	}
	if (r <= 0xFFFF) {
		return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
	}
	return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var go$stringToBytes = function(str, terminateWithNull) {
	var array = new Uint8Array(terminateWithNull ? str.length + 1 : str.length), i;
	for (i = 0; i < str.length; i++) {
		array[i] = str.charCodeAt(i);
	}
	if (terminateWithNull) {
		array[str.length] = 0;
	}
	return array;
};

var go$bytesToString = function(slice) {
	if (slice.length === 0) {
		return "";
	}
	var str = "", i;
	for (i = 0; i < slice.length; i += 10000) {
		str += String.fromCharCode.apply(null, slice.array.subarray(slice.offset + i, slice.offset + Math.min(slice.length, i + 10000)));
	}
	return str;
};

var go$stringToRunes = function(str) {
	var array = new Int32Array(str.length);
	var rune, i, j = 0;
	for (i = 0; i < str.length; i += rune[1], j++) {
		rune = go$decodeRune(str, i);
		array[j] = rune[0];
	}
	return array.subarray(0, j);
};

var go$runesToString = function(slice) {
	if (slice.length === 0) {
		return "";
	}
	var str = "", i;
	for (i = 0; i < slice.length; i++) {
		str += go$encodeRune(slice.array[slice.offset + i]);
	}
	return str;
};

var go$needsExternalization = function(t) {
	switch (t.kind) {
		case "Int64":
		case "Uint64":
		case "Array":
		case "Func":
		case "Interface":
		case "Map":
		case "Slice":
		case "String":
			return true;
		default:
			return false;
	}
};

var go$externalize = function(v, t) {
	switch (t.kind) {
	case "Int64":
	case "Uint64":
		return go$flatten64(v);
	case "Array":
		if (go$needsExternalization(t.elem)) {
			return go$mapArray(v, function(e) { return go$externalize(e, t.elem); });
		}
		return v;
	case "Func":
		if (v === go$throwNilPointerError) {
			return null;
		}
		var convert = false;
		var i;
		for (i = 0; i < t.params.length; i++) {
			convert = convert || (t.params[i] !== go$packages["github.com/gopherjs/gopherjs/js"].Object);
		}
		for (i = 0; i < t.results.length; i++) {
			convert = convert || go$needsExternalization(t.results[i]);
		}
		if (!convert) {
			return v;
		}
		return function() {
			var args = [], i;
			for (i = 0; i < t.params.length; i++) {
				if (t.variadic && i === t.params.length - 1) {
					var vt = t.params[i].elem, varargs = [], j;
					for (j = i; j < arguments.length; j++) {
						varargs.push(go$internalize(arguments[j], vt));
					}
					args.push(new (t.params[i])(varargs));
					break;
				}
				args.push(go$internalize(arguments[i], t.params[i]));
			}
			var result = v.apply(undefined, args);
			switch (t.results.length) {
			case 0:
				return;
			case 1:
				return go$externalize(result, t.results[0]);
			default:
				for (i = 0; i < t.results.length; i++) {
					result[i] = go$externalize(result[i], t.results[i]);
				}
				return result;
			}
		};
	case "Interface":
		if (v === null) {
			return null;
		}
		if (v.constructor.kind === undefined) {
			return v; // js.Object
		}
		return go$externalize(v.go$val, v.constructor);
	case "Map":
		var m = {};
		var keys = go$keys(v), i;
		for (i = 0; i < keys.length; i++) {
			var entry = v[keys[i]];
			m[go$externalize(entry.k, t.key)] = go$externalize(entry.v, t.elem);
		}
		return m;
	case "Slice":
		if (go$needsExternalization(t.elem)) {
			return go$mapArray(go$sliceToArray(v), function(e) { return go$externalize(e, t.elem); });
		}
		return go$sliceToArray(v);
	case "String":
		var s = "", r, i, j = 0;
		for (i = 0; i < v.length; i += r[1], j++) {
			r = go$decodeRune(v, i);
			s += String.fromCharCode(r[0]);
		}
		return s;
	case "Struct":
		var timePkg = go$packages["time"];
		if (timePkg && v.constructor === timePkg.Time.Ptr) {
			var milli = go$div64(v.UnixNano(), new Go$Int64(0, 1000000));
			return new Date(go$flatten64(milli));
		}
		return v;
	default:
		return v;
	}
};

var go$internalize = function(v, t, recv) {
	switch (t.kind) {
	case "Bool":
		return !!v;
	case "Int":
		return parseInt(v);
	case "Int8":
		return parseInt(v) << 24 >> 24;
	case "Int16":
		return parseInt(v) << 16 >> 16;
	case "Int32":
		return parseInt(v) >> 0;
	case "Uint":
		return parseInt(v);
	case "Uint8" :
		return parseInt(v) << 24 >>> 24;
	case "Uint16":
		return parseInt(v) << 16 >>> 16;
	case "Uint32":
	case "Uintptr":
		return parseInt(v) >>> 0;
	case "Int64":
	case "Uint64":
		return new t(0, v);
	case "Float32":
	case "Float64":
		return parseFloat(v);
	case "Array":
		if (v.length !== t.len) {
			go$throwRuntimeError("got array with wrong size from JavaScript native");
		}
		return go$mapArray(v, function(e) { return go$internalize(e, t.elem); });
	case "Func":
		return function() {
			var args = [], i;
			for (i = 0; i < t.params.length; i++) {
				if (t.variadic && i === t.params.length - 1) {
					var vt = t.params[i].elem, varargs = arguments[i], j;
					for (j = 0; j < varargs.length; j++) {
						args.push(go$externalize(varargs.array[varargs.offset + j], vt));
					}
					break;
				}
				args.push(go$externalize(arguments[i], t.params[i]));
			}
			var result = v.apply(recv, args);
			switch (t.results.length) {
			case 0:
				return;
			case 1:
				return go$internalize(result, t.results[0]);
			default:
				for (i = 0; i < t.results.length; i++) {
					result[i] = go$internalize(result[i], t.results[i]);
				}
				return result;
			}
		};
	case "Interface":
		if (t === go$packages["github.com/gopherjs/gopherjs/js"].Object) {
			return v;
		}
		switch (v.constructor) {
		case Int8Array:
			return new (go$sliceType(Go$Int8))(v);
		case Int16Array:
			return new (go$sliceType(Go$Int16))(v);
		case Int32Array:
			return new (go$sliceType(Go$Int))(v);
		case Uint8Array:
			return new (go$sliceType(Go$Uint8))(v);
		case Uint16Array:
			return new (go$sliceType(Go$Uint16))(v);
		case Uint32Array:
			return new (go$sliceType(Go$Uint))(v);
		case Float32Array:
			return new (go$sliceType(Go$Float32))(v);
		case Float64Array:
			return new (go$sliceType(Go$Float64))(v);
		case Array:
			return go$internalize(v, go$sliceType(go$emptyInterface));
		case Boolean:
			return new Go$Bool(!!v);
		case Date:
			var timePkg = go$packages["time"];
			if (timePkg) {
				return new timePkg.Time(timePkg.Unix(new Go$Int64(0, 0), new Go$Int64(0, v.getTime() * 1000000)));
			}
		case Function:
			var funcType = go$funcType([go$sliceType(go$emptyInterface)], [go$packages["github.com/gopherjs/gopherjs/js"].Object], true);
			return new funcType(go$internalize(v, funcType));
		case Number:
			return new Go$Float64(parseFloat(v));
		case Object:
			var mapType = go$mapType(Go$String, go$emptyInterface);
			return new mapType(go$internalize(v, mapType));
		case String:
			return new Go$String(go$internalize(v, Go$String));
		}
		return v;
	case "Map":
		var m = new Go$Map();
		var keys = go$keys(v), i;
		for (i = 0; i < keys.length; i++) {
			var key = go$internalize(keys[i], t.key);
			m[key.go$key ? key.go$key() : key] = { k: key, v: go$internalize(v[keys[i]], t.elem) };
		}
		return m;
	case "Slice":
		return new t(go$mapArray(v, function(e) { return go$internalize(e, t.elem); }));
	case "String":
		v = String(v);
		var s = "", i;
		for (i = 0; i < v.length; i++) {
			s += go$encodeRune(v.charCodeAt(i));
		}
		return s;
	default:
		return v;
	}
};

var go$copySlice = function(dst, src) {
	var n = Math.min(src.length, dst.length), i;
	if (dst.array.constructor !== Array && n !== 0) {
		dst.array.set(src.array.subarray(src.offset, src.offset + n), dst.offset);
		return n;
	}
	for (i = 0; i < n; i++) {
		dst.array[dst.offset + i] = src.array[src.offset + i];
	}
	return n;
};

var go$copyString = function(dst, src) {
	var n = Math.min(src.length, dst.length), i;
	for (i = 0; i < n; i++) {
		dst.array[dst.offset + i] = src.charCodeAt(i);
	}
	return n;
};

var go$copyArray = function(dst, src) {
	var i;
	for (i = 0; i < src.length; i++) {
		dst[i] = src[i];
	}
};

var go$growSlice = function(slice, length) {
	var newCapacity = Math.max(length, slice.capacity < 1024 ? slice.capacity * 2 : Math.floor(slice.capacity * 5 / 4));

	var newArray;
	if (slice.array.constructor === Array) {
		newArray = slice.array;
		if (slice.offset !== 0 || newArray.length !== slice.offset + slice.capacity) {
			newArray = newArray.slice(slice.offset);
		}
		newArray.length = newCapacity;
	} else {
		newArray = new slice.array.constructor(newCapacity);
		newArray.set(slice.array.subarray(slice.offset));
	}

	var newSlice = new slice.constructor(newArray);
	newSlice.length = slice.length;
	newSlice.capacity = newCapacity;
	return newSlice;
};

var go$append = function(slice) {
	if (arguments.length === 1) {
		return slice;
	}

	var newLength = slice.length + arguments.length - 1;
	if (newLength > slice.capacity) {
		slice = go$growSlice(slice, newLength);
	}

	var array = slice.array;
	var leftOffset = slice.offset + slice.length - 1, i;
	for (i = 1; i < arguments.length; i++) {
		array[leftOffset + i] = arguments[i];
	}

	var newSlice = new slice.constructor(array);
	newSlice.offset = slice.offset;
	newSlice.length = newLength;
	newSlice.capacity = slice.capacity;
	return newSlice;
};

var go$appendSlice = function(slice, toAppend) {
	if (toAppend.length === 0) {
		return slice;
	}

	var newLength = slice.length + toAppend.length;
	if (newLength > slice.capacity) {
		slice = go$growSlice(slice, newLength);
	}

	var array = slice.array;
	var leftOffset = slice.offset + slice.length, rightOffset = toAppend.offset, i;
	for (i = 0; i < toAppend.length; i++) {
		array[leftOffset + i] = toAppend.array[rightOffset + i];
	}

	var newSlice = new slice.constructor(array);
	newSlice.offset = slice.offset;
	newSlice.length = newLength;
	newSlice.capacity = slice.capacity;
	return newSlice;
};

var go$panic = function(value) {
	var message;
	if (value.constructor === Go$String) {
		message = value.go$val;
	} else if (value.Error !== undefined) {
		message = value.Error();
	} else if (value.String !== undefined) {
		message = value.String();
	} else {
		message = value;
	}
	var err = new Error(message);
	err.go$panicValue = value;
	return err;
};
var go$notSupported = function(feature) {
	var err = new Error("not supported by GopherJS: " + feature);
	err.go$notSupported = feature;
	throw err;
};
var go$throwRuntimeError; // set by package "runtime"

var go$errorStack = [], go$jsErr = null;

var go$pushErr = function(err) {
	if (err.go$panicValue === undefined) {
		var jsPkg = go$packages["github.com/gopherjs/gopherjs/js"];
		if (err.go$exit || err.go$notSupported || jsPkg === undefined) {
			go$jsErr = err;
			return;
		}
		err.go$panicValue = new jsPkg.Error.Ptr(err);
	}
	go$errorStack.push({ frame: go$getStackDepth(), error: err });
};

var go$callDeferred = function(deferred) {
	if (go$jsErr !== null) {
		throw go$jsErr;
	}
	var i;
	for (i = deferred.length - 1; i >= 0; i--) {
		var call = deferred[i];
		try {
			if (call.recv !== undefined) {
				call.recv[call.method].apply(call.recv, call.args);
				continue;
			}
			call.fun.apply(undefined, call.args);
		} catch (err) {
			go$errorStack.push({ frame: go$getStackDepth(), error: err });
		}
	}
	var err = go$errorStack[go$errorStack.length - 1];
	if (err !== undefined && err.frame === go$getStackDepth()) {
		go$errorStack.pop();
		throw err.error;
	}
};

var go$recover = function() {
	var err = go$errorStack[go$errorStack.length - 1];
	if (err === undefined || err.frame !== go$getStackDepth()) {
		return null;
	}
	go$errorStack.pop();
	return err.error.go$panicValue;
};

var go$getStack = function() {
	return (new Error()).stack.split("\n");
};

var go$getStackDepth = function() {
	var s = go$getStack(), d = 0, i;
	for (i = 0; i < s.length; i++) {
		if (s[i].indexOf("go$") === -1) {
			d++;
		}
	}
	return d;
};

var go$interfaceIsEqual = function(a, b) {
	if (a === b) {
		return true;
	}
	if (a === null || b === null || a === undefined || b === undefined || a.constructor !== b.constructor) {
		return false;
	}
	switch (a.constructor.kind) {
	case "Float32":
		return go$float32IsEqual(a.go$val, b.go$val);
	case "Complex64":
		return go$float32IsEqual(a.go$val.real, b.go$val.real) && go$float32IsEqual(a.go$val.imag, b.go$val.imag);
	case "Complex128":
		return a.go$val.real === b.go$val.real && a.go$val.imag === b.go$val.imag;
	case "Int64":
	case "Uint64":
		return a.go$val.high === b.go$val.high && a.go$val.low === b.go$val.low;
	case "Array":
		return go$arrayIsEqual(a.go$val, b.go$val);
	case "Ptr":
		if (a.constructor.Struct) {
			return false;
		}
		return go$pointerIsEqual(a, b);
	case "Func":
	case "Map":
	case "Slice":
	case "Struct":
		go$throwRuntimeError("comparing uncomparable type " + a.constructor);
	case undefined: // js.Object
		return false;
	default:
		return a.go$val === b.go$val;
	}
};
var go$float32IsEqual = function(a, b) {
	if (a === b) {
		return true;
	}
	if (a === 0 || b === 0 || a === 1/0 || b === 1/0 || a === -1/0 || b === -1/0 || a !== a || b !== b) {
		return false;
	}
	var math = go$packages["math"];
	return math !== undefined && math.Float32bits(a) === math.Float32bits(b);
}
var go$arrayIsEqual = function(a, b) {
	if (a.length != b.length) {
		return false;
	}
	var i;
	for (i = 0; i < a.length; i++) {
		if (a[i] !== b[i]) {
			return false;
		}
	}
	return true;
};
var go$sliceIsEqual = function(a, ai, b, bi) {
	return a.array === b.array && a.offset + ai === b.offset + bi;
};
var go$pointerIsEqual = function(a, b) {
	if (a === b) {
		return true;
	}
	if (a.go$get === go$throwNilPointerError || b.go$get === go$throwNilPointerError) {
		return a.go$get === go$throwNilPointerError && b.go$get === go$throwNilPointerError;
	}
	var old = a.go$get();
	var dummy = new Object();
	a.go$set(dummy);
	var equal = b.go$get() === dummy;
	a.go$set(old);
	return equal;
};

var go$typeAssertionFailed = function(obj, expected) {
	var got = "";
	if (obj !== null) {
		got = obj.constructor.string;
	}
	throw go$panic(new go$packages["runtime"].TypeAssertionError.Ptr("", got, expected.string, ""));
};

var go$now = function() { var msec = (new Date()).getTime(); return [new Go$Int64(0, Math.floor(msec / 1000)), (msec % 1000) * 1000000]; };

var go$packages = {};
go$packages["runtime"] = (function() {
	var go$pkg = {}, js = go$packages["github.com/gopherjs/gopherjs/js"], Error, TypeAssertionError, errorString, SetFinalizer, sizeof_C_MStats;
	Error = go$pkg.Error = go$newType(0, "Interface", "runtime.Error", "Error", "runtime", null);
	TypeAssertionError = go$pkg.TypeAssertionError = go$newType(0, "Struct", "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.go$val = this;
		this.interfaceString = interfaceString_ !== undefined ? interfaceString_ : "";
		this.concreteString = concreteString_ !== undefined ? concreteString_ : "";
		this.assertedString = assertedString_ !== undefined ? assertedString_ : "";
		this.missingMethod = missingMethod_ !== undefined ? missingMethod_ : "";
	});
	errorString = go$pkg.errorString = go$newType(0, "String", "runtime.errorString", "errorString", "runtime", null);
	SetFinalizer = go$pkg.SetFinalizer = function(x, f) {
	};
	TypeAssertionError.Ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.go$val.RuntimeError(); };
	TypeAssertionError.Ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.go$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.go$val;
	};
	go$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.go$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.go$val;
		return "runtime error: " + e;
	};
	go$ptrType(errorString).prototype.Error = function() { return new errorString(this.go$get()).Error(); };

			go$throwRuntimeError = function(msg) { throw go$panic(new errorString(msg)); };
			go$pkg.init = function() {
		Error.init([["Error", "", (go$funcType([], [Go$String], false))], ["RuntimeError", "", (go$funcType([], [], false))]]);
		(go$ptrType(TypeAssertionError)).methods = [["Error", "", [], [Go$String], false, -1], ["RuntimeError", "", [], [], false, -1]];
		TypeAssertionError.init([["interfaceString", "interfaceString", "runtime", Go$String, ""], ["concreteString", "concreteString", "runtime", Go$String, ""], ["assertedString", "assertedString", "runtime", Go$String, ""], ["missingMethod", "missingMethod", "runtime", Go$String, ""]]);
		errorString.methods = [["Error", "", [], [Go$String], false, -1], ["RuntimeError", "", [], [], false, -1]];
		(go$ptrType(errorString)).methods = [["Error", "", [], [Go$String], false, -1], ["RuntimeError", "", [], [], false, -1]];
		sizeof_C_MStats = 3712;
		if (!((sizeof_C_MStats === 3712))) {
			console.log(sizeof_C_MStats, 3712);
			throw go$panic(new Go$String("MStats vs MemStatsType size mismatch"));
		}
	}
	return go$pkg;
})();
go$packages["errors"] = (function() {
	var go$pkg = {}, errorString, New;
	errorString = go$pkg.errorString = go$newType(0, "Struct", "errors.errorString", "errorString", "errors", function(s_) {
		this.go$val = this;
		this.s = s_ !== undefined ? s_ : "";
	});
	New = go$pkg.New = function(text) {
		return new errorString.Ptr(text);
	};
	errorString.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.go$val.Error(); };
	go$pkg.init = function() {
		(go$ptrType(errorString)).methods = [["Error", "", [], [Go$String], false, -1]];
		errorString.init([["s", "s", "errors", Go$String, ""]]);
	}
	return go$pkg;
})();
go$packages["sync/atomic"] = (function() {
	var go$pkg = {}, CompareAndSwapInt32, AddInt32, LoadInt32, LoadUint32, LoadPointer, StoreUint32, StorePointer;
	CompareAndSwapInt32 = go$pkg.CompareAndSwapInt32 = function(addr, old, new$1) {
		if (addr.go$get() === old) {
			addr.go$set(new$1);
			return true;
		}
		return false;
	};
	AddInt32 = go$pkg.AddInt32 = function(addr, delta) {
		var new$1;
		new$1 = addr.go$get() + delta >> 0;
		addr.go$set(new$1);
		return new$1;
	};
	LoadInt32 = go$pkg.LoadInt32 = function(addr) {
		return addr.go$get();
	};
	LoadUint32 = go$pkg.LoadUint32 = function(addr) {
		return addr.go$get();
	};
	LoadPointer = go$pkg.LoadPointer = function(addr) {
		return addr.go$get();
	};
	StoreUint32 = go$pkg.StoreUint32 = function(addr, val) {
		addr.go$set(val);
	};
	StorePointer = go$pkg.StorePointer = function(addr, val) {
		addr.go$set(val);
	};
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["sync"] = (function() {
	var go$pkg = {}, atomic = go$packages["sync/atomic"], Mutex, Locker, Once, RWMutex, rlocker, WaitGroup, runtime_Syncsemcheck, runtime_Semacquire, runtime_Semrelease;
	Mutex = go$pkg.Mutex = go$newType(0, "Struct", "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.go$val = this;
		this.state = state_ !== undefined ? state_ : 0;
		this.sema = sema_ !== undefined ? sema_ : 0;
	});
	Locker = go$pkg.Locker = go$newType(0, "Interface", "sync.Locker", "Locker", "sync", null);
	Once = go$pkg.Once = go$newType(0, "Struct", "sync.Once", "Once", "sync", function(m_, done_) {
		this.go$val = this;
		this.m = m_ !== undefined ? m_ : new Mutex.Ptr();
		this.done = done_ !== undefined ? done_ : 0;
	});
	RWMutex = go$pkg.RWMutex = go$newType(0, "Struct", "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.go$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.Ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	rlocker = go$pkg.rlocker = go$newType(0, "Struct", "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.go$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.Ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	WaitGroup = go$pkg.WaitGroup = go$newType(0, "Struct", "sync.WaitGroup", "WaitGroup", "sync", function(m_, counter_, waiters_, sema_) {
		this.go$val = this;
		this.m = m_ !== undefined ? m_ : new Mutex.Ptr();
		this.counter = counter_ !== undefined ? counter_ : 0;
		this.waiters = waiters_ !== undefined ? waiters_ : 0;
		this.sema = sema_ !== undefined ? sema_ : (go$ptrType(Go$Uint32)).nil;
	});
	runtime_Syncsemcheck = function(size) {
	};
	Mutex.Ptr.prototype.Lock = function() {
		var m, v, awoke, old, new$1, v$1, v$2;
		m = this;
		if (atomic.CompareAndSwapInt32(new (go$ptrType(Go$Int32))(function() { return m.state; }, function(v) { m.state = v;; }), 0, 1)) {
			return;
		}
		awoke = false;
		while (true) {
			old = m.state;
			new$1 = old | 1;
			if (!(((old & 1) === 0))) {
				new$1 = old + 4 >> 0;
			}
			if (awoke) {
				new$1 = new$1 & ~2;
			}
			if (atomic.CompareAndSwapInt32(new (go$ptrType(Go$Int32))(function() { return m.state; }, function(v$1) { m.state = v$1;; }), old, new$1)) {
				if ((old & 1) === 0) {
					break;
				}
				runtime_Semacquire(new (go$ptrType(Go$Uint32))(function() { return m.sema; }, function(v$2) { m.sema = v$2;; }));
				awoke = true;
			}
		}
	};
	Mutex.prototype.Lock = function() { return this.go$val.Lock(); };
	Mutex.Ptr.prototype.Unlock = function() {
		var m, v, new$1, old, v$1, v$2;
		m = this;
		new$1 = atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return m.state; }, function(v) { m.state = v;; }), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			throw go$panic(new Go$String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		while (true) {
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			if (atomic.CompareAndSwapInt32(new (go$ptrType(Go$Int32))(function() { return m.state; }, function(v$1) { m.state = v$1;; }), old, new$1)) {
				runtime_Semrelease(new (go$ptrType(Go$Uint32))(function() { return m.sema; }, function(v$2) { m.sema = v$2;; }));
				return;
			}
			old = m.state;
		}
	};
	Mutex.prototype.Unlock = function() { return this.go$val.Unlock(); };
	Once.Ptr.prototype.Do = function(f) {
		var o, v, v$1;
		var go$deferred = [];
		try {
			o = this;
			if (atomic.LoadUint32(new (go$ptrType(Go$Uint32))(function() { return o.done; }, function(v) { o.done = v;; })) === 1) {
				return;
			}
			o.m.Lock();
			go$deferred.push({ recv: o.m, method: "Unlock", args: [] });
			if (o.done === 0) {
				f();
				atomic.StoreUint32(new (go$ptrType(Go$Uint32))(function() { return o.done; }, function(v$1) { o.done = v$1;; }), 1);
			}
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Once.prototype.Do = function(f) { return this.go$val.Do(f); };
	runtime_Semacquire = function() {
		throw go$panic("Native function not implemented: runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		throw go$panic("Native function not implemented: runtime_Semrelease");
	};
	RWMutex.Ptr.prototype.RLock = function() {
		var rw, v, v$1;
		rw = this;
		if (atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerCount; }, function(v) { rw.readerCount = v;; }), 1) < 0) {
			runtime_Semacquire(new (go$ptrType(Go$Uint32))(function() { return rw.readerSem; }, function(v$1) { rw.readerSem = v$1;; }));
		}
	};
	RWMutex.prototype.RLock = function() { return this.go$val.RLock(); };
	RWMutex.Ptr.prototype.RUnlock = function() {
		var rw, v, v$1, v$2;
		rw = this;
		if (atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerCount; }, function(v) { rw.readerCount = v;; }), -1) < 0) {
			if (atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerWait; }, function(v$1) { rw.readerWait = v$1;; }), -1) === 0) {
				runtime_Semrelease(new (go$ptrType(Go$Uint32))(function() { return rw.writerSem; }, function(v$2) { rw.writerSem = v$2;; }));
			}
		}
	};
	RWMutex.prototype.RUnlock = function() { return this.go$val.RUnlock(); };
	RWMutex.Ptr.prototype.Lock = function() {
		var rw, v, r, v$1, v$2;
		rw = this;
		rw.w.Lock();
		r = atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerCount; }, function(v) { rw.readerCount = v;; }), -1073741824) + 1073741824 >> 0;
		if (!((r === 0)) && !((atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerWait; }, function(v$1) { rw.readerWait = v$1;; }), r) === 0))) {
			runtime_Semacquire(new (go$ptrType(Go$Uint32))(function() { return rw.writerSem; }, function(v$2) { rw.writerSem = v$2;; }));
		}
	};
	RWMutex.prototype.Lock = function() { return this.go$val.Lock(); };
	RWMutex.Ptr.prototype.Unlock = function() {
		var rw, v, r, i, v$1;
		rw = this;
		r = atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return rw.readerCount; }, function(v) { rw.readerCount = v;; }), 1073741824);
		i = 0;
		while (i < (r >> 0)) {
			runtime_Semrelease(new (go$ptrType(Go$Uint32))(function() { return rw.readerSem; }, function(v$1) { rw.readerSem = v$1;; }));
			i = i + 1 >> 0;
		}
		rw.w.Unlock();
	};
	RWMutex.prototype.Unlock = function() { return this.go$val.Unlock(); };
	RWMutex.Ptr.prototype.RLocker = function() {
		var rw, _struct, _struct$1;
		rw = this;
		return (_struct = rw, new rlocker.Ptr((_struct$1 = _struct.w, new Mutex.Ptr(_struct$1.state, _struct$1.sema)), _struct.writerSem, _struct.readerSem, _struct.readerCount, _struct.readerWait));
	};
	RWMutex.prototype.RLocker = function() { return this.go$val.RLocker(); };
	rlocker.Ptr.prototype.Lock = function() {
		var r, _struct, _struct$1;
		r = this;
		(_struct = r, new RWMutex.Ptr((_struct$1 = _struct.w, new Mutex.Ptr(_struct$1.state, _struct$1.sema)), _struct.writerSem, _struct.readerSem, _struct.readerCount, _struct.readerWait)).RLock();
	};
	rlocker.prototype.Lock = function() { return this.go$val.Lock(); };
	rlocker.Ptr.prototype.Unlock = function() {
		var r, _struct, _struct$1;
		r = this;
		(_struct = r, new RWMutex.Ptr((_struct$1 = _struct.w, new Mutex.Ptr(_struct$1.state, _struct$1.sema)), _struct.writerSem, _struct.readerSem, _struct.readerCount, _struct.readerWait)).RUnlock();
	};
	rlocker.prototype.Unlock = function() { return this.go$val.Unlock(); };
	WaitGroup.Ptr.prototype.Add = function(delta) {
		var wg, v, v$1, v$2, i;
		var go$deferred = [];
		try {
			wg = this;
			v$1 = atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return wg.counter; }, function(v) { wg.counter = v;; }), (delta >> 0));
			if (v$1 < 0) {
				throw go$panic(new Go$String("sync: negative WaitGroup counter"));
			}
			if (v$1 > 0 || (atomic.LoadInt32(new (go$ptrType(Go$Int32))(function() { return wg.waiters; }, function(v$2) { wg.waiters = v$2;; })) === 0)) {
				return;
			}
			wg.m.Lock();
			i = 0;
			while (i < wg.waiters) {
				runtime_Semrelease(wg.sema);
				i = i + 1 >> 0;
			}
			wg.waiters = 0;
			wg.sema = (go$ptrType(Go$Uint32)).nil;
			wg.m.Unlock();
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	WaitGroup.prototype.Add = function(delta) { return this.go$val.Add(delta); };
	WaitGroup.Ptr.prototype.Done = function() {
		var wg;
		wg = this;
		wg.Add(-1);
	};
	WaitGroup.prototype.Done = function() { return this.go$val.Done(); };
	WaitGroup.Ptr.prototype.Wait = function() {
		var wg, v, v$1, w, v$2, v$3, s;
		wg = this;
		if (atomic.LoadInt32(new (go$ptrType(Go$Int32))(function() { return wg.counter; }, function(v) { wg.counter = v;; })) === 0) {
			return;
		}
		wg.m.Lock();
		w = atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return wg.waiters; }, function(v$1) { wg.waiters = v$1;; }), 1);
		if (atomic.LoadInt32(new (go$ptrType(Go$Int32))(function() { return wg.counter; }, function(v$2) { wg.counter = v$2;; })) === 0) {
			atomic.AddInt32(new (go$ptrType(Go$Int32))(function() { return wg.waiters; }, function(v$3) { wg.waiters = v$3;; }), -1);
			wg.m.Unlock();
			return;
		}
		if (go$pointerIsEqual(wg.sema, (go$ptrType(Go$Uint32)).nil)) {
			wg.sema = go$newDataPointer(0, (go$ptrType(Go$Uint32)));
		}
		s = wg.sema;
		wg.m.Unlock();
		runtime_Semacquire(s);
	};
	WaitGroup.prototype.Wait = function() { return this.go$val.Wait(); };
	go$pkg.init = function() {
		(go$ptrType(Mutex)).methods = [["Lock", "", [], [], false, -1], ["Unlock", "", [], [], false, -1]];
		Mutex.init([["state", "state", "sync", Go$Int32, ""], ["sema", "sema", "sync", Go$Uint32, ""]]);
		Locker.init([["Lock", "", (go$funcType([], [], false))], ["Unlock", "", (go$funcType([], [], false))]]);
		(go$ptrType(Once)).methods = [["Do", "", [(go$funcType([], [], false))], [], false, -1]];
		Once.init([["m", "m", "sync", Mutex, ""], ["done", "done", "sync", Go$Uint32, ""]]);
		(go$ptrType(RWMutex)).methods = [["Lock", "", [], [], false, -1], ["RLock", "", [], [], false, -1], ["RLocker", "", [], [Locker], false, -1], ["RUnlock", "", [], [], false, -1], ["Unlock", "", [], [], false, -1]];
		RWMutex.init([["w", "w", "sync", Mutex, ""], ["writerSem", "writerSem", "sync", Go$Uint32, ""], ["readerSem", "readerSem", "sync", Go$Uint32, ""], ["readerCount", "readerCount", "sync", Go$Int32, ""], ["readerWait", "readerWait", "sync", Go$Int32, ""]]);
		(go$ptrType(rlocker)).methods = [["Lock", "", [], [], false, -1], ["Unlock", "", [], [], false, -1]];
		rlocker.init([["w", "w", "sync", Mutex, ""], ["writerSem", "writerSem", "sync", Go$Uint32, ""], ["readerSem", "readerSem", "sync", Go$Uint32, ""], ["readerCount", "readerCount", "sync", Go$Int32, ""], ["readerWait", "readerWait", "sync", Go$Int32, ""]]);
		(go$ptrType(WaitGroup)).methods = [["Add", "", [Go$Int], [], false, -1], ["Done", "", [], [], false, -1], ["Wait", "", [], [], false, -1]];
		WaitGroup.init([["m", "m", "sync", Mutex, ""], ["counter", "counter", "sync", Go$Int32, ""], ["waiters", "waiters", "sync", Go$Int32, ""], ["sema", "sema", "sync", (go$ptrType(Go$Uint32)), ""]]);
		var s;
		s = go$makeNativeArray("Uintptr", 3, function() { return 0; });
		runtime_Syncsemcheck(12);
	}
	return go$pkg;
})();
go$packages["io"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], sync = go$packages["sync"], Reader, Writer, RuneReader, ReadAtLeast, ReadFull, errWhence, errOffset;
	Reader = go$pkg.Reader = go$newType(0, "Interface", "io.Reader", "Reader", "io", null);
	Writer = go$pkg.Writer = go$newType(0, "Interface", "io.Writer", "Writer", "io", null);
	RuneReader = go$pkg.RuneReader = go$newType(0, "Interface", "io.RuneReader", "RuneReader", "io", null);
	ReadAtLeast = go$pkg.ReadAtLeast = function(r, buf, min) {
		var n, err, _tuple, nn, _tuple$1;
		n = 0;
		err = null;
		if (buf.length < min) {
			_tuple = [0, go$pkg.ErrShortBuffer]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		while (n < min && go$interfaceIsEqual(err, null)) {
			nn = 0;
			_tuple$1 = r.Read(go$subslice(buf, n)); nn = _tuple$1[0]; err = _tuple$1[1];
			n = n + (nn) >> 0;
		}
		if (n >= min) {
			err = null;
		} else if (n > 0 && go$interfaceIsEqual(err, go$pkg.EOF)) {
			err = go$pkg.ErrUnexpectedEOF;
		}
		return [n, err];
	};
	ReadFull = go$pkg.ReadFull = function(r, buf) {
		var n, err, _tuple;
		n = 0;
		err = null;
		_tuple = ReadAtLeast(r, buf, buf.length); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	go$pkg.init = function() {
		Reader.init([["Read", "", (go$funcType([(go$sliceType(Go$Uint8))], [Go$Int, go$error], false))]]);
		Writer.init([["Write", "", (go$funcType([(go$sliceType(Go$Uint8))], [Go$Int, go$error], false))]]);
		RuneReader.init([["ReadRune", "", (go$funcType([], [Go$Int32, Go$Int, go$error], false))]]);
		go$pkg.ErrShortWrite = errors.New("short write");
		go$pkg.ErrShortBuffer = errors.New("short buffer");
		go$pkg.EOF = errors.New("EOF");
		go$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		go$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		go$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
	}
	return go$pkg;
})();
go$packages["unicode"] = (function() {
	var go$pkg = {}, RangeTable, Range16, Range32, CaseRange, d, foldPair, IsDigit, IsPrint, In, IsLetter, IsSpace, is16, is32, Is, isExcludingLatin, to, To, ToUpper, ToLower, SimpleFold, _L, _M, _N, _Nd, _P, _S, _White_Space, _CaseRanges, properties, caseOrbit;
	RangeTable = go$pkg.RangeTable = go$newType(0, "Struct", "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.go$val = this;
		this.R16 = R16_ !== undefined ? R16_ : (go$sliceType(Range16)).nil;
		this.R32 = R32_ !== undefined ? R32_ : (go$sliceType(Range32)).nil;
		this.LatinOffset = LatinOffset_ !== undefined ? LatinOffset_ : 0;
	});
	Range16 = go$pkg.Range16 = go$newType(0, "Struct", "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.go$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	Range32 = go$pkg.Range32 = go$newType(0, "Struct", "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.go$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	CaseRange = go$pkg.CaseRange = go$newType(0, "Struct", "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.go$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Delta = Delta_ !== undefined ? Delta_ : go$makeNativeArray("Int32", 3, function() { return 0; });
	});
	d = go$pkg.d = go$newType(0, "Array", "unicode.d", "d", "unicode", null);
	foldPair = go$pkg.foldPair = go$newType(0, "Struct", "unicode.foldPair", "foldPair", "unicode", function(From_, To_) {
		this.go$val = this;
		this.From = From_ !== undefined ? From_ : 0;
		this.To = To_ !== undefined ? To_ : 0;
	});
	IsDigit = go$pkg.IsDigit = function(r) {
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin(go$pkg.Digit, r);
	};
	IsPrint = go$pkg.IsPrint = function(r) {
		if ((r >>> 0) <= 255) {
			return !((((properties[(r << 24 >>> 24)] & 128) >>> 0) === 0));
		}
		return In(r, go$pkg.PrintRanges);
	};
	In = go$pkg.In = function(r, ranges) {
		var _ref, _i, _slice, _index, inside;
		_ref = ranges;
		_i = 0;
		while (_i < _ref.length) {
			inside = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (Is(inside, r)) {
				return true;
			}
			_i++;
		}
		return false;
	};
	IsLetter = go$pkg.IsLetter = function(r) {
		if ((r >>> 0) <= 255) {
			return !((((properties[(r << 24 >>> 24)] & 96) >>> 0) === 0));
		}
		return isExcludingLatin(go$pkg.Letter, r);
	};
	IsSpace = go$pkg.IsSpace = function(r) {
		var _ref;
		if ((r >>> 0) <= 255) {
			_ref = r;
			if (_ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 13 || _ref === 32 || _ref === 133 || _ref === 160) {
				return true;
			}
			return false;
		}
		return isExcludingLatin(go$pkg.White_Space, r);
	};
	is16 = function(ranges, r) {
		var _ref, _i, i, _slice, _index, range_, _r, lo, hi, _q, m, _slice$1, _index$1, range_$1, _r$1;
		if (ranges.length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				range_ = (_slice = ranges, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = (_slice$1 = ranges, _index$1 = m, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _ref, _i, i, _slice, _index, range_, _r, lo, hi, _q, m, _slice$1, _index$1, _struct, range_$1, _r$1;
		if (ranges.length <= 18) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				range_ = (_slice = ranges, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = (_struct = (_slice$1 = ranges, _index$1 = m, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new Range32.Ptr(_struct.Lo, _struct.Hi, _struct.Stride));
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	Is = go$pkg.Is = function(rangeTab, r) {
		var r16, _slice, _index, r32, _slice$1, _index$1;
		r16 = rangeTab.R16;
		if (r16.length > 0 && r <= ((_slice = r16, _index = (r16.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Hi >> 0)) {
			return is16(r16, (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.length > 0 && r >= ((_slice$1 = r32, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var r16, off, _slice, _index, r32, _slice$1, _index$1;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.length > off && r <= ((_slice = r16, _index = (r16.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Hi >> 0)) {
			return is16(go$subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.length > 0 && r >= ((_slice$1 = r32, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	to = function(_case, r, caseRange) {
		var lo, hi, _q, m, _slice, _index, _struct, cr, delta;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			cr = (_struct = (_slice = caseRange, _index = m, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new CaseRange.Ptr(_struct.Lo, _struct.Hi, go$mapArray(_struct.Delta, function(entry) { return entry; })));
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = cr.Delta[_case];
				if (delta > 1114111) {
					return (cr.Lo >> 0) + (((((r - (cr.Lo >> 0) >> 0)) & ~1) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	To = go$pkg.To = function(_case, r) {
		return to(_case, r, go$pkg.CaseRanges);
	};
	ToUpper = go$pkg.ToUpper = function(r) {
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - 32 >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	ToLower = go$pkg.ToLower = function(r) {
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + 32 >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	SimpleFold = go$pkg.SimpleFold = function(r) {
		var lo, hi, _q, m, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, l;
		lo = 0;
		hi = caseOrbit.length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if (((_slice = caseOrbit, _index = m, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.length && (((_slice$1 = caseOrbit, _index$1 = lo, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).From >> 0) === r)) {
			return ((_slice$2 = caseOrbit, _index$2 = lo, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).To >> 0);
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	go$pkg.init = function() {
		RangeTable.init([["R16", "R16", "", (go$sliceType(Range16)), ""], ["R32", "R32", "", (go$sliceType(Range32)), ""], ["LatinOffset", "LatinOffset", "", Go$Int, ""]]);
		Range16.init([["Lo", "Lo", "", Go$Uint16, ""], ["Hi", "Hi", "", Go$Uint16, ""], ["Stride", "Stride", "", Go$Uint16, ""]]);
		Range32.init([["Lo", "Lo", "", Go$Uint32, ""], ["Hi", "Hi", "", Go$Uint32, ""], ["Stride", "Stride", "", Go$Uint32, ""]]);
		CaseRange.init([["Lo", "Lo", "", Go$Uint32, ""], ["Hi", "Hi", "", Go$Uint32, ""], ["Delta", "Delta", "", d, ""]]);
		d.init(Go$Int32, 3);
		foldPair.init([["From", "From", "", Go$Uint16, ""], ["To", "To", "", Go$Uint16, ""]]);
		_L = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(97, 122, 1), new Range16.Ptr(170, 181, 11), new Range16.Ptr(186, 192, 6), new Range16.Ptr(193, 214, 1), new Range16.Ptr(216, 246, 1), new Range16.Ptr(248, 705, 1), new Range16.Ptr(710, 721, 1), new Range16.Ptr(736, 740, 1), new Range16.Ptr(748, 750, 2), new Range16.Ptr(880, 884, 1), new Range16.Ptr(886, 887, 1), new Range16.Ptr(890, 893, 1), new Range16.Ptr(902, 904, 2), new Range16.Ptr(905, 906, 1), new Range16.Ptr(908, 910, 2), new Range16.Ptr(911, 929, 1), new Range16.Ptr(931, 1013, 1), new Range16.Ptr(1015, 1153, 1), new Range16.Ptr(1162, 1319, 1), new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(1369, 1377, 8), new Range16.Ptr(1378, 1415, 1), new Range16.Ptr(1488, 1514, 1), new Range16.Ptr(1520, 1522, 1), new Range16.Ptr(1568, 1610, 1), new Range16.Ptr(1646, 1647, 1), new Range16.Ptr(1649, 1747, 1), new Range16.Ptr(1749, 1765, 16), new Range16.Ptr(1766, 1774, 8), new Range16.Ptr(1775, 1786, 11), new Range16.Ptr(1787, 1788, 1), new Range16.Ptr(1791, 1808, 17), new Range16.Ptr(1810, 1839, 1), new Range16.Ptr(1869, 1957, 1), new Range16.Ptr(1969, 1994, 25), new Range16.Ptr(1995, 2026, 1), new Range16.Ptr(2036, 2037, 1), new Range16.Ptr(2042, 2048, 6), new Range16.Ptr(2049, 2069, 1), new Range16.Ptr(2074, 2084, 10), new Range16.Ptr(2088, 2112, 24), new Range16.Ptr(2113, 2136, 1), new Range16.Ptr(2208, 2210, 2), new Range16.Ptr(2211, 2220, 1), new Range16.Ptr(2308, 2361, 1), new Range16.Ptr(2365, 2384, 19), new Range16.Ptr(2392, 2401, 1), new Range16.Ptr(2417, 2423, 1), new Range16.Ptr(2425, 2431, 1), new Range16.Ptr(2437, 2444, 1), new Range16.Ptr(2447, 2448, 1), new Range16.Ptr(2451, 2472, 1), new Range16.Ptr(2474, 2480, 1), new Range16.Ptr(2482, 2486, 4), new Range16.Ptr(2487, 2489, 1), new Range16.Ptr(2493, 2510, 17), new Range16.Ptr(2524, 2525, 1), new Range16.Ptr(2527, 2529, 1), new Range16.Ptr(2544, 2545, 1), new Range16.Ptr(2565, 2570, 1), new Range16.Ptr(2575, 2576, 1), new Range16.Ptr(2579, 2600, 1), new Range16.Ptr(2602, 2608, 1), new Range16.Ptr(2610, 2611, 1), new Range16.Ptr(2613, 2614, 1), new Range16.Ptr(2616, 2617, 1), new Range16.Ptr(2649, 2652, 1), new Range16.Ptr(2654, 2674, 20), new Range16.Ptr(2675, 2676, 1), new Range16.Ptr(2693, 2701, 1), new Range16.Ptr(2703, 2705, 1), new Range16.Ptr(2707, 2728, 1), new Range16.Ptr(2730, 2736, 1), new Range16.Ptr(2738, 2739, 1), new Range16.Ptr(2741, 2745, 1), new Range16.Ptr(2749, 2768, 19), new Range16.Ptr(2784, 2785, 1), new Range16.Ptr(2821, 2828, 1), new Range16.Ptr(2831, 2832, 1), new Range16.Ptr(2835, 2856, 1), new Range16.Ptr(2858, 2864, 1), new Range16.Ptr(2866, 2867, 1), new Range16.Ptr(2869, 2873, 1), new Range16.Ptr(2877, 2908, 31), new Range16.Ptr(2909, 2911, 2), new Range16.Ptr(2912, 2913, 1), new Range16.Ptr(2929, 2947, 18), new Range16.Ptr(2949, 2954, 1), new Range16.Ptr(2958, 2960, 1), new Range16.Ptr(2962, 2965, 1), new Range16.Ptr(2969, 2970, 1), new Range16.Ptr(2972, 2974, 2), new Range16.Ptr(2975, 2979, 4), new Range16.Ptr(2980, 2984, 4), new Range16.Ptr(2985, 2986, 1), new Range16.Ptr(2990, 3001, 1), new Range16.Ptr(3024, 3077, 53), new Range16.Ptr(3078, 3084, 1), new Range16.Ptr(3086, 3088, 1), new Range16.Ptr(3090, 3112, 1), new Range16.Ptr(3114, 3123, 1), new Range16.Ptr(3125, 3129, 1), new Range16.Ptr(3133, 3160, 27), new Range16.Ptr(3161, 3168, 7), new Range16.Ptr(3169, 3205, 36), new Range16.Ptr(3206, 3212, 1), new Range16.Ptr(3214, 3216, 1), new Range16.Ptr(3218, 3240, 1), new Range16.Ptr(3242, 3251, 1), new Range16.Ptr(3253, 3257, 1), new Range16.Ptr(3261, 3294, 33), new Range16.Ptr(3296, 3297, 1), new Range16.Ptr(3313, 3314, 1), new Range16.Ptr(3333, 3340, 1), new Range16.Ptr(3342, 3344, 1), new Range16.Ptr(3346, 3386, 1), new Range16.Ptr(3389, 3406, 17), new Range16.Ptr(3424, 3425, 1), new Range16.Ptr(3450, 3455, 1), new Range16.Ptr(3461, 3478, 1), new Range16.Ptr(3482, 3505, 1), new Range16.Ptr(3507, 3515, 1), new Range16.Ptr(3517, 3520, 3), new Range16.Ptr(3521, 3526, 1), new Range16.Ptr(3585, 3632, 1), new Range16.Ptr(3634, 3635, 1), new Range16.Ptr(3648, 3654, 1), new Range16.Ptr(3713, 3714, 1), new Range16.Ptr(3716, 3719, 3), new Range16.Ptr(3720, 3722, 2), new Range16.Ptr(3725, 3732, 7), new Range16.Ptr(3733, 3735, 1), new Range16.Ptr(3737, 3743, 1), new Range16.Ptr(3745, 3747, 1), new Range16.Ptr(3749, 3751, 2), new Range16.Ptr(3754, 3755, 1), new Range16.Ptr(3757, 3760, 1), new Range16.Ptr(3762, 3763, 1), new Range16.Ptr(3773, 3776, 3), new Range16.Ptr(3777, 3780, 1), new Range16.Ptr(3782, 3804, 22), new Range16.Ptr(3805, 3807, 1), new Range16.Ptr(3840, 3904, 64), new Range16.Ptr(3905, 3911, 1), new Range16.Ptr(3913, 3948, 1), new Range16.Ptr(3976, 3980, 1), new Range16.Ptr(4096, 4138, 1), new Range16.Ptr(4159, 4176, 17), new Range16.Ptr(4177, 4181, 1), new Range16.Ptr(4186, 4189, 1), new Range16.Ptr(4193, 4197, 4), new Range16.Ptr(4198, 4206, 8), new Range16.Ptr(4207, 4208, 1), new Range16.Ptr(4213, 4225, 1), new Range16.Ptr(4238, 4256, 18), new Range16.Ptr(4257, 4293, 1), new Range16.Ptr(4295, 4301, 6), new Range16.Ptr(4304, 4346, 1), new Range16.Ptr(4348, 4680, 1), new Range16.Ptr(4682, 4685, 1), new Range16.Ptr(4688, 4694, 1), new Range16.Ptr(4696, 4698, 2), new Range16.Ptr(4699, 4701, 1), new Range16.Ptr(4704, 4744, 1), new Range16.Ptr(4746, 4749, 1), new Range16.Ptr(4752, 4784, 1), new Range16.Ptr(4786, 4789, 1), new Range16.Ptr(4792, 4798, 1), new Range16.Ptr(4800, 4802, 2), new Range16.Ptr(4803, 4805, 1), new Range16.Ptr(4808, 4822, 1), new Range16.Ptr(4824, 4880, 1), new Range16.Ptr(4882, 4885, 1), new Range16.Ptr(4888, 4954, 1), new Range16.Ptr(4992, 5007, 1), new Range16.Ptr(5024, 5108, 1), new Range16.Ptr(5121, 5740, 1), new Range16.Ptr(5743, 5759, 1), new Range16.Ptr(5761, 5786, 1), new Range16.Ptr(5792, 5866, 1), new Range16.Ptr(5888, 5900, 1), new Range16.Ptr(5902, 5905, 1), new Range16.Ptr(5920, 5937, 1), new Range16.Ptr(5952, 5969, 1), new Range16.Ptr(5984, 5996, 1), new Range16.Ptr(5998, 6000, 1), new Range16.Ptr(6016, 6067, 1), new Range16.Ptr(6103, 6108, 5), new Range16.Ptr(6176, 6263, 1), new Range16.Ptr(6272, 6312, 1), new Range16.Ptr(6314, 6320, 6), new Range16.Ptr(6321, 6389, 1), new Range16.Ptr(6400, 6428, 1), new Range16.Ptr(6480, 6509, 1), new Range16.Ptr(6512, 6516, 1), new Range16.Ptr(6528, 6571, 1), new Range16.Ptr(6593, 6599, 1), new Range16.Ptr(6656, 6678, 1), new Range16.Ptr(6688, 6740, 1), new Range16.Ptr(6823, 6917, 94), new Range16.Ptr(6918, 6963, 1), new Range16.Ptr(6981, 6987, 1), new Range16.Ptr(7043, 7072, 1), new Range16.Ptr(7086, 7087, 1), new Range16.Ptr(7098, 7141, 1), new Range16.Ptr(7168, 7203, 1), new Range16.Ptr(7245, 7247, 1), new Range16.Ptr(7258, 7293, 1), new Range16.Ptr(7401, 7404, 1), new Range16.Ptr(7406, 7409, 1), new Range16.Ptr(7413, 7414, 1), new Range16.Ptr(7424, 7615, 1), new Range16.Ptr(7680, 7957, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7968, 8005, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8016, 8023, 1), new Range16.Ptr(8025, 8031, 2), new Range16.Ptr(8032, 8061, 1), new Range16.Ptr(8064, 8116, 1), new Range16.Ptr(8118, 8124, 1), new Range16.Ptr(8126, 8130, 4), new Range16.Ptr(8131, 8132, 1), new Range16.Ptr(8134, 8140, 1), new Range16.Ptr(8144, 8147, 1), new Range16.Ptr(8150, 8155, 1), new Range16.Ptr(8160, 8172, 1), new Range16.Ptr(8178, 8180, 1), new Range16.Ptr(8182, 8188, 1), new Range16.Ptr(8305, 8319, 14), new Range16.Ptr(8336, 8348, 1), new Range16.Ptr(8450, 8455, 5), new Range16.Ptr(8458, 8467, 1), new Range16.Ptr(8469, 8473, 4), new Range16.Ptr(8474, 8477, 1), new Range16.Ptr(8484, 8490, 2), new Range16.Ptr(8491, 8493, 1), new Range16.Ptr(8495, 8505, 1), new Range16.Ptr(8508, 8511, 1), new Range16.Ptr(8517, 8521, 1), new Range16.Ptr(8526, 8579, 53), new Range16.Ptr(8580, 11264, 2684), new Range16.Ptr(11265, 11310, 1), new Range16.Ptr(11312, 11358, 1), new Range16.Ptr(11360, 11492, 1), new Range16.Ptr(11499, 11502, 1), new Range16.Ptr(11506, 11507, 1), new Range16.Ptr(11520, 11557, 1), new Range16.Ptr(11559, 11565, 6), new Range16.Ptr(11568, 11623, 1), new Range16.Ptr(11631, 11648, 17), new Range16.Ptr(11649, 11670, 1), new Range16.Ptr(11680, 11686, 1), new Range16.Ptr(11688, 11694, 1), new Range16.Ptr(11696, 11702, 1), new Range16.Ptr(11704, 11710, 1), new Range16.Ptr(11712, 11718, 1), new Range16.Ptr(11720, 11726, 1), new Range16.Ptr(11728, 11734, 1), new Range16.Ptr(11736, 11742, 1), new Range16.Ptr(11823, 12293, 470), new Range16.Ptr(12294, 12337, 43), new Range16.Ptr(12338, 12341, 1), new Range16.Ptr(12347, 12348, 1), new Range16.Ptr(12353, 12438, 1), new Range16.Ptr(12445, 12447, 1), new Range16.Ptr(12449, 12538, 1), new Range16.Ptr(12540, 12543, 1), new Range16.Ptr(12549, 12589, 1), new Range16.Ptr(12593, 12686, 1), new Range16.Ptr(12704, 12730, 1), new Range16.Ptr(12784, 12799, 1), new Range16.Ptr(13312, 19893, 1), new Range16.Ptr(19968, 40908, 1), new Range16.Ptr(40960, 42124, 1), new Range16.Ptr(42192, 42237, 1), new Range16.Ptr(42240, 42508, 1), new Range16.Ptr(42512, 42527, 1), new Range16.Ptr(42538, 42539, 1), new Range16.Ptr(42560, 42606, 1), new Range16.Ptr(42623, 42647, 1), new Range16.Ptr(42656, 42725, 1), new Range16.Ptr(42775, 42783, 1), new Range16.Ptr(42786, 42888, 1), new Range16.Ptr(42891, 42894, 1), new Range16.Ptr(42896, 42899, 1), new Range16.Ptr(42912, 42922, 1), new Range16.Ptr(43000, 43009, 1), new Range16.Ptr(43011, 43013, 1), new Range16.Ptr(43015, 43018, 1), new Range16.Ptr(43020, 43042, 1), new Range16.Ptr(43072, 43123, 1), new Range16.Ptr(43138, 43187, 1), new Range16.Ptr(43250, 43255, 1), new Range16.Ptr(43259, 43274, 15), new Range16.Ptr(43275, 43301, 1), new Range16.Ptr(43312, 43334, 1), new Range16.Ptr(43360, 43388, 1), new Range16.Ptr(43396, 43442, 1), new Range16.Ptr(43471, 43520, 49), new Range16.Ptr(43521, 43560, 1), new Range16.Ptr(43584, 43586, 1), new Range16.Ptr(43588, 43595, 1), new Range16.Ptr(43616, 43638, 1), new Range16.Ptr(43642, 43648, 6), new Range16.Ptr(43649, 43695, 1), new Range16.Ptr(43697, 43701, 4), new Range16.Ptr(43702, 43705, 3), new Range16.Ptr(43706, 43709, 1), new Range16.Ptr(43712, 43714, 2), new Range16.Ptr(43739, 43741, 1), new Range16.Ptr(43744, 43754, 1), new Range16.Ptr(43762, 43764, 1), new Range16.Ptr(43777, 43782, 1), new Range16.Ptr(43785, 43790, 1), new Range16.Ptr(43793, 43798, 1), new Range16.Ptr(43808, 43814, 1), new Range16.Ptr(43816, 43822, 1), new Range16.Ptr(43968, 44002, 1), new Range16.Ptr(44032, 55203, 1), new Range16.Ptr(55216, 55238, 1), new Range16.Ptr(55243, 55291, 1), new Range16.Ptr(63744, 64109, 1), new Range16.Ptr(64112, 64217, 1), new Range16.Ptr(64256, 64262, 1), new Range16.Ptr(64275, 64279, 1), new Range16.Ptr(64285, 64287, 2), new Range16.Ptr(64288, 64296, 1), new Range16.Ptr(64298, 64310, 1), new Range16.Ptr(64312, 64316, 1), new Range16.Ptr(64318, 64320, 2), new Range16.Ptr(64321, 64323, 2), new Range16.Ptr(64324, 64326, 2), new Range16.Ptr(64327, 64433, 1), new Range16.Ptr(64467, 64829, 1), new Range16.Ptr(64848, 64911, 1), new Range16.Ptr(64914, 64967, 1), new Range16.Ptr(65008, 65019, 1), new Range16.Ptr(65136, 65140, 1), new Range16.Ptr(65142, 65276, 1), new Range16.Ptr(65313, 65338, 1), new Range16.Ptr(65345, 65370, 1), new Range16.Ptr(65382, 65470, 1), new Range16.Ptr(65474, 65479, 1), new Range16.Ptr(65482, 65487, 1), new Range16.Ptr(65490, 65495, 1), new Range16.Ptr(65498, 65500, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65536, 65547, 1), new Range32.Ptr(65549, 65574, 1), new Range32.Ptr(65576, 65594, 1), new Range32.Ptr(65596, 65597, 1), new Range32.Ptr(65599, 65613, 1), new Range32.Ptr(65616, 65629, 1), new Range32.Ptr(65664, 65786, 1), new Range32.Ptr(66176, 66204, 1), new Range32.Ptr(66208, 66256, 1), new Range32.Ptr(66304, 66334, 1), new Range32.Ptr(66352, 66368, 1), new Range32.Ptr(66370, 66377, 1), new Range32.Ptr(66432, 66461, 1), new Range32.Ptr(66464, 66499, 1), new Range32.Ptr(66504, 66511, 1), new Range32.Ptr(66560, 66717, 1), new Range32.Ptr(67584, 67589, 1), new Range32.Ptr(67592, 67594, 2), new Range32.Ptr(67595, 67637, 1), new Range32.Ptr(67639, 67640, 1), new Range32.Ptr(67644, 67647, 3), new Range32.Ptr(67648, 67669, 1), new Range32.Ptr(67840, 67861, 1), new Range32.Ptr(67872, 67897, 1), new Range32.Ptr(67968, 68023, 1), new Range32.Ptr(68030, 68031, 1), new Range32.Ptr(68096, 68112, 16), new Range32.Ptr(68113, 68115, 1), new Range32.Ptr(68117, 68119, 1), new Range32.Ptr(68121, 68147, 1), new Range32.Ptr(68192, 68220, 1), new Range32.Ptr(68352, 68405, 1), new Range32.Ptr(68416, 68437, 1), new Range32.Ptr(68448, 68466, 1), new Range32.Ptr(68608, 68680, 1), new Range32.Ptr(69635, 69687, 1), new Range32.Ptr(69763, 69807, 1), new Range32.Ptr(69840, 69864, 1), new Range32.Ptr(69891, 69926, 1), new Range32.Ptr(70019, 70066, 1), new Range32.Ptr(70081, 70084, 1), new Range32.Ptr(71296, 71338, 1), new Range32.Ptr(73728, 74606, 1), new Range32.Ptr(77824, 78894, 1), new Range32.Ptr(92160, 92728, 1), new Range32.Ptr(93952, 94020, 1), new Range32.Ptr(94032, 94099, 67), new Range32.Ptr(94100, 94111, 1), new Range32.Ptr(110592, 110593, 1), new Range32.Ptr(119808, 119892, 1), new Range32.Ptr(119894, 119964, 1), new Range32.Ptr(119966, 119967, 1), new Range32.Ptr(119970, 119973, 3), new Range32.Ptr(119974, 119977, 3), new Range32.Ptr(119978, 119980, 1), new Range32.Ptr(119982, 119993, 1), new Range32.Ptr(119995, 119997, 2), new Range32.Ptr(119998, 120003, 1), new Range32.Ptr(120005, 120069, 1), new Range32.Ptr(120071, 120074, 1), new Range32.Ptr(120077, 120084, 1), new Range32.Ptr(120086, 120092, 1), new Range32.Ptr(120094, 120121, 1), new Range32.Ptr(120123, 120126, 1), new Range32.Ptr(120128, 120132, 1), new Range32.Ptr(120134, 120138, 4), new Range32.Ptr(120139, 120144, 1), new Range32.Ptr(120146, 120485, 1), new Range32.Ptr(120488, 120512, 1), new Range32.Ptr(120514, 120538, 1), new Range32.Ptr(120540, 120570, 1), new Range32.Ptr(120572, 120596, 1), new Range32.Ptr(120598, 120628, 1), new Range32.Ptr(120630, 120654, 1), new Range32.Ptr(120656, 120686, 1), new Range32.Ptr(120688, 120712, 1), new Range32.Ptr(120714, 120744, 1), new Range32.Ptr(120746, 120770, 1), new Range32.Ptr(120772, 120779, 1), new Range32.Ptr(126464, 126467, 1), new Range32.Ptr(126469, 126495, 1), new Range32.Ptr(126497, 126498, 1), new Range32.Ptr(126500, 126503, 3), new Range32.Ptr(126505, 126514, 1), new Range32.Ptr(126516, 126519, 1), new Range32.Ptr(126521, 126523, 2), new Range32.Ptr(126530, 126535, 5), new Range32.Ptr(126537, 126541, 2), new Range32.Ptr(126542, 126543, 1), new Range32.Ptr(126545, 126546, 1), new Range32.Ptr(126548, 126551, 3), new Range32.Ptr(126553, 126561, 2), new Range32.Ptr(126562, 126564, 2), new Range32.Ptr(126567, 126570, 1), new Range32.Ptr(126572, 126578, 1), new Range32.Ptr(126580, 126583, 1), new Range32.Ptr(126585, 126588, 1), new Range32.Ptr(126590, 126592, 2), new Range32.Ptr(126593, 126601, 1), new Range32.Ptr(126603, 126619, 1), new Range32.Ptr(126625, 126627, 1), new Range32.Ptr(126629, 126633, 1), new Range32.Ptr(126635, 126651, 1), new Range32.Ptr(131072, 173782, 1), new Range32.Ptr(173824, 177972, 1), new Range32.Ptr(177984, 178205, 1), new Range32.Ptr(194560, 195101, 1)]), 6);
		go$pkg.L = _L;
		_M = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(768, 879, 1), new Range16.Ptr(1155, 1161, 1), new Range16.Ptr(1425, 1469, 1), new Range16.Ptr(1471, 1473, 2), new Range16.Ptr(1474, 1476, 2), new Range16.Ptr(1477, 1479, 2), new Range16.Ptr(1552, 1562, 1), new Range16.Ptr(1611, 1631, 1), new Range16.Ptr(1648, 1750, 102), new Range16.Ptr(1751, 1756, 1), new Range16.Ptr(1759, 1764, 1), new Range16.Ptr(1767, 1768, 1), new Range16.Ptr(1770, 1773, 1), new Range16.Ptr(1809, 1840, 31), new Range16.Ptr(1841, 1866, 1), new Range16.Ptr(1958, 1968, 1), new Range16.Ptr(2027, 2035, 1), new Range16.Ptr(2070, 2073, 1), new Range16.Ptr(2075, 2083, 1), new Range16.Ptr(2085, 2087, 1), new Range16.Ptr(2089, 2093, 1), new Range16.Ptr(2137, 2139, 1), new Range16.Ptr(2276, 2302, 1), new Range16.Ptr(2304, 2307, 1), new Range16.Ptr(2362, 2364, 1), new Range16.Ptr(2366, 2383, 1), new Range16.Ptr(2385, 2391, 1), new Range16.Ptr(2402, 2403, 1), new Range16.Ptr(2433, 2435, 1), new Range16.Ptr(2492, 2494, 2), new Range16.Ptr(2495, 2500, 1), new Range16.Ptr(2503, 2504, 1), new Range16.Ptr(2507, 2509, 1), new Range16.Ptr(2519, 2530, 11), new Range16.Ptr(2531, 2561, 30), new Range16.Ptr(2562, 2563, 1), new Range16.Ptr(2620, 2622, 2), new Range16.Ptr(2623, 2626, 1), new Range16.Ptr(2631, 2632, 1), new Range16.Ptr(2635, 2637, 1), new Range16.Ptr(2641, 2672, 31), new Range16.Ptr(2673, 2677, 4), new Range16.Ptr(2689, 2691, 1), new Range16.Ptr(2748, 2750, 2), new Range16.Ptr(2751, 2757, 1), new Range16.Ptr(2759, 2761, 1), new Range16.Ptr(2763, 2765, 1), new Range16.Ptr(2786, 2787, 1), new Range16.Ptr(2817, 2819, 1), new Range16.Ptr(2876, 2878, 2), new Range16.Ptr(2879, 2884, 1), new Range16.Ptr(2887, 2888, 1), new Range16.Ptr(2891, 2893, 1), new Range16.Ptr(2902, 2903, 1), new Range16.Ptr(2914, 2915, 1), new Range16.Ptr(2946, 3006, 60), new Range16.Ptr(3007, 3010, 1), new Range16.Ptr(3014, 3016, 1), new Range16.Ptr(3018, 3021, 1), new Range16.Ptr(3031, 3073, 42), new Range16.Ptr(3074, 3075, 1), new Range16.Ptr(3134, 3140, 1), new Range16.Ptr(3142, 3144, 1), new Range16.Ptr(3146, 3149, 1), new Range16.Ptr(3157, 3158, 1), new Range16.Ptr(3170, 3171, 1), new Range16.Ptr(3202, 3203, 1), new Range16.Ptr(3260, 3262, 2), new Range16.Ptr(3263, 3268, 1), new Range16.Ptr(3270, 3272, 1), new Range16.Ptr(3274, 3277, 1), new Range16.Ptr(3285, 3286, 1), new Range16.Ptr(3298, 3299, 1), new Range16.Ptr(3330, 3331, 1), new Range16.Ptr(3390, 3396, 1), new Range16.Ptr(3398, 3400, 1), new Range16.Ptr(3402, 3405, 1), new Range16.Ptr(3415, 3426, 11), new Range16.Ptr(3427, 3458, 31), new Range16.Ptr(3459, 3530, 71), new Range16.Ptr(3535, 3540, 1), new Range16.Ptr(3542, 3544, 2), new Range16.Ptr(3545, 3551, 1), new Range16.Ptr(3570, 3571, 1), new Range16.Ptr(3633, 3636, 3), new Range16.Ptr(3637, 3642, 1), new Range16.Ptr(3655, 3662, 1), new Range16.Ptr(3761, 3764, 3), new Range16.Ptr(3765, 3769, 1), new Range16.Ptr(3771, 3772, 1), new Range16.Ptr(3784, 3789, 1), new Range16.Ptr(3864, 3865, 1), new Range16.Ptr(3893, 3897, 2), new Range16.Ptr(3902, 3903, 1), new Range16.Ptr(3953, 3972, 1), new Range16.Ptr(3974, 3975, 1), new Range16.Ptr(3981, 3991, 1), new Range16.Ptr(3993, 4028, 1), new Range16.Ptr(4038, 4139, 101), new Range16.Ptr(4140, 4158, 1), new Range16.Ptr(4182, 4185, 1), new Range16.Ptr(4190, 4192, 1), new Range16.Ptr(4194, 4196, 1), new Range16.Ptr(4199, 4205, 1), new Range16.Ptr(4209, 4212, 1), new Range16.Ptr(4226, 4237, 1), new Range16.Ptr(4239, 4250, 11), new Range16.Ptr(4251, 4253, 1), new Range16.Ptr(4957, 4959, 1), new Range16.Ptr(5906, 5908, 1), new Range16.Ptr(5938, 5940, 1), new Range16.Ptr(5970, 5971, 1), new Range16.Ptr(6002, 6003, 1), new Range16.Ptr(6068, 6099, 1), new Range16.Ptr(6109, 6155, 46), new Range16.Ptr(6156, 6157, 1), new Range16.Ptr(6313, 6432, 119), new Range16.Ptr(6433, 6443, 1), new Range16.Ptr(6448, 6459, 1), new Range16.Ptr(6576, 6592, 1), new Range16.Ptr(6600, 6601, 1), new Range16.Ptr(6679, 6683, 1), new Range16.Ptr(6741, 6750, 1), new Range16.Ptr(6752, 6780, 1), new Range16.Ptr(6783, 6912, 129), new Range16.Ptr(6913, 6916, 1), new Range16.Ptr(6964, 6980, 1), new Range16.Ptr(7019, 7027, 1), new Range16.Ptr(7040, 7042, 1), new Range16.Ptr(7073, 7085, 1), new Range16.Ptr(7142, 7155, 1), new Range16.Ptr(7204, 7223, 1), new Range16.Ptr(7376, 7378, 1), new Range16.Ptr(7380, 7400, 1), new Range16.Ptr(7405, 7410, 5), new Range16.Ptr(7411, 7412, 1), new Range16.Ptr(7616, 7654, 1), new Range16.Ptr(7676, 7679, 1), new Range16.Ptr(8400, 8432, 1), new Range16.Ptr(11503, 11505, 1), new Range16.Ptr(11647, 11744, 97), new Range16.Ptr(11745, 11775, 1), new Range16.Ptr(12330, 12335, 1), new Range16.Ptr(12441, 12442, 1), new Range16.Ptr(42607, 42610, 1), new Range16.Ptr(42612, 42621, 1), new Range16.Ptr(42655, 42736, 81), new Range16.Ptr(42737, 43010, 273), new Range16.Ptr(43014, 43019, 5), new Range16.Ptr(43043, 43047, 1), new Range16.Ptr(43136, 43137, 1), new Range16.Ptr(43188, 43204, 1), new Range16.Ptr(43232, 43249, 1), new Range16.Ptr(43302, 43309, 1), new Range16.Ptr(43335, 43347, 1), new Range16.Ptr(43392, 43395, 1), new Range16.Ptr(43443, 43456, 1), new Range16.Ptr(43561, 43574, 1), new Range16.Ptr(43587, 43596, 9), new Range16.Ptr(43597, 43643, 46), new Range16.Ptr(43696, 43698, 2), new Range16.Ptr(43699, 43700, 1), new Range16.Ptr(43703, 43704, 1), new Range16.Ptr(43710, 43711, 1), new Range16.Ptr(43713, 43755, 42), new Range16.Ptr(43756, 43759, 1), new Range16.Ptr(43765, 43766, 1), new Range16.Ptr(44003, 44010, 1), new Range16.Ptr(44012, 44013, 1), new Range16.Ptr(64286, 65024, 738), new Range16.Ptr(65025, 65039, 1), new Range16.Ptr(65056, 65062, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66045, 68097, 2052), new Range32.Ptr(68098, 68099, 1), new Range32.Ptr(68101, 68102, 1), new Range32.Ptr(68108, 68111, 1), new Range32.Ptr(68152, 68154, 1), new Range32.Ptr(68159, 69632, 1473), new Range32.Ptr(69633, 69634, 1), new Range32.Ptr(69688, 69702, 1), new Range32.Ptr(69760, 69762, 1), new Range32.Ptr(69808, 69818, 1), new Range32.Ptr(69888, 69890, 1), new Range32.Ptr(69927, 69940, 1), new Range32.Ptr(70016, 70018, 1), new Range32.Ptr(70067, 70080, 1), new Range32.Ptr(71339, 71351, 1), new Range32.Ptr(94033, 94078, 1), new Range32.Ptr(94095, 94098, 1), new Range32.Ptr(119141, 119145, 1), new Range32.Ptr(119149, 119154, 1), new Range32.Ptr(119163, 119170, 1), new Range32.Ptr(119173, 119179, 1), new Range32.Ptr(119210, 119213, 1), new Range32.Ptr(119362, 119364, 1), new Range32.Ptr(917760, 917999, 1)]), 0);
		go$pkg.M = _M;
		_N = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(48, 57, 1), new Range16.Ptr(178, 179, 1), new Range16.Ptr(185, 188, 3), new Range16.Ptr(189, 190, 1), new Range16.Ptr(1632, 1641, 1), new Range16.Ptr(1776, 1785, 1), new Range16.Ptr(1984, 1993, 1), new Range16.Ptr(2406, 2415, 1), new Range16.Ptr(2534, 2543, 1), new Range16.Ptr(2548, 2553, 1), new Range16.Ptr(2662, 2671, 1), new Range16.Ptr(2790, 2799, 1), new Range16.Ptr(2918, 2927, 1), new Range16.Ptr(2930, 2935, 1), new Range16.Ptr(3046, 3058, 1), new Range16.Ptr(3174, 3183, 1), new Range16.Ptr(3192, 3198, 1), new Range16.Ptr(3302, 3311, 1), new Range16.Ptr(3430, 3445, 1), new Range16.Ptr(3664, 3673, 1), new Range16.Ptr(3792, 3801, 1), new Range16.Ptr(3872, 3891, 1), new Range16.Ptr(4160, 4169, 1), new Range16.Ptr(4240, 4249, 1), new Range16.Ptr(4969, 4988, 1), new Range16.Ptr(5870, 5872, 1), new Range16.Ptr(6112, 6121, 1), new Range16.Ptr(6128, 6137, 1), new Range16.Ptr(6160, 6169, 1), new Range16.Ptr(6470, 6479, 1), new Range16.Ptr(6608, 6618, 1), new Range16.Ptr(6784, 6793, 1), new Range16.Ptr(6800, 6809, 1), new Range16.Ptr(6992, 7001, 1), new Range16.Ptr(7088, 7097, 1), new Range16.Ptr(7232, 7241, 1), new Range16.Ptr(7248, 7257, 1), new Range16.Ptr(8304, 8308, 4), new Range16.Ptr(8309, 8313, 1), new Range16.Ptr(8320, 8329, 1), new Range16.Ptr(8528, 8578, 1), new Range16.Ptr(8581, 8585, 1), new Range16.Ptr(9312, 9371, 1), new Range16.Ptr(9450, 9471, 1), new Range16.Ptr(10102, 10131, 1), new Range16.Ptr(11517, 12295, 778), new Range16.Ptr(12321, 12329, 1), new Range16.Ptr(12344, 12346, 1), new Range16.Ptr(12690, 12693, 1), new Range16.Ptr(12832, 12841, 1), new Range16.Ptr(12872, 12879, 1), new Range16.Ptr(12881, 12895, 1), new Range16.Ptr(12928, 12937, 1), new Range16.Ptr(12977, 12991, 1), new Range16.Ptr(42528, 42537, 1), new Range16.Ptr(42726, 42735, 1), new Range16.Ptr(43056, 43061, 1), new Range16.Ptr(43216, 43225, 1), new Range16.Ptr(43264, 43273, 1), new Range16.Ptr(43472, 43481, 1), new Range16.Ptr(43600, 43609, 1), new Range16.Ptr(44016, 44025, 1), new Range16.Ptr(65296, 65305, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65799, 65843, 1), new Range32.Ptr(65856, 65912, 1), new Range32.Ptr(65930, 66336, 406), new Range32.Ptr(66337, 66339, 1), new Range32.Ptr(66369, 66378, 9), new Range32.Ptr(66513, 66517, 1), new Range32.Ptr(66720, 66729, 1), new Range32.Ptr(67672, 67679, 1), new Range32.Ptr(67862, 67867, 1), new Range32.Ptr(68160, 68167, 1), new Range32.Ptr(68221, 68222, 1), new Range32.Ptr(68440, 68447, 1), new Range32.Ptr(68472, 68479, 1), new Range32.Ptr(69216, 69246, 1), new Range32.Ptr(69714, 69743, 1), new Range32.Ptr(69872, 69881, 1), new Range32.Ptr(69942, 69951, 1), new Range32.Ptr(70096, 70105, 1), new Range32.Ptr(71360, 71369, 1), new Range32.Ptr(74752, 74850, 1), new Range32.Ptr(119648, 119665, 1), new Range32.Ptr(120782, 120831, 1), new Range32.Ptr(127232, 127242, 1)]), 4);
		go$pkg.N = _N;
		_P = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(33, 35, 1), new Range16.Ptr(37, 42, 1), new Range16.Ptr(44, 47, 1), new Range16.Ptr(58, 59, 1), new Range16.Ptr(63, 64, 1), new Range16.Ptr(91, 93, 1), new Range16.Ptr(95, 123, 28), new Range16.Ptr(125, 161, 36), new Range16.Ptr(167, 171, 4), new Range16.Ptr(182, 183, 1), new Range16.Ptr(187, 191, 4), new Range16.Ptr(894, 903, 9), new Range16.Ptr(1370, 1375, 1), new Range16.Ptr(1417, 1418, 1), new Range16.Ptr(1470, 1472, 2), new Range16.Ptr(1475, 1478, 3), new Range16.Ptr(1523, 1524, 1), new Range16.Ptr(1545, 1546, 1), new Range16.Ptr(1548, 1549, 1), new Range16.Ptr(1563, 1566, 3), new Range16.Ptr(1567, 1642, 75), new Range16.Ptr(1643, 1645, 1), new Range16.Ptr(1748, 1792, 44), new Range16.Ptr(1793, 1805, 1), new Range16.Ptr(2039, 2041, 1), new Range16.Ptr(2096, 2110, 1), new Range16.Ptr(2142, 2404, 262), new Range16.Ptr(2405, 2416, 11), new Range16.Ptr(2800, 3572, 772), new Range16.Ptr(3663, 3674, 11), new Range16.Ptr(3675, 3844, 169), new Range16.Ptr(3845, 3858, 1), new Range16.Ptr(3860, 3898, 38), new Range16.Ptr(3899, 3901, 1), new Range16.Ptr(3973, 4048, 75), new Range16.Ptr(4049, 4052, 1), new Range16.Ptr(4057, 4058, 1), new Range16.Ptr(4170, 4175, 1), new Range16.Ptr(4347, 4960, 613), new Range16.Ptr(4961, 4968, 1), new Range16.Ptr(5120, 5741, 621), new Range16.Ptr(5742, 5787, 45), new Range16.Ptr(5788, 5867, 79), new Range16.Ptr(5868, 5869, 1), new Range16.Ptr(5941, 5942, 1), new Range16.Ptr(6100, 6102, 1), new Range16.Ptr(6104, 6106, 1), new Range16.Ptr(6144, 6154, 1), new Range16.Ptr(6468, 6469, 1), new Range16.Ptr(6686, 6687, 1), new Range16.Ptr(6816, 6822, 1), new Range16.Ptr(6824, 6829, 1), new Range16.Ptr(7002, 7008, 1), new Range16.Ptr(7164, 7167, 1), new Range16.Ptr(7227, 7231, 1), new Range16.Ptr(7294, 7295, 1), new Range16.Ptr(7360, 7367, 1), new Range16.Ptr(7379, 8208, 829), new Range16.Ptr(8209, 8231, 1), new Range16.Ptr(8240, 8259, 1), new Range16.Ptr(8261, 8273, 1), new Range16.Ptr(8275, 8286, 1), new Range16.Ptr(8317, 8318, 1), new Range16.Ptr(8333, 8334, 1), new Range16.Ptr(9001, 9002, 1), new Range16.Ptr(10088, 10101, 1), new Range16.Ptr(10181, 10182, 1), new Range16.Ptr(10214, 10223, 1), new Range16.Ptr(10627, 10648, 1), new Range16.Ptr(10712, 10715, 1), new Range16.Ptr(10748, 10749, 1), new Range16.Ptr(11513, 11516, 1), new Range16.Ptr(11518, 11519, 1), new Range16.Ptr(11632, 11776, 144), new Range16.Ptr(11777, 11822, 1), new Range16.Ptr(11824, 11835, 1), new Range16.Ptr(12289, 12291, 1), new Range16.Ptr(12296, 12305, 1), new Range16.Ptr(12308, 12319, 1), new Range16.Ptr(12336, 12349, 13), new Range16.Ptr(12448, 12539, 91), new Range16.Ptr(42238, 42239, 1), new Range16.Ptr(42509, 42511, 1), new Range16.Ptr(42611, 42622, 11), new Range16.Ptr(42738, 42743, 1), new Range16.Ptr(43124, 43127, 1), new Range16.Ptr(43214, 43215, 1), new Range16.Ptr(43256, 43258, 1), new Range16.Ptr(43310, 43311, 1), new Range16.Ptr(43359, 43457, 98), new Range16.Ptr(43458, 43469, 1), new Range16.Ptr(43486, 43487, 1), new Range16.Ptr(43612, 43615, 1), new Range16.Ptr(43742, 43743, 1), new Range16.Ptr(43760, 43761, 1), new Range16.Ptr(44011, 64830, 20819), new Range16.Ptr(64831, 65040, 209), new Range16.Ptr(65041, 65049, 1), new Range16.Ptr(65072, 65106, 1), new Range16.Ptr(65108, 65121, 1), new Range16.Ptr(65123, 65128, 5), new Range16.Ptr(65130, 65131, 1), new Range16.Ptr(65281, 65283, 1), new Range16.Ptr(65285, 65290, 1), new Range16.Ptr(65292, 65295, 1), new Range16.Ptr(65306, 65307, 1), new Range16.Ptr(65311, 65312, 1), new Range16.Ptr(65339, 65341, 1), new Range16.Ptr(65343, 65371, 28), new Range16.Ptr(65373, 65375, 2), new Range16.Ptr(65376, 65381, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65792, 65794, 1), new Range32.Ptr(66463, 66512, 49), new Range32.Ptr(67671, 67871, 200), new Range32.Ptr(67903, 68176, 273), new Range32.Ptr(68177, 68184, 1), new Range32.Ptr(68223, 68409, 186), new Range32.Ptr(68410, 68415, 1), new Range32.Ptr(69703, 69709, 1), new Range32.Ptr(69819, 69820, 1), new Range32.Ptr(69822, 69825, 1), new Range32.Ptr(69952, 69955, 1), new Range32.Ptr(70085, 70088, 1), new Range32.Ptr(74864, 74867, 1)]), 11);
		go$pkg.P = _P;
		_S = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(36, 43, 7), new Range16.Ptr(60, 62, 1), new Range16.Ptr(94, 96, 2), new Range16.Ptr(124, 126, 2), new Range16.Ptr(162, 166, 1), new Range16.Ptr(168, 169, 1), new Range16.Ptr(172, 174, 2), new Range16.Ptr(175, 177, 1), new Range16.Ptr(180, 184, 4), new Range16.Ptr(215, 247, 32), new Range16.Ptr(706, 709, 1), new Range16.Ptr(722, 735, 1), new Range16.Ptr(741, 747, 1), new Range16.Ptr(749, 751, 2), new Range16.Ptr(752, 767, 1), new Range16.Ptr(885, 900, 15), new Range16.Ptr(901, 1014, 113), new Range16.Ptr(1154, 1423, 269), new Range16.Ptr(1542, 1544, 1), new Range16.Ptr(1547, 1550, 3), new Range16.Ptr(1551, 1758, 207), new Range16.Ptr(1769, 1789, 20), new Range16.Ptr(1790, 2038, 248), new Range16.Ptr(2546, 2547, 1), new Range16.Ptr(2554, 2555, 1), new Range16.Ptr(2801, 2928, 127), new Range16.Ptr(3059, 3066, 1), new Range16.Ptr(3199, 3449, 250), new Range16.Ptr(3647, 3841, 194), new Range16.Ptr(3842, 3843, 1), new Range16.Ptr(3859, 3861, 2), new Range16.Ptr(3862, 3863, 1), new Range16.Ptr(3866, 3871, 1), new Range16.Ptr(3892, 3896, 2), new Range16.Ptr(4030, 4037, 1), new Range16.Ptr(4039, 4044, 1), new Range16.Ptr(4046, 4047, 1), new Range16.Ptr(4053, 4056, 1), new Range16.Ptr(4254, 4255, 1), new Range16.Ptr(5008, 5017, 1), new Range16.Ptr(6107, 6464, 357), new Range16.Ptr(6622, 6655, 1), new Range16.Ptr(7009, 7018, 1), new Range16.Ptr(7028, 7036, 1), new Range16.Ptr(8125, 8127, 2), new Range16.Ptr(8128, 8129, 1), new Range16.Ptr(8141, 8143, 1), new Range16.Ptr(8157, 8159, 1), new Range16.Ptr(8173, 8175, 1), new Range16.Ptr(8189, 8190, 1), new Range16.Ptr(8260, 8274, 14), new Range16.Ptr(8314, 8316, 1), new Range16.Ptr(8330, 8332, 1), new Range16.Ptr(8352, 8378, 1), new Range16.Ptr(8448, 8449, 1), new Range16.Ptr(8451, 8454, 1), new Range16.Ptr(8456, 8457, 1), new Range16.Ptr(8468, 8470, 2), new Range16.Ptr(8471, 8472, 1), new Range16.Ptr(8478, 8483, 1), new Range16.Ptr(8485, 8489, 2), new Range16.Ptr(8494, 8506, 12), new Range16.Ptr(8507, 8512, 5), new Range16.Ptr(8513, 8516, 1), new Range16.Ptr(8522, 8525, 1), new Range16.Ptr(8527, 8592, 65), new Range16.Ptr(8593, 9000, 1), new Range16.Ptr(9003, 9203, 1), new Range16.Ptr(9216, 9254, 1), new Range16.Ptr(9280, 9290, 1), new Range16.Ptr(9372, 9449, 1), new Range16.Ptr(9472, 9983, 1), new Range16.Ptr(9985, 10087, 1), new Range16.Ptr(10132, 10180, 1), new Range16.Ptr(10183, 10213, 1), new Range16.Ptr(10224, 10626, 1), new Range16.Ptr(10649, 10711, 1), new Range16.Ptr(10716, 10747, 1), new Range16.Ptr(10750, 11084, 1), new Range16.Ptr(11088, 11097, 1), new Range16.Ptr(11493, 11498, 1), new Range16.Ptr(11904, 11929, 1), new Range16.Ptr(11931, 12019, 1), new Range16.Ptr(12032, 12245, 1), new Range16.Ptr(12272, 12283, 1), new Range16.Ptr(12292, 12306, 14), new Range16.Ptr(12307, 12320, 13), new Range16.Ptr(12342, 12343, 1), new Range16.Ptr(12350, 12351, 1), new Range16.Ptr(12443, 12444, 1), new Range16.Ptr(12688, 12689, 1), new Range16.Ptr(12694, 12703, 1), new Range16.Ptr(12736, 12771, 1), new Range16.Ptr(12800, 12830, 1), new Range16.Ptr(12842, 12871, 1), new Range16.Ptr(12880, 12896, 16), new Range16.Ptr(12897, 12927, 1), new Range16.Ptr(12938, 12976, 1), new Range16.Ptr(12992, 13054, 1), new Range16.Ptr(13056, 13311, 1), new Range16.Ptr(19904, 19967, 1), new Range16.Ptr(42128, 42182, 1), new Range16.Ptr(42752, 42774, 1), new Range16.Ptr(42784, 42785, 1), new Range16.Ptr(42889, 42890, 1), new Range16.Ptr(43048, 43051, 1), new Range16.Ptr(43062, 43065, 1), new Range16.Ptr(43639, 43641, 1), new Range16.Ptr(64297, 64434, 137), new Range16.Ptr(64435, 64449, 1), new Range16.Ptr(65020, 65021, 1), new Range16.Ptr(65122, 65124, 2), new Range16.Ptr(65125, 65126, 1), new Range16.Ptr(65129, 65284, 155), new Range16.Ptr(65291, 65308, 17), new Range16.Ptr(65309, 65310, 1), new Range16.Ptr(65342, 65344, 2), new Range16.Ptr(65372, 65374, 2), new Range16.Ptr(65504, 65510, 1), new Range16.Ptr(65512, 65518, 1), new Range16.Ptr(65532, 65533, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(65847, 65855, 1), new Range32.Ptr(65913, 65929, 1), new Range32.Ptr(65936, 65947, 1), new Range32.Ptr(66000, 66044, 1), new Range32.Ptr(118784, 119029, 1), new Range32.Ptr(119040, 119078, 1), new Range32.Ptr(119081, 119140, 1), new Range32.Ptr(119146, 119148, 1), new Range32.Ptr(119171, 119172, 1), new Range32.Ptr(119180, 119209, 1), new Range32.Ptr(119214, 119261, 1), new Range32.Ptr(119296, 119361, 1), new Range32.Ptr(119365, 119552, 187), new Range32.Ptr(119553, 119638, 1), new Range32.Ptr(120513, 120539, 26), new Range32.Ptr(120571, 120597, 26), new Range32.Ptr(120629, 120655, 26), new Range32.Ptr(120687, 120713, 26), new Range32.Ptr(120745, 120771, 26), new Range32.Ptr(126704, 126705, 1), new Range32.Ptr(126976, 127019, 1), new Range32.Ptr(127024, 127123, 1), new Range32.Ptr(127136, 127150, 1), new Range32.Ptr(127153, 127166, 1), new Range32.Ptr(127169, 127183, 1), new Range32.Ptr(127185, 127199, 1), new Range32.Ptr(127248, 127278, 1), new Range32.Ptr(127280, 127339, 1), new Range32.Ptr(127344, 127386, 1), new Range32.Ptr(127462, 127490, 1), new Range32.Ptr(127504, 127546, 1), new Range32.Ptr(127552, 127560, 1), new Range32.Ptr(127568, 127569, 1), new Range32.Ptr(127744, 127776, 1), new Range32.Ptr(127792, 127797, 1), new Range32.Ptr(127799, 127868, 1), new Range32.Ptr(127872, 127891, 1), new Range32.Ptr(127904, 127940, 1), new Range32.Ptr(127942, 127946, 1), new Range32.Ptr(127968, 127984, 1), new Range32.Ptr(128000, 128062, 1), new Range32.Ptr(128064, 128066, 2), new Range32.Ptr(128067, 128247, 1), new Range32.Ptr(128249, 128252, 1), new Range32.Ptr(128256, 128317, 1), new Range32.Ptr(128320, 128323, 1), new Range32.Ptr(128336, 128359, 1), new Range32.Ptr(128507, 128576, 1), new Range32.Ptr(128581, 128591, 1), new Range32.Ptr(128640, 128709, 1), new Range32.Ptr(128768, 128883, 1)]), 10);
		go$pkg.S = _S;
		go$pkg.PrintRanges = new (go$sliceType((go$ptrType(RangeTable))))([go$pkg.L, go$pkg.M, go$pkg.N, go$pkg.P, go$pkg.S]);
		_Nd = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(48, 57, 1), new Range16.Ptr(1632, 1641, 1), new Range16.Ptr(1776, 1785, 1), new Range16.Ptr(1984, 1993, 1), new Range16.Ptr(2406, 2415, 1), new Range16.Ptr(2534, 2543, 1), new Range16.Ptr(2662, 2671, 1), new Range16.Ptr(2790, 2799, 1), new Range16.Ptr(2918, 2927, 1), new Range16.Ptr(3046, 3055, 1), new Range16.Ptr(3174, 3183, 1), new Range16.Ptr(3302, 3311, 1), new Range16.Ptr(3430, 3439, 1), new Range16.Ptr(3664, 3673, 1), new Range16.Ptr(3792, 3801, 1), new Range16.Ptr(3872, 3881, 1), new Range16.Ptr(4160, 4169, 1), new Range16.Ptr(4240, 4249, 1), new Range16.Ptr(6112, 6121, 1), new Range16.Ptr(6160, 6169, 1), new Range16.Ptr(6470, 6479, 1), new Range16.Ptr(6608, 6617, 1), new Range16.Ptr(6784, 6793, 1), new Range16.Ptr(6800, 6809, 1), new Range16.Ptr(6992, 7001, 1), new Range16.Ptr(7088, 7097, 1), new Range16.Ptr(7232, 7241, 1), new Range16.Ptr(7248, 7257, 1), new Range16.Ptr(42528, 42537, 1), new Range16.Ptr(43216, 43225, 1), new Range16.Ptr(43264, 43273, 1), new Range16.Ptr(43472, 43481, 1), new Range16.Ptr(43600, 43609, 1), new Range16.Ptr(44016, 44025, 1), new Range16.Ptr(65296, 65305, 1)]), new (go$sliceType(Range32))([new Range32.Ptr(66720, 66729, 1), new Range32.Ptr(69734, 69743, 1), new Range32.Ptr(69872, 69881, 1), new Range32.Ptr(69942, 69951, 1), new Range32.Ptr(70096, 70105, 1), new Range32.Ptr(71360, 71369, 1), new Range32.Ptr(120782, 120831, 1)]), 1);
		go$pkg.Digit = _Nd;
		go$pkg.Letter = _L;
		_White_Space = new RangeTable.Ptr(new (go$sliceType(Range16))([new Range16.Ptr(9, 13, 1), new Range16.Ptr(32, 32, 1), new Range16.Ptr(133, 133, 1), new Range16.Ptr(160, 160, 1), new Range16.Ptr(5760, 5760, 1), new Range16.Ptr(6158, 6158, 1), new Range16.Ptr(8192, 8202, 1), new Range16.Ptr(8232, 8233, 1), new Range16.Ptr(8239, 8239, 1), new Range16.Ptr(8287, 8287, 1), new Range16.Ptr(12288, 12288, 1)]), (go$sliceType(Range32)).nil, 4);
		go$pkg.White_Space = _White_Space;
		_CaseRanges = new (go$sliceType(CaseRange))([new CaseRange.Ptr(65, 90, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(97, 122, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(181, 181, go$toNativeArray("Int32", [743, 0, 743])), new CaseRange.Ptr(192, 214, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(216, 222, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(224, 246, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(248, 254, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(255, 255, go$toNativeArray("Int32", [121, 0, 121])), new CaseRange.Ptr(256, 303, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(304, 304, go$toNativeArray("Int32", [0, -199, 0])), new CaseRange.Ptr(305, 305, go$toNativeArray("Int32", [-232, 0, -232])), new CaseRange.Ptr(306, 311, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(313, 328, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(330, 375, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(376, 376, go$toNativeArray("Int32", [0, -121, 0])), new CaseRange.Ptr(377, 382, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(383, 383, go$toNativeArray("Int32", [-300, 0, -300])), new CaseRange.Ptr(384, 384, go$toNativeArray("Int32", [195, 0, 195])), new CaseRange.Ptr(385, 385, go$toNativeArray("Int32", [0, 210, 0])), new CaseRange.Ptr(386, 389, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(390, 390, go$toNativeArray("Int32", [0, 206, 0])), new CaseRange.Ptr(391, 392, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(393, 394, go$toNativeArray("Int32", [0, 205, 0])), new CaseRange.Ptr(395, 396, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(398, 398, go$toNativeArray("Int32", [0, 79, 0])), new CaseRange.Ptr(399, 399, go$toNativeArray("Int32", [0, 202, 0])), new CaseRange.Ptr(400, 400, go$toNativeArray("Int32", [0, 203, 0])), new CaseRange.Ptr(401, 402, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(403, 403, go$toNativeArray("Int32", [0, 205, 0])), new CaseRange.Ptr(404, 404, go$toNativeArray("Int32", [0, 207, 0])), new CaseRange.Ptr(405, 405, go$toNativeArray("Int32", [97, 0, 97])), new CaseRange.Ptr(406, 406, go$toNativeArray("Int32", [0, 211, 0])), new CaseRange.Ptr(407, 407, go$toNativeArray("Int32", [0, 209, 0])), new CaseRange.Ptr(408, 409, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(410, 410, go$toNativeArray("Int32", [163, 0, 163])), new CaseRange.Ptr(412, 412, go$toNativeArray("Int32", [0, 211, 0])), new CaseRange.Ptr(413, 413, go$toNativeArray("Int32", [0, 213, 0])), new CaseRange.Ptr(414, 414, go$toNativeArray("Int32", [130, 0, 130])), new CaseRange.Ptr(415, 415, go$toNativeArray("Int32", [0, 214, 0])), new CaseRange.Ptr(416, 421, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(422, 422, go$toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(423, 424, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(425, 425, go$toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(428, 429, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(430, 430, go$toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(431, 432, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(433, 434, go$toNativeArray("Int32", [0, 217, 0])), new CaseRange.Ptr(435, 438, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(439, 439, go$toNativeArray("Int32", [0, 219, 0])), new CaseRange.Ptr(440, 441, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(444, 445, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(447, 447, go$toNativeArray("Int32", [56, 0, 56])), new CaseRange.Ptr(452, 452, go$toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(453, 453, go$toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(454, 454, go$toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(455, 455, go$toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(456, 456, go$toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(457, 457, go$toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(458, 458, go$toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(459, 459, go$toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(460, 460, go$toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(461, 476, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(477, 477, go$toNativeArray("Int32", [-79, 0, -79])), new CaseRange.Ptr(478, 495, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(497, 497, go$toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(498, 498, go$toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(499, 499, go$toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(500, 501, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(502, 502, go$toNativeArray("Int32", [0, -97, 0])), new CaseRange.Ptr(503, 503, go$toNativeArray("Int32", [0, -56, 0])), new CaseRange.Ptr(504, 543, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(544, 544, go$toNativeArray("Int32", [0, -130, 0])), new CaseRange.Ptr(546, 563, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(570, 570, go$toNativeArray("Int32", [0, 10795, 0])), new CaseRange.Ptr(571, 572, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(573, 573, go$toNativeArray("Int32", [0, -163, 0])), new CaseRange.Ptr(574, 574, go$toNativeArray("Int32", [0, 10792, 0])), new CaseRange.Ptr(575, 576, go$toNativeArray("Int32", [10815, 0, 10815])), new CaseRange.Ptr(577, 578, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(579, 579, go$toNativeArray("Int32", [0, -195, 0])), new CaseRange.Ptr(580, 580, go$toNativeArray("Int32", [0, 69, 0])), new CaseRange.Ptr(581, 581, go$toNativeArray("Int32", [0, 71, 0])), new CaseRange.Ptr(582, 591, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(592, 592, go$toNativeArray("Int32", [10783, 0, 10783])), new CaseRange.Ptr(593, 593, go$toNativeArray("Int32", [10780, 0, 10780])), new CaseRange.Ptr(594, 594, go$toNativeArray("Int32", [10782, 0, 10782])), new CaseRange.Ptr(595, 595, go$toNativeArray("Int32", [-210, 0, -210])), new CaseRange.Ptr(596, 596, go$toNativeArray("Int32", [-206, 0, -206])), new CaseRange.Ptr(598, 599, go$toNativeArray("Int32", [-205, 0, -205])), new CaseRange.Ptr(601, 601, go$toNativeArray("Int32", [-202, 0, -202])), new CaseRange.Ptr(603, 603, go$toNativeArray("Int32", [-203, 0, -203])), new CaseRange.Ptr(608, 608, go$toNativeArray("Int32", [-205, 0, -205])), new CaseRange.Ptr(611, 611, go$toNativeArray("Int32", [-207, 0, -207])), new CaseRange.Ptr(613, 613, go$toNativeArray("Int32", [42280, 0, 42280])), new CaseRange.Ptr(614, 614, go$toNativeArray("Int32", [42308, 0, 42308])), new CaseRange.Ptr(616, 616, go$toNativeArray("Int32", [-209, 0, -209])), new CaseRange.Ptr(617, 617, go$toNativeArray("Int32", [-211, 0, -211])), new CaseRange.Ptr(619, 619, go$toNativeArray("Int32", [10743, 0, 10743])), new CaseRange.Ptr(623, 623, go$toNativeArray("Int32", [-211, 0, -211])), new CaseRange.Ptr(625, 625, go$toNativeArray("Int32", [10749, 0, 10749])), new CaseRange.Ptr(626, 626, go$toNativeArray("Int32", [-213, 0, -213])), new CaseRange.Ptr(629, 629, go$toNativeArray("Int32", [-214, 0, -214])), new CaseRange.Ptr(637, 637, go$toNativeArray("Int32", [10727, 0, 10727])), new CaseRange.Ptr(640, 640, go$toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(643, 643, go$toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(648, 648, go$toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(649, 649, go$toNativeArray("Int32", [-69, 0, -69])), new CaseRange.Ptr(650, 651, go$toNativeArray("Int32", [-217, 0, -217])), new CaseRange.Ptr(652, 652, go$toNativeArray("Int32", [-71, 0, -71])), new CaseRange.Ptr(658, 658, go$toNativeArray("Int32", [-219, 0, -219])), new CaseRange.Ptr(837, 837, go$toNativeArray("Int32", [84, 0, 84])), new CaseRange.Ptr(880, 883, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(886, 887, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(891, 893, go$toNativeArray("Int32", [130, 0, 130])), new CaseRange.Ptr(902, 902, go$toNativeArray("Int32", [0, 38, 0])), new CaseRange.Ptr(904, 906, go$toNativeArray("Int32", [0, 37, 0])), new CaseRange.Ptr(908, 908, go$toNativeArray("Int32", [0, 64, 0])), new CaseRange.Ptr(910, 911, go$toNativeArray("Int32", [0, 63, 0])), new CaseRange.Ptr(913, 929, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(931, 939, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(940, 940, go$toNativeArray("Int32", [-38, 0, -38])), new CaseRange.Ptr(941, 943, go$toNativeArray("Int32", [-37, 0, -37])), new CaseRange.Ptr(945, 961, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(962, 962, go$toNativeArray("Int32", [-31, 0, -31])), new CaseRange.Ptr(963, 971, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(972, 972, go$toNativeArray("Int32", [-64, 0, -64])), new CaseRange.Ptr(973, 974, go$toNativeArray("Int32", [-63, 0, -63])), new CaseRange.Ptr(975, 975, go$toNativeArray("Int32", [0, 8, 0])), new CaseRange.Ptr(976, 976, go$toNativeArray("Int32", [-62, 0, -62])), new CaseRange.Ptr(977, 977, go$toNativeArray("Int32", [-57, 0, -57])), new CaseRange.Ptr(981, 981, go$toNativeArray("Int32", [-47, 0, -47])), new CaseRange.Ptr(982, 982, go$toNativeArray("Int32", [-54, 0, -54])), new CaseRange.Ptr(983, 983, go$toNativeArray("Int32", [-8, 0, -8])), new CaseRange.Ptr(984, 1007, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1008, 1008, go$toNativeArray("Int32", [-86, 0, -86])), new CaseRange.Ptr(1009, 1009, go$toNativeArray("Int32", [-80, 0, -80])), new CaseRange.Ptr(1010, 1010, go$toNativeArray("Int32", [7, 0, 7])), new CaseRange.Ptr(1012, 1012, go$toNativeArray("Int32", [0, -60, 0])), new CaseRange.Ptr(1013, 1013, go$toNativeArray("Int32", [-96, 0, -96])), new CaseRange.Ptr(1015, 1016, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1017, 1017, go$toNativeArray("Int32", [0, -7, 0])), new CaseRange.Ptr(1018, 1019, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1021, 1023, go$toNativeArray("Int32", [0, -130, 0])), new CaseRange.Ptr(1024, 1039, go$toNativeArray("Int32", [0, 80, 0])), new CaseRange.Ptr(1040, 1071, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(1072, 1103, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(1104, 1119, go$toNativeArray("Int32", [-80, 0, -80])), new CaseRange.Ptr(1120, 1153, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1162, 1215, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1216, 1216, go$toNativeArray("Int32", [0, 15, 0])), new CaseRange.Ptr(1217, 1230, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1231, 1231, go$toNativeArray("Int32", [-15, 0, -15])), new CaseRange.Ptr(1232, 1319, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1329, 1366, go$toNativeArray("Int32", [0, 48, 0])), new CaseRange.Ptr(1377, 1414, go$toNativeArray("Int32", [-48, 0, -48])), new CaseRange.Ptr(4256, 4293, go$toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(4295, 4295, go$toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(4301, 4301, go$toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(7545, 7545, go$toNativeArray("Int32", [35332, 0, 35332])), new CaseRange.Ptr(7549, 7549, go$toNativeArray("Int32", [3814, 0, 3814])), new CaseRange.Ptr(7680, 7829, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(7835, 7835, go$toNativeArray("Int32", [-59, 0, -59])), new CaseRange.Ptr(7838, 7838, go$toNativeArray("Int32", [0, -7615, 0])), new CaseRange.Ptr(7840, 7935, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(7936, 7943, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7944, 7951, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7952, 7957, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7960, 7965, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7968, 7975, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7976, 7983, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7984, 7991, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7992, 7999, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8000, 8005, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8008, 8013, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8017, 8017, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8019, 8019, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8021, 8021, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8023, 8023, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8025, 8025, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8027, 8027, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8029, 8029, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8031, 8031, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8032, 8039, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8040, 8047, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8048, 8049, go$toNativeArray("Int32", [74, 0, 74])), new CaseRange.Ptr(8050, 8053, go$toNativeArray("Int32", [86, 0, 86])), new CaseRange.Ptr(8054, 8055, go$toNativeArray("Int32", [100, 0, 100])), new CaseRange.Ptr(8056, 8057, go$toNativeArray("Int32", [128, 0, 128])), new CaseRange.Ptr(8058, 8059, go$toNativeArray("Int32", [112, 0, 112])), new CaseRange.Ptr(8060, 8061, go$toNativeArray("Int32", [126, 0, 126])), new CaseRange.Ptr(8064, 8071, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8072, 8079, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8080, 8087, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8088, 8095, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8096, 8103, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8104, 8111, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8112, 8113, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8115, 8115, go$toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8120, 8121, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8122, 8123, go$toNativeArray("Int32", [0, -74, 0])), new CaseRange.Ptr(8124, 8124, go$toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8126, 8126, go$toNativeArray("Int32", [-7205, 0, -7205])), new CaseRange.Ptr(8131, 8131, go$toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8136, 8139, go$toNativeArray("Int32", [0, -86, 0])), new CaseRange.Ptr(8140, 8140, go$toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8144, 8145, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8152, 8153, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8154, 8155, go$toNativeArray("Int32", [0, -100, 0])), new CaseRange.Ptr(8160, 8161, go$toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8165, 8165, go$toNativeArray("Int32", [7, 0, 7])), new CaseRange.Ptr(8168, 8169, go$toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8170, 8171, go$toNativeArray("Int32", [0, -112, 0])), new CaseRange.Ptr(8172, 8172, go$toNativeArray("Int32", [0, -7, 0])), new CaseRange.Ptr(8179, 8179, go$toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8184, 8185, go$toNativeArray("Int32", [0, -128, 0])), new CaseRange.Ptr(8186, 8187, go$toNativeArray("Int32", [0, -126, 0])), new CaseRange.Ptr(8188, 8188, go$toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8486, 8486, go$toNativeArray("Int32", [0, -7517, 0])), new CaseRange.Ptr(8490, 8490, go$toNativeArray("Int32", [0, -8383, 0])), new CaseRange.Ptr(8491, 8491, go$toNativeArray("Int32", [0, -8262, 0])), new CaseRange.Ptr(8498, 8498, go$toNativeArray("Int32", [0, 28, 0])), new CaseRange.Ptr(8526, 8526, go$toNativeArray("Int32", [-28, 0, -28])), new CaseRange.Ptr(8544, 8559, go$toNativeArray("Int32", [0, 16, 0])), new CaseRange.Ptr(8560, 8575, go$toNativeArray("Int32", [-16, 0, -16])), new CaseRange.Ptr(8579, 8580, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(9398, 9423, go$toNativeArray("Int32", [0, 26, 0])), new CaseRange.Ptr(9424, 9449, go$toNativeArray("Int32", [-26, 0, -26])), new CaseRange.Ptr(11264, 11310, go$toNativeArray("Int32", [0, 48, 0])), new CaseRange.Ptr(11312, 11358, go$toNativeArray("Int32", [-48, 0, -48])), new CaseRange.Ptr(11360, 11361, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11362, 11362, go$toNativeArray("Int32", [0, -10743, 0])), new CaseRange.Ptr(11363, 11363, go$toNativeArray("Int32", [0, -3814, 0])), new CaseRange.Ptr(11364, 11364, go$toNativeArray("Int32", [0, -10727, 0])), new CaseRange.Ptr(11365, 11365, go$toNativeArray("Int32", [-10795, 0, -10795])), new CaseRange.Ptr(11366, 11366, go$toNativeArray("Int32", [-10792, 0, -10792])), new CaseRange.Ptr(11367, 11372, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11373, 11373, go$toNativeArray("Int32", [0, -10780, 0])), new CaseRange.Ptr(11374, 11374, go$toNativeArray("Int32", [0, -10749, 0])), new CaseRange.Ptr(11375, 11375, go$toNativeArray("Int32", [0, -10783, 0])), new CaseRange.Ptr(11376, 11376, go$toNativeArray("Int32", [0, -10782, 0])), new CaseRange.Ptr(11378, 11379, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11381, 11382, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11390, 11391, go$toNativeArray("Int32", [0, -10815, 0])), new CaseRange.Ptr(11392, 11491, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11499, 11502, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11506, 11507, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11520, 11557, go$toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(11559, 11559, go$toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(11565, 11565, go$toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(42560, 42605, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42624, 42647, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42786, 42799, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42802, 42863, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42873, 42876, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42877, 42877, go$toNativeArray("Int32", [0, -35332, 0])), new CaseRange.Ptr(42878, 42887, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42891, 42892, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42893, 42893, go$toNativeArray("Int32", [0, -42280, 0])), new CaseRange.Ptr(42896, 42899, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42912, 42921, go$toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42922, 42922, go$toNativeArray("Int32", [0, -42308, 0])), new CaseRange.Ptr(65313, 65338, go$toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(65345, 65370, go$toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(66560, 66599, go$toNativeArray("Int32", [0, 40, 0])), new CaseRange.Ptr(66600, 66639, go$toNativeArray("Int32", [-40, 0, -40]))]);
		go$pkg.CaseRanges = _CaseRanges;
		properties = go$toNativeArray("Uint8", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		caseOrbit = new (go$sliceType(foldPair))([new foldPair.Ptr(75, 107), new foldPair.Ptr(83, 115), new foldPair.Ptr(107, 8490), new foldPair.Ptr(115, 383), new foldPair.Ptr(181, 924), new foldPair.Ptr(197, 229), new foldPair.Ptr(223, 7838), new foldPair.Ptr(229, 8491), new foldPair.Ptr(304, 304), new foldPair.Ptr(305, 305), new foldPair.Ptr(383, 83), new foldPair.Ptr(452, 453), new foldPair.Ptr(453, 454), new foldPair.Ptr(454, 452), new foldPair.Ptr(455, 456), new foldPair.Ptr(456, 457), new foldPair.Ptr(457, 455), new foldPair.Ptr(458, 459), new foldPair.Ptr(459, 460), new foldPair.Ptr(460, 458), new foldPair.Ptr(497, 498), new foldPair.Ptr(498, 499), new foldPair.Ptr(499, 497), new foldPair.Ptr(837, 921), new foldPair.Ptr(914, 946), new foldPair.Ptr(917, 949), new foldPair.Ptr(920, 952), new foldPair.Ptr(921, 953), new foldPair.Ptr(922, 954), new foldPair.Ptr(924, 956), new foldPair.Ptr(928, 960), new foldPair.Ptr(929, 961), new foldPair.Ptr(931, 962), new foldPair.Ptr(934, 966), new foldPair.Ptr(937, 969), new foldPair.Ptr(946, 976), new foldPair.Ptr(949, 1013), new foldPair.Ptr(952, 977), new foldPair.Ptr(953, 8126), new foldPair.Ptr(954, 1008), new foldPair.Ptr(956, 181), new foldPair.Ptr(960, 982), new foldPair.Ptr(961, 1009), new foldPair.Ptr(962, 963), new foldPair.Ptr(963, 931), new foldPair.Ptr(966, 981), new foldPair.Ptr(969, 8486), new foldPair.Ptr(976, 914), new foldPair.Ptr(977, 1012), new foldPair.Ptr(981, 934), new foldPair.Ptr(982, 928), new foldPair.Ptr(1008, 922), new foldPair.Ptr(1009, 929), new foldPair.Ptr(1012, 920), new foldPair.Ptr(1013, 917), new foldPair.Ptr(7776, 7777), new foldPair.Ptr(7777, 7835), new foldPair.Ptr(7835, 7776), new foldPair.Ptr(7838, 223), new foldPair.Ptr(8126, 837), new foldPair.Ptr(8486, 937), new foldPair.Ptr(8490, 75), new foldPair.Ptr(8491, 197)]);
	}
	return go$pkg;
})();
go$packages["unicode/utf8"] = (function() {
	var go$pkg = {}, decodeRuneInternal, decodeRuneInStringInternal, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, RuneLen, EncodeRune, RuneCountInString, RuneStart;
	decodeRuneInternal = function(p) {
		var r, size, short$1, n, _tuple, _slice, _index, c0, _tuple$1, _tuple$2, _tuple$3, _slice$1, _index$1, c1, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _slice$2, _index$2, c2, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _slice$3, _index$3, c3, _tuple$13, _tuple$14, _tuple$15, _tuple$16;
		r = 0;
		size = 0;
		short$1 = false;
		n = p.length;
		if (n < 1) {
			_tuple = [65533, 0, true]; r = _tuple[0]; size = _tuple[1]; short$1 = _tuple[2];
			return [r, size, short$1];
		}
		c0 = (_slice = p, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (c0 < 128) {
			_tuple$1 = [(c0 >> 0), 1, false]; r = _tuple$1[0]; size = _tuple$1[1]; short$1 = _tuple$1[2];
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tuple$2 = [65533, 1, false]; r = _tuple$2[0]; size = _tuple$2[1]; short$1 = _tuple$2[2];
			return [r, size, short$1];
		}
		if (n < 2) {
			_tuple$3 = [65533, 1, true]; r = _tuple$3[0]; size = _tuple$3[1]; short$1 = _tuple$3[2];
			return [r, size, short$1];
		}
		c1 = (_slice$1 = p, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		if (c1 < 128 || 192 <= c1) {
			_tuple$4 = [65533, 1, false]; r = _tuple$4[0]; size = _tuple$4[1]; short$1 = _tuple$4[2];
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tuple$5 = [65533, 1, false]; r = _tuple$5[0]; size = _tuple$5[1]; short$1 = _tuple$5[2];
				return [r, size, short$1];
			}
			_tuple$6 = [r, 2, false]; r = _tuple$6[0]; size = _tuple$6[1]; short$1 = _tuple$6[2];
			return [r, size, short$1];
		}
		if (n < 3) {
			_tuple$7 = [65533, 1, true]; r = _tuple$7[0]; size = _tuple$7[1]; short$1 = _tuple$7[2];
			return [r, size, short$1];
		}
		c2 = (_slice$2 = p, _index$2 = 2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
		if (c2 < 128 || 192 <= c2) {
			_tuple$8 = [65533, 1, false]; r = _tuple$8[0]; size = _tuple$8[1]; short$1 = _tuple$8[2];
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tuple$9 = [65533, 1, false]; r = _tuple$9[0]; size = _tuple$9[1]; short$1 = _tuple$9[2];
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tuple$10 = [65533, 1, false]; r = _tuple$10[0]; size = _tuple$10[1]; short$1 = _tuple$10[2];
				return [r, size, short$1];
			}
			_tuple$11 = [r, 3, false]; r = _tuple$11[0]; size = _tuple$11[1]; short$1 = _tuple$11[2];
			return [r, size, short$1];
		}
		if (n < 4) {
			_tuple$12 = [65533, 1, true]; r = _tuple$12[0]; size = _tuple$12[1]; short$1 = _tuple$12[2];
			return [r, size, short$1];
		}
		c3 = (_slice$3 = p, _index$3 = 3, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
		if (c3 < 128 || 192 <= c3) {
			_tuple$13 = [65533, 1, false]; r = _tuple$13[0]; size = _tuple$13[1]; short$1 = _tuple$13[2];
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tuple$14 = [65533, 1, false]; r = _tuple$14[0]; size = _tuple$14[1]; short$1 = _tuple$14[2];
				return [r, size, short$1];
			}
			_tuple$15 = [r, 4, false]; r = _tuple$15[0]; size = _tuple$15[1]; short$1 = _tuple$15[2];
			return [r, size, short$1];
		}
		_tuple$16 = [65533, 1, false]; r = _tuple$16[0]; size = _tuple$16[1]; short$1 = _tuple$16[2];
		return [r, size, short$1];
	};
	decodeRuneInStringInternal = function(s) {
		var r, size, short$1, n, _tuple, c0, _tuple$1, _tuple$2, _tuple$3, c1, _tuple$4, _tuple$5, _tuple$6, _tuple$7, c2, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, c3, _tuple$13, _tuple$14, _tuple$15, _tuple$16;
		r = 0;
		size = 0;
		short$1 = false;
		n = s.length;
		if (n < 1) {
			_tuple = [65533, 0, true]; r = _tuple[0]; size = _tuple[1]; short$1 = _tuple[2];
			return [r, size, short$1];
		}
		c0 = s.charCodeAt(0);
		if (c0 < 128) {
			_tuple$1 = [(c0 >> 0), 1, false]; r = _tuple$1[0]; size = _tuple$1[1]; short$1 = _tuple$1[2];
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tuple$2 = [65533, 1, false]; r = _tuple$2[0]; size = _tuple$2[1]; short$1 = _tuple$2[2];
			return [r, size, short$1];
		}
		if (n < 2) {
			_tuple$3 = [65533, 1, true]; r = _tuple$3[0]; size = _tuple$3[1]; short$1 = _tuple$3[2];
			return [r, size, short$1];
		}
		c1 = s.charCodeAt(1);
		if (c1 < 128 || 192 <= c1) {
			_tuple$4 = [65533, 1, false]; r = _tuple$4[0]; size = _tuple$4[1]; short$1 = _tuple$4[2];
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tuple$5 = [65533, 1, false]; r = _tuple$5[0]; size = _tuple$5[1]; short$1 = _tuple$5[2];
				return [r, size, short$1];
			}
			_tuple$6 = [r, 2, false]; r = _tuple$6[0]; size = _tuple$6[1]; short$1 = _tuple$6[2];
			return [r, size, short$1];
		}
		if (n < 3) {
			_tuple$7 = [65533, 1, true]; r = _tuple$7[0]; size = _tuple$7[1]; short$1 = _tuple$7[2];
			return [r, size, short$1];
		}
		c2 = s.charCodeAt(2);
		if (c2 < 128 || 192 <= c2) {
			_tuple$8 = [65533, 1, false]; r = _tuple$8[0]; size = _tuple$8[1]; short$1 = _tuple$8[2];
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tuple$9 = [65533, 1, false]; r = _tuple$9[0]; size = _tuple$9[1]; short$1 = _tuple$9[2];
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tuple$10 = [65533, 1, false]; r = _tuple$10[0]; size = _tuple$10[1]; short$1 = _tuple$10[2];
				return [r, size, short$1];
			}
			_tuple$11 = [r, 3, false]; r = _tuple$11[0]; size = _tuple$11[1]; short$1 = _tuple$11[2];
			return [r, size, short$1];
		}
		if (n < 4) {
			_tuple$12 = [65533, 1, true]; r = _tuple$12[0]; size = _tuple$12[1]; short$1 = _tuple$12[2];
			return [r, size, short$1];
		}
		c3 = s.charCodeAt(3);
		if (c3 < 128 || 192 <= c3) {
			_tuple$13 = [65533, 1, false]; r = _tuple$13[0]; size = _tuple$13[1]; short$1 = _tuple$13[2];
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tuple$14 = [65533, 1, false]; r = _tuple$14[0]; size = _tuple$14[1]; short$1 = _tuple$14[2];
				return [r, size, short$1];
			}
			_tuple$15 = [r, 4, false]; r = _tuple$15[0]; size = _tuple$15[1]; short$1 = _tuple$15[2];
			return [r, size, short$1];
		}
		_tuple$16 = [65533, 1, false]; r = _tuple$16[0]; size = _tuple$16[1]; short$1 = _tuple$16[2];
		return [r, size, short$1];
	};
	FullRune = go$pkg.FullRune = function(p) {
		var _tuple, short$1;
		_tuple = decodeRuneInternal(p); short$1 = _tuple[2];
		return !short$1;
	};
	DecodeRune = go$pkg.DecodeRune = function(p) {
		var r, size, _tuple;
		r = 0;
		size = 0;
		_tuple = decodeRuneInternal(p); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeRuneInString = go$pkg.DecodeRuneInString = function(s) {
		var r, size, _tuple;
		r = 0;
		size = 0;
		_tuple = decodeRuneInStringInternal(s); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeLastRune = go$pkg.DecodeLastRune = function(p) {
		var r, size, end, _tuple, start, _slice, _index, _tuple$1, lim, _slice$1, _index$1, _tuple$2, _tuple$3, _tuple$4;
		r = 0;
		size = 0;
		end = p.length;
		if (end === 0) {
			_tuple = [65533, 0]; r = _tuple[0]; size = _tuple[1];
			return [r, size];
		}
		start = end - 1 >> 0;
		r = ((_slice = p, _index = start, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0);
		if (r < 128) {
			_tuple$1 = [r, 1]; r = _tuple$1[0]; size = _tuple$1[1];
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - 1 >> 0;
		while (start >= lim) {
			if (RuneStart((_slice$1 = p, _index$1 = start, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))) {
				break;
			}
			start = start - 1 >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple$2 = DecodeRune(go$subslice(p, start, end)); r = _tuple$2[0]; size = _tuple$2[1];
		if (!(((start + size >> 0) === end))) {
			_tuple$3 = [65533, 1]; r = _tuple$3[0]; size = _tuple$3[1];
			return [r, size];
		}
		_tuple$4 = [r, size]; r = _tuple$4[0]; size = _tuple$4[1];
		return [r, size];
	};
	RuneLen = go$pkg.RuneLen = function(r) {
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	EncodeRune = go$pkg.EncodeRune = function(p, r) {
		var _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9;
		if ((r >>> 0) <= 127) {
			_slice = p; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = (r << 24 >>> 24)) : go$throwRuntimeError("index out of range");
			return 1;
		}
		if ((r >>> 0) <= 2047) {
			_slice$1 = p; _index$1 = 0;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
			_slice$2 = p; _index$2 = 1;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
			return 2;
		}
		if ((r >>> 0) > 1114111) {
			r = 65533;
		}
		if (55296 <= r && r <= 57343) {
			r = 65533;
		}
		if ((r >>> 0) <= 65535) {
			_slice$3 = p; _index$3 = 0;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
			_slice$4 = p; _index$4 = 1;(_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
			_slice$5 = p; _index$5 = 2;(_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
			return 3;
		}
		_slice$6 = p; _index$6 = 0;(_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = (240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
		_slice$7 = p; _index$7 = 1;(_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = (128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
		_slice$8 = p; _index$8 = 2;(_index$8 >= 0 && _index$8 < _slice$8.length) ? (_slice$8.array[_slice$8.offset + _index$8] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
		_slice$9 = p; _index$9 = 3;(_index$9 >= 0 && _index$9 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$9] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0) : go$throwRuntimeError("index out of range");
		return 4;
	};
	RuneCountInString = go$pkg.RuneCountInString = function(s) {
		var n, _ref, _i, _rune;
		n = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			n = n + 1 >> 0;
			_i += _rune[1];
		}
		return n;
	};
	RuneStart = go$pkg.RuneStart = function(b) {
		return !((((b & 192) >>> 0) === 128));
	};
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["bytes"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], io = go$packages["io"], utf8 = go$packages["unicode/utf8"], unicode = go$packages["unicode"], Buffer, readOp, IndexByte, Equal, makeSlice, NewBuffer, Index, IndexAny, HasPrefix, Map, ToUpper, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeCutsetFunc, TrimLeft, TrimRight, TrimSpace;
	Buffer = go$pkg.Buffer = go$newType(0, "Struct", "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.go$val = this;
		this.buf = buf_ !== undefined ? buf_ : (go$sliceType(Go$Uint8)).nil;
		this.off = off_ !== undefined ? off_ : 0;
		this.runeBytes = runeBytes_ !== undefined ? runeBytes_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.bootstrap = bootstrap_ !== undefined ? bootstrap_ : go$makeNativeArray("Uint8", 64, function() { return 0; });
		this.lastRead = lastRead_ !== undefined ? lastRead_ : 0;
	});
	readOp = go$pkg.readOp = go$newType(4, "Int", "bytes.readOp", "readOp", "bytes", null);
	IndexByte = go$pkg.IndexByte = function(s, c) {
		var _ref, _i, _slice, _index, b, i;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			b = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	Equal = go$pkg.Equal = function(a, b) {
		var _ref, _i, _slice, _index, c, i, _slice$1, _index$1;
		if (!((a.length === b.length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (!((c === (_slice$1 = b, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	Buffer.Ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return go$subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.go$val.Bytes(); };
	Buffer.Ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === (go$ptrType(Buffer)).nil) {
			return "<nil>";
		}
		return go$bytesToString(go$subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.go$val.String(); };
	Buffer.Ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.go$val.Len(); };
	Buffer.Ptr.prototype.Truncate = function(n) {
		var b;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			throw go$panic(new Go$String("bytes.Buffer: truncation out of range"));
		} else if (n === 0) {
			b.off = 0;
		}
		b.buf = go$subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.go$val.Truncate(n); };
	Buffer.Ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.go$val.Reset(); };
	Buffer.Ptr.prototype.grow = function(n) {
		var b, m, buf, _q, x;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.length + n >> 0) > b.buf.capacity) {
			buf = (go$sliceType(Go$Uint8)).nil;
			if (b.buf === (go$sliceType(Go$Uint8)).nil && n <= 64) {
				buf = go$subslice(new (go$sliceType(Go$Uint8))(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"))) {
				go$copySlice(b.buf, go$subslice(b.buf, b.off));
				buf = go$subslice(b.buf, 0, m);
			} else {
				buf = makeSlice((x = b.buf.capacity, (((2 >>> 16 << 16) * x >> 0) + (2 << 16 >>> 16) * x) >> 0) + n >> 0);
				go$copySlice(buf, go$subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = go$subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.go$val.grow(n); };
	Buffer.Ptr.prototype.Grow = function(n) {
		var b, m;
		b = this;
		if (n < 0) {
			throw go$panic(new Go$String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = go$subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.go$val.Grow(n); };
	Buffer.Ptr.prototype.Write = function(p) {
		var n, err, b, m, _tuple;
		n = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.length);
		_tuple = [go$copySlice(go$subslice(b.buf, m), p), null]; n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.go$val.Write(p); };
	Buffer.Ptr.prototype.WriteString = function(s) {
		var n, err, b, m, _tuple;
		n = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tuple = [go$copyString(go$subslice(b.buf, m), s), null]; n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.go$val.WriteString(s); };
	Buffer.Ptr.prototype.ReadFrom = function(r) {
		var n, err, b, free, newBuf, x, _tuple, m, e, x$1, _tuple$1, _tuple$2;
		n = new Go$Int64(0, 0);
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
		}
		while (true) {
			free = b.buf.capacity - b.buf.length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice((x = b.buf.capacity, (((2 >>> 16 << 16) * x >> 0) + (2 << 16 >>> 16) * x) >> 0) + 512 >> 0);
				}
				go$copySlice(newBuf, go$subslice(b.buf, b.off));
				b.buf = go$subslice(newBuf, 0, (b.buf.length - b.off >> 0));
				b.off = 0;
			}
			_tuple = r.Read(go$subslice(b.buf, b.buf.length, b.buf.capacity)); m = _tuple[0]; e = _tuple[1];
			b.buf = go$subslice(b.buf, 0, (b.buf.length + m >> 0));
			n = (x$1 = new Go$Int64(0, m), new Go$Int64(n.high + x$1.high, n.low + x$1.low));
			if (go$interfaceIsEqual(e, io.EOF)) {
				break;
			}
			if (!(go$interfaceIsEqual(e, null))) {
				_tuple$1 = [n, e]; n = _tuple$1[0]; err = _tuple$1[1];
				return [n, err];
			}
		}
		_tuple$2 = [n, null]; n = _tuple$2[0]; err = _tuple$2[1];
		return [n, err];
	};
	Buffer.prototype.ReadFrom = function(r) { return this.go$val.ReadFrom(r); };
	makeSlice = function(n) {
		var go$deferred = [];
		try {
			go$deferred.push({ fun: (function() {
				if (!(go$interfaceIsEqual(go$recover(), null))) {
					throw go$panic(go$pkg.ErrTooLarge);
				}
			}), args: [] });
			return (go$sliceType(Go$Uint8)).make(n, 0, function() { return 0; });
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$sliceType(Go$Uint8)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Buffer.Ptr.prototype.WriteTo = function(w) {
		var n, err, b, nBytes, _tuple, m, e, _tuple$1, _tuple$2;
		n = new Go$Int64(0, 0);
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off < b.buf.length) {
			nBytes = b.Len();
			_tuple = w.Write(go$subslice(b.buf, b.off)); m = _tuple[0]; e = _tuple[1];
			if (m > nBytes) {
				throw go$panic(new Go$String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new Go$Int64(0, m);
			if (!(go$interfaceIsEqual(e, null))) {
				_tuple$1 = [n, e]; n = _tuple$1[0]; err = _tuple$1[1];
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tuple$2 = [n, io.ErrShortWrite]; n = _tuple$2[0]; err = _tuple$2[1];
				return [n, err];
			}
		}
		b.Truncate(0);
		return [n, err];
	};
	Buffer.prototype.WriteTo = function(w) { return this.go$val.WriteTo(w); };
	Buffer.Ptr.prototype.WriteByte = function(c) {
		var b, m, _slice, _index;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		_slice = b.buf; _index = m;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = c) : go$throwRuntimeError("index out of range");
		return null;
	};
	Buffer.prototype.WriteByte = function(c) { return this.go$val.WriteByte(c); };
	Buffer.Ptr.prototype.WriteRune = function(r) {
		var n, err, b, _tuple, _tuple$1;
		n = 0;
		err = null;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tuple = [1, null]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		n = utf8.EncodeRune(go$subslice(new (go$sliceType(Go$Uint8))(b.runeBytes), 0), r);
		b.Write(go$subslice(new (go$sliceType(Go$Uint8))(b.runeBytes), 0, n));
		_tuple$1 = [n, null]; n = _tuple$1[0]; err = _tuple$1[1];
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.go$val.WriteRune(r); };
	Buffer.Ptr.prototype.Read = function(p) {
		var n, err, b, _tuple;
		n = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
			if (p.length === 0) {
				return [n, err];
			}
			_tuple = [0, io.EOF]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		n = go$copySlice(p, go$subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.go$val.Read(p); };
	Buffer.Ptr.prototype.Next = function(n) {
		var b, m, data;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = go$subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.go$val.Next(n); };
	Buffer.Ptr.prototype.ReadByte = function() {
		var c, err, b, _tuple, _slice, _index, _tuple$1;
		c = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
			_tuple = [0, io.EOF]; c = _tuple[0]; err = _tuple[1];
			return [c, err];
		}
		c = (_slice = b.buf, _index = b.off, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		b.off = b.off + 1 >> 0;
		b.lastRead = 2;
		_tuple$1 = [c, null]; c = _tuple$1[0]; err = _tuple$1[1];
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.go$val.ReadByte(); };
	Buffer.Ptr.prototype.ReadRune = function() {
		var r, size, err, b, _tuple, _slice, _index, c, _tuple$1, _tuple$2, n, _tuple$3;
		r = 0;
		size = 0;
		err = null;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.length) {
			b.Truncate(0);
			_tuple = [0, 0, io.EOF]; r = _tuple[0]; size = _tuple[1]; err = _tuple[2];
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (_slice = b.buf, _index = b.off, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (c < 128) {
			b.off = b.off + 1 >> 0;
			_tuple$1 = [(c >> 0), 1, null]; r = _tuple$1[0]; size = _tuple$1[1]; err = _tuple$1[2];
			return [r, size, err];
		}
		_tuple$2 = utf8.DecodeRune(go$subslice(b.buf, b.off)); r = _tuple$2[0]; n = _tuple$2[1];
		b.off = b.off + (n) >> 0;
		_tuple$3 = [r, n, null]; r = _tuple$3[0]; size = _tuple$3[1]; err = _tuple$3[2];
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.go$val.ReadRune(); };
	Buffer.Ptr.prototype.UnreadRune = function() {
		var b, _tuple, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune(go$subslice(b.buf, 0, b.off)); n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return null;
	};
	Buffer.prototype.UnreadRune = function() { return this.go$val.UnreadRune(); };
	Buffer.Ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - 1 >> 0;
		}
		return null;
	};
	Buffer.prototype.UnreadByte = function() { return this.go$val.UnreadByte(); };
	Buffer.Ptr.prototype.ReadBytes = function(delim) {
		var line, err, b, _tuple, slice;
		line = (go$sliceType(Go$Uint8)).nil;
		err = null;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		line = go$appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.go$val.ReadBytes(delim); };
	Buffer.Ptr.prototype.readSlice = function(delim) {
		var line, err, b, i, end, _tuple;
		line = (go$sliceType(Go$Uint8)).nil;
		err = null;
		b = this;
		i = IndexByte(go$subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.length;
			err = io.EOF;
		}
		line = go$subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tuple = [line, err]; line = _tuple[0]; err = _tuple[1];
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.go$val.readSlice(delim); };
	Buffer.Ptr.prototype.ReadString = function(delim) {
		var line, err, b, _tuple, slice, _tuple$1;
		line = "";
		err = null;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		_tuple$1 = [go$bytesToString(slice), err]; line = _tuple$1[0]; err = _tuple$1[1];
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.go$val.ReadString(delim); };
	NewBuffer = go$pkg.NewBuffer = function(buf) {
		return new Buffer.Ptr(buf, 0, go$makeNativeArray("Uint8", 4, function() { return 0; }), go$makeNativeArray("Uint8", 64, function() { return 0; }), 0);
	};
	Index = go$pkg.Index = function(s, sep) {
		var n, _slice, _index, c, i, t, _slice$1, _index$1, o;
		n = sep.length;
		if (n === 0) {
			return 0;
		}
		if (n > s.length) {
			return -1;
		}
		c = (_slice = sep, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = go$subslice(s, 0, ((s.length - n >> 0) + 1 >> 0));
		while (i < t.length) {
			if (!(((_slice$1 = t, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === c))) {
				o = IndexByte(go$subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal(go$subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + 1 >> 0;
		}
		return -1;
	};
	IndexAny = go$pkg.IndexAny = function(s, chars) {
		var r, width, i, _slice, _index, _tuple, _ref, _i, _rune, ch;
		if (chars.length > 0) {
			r = 0;
			width = 0;
			i = 0;
			while (i < s.length) {
				r = ((_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0);
				if (r < 128) {
					width = 1;
				} else {
					_tuple = utf8.DecodeRune(go$subslice(s, i)); r = _tuple[0]; width = _tuple[1];
				}
				_ref = chars;
				_i = 0;
				while (_i < _ref.length) {
					_rune = go$decodeRune(_ref, _i);
					ch = _rune[0];
					if (r === ch) {
						return i;
					}
					_i += _rune[1];
				}
				i = i + (width) >> 0;
			}
		}
		return -1;
	};
	HasPrefix = go$pkg.HasPrefix = function(s, prefix) {
		return s.length >= prefix.length && Equal(go$subslice(s, 0, prefix.length), prefix);
	};
	Map = go$pkg.Map = function(mapping, s) {
		var maxbytes, nbytes, b, i, wid, _slice, _index, r, _tuple, nb;
		maxbytes = s.length;
		nbytes = 0;
		b = (go$sliceType(Go$Uint8)).make(maxbytes, 0, function() { return 0; });
		i = 0;
		while (i < s.length) {
			wid = 1;
			r = ((_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune(go$subslice(s, i)); r = _tuple[0]; wid = _tuple[1];
			}
			r = mapping(r);
			if (r >= 0) {
				if ((nbytes + utf8.RuneLen(r) >> 0) > maxbytes) {
					maxbytes = ((((maxbytes >>> 16 << 16) * 2 >> 0) + (maxbytes << 16 >>> 16) * 2) >> 0) + 4 >> 0;
					nb = (go$sliceType(Go$Uint8)).make(maxbytes, 0, function() { return 0; });
					go$copySlice(nb, go$subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune(go$subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			i = i + (wid) >> 0;
		}
		return go$subslice(b, 0, nbytes);
	};
	ToUpper = go$pkg.ToUpper = function(s) {
		return Map(unicode.ToUpper, s);
	};
	ToLower = go$pkg.ToLower = function(s) {
		return Map(unicode.ToLower, s);
	};
	TrimLeftFunc = go$pkg.TrimLeftFunc = function(s, f) {
		var i;
		i = indexFunc(s, f, false);
		if (i === -1) {
			return (go$sliceType(Go$Uint8)).nil;
		}
		return go$subslice(s, i);
	};
	TrimRightFunc = go$pkg.TrimRightFunc = function(s, f) {
		var i, _slice, _index, _tuple, wid;
		i = lastIndexFunc(s, f, false);
		if (i >= 0 && (_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >= 128) {
			_tuple = utf8.DecodeRune(go$subslice(s, i)); wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + 1 >> 0;
		}
		return go$subslice(s, 0, i);
	};
	TrimFunc = go$pkg.TrimFunc = function(s, f) {
		return TrimRightFunc(TrimLeftFunc(s, f), f);
	};
	indexFunc = function(s, f, truth) {
		var start, wid, _slice, _index, r, _tuple;
		start = 0;
		while (start < s.length) {
			wid = 1;
			r = ((_slice = s, _index = start, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune(go$subslice(s, start)); r = _tuple[0]; wid = _tuple[1];
			}
			if (f(r) === truth) {
				return start;
			}
			start = start + (wid) >> 0;
		}
		return -1;
	};
	lastIndexFunc = function(s, f, truth) {
		var i, _slice, _index, _tuple, r, size, _tuple$1;
		i = s.length;
		while (i > 0) {
			_tuple = [((_slice = s, _index = (i - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0), 1]; r = _tuple[0]; size = _tuple[1];
			if (r >= 128) {
				_tuple$1 = utf8.DecodeLastRune(go$subslice(s, 0, i)); r = _tuple$1[0]; size = _tuple$1[1];
			}
			i = i - (size) >> 0;
			if (f(r) === truth) {
				return i;
			}
		}
		return -1;
	};
	makeCutsetFunc = function(cutset) {
		return (function(r) {
			var _ref, _i, _rune, c;
			_ref = cutset;
			_i = 0;
			while (_i < _ref.length) {
				_rune = go$decodeRune(_ref, _i);
				c = _rune[0];
				if (c === r) {
					return true;
				}
				_i += _rune[1];
			}
			return false;
		});
	};
	TrimLeft = go$pkg.TrimLeft = function(s, cutset) {
		return TrimLeftFunc(s, makeCutsetFunc(cutset));
	};
	TrimRight = go$pkg.TrimRight = function(s, cutset) {
		return TrimRightFunc(s, makeCutsetFunc(cutset));
	};
	TrimSpace = go$pkg.TrimSpace = function(s) {
		return TrimFunc(s, unicode.IsSpace);
	};
	go$pkg.init = function() {
		(go$ptrType(Buffer)).methods = [["Bytes", "", [], [(go$sliceType(Go$Uint8))], false, -1], ["Grow", "", [Go$Int], [], false, -1], ["Len", "", [], [Go$Int], false, -1], ["Next", "", [Go$Int], [(go$sliceType(Go$Uint8))], false, -1], ["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["ReadByte", "", [], [Go$Uint8, go$error], false, -1], ["ReadBytes", "", [Go$Uint8], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["ReadFrom", "", [io.Reader], [Go$Int64, go$error], false, -1], ["ReadRune", "", [], [Go$Int32, Go$Int, go$error], false, -1], ["ReadString", "", [Go$Uint8], [Go$String, go$error], false, -1], ["Reset", "", [], [], false, -1], ["String", "", [], [Go$String], false, -1], ["Truncate", "", [Go$Int], [], false, -1], ["UnreadByte", "", [], [go$error], false, -1], ["UnreadRune", "", [], [go$error], false, -1], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["WriteByte", "", [Go$Uint8], [go$error], false, -1], ["WriteRune", "", [Go$Int32], [Go$Int, go$error], false, -1], ["WriteString", "", [Go$String], [Go$Int, go$error], false, -1], ["WriteTo", "", [io.Writer], [Go$Int64, go$error], false, -1], ["grow", "bytes", [Go$Int], [Go$Int], false, -1], ["readSlice", "bytes", [Go$Uint8], [(go$sliceType(Go$Uint8)), go$error], false, -1]];
		Buffer.init([["buf", "buf", "bytes", (go$sliceType(Go$Uint8)), ""], ["off", "off", "bytes", Go$Int, ""], ["runeBytes", "runeBytes", "bytes", (go$arrayType(Go$Uint8, 4)), ""], ["bootstrap", "bootstrap", "bytes", (go$arrayType(Go$Uint8, 64)), ""], ["lastRead", "lastRead", "bytes", readOp, ""]]);
		go$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
	}
	return go$pkg;
})();
go$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var go$pkg = {}, Object, Error;
	Object = go$pkg.Object = go$newType(0, "Interface", "js.Object", "Object", "github.com/gopherjs/gopherjs/js", null);
	Error = go$pkg.Error = go$newType(0, "Struct", "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.go$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
	Error.Ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + go$internalize(err.Object.message, Go$String);
	};
	Error.prototype.Error = function() { return this.go$val.Error(); };
	go$pkg.init = function() {
		Object.init([["Bool", "", (go$funcType([], [Go$Bool], false))], ["Call", "", (go$funcType([Go$String, (go$sliceType(go$emptyInterface))], [Object], true))], ["Float", "", (go$funcType([], [Go$Float64], false))], ["Get", "", (go$funcType([Go$String], [Object], false))], ["Index", "", (go$funcType([Go$Int], [Object], false))], ["Int", "", (go$funcType([], [Go$Int], false))], ["Int64", "", (go$funcType([], [Go$Int64], false))], ["Interface", "", (go$funcType([], [go$emptyInterface], false))], ["Invoke", "", (go$funcType([(go$sliceType(go$emptyInterface))], [Object], true))], ["IsNull", "", (go$funcType([], [Go$Bool], false))], ["IsUndefined", "", (go$funcType([], [Go$Bool], false))], ["Length", "", (go$funcType([], [Go$Int], false))], ["New", "", (go$funcType([(go$sliceType(go$emptyInterface))], [Object], true))], ["Set", "", (go$funcType([Go$String, go$emptyInterface], [], false))], ["SetIndex", "", (go$funcType([Go$Int, go$emptyInterface], [], false))], ["Str", "", (go$funcType([], [Go$String], false))], ["Uint64", "", (go$funcType([], [Go$Uint64], false))]]);
		Error.methods = [["Bool", "", [], [Go$Bool], false, 0], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [Object], true, 0], ["Float", "", [], [Go$Float64], false, 0], ["Get", "", [Go$String], [Object], false, 0], ["Index", "", [Go$Int], [Object], false, 0], ["Int", "", [], [Go$Int], false, 0], ["Int64", "", [], [Go$Int64], false, 0], ["Interface", "", [], [go$emptyInterface], false, 0], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [Object], true, 0], ["IsNull", "", [], [Go$Bool], false, 0], ["IsUndefined", "", [], [Go$Bool], false, 0], ["Length", "", [], [Go$Int], false, 0], ["New", "", [(go$sliceType(go$emptyInterface))], [Object], true, 0], ["Set", "", [Go$String, go$emptyInterface], [], false, 0], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false, 0], ["Str", "", [], [Go$String], false, 0], ["Uint64", "", [], [Go$Uint64], false, 0]];
		(go$ptrType(Error)).methods = [["Bool", "", [], [Go$Bool], false, 0], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [Object], true, 0], ["Error", "", [], [Go$String], false, -1], ["Float", "", [], [Go$Float64], false, 0], ["Get", "", [Go$String], [Object], false, 0], ["Index", "", [Go$Int], [Object], false, 0], ["Int", "", [], [Go$Int], false, 0], ["Int64", "", [], [Go$Int64], false, 0], ["Interface", "", [], [go$emptyInterface], false, 0], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [Object], true, 0], ["IsNull", "", [], [Go$Bool], false, 0], ["IsUndefined", "", [], [Go$Bool], false, 0], ["Length", "", [], [Go$Int], false, 0], ["New", "", [(go$sliceType(go$emptyInterface))], [Object], true, 0], ["Set", "", [Go$String, go$emptyInterface], [], false, 0], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false, 0], ["Str", "", [], [Go$String], false, 0], ["Uint64", "", [], [Go$Uint64], false, 0]];
		Error.init([["Object", "", "", Object, ""]]);
		var e;
		e = new Error.Ptr(null);
	}
	return go$pkg;
})();
go$packages["github.com/gopherjs/jquery"] = (function() {
	var go$pkg = {}, js = go$packages["github.com/gopherjs/gopherjs/js"], JQuery, Event, JQueryCoordinates, NewJQuery, Trim;
	JQuery = go$pkg.JQuery = go$newType(0, "Struct", "jquery.JQuery", "JQuery", "github.com/gopherjs/jquery", function(o_, Jquery_, Selector_, Length_, Context_) {
		this.go$val = this;
		this.o = o_ !== undefined ? o_ : null;
		this.Jquery = Jquery_ !== undefined ? Jquery_ : "";
		this.Selector = Selector_ !== undefined ? Selector_ : "";
		this.Length = Length_ !== undefined ? Length_ : "";
		this.Context = Context_ !== undefined ? Context_ : "";
	});
	Event = go$pkg.Event = go$newType(0, "Struct", "jquery.Event", "Event", "github.com/gopherjs/jquery", function(Object_, KeyCode_, Target_, CurrentTarget_, DelegateTarget_, RelatedTarget_, Data_, Result_, Which_, Namespace_, MetaKey_, PageX_, PageY_, Type_) {
		this.go$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
		this.KeyCode = KeyCode_ !== undefined ? KeyCode_ : 0;
		this.Target = Target_ !== undefined ? Target_ : null;
		this.CurrentTarget = CurrentTarget_ !== undefined ? CurrentTarget_ : null;
		this.DelegateTarget = DelegateTarget_ !== undefined ? DelegateTarget_ : null;
		this.RelatedTarget = RelatedTarget_ !== undefined ? RelatedTarget_ : null;
		this.Data = Data_ !== undefined ? Data_ : null;
		this.Result = Result_ !== undefined ? Result_ : null;
		this.Which = Which_ !== undefined ? Which_ : 0;
		this.Namespace = Namespace_ !== undefined ? Namespace_ : "";
		this.MetaKey = MetaKey_ !== undefined ? MetaKey_ : false;
		this.PageX = PageX_ !== undefined ? PageX_ : 0;
		this.PageY = PageY_ !== undefined ? PageY_ : 0;
		this.Type = Type_ !== undefined ? Type_ : "";
	});
	JQueryCoordinates = go$pkg.JQueryCoordinates = go$newType(0, "Struct", "jquery.JQueryCoordinates", "JQueryCoordinates", "github.com/gopherjs/jquery", function(Left_, Top_) {
		this.go$val = this;
		this.Left = Left_ !== undefined ? Left_ : 0;
		this.Top = Top_ !== undefined ? Top_ : 0;
	});
	Event.Ptr.prototype.PreventDefault = function() {
		var event;
		event = this;
		event.Object.preventDefault();
	};
	Event.prototype.PreventDefault = function() { return this.go$val.PreventDefault(); };
	Event.Ptr.prototype.IsDefaultPrevented = function() {
		var event;
		event = this;
		return !!(event.Object.isDefaultPrevented());
	};
	Event.prototype.IsDefaultPrevented = function() { return this.go$val.IsDefaultPrevented(); };
	Event.Ptr.prototype.IsImmediatePropogationStopped = function() {
		var event;
		event = this;
		return !!(event.Object.isImmediatePropogationStopped());
	};
	Event.prototype.IsImmediatePropogationStopped = function() { return this.go$val.IsImmediatePropogationStopped(); };
	Event.Ptr.prototype.IsPropagationStopped = function() {
		var event;
		event = this;
		return !!(event.Object.isPropagationStopped());
	};
	Event.prototype.IsPropagationStopped = function() { return this.go$val.IsPropagationStopped(); };
	Event.Ptr.prototype.StopImmediatePropagation = function() {
		var event;
		event = this;
		event.Object.stopImmediatePropagation();
	};
	Event.prototype.StopImmediatePropagation = function() { return this.go$val.StopImmediatePropagation(); };
	Event.Ptr.prototype.StopPropagation = function() {
		var event;
		event = this;
		event.Object.stopPropagation();
	};
	Event.prototype.StopPropagation = function() { return this.go$val.StopPropagation(); };
	NewJQuery = go$pkg.NewJQuery = function(args) {
		return new JQuery.Ptr(new (go$global.Function.prototype.bind.apply(go$global.jQuery, [undefined].concat(go$externalize(args, (go$sliceType(go$emptyInterface)))))), "", "", "", "");
	};
	Trim = go$pkg.Trim = function(text) {
		return go$internalize(go$global.jQuery.trim(go$externalize(text, Go$String)), Go$String);
	};
	JQuery.Ptr.prototype.Each = function(fn) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.each(go$externalize(fn, (go$funcType([Go$Int, go$emptyInterface], [go$emptyInterface], false))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Each = function(fn) { return this.go$val.Each(fn); };
	JQuery.Ptr.prototype.Underlying = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return j.o;
	};
	JQuery.prototype.Underlying = function() { return this.go$val.Underlying(); };
	JQuery.Ptr.prototype.Get = function(i) {
		var _struct, j, obj;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (obj = j.o, obj.get.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
	};
	JQuery.prototype.Get = function(i) { return this.go$val.Get(i); };
	JQuery.Ptr.prototype.Append = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom2args("append", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Append = function(i) { return this.go$val.Append(i); };
	JQuery.Ptr.prototype.Empty = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.empty();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Empty = function() { return this.go$val.Empty(); };
	JQuery.Ptr.prototype.Detach = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.detach.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Detach = function(i) { return this.go$val.Detach(i); };
	JQuery.Ptr.prototype.Eq = function(idx) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.eq(idx);
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Eq = function(idx) { return this.go$val.Eq(idx); };
	JQuery.Ptr.prototype.FadeIn = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.fadeIn.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.FadeIn = function(i) { return this.go$val.FadeIn(i); };
	JQuery.Ptr.prototype.Delay = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.delay.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Delay = function(i) { return this.go$val.Delay(i); };
	JQuery.Ptr.prototype.ToArray = function() {
		var _struct, j, x;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (x = go$internalize(j.o.toArray(), go$emptyInterface), (x !== null && x.constructor === (go$sliceType(go$emptyInterface)) ? x.go$val : go$typeAssertionFailed(x, (go$sliceType(go$emptyInterface)))));
	};
	JQuery.prototype.ToArray = function() { return this.go$val.ToArray(); };
	JQuery.Ptr.prototype.Remove = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.remove.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Remove = function(i) { return this.go$val.Remove(i); };
	JQuery.Ptr.prototype.Stop = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.stop.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Stop = function(i) { return this.go$val.Stop(i); };
	JQuery.Ptr.prototype.AddBack = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.addBack.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.AddBack = function(i) { return this.go$val.AddBack(i); };
	JQuery.Ptr.prototype.Css = function(name) {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$internalize(j.o.css(go$externalize(name, Go$String)), Go$String);
	};
	JQuery.prototype.Css = function(name) { return this.go$val.Css(name); };
	JQuery.Ptr.prototype.CssArray = function(arr) {
		var _struct, j, x;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (x = go$internalize(j.o.css(go$externalize(arr, (go$sliceType(Go$String)))), go$emptyInterface), (x !== null && x.constructor === (go$mapType(Go$String, go$emptyInterface)) ? x.go$val : go$typeAssertionFailed(x, (go$mapType(Go$String, go$emptyInterface)))));
	};
	JQuery.prototype.CssArray = function(arr) { return this.go$val.CssArray(arr); };
	JQuery.Ptr.prototype.SetCss = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.css.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetCss = function(i) { return this.go$val.SetCss(i); };
	JQuery.Ptr.prototype.Text = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$internalize(j.o.text(), Go$String);
	};
	JQuery.prototype.Text = function() { return this.go$val.Text(); };
	JQuery.Ptr.prototype.SetText = function(i) {
		var _struct, j, _ref, _type, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		_ref = i;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$funcType([Go$Int, Go$String], [Go$String], false)) || _type === Go$String) {
		} else {
			console.log("SetText Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.text(go$externalize(i, go$emptyInterface));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetText = function(i) { return this.go$val.SetText(i); };
	JQuery.Ptr.prototype.Val = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$internalize(j.o.val(), Go$String);
	};
	JQuery.prototype.Val = function() { return this.go$val.Val(); };
	JQuery.Ptr.prototype.SetVal = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o.val(go$externalize(i, go$emptyInterface));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetVal = function(i) { return this.go$val.SetVal(i); };
	JQuery.Ptr.prototype.Prop = function(property) {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$internalize(j.o.prop(go$externalize(property, Go$String)), go$emptyInterface);
	};
	JQuery.prototype.Prop = function(property) { return this.go$val.Prop(property); };
	JQuery.Ptr.prototype.SetProp = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.prop.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetProp = function(i) { return this.go$val.SetProp(i); };
	JQuery.Ptr.prototype.RemoveProp = function(property) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.removeProp(go$externalize(property, Go$String));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.RemoveProp = function(property) { return this.go$val.RemoveProp(property); };
	JQuery.Ptr.prototype.Attr = function(property) {
		var _struct, j, attr;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		attr = j.o.attr(go$externalize(property, Go$String));
		if (attr === undefined) {
			return "";
		}
		return go$internalize(attr, Go$String);
	};
	JQuery.prototype.Attr = function(property) { return this.go$val.Attr(property); };
	JQuery.Ptr.prototype.SetAttr = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.attr.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetAttr = function(i) { return this.go$val.SetAttr(i); };
	JQuery.Ptr.prototype.RemoveAttr = function(property) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.removeAttr(go$externalize(property, Go$String));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.RemoveAttr = function(property) { return this.go$val.RemoveAttr(property); };
	JQuery.Ptr.prototype.HasClass = function(class$1) {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return !!(j.o.hasClass(go$externalize(class$1, Go$String)));
	};
	JQuery.prototype.HasClass = function(class$1) { return this.go$val.HasClass(class$1); };
	JQuery.Ptr.prototype.AddClass = function(i) {
		var _struct, j, _ref, _type, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		_ref = i;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$funcType([Go$Int, Go$String], [Go$String], false)) || _type === Go$String) {
		} else {
			console.log("addClass Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.addClass(go$externalize(i, go$emptyInterface));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.AddClass = function(i) { return this.go$val.AddClass(i); };
	JQuery.Ptr.prototype.RemoveClass = function(property) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.removeClass(go$externalize(property, Go$String));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.RemoveClass = function(property) { return this.go$val.RemoveClass(property); };
	JQuery.Ptr.prototype.ToggleClass = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.toggleClass.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.ToggleClass = function(i) { return this.go$val.ToggleClass(i); };
	JQuery.Ptr.prototype.Focus = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.focus();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Focus = function() { return this.go$val.Focus(); };
	JQuery.Ptr.prototype.Blur = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.blur();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Blur = function() { return this.go$val.Blur(); };
	JQuery.Ptr.prototype.ReplaceAll = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom1arg("replaceAll", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.ReplaceAll = function(i) { return this.go$val.ReplaceAll(i); };
	JQuery.Ptr.prototype.ReplaceWith = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom1arg("replaceWith", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.ReplaceWith = function(i) { return this.go$val.ReplaceWith(i); };
	JQuery.Ptr.prototype.After = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom2args("after", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.After = function(i) { return this.go$val.After(i); };
	JQuery.Ptr.prototype.Before = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom2args("before", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Before = function(i) { return this.go$val.Before(i); };
	JQuery.Ptr.prototype.Prepend = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom2args("prepend", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Prepend = function(i) { return this.go$val.Prepend(i); };
	JQuery.Ptr.prototype.PrependTo = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom1arg("prependTo", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.PrependTo = function(i) { return this.go$val.PrependTo(i); };
	JQuery.Ptr.prototype.AppendTo = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom1arg("appendTo", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.AppendTo = function(i) { return this.go$val.AppendTo(i); };
	JQuery.Ptr.prototype.InsertAfter = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom1arg("insertAfter", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.InsertAfter = function(i) { return this.go$val.InsertAfter(i); };
	JQuery.Ptr.prototype.InsertBefore = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom1arg("insertBefore", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.InsertBefore = function(i) { return this.go$val.InsertBefore(i); };
	JQuery.Ptr.prototype.Show = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.show();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Show = function() { return this.go$val.Show(); };
	JQuery.Ptr.prototype.Hide = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o.hide();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Hide = function() { return this.go$val.Hide(); };
	JQuery.Ptr.prototype.Toggle = function(showOrHide) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.toggle(go$externalize(showOrHide, Go$Bool));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Toggle = function(showOrHide) { return this.go$val.Toggle(showOrHide); };
	JQuery.Ptr.prototype.Contents = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.contents();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Contents = function() { return this.go$val.Contents(); };
	JQuery.Ptr.prototype.Html = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$internalize(j.o.html(), Go$String);
	};
	JQuery.prototype.Html = function() { return this.go$val.Html(); };
	JQuery.Ptr.prototype.SetHtml = function(i) {
		var _struct, j, _ref, _type, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		_ref = i;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$funcType([Go$Int, Go$String], [Go$String], false)) || _type === Go$String) {
		} else {
			console.log("SetHtml Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.html(go$externalize(i, go$emptyInterface));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetHtml = function(i) { return this.go$val.SetHtml(i); };
	JQuery.Ptr.prototype.Closest = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom2args("closest", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Closest = function(i) { return this.go$val.Closest(i); };
	JQuery.Ptr.prototype.End = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.end();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.End = function() { return this.go$val.End(); };
	JQuery.Ptr.prototype.Add = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom2args("add", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Add = function(i) { return this.go$val.Add(i); };
	JQuery.Ptr.prototype.Clone = function(b) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.clone.apply(obj, go$externalize(b, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Clone = function(b) { return this.go$val.Clone(b); };
	JQuery.Ptr.prototype.Height = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$parseInt(j.o.height()) >> 0;
	};
	JQuery.prototype.Height = function() { return this.go$val.Height(); };
	JQuery.Ptr.prototype.SetHeight = function(value) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.height(go$externalize(value, Go$String));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetHeight = function(value) { return this.go$val.SetHeight(value); };
	JQuery.Ptr.prototype.Width = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$parseInt(j.o.width()) >> 0;
	};
	JQuery.prototype.Width = function() { return this.go$val.Width(); };
	JQuery.Ptr.prototype.SetWidth = function(i) {
		var _struct, j, _ref, _type, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		_ref = i;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$funcType([Go$Int, Go$String], [Go$String], false)) || _type === Go$String) {
		} else {
			console.log("SetWidth Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.width(go$externalize(i, go$emptyInterface));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetWidth = function(i) { return this.go$val.SetWidth(i); };
	JQuery.Ptr.prototype.InnerHeight = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$parseInt(j.o.innerHeight()) >> 0;
	};
	JQuery.prototype.InnerHeight = function() { return this.go$val.InnerHeight(); };
	JQuery.Ptr.prototype.InnerWidth = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$parseInt(j.o.innerWidth()) >> 0;
	};
	JQuery.prototype.InnerWidth = function() { return this.go$val.InnerWidth(); };
	JQuery.Ptr.prototype.Offset = function() {
		var _struct, j, obj;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		obj = j.o.offset();
		return new JQueryCoordinates.Ptr(go$parseInt(obj.left) >> 0, go$parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Offset = function() { return this.go$val.Offset(); };
	JQuery.Ptr.prototype.SetOffset = function(jc) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.offset(go$externalize(jc, JQueryCoordinates));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetOffset = function(jc) { return this.go$val.SetOffset(jc); };
	JQuery.Ptr.prototype.OuterHeight = function(includeMargin) {
		var _struct, j, _slice, _index;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		if (includeMargin.length === 0) {
			return go$parseInt(j.o.outerHeight()) >> 0;
		}
		return go$parseInt(j.o.outerHeight(go$externalize((_slice = includeMargin, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), Go$Bool))) >> 0;
	};
	JQuery.prototype.OuterHeight = function(includeMargin) { return this.go$val.OuterHeight(includeMargin); };
	JQuery.Ptr.prototype.OuterWidth = function(includeMargin) {
		var _struct, j, _slice, _index;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		if (includeMargin.length === 0) {
			return go$parseInt(j.o.outerWidth()) >> 0;
		}
		return go$parseInt(j.o.outerWidth(go$externalize((_slice = includeMargin, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), Go$Bool))) >> 0;
	};
	JQuery.prototype.OuterWidth = function(includeMargin) { return this.go$val.OuterWidth(includeMargin); };
	JQuery.Ptr.prototype.Position = function() {
		var _struct, j, obj;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		obj = j.o.position();
		return new JQueryCoordinates.Ptr(go$parseInt(obj.left) >> 0, go$parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Position = function() { return this.go$val.Position(); };
	JQuery.Ptr.prototype.ScrollLeft = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$parseInt(j.o.scrollLeft()) >> 0;
	};
	JQuery.prototype.ScrollLeft = function() { return this.go$val.ScrollLeft(); };
	JQuery.Ptr.prototype.SetScrollLeft = function(value) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.scrollLeft(value);
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetScrollLeft = function(value) { return this.go$val.SetScrollLeft(value); };
	JQuery.Ptr.prototype.ScrollTop = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$parseInt(j.o.scrollTop()) >> 0;
	};
	JQuery.prototype.ScrollTop = function() { return this.go$val.ScrollTop(); };
	JQuery.Ptr.prototype.SetScrollTop = function(value) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.scrollTop(value);
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetScrollTop = function(value) { return this.go$val.SetScrollTop(value); };
	JQuery.Ptr.prototype.ClearQueue = function(queueName) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.clearQueue(go$externalize(queueName, Go$String));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.ClearQueue = function(queueName) { return this.go$val.ClearQueue(queueName); };
	JQuery.Ptr.prototype.SetData = function(key, value) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.data(go$externalize(key, Go$String), go$externalize(value, go$emptyInterface));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.SetData = function(key, value) { return this.go$val.SetData(key, value); };
	JQuery.Ptr.prototype.Data = function(key) {
		var _struct, j, result;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		result = j.o.data(go$externalize(key, Go$String));
		if (result === undefined) {
			return null;
		}
		return go$internalize(result, go$emptyInterface);
	};
	JQuery.prototype.Data = function(key) { return this.go$val.Data(key); };
	JQuery.Ptr.prototype.Dequeue = function(queueName) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.dequeue(go$externalize(queueName, Go$String));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Dequeue = function(queueName) { return this.go$val.Dequeue(queueName); };
	JQuery.Ptr.prototype.RemoveData = function(name) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.removeData(go$externalize(name, Go$String));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.RemoveData = function(name) { return this.go$val.RemoveData(name); };
	JQuery.Ptr.prototype.OffsetParent = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.offsetParent();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.OffsetParent = function() { return this.go$val.OffsetParent(); };
	JQuery.Ptr.prototype.Parent = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.parent.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Parent = function(i) { return this.go$val.Parent(i); };
	JQuery.Ptr.prototype.Parents = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.parents.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Parents = function(i) { return this.go$val.Parents(i); };
	JQuery.Ptr.prototype.ParentsUntil = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.parentsUntil.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.ParentsUntil = function(i) { return this.go$val.ParentsUntil(i); };
	JQuery.Ptr.prototype.Prev = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.prev.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Prev = function(i) { return this.go$val.Prev(i); };
	JQuery.Ptr.prototype.PrevAll = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.prevAll.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.PrevAll = function(i) { return this.go$val.PrevAll(i); };
	JQuery.Ptr.prototype.PrevUntil = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.prevUntil.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.PrevUntil = function(i) { return this.go$val.PrevUntil(i); };
	JQuery.Ptr.prototype.Siblings = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.siblings.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Siblings = function(i) { return this.go$val.Siblings(i); };
	JQuery.Ptr.prototype.Slice = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.slice.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Slice = function(i) { return this.go$val.Slice(i); };
	JQuery.Ptr.prototype.Children = function(selector) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.children(go$externalize(selector, go$emptyInterface));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Children = function(selector) { return this.go$val.Children(selector); };
	JQuery.Ptr.prototype.Unwrap = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.unwrap();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Unwrap = function() { return this.go$val.Unwrap(); };
	JQuery.Ptr.prototype.Wrap = function(obj) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.wrap(go$externalize(obj, go$emptyInterface));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Wrap = function(obj) { return this.go$val.Wrap(obj); };
	JQuery.Ptr.prototype.WrapAll = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom1arg("wrapAll", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.WrapAll = function(i) { return this.go$val.WrapAll(i); };
	JQuery.Ptr.prototype.WrapInner = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.dom1arg("wrapInner", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.WrapInner = function(i) { return this.go$val.WrapInner(i); };
	JQuery.Ptr.prototype.Next = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.next.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Next = function(i) { return this.go$val.Next(i); };
	JQuery.Ptr.prototype.NextAll = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.nextAll.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.NextAll = function(i) { return this.go$val.NextAll(i); };
	JQuery.Ptr.prototype.NextUntil = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.nextUntil.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.NextUntil = function(i) { return this.go$val.NextUntil(i); };
	JQuery.Ptr.prototype.Not = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.not.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Not = function(i) { return this.go$val.Not(i); };
	JQuery.Ptr.prototype.Filter = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.filter.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Filter = function(i) { return this.go$val.Filter(i); };
	JQuery.Ptr.prototype.Find = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.find.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Find = function(i) { return this.go$val.Find(i); };
	JQuery.Ptr.prototype.First = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.first();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.First = function() { return this.go$val.First(); };
	JQuery.Ptr.prototype.Has = function(selector) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.has(go$externalize(selector, Go$String));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Has = function(selector) { return this.go$val.Has(selector); };
	JQuery.Ptr.prototype.Is = function(i) {
		var _struct, j, obj;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return !!((obj = j.o, obj.is.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface))))));
	};
	JQuery.prototype.Is = function(i) { return this.go$val.Is(i); };
	JQuery.Ptr.prototype.Last = function() {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.last();
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Last = function() { return this.go$val.Last(); };
	JQuery.Ptr.prototype.Ready = function(handler) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = j.o.ready(go$externalize(handler, (go$funcType([], [], false))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Ready = function(handler) { return this.go$val.Ready(handler); };
	JQuery.Ptr.prototype.Resize = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.resize.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Resize = function(i) { return this.go$val.Resize(i); };
	JQuery.Ptr.prototype.Scroll = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.handleEvent("scroll", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Scroll = function(i) { return this.go$val.Scroll(i); };
	JQuery.Ptr.prototype.FadeOut = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.fadeOut.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.FadeOut = function(i) { return this.go$val.FadeOut(i); };
	JQuery.Ptr.prototype.Select = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.handleEvent("select", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Select = function(i) { return this.go$val.Select(i); };
	JQuery.Ptr.prototype.Submit = function(i) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.handleEvent("submit", i), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Submit = function(i) { return this.go$val.Submit(i); };
	JQuery.Ptr.prototype.handleEvent = function(evt, i) {
		var _struct, j, _ref, x, _slice, _index, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		_ref = i.length;
		if (_ref === 0) {
			j.o = j.o[go$externalize(evt, Go$String)]();
		} else if (_ref === 1) {
			j.o = j.o[go$externalize(evt, Go$String)](go$externalize((function(e) {
				var x, _slice, _index;
				(x = (_slice = i, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$funcType([Event], [], false)) ? x.go$val : go$typeAssertionFailed(x, (go$funcType([Event], [], false)))))(new Event.Ptr(e, 0, null, null, null, null, null, null, 0, "", false, 0, 0, ""));
			}), (go$funcType([js.Object], [], false))));
		} else if (_ref === 2) {
			j.o = j.o[go$externalize(evt, Go$String)](go$externalize((x = (_slice = i, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$mapType(Go$String, go$emptyInterface)) ? x.go$val : go$typeAssertionFailed(x, (go$mapType(Go$String, go$emptyInterface))))), (go$mapType(Go$String, go$emptyInterface))), go$externalize((function(e) {
				var x$1, _slice$1, _index$1;
				(x$1 = (_slice$1 = i, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (x$1 !== null && x$1.constructor === (go$funcType([Event], [], false)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$funcType([Event], [], false)))))(new Event.Ptr(e, 0, null, null, null, null, null, null, 0, "", false, 0, 0, ""));
			}), (go$funcType([js.Object], [], false))));
		} else {
			console.log(evt + " event expects 0 to 2 arguments");
		}
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.handleEvent = function(evt, i) { return this.go$val.handleEvent(evt, i); };
	JQuery.Ptr.prototype.Trigger = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.trigger.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Trigger = function(i) { return this.go$val.Trigger(i); };
	JQuery.Ptr.prototype.On = function(p) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.events("on", p), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.On = function(p) { return this.go$val.On(p); };
	JQuery.Ptr.prototype.One = function(p) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.events("one", p), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.One = function(p) { return this.go$val.One(p); };
	JQuery.Ptr.prototype.Off = function(p) {
		var _struct, j, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return (_struct$1 = j.events("off", p), new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Off = function(p) { return this.go$val.Off(p); };
	JQuery.Ptr.prototype.events = function(evt, p) {
		var _struct, j, count, isEventFunc, _ref, _type, _slice, _index, _ref$1, _struct$1, _slice$1, _index$1, _struct$2, _slice$2, _index$2, _struct$3, _slice$3, _index$3, _slice$4, _index$4, _struct$4, _slice$5, _index$5, _slice$6, _index$6, _struct$5, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _struct$6, _slice$10, _index$10, _slice$11, _index$11, _slice$12, _index$12, _struct$7, _slice$13, _index$13, _slice$14, _index$14, _slice$15, _index$15, _slice$16, _index$16, _struct$8, obj, _struct$9;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		count = p.length;
		isEventFunc = false;
		_ref = (_slice = p, _index = (p.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$funcType([Event], [], false))) {
			isEventFunc = true;
		} else {
			isEventFunc = false;
		}
		_ref$1 = count;
		if (_ref$1 === 0) {
			j.o = j.o[go$externalize(evt, Go$String)]();
			return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
		} else if (_ref$1 === 1) {
			j.o = j.o[go$externalize(evt, Go$String)](go$externalize((_slice$1 = p, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), go$emptyInterface));
			return (_struct$2 = j, new JQuery.Ptr(_struct$2.o, _struct$2.Jquery, _struct$2.Selector, _struct$2.Length, _struct$2.Context));
		} else if (_ref$1 === 2) {
			if (isEventFunc) {
				j.o = j.o[go$externalize(evt, Go$String)](go$externalize((_slice$2 = p, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((function(e) {
					var x, _slice$3, _index$3;
					(x = (_slice$3 = p, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$funcType([Event], [], false)) ? x.go$val : go$typeAssertionFailed(x, (go$funcType([Event], [], false)))))(new Event.Ptr(e, 0, null, null, null, null, null, null, 0, "", false, 0, 0, ""));
				}), (go$funcType([js.Object], [], false))));
				return (_struct$3 = j, new JQuery.Ptr(_struct$3.o, _struct$3.Jquery, _struct$3.Selector, _struct$3.Length, _struct$3.Context));
			} else {
				j.o = j.o[go$externalize(evt, Go$String)](go$externalize((_slice$3 = p, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$4 = p, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), go$emptyInterface));
				return (_struct$4 = j, new JQuery.Ptr(_struct$4.o, _struct$4.Jquery, _struct$4.Selector, _struct$4.Length, _struct$4.Context));
			}
		} else if (_ref$1 === 3) {
			if (isEventFunc) {
				j.o = j.o[go$externalize(evt, Go$String)](go$externalize((_slice$5 = p, _index$5 = 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$6 = p, _index$6 = 1, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((function(e) {
					var x, _slice$7, _index$7;
					(x = (_slice$7 = p, _index$7 = 2, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$funcType([Event], [], false)) ? x.go$val : go$typeAssertionFailed(x, (go$funcType([Event], [], false)))))(new Event.Ptr(e, 0, null, null, null, null, null, null, 0, "", false, 0, 0, ""));
				}), (go$funcType([js.Object], [], false))));
				return (_struct$5 = j, new JQuery.Ptr(_struct$5.o, _struct$5.Jquery, _struct$5.Selector, _struct$5.Length, _struct$5.Context));
			} else {
				j.o = j.o[go$externalize(evt, Go$String)](go$externalize((_slice$7 = p, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$8 = p, _index$8 = 1, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$9 = p, _index$9 = 2, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")), go$emptyInterface));
				return (_struct$6 = j, new JQuery.Ptr(_struct$6.o, _struct$6.Jquery, _struct$6.Selector, _struct$6.Length, _struct$6.Context));
			}
		} else if (_ref$1 === 4) {
			if (isEventFunc) {
				j.o = j.o[go$externalize(evt, Go$String)](go$externalize((_slice$10 = p, _index$10 = 0, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$11 = p, _index$11 = 1, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$12 = p, _index$12 = 2, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((function(e) {
					var x, _slice$13, _index$13;
					(x = (_slice$13 = p, _index$13 = 3, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$funcType([Event], [], false)) ? x.go$val : go$typeAssertionFailed(x, (go$funcType([Event], [], false)))))(new Event.Ptr(e, 0, null, null, null, null, null, null, 0, "", false, 0, 0, ""));
				}), (go$funcType([js.Object], [], false))));
				return (_struct$7 = j, new JQuery.Ptr(_struct$7.o, _struct$7.Jquery, _struct$7.Selector, _struct$7.Length, _struct$7.Context));
			} else {
				j.o = j.o[go$externalize(evt, Go$String)](go$externalize((_slice$13 = p, _index$13 = 0, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$14 = p, _index$14 = 1, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$15 = p, _index$15 = 2, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$16 = p, _index$16 = 3, (_index$16 >= 0 && _index$16 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$16] : go$throwRuntimeError("index out of range")), go$emptyInterface));
				return (_struct$8 = j, new JQuery.Ptr(_struct$8.o, _struct$8.Jquery, _struct$8.Selector, _struct$8.Length, _struct$8.Context));
			}
		} else {
			console.log(evt + " event should no have more than 4 arguments");
			j.o = (obj = j.o, obj[go$externalize(evt, Go$String)].apply(obj, go$externalize(p, (go$sliceType(go$emptyInterface)))));
			return (_struct$9 = j, new JQuery.Ptr(_struct$9.o, _struct$9.Jquery, _struct$9.Selector, _struct$9.Length, _struct$9.Context));
		}
	};
	JQuery.prototype.events = function(evt, p) { return this.go$val.events(evt, p); };
	JQuery.Ptr.prototype.dom2args = function(method, i) {
		var _struct, j, _ref, _tuple, x, _slice, _index, _struct$1, selector, selOk, _tuple$1, x$1, _slice$1, _index$1, _struct$2, context, ctxOk, _slice$2, _index$2, _slice$3, _index$3, _struct$3, _slice$4, _index$4, _struct$4, _slice$5, _index$5, _struct$5, _struct$6, _tuple$2, x$2, _slice$6, _index$6, _struct$7, selector$1, selOk$1, _slice$7, _index$7, _struct$8, _struct$9, _struct$10;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		_ref = i.length;
		if (_ref === 2) {
			_tuple = (x = (_slice = i, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === JQuery ? [x.go$val, true] : [new JQuery.Ptr(), false])); selector = (_struct$1 = _tuple[0], new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context)); selOk = _tuple[1];
			_tuple$1 = (x$1 = (_slice$1 = i, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (x$1 !== null && x$1.constructor === JQuery ? [x$1.go$val, true] : [new JQuery.Ptr(), false])); context = (_struct$2 = _tuple$1[0], new JQuery.Ptr(_struct$2.o, _struct$2.Jquery, _struct$2.Selector, _struct$2.Length, _struct$2.Context)); ctxOk = _tuple$1[1];
			if (!selOk && !ctxOk) {
				j.o = j.o[go$externalize(method, Go$String)](go$externalize((_slice$2 = i, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), go$emptyInterface), go$externalize((_slice$3 = i, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), go$emptyInterface));
				return (_struct$3 = j, new JQuery.Ptr(_struct$3.o, _struct$3.Jquery, _struct$3.Selector, _struct$3.Length, _struct$3.Context));
			} else if (selOk && !ctxOk) {
				j.o = j.o[go$externalize(method, Go$String)](selector.o, go$externalize((_slice$4 = i, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), go$emptyInterface));
				return (_struct$4 = j, new JQuery.Ptr(_struct$4.o, _struct$4.Jquery, _struct$4.Selector, _struct$4.Length, _struct$4.Context));
			} else if (!selOk && ctxOk) {
				j.o = j.o[go$externalize(method, Go$String)](go$externalize((_slice$5 = i, _index$5 = 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")), go$emptyInterface), context.o);
				return (_struct$5 = j, new JQuery.Ptr(_struct$5.o, _struct$5.Jquery, _struct$5.Selector, _struct$5.Length, _struct$5.Context));
			}
			j.o = j.o[go$externalize(method, Go$String)](selector.o, context.o);
			return (_struct$6 = j, new JQuery.Ptr(_struct$6.o, _struct$6.Jquery, _struct$6.Selector, _struct$6.Length, _struct$6.Context));
		} else if (_ref === 1) {
			_tuple$2 = (x$2 = (_slice$6 = i, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")), (x$2 !== null && x$2.constructor === JQuery ? [x$2.go$val, true] : [new JQuery.Ptr(), false])); selector$1 = (_struct$7 = _tuple$2[0], new JQuery.Ptr(_struct$7.o, _struct$7.Jquery, _struct$7.Selector, _struct$7.Length, _struct$7.Context)); selOk$1 = _tuple$2[1];
			if (!selOk$1) {
				j.o = j.o[go$externalize(method, Go$String)](go$externalize((_slice$7 = i, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), go$emptyInterface));
				return (_struct$8 = j, new JQuery.Ptr(_struct$8.o, _struct$8.Jquery, _struct$8.Selector, _struct$8.Length, _struct$8.Context));
			}
			j.o = j.o[go$externalize(method, Go$String)](selector$1.o);
			return (_struct$9 = j, new JQuery.Ptr(_struct$9.o, _struct$9.Jquery, _struct$9.Selector, _struct$9.Length, _struct$9.Context));
		} else {
			console.log(" only 1 or 2 parameters allowed for method ", method);
			return (_struct$10 = j, new JQuery.Ptr(_struct$10.o, _struct$10.Jquery, _struct$10.Selector, _struct$10.Length, _struct$10.Context));
		}
	};
	JQuery.prototype.dom2args = function(method, i) { return this.go$val.dom2args(method, i); };
	JQuery.Ptr.prototype.dom1arg = function(method, i) {
		var _struct, j, _tuple, _struct$1, selector, selOk, _struct$2, _struct$3;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		_tuple = (i !== null && i.constructor === JQuery ? [i.go$val, true] : [new JQuery.Ptr(), false]); selector = (_struct$1 = _tuple[0], new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context)); selOk = _tuple[1];
		if (!selOk) {
			j.o = j.o[go$externalize(method, Go$String)](go$externalize(i, go$emptyInterface));
			return (_struct$2 = j, new JQuery.Ptr(_struct$2.o, _struct$2.Jquery, _struct$2.Selector, _struct$2.Length, _struct$2.Context));
		}
		j.o = j.o[go$externalize(method, Go$String)](selector.o);
		return (_struct$3 = j, new JQuery.Ptr(_struct$3.o, _struct$3.Jquery, _struct$3.Selector, _struct$3.Length, _struct$3.Context));
	};
	JQuery.prototype.dom1arg = function(method, i) { return this.go$val.dom1arg(method, i); };
	JQuery.Ptr.prototype.Load = function(i) {
		var _struct, j, obj, _struct$1;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		j.o = (obj = j.o, obj.load.apply(obj, go$externalize(i, (go$sliceType(go$emptyInterface)))));
		return (_struct$1 = j, new JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
	};
	JQuery.prototype.Load = function(i) { return this.go$val.Load(i); };
	JQuery.Ptr.prototype.Serialize = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return go$internalize(j.o.serialize(), Go$String);
	};
	JQuery.prototype.Serialize = function() { return this.go$val.Serialize(); };
	JQuery.Ptr.prototype.SerializeArray = function() {
		var _struct, j;
		j = (_struct = this, new JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		return j.o.serializeArray();
	};
	JQuery.prototype.SerializeArray = function() { return this.go$val.SerializeArray(); };
	go$pkg.init = function() {
		JQuery.methods = [["Add", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["AddBack", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["AddClass", "", [go$emptyInterface], [JQuery], false, -1], ["After", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Append", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["AppendTo", "", [go$emptyInterface], [JQuery], false, -1], ["Attr", "", [Go$String], [Go$String], false, -1], ["Before", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Blur", "", [], [JQuery], false, -1], ["Children", "", [go$emptyInterface], [JQuery], false, -1], ["ClearQueue", "", [Go$String], [JQuery], false, -1], ["Clone", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Closest", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Contents", "", [], [JQuery], false, -1], ["Css", "", [Go$String], [Go$String], false, -1], ["CssArray", "", [(go$sliceType(Go$String))], [(go$mapType(Go$String, go$emptyInterface))], true, -1], ["Data", "", [Go$String], [go$emptyInterface], false, -1], ["Delay", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Dequeue", "", [Go$String], [JQuery], false, -1], ["Detach", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Each", "", [(go$funcType([Go$Int, go$emptyInterface], [go$emptyInterface], false))], [JQuery], false, -1], ["Empty", "", [], [JQuery], false, -1], ["End", "", [], [JQuery], false, -1], ["Eq", "", [Go$Int], [JQuery], false, -1], ["FadeIn", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["FadeOut", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Filter", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Find", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["First", "", [], [JQuery], false, -1], ["Focus", "", [], [JQuery], false, -1], ["Get", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, -1], ["Has", "", [Go$String], [JQuery], false, -1], ["HasClass", "", [Go$String], [Go$Bool], false, -1], ["Height", "", [], [Go$Int], false, -1], ["Hide", "", [], [JQuery], false, -1], ["Html", "", [], [Go$String], false, -1], ["InnerHeight", "", [], [Go$Int], false, -1], ["InnerWidth", "", [], [Go$Int], false, -1], ["InsertAfter", "", [go$emptyInterface], [JQuery], false, -1], ["InsertBefore", "", [go$emptyInterface], [JQuery], false, -1], ["Is", "", [(go$sliceType(go$emptyInterface))], [Go$Bool], true, -1], ["Last", "", [], [JQuery], false, -1], ["Load", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Next", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["NextAll", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["NextUntil", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Not", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Off", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Offset", "", [], [JQueryCoordinates], false, -1], ["OffsetParent", "", [], [JQuery], false, -1], ["On", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["One", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["OuterHeight", "", [(go$sliceType(Go$Bool))], [Go$Int], true, -1], ["OuterWidth", "", [(go$sliceType(Go$Bool))], [Go$Int], true, -1], ["Parent", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Parents", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["ParentsUntil", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Position", "", [], [JQueryCoordinates], false, -1], ["Prepend", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["PrependTo", "", [go$emptyInterface], [JQuery], false, -1], ["Prev", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["PrevAll", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["PrevUntil", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Prop", "", [Go$String], [go$emptyInterface], false, -1], ["Ready", "", [(go$funcType([], [], false))], [JQuery], false, -1], ["Remove", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["RemoveAttr", "", [Go$String], [JQuery], false, -1], ["RemoveClass", "", [Go$String], [JQuery], false, -1], ["RemoveData", "", [Go$String], [JQuery], false, -1], ["RemoveProp", "", [Go$String], [JQuery], false, -1], ["ReplaceAll", "", [go$emptyInterface], [JQuery], false, -1], ["ReplaceWith", "", [go$emptyInterface], [JQuery], false, -1], ["Resize", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Scroll", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["ScrollLeft", "", [], [Go$Int], false, -1], ["ScrollTop", "", [], [Go$Int], false, -1], ["Select", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Serialize", "", [], [Go$String], false, -1], ["SerializeArray", "", [], [js.Object], false, -1], ["SetAttr", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["SetCss", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["SetData", "", [Go$String, go$emptyInterface], [JQuery], false, -1], ["SetHeight", "", [Go$String], [JQuery], false, -1], ["SetHtml", "", [go$emptyInterface], [JQuery], false, -1], ["SetOffset", "", [JQueryCoordinates], [JQuery], false, -1], ["SetProp", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["SetScrollLeft", "", [Go$Int], [JQuery], false, -1], ["SetScrollTop", "", [Go$Int], [JQuery], false, -1], ["SetText", "", [go$emptyInterface], [JQuery], false, -1], ["SetVal", "", [go$emptyInterface], [JQuery], false, -1], ["SetWidth", "", [go$emptyInterface], [JQuery], false, -1], ["Show", "", [], [JQuery], false, -1], ["Siblings", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Slice", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Stop", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Submit", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Text", "", [], [Go$String], false, -1], ["ToArray", "", [], [(go$sliceType(go$emptyInterface))], false, -1], ["Toggle", "", [Go$Bool], [JQuery], false, -1], ["ToggleClass", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Trigger", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Underlying", "", [], [js.Object], false, -1], ["Unwrap", "", [], [JQuery], false, -1], ["Val", "", [], [Go$String], false, -1], ["Width", "", [], [Go$Int], false, -1], ["Wrap", "", [go$emptyInterface], [JQuery], false, -1], ["WrapAll", "", [go$emptyInterface], [JQuery], false, -1], ["WrapInner", "", [go$emptyInterface], [JQuery], false, -1], ["dom1arg", "github.com/gopherjs/jquery", [Go$String, go$emptyInterface], [JQuery], false, -1], ["dom2args", "github.com/gopherjs/jquery", [Go$String, (go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["events", "github.com/gopherjs/jquery", [Go$String, (go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["handleEvent", "github.com/gopherjs/jquery", [Go$String, (go$sliceType(go$emptyInterface))], [JQuery], true, -1]];
		(go$ptrType(JQuery)).methods = [["Add", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["AddBack", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["AddClass", "", [go$emptyInterface], [JQuery], false, -1], ["After", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Append", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["AppendTo", "", [go$emptyInterface], [JQuery], false, -1], ["Attr", "", [Go$String], [Go$String], false, -1], ["Before", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Blur", "", [], [JQuery], false, -1], ["Children", "", [go$emptyInterface], [JQuery], false, -1], ["ClearQueue", "", [Go$String], [JQuery], false, -1], ["Clone", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Closest", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Contents", "", [], [JQuery], false, -1], ["Css", "", [Go$String], [Go$String], false, -1], ["CssArray", "", [(go$sliceType(Go$String))], [(go$mapType(Go$String, go$emptyInterface))], true, -1], ["Data", "", [Go$String], [go$emptyInterface], false, -1], ["Delay", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Dequeue", "", [Go$String], [JQuery], false, -1], ["Detach", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Each", "", [(go$funcType([Go$Int, go$emptyInterface], [go$emptyInterface], false))], [JQuery], false, -1], ["Empty", "", [], [JQuery], false, -1], ["End", "", [], [JQuery], false, -1], ["Eq", "", [Go$Int], [JQuery], false, -1], ["FadeIn", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["FadeOut", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Filter", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Find", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["First", "", [], [JQuery], false, -1], ["Focus", "", [], [JQuery], false, -1], ["Get", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, -1], ["Has", "", [Go$String], [JQuery], false, -1], ["HasClass", "", [Go$String], [Go$Bool], false, -1], ["Height", "", [], [Go$Int], false, -1], ["Hide", "", [], [JQuery], false, -1], ["Html", "", [], [Go$String], false, -1], ["InnerHeight", "", [], [Go$Int], false, -1], ["InnerWidth", "", [], [Go$Int], false, -1], ["InsertAfter", "", [go$emptyInterface], [JQuery], false, -1], ["InsertBefore", "", [go$emptyInterface], [JQuery], false, -1], ["Is", "", [(go$sliceType(go$emptyInterface))], [Go$Bool], true, -1], ["Last", "", [], [JQuery], false, -1], ["Load", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Next", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["NextAll", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["NextUntil", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Not", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Off", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Offset", "", [], [JQueryCoordinates], false, -1], ["OffsetParent", "", [], [JQuery], false, -1], ["On", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["One", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["OuterHeight", "", [(go$sliceType(Go$Bool))], [Go$Int], true, -1], ["OuterWidth", "", [(go$sliceType(Go$Bool))], [Go$Int], true, -1], ["Parent", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Parents", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["ParentsUntil", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Position", "", [], [JQueryCoordinates], false, -1], ["Prepend", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["PrependTo", "", [go$emptyInterface], [JQuery], false, -1], ["Prev", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["PrevAll", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["PrevUntil", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Prop", "", [Go$String], [go$emptyInterface], false, -1], ["Ready", "", [(go$funcType([], [], false))], [JQuery], false, -1], ["Remove", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["RemoveAttr", "", [Go$String], [JQuery], false, -1], ["RemoveClass", "", [Go$String], [JQuery], false, -1], ["RemoveData", "", [Go$String], [JQuery], false, -1], ["RemoveProp", "", [Go$String], [JQuery], false, -1], ["ReplaceAll", "", [go$emptyInterface], [JQuery], false, -1], ["ReplaceWith", "", [go$emptyInterface], [JQuery], false, -1], ["Resize", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Scroll", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["ScrollLeft", "", [], [Go$Int], false, -1], ["ScrollTop", "", [], [Go$Int], false, -1], ["Select", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Serialize", "", [], [Go$String], false, -1], ["SerializeArray", "", [], [js.Object], false, -1], ["SetAttr", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["SetCss", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["SetData", "", [Go$String, go$emptyInterface], [JQuery], false, -1], ["SetHeight", "", [Go$String], [JQuery], false, -1], ["SetHtml", "", [go$emptyInterface], [JQuery], false, -1], ["SetOffset", "", [JQueryCoordinates], [JQuery], false, -1], ["SetProp", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["SetScrollLeft", "", [Go$Int], [JQuery], false, -1], ["SetScrollTop", "", [Go$Int], [JQuery], false, -1], ["SetText", "", [go$emptyInterface], [JQuery], false, -1], ["SetVal", "", [go$emptyInterface], [JQuery], false, -1], ["SetWidth", "", [go$emptyInterface], [JQuery], false, -1], ["Show", "", [], [JQuery], false, -1], ["Siblings", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Slice", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Stop", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Submit", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Text", "", [], [Go$String], false, -1], ["ToArray", "", [], [(go$sliceType(go$emptyInterface))], false, -1], ["Toggle", "", [Go$Bool], [JQuery], false, -1], ["ToggleClass", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Trigger", "", [(go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["Underlying", "", [], [js.Object], false, -1], ["Unwrap", "", [], [JQuery], false, -1], ["Val", "", [], [Go$String], false, -1], ["Width", "", [], [Go$Int], false, -1], ["Wrap", "", [go$emptyInterface], [JQuery], false, -1], ["WrapAll", "", [go$emptyInterface], [JQuery], false, -1], ["WrapInner", "", [go$emptyInterface], [JQuery], false, -1], ["dom1arg", "github.com/gopherjs/jquery", [Go$String, go$emptyInterface], [JQuery], false, -1], ["dom2args", "github.com/gopherjs/jquery", [Go$String, (go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["events", "github.com/gopherjs/jquery", [Go$String, (go$sliceType(go$emptyInterface))], [JQuery], true, -1], ["handleEvent", "github.com/gopherjs/jquery", [Go$String, (go$sliceType(go$emptyInterface))], [JQuery], true, -1]];
		JQuery.init([["o", "o", "github.com/gopherjs/jquery", js.Object, ""], ["Jquery", "Jquery", "", Go$String, "js:\"jquery\""], ["Selector", "Selector", "", Go$String, "js:\"selector\""], ["Length", "Length", "", Go$String, "js:\"length\""], ["Context", "Context", "", Go$String, "js:\"context\""]]);
		Event.methods = [["Bool", "", [], [Go$Bool], false, 0], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["Float", "", [], [Go$Float64], false, 0], ["Get", "", [Go$String], [js.Object], false, 0], ["Index", "", [Go$Int], [js.Object], false, 0], ["Int", "", [], [Go$Int], false, 0], ["Int64", "", [], [Go$Int64], false, 0], ["Interface", "", [], [go$emptyInterface], false, 0], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["IsNull", "", [], [Go$Bool], false, 0], ["IsUndefined", "", [], [Go$Bool], false, 0], ["Length", "", [], [Go$Int], false, 0], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["Set", "", [Go$String, go$emptyInterface], [], false, 0], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false, 0], ["Str", "", [], [Go$String], false, 0], ["Uint64", "", [], [Go$Uint64], false, 0]];
		(go$ptrType(Event)).methods = [["Bool", "", [], [Go$Bool], false, 0], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["Float", "", [], [Go$Float64], false, 0], ["Get", "", [Go$String], [js.Object], false, 0], ["Index", "", [Go$Int], [js.Object], false, 0], ["Int", "", [], [Go$Int], false, 0], ["Int64", "", [], [Go$Int64], false, 0], ["Interface", "", [], [go$emptyInterface], false, 0], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["IsDefaultPrevented", "", [], [Go$Bool], false, -1], ["IsImmediatePropogationStopped", "", [], [Go$Bool], false, -1], ["IsNull", "", [], [Go$Bool], false, 0], ["IsPropagationStopped", "", [], [Go$Bool], false, -1], ["IsUndefined", "", [], [Go$Bool], false, 0], ["Length", "", [], [Go$Int], false, 0], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["PreventDefault", "", [], [], false, -1], ["Set", "", [Go$String, go$emptyInterface], [], false, 0], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false, 0], ["StopImmediatePropagation", "", [], [], false, -1], ["StopPropagation", "", [], [], false, -1], ["Str", "", [], [Go$String], false, 0], ["Uint64", "", [], [Go$Uint64], false, 0]];
		Event.init([["Object", "", "", js.Object, ""], ["KeyCode", "KeyCode", "", Go$Int, "js:\"keyCode\""], ["Target", "Target", "", js.Object, "js:\"target\""], ["CurrentTarget", "CurrentTarget", "", js.Object, "js:\"currentTarget\""], ["DelegateTarget", "DelegateTarget", "", js.Object, "js:\"delegateTarget\""], ["RelatedTarget", "RelatedTarget", "", js.Object, "js:\"relatedTarget\""], ["Data", "Data", "", js.Object, "js:\"data\""], ["Result", "Result", "", js.Object, "js:\"result\""], ["Which", "Which", "", Go$Int, "js:\"which\""], ["Namespace", "Namespace", "", Go$String, "js:\"namespace\""], ["MetaKey", "MetaKey", "", Go$Bool, "js:\"metaKey\""], ["PageX", "PageX", "", Go$Int, "js:\"pageX\""], ["PageY", "PageY", "", Go$Int, "js:\"pageY\""], ["Type", "Type", "", Go$String, "js:\"type\""]]);
		JQueryCoordinates.init([["Left", "Left", "", Go$Int, ""], ["Top", "Top", "", Go$Int, ""]]);
	}
	return go$pkg;
})();
go$packages["encoding"] = (function() {
	var go$pkg = {}, TextMarshaler, TextUnmarshaler;
	TextMarshaler = go$pkg.TextMarshaler = go$newType(0, "Interface", "encoding.TextMarshaler", "TextMarshaler", "encoding", null);
	TextUnmarshaler = go$pkg.TextUnmarshaler = go$newType(0, "Interface", "encoding.TextUnmarshaler", "TextUnmarshaler", "encoding", null);
	go$pkg.init = function() {
		TextMarshaler.init([["MarshalText", "", (go$funcType([], [(go$sliceType(Go$Uint8)), go$error], false))]]);
		TextUnmarshaler.init([["UnmarshalText", "", (go$funcType([(go$sliceType(Go$Uint8))], [go$error], false))]]);
	}
	return go$pkg;
})();
go$packages["math"] = (function() {
	var go$pkg = {}, js = go$packages["github.com/gopherjs/gopherjs/js"], Exp, Inf, IsInf, IsNaN, Ldexp, Log, NaN, Float32bits, Float32frombits, Float64bits, Float64frombits, math, zero, posInf, negInf, nan, pow10tab;
	Exp = go$pkg.Exp = function(x) {
		return go$parseFloat(math.exp(x));
	};
	Inf = go$pkg.Inf = function(sign) {
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	IsInf = go$pkg.IsInf = function(f, sign) {
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	IsNaN = go$pkg.IsNaN = function(f) {
		var is;
		is = false;
		is = !((f === f));
		return is;
	};
	Ldexp = go$pkg.Ldexp = function(frac, exp$1) {
		if (frac === 0) {
			return frac;
		}
		if (exp$1 >= 1024) {
			return frac * go$parseFloat(math.pow(2, 1023)) * go$parseFloat(math.pow(2, exp$1 - 1023 >> 0));
		}
		if (exp$1 <= -1024) {
			return frac * go$parseFloat(math.pow(2, -1023)) * go$parseFloat(math.pow(2, exp$1 + 1023 >> 0));
		}
		return frac * go$parseFloat(math.pow(2, exp$1));
	};
	Log = go$pkg.Log = function(x) {
		if (!((x === x))) {
			return nan;
		}
		return go$parseFloat(math.log(x));
	};
	NaN = go$pkg.NaN = function() {
		return nan;
	};
	Float32bits = go$pkg.Float32bits = function(f) {
		var s, e, r;
		if (go$float32IsEqual(f, 0)) {
			if (go$float32IsEqual(1 / f, negInf)) {
				return 2147483648;
			}
			return 0;
		}
		if (!((go$float32IsEqual(f, f)))) {
			return 2143289344;
		}
		s = 0;
		if (f < 0) {
			s = 2147483648;
			f = -f;
		}
		e = 150;
		while (f >= 1.6777216e+07) {
			f = f / 2;
			if (e === 255) {
				break;
			}
			e = e + 1 >>> 0;
		}
		while (f < 8.388608e+06) {
			e = e - 1 >>> 0;
			if (e === 0) {
				break;
			}
			f = f * 2;
		}
		r = go$parseFloat(go$mod(f, 2));
		if ((r > 0.5 && r < 1) || r >= 1.5) {
			f = f + 1;
		}
		return (((s | (e << 23 >>> 0)) >>> 0) | (((f >> 0) & ~8388608))) >>> 0;
	};
	Float32frombits = go$pkg.Float32frombits = function(b) {
		var s, e, m;
		s = 1;
		if (!((((b & 2147483648) >>> 0) === 0))) {
			s = -1;
		}
		e = (((b >>> 23 >>> 0)) & 255) >>> 0;
		m = (b & 8388607) >>> 0;
		if (e === 255) {
			if (m === 0) {
				return s / 0;
			}
			return nan;
		}
		if (!((e === 0))) {
			m = m + 8388608 >>> 0;
		}
		if (e === 0) {
			e = 1;
		}
		return Ldexp(m, ((e >> 0) - 127 >> 0) - 23 >> 0) * s;
	};
	Float64bits = go$pkg.Float64bits = function(f) {
		var s, e, x, x$1, x$2, x$3;
		if (f === 0) {
			if (1 / f === negInf) {
				return new Go$Uint64(2147483648, 0);
			}
			return new Go$Uint64(0, 0);
		}
		if (!((f === f))) {
			return new Go$Uint64(2146959360, 1);
		}
		s = new Go$Uint64(0, 0);
		if (f < 0) {
			s = new Go$Uint64(2147483648, 0);
			f = -f;
		}
		e = 1075;
		while (f >= 9.007199254740992e+15) {
			f = f / 2;
			if (e === 2047) {
				break;
			}
			e = e + 1 >>> 0;
		}
		while (f < 4.503599627370496e+15) {
			e = e - 1 >>> 0;
			if (e === 0) {
				break;
			}
			f = f * 2;
		}
		return (x = (x$1 = go$shiftLeft64(new Go$Uint64(0, e), 52), new Go$Uint64(s.high | x$1.high, (s.low | x$1.low) >>> 0)), x$2 = (x$3 = new Go$Uint64(0, f), new Go$Uint64(x$3.high &~ 1048576, (x$3.low &~ 0) >>> 0)), new Go$Uint64(x.high | x$2.high, (x.low | x$2.low) >>> 0));
	};
	Float64frombits = go$pkg.Float64frombits = function(b) {
		var s, x, x$1, e, m;
		s = 1;
		if (!((x = new Go$Uint64(b.high & 2147483648, (b.low & 0) >>> 0), (x.high === 0 && x.low === 0)))) {
			s = -1;
		}
		e = (x$1 = go$shiftRightUint64(b, 52), new Go$Uint64(x$1.high & 0, (x$1.low & 2047) >>> 0));
		m = new Go$Uint64(b.high & 1048575, (b.low & 4294967295) >>> 0);
		if ((e.high === 0 && e.low === 2047)) {
			if ((m.high === 0 && m.low === 0)) {
				return s / 0;
			}
			return nan;
		}
		if (!((e.high === 0 && e.low === 0))) {
			m = new Go$Uint64(m.high + 1048576, m.low + 0);
		}
		if ((e.high === 0 && e.low === 0)) {
			e = new Go$Uint64(0, 1);
		}
		return Ldexp(go$flatten64(m), ((e.low >> 0) - 1023 >> 0) - 52 >> 0) * s;
	};
	go$pkg.init = function() {
		pow10tab = go$makeNativeArray("Float64", 70, function() { return 0; });
		math = go$global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		var i, _q, m;
		Float32bits(0);
		Float32frombits(0);
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (i < 70) {
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
			pow10tab[i] = pow10tab[m] * pow10tab[(i - m >> 0)];
			i = i + 1 >> 0;
		}
	}
	return go$pkg;
})();
go$packages["strconv"] = (function() {
	var go$pkg = {}, math = go$packages["math"], errors = go$packages["errors"], utf8 = go$packages["unicode/utf8"], NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, cutoff64, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, max, FormatInt, Itoa, AppendInt, AppendUint, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float64info, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts;
	NumError = go$pkg.NumError = go$newType(0, "Struct", "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.go$val = this;
		this.Func = Func_ !== undefined ? Func_ : "";
		this.Num = Num_ !== undefined ? Num_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	decimal = go$pkg.decimal = go$newType(0, "Struct", "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.go$val = this;
		this.d = d_ !== undefined ? d_ : go$makeNativeArray("Uint8", 800, function() { return 0; });
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
		this.trunc = trunc_ !== undefined ? trunc_ : false;
	});
	leftCheat = go$pkg.leftCheat = go$newType(0, "Struct", "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.go$val = this;
		this.delta = delta_ !== undefined ? delta_ : 0;
		this.cutoff = cutoff_ !== undefined ? cutoff_ : "";
	});
	extFloat = go$pkg.extFloat = go$newType(0, "Struct", "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.go$val = this;
		this.mant = mant_ !== undefined ? mant_ : new Go$Uint64(0, 0);
		this.exp = exp_ !== undefined ? exp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	floatInfo = go$pkg.floatInfo = go$newType(0, "Struct", "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.go$val = this;
		this.mantbits = mantbits_ !== undefined ? mantbits_ : 0;
		this.expbits = expbits_ !== undefined ? expbits_ : 0;
		this.bias = bias_ !== undefined ? bias_ : 0;
	});
	decimalSlice = go$pkg.decimalSlice = go$newType(0, "Struct", "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.go$val = this;
		this.d = d_ !== undefined ? d_ : (go$sliceType(Go$Uint8)).nil;
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	equalIgnoreCase = function(s1, s2) {
		var i, c1, c2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (i < s1.length) {
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + 32 << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + 32 << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	special = function(s) {
		var f, ok, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3;
		f = 0;
		ok = false;
		if (s.length === 0) {
			return [f, ok];
		}
		_ref = s.charCodeAt(0);
		if (_ref === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tuple = [math.Inf(1), true]; f = _tuple[0]; ok = _tuple[1];
				return [f, ok];
			}
		} else if (_ref === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tuple$1 = [math.Inf(-1), true]; f = _tuple$1[0]; ok = _tuple$1[1];
				return [f, ok];
			}
		} else if (_ref === 110 || _ref === 78) {
			if (equalIgnoreCase(s, "nan")) {
				_tuple$2 = [math.NaN(), true]; f = _tuple$2[0]; ok = _tuple$2[1];
				return [f, ok];
			}
		} else if (_ref === 105 || _ref === 73) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tuple$3 = [math.Inf(1), true]; f = _tuple$3[0]; ok = _tuple$3[1];
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.Ptr.prototype.set = function(s) {
		var ok, b, i, sawdot, sawdigits, esign, e;
		ok = false;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if (s.charCodeAt(i) === 43) {
			i = i + 1 >> 0;
		} else if (s.charCodeAt(i) === 45) {
			b.neg = true;
			i = i + 1 >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (i < s.length) {
			if (s.charCodeAt(i) === 46) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + 1 >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - 1 >> 0;
					i = i + 1 >> 0;
					continue;
				}
				if (b.nd < 800) {
					b.d[b.nd] = s.charCodeAt(i);
					b.nd = b.nd + 1 >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + 1 >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + 1 >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + 1 >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + 1 >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				if (e < 10000) {
					e = (((((e >>> 16 << 16) * 10 >> 0) + (e << 16 >>> 16) * 10) >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + 1 >> 0;
			}
			b.dp = b.dp + (((((e >>> 16 << 16) * esign >> 0) + (e << 16 >>> 16) * esign) >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.go$val.set(s); };
	readFloat = function(s) {
		var mantissa, exp, neg, trunc, ok, i, sawdot, sawdigits, nd, ndMant, dp, c, _ref, x, esign, e;
		mantissa = new Go$Uint64(0, 0);
		exp = 0;
		neg = false;
		trunc = false;
		ok = false;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (s.charCodeAt(i) === 43) {
			i = i + 1 >> 0;
		} else if (s.charCodeAt(i) === 45) {
			neg = true;
			i = i + 1 >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			_ref = true;
			if (_ref === (c === 46)) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + 1 >> 0;
				continue;
			} else if (_ref === 48 <= c && c <= 57) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - 1 >> 0;
					i = i + 1 >> 0;
					continue;
				}
				nd = nd + 1 >> 0;
				if (ndMant < 19) {
					mantissa = go$mul64(mantissa, new Go$Uint64(0, 10));
					mantissa = (x = new Go$Uint64(0, (c - 48 << 24 >>> 24)), new Go$Uint64(mantissa.high + x.high, mantissa.low + x.low));
					ndMant = ndMant + 1 >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + 1 >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + 1 >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + 1 >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + 1 >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				if (e < 10000) {
					e = (((((e >>> 16 << 16) * 10 >> 0) + (e << 16 >>> 16) * 10) >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + 1 >> 0;
			}
			dp = dp + (((((e >>> 16 << 16) * esign >> 0) + (e << 16 >>> 16) * esign) >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.Ptr.prototype.floatBits = function(flt) {
		var go$this = this, b, overflow, d, exp, mant, n, _slice, _index, n$1, _slice$1, _index$1, n$2, y, x, y$1, x$1, x$2, y$2, x$3, x$4, bits, x$5, y$3, x$6, _tuple;
		b = new Go$Uint64(0, 0);
		overflow = false;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		d = go$this;
		exp = 0;
		mant = new Go$Uint64(0, 0);
		/* if (d.nd === 0) { */ if (d.nd === 0) {} else { go$s = 3; continue; }
			mant = new Go$Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ go$s = 1; continue;
		/* } */ case 3:
		/* if (d.dp > 310) { */ if (d.dp > 310) {} else { go$s = 4; continue; }
			/* goto overflow */ go$s = 2; continue;
		/* } */ case 4:
		/* if (d.dp < -330) { */ if (d.dp < -330) {} else { go$s = 5; continue; }
			mant = new Go$Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ go$s = 1; continue;
		/* } */ case 5:
		exp = 0;
		while (d.dp > 0) {
			n = 0;
			if (d.dp >= powtab.length) {
				n = 27;
			} else {
				n = (_slice = powtab, _index = d.dp, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (d.dp < 0 || (d.dp === 0) && d.d[0] < 53) {
			n$1 = 0;
			if (-d.dp >= powtab.length) {
				n$1 = 27;
			} else {
				n$1 = (_slice$1 = powtab, _index$1 = -d.dp, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - 1 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {} else { go$s = 6; continue; }
			/* goto overflow */ go$s = 2; continue;
		/* } */ case 6:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* if ((x = go$shiftLeft64(new Go$Uint64(0, 2), flt.mantbits), (mant.high === x.high && mant.low === x.low))) { */ if ((x = go$shiftLeft64(new Go$Uint64(0, 2), flt.mantbits), (mant.high === x.high && mant.low === x.low))) {} else { go$s = 7; continue; }
			mant = go$shiftRightUint64(mant, 1);
			exp = exp + 1 >> 0;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {} else { go$s = 8; continue; }
				/* goto overflow */ go$s = 2; continue;
			/* } */ case 8:
		/* } */ case 7:
		if ((x$1 = (x$2 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), new Go$Uint64(mant.high & x$2.high, (mant.low & x$2.low) >>> 0)), (x$1.high === 0 && x$1.low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ go$s = 1; continue;
		/* overflow: */ case 2:
		mant = new Go$Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 1:
		bits = (x$3 = (x$4 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), new Go$Uint64(x$4.high - 0, x$4.low - 1)), new Go$Uint64(mant.high & x$3.high, (mant.low & x$3.low) >>> 0));
		bits = (x$5 = go$shiftLeft64(new Go$Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new Go$Uint64(bits.high | x$5.high, (bits.low | x$5.low) >>> 0));
		if (d.neg) {
			bits = (x$6 = go$shiftLeft64(go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), flt.expbits), new Go$Uint64(bits.high | x$6.high, (bits.low | x$6.low) >>> 0));
		}
		_tuple = [bits, overflow]; b = _tuple[0]; overflow = _tuple[1];
		return [b, overflow];
		/* */ } break; } }; return go$f();
	};
	decimal.prototype.floatBits = function(flt) { return this.go$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var f, ok, x, _tuple, _slice, _index, _slice$1, _index$1, _tuple$1, _slice$2, _index$2, _tuple$2;
		f = 0;
		ok = false;
		if (!((x = go$shiftRightUint64(mantissa, float64info.mantbits), (x.high === 0 && x.low === 0)))) {
			return [f, ok];
		}
		f = go$flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tuple = [f, true]; f = _tuple[0]; ok = _tuple[1];
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((_slice = float64pow10, _index = (exp - 22 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tuple$1 = [f * (_slice$1 = float64pow10, _index$1 = exp, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), true]; f = _tuple$1[0]; ok = _tuple$1[1];
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tuple$2 = [f / (_slice$2 = float64pow10, _index$2 = -exp, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), true]; f = _tuple$2[0]; ok = _tuple$2[1];
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var f, ok, x, _tuple, _slice, _index, _slice$1, _index$1, _tuple$1, _slice$2, _index$2, _tuple$2;
		f = 0;
		ok = false;
		if (!((x = go$shiftRightUint64(mantissa, float32info.mantbits), (x.high === 0 && x.low === 0)))) {
			return [f, ok];
		}
		f = go$flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tuple = [f, true]; f = _tuple[0]; ok = _tuple[1];
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = f * ((_slice = float32pow10, _index = (exp - 10 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tuple$1 = [f * (_slice$1 = float32pow10, _index$1 = exp, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), true]; f = _tuple$1[0]; ok = _tuple$1[1];
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tuple$2 = [f / (_slice$2 = float32pow10, _index$2 = -exp, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), true]; f = _tuple$2[0]; ok = _tuple$2[1];
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var f, err, _tuple, val, ok, _tuple$1, _tuple$2, mantissa, exp, neg, trunc, ok$1, _tuple$3, f$1, ok$2, _tuple$4, ext, ok$3, _tuple$5, b, ovf, _tuple$6, d, _tuple$7, _tuple$8, b$1, ovf$1, _tuple$9;
		f = 0;
		err = null;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tuple$1 = [val, null]; f = _tuple$1[0]; err = _tuple$1[1];
			return [f, err];
		}
		if (optimize) {
			_tuple$2 = readFloat(s); mantissa = _tuple$2[0]; exp = _tuple$2[1]; neg = _tuple$2[2]; trunc = _tuple$2[3]; ok$1 = _tuple$2[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$3 = atof32exact(mantissa, exp, neg); f$1 = _tuple$3[0]; ok$2 = _tuple$3[1];
					if (ok$2) {
						_tuple$4 = [f$1, null]; f = _tuple$4[0]; err = _tuple$4[1];
						return [f, err];
					}
				}
				ext = new extFloat.Ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$5 = ext.floatBits(float32info); b = _tuple$5[0]; ovf = _tuple$5[1];
					f = math.Float32frombits((b.low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tuple$6 = [f, err]; f = _tuple$6[0]; err = _tuple$6[1];
					return [f, err];
				}
			}
		}
		d = new decimal.Ptr();
		if (!d.set(s)) {
			_tuple$7 = [0, syntaxError("ParseFloat", s)]; f = _tuple$7[0]; err = _tuple$7[1];
			return [f, err];
		}
		_tuple$8 = d.floatBits(float32info); b$1 = _tuple$8[0]; ovf$1 = _tuple$8[1];
		f = math.Float32frombits((b$1.low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tuple$9 = [f, err]; f = _tuple$9[0]; err = _tuple$9[1];
		return [f, err];
	};
	atof64 = function(s) {
		var f, err, _tuple, val, ok, _tuple$1, _tuple$2, mantissa, exp, neg, trunc, ok$1, _tuple$3, f$1, ok$2, _tuple$4, ext, ok$3, _tuple$5, b, ovf, _tuple$6, d, _tuple$7, _tuple$8, b$1, ovf$1, _tuple$9;
		f = 0;
		err = null;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tuple$1 = [val, null]; f = _tuple$1[0]; err = _tuple$1[1];
			return [f, err];
		}
		if (optimize) {
			_tuple$2 = readFloat(s); mantissa = _tuple$2[0]; exp = _tuple$2[1]; neg = _tuple$2[2]; trunc = _tuple$2[3]; ok$1 = _tuple$2[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$3 = atof64exact(mantissa, exp, neg); f$1 = _tuple$3[0]; ok$2 = _tuple$3[1];
					if (ok$2) {
						_tuple$4 = [f$1, null]; f = _tuple$4[0]; err = _tuple$4[1];
						return [f, err];
					}
				}
				ext = new extFloat.Ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$5 = ext.floatBits(float64info); b = _tuple$5[0]; ovf = _tuple$5[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tuple$6 = [f, err]; f = _tuple$6[0]; err = _tuple$6[1];
					return [f, err];
				}
			}
		}
		d = new decimal.Ptr();
		if (!d.set(s)) {
			_tuple$7 = [0, syntaxError("ParseFloat", s)]; f = _tuple$7[0]; err = _tuple$7[1];
			return [f, err];
		}
		_tuple$8 = d.floatBits(float64info); b$1 = _tuple$8[0]; ovf$1 = _tuple$8[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tuple$9 = [f, err]; f = _tuple$9[0]; err = _tuple$9[1];
		return [f, err];
	};
	ParseFloat = go$pkg.ParseFloat = function(s, bitSize) {
		var f, err, _tuple, f1, err1, _tuple$1, _tuple$2, f1$1, err1$1, _tuple$3;
		f = 0;
		err = null;
		if (bitSize === 32) {
			_tuple = atof32(s); f1 = _tuple[0]; err1 = _tuple[1];
			_tuple$1 = [go$coerceFloat32(f1), err1]; f = _tuple$1[0]; err = _tuple$1[1];
			return [f, err];
		}
		_tuple$2 = atof64(s); f1$1 = _tuple$2[0]; err1$1 = _tuple$2[1];
		_tuple$3 = [f1$1, err1$1]; f = _tuple$3[0]; err = _tuple$3[1];
		return [f, err];
	};
	NumError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + e.Err.Error();
	};
	NumError.prototype.Error = function() { return this.go$val.Error(); };
	syntaxError = function(fn, str) {
		return new NumError.Ptr(fn, str, go$pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		return new NumError.Ptr(fn, str, go$pkg.ErrRange);
	};
	cutoff64 = function(base) {
		var x;
		if (base < 2) {
			return new Go$Uint64(0, 0);
		}
		return (x = go$div64(new Go$Uint64(4294967295, 4294967295), new Go$Uint64(0, base), false), new Go$Uint64(x.high + 0, x.low + 1));
	};
	ParseUint = go$pkg.ParseUint = function(s, base, bitSize) {
		var go$this = this, n, err, _tuple, cutoff, maxVal, s0, x, i, v, d, x$1, n1, _tuple$1, _tuple$2;
		n = new Go$Uint64(0, 0);
		err = null;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		_tuple = [new Go$Uint64(0, 0), new Go$Uint64(0, 0)]; cutoff = _tuple[0]; maxVal = _tuple[1];
		if (bitSize === 0) {
			bitSize = 32;
		}
		s0 = s;
		/* if (s.length < 1) { */ if (s.length < 1) {} else if (2 <= base && base <= 36) { go$s = 2; continue; } else if (base === 0) { go$s = 3; continue; } else { go$s = 4; continue; }
			err = go$pkg.ErrSyntax;
			/* goto Error */ go$s = 1; continue;
		/* } else if (2 <= base && base <= 36) { */ go$s = 5; continue; case 2: 
		/* } else if (base === 0) { */ go$s = 5; continue; case 3: 
			/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) {} else if (s.charCodeAt(0) === 48) { go$s = 6; continue; } else { go$s = 7; continue; }
				base = 16;
				s = s.substring(2);
				/* if (s.length < 1) { */ if (s.length < 1) {} else { go$s = 9; continue; }
					err = go$pkg.ErrSyntax;
					/* goto Error */ go$s = 1; continue;
				/* } */ case 9:
			/* } else if (s.charCodeAt(0) === 48) { */ go$s = 8; continue; case 6: 
				base = 8;
			/* } else { */ go$s = 8; continue; case 7: 
				base = 10;
			/* } */ case 8:
		/* } else { */ go$s = 5; continue; case 4: 
			err = errors.New("invalid base " + Itoa(base));
			/* goto Error */ go$s = 1; continue;
		/* } */ case 5:
		n = new Go$Uint64(0, 0);
		cutoff = cutoff64(base);
		maxVal = (x = go$shiftLeft64(new Go$Uint64(0, 1), (bitSize >>> 0)), new Go$Uint64(x.high - 0, x.low - 1));
		i = 0;
		/* while (i < s.length) { */ case 10: if(!(i < s.length)) { go$s = 11; continue; }
			v = 0;
			d = s.charCodeAt(i);
			/* if (48 <= d && d <= 57) { */ if (48 <= d && d <= 57) {} else if (97 <= d && d <= 122) { go$s = 12; continue; } else if (65 <= d && d <= 90) { go$s = 13; continue; } else { go$s = 14; continue; }
				v = d - 48 << 24 >>> 24;
			/* } else if (97 <= d && d <= 122) { */ go$s = 15; continue; case 12: 
				v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else if (65 <= d && d <= 90) { */ go$s = 15; continue; case 13: 
				v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else { */ go$s = 15; continue; case 14: 
				n = new Go$Uint64(0, 0);
				err = go$pkg.ErrSyntax;
				/* goto Error */ go$s = 1; continue;
			/* } */ case 15:
			/* if ((v >> 0) >= base) { */ if ((v >> 0) >= base) {} else { go$s = 16; continue; }
				n = new Go$Uint64(0, 0);
				err = go$pkg.ErrSyntax;
				/* goto Error */ go$s = 1; continue;
			/* } */ case 16:
			/* if ((n.high > cutoff.high || (n.high === cutoff.high && n.low >= cutoff.low))) { */ if ((n.high > cutoff.high || (n.high === cutoff.high && n.low >= cutoff.low))) {} else { go$s = 17; continue; }
				n = new Go$Uint64(4294967295, 4294967295);
				err = go$pkg.ErrRange;
				/* goto Error */ go$s = 1; continue;
			/* } */ case 17:
			n = go$mul64(n, (new Go$Uint64(0, base)));
			n1 = (x$1 = new Go$Uint64(0, v), new Go$Uint64(n.high + x$1.high, n.low + x$1.low));
			/* if ((n1.high < n.high || (n1.high === n.high && n1.low < n.low)) || (n1.high > maxVal.high || (n1.high === maxVal.high && n1.low > maxVal.low))) { */ if ((n1.high < n.high || (n1.high === n.high && n1.low < n.low)) || (n1.high > maxVal.high || (n1.high === maxVal.high && n1.low > maxVal.low))) {} else { go$s = 18; continue; }
				n = new Go$Uint64(4294967295, 4294967295);
				err = go$pkg.ErrRange;
				/* goto Error */ go$s = 1; continue;
			/* } */ case 18:
			n = n1;
			i = i + 1 >> 0;
		/* } */ go$s = 10; continue; case 11:
		_tuple$1 = [n, null]; n = _tuple$1[0]; err = _tuple$1[1];
		return [n, err];
		/* Error: */ case 1:
		_tuple$2 = [n, new NumError.Ptr("ParseUint", s0, err)]; n = _tuple$2[0]; err = _tuple$2[1];
		return [n, err];
		/* */ } break; } }; return go$f();
	};
	ParseInt = go$pkg.ParseInt = function(s, base, bitSize) {
		var i, err, _tuple, s0, neg, un, _tuple$1, _tuple$2, cutoff, x, _tuple$3, x$1, _tuple$4, n, _tuple$5;
		i = new Go$Int64(0, 0);
		err = null;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tuple = [new Go$Int64(0, 0), syntaxError("ParseInt", s)]; i = _tuple[0]; err = _tuple[1];
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new Go$Uint64(0, 0);
		_tuple$1 = ParseUint(s, base, bitSize); un = _tuple$1[0]; err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null)) && !(go$interfaceIsEqual((err !== null && err.constructor === (go$ptrType(NumError)) ? err.go$val : go$typeAssertionFailed(err, (go$ptrType(NumError)))).Err, go$pkg.ErrRange))) {
			(err !== null && err.constructor === (go$ptrType(NumError)) ? err.go$val : go$typeAssertionFailed(err, (go$ptrType(NumError)))).Func = "ParseInt";
			(err !== null && err.constructor === (go$ptrType(NumError)) ? err.go$val : go$typeAssertionFailed(err, (go$ptrType(NumError)))).Num = s0;
			_tuple$2 = [new Go$Int64(0, 0), err]; i = _tuple$2[0]; err = _tuple$2[1];
			return [i, err];
		}
		cutoff = go$shiftLeft64(new Go$Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.high > cutoff.high || (un.high === cutoff.high && un.low >= cutoff.low))) {
			_tuple$3 = [(x = new Go$Uint64(cutoff.high - 0, cutoff.low - 1), new Go$Int64(x.high, x.low)), rangeError("ParseInt", s0)]; i = _tuple$3[0]; err = _tuple$3[1];
			return [i, err];
		}
		if (neg && (un.high > cutoff.high || (un.high === cutoff.high && un.low > cutoff.low))) {
			_tuple$4 = [(x$1 = new Go$Int64(cutoff.high, cutoff.low), new Go$Int64(-x$1.high, -x$1.low)), rangeError("ParseInt", s0)]; i = _tuple$4[0]; err = _tuple$4[1];
			return [i, err];
		}
		n = new Go$Int64(un.high, un.low);
		if (neg) {
			n = new Go$Int64(-n.high, -n.low);
		}
		_tuple$5 = [n, null]; i = _tuple$5[0]; err = _tuple$5[1];
		return [i, err];
	};
	Atoi = go$pkg.Atoi = function(s) {
		var i, err, _tuple, i64, _tuple$1;
		i = 0;
		err = null;
		_tuple = ParseInt(s, 10, 0); i64 = _tuple[0]; err = _tuple[1];
		_tuple$1 = [((i64.low + ((i64.high >> 31) * 4294967296)) >> 0), err]; i = _tuple$1[0]; err = _tuple$1[1];
		return [i, err];
	};
	decimal.Ptr.prototype.String = function() {
		var a, n, buf, w, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = (go$sliceType(Go$Uint8)).make(n, 0, function() { return 0; });
		w = 0;
		if (a.nd === 0) {
			return "0";
		} else if (a.dp <= 0) {
			_slice = buf; _index = w;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 48) : go$throwRuntimeError("index out of range");
			w = w + 1 >> 0;
			_slice$1 = buf; _index$1 = w;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 46) : go$throwRuntimeError("index out of range");
			w = w + 1 >> 0;
			w = w + (digitZero(go$subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + (go$copySlice(go$subslice(buf, w), go$subslice(new (go$sliceType(Go$Uint8))(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + (go$copySlice(go$subslice(buf, w), go$subslice(new (go$sliceType(Go$Uint8))(a.d), 0, a.dp))) >> 0;
			_slice$2 = buf; _index$2 = w;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 46) : go$throwRuntimeError("index out of range");
			w = w + 1 >> 0;
			w = w + (go$copySlice(go$subslice(buf, w), go$subslice(new (go$sliceType(Go$Uint8))(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + (go$copySlice(go$subslice(buf, w), go$subslice(new (go$sliceType(Go$Uint8))(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero(go$subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return go$bytesToString(go$subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.go$val.String(); };
	digitZero = function(dst) {
		var _ref, _i, i, _slice, _index;
		_ref = dst;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			_slice = dst; _index = i;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 48) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return dst.length;
	};
	trim = function(a) {
		while (a.nd > 0 && (a.d[(a.nd - 1 >> 0)] === 48)) {
			a.nd = a.nd - 1 >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.Ptr.prototype.Assign = function(v) {
		var a, buf, n, v1, x;
		a = this;
		buf = go$makeNativeArray("Uint8", 24, function() { return 0; });
		n = 0;
		while ((v.high > 0 || (v.high === 0 && v.low > 0))) {
			v1 = go$div64(v, new Go$Uint64(0, 10), false);
			v = (x = go$mul64(new Go$Uint64(0, 10), v1), new Go$Uint64(v.high - x.high, v.low - x.low));
			buf[n] = (new Go$Uint64(v.high + 0, v.low + 48).low << 24 >>> 24);
			n = n + 1 >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - 1 >> 0;
		while (n >= 0) {
			a.d[a.nd] = buf[n];
			a.nd = a.nd + 1 >> 0;
			n = n - 1 >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.go$val.Assign(v); };
	rightShift = function(a, k) {
		var r, w, n, c, c$1, dig, y, dig$1, y$1;
		r = 0;
		w = 0;
		n = 0;
		while (((n >> go$min(k, 31)) >> 0) === 0) {
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (((n >> go$min(k, 31)) >> 0) === 0) {
					n = (((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0;
					r = r + 1 >> 0;
				}
				break;
			}
			c = (a.d[r] >> 0);
			n = (((((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0) + c >> 0) - 48 >> 0;
			r = r + 1 >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (r < a.nd) {
			c$1 = (a.d[r] >> 0);
			dig = (n >> go$min(k, 31)) >> 0;
			n = n - (((y = k, y < 32 ? (dig << y) : 0) >> 0)) >> 0;
			a.d[w] = ((dig + 48 >> 0) << 24 >>> 24);
			w = w + 1 >> 0;
			n = (((((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0) + c$1 >> 0) - 48 >> 0;
			r = r + 1 >> 0;
		}
		while (n > 0) {
			dig$1 = (n >> go$min(k, 31)) >> 0;
			n = n - (((y$1 = k, y$1 < 32 ? (dig$1 << y$1) : 0) >> 0)) >> 0;
			if (w < 800) {
				a.d[w] = ((dig$1 + 48 >> 0) << 24 >>> 24);
				w = w + 1 >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = (((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var i, _slice, _index, _slice$1, _index$1;
		i = 0;
		while (i < s.length) {
			if (i >= b.length) {
				return true;
			}
			if (!(((_slice = b, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === s.charCodeAt(i)))) {
				return (_slice$1 = b, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) < s.charCodeAt(i);
			}
			i = i + 1 >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var _slice, _index, delta, _slice$1, _index$1, r, w, n, y, _q, quo, rem, _q$1, quo$1, rem$1;
		delta = (_slice = leftcheats, _index = k, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).delta;
		if (prefixIsLessThan(go$subslice(new (go$sliceType(Go$Uint8))(a.d), 0, a.nd), (_slice$1 = leftcheats, _index$1 = k, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).cutoff)) {
			delta = delta - 1 >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - 1 >> 0;
		while (r >= 0) {
			n = n + (((y = k, y < 32 ? ((((a.d[r] >> 0) - 48 >> 0)) << y) : 0) >> 0)) >> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
			rem = n - ((((10 >>> 16 << 16) * quo >> 0) + (10 << 16 >>> 16) * quo) >> 0) >> 0;
			w = w - 1 >> 0;
			if (w < 800) {
				a.d[w] = ((rem + 48 >> 0) << 24 >>> 24);
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - 1 >> 0;
		}
		while (n > 0) {
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
			rem$1 = n - ((((10 >>> 16 << 16) * quo$1 >> 0) + (10 << 16 >>> 16) * quo$1) >> 0) >> 0;
			w = w - 1 >> 0;
			if (w < 800) {
				a.d[w] = ((rem$1 + 48 >> 0) << 24 >>> 24);
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.Ptr.prototype.Shift = function(k) {
		var a;
		a = this;
		if (a.nd === 0) {
		} else if (k > 0) {
			while (k > 27) {
				leftShift(a, 27);
				k = k - 27 >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (k < -27) {
				rightShift(a, 27);
				k = k + 27 >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.go$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var _r;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if ((a.d[nd] === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = ((a.d[(nd - 1 >> 0)] - 48 << 24 >>> 24)) % 2, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0));
		}
		return a.d[nd] >= 53;
	};
	decimal.Ptr.prototype.Round = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.go$val.Round(nd); };
	decimal.Ptr.prototype.RoundDown = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.go$val.RoundDown(nd); };
	decimal.Ptr.prototype.RoundUp = function(nd) {
		var a, i, c, _lhs, _index;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (i >= 0) {
			c = a.d[i];
			if (c < 57) {
				_lhs = a.d; _index = i; _lhs[_index] = _lhs[_index] + 1 << 24 >>> 24;
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - 1 >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + 1 >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.go$val.RoundUp(nd); };
	decimal.Ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1;
		a = this;
		if (a.dp > 20) {
			return new Go$Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new Go$Uint64(0, 0);
		i = 0;
		while (i < a.dp && i < a.nd) {
			n = (x = go$mul64(n, new Go$Uint64(0, 10)), x$1 = new Go$Uint64(0, (a.d[i] - 48 << 24 >>> 24)), new Go$Uint64(x.high + x$1.high, x.low + x$1.low));
			i = i + 1 >> 0;
		}
		while (i < a.dp) {
			n = go$mul64(n, new Go$Uint64(0, 10));
			i = i + 1 >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = new Go$Uint64(n.high + 0, n.low + 1);
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.go$val.RoundedInteger(); };
	extFloat.Ptr.prototype.floatBits = function(flt) {
		var bits, overflow, f, exp, n, mant, x, x$1, x$2, x$3, y, x$4, x$5, y$1, x$6, x$7, x$8, y$2, x$9;
		bits = new Go$Uint64(0, 0);
		overflow = false;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = go$shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = go$shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = go$shiftLeft64(new Go$Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new Go$Uint64(x$1.high & x$2.high, (x$1.low & x$2.low) >>> 0)), (x.high === 0 && x.low === 0)))) {
			mant = new Go$Uint64(mant.high + 0, mant.low + 1);
		}
		if ((x$3 = go$shiftLeft64(new Go$Uint64(0, 2), flt.mantbits), (mant.high === x$3.high && mant.low === x$3.low))) {
			mant = go$shiftRightUint64(mant, 1);
			exp = exp + 1 >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new Go$Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$4 = (x$5 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), new Go$Uint64(mant.high & x$5.high, (mant.low & x$5.low) >>> 0)), (x$4.high === 0 && x$4.low === 0))) {
			exp = flt.bias;
		}
		bits = (x$6 = (x$7 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), new Go$Uint64(x$7.high - 0, x$7.low - 1)), new Go$Uint64(mant.high & x$6.high, (mant.low & x$6.low) >>> 0));
		bits = (x$8 = go$shiftLeft64(new Go$Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new Go$Uint64(bits.high | x$8.high, (bits.low | x$8.low) >>> 0));
		if (f.neg) {
			bits = (x$9 = go$shiftLeft64(new Go$Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new Go$Uint64(bits.high | x$9.high, (bits.low | x$9.low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.go$val.floatBits(flt); };
	extFloat.Ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var lower, upper, f, x, _struct, _struct$1, _tuple, _struct$2, _struct$3, expBiased, x$1, x$2, x$3, x$4, _struct$4, _struct$5;
		lower = new extFloat.Ptr();
		upper = new extFloat.Ptr();
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = go$shiftLeft64((go$shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.high === x.high && mant.low === x.low))) {
			f.mant = go$shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tuple = [(_struct = f, new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)), (_struct$1 = f, new extFloat.Ptr(_struct$1.mant, _struct$1.exp, _struct$1.neg))]; lower = _tuple[0]; upper = _tuple[1];
			return [(_struct$2 = lower, new extFloat.Ptr(_struct$2.mant, _struct$2.exp, _struct$2.neg)), (_struct$3 = upper, new extFloat.Ptr(_struct$3.mant, _struct$3.exp, _struct$3.neg))];
		}
		expBiased = exp - flt.bias >> 0;
		upper = new extFloat.Ptr((x$1 = go$mul64(new Go$Uint64(0, 2), f.mant), new Go$Uint64(x$1.high + 0, x$1.low + 1)), f.exp - 1 >> 0, f.neg);
		if (!((x$2 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), (mant.high === x$2.high && mant.low === x$2.low))) || (expBiased === 1)) {
			lower = new extFloat.Ptr((x$3 = go$mul64(new Go$Uint64(0, 2), f.mant), new Go$Uint64(x$3.high - 0, x$3.low - 1)), f.exp - 1 >> 0, f.neg);
		} else {
			lower = new extFloat.Ptr((x$4 = go$mul64(new Go$Uint64(0, 4), f.mant), new Go$Uint64(x$4.high - 0, x$4.low - 1)), f.exp - 2 >> 0, f.neg);
		}
		return [(_struct$4 = lower, new extFloat.Ptr(_struct$4.mant, _struct$4.exp, _struct$4.neg)), (_struct$5 = upper, new extFloat.Ptr(_struct$5.mant, _struct$5.exp, _struct$5.neg))];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.go$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.Ptr.prototype.Normalize = function() {
		var shift, f, _tuple, mant, exp, x, x$1, x$2, x$3, x$4, x$5, _tuple$1;
		shift = 0;
		f = this;
		_tuple = [f.mant, f.exp]; mant = _tuple[0]; exp = _tuple[1];
		if ((mant.high === 0 && mant.low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = go$shiftRightUint64(mant, 32), (x.high === 0 && x.low === 0))) {
			mant = go$shiftLeft64(mant, 32);
			exp = exp - 32 >> 0;
		}
		if ((x$1 = go$shiftRightUint64(mant, 48), (x$1.high === 0 && x$1.low === 0))) {
			mant = go$shiftLeft64(mant, 16);
			exp = exp - 16 >> 0;
		}
		if ((x$2 = go$shiftRightUint64(mant, 56), (x$2.high === 0 && x$2.low === 0))) {
			mant = go$shiftLeft64(mant, 8);
			exp = exp - 8 >> 0;
		}
		if ((x$3 = go$shiftRightUint64(mant, 60), (x$3.high === 0 && x$3.low === 0))) {
			mant = go$shiftLeft64(mant, 4);
			exp = exp - 4 >> 0;
		}
		if ((x$4 = go$shiftRightUint64(mant, 62), (x$4.high === 0 && x$4.low === 0))) {
			mant = go$shiftLeft64(mant, 2);
			exp = exp - 2 >> 0;
		}
		if ((x$5 = go$shiftRightUint64(mant, 63), (x$5.high === 0 && x$5.low === 0))) {
			mant = go$shiftLeft64(mant, 1);
			exp = exp - 1 >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tuple$1 = [mant, exp]; f.mant = _tuple$1[0]; f.exp = _tuple$1[1];
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.go$val.Normalize(); };
	extFloat.Ptr.prototype.Multiply = function(g) {
		var f, _tuple, fhi, flo, _tuple$1, ghi, glo, cross1, cross2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, rem, x$8, x$9;
		f = this;
		_tuple = [go$shiftRightUint64(f.mant, 32), new Go$Uint64(0, (f.mant.low >>> 0))]; fhi = _tuple[0]; flo = _tuple[1];
		_tuple$1 = [go$shiftRightUint64(g.mant, 32), new Go$Uint64(0, (g.mant.low >>> 0))]; ghi = _tuple$1[0]; glo = _tuple$1[1];
		cross1 = go$mul64(fhi, glo);
		cross2 = go$mul64(flo, ghi);
		f.mant = (x = (x$1 = go$mul64(fhi, ghi), x$2 = go$shiftRightUint64(cross1, 32), new Go$Uint64(x$1.high + x$2.high, x$1.low + x$2.low)), x$3 = go$shiftRightUint64(cross2, 32), new Go$Uint64(x.high + x$3.high, x.low + x$3.low));
		rem = (x$4 = (x$5 = new Go$Uint64(0, (cross1.low >>> 0)), x$6 = new Go$Uint64(0, (cross2.low >>> 0)), new Go$Uint64(x$5.high + x$6.high, x$5.low + x$6.low)), x$7 = go$shiftRightUint64((go$mul64(flo, glo)), 32), new Go$Uint64(x$4.high + x$7.high, x$4.low + x$7.low));
		rem = new Go$Uint64(rem.high + 0, rem.low + 2147483648);
		f.mant = (x$8 = f.mant, x$9 = (go$shiftRightUint64(rem, 32)), new Go$Uint64(x$8.high + x$9.high, x$8.low + x$9.low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.go$val.Multiply(g); };
	extFloat.Ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var ok, f, errors$1, _q, i, _r, adjExp, x, _struct, _struct$1, shift, y, denormalExp, extrabits, halfway, x$1, x$2, x$3, mant_extra, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11;
		ok = false;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + 4 >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = uint64pow10[(19 - adjExp >> 0)], (mantissa.high < x.high || (mantissa.high === x.high && mantissa.low < x.low)))) {
			f.mant = go$mul64(f.mant, (uint64pow10[adjExp]));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply((_struct = smallPowersOfTen[adjExp], new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)));
			errors$1 = errors$1 + 4 >> 0;
		}
		f.Multiply((_struct$1 = powersOfTen[i], new extFloat.Ptr(_struct$1.mant, _struct$1.exp, _struct$1.neg)));
		if (errors$1 > 0) {
			errors$1 = errors$1 + 1 >> 0;
		}
		errors$1 = errors$1 + 4 >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = go$shiftLeft64(new Go$Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$1 = f.mant, x$2 = (x$3 = go$shiftLeft64(new Go$Uint64(0, 1), extrabits), new Go$Uint64(x$3.high - 0, x$3.low - 1)), new Go$Uint64(x$1.high & x$2.high, (x$1.low & x$2.low) >>> 0));
		if ((x$4 = (x$5 = new Go$Int64(halfway.high, halfway.low), x$6 = new Go$Int64(0, errors$1), new Go$Int64(x$5.high - x$6.high, x$5.low - x$6.low)), x$7 = new Go$Int64(mant_extra.high, mant_extra.low), (x$4.high < x$7.high || (x$4.high === x$7.high && x$4.low < x$7.low))) && (x$8 = new Go$Int64(mant_extra.high, mant_extra.low), x$9 = (x$10 = new Go$Int64(halfway.high, halfway.low), x$11 = new Go$Int64(0, errors$1), new Go$Int64(x$10.high + x$11.high, x$10.low + x$11.low)), (x$8.high < x$9.high || (x$8.high === x$9.high && x$8.low < x$9.low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.go$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.Ptr.prototype.frexp10 = function() {
		var exp10, index, f, _q, x, approxExp10, _q$1, i, exp, _struct, _tuple;
		exp10 = 0;
		index = 0;
		f = this;
		approxExp10 = (_q = (x = (-46 - f.exp >> 0), (((x >>> 16 << 16) * 28 >> 0) + (x << 16 >>> 16) * 28) >> 0) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + powersOfTen[i].exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + 1 >> 0;
			} else if (exp > -32) {
				i = i - 1 >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply((_struct = powersOfTen[i], new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)));
		_tuple = [-((-348 + ((((i >>> 16 << 16) * 8 >> 0) + (i << 16 >>> 16) * 8) >> 0) >> 0)), i]; exp10 = _tuple[0]; index = _tuple[1];
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.go$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var exp10, _tuple, i, _struct, _struct$1;
		exp10 = 0;
		_tuple = c.frexp10(); exp10 = _tuple[0]; i = _tuple[1];
		a.Multiply((_struct = powersOfTen[i], new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)));
		b.Multiply((_struct$1 = powersOfTen[i], new extFloat.Ptr(_struct$1.mant, _struct$1.exp, _struct$1.neg)));
		return exp10;
	};
	extFloat.Ptr.prototype.FixedDecimal = function(d, n) {
		var f, x, _tuple, exp10, shift, integer, x$1, x$2, fraction, nonAsciiName, needed, integerDigits, pow10, _tuple$1, i, pow, x$3, rest, _q, x$4, buf, pos, v, _q$1, v1, i$1, _slice, _index, nd, x$5, x$6, digit, _slice$1, _index$1, x$7, x$8, ok, i$2, _slice$2, _index$2;
		f = this;
		if ((x = f.mant, (x.high === 0 && x.low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			throw go$panic(new Go$String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10(); exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = (go$shiftRightUint64(f.mant, shift).low >>> 0);
		fraction = (x$1 = f.mant, x$2 = go$shiftLeft64(new Go$Uint64(0, integer), shift), new Go$Uint64(x$1.high - x$2.high, x$1.low - x$2.low));
		nonAsciiName = new Go$Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new Go$Uint64(0, 1);
		_tuple$1 = [0, new Go$Uint64(0, 1)]; i = _tuple$1[0]; pow = _tuple$1[1];
		while (i < 20) {
			if ((x$3 = new Go$Uint64(0, integer), (pow.high > x$3.high || (pow.high === x$3.high && pow.low > x$3.low)))) {
				integerDigits = i;
				break;
			}
			pow = go$mul64(pow, new Go$Uint64(0, 10));
			i = i + 1 >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = uint64pow10[(integerDigits - needed >> 0)];
			integer = (_q = integer / ((pow10.low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
			rest = rest - ((x$4 = (pow10.low >>> 0), (((integer >>> 16 << 16) * x$4 >>> 0) + (integer << 16 >>> 16) * x$4) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		pos = 32;
		v = integer;
		while (v > 0) {
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : go$throwRuntimeError("integer divide by zero"));
			v = v - (((((10 >>> 16 << 16) * v1 >>> 0) + (10 << 16 >>> 16) * v1) >>> 0)) >>> 0;
			pos = pos - 1 >> 0;
			buf[pos] = ((v + 48 >>> 0) << 24 >>> 24);
			v = v1;
		}
		i$1 = pos;
		while (i$1 < 32) {
			_slice = d.d; _index = i$1 - pos >> 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = buf[i$1]) : go$throwRuntimeError("index out of range");
			i$1 = i$1 + 1 >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.high === 0 && pow10.low === 1))) {
				throw go$panic(new Go$String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (needed > 0) {
				fraction = go$mul64(fraction, new Go$Uint64(0, 10));
				nonAsciiName = go$mul64(nonAsciiName, new Go$Uint64(0, 10));
				if ((x$5 = go$mul64(new Go$Uint64(0, 2), nonAsciiName), x$6 = go$shiftLeft64(new Go$Uint64(0, 1), shift), (x$5.high > x$6.high || (x$5.high === x$6.high && x$5.low > x$6.low)))) {
					return false;
				}
				digit = go$shiftRightUint64(fraction, shift);
				_slice$1 = d.d; _index$1 = nd;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (new Go$Uint64(digit.high + 0, digit.low + 48).low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
				fraction = (x$7 = go$shiftLeft64(digit, shift), new Go$Uint64(fraction.high - x$7.high, fraction.low - x$7.low));
				nd = nd + 1 >> 0;
				needed = needed - 1 >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$8 = go$shiftLeft64(new Go$Uint64(0, rest), shift), new Go$Uint64(x$8.high | fraction.high, (x$8.low | fraction.low) >>> 0)), pow10, shift, nonAsciiName);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (i$2 >= 0) {
			if (!(((_slice$2 = d.d, _index$2 = i$2, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - 1 >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.go$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, nonAsciiName) {
		var x, x$1, x$2, x$3, x$4, x$5, x$6, i, _slice, _index, _slice$1, _index$1, _lhs, _index$2, _slice$2, _index$3, _slice$3, _index$4;
		if ((x = go$shiftLeft64(den, shift), (num.high > x.high || (num.high === x.high && num.low > x.low)))) {
			throw go$panic(new Go$String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = go$mul64(new Go$Uint64(0, 2), nonAsciiName), x$2 = go$shiftLeft64(den, shift), (x$1.high > x$2.high || (x$1.high === x$2.high && x$1.low > x$2.low)))) {
			throw go$panic(new Go$String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = go$mul64(new Go$Uint64(0, 2), (new Go$Uint64(num.high + nonAsciiName.high, num.low + nonAsciiName.low))), x$4 = go$shiftLeft64(den, shift), (x$3.high < x$4.high || (x$3.high === x$4.high && x$3.low < x$4.low)))) {
			return true;
		}
		if ((x$5 = go$mul64(new Go$Uint64(0, 2), (new Go$Uint64(num.high - nonAsciiName.high, num.low - nonAsciiName.low))), x$6 = go$shiftLeft64(den, shift), (x$5.high > x$6.high || (x$5.high === x$6.high && x$5.low > x$6.low)))) {
			i = d.nd - 1 >> 0;
			while (i >= 0) {
				if ((_slice = d.d, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 57) {
					d.nd = d.nd - 1 >> 0;
				} else {
					break;
				}
				i = i - 1 >> 0;
			}
			if (i < 0) {
				_slice$1 = d.d; _index$1 = 0;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 49) : go$throwRuntimeError("index out of range");
				d.nd = 1;
				d.dp = d.dp + 1 >> 0;
			} else {
				_lhs = d.d; _index$2 = i; _slice$3 = _lhs; _index$4 = _index$2;(_index$4 >= 0 && _index$4 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$4] = (_slice$2 = _lhs, _index$3 = _index$2, (_index$3 >= 0 && _index$3 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$3] : go$throwRuntimeError("index out of range")) + 1 << 24 >>> 24) : go$throwRuntimeError("index out of range");
			}
			return true;
		}
		return false;
	};
	extFloat.Ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var f, x, x$1, y, x$2, y$1, buf, n, v, v1, x$3, nd, i, _slice, _index, _tuple, _slice$1, _index$1, exp10, x$4, x$5, shift, integer, x$6, x$7, fraction, x$8, x$9, allowance, x$10, x$11, targetDiff, integerDigits, _tuple$1, i$1, pow, x$12, i$2, pow$1, _q, digit, _slice$2, _index$2, x$13, x$14, currentDiff, digit$1, multiplier, _slice$3, _index$3, x$15, x$16;
		f = this;
		if ((x = f.mant, (x.high === 0 && x.low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && (x$1 = lower, y = f, (x$1.mant.high === y.mant.high && x$1.mant.low === y.mant.low) && x$1.exp === y.exp && x$1.neg === y.neg) && (x$2 = lower, y$1 = upper, (x$2.mant.high === y$1.mant.high && x$2.mant.low === y$1.mant.low) && x$2.exp === y$1.exp && x$2.neg === y$1.neg)) {
			buf = go$makeNativeArray("Uint8", 24, function() { return 0; });
			n = 23;
			v = f.mant;
			while ((v.high > 0 || (v.high === 0 && v.low > 0))) {
				v1 = go$div64(v, new Go$Uint64(0, 10), false);
				v = (x$3 = go$mul64(new Go$Uint64(0, 10), v1), new Go$Uint64(v.high - x$3.high, v.low - x$3.low));
				buf[n] = (new Go$Uint64(v.high + 0, v.low + 48).low << 24 >>> 24);
				n = n - 1 >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (i < nd) {
				_slice = d.d; _index = i;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = buf[((n + 1 >> 0) + i >> 0)]) : go$throwRuntimeError("index out of range");
				i = i + 1 >> 0;
			}
			_tuple = [nd, nd]; d.nd = _tuple[0]; d.dp = _tuple[1];
			while (d.nd > 0 && ((_slice$1 = d.d, _index$1 = (d.nd - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 48)) {
				d.nd = d.nd - 1 >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = go$shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = go$shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$4 = upper.mant, new Go$Uint64(x$4.high + 0, x$4.low + 1));
		lower.mant = (x$5 = lower.mant, new Go$Uint64(x$5.high - 0, x$5.low - 1));
		shift = (-upper.exp >>> 0);
		integer = (go$shiftRightUint64(upper.mant, shift).low >>> 0);
		fraction = (x$6 = upper.mant, x$7 = go$shiftLeft64(new Go$Uint64(0, integer), shift), new Go$Uint64(x$6.high - x$7.high, x$6.low - x$7.low));
		allowance = (x$8 = upper.mant, x$9 = lower.mant, new Go$Uint64(x$8.high - x$9.high, x$8.low - x$9.low));
		targetDiff = (x$10 = upper.mant, x$11 = f.mant, new Go$Uint64(x$10.high - x$11.high, x$10.low - x$11.low));
		integerDigits = 0;
		_tuple$1 = [0, new Go$Uint64(0, 1)]; i$1 = _tuple$1[0]; pow = _tuple$1[1];
		while (i$1 < 20) {
			if ((x$12 = new Go$Uint64(0, integer), (pow.high > x$12.high || (pow.high === x$12.high && pow.low > x$12.low)))) {
				integerDigits = i$1;
				break;
			}
			pow = go$mul64(pow, new Go$Uint64(0, 10));
			i$1 = i$1 + 1 >> 0;
		}
		i$2 = 0;
		while (i$2 < integerDigits) {
			pow$1 = uint64pow10[((integerDigits - i$2 >> 0) - 1 >> 0)];
			digit = (_q = integer / (pow$1.low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
			_slice$2 = d.d; _index$2 = i$2;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = ((digit + 48 >>> 0) << 24 >>> 24)) : go$throwRuntimeError("index out of range");
			integer = integer - ((x$13 = (pow$1.low >>> 0), (((digit >>> 16 << 16) * x$13 >>> 0) + (digit << 16 >>> 16) * x$13) >>> 0)) >>> 0;
			currentDiff = (x$14 = go$shiftLeft64(new Go$Uint64(0, integer), shift), new Go$Uint64(x$14.high + fraction.high, x$14.low + fraction.low));
			if ((currentDiff.high < allowance.high || (currentDiff.high === allowance.high && currentDiff.low < allowance.low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, go$shiftLeft64(pow$1, shift), new Go$Uint64(0, 2));
			}
			i$2 = i$2 + 1 >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new Go$Uint64(0, 1);
		while (true) {
			fraction = go$mul64(fraction, new Go$Uint64(0, 10));
			multiplier = go$mul64(multiplier, new Go$Uint64(0, 10));
			digit$1 = (go$shiftRightUint64(fraction, shift).low >> 0);
			_slice$3 = d.d; _index$3 = d.nd;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = ((digit$1 + 48 >> 0) << 24 >>> 24)) : go$throwRuntimeError("index out of range");
			d.nd = d.nd + 1 >> 0;
			fraction = (x$15 = go$shiftLeft64(new Go$Uint64(0, digit$1), shift), new Go$Uint64(fraction.high - x$15.high, fraction.low - x$15.low));
			if ((x$16 = go$mul64(allowance, multiplier), (fraction.high < x$16.high || (fraction.high === x$16.high && fraction.low < x$16.low)))) {
				return adjustLastDigit(d, fraction, go$mul64(targetDiff, multiplier), go$mul64(allowance, multiplier), go$shiftLeft64(new Go$Uint64(0, 1), shift), go$mul64(multiplier, new Go$Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.go$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var x, x$1, x$2, x$3, _lhs, _index, _slice, _index$1, _slice$1, _index$2, x$4, x$5, x$6, x$7, x$8, x$9, _slice$2, _index$3;
		if ((x = go$mul64(new Go$Uint64(0, 2), ulpBinary), (ulpDecimal.high < x.high || (ulpDecimal.high === x.high && ulpDecimal.low < x.low)))) {
			return false;
		}
		while ((x$1 = (x$2 = (x$3 = go$div64(ulpDecimal, new Go$Uint64(0, 2), false), new Go$Uint64(currentDiff.high + x$3.high, currentDiff.low + x$3.low)), new Go$Uint64(x$2.high + ulpBinary.high, x$2.low + ulpBinary.low)), (x$1.high < targetDiff.high || (x$1.high === targetDiff.high && x$1.low < targetDiff.low)))) {
			_lhs = d.d; _index = d.nd - 1 >> 0; _slice$1 = _lhs; _index$2 = _index;(_index$2 >= 0 && _index$2 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$2] = (_slice = _lhs, _index$1 = _index, (_index$1 >= 0 && _index$1 < _slice.length) ? _slice.array[_slice.offset + _index$1] : go$throwRuntimeError("index out of range")) - 1 << 24 >>> 24) : go$throwRuntimeError("index out of range");
			currentDiff = (x$4 = ulpDecimal, new Go$Uint64(currentDiff.high + x$4.high, currentDiff.low + x$4.low));
		}
		if ((x$5 = new Go$Uint64(currentDiff.high + ulpDecimal.high, currentDiff.low + ulpDecimal.low), x$6 = (x$7 = (x$8 = go$div64(ulpDecimal, new Go$Uint64(0, 2), false), new Go$Uint64(targetDiff.high + x$8.high, targetDiff.low + x$8.low)), new Go$Uint64(x$7.high + ulpBinary.high, x$7.low + ulpBinary.low)), (x$5.high < x$6.high || (x$5.high === x$6.high && x$5.low <= x$6.low)))) {
			return false;
		}
		if ((currentDiff.high < ulpBinary.high || (currentDiff.high === ulpBinary.high && currentDiff.low < ulpBinary.low)) || (x$9 = new Go$Uint64(maxDiff.high - ulpBinary.high, maxDiff.low - ulpBinary.low), (currentDiff.high > x$9.high || (currentDiff.high === x$9.high && currentDiff.low > x$9.low)))) {
			return false;
		}
		if ((d.nd === 1) && ((_slice$2 = d.d, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$3] : go$throwRuntimeError("index out of range")) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = go$pkg.FormatFloat = function(f, fmt, prec, bitSize) {
		return go$bytesToString(genericFtoa((go$sliceType(Go$Uint8)).make(0, max(prec + 4 >> 0, 24), function() { return 0; }), f, fmt, prec, bitSize));
	};
	AppendFloat = go$pkg.AppendFloat = function(dst, f, fmt, prec, bitSize) {
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var bits, flt, _ref, x, neg, y, exp, x$1, x$2, mant, _ref$1, y$1, s, x$3, digs, ok, shortest, f, _tuple, _struct, lower, _struct$1, upper, buf, _ref$2, digits, _ref$3, buf$1, f$1, _struct$2;
		bits = new Go$Uint64(0, 0);
		flt = (go$ptrType(floatInfo)).nil;
		_ref = bitSize;
		if (_ref === 32) {
			bits = new Go$Uint64(0, math.Float32bits(val));
			flt = float32info;
		} else if (_ref === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			throw go$panic(new Go$String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = go$shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.high === 0 && x.low === 0)));
		exp = (go$shiftRightUint64(bits, flt.mantbits).low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), new Go$Uint64(x$2.high - 0, x$2.low - 1)), new Go$Uint64(bits.high & x$1.high, (bits.low & x$1.low) >>> 0));
		_ref$1 = exp;
		if (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {
			s = "";
			if (!((mant.high === 0 && mant.low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
		} else if (_ref$1 === 0) {
			exp = exp + 1 >> 0;
		} else {
			mant = (x$3 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), new Go$Uint64(mant.high | x$3.high, (mant.low | x$3.low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.Ptr();
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.Ptr();
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt); lower = (_struct = _tuple[0], new extFloat.Ptr(_struct.mant, _struct.exp, _struct.neg)); upper = (_struct$1 = _tuple[1], new extFloat.Ptr(_struct$1.mant, _struct$1.exp, _struct$1.neg));
			buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
			digs.d = new (go$sliceType(Go$Uint8))(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_ref$2 = fmt;
			if (_ref$2 === 101 || _ref$2 === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref$2 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref$2 === 103 || _ref$2 === 71) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_ref$3 = fmt;
			if (_ref$3 === 101 || _ref$3 === 69) {
				digits = digits + 1 >> 0;
			} else if (_ref$3 === 103 || _ref$3 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = go$makeNativeArray("Uint8", 24, function() { return 0; });
				digs.d = new (go$sliceType(Go$Uint8))(buf$1);
				f$1 = new extFloat.Ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, (_struct$2 = digs, new decimalSlice.Ptr(_struct$2.d, _struct$2.nd, _struct$2.dp, _struct$2.neg)), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var d, digs, shortest, _ref, _ref$1, _struct;
		d = new decimal.Ptr();
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.Ptr();
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			digs = new decimalSlice.Ptr(new (go$sliceType(Go$Uint8))(d.d), d.nd, d.dp, false);
			_ref = fmt;
			if (_ref === 101 || _ref === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref === 103 || _ref === 71) {
				prec = digs.nd;
			}
		} else {
			_ref$1 = fmt;
			if (_ref$1 === 101 || _ref$1 === 69) {
				d.Round(prec + 1 >> 0);
			} else if (_ref$1 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if (_ref$1 === 103 || _ref$1 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			digs = new decimalSlice.Ptr(new (go$sliceType(Go$Uint8))(d.d), d.nd, d.dp, false);
		}
		return formatDigits(dst, shortest, neg, (_struct = digs, new decimalSlice.Ptr(_struct.d, _struct.nd, _struct.dp, _struct.neg)), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _ref, _struct, _struct$1, eprec, exp, _struct$2, _struct$3;
		_ref = fmt;
		if (_ref === 101 || _ref === 69) {
			return fmtE(dst, neg, (_struct = digs, new decimalSlice.Ptr(_struct.d, _struct.nd, _struct.dp, _struct.neg)), prec, fmt);
		} else if (_ref === 102) {
			return fmtF(dst, neg, (_struct$1 = digs, new decimalSlice.Ptr(_struct$1.d, _struct$1.nd, _struct$1.dp, _struct$1.neg)), prec);
		} else if (_ref === 103 || _ref === 71) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, (_struct$2 = digs, new decimalSlice.Ptr(_struct$2.d, _struct$2.nd, _struct$2.dp, _struct$2.neg)), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, (_struct$3 = digs, new decimalSlice.Ptr(_struct$3.d, _struct$3.nd, _struct$3.dp, _struct$3.neg)), max(prec - digs.dp >> 0, 0));
		}
		return go$append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var minexp, x, x$1, upper, x$2, mantlo, explo, x$3, x$4, lower, x$5, x$6, inclusive, i, _tuple, l, m, u, okdown, okup;
		if ((mant.high === 0 && mant.low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && (x = (d.dp - d.nd >> 0), (((332 >>> 16 << 16) * x >> 0) + (332 << 16 >>> 16) * x) >> 0) >= (x$1 = (exp - (flt.mantbits >> 0) >> 0), (((100 >>> 16 << 16) * x$1 >> 0) + (100 << 16 >>> 16) * x$1) >> 0)) {
			return;
		}
		upper = new decimal.Ptr();
		upper.Assign((x$2 = go$mul64(mant, new Go$Uint64(0, 2)), new Go$Uint64(x$2.high + 0, x$2.low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new Go$Uint64(0, 0);
		explo = 0;
		if ((x$3 = go$shiftLeft64(new Go$Uint64(0, 1), flt.mantbits), (mant.high > x$3.high || (mant.high === x$3.high && mant.low > x$3.low))) || (exp === minexp)) {
			mantlo = new Go$Uint64(mant.high - 0, mant.low - 1);
			explo = exp;
		} else {
			mantlo = (x$4 = go$mul64(mant, new Go$Uint64(0, 2)), new Go$Uint64(x$4.high - 0, x$4.low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.Ptr();
		lower.Assign((x$5 = go$mul64(mantlo, new Go$Uint64(0, 2)), new Go$Uint64(x$5.high + 0, x$5.low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$6 = go$div64(mant, new Go$Uint64(0, 2), true), (x$6.high === 0 && x$6.low === 0));
		i = 0;
		while (i < d.nd) {
			_tuple = [0, 0, 0]; l = _tuple[0]; m = _tuple[1]; u = _tuple[2];
			if (i < lower.nd) {
				l = lower.d[i];
			} else {
				l = 48;
			}
			m = d.d[i];
			if (i < upper.nd) {
				u = upper.d[i];
			} else {
				u = 48;
			}
			okdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + 1 >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var ch, _slice, _index, i, m, _slice$1, _index$1, exp, buf, i$1, _r, _q, _ref;
		if (neg) {
			dst = go$append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (_slice = d.d, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		dst = go$append(dst, ch);
		if (prec > 0) {
			dst = go$append(dst, 46);
			i = 1;
			m = ((d.nd + prec >> 0) + 1 >> 0) - max(d.nd, prec + 1 >> 0) >> 0;
			while (i < m) {
				dst = go$append(dst, (_slice$1 = d.d, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
				i = i + 1 >> 0;
			}
			while (i <= prec) {
				dst = go$append(dst, 48);
				i = i + 1 >> 0;
			}
		}
		dst = go$append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = go$append(dst, ch);
		buf = go$makeNativeArray("Uint8", 3, function() { return 0; });
		i$1 = 3;
		while (exp >= 10) {
			i$1 = i$1 - 1 >> 0;
			buf[i$1] = (((_r = exp % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		i$1 = i$1 - 1 >> 0;
		buf[i$1] = ((exp + 48 >> 0) << 24 >>> 24);
		_ref = i$1;
		if (_ref === 0) {
			dst = go$append(dst, buf[0], buf[1], buf[2]);
		} else if (_ref === 1) {
			dst = go$append(dst, buf[1], buf[2]);
		} else if (_ref === 2) {
			dst = go$append(dst, 48, buf[2]);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var i, _slice, _index, i$1, ch, j, _slice$1, _index$1;
		if (neg) {
			dst = go$append(dst, 45);
		}
		if (d.dp > 0) {
			i = 0;
			i = 0;
			while (i < d.dp && i < d.nd) {
				dst = go$append(dst, (_slice = d.d, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
				i = i + 1 >> 0;
			}
			while (i < d.dp) {
				dst = go$append(dst, 48);
				i = i + 1 >> 0;
			}
		} else {
			dst = go$append(dst, 48);
		}
		if (prec > 0) {
			dst = go$append(dst, 46);
			i$1 = 0;
			while (i$1 < prec) {
				ch = 48;
				j = d.dp + i$1 >> 0;
				if (0 <= j && j < d.nd) {
					ch = (_slice$1 = d.d, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				}
				dst = go$append(dst, ch);
				i$1 = i$1 + 1 >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var buf, w, esign, n, _r, _q, x;
		buf = go$makeNativeArray("Uint8", 50, function() { return 0; });
		w = 50;
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		esign = 43;
		if (exp < 0) {
			esign = 45;
			exp = -exp;
		}
		n = 0;
		while (exp > 0 || n < 1) {
			n = n + 1 >> 0;
			w = w - 1 >> 0;
			buf[w] = (((_r = exp % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		w = w - 1 >> 0;
		buf[w] = esign;
		w = w - 1 >> 0;
		buf[w] = 112;
		n = 0;
		while ((mant.high > 0 || (mant.high === 0 && mant.low > 0)) || n < 1) {
			n = n + 1 >> 0;
			w = w - 1 >> 0;
			buf[w] = ((x = go$div64(mant, new Go$Uint64(0, 10), true), new Go$Uint64(x.high + 0, x.low + 48)).low << 24 >>> 24);
			mant = go$div64(mant, new Go$Uint64(0, 10), false);
		}
		if (neg) {
			w = w - 1 >> 0;
			buf[w] = 45;
		}
		return go$appendSlice(dst, go$subslice(new (go$sliceType(Go$Uint8))(buf), w));
	};
	max = function(a, b) {
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = go$pkg.FormatInt = function(i, base) {
		var _tuple, s;
		_tuple = formatBits((go$sliceType(Go$Uint8)).nil, new Go$Uint64(i.high, i.low), base, (i.high < 0 || (i.high === 0 && i.low < 0)), false); s = _tuple[1];
		return s;
	};
	Itoa = go$pkg.Itoa = function(i) {
		return FormatInt(new Go$Int64(0, i), 10);
	};
	AppendInt = go$pkg.AppendInt = function(dst, i, base) {
		var _tuple;
		_tuple = formatBits(dst, new Go$Uint64(i.high, i.low), base, (i.high < 0 || (i.high === 0 && i.low < 0)), true); dst = _tuple[0];
		return dst;
	};
	AppendUint = go$pkg.AppendUint = function(dst, i, base) {
		var _tuple;
		_tuple = formatBits(dst, i, base, false, true); dst = _tuple[0];
		return dst;
	};
	formatBits = function(dst, u, base, neg, append_) {
		var d, s, a, i, q, x, j, q$1, x$1, s$1, b, m, b$1;
		d = (go$sliceType(Go$Uint8)).nil;
		s = "";
		if (base < 2 || base > 36) {
			throw go$panic(new Go$String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = go$makeNativeArray("Uint8", 65, function() { return 0; });
		i = 65;
		if (neg) {
			u = new Go$Uint64(-u.high, -u.low);
		}
		if (base === 10) {
			while ((u.high > 0 || (u.high === 0 && u.low >= 100))) {
				i = i - 2 >> 0;
				q = go$div64(u, new Go$Uint64(0, 100), false);
				j = ((x = go$mul64(q, new Go$Uint64(0, 100)), new Go$Uint64(u.high - x.high, u.low - x.low)).low >>> 0);
				a[i + 1 >> 0] = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789".charCodeAt(j);
				a[i + 0 >> 0] = "0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999".charCodeAt(j);
				u = q;
			}
			if ((u.high > 0 || (u.high === 0 && u.low >= 10))) {
				i = i - 1 >> 0;
				q$1 = go$div64(u, new Go$Uint64(0, 10), false);
				a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$1 = go$mul64(q$1, new Go$Uint64(0, 10)), new Go$Uint64(u.high - x$1.high, u.low - x$1.low)).low >>> 0));
				u = q$1;
			}
		} else {
			s$1 = shifts[base];
			if (s$1 > 0) {
				b = new Go$Uint64(0, base);
				m = (b.low >>> 0) - 1 >>> 0;
				while ((u.high > b.high || (u.high === b.high && u.low >= b.low))) {
					i = i - 1 >> 0;
					a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.low >>> 0) & m) >>> 0));
					u = go$shiftRightUint64(u, (s$1));
				}
			} else {
				b$1 = new Go$Uint64(0, base);
				while ((u.high > b$1.high || (u.high === b$1.high && u.low >= b$1.low))) {
					i = i - 1 >> 0;
					a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((go$div64(u, b$1, true).low >>> 0));
					u = go$div64(u, (b$1), false);
				}
			}
		}
		i = i - 1 >> 0;
		a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.low >>> 0));
		if (neg) {
			i = i - 1 >> 0;
			a[i] = 45;
		}
		if (append_) {
			d = go$appendSlice(dst, go$subslice(new (go$sliceType(Go$Uint8))(a), i));
			return [d, s];
		}
		s = go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly) {
		var runeTmp, _q, x, buf, width, r, _tuple, n, _ref, s$1, s$2;
		runeTmp = go$makeNativeArray("Uint8", 4, function() { return 0; });
		buf = (go$sliceType(Go$Uint8)).make(0, (_q = (x = s.length, (((3 >>> 16 << 16) * x >> 0) + (3 << 16 >>> 16) * x) >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), function() { return 0; });
		buf = go$append(buf, quote);
		width = 0;
		while (s.length > 0) {
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\x")));
				buf = go$append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = go$append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = go$append(buf, 92);
				buf = go$append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = go$append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r)) {
				n = utf8.EncodeRune(new (go$sliceType(Go$Uint8))(runeTmp), r);
				buf = go$appendSlice(buf, go$subslice(new (go$sliceType(Go$Uint8))(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_ref = r;
			if (_ref === 7) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\a")));
			} else if (_ref === 8) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\b")));
			} else if (_ref === 12) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\f")));
			} else if (_ref === 10) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\n")));
			} else if (_ref === 13) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\r")));
			} else if (_ref === 9) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\t")));
			} else if (_ref === 11) {
				buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\v")));
			} else {
				if (r < 32) {
					buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\x")));
					buf = go$append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = go$append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = go$append(buf, "0123456789abcdef".charCodeAt((((r >> go$min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - 4 >> 0;
					}
				} else if (r < 65536) {
					buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = go$append(buf, "0123456789abcdef".charCodeAt((((r >> go$min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - 4 >> 0;
					}
				} else {
					buf = go$appendSlice(buf, new (go$sliceType(Go$Uint8))(go$stringToBytes("\\U")));
					s$2 = 28;
					while (s$2 >= 0) {
						buf = go$append(buf, "0123456789abcdef".charCodeAt((((r >> go$min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - 4 >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = go$append(buf, quote);
		return go$bytesToString(buf);
	};
	Quote = go$pkg.Quote = function(s) {
		return quoteWith(s, 34, false);
	};
	QuoteToASCII = go$pkg.QuoteToASCII = function(s) {
		return quoteWith(s, 34, true);
	};
	QuoteRune = go$pkg.QuoteRune = function(r) {
		return quoteWith(go$encodeRune(r), 39, false);
	};
	AppendQuoteRune = go$pkg.AppendQuoteRune = function(dst, r) {
		return go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(QuoteRune(r))));
	};
	QuoteRuneToASCII = go$pkg.QuoteRuneToASCII = function(r) {
		return quoteWith(go$encodeRune(r), 39, true);
	};
	AppendQuoteRuneToASCII = go$pkg.AppendQuoteRuneToASCII = function(dst, r) {
		return go$appendSlice(dst, new (go$sliceType(Go$Uint8))(go$stringToBytes(QuoteRuneToASCII(r))));
	};
	CanBackquote = go$pkg.CanBackquote = function(s) {
		var i;
		i = 0;
		while (i < s.length) {
			if ((s.charCodeAt(i) < 32 && !((s.charCodeAt(i) === 9))) || (s.charCodeAt(i) === 96)) {
				return false;
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	unhex = function(b) {
		var v, ok, c, _tuple, _tuple$1, _tuple$2;
		v = 0;
		ok = false;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tuple = [c - 48 >> 0, true]; v = _tuple[0]; ok = _tuple[1];
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tuple$1 = [(c - 97 >> 0) + 10 >> 0, true]; v = _tuple$1[0]; ok = _tuple$1[1];
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tuple$2 = [(c - 65 >> 0) + 10 >> 0, true]; v = _tuple$2[0]; ok = _tuple$2[1];
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = go$pkg.UnquoteChar = function(s, quote) {
		var value, multibyte, tail, err, c, _tuple, r, size, _tuple$1, _tuple$2, c$1, _ref, n, _ref$1, v, j, _tuple$3, x, ok, v$1, j$1, x$1;
		value = 0;
		multibyte = false;
		tail = "";
		err = null;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = go$pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
			_tuple$1 = [r, true, s.substring(size), null]; value = _tuple$1[0]; multibyte = _tuple$1[1]; tail = _tuple$1[2]; err = _tuple$1[3];
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tuple$2 = [(s.charCodeAt(0) >> 0), false, s.substring(1), null]; value = _tuple$2[0]; multibyte = _tuple$2[1]; tail = _tuple$2[2]; err = _tuple$2[3];
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = go$pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		_ref = c$1;
		switch (0) { default: if (_ref === 97) {
			value = 7;
		} else if (_ref === 98) {
			value = 8;
		} else if (_ref === 102) {
			value = 12;
		} else if (_ref === 110) {
			value = 10;
		} else if (_ref === 114) {
			value = 13;
		} else if (_ref === 116) {
			value = 9;
		} else if (_ref === 118) {
			value = 11;
		} else if (_ref === 120 || _ref === 117 || _ref === 85) {
			n = 0;
			_ref$1 = c$1;
			if (_ref$1 === 120) {
				n = 2;
			} else if (_ref$1 === 117) {
				n = 4;
			} else if (_ref$1 === 85) {
				n = 8;
			}
			v = 0;
			if (s.length < n) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j = 0;
			while (j < n) {
				_tuple$3 = unhex(s.charCodeAt(j)); x = _tuple$3[0]; ok = _tuple$3[1];
				if (!ok) {
					err = go$pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v = (v << 4 >> 0) | x;
				j = j + 1 >> 0;
			}
			s = s.substring(n);
			if (c$1 === 120) {
				value = v;
				break;
			}
			if (v > 1114111) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v;
			multibyte = true;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			v$1 = (c$1 >> 0) - 48 >> 0;
			if (s.length < 2) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j$1 = 0;
			while (j$1 < 2) {
				x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
				if (x$1 < 0 || x$1 > 7) {
					err = go$pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v$1 = ((v$1 << 3 >> 0)) | x$1;
				j$1 = j$1 + 1 >> 0;
			}
			s = s.substring(2);
			if (v$1 > 255) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v$1;
		} else if (_ref === 92) {
			value = 92;
		} else if (_ref === 39 || _ref === 34) {
			if (!((c$1 === quote))) {
				err = go$pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = (c$1 >> 0);
		} else {
			err = go$pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} }
		tail = s;
		return [value, multibyte, tail, err];
	};
	Unquote = go$pkg.Unquote = function(s) {
		var t, err, n, _tuple, quote, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _ref, _tuple$6, _tuple$7, r, size, _tuple$8, runeTmp, _q, x, buf, _tuple$9, c, multibyte, ss, err$1, _tuple$10, n$1, _tuple$11, _tuple$12;
		t = "";
		err = null;
		n = s.length;
		if (n < 2) {
			_tuple = ["", go$pkg.ErrSyntax]; t = _tuple[0]; err = _tuple[1];
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tuple$1 = ["", go$pkg.ErrSyntax]; t = _tuple$1[0]; err = _tuple$1[1];
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tuple$2 = ["", go$pkg.ErrSyntax]; t = _tuple$2[0]; err = _tuple$2[1];
				return [t, err];
			}
			_tuple$3 = [s, null]; t = _tuple$3[0]; err = _tuple$3[1];
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tuple$4 = ["", go$pkg.ErrSyntax]; t = _tuple$4[0]; err = _tuple$4[1];
			return [t, err];
		}
		if (contains(s, 10)) {
			_tuple$5 = ["", go$pkg.ErrSyntax]; t = _tuple$5[0]; err = _tuple$5[1];
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_ref = quote;
			if (_ref === 34) {
				_tuple$6 = [s, null]; t = _tuple$6[0]; err = _tuple$6[1];
				return [t, err];
			} else if (_ref === 39) {
				_tuple$7 = utf8.DecodeRuneInString(s); r = _tuple$7[0]; size = _tuple$7[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tuple$8 = [s, null]; t = _tuple$8[0]; err = _tuple$8[1];
					return [t, err];
				}
			}
		}
		runeTmp = go$makeNativeArray("Uint8", 4, function() { return 0; });
		buf = (go$sliceType(Go$Uint8)).make(0, (_q = (x = s.length, (((3 >>> 16 << 16) * x >> 0) + (3 << 16 >>> 16) * x) >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), function() { return 0; });
		while (s.length > 0) {
			_tuple$9 = UnquoteChar(s, quote); c = _tuple$9[0]; multibyte = _tuple$9[1]; ss = _tuple$9[2]; err$1 = _tuple$9[3];
			if (!(go$interfaceIsEqual(err$1, null))) {
				_tuple$10 = ["", err$1]; t = _tuple$10[0]; err = _tuple$10[1];
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = go$append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new (go$sliceType(Go$Uint8))(runeTmp), c);
				buf = go$appendSlice(buf, go$subslice(new (go$sliceType(Go$Uint8))(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tuple$11 = ["", go$pkg.ErrSyntax]; t = _tuple$11[0]; err = _tuple$11[1];
				return [t, err];
			}
		}
		_tuple$12 = [go$bytesToString(buf), null]; t = _tuple$12[0]; err = _tuple$12[1];
		return [t, err];
	};
	contains = function(s, c) {
		var i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + 1 >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _tuple, i, j, _q, h, _slice, _index;
		_tuple = [0, a.length]; i = _tuple[0]; j = _tuple[1];
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if ((_slice = a, _index = h, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _tuple, i, j, _q, h, _slice, _index;
		_tuple = [0, a.length]; i = _tuple[0]; j = _tuple[1];
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if ((_slice = a, _index = h, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = go$pkg.IsPrint = function(r) {
		var _tuple, rr, isPrint, isNotPrint, i, _slice, _index, _slice$1, _index$1, j, _slice$2, _index$2, _tuple$1, rr$1, isPrint$1, isNotPrint$1, i$1, _slice$3, _index$3, _slice$4, _index$4, j$1, _slice$5, _index$5;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tuple = [(r << 16 >>> 16), isPrint16, isNotPrint16]; rr = _tuple[0]; isPrint = _tuple[1]; isNotPrint = _tuple[2];
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.length || rr < (_slice = isPrint, _index = (i & ~1), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) || (_slice$1 = isPrint, _index$1 = (i | 1), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.length || !(((_slice$2 = isNotPrint, _index$2 = j, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === rr));
		}
		_tuple$1 = [(r >>> 0), isPrint32, isNotPrint32]; rr$1 = _tuple$1[0]; isPrint$1 = _tuple$1[1]; isNotPrint$1 = _tuple$1[2];
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.length || rr$1 < (_slice$3 = isPrint$1, _index$3 = (i$1 & ~1), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) || (_slice$4 = isPrint$1, _index$4 = (i$1 | 1), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - 65536 >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.length || !(((_slice$5 = isNotPrint$1, _index$5 = j$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")) === (r << 16 >>> 16)));
	};
	go$pkg.init = function() {
		(go$ptrType(NumError)).methods = [["Error", "", [], [Go$String], false, -1]];
		NumError.init([["Func", "Func", "", Go$String, ""], ["Num", "Num", "", Go$String, ""], ["Err", "Err", "", go$error, ""]]);
		(go$ptrType(decimal)).methods = [["Assign", "", [Go$Uint64], [], false, -1], ["Round", "", [Go$Int], [], false, -1], ["RoundDown", "", [Go$Int], [], false, -1], ["RoundUp", "", [Go$Int], [], false, -1], ["RoundedInteger", "", [], [Go$Uint64], false, -1], ["Shift", "", [Go$Int], [], false, -1], ["String", "", [], [Go$String], false, -1], ["atof32int", "strconv", [], [Go$Float32], false, -1], ["floatBits", "strconv", [(go$ptrType(floatInfo))], [Go$Uint64, Go$Bool], false, -1], ["set", "strconv", [Go$String], [Go$Bool], false, -1]];
		decimal.init([["d", "d", "strconv", (go$arrayType(Go$Uint8, 800)), ""], ["nd", "nd", "strconv", Go$Int, ""], ["dp", "dp", "strconv", Go$Int, ""], ["neg", "neg", "strconv", Go$Bool, ""], ["trunc", "trunc", "strconv", Go$Bool, ""]]);
		leftCheat.init([["delta", "delta", "strconv", Go$Int, ""], ["cutoff", "cutoff", "strconv", Go$String, ""]]);
		(go$ptrType(extFloat)).methods = [["AssignComputeBounds", "", [Go$Uint64, Go$Int, Go$Bool, (go$ptrType(floatInfo))], [extFloat, extFloat], false, -1], ["AssignDecimal", "", [Go$Uint64, Go$Int, Go$Bool, Go$Bool, (go$ptrType(floatInfo))], [Go$Bool], false, -1], ["FixedDecimal", "", [(go$ptrType(decimalSlice)), Go$Int], [Go$Bool], false, -1], ["Multiply", "", [extFloat], [], false, -1], ["Normalize", "", [], [Go$Uint], false, -1], ["ShortestDecimal", "", [(go$ptrType(decimalSlice)), (go$ptrType(extFloat)), (go$ptrType(extFloat))], [Go$Bool], false, -1], ["floatBits", "strconv", [(go$ptrType(floatInfo))], [Go$Uint64, Go$Bool], false, -1], ["frexp10", "strconv", [], [Go$Int, Go$Int], false, -1]];
		extFloat.init([["mant", "mant", "strconv", Go$Uint64, ""], ["exp", "exp", "strconv", Go$Int, ""], ["neg", "neg", "strconv", Go$Bool, ""]]);
		floatInfo.init([["mantbits", "mantbits", "strconv", Go$Uint, ""], ["expbits", "expbits", "strconv", Go$Uint, ""], ["bias", "bias", "strconv", Go$Int, ""]]);
		decimalSlice.init([["d", "d", "strconv", (go$sliceType(Go$Uint8)), ""], ["nd", "nd", "strconv", Go$Int, ""], ["dp", "dp", "strconv", Go$Int, ""], ["neg", "neg", "strconv", Go$Bool, ""]]);
		optimize = true;
		powtab = new (go$sliceType(Go$Int))([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new (go$sliceType(Go$Float64))([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new (go$sliceType(Go$Float32))([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		go$pkg.ErrRange = errors.New("value out of range");
		go$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new (go$sliceType(leftCheat))([new leftCheat.Ptr(0, ""), new leftCheat.Ptr(1, "5"), new leftCheat.Ptr(1, "25"), new leftCheat.Ptr(1, "125"), new leftCheat.Ptr(2, "625"), new leftCheat.Ptr(2, "3125"), new leftCheat.Ptr(2, "15625"), new leftCheat.Ptr(3, "78125"), new leftCheat.Ptr(3, "390625"), new leftCheat.Ptr(3, "1953125"), new leftCheat.Ptr(4, "9765625"), new leftCheat.Ptr(4, "48828125"), new leftCheat.Ptr(4, "244140625"), new leftCheat.Ptr(4, "1220703125"), new leftCheat.Ptr(5, "6103515625"), new leftCheat.Ptr(5, "30517578125"), new leftCheat.Ptr(5, "152587890625"), new leftCheat.Ptr(6, "762939453125"), new leftCheat.Ptr(6, "3814697265625"), new leftCheat.Ptr(6, "19073486328125"), new leftCheat.Ptr(7, "95367431640625"), new leftCheat.Ptr(7, "476837158203125"), new leftCheat.Ptr(7, "2384185791015625"), new leftCheat.Ptr(7, "11920928955078125"), new leftCheat.Ptr(8, "59604644775390625"), new leftCheat.Ptr(8, "298023223876953125"), new leftCheat.Ptr(8, "1490116119384765625"), new leftCheat.Ptr(9, "7450580596923828125")]);
		smallPowersOfTen = go$toNativeArray("Struct", [new extFloat.Ptr(new Go$Uint64(2147483648, 0), -63, false), new extFloat.Ptr(new Go$Uint64(2684354560, 0), -60, false), new extFloat.Ptr(new Go$Uint64(3355443200, 0), -57, false), new extFloat.Ptr(new Go$Uint64(4194304000, 0), -54, false), new extFloat.Ptr(new Go$Uint64(2621440000, 0), -50, false), new extFloat.Ptr(new Go$Uint64(3276800000, 0), -47, false), new extFloat.Ptr(new Go$Uint64(4096000000, 0), -44, false), new extFloat.Ptr(new Go$Uint64(2560000000, 0), -40, false)]);
		powersOfTen = go$toNativeArray("Struct", [new extFloat.Ptr(new Go$Uint64(4203730336, 136053384), -1220, false), new extFloat.Ptr(new Go$Uint64(3132023167, 2722021238), -1193, false), new extFloat.Ptr(new Go$Uint64(2333539104, 810921078), -1166, false), new extFloat.Ptr(new Go$Uint64(3477244234, 1573795306), -1140, false), new extFloat.Ptr(new Go$Uint64(2590748842, 1432697645), -1113, false), new extFloat.Ptr(new Go$Uint64(3860516611, 1025131999), -1087, false), new extFloat.Ptr(new Go$Uint64(2876309015, 3348809418), -1060, false), new extFloat.Ptr(new Go$Uint64(4286034428, 3200048207), -1034, false), new extFloat.Ptr(new Go$Uint64(3193344495, 1097586188), -1007, false), new extFloat.Ptr(new Go$Uint64(2379227053, 2424306748), -980, false), new extFloat.Ptr(new Go$Uint64(3545324584, 827693699), -954, false), new extFloat.Ptr(new Go$Uint64(2641472655, 2913388981), -927, false), new extFloat.Ptr(new Go$Uint64(3936100983, 602835915), -901, false), new extFloat.Ptr(new Go$Uint64(2932623761, 1081627501), -874, false), new extFloat.Ptr(new Go$Uint64(2184974969, 1572261463), -847, false), new extFloat.Ptr(new Go$Uint64(3255866422, 1308317239), -821, false), new extFloat.Ptr(new Go$Uint64(2425809519, 944281679), -794, false), new extFloat.Ptr(new Go$Uint64(3614737867, 629291719), -768, false), new extFloat.Ptr(new Go$Uint64(2693189581, 2545915892), -741, false), new extFloat.Ptr(new Go$Uint64(4013165208, 388672741), -715, false), new extFloat.Ptr(new Go$Uint64(2990041083, 708162190), -688, false), new extFloat.Ptr(new Go$Uint64(2227754207, 3536207675), -661, false), new extFloat.Ptr(new Go$Uint64(3319612455, 450088378), -635, false), new extFloat.Ptr(new Go$Uint64(2473304014, 3139815830), -608, false), new extFloat.Ptr(new Go$Uint64(3685510180, 2103616900), -582, false), new extFloat.Ptr(new Go$Uint64(2745919064, 224385782), -555, false), new extFloat.Ptr(new Go$Uint64(4091738259, 3737383206), -529, false), new extFloat.Ptr(new Go$Uint64(3048582568, 2868871352), -502, false), new extFloat.Ptr(new Go$Uint64(2271371013, 1820084875), -475, false), new extFloat.Ptr(new Go$Uint64(3384606560, 885076051), -449, false), new extFloat.Ptr(new Go$Uint64(2521728396, 2444895829), -422, false), new extFloat.Ptr(new Go$Uint64(3757668132, 1881767613), -396, false), new extFloat.Ptr(new Go$Uint64(2799680927, 3102062735), -369, false), new extFloat.Ptr(new Go$Uint64(4171849679, 2289335700), -343, false), new extFloat.Ptr(new Go$Uint64(3108270227, 2410191823), -316, false), new extFloat.Ptr(new Go$Uint64(2315841784, 3205436779), -289, false), new extFloat.Ptr(new Go$Uint64(3450873173, 1697722806), -263, false), new extFloat.Ptr(new Go$Uint64(2571100870, 3497754540), -236, false), new extFloat.Ptr(new Go$Uint64(3831238852, 707476230), -210, false), new extFloat.Ptr(new Go$Uint64(2854495385, 1769181907), -183, false), new extFloat.Ptr(new Go$Uint64(4253529586, 2197867022), -157, false), new extFloat.Ptr(new Go$Uint64(3169126500, 2450594539), -130, false), new extFloat.Ptr(new Go$Uint64(2361183241, 1867548876), -103, false), new extFloat.Ptr(new Go$Uint64(3518437208, 3793315116), -77, false), new extFloat.Ptr(new Go$Uint64(2621440000, 0), -50, false), new extFloat.Ptr(new Go$Uint64(3906250000, 0), -24, false), new extFloat.Ptr(new Go$Uint64(2910383045, 2892103680), 3, false), new extFloat.Ptr(new Go$Uint64(2168404344, 4170451332), 30, false), new extFloat.Ptr(new Go$Uint64(3231174267, 3372684723), 56, false), new extFloat.Ptr(new Go$Uint64(2407412430, 2078956656), 83, false), new extFloat.Ptr(new Go$Uint64(3587324068, 2884206696), 109, false), new extFloat.Ptr(new Go$Uint64(2672764710, 395977285), 136, false), new extFloat.Ptr(new Go$Uint64(3982729777, 3569679143), 162, false), new extFloat.Ptr(new Go$Uint64(2967364920, 2361961896), 189, false), new extFloat.Ptr(new Go$Uint64(2210859150, 447440347), 216, false), new extFloat.Ptr(new Go$Uint64(3294436857, 1114709402), 242, false), new extFloat.Ptr(new Go$Uint64(2454546732, 2786846552), 269, false), new extFloat.Ptr(new Go$Uint64(3657559652, 443583978), 295, false), new extFloat.Ptr(new Go$Uint64(2725094297, 2599384906), 322, false), new extFloat.Ptr(new Go$Uint64(4060706939, 3028118405), 348, false), new extFloat.Ptr(new Go$Uint64(3025462433, 2044532855), 375, false), new extFloat.Ptr(new Go$Uint64(2254145170, 1536935362), 402, false), new extFloat.Ptr(new Go$Uint64(3358938053, 3365297469), 428, false), new extFloat.Ptr(new Go$Uint64(2502603868, 4204241075), 455, false), new extFloat.Ptr(new Go$Uint64(3729170365, 2577424355), 481, false), new extFloat.Ptr(new Go$Uint64(2778448436, 3677981733), 508, false), new extFloat.Ptr(new Go$Uint64(4140210802, 2744688476), 534, false), new extFloat.Ptr(new Go$Uint64(3084697427, 1424604878), 561, false), new extFloat.Ptr(new Go$Uint64(2298278679, 4062331362), 588, false), new extFloat.Ptr(new Go$Uint64(3424702107, 3546052773), 614, false), new extFloat.Ptr(new Go$Uint64(2551601907, 2065781727), 641, false), new extFloat.Ptr(new Go$Uint64(3802183132, 2535403578), 667, false), new extFloat.Ptr(new Go$Uint64(2832847187, 1558426518), 694, false), new extFloat.Ptr(new Go$Uint64(4221271257, 2762425404), 720, false), new extFloat.Ptr(new Go$Uint64(3145092172, 2812560400), 747, false), new extFloat.Ptr(new Go$Uint64(2343276271, 3057687578), 774, false), new extFloat.Ptr(new Go$Uint64(3491753744, 2790753324), 800, false), new extFloat.Ptr(new Go$Uint64(2601559269, 3918606633), 827, false), new extFloat.Ptr(new Go$Uint64(3876625403, 2711358621), 853, false), new extFloat.Ptr(new Go$Uint64(2888311001, 1648096297), 880, false), new extFloat.Ptr(new Go$Uint64(2151959390, 2057817989), 907, false), new extFloat.Ptr(new Go$Uint64(3206669376, 61660461), 933, false), new extFloat.Ptr(new Go$Uint64(2389154863, 1581580175), 960, false), new extFloat.Ptr(new Go$Uint64(3560118173, 2626467905), 986, false), new extFloat.Ptr(new Go$Uint64(2652494738, 3034782633), 1013, false), new extFloat.Ptr(new Go$Uint64(3952525166, 3135207385), 1039, false), new extFloat.Ptr(new Go$Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = go$toNativeArray("Uint64", [new Go$Uint64(0, 1), new Go$Uint64(0, 10), new Go$Uint64(0, 100), new Go$Uint64(0, 1000), new Go$Uint64(0, 10000), new Go$Uint64(0, 100000), new Go$Uint64(0, 1000000), new Go$Uint64(0, 10000000), new Go$Uint64(0, 100000000), new Go$Uint64(0, 1000000000), new Go$Uint64(2, 1410065408), new Go$Uint64(23, 1215752192), new Go$Uint64(232, 3567587328), new Go$Uint64(2328, 1316134912), new Go$Uint64(23283, 276447232), new Go$Uint64(232830, 2764472320), new Go$Uint64(2328306, 1874919424), new Go$Uint64(23283064, 1569325056), new Go$Uint64(232830643, 2808348672), new Go$Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.Ptr(23, 8, -127);
		float64info = new floatInfo.Ptr(52, 11, -1023);
		isPrint16 = new (go$sliceType(Go$Uint16))([32, 126, 161, 887, 890, 894, 900, 1319, 1329, 1366, 1369, 1418, 1423, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2220, 2276, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3073, 3129, 3133, 3149, 3157, 3161, 3168, 3171, 3174, 3183, 3192, 3199, 3202, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3330, 3386, 3389, 3406, 3415, 3415, 3424, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5108, 5120, 5788, 5792, 5872, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8378, 8400, 8432, 8448, 8585, 8592, 9203, 9216, 9254, 9280, 9290, 9312, 11084, 11088, 11097, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11835, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40908, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42647, 42655, 42743, 42752, 42899, 42912, 42922, 43000, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43259, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43487, 43520, 43574, 43584, 43597, 43600, 43609, 43612, 43643, 43648, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43822, 43968, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65062, 65072, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new (go$sliceType(Go$Uint16))([173, 907, 909, 930, 1376, 1416, 1424, 1757, 2111, 2209, 2303, 2424, 2432, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3124, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6751, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9984, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42895, 43470, 43815, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new (go$sliceType(Go$Uint32))([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65930, 65936, 65947, 66000, 66045, 66176, 66204, 66208, 66256, 66304, 66339, 66352, 66378, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67679, 67840, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68030, 68031, 68096, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68223, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68479, 68608, 68680, 69216, 69246, 69632, 69709, 69714, 69743, 69760, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 70016, 70088, 70096, 70105, 71296, 71351, 71360, 71369, 73728, 74606, 74752, 74850, 74864, 74867, 77824, 78894, 92160, 92728, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119261, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 120831, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127166, 127169, 127199, 127232, 127242, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 127776, 127792, 127868, 127872, 127891, 127904, 127946, 127968, 127984, 128000, 128252, 128256, 128317, 128320, 128323, 128336, 128359, 128507, 128576, 128581, 128591, 128640, 128709, 128768, 128883, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new (go$sliceType(Go$Uint16))([12, 39, 59, 62, 799, 926, 2057, 2102, 2134, 2564, 2580, 2584, 4285, 4405, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61648, 61743, 62262, 62405, 62527, 62529, 62712]);
		shifts = go$toNativeArray("Uint", [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
	}
	return go$pkg;
})();
go$packages["strings"] = (function() {
	var go$pkg = {}, js = go$packages["github.com/gopherjs/gopherjs/js"], errors = go$packages["errors"], io = go$packages["io"], utf8 = go$packages["unicode/utf8"], unicode = go$packages["unicode"], IndexByte, explode, hashstr, Count, Contains, ContainsRune, Index, LastIndex, IndexRune, IndexAny, genSplit, Split, Join, HasPrefix, Map, ToLower, IndexFunc, indexFunc, Replace, EqualFold;
	IndexByte = go$pkg.IndexByte = function(s, c) {
		return go$parseInt(s.indexOf(go$global.String.fromCharCode(c))) >> 0;
	};
	explode = function(s, n) {
		var l, a, size, ch, _tuple, i, cur, _tuple$1, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		if (n === 0) {
			return (go$sliceType(Go$String)).nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = (go$sliceType(Go$String)).make(n, 0, function() { return ""; });
		size = 0;
		ch = 0;
		_tuple = [0, 0]; i = _tuple[0]; cur = _tuple[1];
		while ((i + 1 >> 0) < n) {
			_tuple$1 = utf8.DecodeRuneInString(s.substring(cur)); ch = _tuple$1[0]; size = _tuple$1[1];
			if (ch === 65533) {
				_slice = a; _index = i;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = "\xEF\xBF\xBD") : go$throwRuntimeError("index out of range");
			} else {
				_slice$1 = a; _index$1 = i;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = s.substring(cur, (cur + size >> 0))) : go$throwRuntimeError("index out of range");
			}
			cur = cur + (size) >> 0;
			i = i + 1 >> 0;
		}
		if (cur < s.length) {
			_slice$2 = a; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = s.substring(cur)) : go$throwRuntimeError("index out of range");
		}
		return a;
	};
	hashstr = function(sep) {
		var hash, i, _tuple, pow, sq, i$1, x, x$1;
		hash = 0;
		i = 0;
		while (i < sep.length) {
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i + 1 >> 0;
		}
		_tuple = [1, 16777619]; pow = _tuple[0]; sq = _tuple[1];
		i$1 = sep.length;
		while (i$1 > 0) {
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = i$1 >> 1 >> 0;
		}
		return [hash, pow];
	};
	Count = go$pkg.Count = function(s, sep) {
		var n, c, i, _tuple, hashsep, pow, h, i$1, lastmatch, i$2, x;
		n = 0;
		if (sep.length === 0) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length === 1) {
			c = sep.charCodeAt(0);
			i = 0;
			while (i < s.length) {
				if (s.charCodeAt(i) === c) {
					n = n + 1 >> 0;
				}
				i = i + 1 >> 0;
			}
			return n;
		} else if (sep.length > s.length) {
			return 0;
		} else if (sep.length === s.length) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		_tuple = hashstr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i$1 = 0;
		while (i$1 < sep.length) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 + 1 >> 0;
		}
		lastmatch = 0;
		if ((h === hashsep) && s.substring(0, sep.length) === sep) {
			n = n + 1 >> 0;
			lastmatch = sep.length;
		}
		i$2 = sep.length;
		while (i$2 < s.length) {
			h = (((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0;
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x = (s.charCodeAt((i$2 - sep.length >> 0)) >>> 0), (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0)) >>> 0;
			i$2 = i$2 + 1 >> 0;
			if ((h === hashsep) && lastmatch <= (i$2 - sep.length >> 0) && s.substring(i$2 - sep.length >> 0, i$2) === sep) {
				n = n + 1 >> 0;
				lastmatch = i$2;
			}
		}
		return n;
	};
	Contains = go$pkg.Contains = function(s, substr) {
		return Index(s, substr) >= 0;
	};
	ContainsRune = go$pkg.ContainsRune = function(s, r) {
		return IndexRune(s, r) >= 0;
	};
	Index = go$pkg.Index = function(s, sep) {
		var n, _tuple, hashsep, pow, h, i, i$1, x;
		n = sep.length;
		if (n === 0) {
			return 0;
		} else if (n === 1) {
			return IndexByte(s, sep.charCodeAt(0));
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashstr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i = 0;
		while (i < n) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i) >>> 0) >>> 0;
			i = i + 1 >> 0;
		}
		if ((h === hashsep) && s.substring(0, n) === sep) {
			return 0;
		}
		i$1 = n;
		while (i$1 < s.length) {
			h = (((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0;
			h = h + ((s.charCodeAt(i$1) >>> 0)) >>> 0;
			h = h - ((x = (s.charCodeAt((i$1 - n >> 0)) >>> 0), (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0)) >>> 0;
			i$1 = i$1 + 1 >> 0;
			if ((h === hashsep) && s.substring(i$1 - n >> 0, i$1) === sep) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	LastIndex = go$pkg.LastIndex = function(s, sep) {
		var n, c, i, i$1;
		n = sep.length;
		if (n === 0) {
			return s.length;
		}
		c = sep.charCodeAt(0);
		if (n === 1) {
			i = s.length - 1 >> 0;
			while (i >= 0) {
				if (s.charCodeAt(i) === c) {
					return i;
				}
				i = i - 1 >> 0;
			}
			return -1;
		}
		i$1 = s.length - n >> 0;
		while (i$1 >= 0) {
			if ((s.charCodeAt(i$1) === c) && s.substring(i$1, (i$1 + n >> 0)) === sep) {
				return i$1;
			}
			i$1 = i$1 - 1 >> 0;
		}
		return -1;
	};
	IndexRune = go$pkg.IndexRune = function(s, r) {
		var b, i, _ref, _i, _rune, c, i$1;
		if (r < 128) {
			b = (r << 24 >>> 24);
			i = 0;
			while (i < s.length) {
				if (s.charCodeAt(i) === b) {
					return i;
				}
				i = i + 1 >> 0;
			}
		} else {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = go$decodeRune(_ref, _i);
				c = _rune[0];
				i$1 = _i;
				if (c === r) {
					return i$1;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	IndexAny = go$pkg.IndexAny = function(s, chars) {
		var _ref, _i, _rune, c, i, _ref$1, _i$1, _rune$1, m;
		if (chars.length > 0) {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = go$decodeRune(_ref, _i);
				c = _rune[0];
				i = _i;
				_ref$1 = chars;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					_rune$1 = go$decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	genSplit = function(s, sep, sepSave, n) {
		var c, start, a, na, i, _slice, _index, _slice$1, _index$1;
		if (n === 0) {
			return (go$sliceType(Go$String)).nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = (go$sliceType(Go$String)).make(n, 0, function() { return ""; });
		na = 0;
		i = 0;
		while ((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n) {
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				_slice = a; _index = na;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = s.substring(start, (i + sepSave >> 0))) : go$throwRuntimeError("index out of range");
				na = na + 1 >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + 1 >> 0;
		}
		_slice$1 = a; _index$1 = na;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = s.substring(start)) : go$throwRuntimeError("index out of range");
		return go$subslice(a, 0, (na + 1 >> 0));
	};
	Split = go$pkg.Split = function(s, sep) {
		return genSplit(s, sep, 0, -1);
	};
	Join = go$pkg.Join = function(a, sep) {
		var _slice, _index, x, x$1, n, i, _slice$1, _index$1, b, _slice$2, _index$2, bp, _ref, _i, _slice$3, _index$3, s;
		if (a.length === 0) {
			return "";
		}
		if (a.length === 1) {
			return (_slice = a, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		n = (x = sep.length, x$1 = (a.length - 1 >> 0), (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		i = 0;
		while (i < a.length) {
			n = n + ((_slice$1 = a, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).length) >> 0;
			i = i + 1 >> 0;
		}
		b = (go$sliceType(Go$Uint8)).make(n, 0, function() { return 0; });
		bp = go$copyString(b, (_slice$2 = a, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")));
		_ref = go$subslice(a, 1);
		_i = 0;
		while (_i < _ref.length) {
			s = (_slice$3 = _ref, _index$3 = _i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			bp = bp + (go$copyString(go$subslice(b, bp), sep)) >> 0;
			bp = bp + (go$copyString(go$subslice(b, bp), s)) >> 0;
			_i++;
		}
		return go$bytesToString(b);
	};
	HasPrefix = go$pkg.HasPrefix = function(s, prefix) {
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	Map = go$pkg.Map = function(mapping, s) {
		var maxbytes, nbytes, b, _ref, _i, _rune, c, i, r, wid, nb;
		maxbytes = s.length;
		nbytes = 0;
		b = (go$sliceType(Go$Uint8)).nil;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			i = _i;
			r = mapping(c);
			if (b === (go$sliceType(Go$Uint8)).nil) {
				if (r === c) {
					_i += _rune[1];
					continue;
				}
				b = (go$sliceType(Go$Uint8)).make(maxbytes, 0, function() { return 0; });
				nbytes = go$copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = ((((maxbytes >>> 16 << 16) * 2 >> 0) + (maxbytes << 16 >>> 16) * 2) >> 0) + 4 >> 0;
					nb = (go$sliceType(Go$Uint8)).make(maxbytes, 0, function() { return 0; });
					go$copySlice(nb, go$subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune(go$subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		}
		if (b === (go$sliceType(Go$Uint8)).nil) {
			return s;
		}
		return go$bytesToString(go$subslice(b, 0, nbytes));
	};
	ToLower = go$pkg.ToLower = function(s) {
		return Map(unicode.ToLower, s);
	};
	IndexFunc = go$pkg.IndexFunc = function(s, f) {
		return indexFunc(s, f, true);
	};
	indexFunc = function(s, f, truth) {
		var start, wid, r, _tuple;
		start = 0;
		while (start < s.length) {
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s.substring(start)); r = _tuple[0]; wid = _tuple[1];
			}
			if (f(r) === truth) {
				return start;
			}
			start = start + (wid) >> 0;
		}
		return -1;
	};
	Replace = go$pkg.Replace = function(s, old, new$1, n) {
		var m, x, t, w, start, i, j, _tuple, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = (go$sliceType(Go$Uint8)).make(s.length + (x = (new$1.length - old.length >> 0), (((n >>> 16 << 16) * x >> 0) + (n << 16 >>> 16) * x) >> 0) >> 0, 0, function() { return 0; });
		w = 0;
		start = 0;
		i = 0;
		while (i < n) {
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString(s.substring(start)); wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index(s.substring(start), old)) >> 0;
			}
			w = w + (go$copyString(go$subslice(t, w), s.substring(start, j))) >> 0;
			w = w + (go$copyString(go$subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + 1 >> 0;
		}
		w = w + (go$copyString(go$subslice(t, w), s.substring(start))) >> 0;
		return go$bytesToString(go$subslice(t, 0, w));
	};
	EqualFold = go$pkg.EqualFold = function(s, t) {
		var _tuple, sr, tr, _tuple$1, _tuple$2, r, size, _tuple$3, _tuple$4, _tuple$5, r$1, size$1, _tuple$6, _tuple$7, r$2;
		while (!(s === "") && !(t === "")) {
			_tuple = [0, 0]; sr = _tuple[0]; tr = _tuple[1];
			if (s.charCodeAt(0) < 128) {
				_tuple$1 = [(s.charCodeAt(0) >> 0), s.substring(1)]; sr = _tuple$1[0]; s = _tuple$1[1];
			} else {
				_tuple$2 = utf8.DecodeRuneInString(s); r = _tuple$2[0]; size = _tuple$2[1];
				_tuple$3 = [r, s.substring(size)]; sr = _tuple$3[0]; s = _tuple$3[1];
			}
			if (t.charCodeAt(0) < 128) {
				_tuple$4 = [(t.charCodeAt(0) >> 0), t.substring(1)]; tr = _tuple$4[0]; t = _tuple$4[1];
			} else {
				_tuple$5 = utf8.DecodeRuneInString(t); r$1 = _tuple$5[0]; size$1 = _tuple$5[1];
				_tuple$6 = [r$1, t.substring(size$1)]; tr = _tuple$6[0]; t = _tuple$6[1];
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tuple$7 = [sr, tr]; tr = _tuple$7[0]; sr = _tuple$7[1];
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (!((r$2 === sr)) && r$2 < tr) {
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s === t;
	};
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["encoding/base64"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], io = go$packages["io"], strconv = go$packages["strconv"], strings = go$packages["strings"], Encoding, encoder, CorruptInputError, NewEncoding, NewEncoder, removeNewlinesMapper;
	Encoding = go$pkg.Encoding = go$newType(0, "Struct", "base64.Encoding", "Encoding", "encoding/base64", function(encode_, decodeMap_) {
		this.go$val = this;
		this.encode = encode_ !== undefined ? encode_ : "";
		this.decodeMap = decodeMap_ !== undefined ? decodeMap_ : go$makeNativeArray("Uint8", 256, function() { return 0; });
	});
	encoder = go$pkg.encoder = go$newType(0, "Struct", "base64.encoder", "encoder", "encoding/base64", function(err_, enc_, w_, buf_, nbuf_, out_) {
		this.go$val = this;
		this.err = err_ !== undefined ? err_ : null;
		this.enc = enc_ !== undefined ? enc_ : (go$ptrType(Encoding)).nil;
		this.w = w_ !== undefined ? w_ : null;
		this.buf = buf_ !== undefined ? buf_ : go$makeNativeArray("Uint8", 3, function() { return 0; });
		this.nbuf = nbuf_ !== undefined ? nbuf_ : 0;
		this.out = out_ !== undefined ? out_ : go$makeNativeArray("Uint8", 1024, function() { return 0; });
	});
	CorruptInputError = go$pkg.CorruptInputError = go$newType(8, "Int64", "base64.CorruptInputError", "CorruptInputError", "encoding/base64", null);
	NewEncoding = go$pkg.NewEncoding = function(encoder$1) {
		var e, i, i$1;
		e = new Encoding.Ptr();
		e.encode = encoder$1;
		i = 0;
		while (i < 256) {
			e.decodeMap[i] = 255;
			i = i + 1 >> 0;
		}
		i$1 = 0;
		while (i$1 < encoder$1.length) {
			e.decodeMap[encoder$1.charCodeAt(i$1)] = (i$1 << 24 >>> 24);
			i$1 = i$1 + 1 >> 0;
		}
		return e;
	};
	Encoding.Ptr.prototype.Encode = function(dst, src) {
		var enc, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _ref, _lhs, _index$4, _slice$4, _index$5, _slice$5, _index$6, _slice$6, _index$7, _lhs$1, _index$8, _slice$7, _index$9, _slice$8, _index$10, _slice$9, _index$11, _lhs$2, _index$12, _slice$10, _index$13, _slice$11, _index$14, _slice$12, _index$15, _lhs$3, _index$16, _slice$13, _index$17, _slice$14, _index$18, _slice$15, _index$19, _lhs$4, _index$20, _slice$16, _index$21, _slice$17, _index$22, _slice$18, _index$23, _lhs$5, _index$24, _slice$19, _index$25, _slice$20, _index$26, _slice$21, _index$27, _lhs$6, _index$28, _slice$22, _index$29, _slice$23, _index$30, _slice$24, _index$31, _lhs$7, _index$32, _slice$25, _index$33, _slice$26, _index$34, _slice$27, _index$35, _lhs$8, _index$36, _slice$28, _index$37, _slice$29, _index$38, _slice$30, _index$39, _lhs$9, _index$40, _slice$31, _index$41, _slice$32, _index$42, _slice$33, _index$43, _lhs$10, _index$44, _slice$34, _index$45, _slice$35, _index$46, _slice$36, _index$47, _lhs$11, _index$48, _slice$37, _index$49, _slice$38, _index$50, _slice$39, _index$51, j, _slice$40, _index$52, _slice$41, _index$53, _slice$42, _index$54, _slice$43, _index$55;
		enc = this;
		if (src.length === 0) {
			return;
		}
		while (src.length > 0) {
			_slice = dst; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 0) : go$throwRuntimeError("index out of range");
			_slice$1 = dst; _index$1 = 1;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 0) : go$throwRuntimeError("index out of range");
			_slice$2 = dst; _index$2 = 2;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 0) : go$throwRuntimeError("index out of range");
			_slice$3 = dst; _index$3 = 3;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = 0) : go$throwRuntimeError("index out of range");
			_ref = src.length;
			if (_ref === 2) {
				_lhs = dst; _index$4 = 2; _slice$6 = _lhs; _index$7 = _index$4;(_index$7 >= 0 && _index$7 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$7] = ((_slice$4 = _lhs, _index$5 = _index$4, (_index$5 >= 0 && _index$5 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$5] : go$throwRuntimeError("index out of range")) | ((((((_slice$5 = src, _index$6 = 1, (_index$6 >= 0 && _index$6 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$6] : go$throwRuntimeError("index out of range")) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0) : go$throwRuntimeError("index out of range");
				_lhs$1 = dst; _index$8 = 1; _slice$9 = _lhs$1; _index$11 = _index$8;(_index$11 >= 0 && _index$11 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$11] = ((_slice$7 = _lhs$1, _index$9 = _index$8, (_index$9 >= 0 && _index$9 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$9] : go$throwRuntimeError("index out of range")) | (((_slice$8 = src, _index$10 = 1, (_index$10 >= 0 && _index$10 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$10] : go$throwRuntimeError("index out of range")) >>> 4 << 24 >>> 24))) >>> 0) : go$throwRuntimeError("index out of range");
				_lhs$2 = dst; _index$12 = 1; _slice$12 = _lhs$2; _index$15 = _index$12;(_index$15 >= 0 && _index$15 < _slice$12.length) ? (_slice$12.array[_slice$12.offset + _index$15] = ((_slice$10 = _lhs$2, _index$13 = _index$12, (_index$13 >= 0 && _index$13 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$13] : go$throwRuntimeError("index out of range")) | ((((((_slice$11 = src, _index$14 = 0, (_index$14 >= 0 && _index$14 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$14] : go$throwRuntimeError("index out of range")) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0) : go$throwRuntimeError("index out of range");
				_lhs$3 = dst; _index$16 = 0; _slice$15 = _lhs$3; _index$19 = _index$16;(_index$19 >= 0 && _index$19 < _slice$15.length) ? (_slice$15.array[_slice$15.offset + _index$19] = ((_slice$13 = _lhs$3, _index$17 = _index$16, (_index$17 >= 0 && _index$17 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$17] : go$throwRuntimeError("index out of range")) | (((_slice$14 = src, _index$18 = 0, (_index$18 >= 0 && _index$18 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$18] : go$throwRuntimeError("index out of range")) >>> 2 << 24 >>> 24))) >>> 0) : go$throwRuntimeError("index out of range");
			} else if (_ref === 1) {
				_lhs$4 = dst; _index$20 = 1; _slice$18 = _lhs$4; _index$23 = _index$20;(_index$23 >= 0 && _index$23 < _slice$18.length) ? (_slice$18.array[_slice$18.offset + _index$23] = ((_slice$16 = _lhs$4, _index$21 = _index$20, (_index$21 >= 0 && _index$21 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$21] : go$throwRuntimeError("index out of range")) | ((((((_slice$17 = src, _index$22 = 0, (_index$22 >= 0 && _index$22 < _slice$17.length) ? _slice$17.array[_slice$17.offset + _index$22] : go$throwRuntimeError("index out of range")) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0) : go$throwRuntimeError("index out of range");
				_lhs$5 = dst; _index$24 = 0; _slice$21 = _lhs$5; _index$27 = _index$24;(_index$27 >= 0 && _index$27 < _slice$21.length) ? (_slice$21.array[_slice$21.offset + _index$27] = ((_slice$19 = _lhs$5, _index$25 = _index$24, (_index$25 >= 0 && _index$25 < _slice$19.length) ? _slice$19.array[_slice$19.offset + _index$25] : go$throwRuntimeError("index out of range")) | (((_slice$20 = src, _index$26 = 0, (_index$26 >= 0 && _index$26 < _slice$20.length) ? _slice$20.array[_slice$20.offset + _index$26] : go$throwRuntimeError("index out of range")) >>> 2 << 24 >>> 24))) >>> 0) : go$throwRuntimeError("index out of range");
			} else {
				_lhs$6 = dst; _index$28 = 3; _slice$24 = _lhs$6; _index$31 = _index$28;(_index$31 >= 0 && _index$31 < _slice$24.length) ? (_slice$24.array[_slice$24.offset + _index$31] = ((_slice$22 = _lhs$6, _index$29 = _index$28, (_index$29 >= 0 && _index$29 < _slice$22.length) ? _slice$22.array[_slice$22.offset + _index$29] : go$throwRuntimeError("index out of range")) | ((((_slice$23 = src, _index$30 = 2, (_index$30 >= 0 && _index$30 < _slice$23.length) ? _slice$23.array[_slice$23.offset + _index$30] : go$throwRuntimeError("index out of range")) & 63) >>> 0))) >>> 0) : go$throwRuntimeError("index out of range");
				_lhs$7 = dst; _index$32 = 2; _slice$27 = _lhs$7; _index$35 = _index$32;(_index$35 >= 0 && _index$35 < _slice$27.length) ? (_slice$27.array[_slice$27.offset + _index$35] = ((_slice$25 = _lhs$7, _index$33 = _index$32, (_index$33 >= 0 && _index$33 < _slice$25.length) ? _slice$25.array[_slice$25.offset + _index$33] : go$throwRuntimeError("index out of range")) | (((_slice$26 = src, _index$34 = 2, (_index$34 >= 0 && _index$34 < _slice$26.length) ? _slice$26.array[_slice$26.offset + _index$34] : go$throwRuntimeError("index out of range")) >>> 6 << 24 >>> 24))) >>> 0) : go$throwRuntimeError("index out of range");
				_lhs$8 = dst; _index$36 = 2; _slice$30 = _lhs$8; _index$39 = _index$36;(_index$39 >= 0 && _index$39 < _slice$30.length) ? (_slice$30.array[_slice$30.offset + _index$39] = ((_slice$28 = _lhs$8, _index$37 = _index$36, (_index$37 >= 0 && _index$37 < _slice$28.length) ? _slice$28.array[_slice$28.offset + _index$37] : go$throwRuntimeError("index out of range")) | ((((((_slice$29 = src, _index$38 = 1, (_index$38 >= 0 && _index$38 < _slice$29.length) ? _slice$29.array[_slice$29.offset + _index$38] : go$throwRuntimeError("index out of range")) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0) : go$throwRuntimeError("index out of range");
				_lhs$9 = dst; _index$40 = 1; _slice$33 = _lhs$9; _index$43 = _index$40;(_index$43 >= 0 && _index$43 < _slice$33.length) ? (_slice$33.array[_slice$33.offset + _index$43] = ((_slice$31 = _lhs$9, _index$41 = _index$40, (_index$41 >= 0 && _index$41 < _slice$31.length) ? _slice$31.array[_slice$31.offset + _index$41] : go$throwRuntimeError("index out of range")) | (((_slice$32 = src, _index$42 = 1, (_index$42 >= 0 && _index$42 < _slice$32.length) ? _slice$32.array[_slice$32.offset + _index$42] : go$throwRuntimeError("index out of range")) >>> 4 << 24 >>> 24))) >>> 0) : go$throwRuntimeError("index out of range");
				_lhs$10 = dst; _index$44 = 1; _slice$36 = _lhs$10; _index$47 = _index$44;(_index$47 >= 0 && _index$47 < _slice$36.length) ? (_slice$36.array[_slice$36.offset + _index$47] = ((_slice$34 = _lhs$10, _index$45 = _index$44, (_index$45 >= 0 && _index$45 < _slice$34.length) ? _slice$34.array[_slice$34.offset + _index$45] : go$throwRuntimeError("index out of range")) | ((((((_slice$35 = src, _index$46 = 0, (_index$46 >= 0 && _index$46 < _slice$35.length) ? _slice$35.array[_slice$35.offset + _index$46] : go$throwRuntimeError("index out of range")) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0) : go$throwRuntimeError("index out of range");
				_lhs$11 = dst; _index$48 = 0; _slice$39 = _lhs$11; _index$51 = _index$48;(_index$51 >= 0 && _index$51 < _slice$39.length) ? (_slice$39.array[_slice$39.offset + _index$51] = ((_slice$37 = _lhs$11, _index$49 = _index$48, (_index$49 >= 0 && _index$49 < _slice$37.length) ? _slice$37.array[_slice$37.offset + _index$49] : go$throwRuntimeError("index out of range")) | (((_slice$38 = src, _index$50 = 0, (_index$50 >= 0 && _index$50 < _slice$38.length) ? _slice$38.array[_slice$38.offset + _index$50] : go$throwRuntimeError("index out of range")) >>> 2 << 24 >>> 24))) >>> 0) : go$throwRuntimeError("index out of range");
			}
			j = 0;
			while (j < 4) {
				_slice$41 = dst; _index$53 = j;(_index$53 >= 0 && _index$53 < _slice$41.length) ? (_slice$41.array[_slice$41.offset + _index$53] = enc.encode.charCodeAt((_slice$40 = dst, _index$52 = j, (_index$52 >= 0 && _index$52 < _slice$40.length) ? _slice$40.array[_slice$40.offset + _index$52] : go$throwRuntimeError("index out of range")))) : go$throwRuntimeError("index out of range");
				j = j + 1 >> 0;
			}
			if (src.length < 3) {
				_slice$42 = dst; _index$54 = 3;(_index$54 >= 0 && _index$54 < _slice$42.length) ? (_slice$42.array[_slice$42.offset + _index$54] = 61) : go$throwRuntimeError("index out of range");
				if (src.length < 2) {
					_slice$43 = dst; _index$55 = 2;(_index$55 >= 0 && _index$55 < _slice$43.length) ? (_slice$43.array[_slice$43.offset + _index$55] = 61) : go$throwRuntimeError("index out of range");
				}
				break;
			}
			src = go$subslice(src, 3);
			dst = go$subslice(dst, 4);
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.go$val.Encode(dst, src); };
	Encoding.Ptr.prototype.EncodeToString = function(src) {
		var enc, buf;
		enc = this;
		buf = (go$sliceType(Go$Uint8)).make(enc.EncodedLen(src.length), 0, function() { return 0; });
		enc.Encode(buf, src);
		return go$bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.go$val.EncodeToString(src); };
	encoder.Ptr.prototype.Write = function(p) {
		var n, err, e, _tuple, i, _slice, _index, _tuple$1, _tuple$2, nn, _r, _tuple$3, x, _q, _tuple$4, i$1, _slice$1, _index$1;
		n = 0;
		err = null;
		e = this;
		if (!(go$interfaceIsEqual(e.err, null))) {
			_tuple = [0, e.err]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		if (e.nbuf > 0) {
			i = 0;
			i = 0;
			while (i < p.length && e.nbuf < 3) {
				e.buf[e.nbuf] = (_slice = p, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				e.nbuf = e.nbuf + 1 >> 0;
				i = i + 1 >> 0;
			}
			n = n + (i) >> 0;
			p = go$subslice(p, i);
			if (e.nbuf < 3) {
				return [n, err];
			}
			e.enc.Encode(go$subslice(new (go$sliceType(Go$Uint8))(e.out), 0), go$subslice(new (go$sliceType(Go$Uint8))(e.buf), 0));
			_tuple$1 = e.w.Write(go$subslice(new (go$sliceType(Go$Uint8))(e.out), 0, 4)); e.err = _tuple$1[1];
			if (!(go$interfaceIsEqual(e.err, null))) {
				_tuple$2 = [n, e.err]; n = _tuple$2[0]; err = _tuple$2[1];
				return [n, err];
			}
			e.nbuf = 0;
		}
		while (p.length >= 3) {
			nn = 768;
			if (nn > p.length) {
				nn = p.length;
			}
			nn = nn - ((_r = nn % 3, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"))) >> 0;
			if (nn > 0) {
				e.enc.Encode(go$subslice(new (go$sliceType(Go$Uint8))(e.out), 0), go$subslice(p, 0, nn));
				_tuple$3 = e.w.Write(go$subslice(new (go$sliceType(Go$Uint8))(e.out), 0, (x = (_q = nn / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), (((x >>> 16 << 16) * 4 >> 0) + (x << 16 >>> 16) * 4) >> 0))); e.err = _tuple$3[1];
				if (!(go$interfaceIsEqual(e.err, null))) {
					_tuple$4 = [n, e.err]; n = _tuple$4[0]; err = _tuple$4[1];
					return [n, err];
				}
			}
			n = n + (nn) >> 0;
			p = go$subslice(p, nn);
		}
		i$1 = 0;
		while (i$1 < p.length) {
			e.buf[i$1] = (_slice$1 = p, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			i$1 = i$1 + 1 >> 0;
		}
		e.nbuf = p.length;
		n = n + (p.length) >> 0;
		return [n, err];
	};
	encoder.prototype.Write = function(p) { return this.go$val.Write(p); };
	encoder.Ptr.prototype.Close = function() {
		var e, _tuple;
		e = this;
		if (go$interfaceIsEqual(e.err, null) && e.nbuf > 0) {
			e.enc.Encode(go$subslice(new (go$sliceType(Go$Uint8))(e.out), 0), go$subslice(new (go$sliceType(Go$Uint8))(e.buf), 0, e.nbuf));
			e.nbuf = 0;
			_tuple = e.w.Write(go$subslice(new (go$sliceType(Go$Uint8))(e.out), 0, 4)); e.err = _tuple[1];
		}
		return e.err;
	};
	encoder.prototype.Close = function() { return this.go$val.Close(); };
	NewEncoder = go$pkg.NewEncoder = function(enc, w) {
		return new encoder.Ptr(null, enc, w, go$makeNativeArray("Uint8", 3, function() { return 0; }), 0, go$makeNativeArray("Uint8", 1024, function() { return 0; }));
	};
	Encoding.Ptr.prototype.EncodedLen = function(n) {
		var enc, x, _q;
		enc = this;
		return (x = (_q = ((n + 2 >> 0)) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), (((x >>> 16 << 16) * 4 >> 0) + (x << 16 >>> 16) * 4) >> 0);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.go$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt(new Go$Int64(e.high, e.low), 10);
	};
	go$ptrType(CorruptInputError).prototype.Error = function() { return this.go$get().Error(); };
	Encoding.Ptr.prototype.decode = function(dst, src) {
		var n, end, err, enc, olen, dbuf, dlen, j, _tuple, _slice, _index, in$1, _tuple$1, _slice$1, _index$1, _tuple$2, _tuple$3, _tuple$4, _ref, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _tuple$5;
		n = 0;
		end = false;
		err = null;
		enc = this;
		olen = src.length;
		while (src.length > 0 && !end) {
			dbuf = go$makeNativeArray("Uint8", 4, function() { return 0; });
			dlen = 4;
			j = 0;
			while (j < 4) {
				if (src.length === 0) {
					_tuple = [n, false, new CorruptInputError(0, ((olen - src.length >> 0) - j >> 0))]; n = _tuple[0]; end = _tuple[1]; err = _tuple[2];
					return [n, end, err];
				}
				in$1 = (_slice = src, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				src = go$subslice(src, 1);
				if ((in$1 === 61) && j >= 2 && src.length < 4) {
					if ((src.length + j >> 0) < 3) {
						_tuple$1 = [n, false, new CorruptInputError(0, olen)]; n = _tuple$1[0]; end = _tuple$1[1]; err = _tuple$1[2];
						return [n, end, err];
					}
					if (src.length > 0 && !(((_slice$1 = src, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 61))) {
						_tuple$2 = [n, false, new CorruptInputError(0, ((olen - src.length >> 0) - 1 >> 0))]; n = _tuple$2[0]; end = _tuple$2[1]; err = _tuple$2[2];
						return [n, end, err];
					}
					_tuple$3 = [j, true]; dlen = _tuple$3[0]; end = _tuple$3[1];
					break;
				}
				dbuf[j] = enc.decodeMap[in$1];
				if (dbuf[j] === 255) {
					_tuple$4 = [n, false, new CorruptInputError(0, ((olen - src.length >> 0) - 1 >> 0))]; n = _tuple$4[0]; end = _tuple$4[1]; err = _tuple$4[2];
					return [n, end, err];
				}
				j = j + 1 >> 0;
			}
			_ref = dlen;
			if (_ref === 4) {
				_slice$2 = dst; _index$2 = 2;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = ((dbuf[2] << 6 << 24 >>> 24) | dbuf[3]) >>> 0) : go$throwRuntimeError("index out of range");
				_slice$3 = dst; _index$3 = 1;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
				_slice$4 = dst; _index$4 = 0;(_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
			} else if (_ref === 3) {
				_slice$5 = dst; _index$5 = 1;(_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
				_slice$6 = dst; _index$6 = 0;(_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
			} else if (_ref === 2) {
				_slice$7 = dst; _index$7 = 0;(_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0) : go$throwRuntimeError("index out of range");
			}
			dst = go$subslice(dst, 3);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tuple$5 = [n, end, null]; n = _tuple$5[0]; end = _tuple$5[1]; err = _tuple$5[2];
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.go$val.decode(dst, src); };
	Encoding.Ptr.prototype.Decode = function(dst, src) {
		var n, err, enc, _tuple;
		n = 0;
		err = null;
		enc = this;
		src = bytes.Map(removeNewlinesMapper, src);
		_tuple = enc.decode(dst, src); n = _tuple[0]; err = _tuple[2];
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.go$val.Decode(dst, src); };
	Encoding.Ptr.prototype.DecodeString = function(s) {
		var enc, dbuf, _tuple, n, err;
		enc = this;
		s = strings.Map(removeNewlinesMapper, s);
		dbuf = (go$sliceType(Go$Uint8)).make(enc.DecodedLen(s.length), 0, function() { return 0; });
		_tuple = enc.Decode(dbuf, new (go$sliceType(Go$Uint8))(go$stringToBytes(s))); n = _tuple[0]; err = _tuple[1];
		return [go$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.go$val.DecodeString(s); };
	Encoding.Ptr.prototype.DecodedLen = function(n) {
		var enc, x, _q;
		enc = this;
		return (x = (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), (((x >>> 16 << 16) * 3 >> 0) + (x << 16 >>> 16) * 3) >> 0);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.go$val.DecodedLen(n); };
	go$pkg.init = function() {
		(go$ptrType(Encoding)).methods = [["Decode", "", [(go$sliceType(Go$Uint8)), (go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["DecodeString", "", [Go$String], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["DecodedLen", "", [Go$Int], [Go$Int], false, -1], ["Encode", "", [(go$sliceType(Go$Uint8)), (go$sliceType(Go$Uint8))], [], false, -1], ["EncodeToString", "", [(go$sliceType(Go$Uint8))], [Go$String], false, -1], ["EncodedLen", "", [Go$Int], [Go$Int], false, -1], ["decode", "encoding/base64", [(go$sliceType(Go$Uint8)), (go$sliceType(Go$Uint8))], [Go$Int, Go$Bool, go$error], false, -1]];
		Encoding.init([["encode", "encode", "encoding/base64", Go$String, ""], ["decodeMap", "decodeMap", "encoding/base64", (go$arrayType(Go$Uint8, 256)), ""]]);
		(go$ptrType(encoder)).methods = [["Close", "", [], [go$error], false, -1], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1]];
		encoder.init([["err", "err", "encoding/base64", go$error, ""], ["enc", "enc", "encoding/base64", (go$ptrType(Encoding)), ""], ["w", "w", "encoding/base64", io.Writer, ""], ["buf", "buf", "encoding/base64", (go$arrayType(Go$Uint8, 3)), ""], ["nbuf", "nbuf", "encoding/base64", Go$Int, ""], ["out", "out", "encoding/base64", (go$arrayType(Go$Uint8, 1024)), ""]]);
		CorruptInputError.methods = [["Error", "", [], [Go$String], false, -1]];
		(go$ptrType(CorruptInputError)).methods = [["Error", "", [], [Go$String], false, -1]];
		go$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		go$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		removeNewlinesMapper = (function(r) {
			if ((r === 13) || (r === 10)) {
				return -1;
			}
			return r;
		});
	}
	return go$pkg;
})();
go$packages["unicode/utf16"] = (function() {
	var go$pkg = {}, IsSurrogate, DecodeRune, EncodeRune, Encode, Decode;
	IsSurrogate = go$pkg.IsSurrogate = function(r) {
		return 55296 <= r && r < 57344;
	};
	DecodeRune = go$pkg.DecodeRune = function(r1, r2) {
		if (55296 <= r1 && r1 < 56320 && 56320 <= r2 && r2 < 57344) {
			return ((((r1 - 55296 >> 0)) << 10 >> 0) | ((r2 - 56320 >> 0))) + 65536 >> 0;
		}
		return 65533;
	};
	EncodeRune = go$pkg.EncodeRune = function(r) {
		var r1, r2, _tuple, _tuple$1;
		r1 = 0;
		r2 = 0;
		if (r < 65536 || r > 1114111 || IsSurrogate(r)) {
			_tuple = [65533, 65533]; r1 = _tuple[0]; r2 = _tuple[1];
			return [r1, r2];
		}
		r = r - 65536 >> 0;
		_tuple$1 = [55296 + (((r >> 10 >> 0)) & 1023) >> 0, 56320 + (r & 1023) >> 0]; r1 = _tuple$1[0]; r2 = _tuple$1[1];
		return [r1, r2];
	};
	Encode = go$pkg.Encode = function(s) {
		var n, _ref, _i, _slice, _index, v, a, _ref$1, _i$1, _slice$1, _index$1, v$1, _slice$2, _index$2, _slice$3, _index$3, _tuple, r1, r2, _slice$4, _index$4, _slice$5, _index$5;
		n = s.length;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			v = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (v >= 65536) {
				n = n + 1 >> 0;
			}
			_i++;
		}
		a = (go$sliceType(Go$Uint16)).make(n, 0, function() { return 0; });
		n = 0;
		_ref$1 = s;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			v$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (v$1 < 0 || 55296 <= v$1 && v$1 < 57344 || v$1 > 1114111) {
				v$1 = 65533;
				_slice$2 = a; _index$2 = n;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = (v$1 << 16 >>> 16)) : go$throwRuntimeError("index out of range");
				n = n + 1 >> 0;
			} else if (v$1 < 65536) {
				_slice$3 = a; _index$3 = n;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (v$1 << 16 >>> 16)) : go$throwRuntimeError("index out of range");
				n = n + 1 >> 0;
			} else {
				_tuple = EncodeRune(v$1); r1 = _tuple[0]; r2 = _tuple[1];
				_slice$4 = a; _index$4 = n;(_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = (r1 << 16 >>> 16)) : go$throwRuntimeError("index out of range");
				_slice$5 = a; _index$5 = n + 1 >> 0;(_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = (r2 << 16 >>> 16)) : go$throwRuntimeError("index out of range");
				n = n + 2 >> 0;
			}
			_i$1++;
		}
		return go$subslice(a, 0, n);
	};
	Decode = go$pkg.Decode = function(s) {
		var a, n, i, _slice, _index, r, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6;
		a = (go$sliceType(Go$Int32)).make(s.length, 0, function() { return 0; });
		n = 0;
		i = 0;
		while (i < s.length) {
			r = (_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (55296 <= r && r < 56320 && (i + 1 >> 0) < s.length && 56320 <= (_slice$1 = s, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) && (_slice$2 = s, _index$2 = (i + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) < 57344) {
				_slice$4 = a; _index$4 = n;(_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = DecodeRune((r >> 0), ((_slice$3 = s, _index$3 = (i + 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) >> 0))) : go$throwRuntimeError("index out of range");
				i = i + 1 >> 0;
				n = n + 1 >> 0;
			} else if (55296 <= r && r < 57344) {
				_slice$5 = a; _index$5 = n;(_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = 65533) : go$throwRuntimeError("index out of range");
				n = n + 1 >> 0;
			} else {
				_slice$6 = a; _index$6 = n;(_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = (r >> 0)) : go$throwRuntimeError("index out of range");
				n = n + 1 >> 0;
			}
			i = i + 1 >> 0;
		}
		return go$subslice(a, 0, n);
	};
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["syscall"] = (function() {
	var go$pkg = {}, sync = go$packages["sync"], atomic = go$packages["sync/atomic"], utf16 = go$packages["unicode/utf16"], errors$1 = go$packages["errors"], DLLError, DLL, Proc, LazyDLL, LazyProc, Handle, Errno, SecurityAttributes, Overlapped, Filetime, Win32finddata, win32finddata1, ByHandleFileInformation, Win32FileAttributeData, Systemtime, Timezoneinformation, Syscall, Syscall6, Syscall9, Syscall12, Syscall15, loadlibrary, getprocaddress, LoadDLL, NewLazyDLL, Getenv, CloseOnExec, itoa, ByteSliceFromString, BytePtrFromString, UTF16FromString, UTF16ToString, UTF16PtrFromString, langid, makeInheritSa, Open, Read, Write, Seek, getStdHandle, Getwd, Ftruncate, Fsync, FindFirstFile, FindNextFile, Fchdir, Fchmod, Fchown, FreeLibrary, FormatMessage, CreateFile, ReadFile, WriteFile, SetFilePointer, CloseHandle, GetStdHandle, findFirstFile1, findNextFile1, FindClose, GetFileInformationByHandle, GetCurrentDirectory, SetEndOfFile, GetTimeZoneInformation, GetFileType, GetEnvironmentVariable, GetFileAttributesEx, GetCommandLine, CommandLineToArgv, SetHandleInformation, FlushFileBuffers, RegOpenKeyEx, RegQueryInfoKey, RegEnumKeyEx, RegQueryValueEx, GetConsoleMode, WriteConsole, ReadConsole, copyFindData, errors, modkernel32, modadvapi32, modshell32, modmswsock, modcrypt32, modws2_32, moddnsapi, modiphlpapi, modsecur32, modnetapi32, moduserenv, procGetLastError, procLoadLibraryW, procFreeLibrary, procGetProcAddress, procGetVersion, procFormatMessageW, procExitProcess, procCreateFileW, procReadFile, procWriteFile, procSetFilePointer, procCloseHandle, procGetStdHandle, procFindFirstFileW, procFindNextFileW, procFindClose, procGetFileInformationByHandle, procGetCurrentDirectoryW, procSetCurrentDirectoryW, procCreateDirectoryW, procRemoveDirectoryW, procDeleteFileW, procMoveFileW, procGetComputerNameW, procSetEndOfFile, procGetSystemTimeAsFileTime, procGetTimeZoneInformation, procCreateIoCompletionPort, procGetQueuedCompletionStatus, procPostQueuedCompletionStatus, procCancelIo, procCancelIoEx, procCreateProcessW, procOpenProcess, procTerminateProcess, procGetExitCodeProcess, procGetStartupInfoW, procGetCurrentProcess, procGetProcessTimes, procDuplicateHandle, procWaitForSingleObject, procGetTempPathW, procCreatePipe, procGetFileType, procCryptAcquireContextW, procCryptReleaseContext, procCryptGenRandom, procGetEnvironmentStringsW, procFreeEnvironmentStringsW, procGetEnvironmentVariableW, procSetEnvironmentVariableW, procSetFileTime, procGetFileAttributesW, procSetFileAttributesW, procGetFileAttributesExW, procGetCommandLineW, procCommandLineToArgvW, procLocalFree, procSetHandleInformation, procFlushFileBuffers, procGetFullPathNameW, procGetLongPathNameW, procGetShortPathNameW, procCreateFileMappingW, procMapViewOfFile, procUnmapViewOfFile, procFlushViewOfFile, procVirtualLock, procVirtualUnlock, procTransmitFile, procReadDirectoryChangesW, procCertOpenSystemStoreW, procCertOpenStore, procCertEnumCertificatesInStore, procCertAddCertificateContextToStore, procCertCloseStore, procCertGetCertificateChain, procCertFreeCertificateChain, procCertCreateCertificateContext, procCertFreeCertificateContext, procCertVerifyCertificateChainPolicy, procRegOpenKeyExW, procRegCloseKey, procRegQueryInfoKeyW, procRegEnumKeyExW, procRegQueryValueExW, procGetCurrentProcessId, procGetConsoleMode, procWriteConsoleW, procReadConsoleW, procWSAStartup, procWSACleanup, procWSAIoctl, procsocket, procsetsockopt, procgetsockopt, procbind, procconnect, procgetsockname, procgetpeername, proclisten, procshutdown, procclosesocket, procAcceptEx, procGetAcceptExSockaddrs, procWSARecv, procWSASend, procWSARecvFrom, procWSASendTo, procgethostbyname, procgetservbyname, procntohs, procgetprotobyname, procDnsQuery_W, procDnsRecordListFree, procGetAddrInfoW, procFreeAddrInfoW, procGetIfEntry, procGetAdaptersInfo, procSetFileCompletionNotificationModes, procWSAEnumProtocolsW, procTranslateNameW, procGetUserNameExW, procNetUserGetInfo, procNetGetJoinInformation, procNetApiBufferFree, procLookupAccountSidW, procLookupAccountNameW, procConvertSidToStringSidW, procConvertStringSidToSidW, procGetLengthSid, procCopySid, procOpenProcessToken, procGetTokenInformation, procGetUserProfileDirectoryW;
	DLLError = go$pkg.DLLError = go$newType(0, "Struct", "syscall.DLLError", "DLLError", "syscall", function(Err_, ObjName_, Msg_) {
		this.go$val = this;
		this.Err = Err_ !== undefined ? Err_ : null;
		this.ObjName = ObjName_ !== undefined ? ObjName_ : "";
		this.Msg = Msg_ !== undefined ? Msg_ : "";
	});
	DLL = go$pkg.DLL = go$newType(0, "Struct", "syscall.DLL", "DLL", "syscall", function(Name_, Handle_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Handle = Handle_ !== undefined ? Handle_ : 0;
	});
	Proc = go$pkg.Proc = go$newType(0, "Struct", "syscall.Proc", "Proc", "syscall", function(Dll_, Name_, addr_) {
		this.go$val = this;
		this.Dll = Dll_ !== undefined ? Dll_ : (go$ptrType(DLL)).nil;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.addr = addr_ !== undefined ? addr_ : 0;
	});
	LazyDLL = go$pkg.LazyDLL = go$newType(0, "Struct", "syscall.LazyDLL", "LazyDLL", "syscall", function(mu_, dll_, Name_) {
		this.go$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.dll = dll_ !== undefined ? dll_ : (go$ptrType(DLL)).nil;
		this.Name = Name_ !== undefined ? Name_ : "";
	});
	LazyProc = go$pkg.LazyProc = go$newType(0, "Struct", "syscall.LazyProc", "LazyProc", "syscall", function(mu_, Name_, l_, proc_) {
		this.go$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.Name = Name_ !== undefined ? Name_ : "";
		this.l = l_ !== undefined ? l_ : (go$ptrType(LazyDLL)).nil;
		this.proc = proc_ !== undefined ? proc_ : (go$ptrType(Proc)).nil;
	});
	Handle = go$pkg.Handle = go$newType(4, "Uintptr", "syscall.Handle", "Handle", "syscall", null);
	Errno = go$pkg.Errno = go$newType(4, "Uintptr", "syscall.Errno", "Errno", "syscall", null);
	SecurityAttributes = go$pkg.SecurityAttributes = go$newType(0, "Struct", "syscall.SecurityAttributes", "SecurityAttributes", "syscall", function(Length_, SecurityDescriptor_, InheritHandle_) {
		this.go$val = this;
		this.Length = Length_ !== undefined ? Length_ : 0;
		this.SecurityDescriptor = SecurityDescriptor_ !== undefined ? SecurityDescriptor_ : 0;
		this.InheritHandle = InheritHandle_ !== undefined ? InheritHandle_ : 0;
	});
	Overlapped = go$pkg.Overlapped = go$newType(0, "Struct", "syscall.Overlapped", "Overlapped", "syscall", function(Internal_, InternalHigh_, Offset_, OffsetHigh_, HEvent_) {
		this.go$val = this;
		this.Internal = Internal_ !== undefined ? Internal_ : 0;
		this.InternalHigh = InternalHigh_ !== undefined ? InternalHigh_ : 0;
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.OffsetHigh = OffsetHigh_ !== undefined ? OffsetHigh_ : 0;
		this.HEvent = HEvent_ !== undefined ? HEvent_ : 0;
	});
	Filetime = go$pkg.Filetime = go$newType(0, "Struct", "syscall.Filetime", "Filetime", "syscall", function(LowDateTime_, HighDateTime_) {
		this.go$val = this;
		this.LowDateTime = LowDateTime_ !== undefined ? LowDateTime_ : 0;
		this.HighDateTime = HighDateTime_ !== undefined ? HighDateTime_ : 0;
	});
	Win32finddata = go$pkg.Win32finddata = go$newType(0, "Struct", "syscall.Win32finddata", "Win32finddata", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_, Reserved0_, Reserved1_, FileName_, AlternateFileName_) {
		this.go$val = this;
		this.FileAttributes = FileAttributes_ !== undefined ? FileAttributes_ : 0;
		this.CreationTime = CreationTime_ !== undefined ? CreationTime_ : new Filetime.Ptr();
		this.LastAccessTime = LastAccessTime_ !== undefined ? LastAccessTime_ : new Filetime.Ptr();
		this.LastWriteTime = LastWriteTime_ !== undefined ? LastWriteTime_ : new Filetime.Ptr();
		this.FileSizeHigh = FileSizeHigh_ !== undefined ? FileSizeHigh_ : 0;
		this.FileSizeLow = FileSizeLow_ !== undefined ? FileSizeLow_ : 0;
		this.Reserved0 = Reserved0_ !== undefined ? Reserved0_ : 0;
		this.Reserved1 = Reserved1_ !== undefined ? Reserved1_ : 0;
		this.FileName = FileName_ !== undefined ? FileName_ : go$makeNativeArray("Uint16", 259, function() { return 0; });
		this.AlternateFileName = AlternateFileName_ !== undefined ? AlternateFileName_ : go$makeNativeArray("Uint16", 13, function() { return 0; });
	});
	win32finddata1 = go$pkg.win32finddata1 = go$newType(0, "Struct", "syscall.win32finddata1", "win32finddata1", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_, Reserved0_, Reserved1_, FileName_, AlternateFileName_) {
		this.go$val = this;
		this.FileAttributes = FileAttributes_ !== undefined ? FileAttributes_ : 0;
		this.CreationTime = CreationTime_ !== undefined ? CreationTime_ : new Filetime.Ptr();
		this.LastAccessTime = LastAccessTime_ !== undefined ? LastAccessTime_ : new Filetime.Ptr();
		this.LastWriteTime = LastWriteTime_ !== undefined ? LastWriteTime_ : new Filetime.Ptr();
		this.FileSizeHigh = FileSizeHigh_ !== undefined ? FileSizeHigh_ : 0;
		this.FileSizeLow = FileSizeLow_ !== undefined ? FileSizeLow_ : 0;
		this.Reserved0 = Reserved0_ !== undefined ? Reserved0_ : 0;
		this.Reserved1 = Reserved1_ !== undefined ? Reserved1_ : 0;
		this.FileName = FileName_ !== undefined ? FileName_ : go$makeNativeArray("Uint16", 260, function() { return 0; });
		this.AlternateFileName = AlternateFileName_ !== undefined ? AlternateFileName_ : go$makeNativeArray("Uint16", 14, function() { return 0; });
	});
	ByHandleFileInformation = go$pkg.ByHandleFileInformation = go$newType(0, "Struct", "syscall.ByHandleFileInformation", "ByHandleFileInformation", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, VolumeSerialNumber_, FileSizeHigh_, FileSizeLow_, NumberOfLinks_, FileIndexHigh_, FileIndexLow_) {
		this.go$val = this;
		this.FileAttributes = FileAttributes_ !== undefined ? FileAttributes_ : 0;
		this.CreationTime = CreationTime_ !== undefined ? CreationTime_ : new Filetime.Ptr();
		this.LastAccessTime = LastAccessTime_ !== undefined ? LastAccessTime_ : new Filetime.Ptr();
		this.LastWriteTime = LastWriteTime_ !== undefined ? LastWriteTime_ : new Filetime.Ptr();
		this.VolumeSerialNumber = VolumeSerialNumber_ !== undefined ? VolumeSerialNumber_ : 0;
		this.FileSizeHigh = FileSizeHigh_ !== undefined ? FileSizeHigh_ : 0;
		this.FileSizeLow = FileSizeLow_ !== undefined ? FileSizeLow_ : 0;
		this.NumberOfLinks = NumberOfLinks_ !== undefined ? NumberOfLinks_ : 0;
		this.FileIndexHigh = FileIndexHigh_ !== undefined ? FileIndexHigh_ : 0;
		this.FileIndexLow = FileIndexLow_ !== undefined ? FileIndexLow_ : 0;
	});
	Win32FileAttributeData = go$pkg.Win32FileAttributeData = go$newType(0, "Struct", "syscall.Win32FileAttributeData", "Win32FileAttributeData", "syscall", function(FileAttributes_, CreationTime_, LastAccessTime_, LastWriteTime_, FileSizeHigh_, FileSizeLow_) {
		this.go$val = this;
		this.FileAttributes = FileAttributes_ !== undefined ? FileAttributes_ : 0;
		this.CreationTime = CreationTime_ !== undefined ? CreationTime_ : new Filetime.Ptr();
		this.LastAccessTime = LastAccessTime_ !== undefined ? LastAccessTime_ : new Filetime.Ptr();
		this.LastWriteTime = LastWriteTime_ !== undefined ? LastWriteTime_ : new Filetime.Ptr();
		this.FileSizeHigh = FileSizeHigh_ !== undefined ? FileSizeHigh_ : 0;
		this.FileSizeLow = FileSizeLow_ !== undefined ? FileSizeLow_ : 0;
	});
	Systemtime = go$pkg.Systemtime = go$newType(0, "Struct", "syscall.Systemtime", "Systemtime", "syscall", function(Year_, Month_, DayOfWeek_, Day_, Hour_, Minute_, Second_, Milliseconds_) {
		this.go$val = this;
		this.Year = Year_ !== undefined ? Year_ : 0;
		this.Month = Month_ !== undefined ? Month_ : 0;
		this.DayOfWeek = DayOfWeek_ !== undefined ? DayOfWeek_ : 0;
		this.Day = Day_ !== undefined ? Day_ : 0;
		this.Hour = Hour_ !== undefined ? Hour_ : 0;
		this.Minute = Minute_ !== undefined ? Minute_ : 0;
		this.Second = Second_ !== undefined ? Second_ : 0;
		this.Milliseconds = Milliseconds_ !== undefined ? Milliseconds_ : 0;
	});
	Timezoneinformation = go$pkg.Timezoneinformation = go$newType(0, "Struct", "syscall.Timezoneinformation", "Timezoneinformation", "syscall", function(Bias_, StandardName_, StandardDate_, StandardBias_, DaylightName_, DaylightDate_, DaylightBias_) {
		this.go$val = this;
		this.Bias = Bias_ !== undefined ? Bias_ : 0;
		this.StandardName = StandardName_ !== undefined ? StandardName_ : go$makeNativeArray("Uint16", 32, function() { return 0; });
		this.StandardDate = StandardDate_ !== undefined ? StandardDate_ : new Systemtime.Ptr();
		this.StandardBias = StandardBias_ !== undefined ? StandardBias_ : 0;
		this.DaylightName = DaylightName_ !== undefined ? DaylightName_ : go$makeNativeArray("Uint16", 32, function() { return 0; });
		this.DaylightDate = DaylightDate_ !== undefined ? DaylightDate_ : new Systemtime.Ptr();
		this.DaylightBias = DaylightBias_ !== undefined ? DaylightBias_ : 0;
	});
	DLLError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Msg;
	};
	DLLError.prototype.Error = function() { return this.go$val.Error(); };
	Syscall = go$pkg.Syscall = function() {
		throw go$panic("Native function not implemented: Syscall");
	};
	Syscall6 = go$pkg.Syscall6 = function() {
		throw go$panic("Native function not implemented: Syscall6");
	};
	Syscall9 = go$pkg.Syscall9 = function() {
		throw go$panic("Native function not implemented: Syscall9");
	};
	Syscall12 = go$pkg.Syscall12 = function() {
		throw go$panic("Native function not implemented: Syscall12");
	};
	Syscall15 = go$pkg.Syscall15 = function() {
		throw go$panic("Native function not implemented: Syscall15");
	};
	loadlibrary = function() {
		throw go$panic("Native function not implemented: loadlibrary");
	};
	getprocaddress = function() {
		throw go$panic("Native function not implemented: getprocaddress");
	};
	LoadDLL = go$pkg.LoadDLL = function(name) {
		var dll, err, _tuple, namep, _tuple$1, _tuple$2, h, e, _tuple$3, d, _tuple$4;
		dll = (go$ptrType(DLL)).nil;
		err = null;
		_tuple = UTF16PtrFromString(name); namep = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [(go$ptrType(DLL)).nil, err]; dll = _tuple$1[0]; err = _tuple$1[1];
			return [dll, err];
		}
		_tuple$2 = loadlibrary(namep); h = _tuple$2[0]; e = _tuple$2[1];
		if (!((e === 0))) {
			_tuple$3 = [(go$ptrType(DLL)).nil, new DLLError.Ptr(new Errno(e), name, "Failed to load " + name + ": " + (new Errno(e)).Error())]; dll = _tuple$3[0]; err = _tuple$3[1];
			return [dll, err];
		}
		d = new DLL.Ptr(name, (h >>> 0));
		_tuple$4 = [d, null]; dll = _tuple$4[0]; err = _tuple$4[1];
		return [dll, err];
	};
	DLL.Ptr.prototype.FindProc = function(name) {
		var proc, err, d, _tuple, namep, _tuple$1, _tuple$2, a, e, _tuple$3, p, _tuple$4;
		proc = (go$ptrType(Proc)).nil;
		err = null;
		d = this;
		_tuple = BytePtrFromString(name); namep = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [(go$ptrType(Proc)).nil, err]; proc = _tuple$1[0]; err = _tuple$1[1];
			return [proc, err];
		}
		_tuple$2 = getprocaddress((d.Handle >>> 0), namep); a = _tuple$2[0]; e = _tuple$2[1];
		if (!((e === 0))) {
			_tuple$3 = [(go$ptrType(Proc)).nil, new DLLError.Ptr(new Errno(e), name, "Failed to find " + name + " procedure in " + d.Name + ": " + (new Errno(e)).Error())]; proc = _tuple$3[0]; err = _tuple$3[1];
			return [proc, err];
		}
		p = new Proc.Ptr(d, name, a);
		_tuple$4 = [p, null]; proc = _tuple$4[0]; err = _tuple$4[1];
		return [proc, err];
	};
	DLL.prototype.FindProc = function(name) { return this.go$val.FindProc(name); };
	DLL.Ptr.prototype.MustFindProc = function(name) {
		var d, _tuple, p, e;
		d = this;
		_tuple = d.FindProc(name); p = _tuple[0]; e = _tuple[1];
		if (!(go$interfaceIsEqual(e, null))) {
			throw go$panic(e);
		}
		return p;
	};
	DLL.prototype.MustFindProc = function(name) { return this.go$val.MustFindProc(name); };
	DLL.Ptr.prototype.Release = function() {
		var err, d;
		err = null;
		d = this;
		err = FreeLibrary(d.Handle);
		return err;
	};
	DLL.prototype.Release = function() { return this.go$val.Release(); };
	Proc.Ptr.prototype.Addr = function() {
		var p;
		p = this;
		return p.addr;
	};
	Proc.prototype.Addr = function() { return this.go$val.Addr(); };
	Proc.Ptr.prototype.Call = function(a) {
		var r1, r2, lastErr, p, _ref, _tuple, _tuple$1, _slice, _index, _tuple$2, _slice$1, _index$1, _slice$2, _index$2, _tuple$3, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _tuple$4, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _tuple$5, _slice$10, _index$10, _slice$11, _index$11, _slice$12, _index$12, _slice$13, _index$13, _slice$14, _index$14, _tuple$6, _slice$15, _index$15, _slice$16, _index$16, _slice$17, _index$17, _slice$18, _index$18, _slice$19, _index$19, _slice$20, _index$20, _tuple$7, _slice$21, _index$21, _slice$22, _index$22, _slice$23, _index$23, _slice$24, _index$24, _slice$25, _index$25, _slice$26, _index$26, _slice$27, _index$27, _tuple$8, _slice$28, _index$28, _slice$29, _index$29, _slice$30, _index$30, _slice$31, _index$31, _slice$32, _index$32, _slice$33, _index$33, _slice$34, _index$34, _slice$35, _index$35, _tuple$9, _slice$36, _index$36, _slice$37, _index$37, _slice$38, _index$38, _slice$39, _index$39, _slice$40, _index$40, _slice$41, _index$41, _slice$42, _index$42, _slice$43, _index$43, _slice$44, _index$44, _tuple$10, _slice$45, _index$45, _slice$46, _index$46, _slice$47, _index$47, _slice$48, _index$48, _slice$49, _index$49, _slice$50, _index$50, _slice$51, _index$51, _slice$52, _index$52, _slice$53, _index$53, _slice$54, _index$54, _tuple$11, _slice$55, _index$55, _slice$56, _index$56, _slice$57, _index$57, _slice$58, _index$58, _slice$59, _index$59, _slice$60, _index$60, _slice$61, _index$61, _slice$62, _index$62, _slice$63, _index$63, _slice$64, _index$64, _slice$65, _index$65, _tuple$12, _slice$66, _index$66, _slice$67, _index$67, _slice$68, _index$68, _slice$69, _index$69, _slice$70, _index$70, _slice$71, _index$71, _slice$72, _index$72, _slice$73, _index$73, _slice$74, _index$74, _slice$75, _index$75, _slice$76, _index$76, _slice$77, _index$77, _tuple$13, _slice$78, _index$78, _slice$79, _index$79, _slice$80, _index$80, _slice$81, _index$81, _slice$82, _index$82, _slice$83, _index$83, _slice$84, _index$84, _slice$85, _index$85, _slice$86, _index$86, _slice$87, _index$87, _slice$88, _index$88, _slice$89, _index$89, _slice$90, _index$90, _tuple$14, _slice$91, _index$91, _slice$92, _index$92, _slice$93, _index$93, _slice$94, _index$94, _slice$95, _index$95, _slice$96, _index$96, _slice$97, _index$97, _slice$98, _index$98, _slice$99, _index$99, _slice$100, _index$100, _slice$101, _index$101, _slice$102, _index$102, _slice$103, _index$103, _slice$104, _index$104, _tuple$15, _slice$105, _index$105, _slice$106, _index$106, _slice$107, _index$107, _slice$108, _index$108, _slice$109, _index$109, _slice$110, _index$110, _slice$111, _index$111, _slice$112, _index$112, _slice$113, _index$113, _slice$114, _index$114, _slice$115, _index$115, _slice$116, _index$116, _slice$117, _index$117, _slice$118, _index$118, _slice$119, _index$119;
		r1 = 0;
		r2 = 0;
		lastErr = null;
		p = this;
		_ref = a.length;
		if (_ref === 0) {
			_tuple = Syscall(p.Addr(), (a.length >>> 0), 0, 0, 0); r1 = _tuple[0]; r2 = _tuple[1]; lastErr = new Errno(_tuple[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 1) {
			_tuple$1 = Syscall(p.Addr(), (a.length >>> 0), (_slice = a, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), 0, 0); r1 = _tuple$1[0]; r2 = _tuple$1[1]; lastErr = new Errno(_tuple$1[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 2) {
			_tuple$2 = Syscall(p.Addr(), (a.length >>> 0), (_slice$1 = a, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (_slice$2 = a, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), 0); r1 = _tuple$2[0]; r2 = _tuple$2[1]; lastErr = new Errno(_tuple$2[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 3) {
			_tuple$3 = Syscall(p.Addr(), (a.length >>> 0), (_slice$3 = a, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), (_slice$4 = a, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), (_slice$5 = a, _index$5 = 2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"))); r1 = _tuple$3[0]; r2 = _tuple$3[1]; lastErr = new Errno(_tuple$3[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 4) {
			_tuple$4 = Syscall6(p.Addr(), (a.length >>> 0), (_slice$6 = a, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")), (_slice$7 = a, _index$7 = 1, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), (_slice$8 = a, _index$8 = 2, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")), (_slice$9 = a, _index$9 = 3, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")), 0, 0); r1 = _tuple$4[0]; r2 = _tuple$4[1]; lastErr = new Errno(_tuple$4[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 5) {
			_tuple$5 = Syscall6(p.Addr(), (a.length >>> 0), (_slice$10 = a, _index$10 = 0, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")), (_slice$11 = a, _index$11 = 1, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")), (_slice$12 = a, _index$12 = 2, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")), (_slice$13 = a, _index$13 = 3, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")), (_slice$14 = a, _index$14 = 4, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range")), 0); r1 = _tuple$5[0]; r2 = _tuple$5[1]; lastErr = new Errno(_tuple$5[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 6) {
			_tuple$6 = Syscall6(p.Addr(), (a.length >>> 0), (_slice$15 = a, _index$15 = 0, (_index$15 >= 0 && _index$15 < _slice$15.length) ? _slice$15.array[_slice$15.offset + _index$15] : go$throwRuntimeError("index out of range")), (_slice$16 = a, _index$16 = 1, (_index$16 >= 0 && _index$16 < _slice$16.length) ? _slice$16.array[_slice$16.offset + _index$16] : go$throwRuntimeError("index out of range")), (_slice$17 = a, _index$17 = 2, (_index$17 >= 0 && _index$17 < _slice$17.length) ? _slice$17.array[_slice$17.offset + _index$17] : go$throwRuntimeError("index out of range")), (_slice$18 = a, _index$18 = 3, (_index$18 >= 0 && _index$18 < _slice$18.length) ? _slice$18.array[_slice$18.offset + _index$18] : go$throwRuntimeError("index out of range")), (_slice$19 = a, _index$19 = 4, (_index$19 >= 0 && _index$19 < _slice$19.length) ? _slice$19.array[_slice$19.offset + _index$19] : go$throwRuntimeError("index out of range")), (_slice$20 = a, _index$20 = 5, (_index$20 >= 0 && _index$20 < _slice$20.length) ? _slice$20.array[_slice$20.offset + _index$20] : go$throwRuntimeError("index out of range"))); r1 = _tuple$6[0]; r2 = _tuple$6[1]; lastErr = new Errno(_tuple$6[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 7) {
			_tuple$7 = Syscall9(p.Addr(), (a.length >>> 0), (_slice$21 = a, _index$21 = 0, (_index$21 >= 0 && _index$21 < _slice$21.length) ? _slice$21.array[_slice$21.offset + _index$21] : go$throwRuntimeError("index out of range")), (_slice$22 = a, _index$22 = 1, (_index$22 >= 0 && _index$22 < _slice$22.length) ? _slice$22.array[_slice$22.offset + _index$22] : go$throwRuntimeError("index out of range")), (_slice$23 = a, _index$23 = 2, (_index$23 >= 0 && _index$23 < _slice$23.length) ? _slice$23.array[_slice$23.offset + _index$23] : go$throwRuntimeError("index out of range")), (_slice$24 = a, _index$24 = 3, (_index$24 >= 0 && _index$24 < _slice$24.length) ? _slice$24.array[_slice$24.offset + _index$24] : go$throwRuntimeError("index out of range")), (_slice$25 = a, _index$25 = 4, (_index$25 >= 0 && _index$25 < _slice$25.length) ? _slice$25.array[_slice$25.offset + _index$25] : go$throwRuntimeError("index out of range")), (_slice$26 = a, _index$26 = 5, (_index$26 >= 0 && _index$26 < _slice$26.length) ? _slice$26.array[_slice$26.offset + _index$26] : go$throwRuntimeError("index out of range")), (_slice$27 = a, _index$27 = 6, (_index$27 >= 0 && _index$27 < _slice$27.length) ? _slice$27.array[_slice$27.offset + _index$27] : go$throwRuntimeError("index out of range")), 0, 0); r1 = _tuple$7[0]; r2 = _tuple$7[1]; lastErr = new Errno(_tuple$7[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 8) {
			_tuple$8 = Syscall9(p.Addr(), (a.length >>> 0), (_slice$28 = a, _index$28 = 0, (_index$28 >= 0 && _index$28 < _slice$28.length) ? _slice$28.array[_slice$28.offset + _index$28] : go$throwRuntimeError("index out of range")), (_slice$29 = a, _index$29 = 1, (_index$29 >= 0 && _index$29 < _slice$29.length) ? _slice$29.array[_slice$29.offset + _index$29] : go$throwRuntimeError("index out of range")), (_slice$30 = a, _index$30 = 2, (_index$30 >= 0 && _index$30 < _slice$30.length) ? _slice$30.array[_slice$30.offset + _index$30] : go$throwRuntimeError("index out of range")), (_slice$31 = a, _index$31 = 3, (_index$31 >= 0 && _index$31 < _slice$31.length) ? _slice$31.array[_slice$31.offset + _index$31] : go$throwRuntimeError("index out of range")), (_slice$32 = a, _index$32 = 4, (_index$32 >= 0 && _index$32 < _slice$32.length) ? _slice$32.array[_slice$32.offset + _index$32] : go$throwRuntimeError("index out of range")), (_slice$33 = a, _index$33 = 5, (_index$33 >= 0 && _index$33 < _slice$33.length) ? _slice$33.array[_slice$33.offset + _index$33] : go$throwRuntimeError("index out of range")), (_slice$34 = a, _index$34 = 6, (_index$34 >= 0 && _index$34 < _slice$34.length) ? _slice$34.array[_slice$34.offset + _index$34] : go$throwRuntimeError("index out of range")), (_slice$35 = a, _index$35 = 7, (_index$35 >= 0 && _index$35 < _slice$35.length) ? _slice$35.array[_slice$35.offset + _index$35] : go$throwRuntimeError("index out of range")), 0); r1 = _tuple$8[0]; r2 = _tuple$8[1]; lastErr = new Errno(_tuple$8[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 9) {
			_tuple$9 = Syscall9(p.Addr(), (a.length >>> 0), (_slice$36 = a, _index$36 = 0, (_index$36 >= 0 && _index$36 < _slice$36.length) ? _slice$36.array[_slice$36.offset + _index$36] : go$throwRuntimeError("index out of range")), (_slice$37 = a, _index$37 = 1, (_index$37 >= 0 && _index$37 < _slice$37.length) ? _slice$37.array[_slice$37.offset + _index$37] : go$throwRuntimeError("index out of range")), (_slice$38 = a, _index$38 = 2, (_index$38 >= 0 && _index$38 < _slice$38.length) ? _slice$38.array[_slice$38.offset + _index$38] : go$throwRuntimeError("index out of range")), (_slice$39 = a, _index$39 = 3, (_index$39 >= 0 && _index$39 < _slice$39.length) ? _slice$39.array[_slice$39.offset + _index$39] : go$throwRuntimeError("index out of range")), (_slice$40 = a, _index$40 = 4, (_index$40 >= 0 && _index$40 < _slice$40.length) ? _slice$40.array[_slice$40.offset + _index$40] : go$throwRuntimeError("index out of range")), (_slice$41 = a, _index$41 = 5, (_index$41 >= 0 && _index$41 < _slice$41.length) ? _slice$41.array[_slice$41.offset + _index$41] : go$throwRuntimeError("index out of range")), (_slice$42 = a, _index$42 = 6, (_index$42 >= 0 && _index$42 < _slice$42.length) ? _slice$42.array[_slice$42.offset + _index$42] : go$throwRuntimeError("index out of range")), (_slice$43 = a, _index$43 = 7, (_index$43 >= 0 && _index$43 < _slice$43.length) ? _slice$43.array[_slice$43.offset + _index$43] : go$throwRuntimeError("index out of range")), (_slice$44 = a, _index$44 = 8, (_index$44 >= 0 && _index$44 < _slice$44.length) ? _slice$44.array[_slice$44.offset + _index$44] : go$throwRuntimeError("index out of range"))); r1 = _tuple$9[0]; r2 = _tuple$9[1]; lastErr = new Errno(_tuple$9[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 10) {
			_tuple$10 = Syscall12(p.Addr(), (a.length >>> 0), (_slice$45 = a, _index$45 = 0, (_index$45 >= 0 && _index$45 < _slice$45.length) ? _slice$45.array[_slice$45.offset + _index$45] : go$throwRuntimeError("index out of range")), (_slice$46 = a, _index$46 = 1, (_index$46 >= 0 && _index$46 < _slice$46.length) ? _slice$46.array[_slice$46.offset + _index$46] : go$throwRuntimeError("index out of range")), (_slice$47 = a, _index$47 = 2, (_index$47 >= 0 && _index$47 < _slice$47.length) ? _slice$47.array[_slice$47.offset + _index$47] : go$throwRuntimeError("index out of range")), (_slice$48 = a, _index$48 = 3, (_index$48 >= 0 && _index$48 < _slice$48.length) ? _slice$48.array[_slice$48.offset + _index$48] : go$throwRuntimeError("index out of range")), (_slice$49 = a, _index$49 = 4, (_index$49 >= 0 && _index$49 < _slice$49.length) ? _slice$49.array[_slice$49.offset + _index$49] : go$throwRuntimeError("index out of range")), (_slice$50 = a, _index$50 = 5, (_index$50 >= 0 && _index$50 < _slice$50.length) ? _slice$50.array[_slice$50.offset + _index$50] : go$throwRuntimeError("index out of range")), (_slice$51 = a, _index$51 = 6, (_index$51 >= 0 && _index$51 < _slice$51.length) ? _slice$51.array[_slice$51.offset + _index$51] : go$throwRuntimeError("index out of range")), (_slice$52 = a, _index$52 = 7, (_index$52 >= 0 && _index$52 < _slice$52.length) ? _slice$52.array[_slice$52.offset + _index$52] : go$throwRuntimeError("index out of range")), (_slice$53 = a, _index$53 = 8, (_index$53 >= 0 && _index$53 < _slice$53.length) ? _slice$53.array[_slice$53.offset + _index$53] : go$throwRuntimeError("index out of range")), (_slice$54 = a, _index$54 = 9, (_index$54 >= 0 && _index$54 < _slice$54.length) ? _slice$54.array[_slice$54.offset + _index$54] : go$throwRuntimeError("index out of range")), 0, 0); r1 = _tuple$10[0]; r2 = _tuple$10[1]; lastErr = new Errno(_tuple$10[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 11) {
			_tuple$11 = Syscall12(p.Addr(), (a.length >>> 0), (_slice$55 = a, _index$55 = 0, (_index$55 >= 0 && _index$55 < _slice$55.length) ? _slice$55.array[_slice$55.offset + _index$55] : go$throwRuntimeError("index out of range")), (_slice$56 = a, _index$56 = 1, (_index$56 >= 0 && _index$56 < _slice$56.length) ? _slice$56.array[_slice$56.offset + _index$56] : go$throwRuntimeError("index out of range")), (_slice$57 = a, _index$57 = 2, (_index$57 >= 0 && _index$57 < _slice$57.length) ? _slice$57.array[_slice$57.offset + _index$57] : go$throwRuntimeError("index out of range")), (_slice$58 = a, _index$58 = 3, (_index$58 >= 0 && _index$58 < _slice$58.length) ? _slice$58.array[_slice$58.offset + _index$58] : go$throwRuntimeError("index out of range")), (_slice$59 = a, _index$59 = 4, (_index$59 >= 0 && _index$59 < _slice$59.length) ? _slice$59.array[_slice$59.offset + _index$59] : go$throwRuntimeError("index out of range")), (_slice$60 = a, _index$60 = 5, (_index$60 >= 0 && _index$60 < _slice$60.length) ? _slice$60.array[_slice$60.offset + _index$60] : go$throwRuntimeError("index out of range")), (_slice$61 = a, _index$61 = 6, (_index$61 >= 0 && _index$61 < _slice$61.length) ? _slice$61.array[_slice$61.offset + _index$61] : go$throwRuntimeError("index out of range")), (_slice$62 = a, _index$62 = 7, (_index$62 >= 0 && _index$62 < _slice$62.length) ? _slice$62.array[_slice$62.offset + _index$62] : go$throwRuntimeError("index out of range")), (_slice$63 = a, _index$63 = 8, (_index$63 >= 0 && _index$63 < _slice$63.length) ? _slice$63.array[_slice$63.offset + _index$63] : go$throwRuntimeError("index out of range")), (_slice$64 = a, _index$64 = 9, (_index$64 >= 0 && _index$64 < _slice$64.length) ? _slice$64.array[_slice$64.offset + _index$64] : go$throwRuntimeError("index out of range")), (_slice$65 = a, _index$65 = 10, (_index$65 >= 0 && _index$65 < _slice$65.length) ? _slice$65.array[_slice$65.offset + _index$65] : go$throwRuntimeError("index out of range")), 0); r1 = _tuple$11[0]; r2 = _tuple$11[1]; lastErr = new Errno(_tuple$11[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 12) {
			_tuple$12 = Syscall12(p.Addr(), (a.length >>> 0), (_slice$66 = a, _index$66 = 0, (_index$66 >= 0 && _index$66 < _slice$66.length) ? _slice$66.array[_slice$66.offset + _index$66] : go$throwRuntimeError("index out of range")), (_slice$67 = a, _index$67 = 1, (_index$67 >= 0 && _index$67 < _slice$67.length) ? _slice$67.array[_slice$67.offset + _index$67] : go$throwRuntimeError("index out of range")), (_slice$68 = a, _index$68 = 2, (_index$68 >= 0 && _index$68 < _slice$68.length) ? _slice$68.array[_slice$68.offset + _index$68] : go$throwRuntimeError("index out of range")), (_slice$69 = a, _index$69 = 3, (_index$69 >= 0 && _index$69 < _slice$69.length) ? _slice$69.array[_slice$69.offset + _index$69] : go$throwRuntimeError("index out of range")), (_slice$70 = a, _index$70 = 4, (_index$70 >= 0 && _index$70 < _slice$70.length) ? _slice$70.array[_slice$70.offset + _index$70] : go$throwRuntimeError("index out of range")), (_slice$71 = a, _index$71 = 5, (_index$71 >= 0 && _index$71 < _slice$71.length) ? _slice$71.array[_slice$71.offset + _index$71] : go$throwRuntimeError("index out of range")), (_slice$72 = a, _index$72 = 6, (_index$72 >= 0 && _index$72 < _slice$72.length) ? _slice$72.array[_slice$72.offset + _index$72] : go$throwRuntimeError("index out of range")), (_slice$73 = a, _index$73 = 7, (_index$73 >= 0 && _index$73 < _slice$73.length) ? _slice$73.array[_slice$73.offset + _index$73] : go$throwRuntimeError("index out of range")), (_slice$74 = a, _index$74 = 8, (_index$74 >= 0 && _index$74 < _slice$74.length) ? _slice$74.array[_slice$74.offset + _index$74] : go$throwRuntimeError("index out of range")), (_slice$75 = a, _index$75 = 9, (_index$75 >= 0 && _index$75 < _slice$75.length) ? _slice$75.array[_slice$75.offset + _index$75] : go$throwRuntimeError("index out of range")), (_slice$76 = a, _index$76 = 10, (_index$76 >= 0 && _index$76 < _slice$76.length) ? _slice$76.array[_slice$76.offset + _index$76] : go$throwRuntimeError("index out of range")), (_slice$77 = a, _index$77 = 11, (_index$77 >= 0 && _index$77 < _slice$77.length) ? _slice$77.array[_slice$77.offset + _index$77] : go$throwRuntimeError("index out of range"))); r1 = _tuple$12[0]; r2 = _tuple$12[1]; lastErr = new Errno(_tuple$12[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 13) {
			_tuple$13 = Syscall15(p.Addr(), (a.length >>> 0), (_slice$78 = a, _index$78 = 0, (_index$78 >= 0 && _index$78 < _slice$78.length) ? _slice$78.array[_slice$78.offset + _index$78] : go$throwRuntimeError("index out of range")), (_slice$79 = a, _index$79 = 1, (_index$79 >= 0 && _index$79 < _slice$79.length) ? _slice$79.array[_slice$79.offset + _index$79] : go$throwRuntimeError("index out of range")), (_slice$80 = a, _index$80 = 2, (_index$80 >= 0 && _index$80 < _slice$80.length) ? _slice$80.array[_slice$80.offset + _index$80] : go$throwRuntimeError("index out of range")), (_slice$81 = a, _index$81 = 3, (_index$81 >= 0 && _index$81 < _slice$81.length) ? _slice$81.array[_slice$81.offset + _index$81] : go$throwRuntimeError("index out of range")), (_slice$82 = a, _index$82 = 4, (_index$82 >= 0 && _index$82 < _slice$82.length) ? _slice$82.array[_slice$82.offset + _index$82] : go$throwRuntimeError("index out of range")), (_slice$83 = a, _index$83 = 5, (_index$83 >= 0 && _index$83 < _slice$83.length) ? _slice$83.array[_slice$83.offset + _index$83] : go$throwRuntimeError("index out of range")), (_slice$84 = a, _index$84 = 6, (_index$84 >= 0 && _index$84 < _slice$84.length) ? _slice$84.array[_slice$84.offset + _index$84] : go$throwRuntimeError("index out of range")), (_slice$85 = a, _index$85 = 7, (_index$85 >= 0 && _index$85 < _slice$85.length) ? _slice$85.array[_slice$85.offset + _index$85] : go$throwRuntimeError("index out of range")), (_slice$86 = a, _index$86 = 8, (_index$86 >= 0 && _index$86 < _slice$86.length) ? _slice$86.array[_slice$86.offset + _index$86] : go$throwRuntimeError("index out of range")), (_slice$87 = a, _index$87 = 9, (_index$87 >= 0 && _index$87 < _slice$87.length) ? _slice$87.array[_slice$87.offset + _index$87] : go$throwRuntimeError("index out of range")), (_slice$88 = a, _index$88 = 10, (_index$88 >= 0 && _index$88 < _slice$88.length) ? _slice$88.array[_slice$88.offset + _index$88] : go$throwRuntimeError("index out of range")), (_slice$89 = a, _index$89 = 11, (_index$89 >= 0 && _index$89 < _slice$89.length) ? _slice$89.array[_slice$89.offset + _index$89] : go$throwRuntimeError("index out of range")), (_slice$90 = a, _index$90 = 12, (_index$90 >= 0 && _index$90 < _slice$90.length) ? _slice$90.array[_slice$90.offset + _index$90] : go$throwRuntimeError("index out of range")), 0, 0); r1 = _tuple$13[0]; r2 = _tuple$13[1]; lastErr = new Errno(_tuple$13[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 14) {
			_tuple$14 = Syscall15(p.Addr(), (a.length >>> 0), (_slice$91 = a, _index$91 = 0, (_index$91 >= 0 && _index$91 < _slice$91.length) ? _slice$91.array[_slice$91.offset + _index$91] : go$throwRuntimeError("index out of range")), (_slice$92 = a, _index$92 = 1, (_index$92 >= 0 && _index$92 < _slice$92.length) ? _slice$92.array[_slice$92.offset + _index$92] : go$throwRuntimeError("index out of range")), (_slice$93 = a, _index$93 = 2, (_index$93 >= 0 && _index$93 < _slice$93.length) ? _slice$93.array[_slice$93.offset + _index$93] : go$throwRuntimeError("index out of range")), (_slice$94 = a, _index$94 = 3, (_index$94 >= 0 && _index$94 < _slice$94.length) ? _slice$94.array[_slice$94.offset + _index$94] : go$throwRuntimeError("index out of range")), (_slice$95 = a, _index$95 = 4, (_index$95 >= 0 && _index$95 < _slice$95.length) ? _slice$95.array[_slice$95.offset + _index$95] : go$throwRuntimeError("index out of range")), (_slice$96 = a, _index$96 = 5, (_index$96 >= 0 && _index$96 < _slice$96.length) ? _slice$96.array[_slice$96.offset + _index$96] : go$throwRuntimeError("index out of range")), (_slice$97 = a, _index$97 = 6, (_index$97 >= 0 && _index$97 < _slice$97.length) ? _slice$97.array[_slice$97.offset + _index$97] : go$throwRuntimeError("index out of range")), (_slice$98 = a, _index$98 = 7, (_index$98 >= 0 && _index$98 < _slice$98.length) ? _slice$98.array[_slice$98.offset + _index$98] : go$throwRuntimeError("index out of range")), (_slice$99 = a, _index$99 = 8, (_index$99 >= 0 && _index$99 < _slice$99.length) ? _slice$99.array[_slice$99.offset + _index$99] : go$throwRuntimeError("index out of range")), (_slice$100 = a, _index$100 = 9, (_index$100 >= 0 && _index$100 < _slice$100.length) ? _slice$100.array[_slice$100.offset + _index$100] : go$throwRuntimeError("index out of range")), (_slice$101 = a, _index$101 = 10, (_index$101 >= 0 && _index$101 < _slice$101.length) ? _slice$101.array[_slice$101.offset + _index$101] : go$throwRuntimeError("index out of range")), (_slice$102 = a, _index$102 = 11, (_index$102 >= 0 && _index$102 < _slice$102.length) ? _slice$102.array[_slice$102.offset + _index$102] : go$throwRuntimeError("index out of range")), (_slice$103 = a, _index$103 = 12, (_index$103 >= 0 && _index$103 < _slice$103.length) ? _slice$103.array[_slice$103.offset + _index$103] : go$throwRuntimeError("index out of range")), (_slice$104 = a, _index$104 = 13, (_index$104 >= 0 && _index$104 < _slice$104.length) ? _slice$104.array[_slice$104.offset + _index$104] : go$throwRuntimeError("index out of range")), 0); r1 = _tuple$14[0]; r2 = _tuple$14[1]; lastErr = new Errno(_tuple$14[2]);
			return [r1, r2, lastErr];
		} else if (_ref === 15) {
			_tuple$15 = Syscall15(p.Addr(), (a.length >>> 0), (_slice$105 = a, _index$105 = 0, (_index$105 >= 0 && _index$105 < _slice$105.length) ? _slice$105.array[_slice$105.offset + _index$105] : go$throwRuntimeError("index out of range")), (_slice$106 = a, _index$106 = 1, (_index$106 >= 0 && _index$106 < _slice$106.length) ? _slice$106.array[_slice$106.offset + _index$106] : go$throwRuntimeError("index out of range")), (_slice$107 = a, _index$107 = 2, (_index$107 >= 0 && _index$107 < _slice$107.length) ? _slice$107.array[_slice$107.offset + _index$107] : go$throwRuntimeError("index out of range")), (_slice$108 = a, _index$108 = 3, (_index$108 >= 0 && _index$108 < _slice$108.length) ? _slice$108.array[_slice$108.offset + _index$108] : go$throwRuntimeError("index out of range")), (_slice$109 = a, _index$109 = 4, (_index$109 >= 0 && _index$109 < _slice$109.length) ? _slice$109.array[_slice$109.offset + _index$109] : go$throwRuntimeError("index out of range")), (_slice$110 = a, _index$110 = 5, (_index$110 >= 0 && _index$110 < _slice$110.length) ? _slice$110.array[_slice$110.offset + _index$110] : go$throwRuntimeError("index out of range")), (_slice$111 = a, _index$111 = 6, (_index$111 >= 0 && _index$111 < _slice$111.length) ? _slice$111.array[_slice$111.offset + _index$111] : go$throwRuntimeError("index out of range")), (_slice$112 = a, _index$112 = 7, (_index$112 >= 0 && _index$112 < _slice$112.length) ? _slice$112.array[_slice$112.offset + _index$112] : go$throwRuntimeError("index out of range")), (_slice$113 = a, _index$113 = 8, (_index$113 >= 0 && _index$113 < _slice$113.length) ? _slice$113.array[_slice$113.offset + _index$113] : go$throwRuntimeError("index out of range")), (_slice$114 = a, _index$114 = 9, (_index$114 >= 0 && _index$114 < _slice$114.length) ? _slice$114.array[_slice$114.offset + _index$114] : go$throwRuntimeError("index out of range")), (_slice$115 = a, _index$115 = 10, (_index$115 >= 0 && _index$115 < _slice$115.length) ? _slice$115.array[_slice$115.offset + _index$115] : go$throwRuntimeError("index out of range")), (_slice$116 = a, _index$116 = 11, (_index$116 >= 0 && _index$116 < _slice$116.length) ? _slice$116.array[_slice$116.offset + _index$116] : go$throwRuntimeError("index out of range")), (_slice$117 = a, _index$117 = 12, (_index$117 >= 0 && _index$117 < _slice$117.length) ? _slice$117.array[_slice$117.offset + _index$117] : go$throwRuntimeError("index out of range")), (_slice$118 = a, _index$118 = 13, (_index$118 >= 0 && _index$118 < _slice$118.length) ? _slice$118.array[_slice$118.offset + _index$118] : go$throwRuntimeError("index out of range")), (_slice$119 = a, _index$119 = 14, (_index$119 >= 0 && _index$119 < _slice$119.length) ? _slice$119.array[_slice$119.offset + _index$119] : go$throwRuntimeError("index out of range"))); r1 = _tuple$15[0]; r2 = _tuple$15[1]; lastErr = new Errno(_tuple$15[2]);
			return [r1, r2, lastErr];
		} else {
			throw go$panic(new Go$String("Call " + p.Name + " with too many arguments " + itoa(a.length) + "."));
		}
		return [r1, r2, lastErr];
	};
	Proc.prototype.Call = function(a) { return this.go$val.Call(a); };
	LazyDLL.Ptr.prototype.Load = function() {
		var d, v, _tuple, dll, e, v$1, _array, _struct, _view;
		var go$deferred = [];
		try {
			d = this;
			if (atomic.LoadPointer(new (go$ptrType((go$ptrType(DLL))))(function() { return d.dll; }, function(v) { d.dll = v;; })) === 0) {
				d.mu.Lock();
				go$deferred.push({ recv: d.mu, method: "Unlock", args: [] });
				if (d.dll === (go$ptrType(DLL)).nil) {
					_tuple = LoadDLL(d.Name); dll = _tuple[0]; e = _tuple[1];
					if (!(go$interfaceIsEqual(e, null))) {
						return e;
					}
					_array = new Uint8Array(12);
					atomic.StorePointer(new (go$ptrType((go$ptrType(DLL))))(function() { return d.dll; }, function(v$1) { d.dll = v$1;; }), _array);
					_struct = dll, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Handle = _view.getUintptr(8, true);
				}
			}
			return null;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	LazyDLL.prototype.Load = function() { return this.go$val.Load(); };
	LazyDLL.Ptr.prototype.mustLoad = function() {
		var d, e;
		d = this;
		e = d.Load();
		if (!(go$interfaceIsEqual(e, null))) {
			throw go$panic(e);
		}
	};
	LazyDLL.prototype.mustLoad = function() { return this.go$val.mustLoad(); };
	LazyDLL.Ptr.prototype.Handle = function() {
		var d;
		d = this;
		d.mustLoad();
		return (d.dll.Handle >>> 0);
	};
	LazyDLL.prototype.Handle = function() { return this.go$val.Handle(); };
	LazyDLL.Ptr.prototype.NewProc = function(name) {
		var d;
		d = this;
		return new LazyProc.Ptr(new sync.Mutex.Ptr(), name, d, (go$ptrType(Proc)).nil);
	};
	LazyDLL.prototype.NewProc = function(name) { return this.go$val.NewProc(name); };
	NewLazyDLL = go$pkg.NewLazyDLL = function(name) {
		return new LazyDLL.Ptr(new sync.Mutex.Ptr(), (go$ptrType(DLL)).nil, name);
	};
	LazyProc.Ptr.prototype.Find = function() {
		var p, v, e, _tuple, proc, v$1, _array, _struct, _view;
		var go$deferred = [];
		try {
			p = this;
			if (atomic.LoadPointer(new (go$ptrType((go$ptrType(Proc))))(function() { return p.proc; }, function(v) { p.proc = v;; })) === 0) {
				p.mu.Lock();
				go$deferred.push({ recv: p.mu, method: "Unlock", args: [] });
				if (p.proc === (go$ptrType(Proc)).nil) {
					e = p.l.Load();
					if (!(go$interfaceIsEqual(e, null))) {
						return e;
					}
					_tuple = p.l.dll.FindProc(p.Name); proc = _tuple[0]; e = _tuple[1];
					if (!(go$interfaceIsEqual(e, null))) {
						return e;
					}
					_array = new Uint8Array(20);
					atomic.StorePointer(new (go$ptrType((go$ptrType(Proc))))(function() { return p.proc; }, function(v$1) { p.proc = v$1;; }), _array);
					_struct = proc, _view = new DataView(_array.buffer, _array.byteOffset), _struct.addr = _view.getUintptr(16, true);
				}
			}
			return null;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	LazyProc.prototype.Find = function() { return this.go$val.Find(); };
	LazyProc.Ptr.prototype.mustFind = function() {
		var p, e;
		p = this;
		e = p.Find();
		if (!(go$interfaceIsEqual(e, null))) {
			throw go$panic(e);
		}
	};
	LazyProc.prototype.mustFind = function() { return this.go$val.mustFind(); };
	LazyProc.Ptr.prototype.Addr = function() {
		var p;
		p = this;
		p.mustFind();
		return p.proc.Addr();
	};
	LazyProc.prototype.Addr = function() { return this.go$val.Addr(); };
	LazyProc.Ptr.prototype.Call = function(a) {
		var r1, r2, lastErr, p, _tuple;
		r1 = 0;
		r2 = 0;
		lastErr = null;
		p = this;
		p.mustFind();
		_tuple = p.proc.Call(a); r1 = _tuple[0]; r2 = _tuple[1]; lastErr = _tuple[2];
		return [r1, r2, lastErr];
	};
	LazyProc.prototype.Call = function(a) { return this.go$val.Call(a); };
	Getenv = go$pkg.Getenv = function(key) {
		var value, found, _tuple, keyp, err, _tuple$1, b, _tuple$2, v, _slice, _index, _slice$1, _index$1, n, e, _tuple$3, _tuple$4, v$1, _slice$2, _index$2, _slice$3, _index$3, _tuple$5;
		value = "";
		found = false;
		_tuple = UTF16PtrFromString(key); keyp = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = ["", false]; value = _tuple$1[0]; found = _tuple$1[1];
			return [value, found];
		}
		b = (go$sliceType(Go$Uint16)).make(100, 0, function() { return 0; });
		_tuple$2 = GetEnvironmentVariable(keyp, new (go$ptrType(Go$Uint16))(function() { return (_slice$1 = b, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")); }, function(v) { _slice = b; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = v) : go$throwRuntimeError("index out of range");; }), (b.length >>> 0)); n = _tuple$2[0]; e = _tuple$2[1];
		if ((n === 0) && go$interfaceIsEqual(e, new Errno(203))) {
			_tuple$3 = ["", false]; value = _tuple$3[0]; found = _tuple$3[1];
			return [value, found];
		}
		if (n > (b.length >>> 0)) {
			b = (go$sliceType(Go$Uint16)).make(n, 0, function() { return 0; });
			_tuple$4 = GetEnvironmentVariable(keyp, new (go$ptrType(Go$Uint16))(function() { return (_slice$3 = b, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")); }, function(v$1) { _slice$2 = b; _index$2 = 0;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = v$1) : go$throwRuntimeError("index out of range");; }), (b.length >>> 0)); n = _tuple$4[0]; e = _tuple$4[1];
			if (n > (b.length >>> 0)) {
				n = 0;
			}
		}
		_tuple$5 = [go$runesToString(utf16.Decode(go$subslice(b, 0, n))), true]; value = _tuple$5[0]; found = _tuple$5[1];
		return [value, found];
	};
	CloseOnExec = go$pkg.CloseOnExec = function(fd) {
		SetHandleInformation(fd, 1, 0);
	};
	itoa = function(val) {
		var buf, i, _r, _q;
		if (val < 0) {
			return "-" + itoa(-val);
		}
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		i = 31;
		while (val >= 10) {
			buf[i] = (((_r = val % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			i = i - 1 >> 0;
			val = (_q = val / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		buf[i] = ((val + 48 >> 0) << 24 >>> 24);
		return go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(buf), i));
	};
	ByteSliceFromString = go$pkg.ByteSliceFromString = function(s) {
		var i, a;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === 0) {
				return [(go$sliceType(Go$Uint8)).nil, new Errno(536870951)];
			}
			i = i + 1 >> 0;
		}
		a = (go$sliceType(Go$Uint8)).make(s.length + 1 >> 0, 0, function() { return 0; });
		go$copyString(a, s);
		return [a, null];
	};
	BytePtrFromString = go$pkg.BytePtrFromString = function(s) {
		var _tuple, a, err, v, _slice, _index, _slice$1, _index$1;
		_tuple = ByteSliceFromString(s); a = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Go$Uint8)).nil, err];
		}
		return [new (go$ptrType(Go$Uint8))(function() { return (_slice$1 = a, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")); }, function(v) { _slice = a; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = v) : go$throwRuntimeError("index out of range");; }), null];
	};
	UTF16FromString = go$pkg.UTF16FromString = function(s) {
		var i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === 0) {
				return [(go$sliceType(Go$Uint16)).nil, new Errno(536870951)];
			}
			i = i + 1 >> 0;
		}
		return [utf16.Encode(new (go$sliceType(Go$Int32))(go$stringToRunes(s + "\x00"))), null];
	};
	UTF16ToString = go$pkg.UTF16ToString = function(s) {
		var _ref, _i, _slice, _index, v, i;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			v = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (v === 0) {
				s = go$subslice(s, 0, i);
				break;
			}
			_i++;
		}
		return go$runesToString(utf16.Decode(s));
	};
	UTF16PtrFromString = go$pkg.UTF16PtrFromString = function(s) {
		var _tuple, a, err, v, _slice, _index, _slice$1, _index$1;
		_tuple = UTF16FromString(s); a = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Go$Uint16)).nil, err];
		}
		return [new (go$ptrType(Go$Uint16))(function() { return (_slice$1 = a, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")); }, function(v) { _slice = a; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = v) : go$throwRuntimeError("index out of range");; }), null];
	};
	langid = function(pri, sub) {
		return (((sub >>> 0) << 10 >>> 0) | (pri >>> 0)) >>> 0;
	};
	Errno.prototype.Error = function() {
		var e, idx, flags, b, _tuple, n, err, _tuple$1, _slice, _index, _slice$1, _index$1;
		e = this.go$val;
		idx = ((e - 536870912 >>> 0) >> 0);
		if (0 <= idx && idx < 131) {
			return errors[idx];
		}
		flags = 12800;
		b = (go$sliceType(Go$Uint16)).make(300, 0, function() { return 0; });
		_tuple = FormatMessage(flags, 0, (e >>> 0), langid(9, 1), b, (go$ptrType(Go$Uint8)).nil); n = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = FormatMessage(flags, 0, (e >>> 0), 0, b, (go$ptrType(Go$Uint8)).nil); n = _tuple$1[0]; err = _tuple$1[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return "winapi error #" + itoa((e >> 0));
			}
		}
		while (n > 0 && (((_slice = b, _index = (n - 1 >>> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 10) || ((_slice$1 = b, _index$1 = (n - 1 >>> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 13))) {
			n = n - 1 >>> 0;
		}
		return go$runesToString(utf16.Decode(go$subslice(b, 0, n)));
	};
	go$ptrType(Errno).prototype.Error = function() { return new Errno(this.go$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.go$val;
		return (e === 536870950) || (e === 536870971) || (new Errno(e)).Timeout();
	};
	go$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.go$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.go$val;
		return (e === 536870918) || (e === 536871039) || (e === 536871033);
	};
	go$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.go$get()).Timeout(); };
	makeInheritSa = function() {
		var sa;
		sa = new SecurityAttributes.Ptr();
		sa.Length = 12;
		sa.InheritHandle = 1;
		return sa;
	};
	Open = go$pkg.Open = function(path, mode, perm) {
		var fd, err, _tuple, _tuple$1, pathp, _tuple$2, access, _ref, sharemode, sa, createmode, _tuple$3, h, e, _tuple$4;
		fd = 0;
		err = null;
		if (path.length === 0) {
			_tuple = [4294967295, new Errno(2)]; fd = _tuple[0]; err = _tuple[1];
			return [fd, err];
		}
		_tuple$1 = UTF16PtrFromString(path); pathp = _tuple$1[0]; err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$2 = [4294967295, err]; fd = _tuple$2[0]; err = _tuple$2[1];
			return [fd, err];
		}
		access = 0;
		_ref = mode & 3;
		if (_ref === 0) {
			access = 2147483648;
		} else if (_ref === 1) {
			access = 1073741824;
		} else if (_ref === 2) {
			access = 3221225472;
		}
		if (!(((mode & 64) === 0))) {
			access = (access | 1073741824) >>> 0;
		}
		if (!(((mode & 1024) === 0))) {
			access = access & ~1073741824;
			access = (access | 4) >>> 0;
		}
		sharemode = 3;
		sa = (go$ptrType(SecurityAttributes)).nil;
		if ((mode & 524288) === 0) {
			sa = makeInheritSa();
		}
		createmode = 0;
		if ((mode & 192) === 192) {
			createmode = 1;
		} else if ((mode & 576) === 576) {
			createmode = 2;
		} else if ((mode & 64) === 64) {
			createmode = 4;
		} else if ((mode & 512) === 512) {
			createmode = 5;
		} else {
			createmode = 3;
		}
		_tuple$3 = CreateFile(pathp, access, sharemode, sa, createmode, 128, 0); h = _tuple$3[0]; e = _tuple$3[1];
		_tuple$4 = [h, e]; fd = _tuple$4[0]; err = _tuple$4[1];
		return [fd, err];
	};
	Read = go$pkg.Read = function(fd, p) {
		var n, err, done, v, e, _tuple, _tuple$1, _tuple$2;
		n = 0;
		err = null;
		done = 0;
		e = ReadFile(fd, p, new (go$ptrType(Go$Uint32))(function() { return done; }, function(v) { done = v;; }), (go$ptrType(Overlapped)).nil);
		if (!(go$interfaceIsEqual(e, null))) {
			if (go$interfaceIsEqual(e, new Errno(109))) {
				_tuple = [0, null]; n = _tuple[0]; err = _tuple[1];
				return [n, err];
			}
			_tuple$1 = [0, e]; n = _tuple$1[0]; err = _tuple$1[1];
			return [n, err];
		}
		_tuple$2 = [(done >> 0), null]; n = _tuple$2[0]; err = _tuple$2[1];
		return [n, err];
	};
	Write = go$pkg.Write = function(fd, p) {
		var n, err, done, v, e, _tuple, _tuple$1;
		n = 0;
		err = null;
		done = 0;
		e = WriteFile(fd, p, new (go$ptrType(Go$Uint32))(function() { return done; }, function(v) { done = v;; }), (go$ptrType(Overlapped)).nil);
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple = [0, e]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		_tuple$1 = [(done >> 0), null]; n = _tuple$1[0]; err = _tuple$1[1];
		return [n, err];
	};
	Seek = go$pkg.Seek = function(fd, offset, whence) {
		var newoffset, err, w, _ref, x, hi, lo, _tuple, ft, _tuple$1, _tuple$2, v, rlo, e, _tuple$3, x$1, x$2, _tuple$4;
		newoffset = new Go$Int64(0, 0);
		err = null;
		w = 0;
		_ref = whence;
		if (_ref === 0) {
			w = 0;
		} else if (_ref === 1) {
			w = 1;
		} else if (_ref === 2) {
			w = 2;
		}
		hi = ((x = go$shiftRightInt64(offset, 32), x.low + ((x.high >> 31) * 4294967296)) >> 0);
		lo = ((offset.low + ((offset.high >> 31) * 4294967296)) >> 0);
		_tuple = GetFileType(fd); ft = _tuple[0];
		if (ft === 3) {
			_tuple$1 = [new Go$Int64(0, 0), new Errno(536871015)]; newoffset = _tuple$1[0]; err = _tuple$1[1];
			return [newoffset, err];
		}
		_tuple$2 = SetFilePointer(fd, lo, new (go$ptrType(Go$Int32))(function() { return hi; }, function(v) { hi = v;; }), w); rlo = _tuple$2[0]; e = _tuple$2[1];
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$3 = [new Go$Int64(0, 0), e]; newoffset = _tuple$3[0]; err = _tuple$3[1];
			return [newoffset, err];
		}
		_tuple$4 = [(x$1 = go$shiftLeft64(new Go$Int64(0, hi), 32), x$2 = new Go$Int64(0, rlo), new Go$Int64(x$1.high + x$2.high, x$1.low + x$2.low)), null]; newoffset = _tuple$4[0]; err = _tuple$4[1];
		return [newoffset, err];
	};
	getStdHandle = function(h) {
		var fd, _tuple, r;
		fd = 0;
		_tuple = GetStdHandle(h); r = _tuple[0];
		CloseOnExec(r);
		fd = r;
		return fd;
	};
	Getwd = go$pkg.Getwd = function() {
		var wd, err, b, _tuple, v, _slice, _index, _slice$1, _index$1, n, e, _tuple$1, _tuple$2;
		wd = "";
		err = null;
		b = (go$sliceType(Go$Uint16)).make(300, 0, function() { return 0; });
		_tuple = GetCurrentDirectory((b.length >>> 0), new (go$ptrType(Go$Uint16))(function() { return (_slice$1 = b, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")); }, function(v) { _slice = b; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = v) : go$throwRuntimeError("index out of range");; })); n = _tuple[0]; e = _tuple[1];
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$1 = ["", e]; wd = _tuple$1[0]; err = _tuple$1[1];
			return [wd, err];
		}
		_tuple$2 = [go$runesToString(utf16.Decode(go$subslice(b, 0, n))), null]; wd = _tuple$2[0]; err = _tuple$2[1];
		return [wd, err];
	};
	Ftruncate = go$pkg.Ftruncate = function(fd, length) {
		var err, _tuple, curoffset, e, _tuple$1;
		err = null;
		var go$deferred = [];
		try {
			_tuple = Seek(fd, new Go$Int64(0, 0), 1); curoffset = _tuple[0]; e = _tuple[1];
			if (!(go$interfaceIsEqual(e, null))) {
				err = e;
				return err;
			}
			go$deferred.push({ fun: Seek, args: [fd, curoffset, 0] });
			_tuple$1 = Seek(fd, length, 0); e = _tuple$1[1];
			if (!(go$interfaceIsEqual(e, null))) {
				err = e;
				return err;
			}
			e = SetEndOfFile(fd);
			if (!(go$interfaceIsEqual(e, null))) {
				err = e;
				return err;
			}
			err = null;
			return err;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return err;
		}
	};
	Fsync = go$pkg.Fsync = function(fd) {
		var err;
		err = null;
		err = FlushFileBuffers(fd);
		return err;
	};
	FindFirstFile = go$pkg.FindFirstFile = function(name, data) {
		var handle, err, data1, _tuple;
		handle = 0;
		err = null;
		data1 = new win32finddata1.Ptr();
		_tuple = findFirstFile1(name, data1); handle = _tuple[0]; err = _tuple[1];
		if (go$interfaceIsEqual(err, null)) {
			copyFindData(data, data1);
		}
		return [handle, err];
	};
	FindNextFile = go$pkg.FindNextFile = function(handle, data) {
		var err, data1;
		err = null;
		data1 = new win32finddata1.Ptr();
		err = findNextFile1(handle, data1);
		if (go$interfaceIsEqual(err, null)) {
			copyFindData(data, data1);
		}
		return err;
	};
	Fchdir = go$pkg.Fchdir = function(fd) {
		var err;
		err = null;
		err = new Errno(536871042);
		return err;
	};
	Fchmod = go$pkg.Fchmod = function(fd, mode) {
		var err;
		err = null;
		err = new Errno(536871042);
		return err;
	};
	Fchown = go$pkg.Fchown = function(fd, uid, gid) {
		var err;
		err = null;
		err = new Errno(536871042);
		return err;
	};
	FreeLibrary = go$pkg.FreeLibrary = function(handle) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall(procFreeLibrary.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	FormatMessage = go$pkg.FormatMessage = function(flags, msgsrc, msgid, langid$1, buf, args) {
		var n, err, _p0, v, _slice, _index, _slice$1, _index$1, _tuple, r0, e1;
		n = 0;
		err = null;
		_p0 = (go$ptrType(Go$Uint16)).nil;
		if (buf.length > 0) {
			_p0 = new (go$ptrType(Go$Uint16))(function() { return (_slice$1 = buf, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")); }, function(v) { _slice = buf; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = v) : go$throwRuntimeError("index out of range");; });
		}
		_tuple = Syscall9(procFormatMessageW.Addr(), 7, (flags >>> 0), (msgsrc >>> 0), (msgid >>> 0), (langid$1 >>> 0), _p0, (buf.length >>> 0), args, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	CreateFile = go$pkg.CreateFile = function(name, access, mode, sa, createmode, attrs, templatefile) {
		var handle, err, _tuple, _array, _struct, _view, r0, e1;
		handle = 0;
		err = null;
		_array = new Uint8Array(12);
		_tuple = Syscall9(procCreateFileW.Addr(), 7, name, (access >>> 0), (mode >>> 0), _array, (createmode >>> 0), (attrs >>> 0), (templatefile >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		_struct = sa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Length = _view.getUint32(0, true), _struct.SecurityDescriptor = _view.getUintptr(4, true), _struct.InheritHandle = _view.getUint32(8, true);
		handle = (r0 >>> 0);
		if (handle === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	ReadFile = go$pkg.ReadFile = function(handle, buf, done, overlapped) {
		var err, _p0, v, _slice, _index, _slice$1, _index$1, _tuple, _array, _struct, _view, r1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		if (buf.length > 0) {
			_p0 = new (go$ptrType(Go$Uint8))(function() { return (_slice$1 = buf, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")); }, function(v) { _slice = buf; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = v) : go$throwRuntimeError("index out of range");; });
		}
		_array = new Uint8Array(20);
		_tuple = Syscall6(procReadFile.Addr(), 5, (handle >>> 0), _p0, (buf.length >>> 0), done, _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = overlapped, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Internal = _view.getUintptr(0, true), _struct.InternalHigh = _view.getUintptr(4, true), _struct.Offset = _view.getUint32(8, true), _struct.OffsetHigh = _view.getUint32(12, true), _struct.HEvent = _view.getUintptr(16, true);
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	WriteFile = go$pkg.WriteFile = function(handle, buf, done, overlapped) {
		var err, _p0, v, _slice, _index, _slice$1, _index$1, _tuple, _array, _struct, _view, r1, e1;
		err = null;
		_p0 = (go$ptrType(Go$Uint8)).nil;
		if (buf.length > 0) {
			_p0 = new (go$ptrType(Go$Uint8))(function() { return (_slice$1 = buf, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")); }, function(v) { _slice = buf; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = v) : go$throwRuntimeError("index out of range");; });
		}
		_array = new Uint8Array(20);
		_tuple = Syscall6(procWriteFile.Addr(), 5, (handle >>> 0), _p0, (buf.length >>> 0), done, _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = overlapped, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Internal = _view.getUintptr(0, true), _struct.InternalHigh = _view.getUintptr(4, true), _struct.Offset = _view.getUint32(8, true), _struct.OffsetHigh = _view.getUint32(12, true), _struct.HEvent = _view.getUintptr(16, true);
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	SetFilePointer = go$pkg.SetFilePointer = function(handle, lowoffset, highoffsetptr, whence) {
		var newlowoffset, err, _tuple, r0, e1;
		newlowoffset = 0;
		err = null;
		_tuple = Syscall6(procSetFilePointer.Addr(), 4, (handle >>> 0), (lowoffset >>> 0), highoffsetptr, (whence >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		newlowoffset = (r0 >>> 0);
		if (newlowoffset === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [newlowoffset, err];
	};
	CloseHandle = go$pkg.CloseHandle = function(handle) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall(procCloseHandle.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	GetStdHandle = go$pkg.GetStdHandle = function(stdhandle) {
		var handle, err, _tuple, r0, e1;
		handle = 0;
		err = null;
		_tuple = Syscall(procGetStdHandle.Addr(), 1, (stdhandle >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		handle = (r0 >>> 0);
		if (handle === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	findFirstFile1 = function(name, data) {
		var handle, err, _tuple, _array, _struct, _view, r0, e1;
		handle = 0;
		err = null;
		_array = new Uint8Array(592);
		_tuple = Syscall(procFindFirstFileW.Addr(), 2, name, _array, 0); r0 = _tuple[0]; e1 = _tuple[2];
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.FileSizeHigh = _view.getUint32(28, true), _struct.FileSizeLow = _view.getUint32(32, true), _struct.Reserved0 = _view.getUint32(36, true), _struct.Reserved1 = _view.getUint32(40, true), _struct.FileName = new (go$nativeArray("Uint16"))(_array.buffer, go$min(_array.byteOffset + 44, _array.buffer.byteLength)), _struct.AlternateFileName = new (go$nativeArray("Uint16"))(_array.buffer, go$min(_array.byteOffset + 564, _array.buffer.byteLength));
		handle = (r0 >>> 0);
		if (handle === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [handle, err];
	};
	findNextFile1 = function(handle, data) {
		var err, _tuple, _array, _struct, _view, r1, e1;
		err = null;
		_array = new Uint8Array(592);
		_tuple = Syscall(procFindNextFileW.Addr(), 2, (handle >>> 0), _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.FileSizeHigh = _view.getUint32(28, true), _struct.FileSizeLow = _view.getUint32(32, true), _struct.Reserved0 = _view.getUint32(36, true), _struct.Reserved1 = _view.getUint32(40, true), _struct.FileName = new (go$nativeArray("Uint16"))(_array.buffer, go$min(_array.byteOffset + 44, _array.buffer.byteLength)), _struct.AlternateFileName = new (go$nativeArray("Uint16"))(_array.buffer, go$min(_array.byteOffset + 564, _array.buffer.byteLength));
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	FindClose = go$pkg.FindClose = function(handle) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall(procFindClose.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	GetFileInformationByHandle = go$pkg.GetFileInformationByHandle = function(handle, data) {
		var err, _tuple, _array, _struct, _view, r1, e1;
		err = null;
		_array = new Uint8Array(52);
		_tuple = Syscall(procGetFileInformationByHandle.Addr(), 2, (handle >>> 0), _array, 0); r1 = _tuple[0]; e1 = _tuple[2];
		_struct = data, _view = new DataView(_array.buffer, _array.byteOffset), _struct.FileAttributes = _view.getUint32(0, true), _struct.CreationTime.LowDateTime = _view.getUint32(4, true), _struct.CreationTime.HighDateTime = _view.getUint32(8, true), _struct.LastAccessTime.LowDateTime = _view.getUint32(12, true), _struct.LastAccessTime.HighDateTime = _view.getUint32(16, true), _struct.LastWriteTime.LowDateTime = _view.getUint32(20, true), _struct.LastWriteTime.HighDateTime = _view.getUint32(24, true), _struct.VolumeSerialNumber = _view.getUint32(28, true), _struct.FileSizeHigh = _view.getUint32(32, true), _struct.FileSizeLow = _view.getUint32(36, true), _struct.NumberOfLinks = _view.getUint32(40, true), _struct.FileIndexHigh = _view.getUint32(44, true), _struct.FileIndexLow = _view.getUint32(48, true);
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	GetCurrentDirectory = go$pkg.GetCurrentDirectory = function(buflen, buf) {
		var n, err, _tuple, r0, e1;
		n = 0;
		err = null;
		_tuple = Syscall(procGetCurrentDirectoryW.Addr(), 2, (buflen >>> 0), buf, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	SetEndOfFile = go$pkg.SetEndOfFile = function(handle) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall(procSetEndOfFile.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	GetTimeZoneInformation = go$pkg.GetTimeZoneInformation = function(tzi) {
		var rc, err, _tuple, _array, _struct, _view, r0, e1;
		rc = 0;
		err = null;
		_array = new Uint8Array(172);
		_tuple = Syscall(procGetTimeZoneInformation.Addr(), 1, _array, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		_struct = tzi, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Bias = _view.getInt32(0, true), _struct.StandardName = new (go$nativeArray("Uint16"))(_array.buffer, go$min(_array.byteOffset + 4, _array.buffer.byteLength)), _struct.StandardDate.Year = _view.getUint16(68, true), _struct.StandardDate.Month = _view.getUint16(70, true), _struct.StandardDate.DayOfWeek = _view.getUint16(72, true), _struct.StandardDate.Day = _view.getUint16(74, true), _struct.StandardDate.Hour = _view.getUint16(76, true), _struct.StandardDate.Minute = _view.getUint16(78, true), _struct.StandardDate.Second = _view.getUint16(80, true), _struct.StandardDate.Milliseconds = _view.getUint16(82, true), _struct.StandardBias = _view.getInt32(84, true), _struct.DaylightName = new (go$nativeArray("Uint16"))(_array.buffer, go$min(_array.byteOffset + 88, _array.buffer.byteLength)), _struct.DaylightDate.Year = _view.getUint16(152, true), _struct.DaylightDate.Month = _view.getUint16(154, true), _struct.DaylightDate.DayOfWeek = _view.getUint16(156, true), _struct.DaylightDate.Day = _view.getUint16(158, true), _struct.DaylightDate.Hour = _view.getUint16(160, true), _struct.DaylightDate.Minute = _view.getUint16(162, true), _struct.DaylightDate.Second = _view.getUint16(164, true), _struct.DaylightDate.Milliseconds = _view.getUint16(166, true), _struct.DaylightBias = _view.getInt32(168, true);
		rc = (r0 >>> 0);
		if (rc === 4294967295) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [rc, err];
	};
	GetFileType = go$pkg.GetFileType = function(filehandle) {
		var n, err, _tuple, r0, e1;
		n = 0;
		err = null;
		_tuple = Syscall(procGetFileType.Addr(), 1, (filehandle >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	GetEnvironmentVariable = go$pkg.GetEnvironmentVariable = function(name, buffer, size) {
		var n, err, _tuple, r0, e1;
		n = 0;
		err = null;
		_tuple = Syscall(procGetEnvironmentVariableW.Addr(), 3, name, buffer, (size >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >>> 0);
		if (n === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [n, err];
	};
	GetFileAttributesEx = go$pkg.GetFileAttributesEx = function(name, level, info) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall(procGetFileAttributesExW.Addr(), 3, name, (level >>> 0), info); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	GetCommandLine = go$pkg.GetCommandLine = function() {
		var cmd, _tuple, r0;
		cmd = (go$ptrType(Go$Uint16)).nil;
		_tuple = Syscall(procGetCommandLineW.Addr(), 0, 0, 0, 0); r0 = _tuple[0];
		cmd = r0;
		return cmd;
	};
	CommandLineToArgv = go$pkg.CommandLineToArgv = function(cmd, argc) {
		var argv, err, _tuple, r0, e1;
		argv = (go$ptrType((go$arrayType((go$ptrType((go$arrayType(Go$Uint16, 8192)))), 8192)))).nil;
		err = null;
		_tuple = Syscall(procCommandLineToArgvW.Addr(), 2, cmd, argc, 0); r0 = _tuple[0]; e1 = _tuple[2];
		argv = r0;
		if (go$arrayIsEqual(argv, (go$ptrType((go$arrayType((go$ptrType((go$arrayType(Go$Uint16, 8192)))), 8192)))).nil)) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return [argv, err];
	};
	SetHandleInformation = go$pkg.SetHandleInformation = function(handle, mask, flags) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall(procSetHandleInformation.Addr(), 3, (handle >>> 0), (mask >>> 0), (flags >>> 0)); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	FlushFileBuffers = go$pkg.FlushFileBuffers = function(handle) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall(procFlushFileBuffers.Addr(), 1, (handle >>> 0), 0, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	RegOpenKeyEx = go$pkg.RegOpenKeyEx = function(key, subkey, options, desiredAccess, result) {
		var regerrno, _tuple, r0;
		regerrno = null;
		_tuple = Syscall6(procRegOpenKeyExW.Addr(), 5, (key >>> 0), subkey, (options >>> 0), (desiredAccess >>> 0), result, 0); r0 = _tuple[0];
		if (!((r0 === 0))) {
			regerrno = new Errno((r0 >>> 0));
		}
		return regerrno;
	};
	RegQueryInfoKey = go$pkg.RegQueryInfoKey = function(key, class$1, classLen, reserved, subkeysLen, maxSubkeyLen, maxClassLen, valuesLen, maxValueNameLen, maxValueLen, saLen, lastWriteTime) {
		var regerrno, _tuple, _array, _struct, _view, r0;
		regerrno = null;
		_array = new Uint8Array(8);
		_tuple = Syscall12(procRegQueryInfoKeyW.Addr(), 12, (key >>> 0), class$1, classLen, reserved, subkeysLen, maxSubkeyLen, maxClassLen, valuesLen, maxValueNameLen, maxValueLen, saLen, _array); r0 = _tuple[0];
		_struct = lastWriteTime, _view = new DataView(_array.buffer, _array.byteOffset), _struct.LowDateTime = _view.getUint32(0, true), _struct.HighDateTime = _view.getUint32(4, true);
		if (!((r0 === 0))) {
			regerrno = new Errno((r0 >>> 0));
		}
		return regerrno;
	};
	RegEnumKeyEx = go$pkg.RegEnumKeyEx = function(key, index, name, nameLen, reserved, class$1, classLen, lastWriteTime) {
		var regerrno, _tuple, _array, _struct, _view, r0;
		regerrno = null;
		_array = new Uint8Array(8);
		_tuple = Syscall9(procRegEnumKeyExW.Addr(), 8, (key >>> 0), (index >>> 0), name, nameLen, reserved, class$1, classLen, _array, 0); r0 = _tuple[0];
		_struct = lastWriteTime, _view = new DataView(_array.buffer, _array.byteOffset), _struct.LowDateTime = _view.getUint32(0, true), _struct.HighDateTime = _view.getUint32(4, true);
		if (!((r0 === 0))) {
			regerrno = new Errno((r0 >>> 0));
		}
		return regerrno;
	};
	RegQueryValueEx = go$pkg.RegQueryValueEx = function(key, name, reserved, valtype, buf, buflen) {
		var regerrno, _tuple, r0;
		regerrno = null;
		_tuple = Syscall6(procRegQueryValueExW.Addr(), 6, (key >>> 0), name, reserved, valtype, buf, buflen); r0 = _tuple[0];
		if (!((r0 === 0))) {
			regerrno = new Errno((r0 >>> 0));
		}
		return regerrno;
	};
	GetConsoleMode = go$pkg.GetConsoleMode = function(console, mode) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall(procGetConsoleMode.Addr(), 2, (console >>> 0), mode, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	WriteConsole = go$pkg.WriteConsole = function(console, buf, towrite, written, reserved) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall6(procWriteConsoleW.Addr(), 5, (console >>> 0), buf, (towrite >>> 0), written, reserved, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	ReadConsole = go$pkg.ReadConsole = function(console, buf, toread, read, inputControl) {
		var err, _tuple, r1, e1;
		err = null;
		_tuple = Syscall6(procReadConsoleW.Addr(), 5, (console >>> 0), buf, (toread >>> 0), read, inputControl, 0); r1 = _tuple[0]; e1 = _tuple[2];
		if (r1 === 0) {
			if (!((e1 === 0))) {
				err = new Errno(e1);
			} else {
				err = new Errno(536870951);
			}
		}
		return err;
	};
	Filetime.Ptr.prototype.Nanoseconds = function() {
		var ft, x, x$1, nsec;
		ft = this;
		nsec = (x = go$shiftLeft64(new Go$Int64(0, ft.HighDateTime), 32), x$1 = new Go$Int64(0, ft.LowDateTime), new Go$Int64(x.high + x$1.high, x.low + x$1.low));
		nsec = new Go$Int64(nsec.high - 27111902, nsec.low - 3577643008);
		nsec = go$mul64(nsec, new Go$Int64(0, 100));
		return nsec;
	};
	Filetime.prototype.Nanoseconds = function() { return this.go$val.Nanoseconds(); };
	copyFindData = function(dst, src) {
		var _struct, _struct$1, _struct$2;
		dst.FileAttributes = src.FileAttributes;
		dst.CreationTime = (_struct = src.CreationTime, new Filetime.Ptr(_struct.LowDateTime, _struct.HighDateTime));
		dst.LastAccessTime = (_struct$1 = src.LastAccessTime, new Filetime.Ptr(_struct$1.LowDateTime, _struct$1.HighDateTime));
		dst.LastWriteTime = (_struct$2 = src.LastWriteTime, new Filetime.Ptr(_struct$2.LowDateTime, _struct$2.HighDateTime));
		dst.FileSizeHigh = src.FileSizeHigh;
		dst.FileSizeLow = src.FileSizeLow;
		dst.Reserved0 = src.Reserved0;
		dst.Reserved1 = src.Reserved1;
		go$copySlice(new (go$sliceType(Go$Uint16))(dst.FileName), new (go$sliceType(Go$Uint16))(src.FileName));
		go$copySlice(new (go$sliceType(Go$Uint16))(dst.AlternateFileName), new (go$sliceType(Go$Uint16))(src.AlternateFileName));
	};

			if (go$pkg.Syscall15 !== undefined) { // windows
				Syscall = Syscall6 = Syscall9 = Syscall12 = Syscall15 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.Syscall9 = go$pkg.Syscall12 = go$pkg.Syscall15 = loadlibrary = getprocaddress = function() { throw new Error("Syscalls not available."); };
				getStdHandle = GetCommandLine = go$pkg.GetCommandLine = function() {};
				CommandLineToArgv = go$pkg.CommandLineToArgv = function() { return [null, {}]; };
				Getenv = go$pkg.Getenv = function(key) { return ["", false]; };
				GetTimeZoneInformation = go$pkg.GetTimeZoneInformation = function() { return [undefined, true]; };
			} else if (typeof process === "undefined") {
				var syscall = function() { throw new Error("Syscalls not available."); };
				if (typeof go$syscall !== "undefined") {
					syscall = go$syscall;
				}
				Syscall = Syscall6 = RawSyscall = RawSyscall6 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.RawSyscall = go$pkg.RawSyscall6 = syscall;
				envs = new (go$sliceType(Go$String))(new Array(0));
			} else {
				try {
					var syscall = require("syscall");
					Syscall = go$pkg.Syscall = syscall.Syscall;
					Syscall6 = go$pkg.Syscall6 = syscall.Syscall6;
					RawSyscall = go$pkg.RawSyscall = syscall.Syscall;
					RawSyscall6 = go$pkg.RawSyscall6 = syscall.Syscall6;
				} catch (e) {
					Syscall = Syscall6 = RawSyscall = RawSyscall6 = go$pkg.Syscall = go$pkg.Syscall6 = go$pkg.RawSyscall = go$pkg.RawSyscall6 = function() { throw e; };
				}
				BytePtrFromString = go$pkg.BytePtrFromString = function(s) { return [go$stringToBytes(s, true), null]; };

				var envkeys = Object.keys(process.env);
				envs = new (go$sliceType(Go$String))(new Array(envkeys.length));
				var i;
				for(i = 0; i < envkeys.length; i++) {
					envs.array[i] = envkeys[i] + "=" + process.env[envkeys[i]];
				}
			}
			go$pkg.init = function() {
		(go$ptrType(DLLError)).methods = [["Error", "", [], [Go$String], false, -1]];
		DLLError.init([["Err", "Err", "", go$error, ""], ["ObjName", "ObjName", "", Go$String, ""], ["Msg", "Msg", "", Go$String, ""]]);
		(go$ptrType(DLL)).methods = [["FindProc", "", [Go$String], [(go$ptrType(Proc)), go$error], false, -1], ["MustFindProc", "", [Go$String], [(go$ptrType(Proc))], false, -1], ["Release", "", [], [go$error], false, -1]];
		DLL.init([["Name", "Name", "", Go$String, ""], ["Handle", "Handle", "", Handle, ""]]);
		(go$ptrType(Proc)).methods = [["Addr", "", [], [Go$Uintptr], false, -1], ["Call", "", [(go$sliceType(Go$Uintptr))], [Go$Uintptr, Go$Uintptr, go$error], true, -1]];
		Proc.init([["Dll", "Dll", "", (go$ptrType(DLL)), ""], ["Name", "Name", "", Go$String, ""], ["addr", "addr", "syscall", Go$Uintptr, ""]]);
		(go$ptrType(LazyDLL)).methods = [["Handle", "", [], [Go$Uintptr], false, -1], ["Load", "", [], [go$error], false, -1], ["NewProc", "", [Go$String], [(go$ptrType(LazyProc))], false, -1], ["mustLoad", "syscall", [], [], false, -1]];
		LazyDLL.init([["mu", "mu", "syscall", sync.Mutex, ""], ["dll", "dll", "syscall", (go$ptrType(DLL)), ""], ["Name", "Name", "", Go$String, ""]]);
		(go$ptrType(LazyProc)).methods = [["Addr", "", [], [Go$Uintptr], false, -1], ["Call", "", [(go$sliceType(Go$Uintptr))], [Go$Uintptr, Go$Uintptr, go$error], true, -1], ["Find", "", [], [go$error], false, -1], ["mustFind", "syscall", [], [], false, -1]];
		LazyProc.init([["mu", "mu", "syscall", sync.Mutex, ""], ["Name", "Name", "", Go$String, ""], ["l", "l", "syscall", (go$ptrType(LazyDLL)), ""], ["proc", "proc", "syscall", (go$ptrType(Proc)), ""]]);
		Errno.methods = [["Error", "", [], [Go$String], false, -1], ["Temporary", "", [], [Go$Bool], false, -1], ["Timeout", "", [], [Go$Bool], false, -1]];
		(go$ptrType(Errno)).methods = [["Error", "", [], [Go$String], false, -1], ["Temporary", "", [], [Go$Bool], false, -1], ["Timeout", "", [], [Go$Bool], false, -1]];
		SecurityAttributes.init([["Length", "Length", "", Go$Uint32, ""], ["SecurityDescriptor", "SecurityDescriptor", "", Go$Uintptr, ""], ["InheritHandle", "InheritHandle", "", Go$Uint32, ""]]);
		Overlapped.init([["Internal", "Internal", "", Go$Uintptr, ""], ["InternalHigh", "InternalHigh", "", Go$Uintptr, ""], ["Offset", "Offset", "", Go$Uint32, ""], ["OffsetHigh", "OffsetHigh", "", Go$Uint32, ""], ["HEvent", "HEvent", "", Handle, ""]]);
		(go$ptrType(Filetime)).methods = [["Nanoseconds", "", [], [Go$Int64], false, -1]];
		Filetime.init([["LowDateTime", "LowDateTime", "", Go$Uint32, ""], ["HighDateTime", "HighDateTime", "", Go$Uint32, ""]]);
		Win32finddata.init([["FileAttributes", "FileAttributes", "", Go$Uint32, ""], ["CreationTime", "CreationTime", "", Filetime, ""], ["LastAccessTime", "LastAccessTime", "", Filetime, ""], ["LastWriteTime", "LastWriteTime", "", Filetime, ""], ["FileSizeHigh", "FileSizeHigh", "", Go$Uint32, ""], ["FileSizeLow", "FileSizeLow", "", Go$Uint32, ""], ["Reserved0", "Reserved0", "", Go$Uint32, ""], ["Reserved1", "Reserved1", "", Go$Uint32, ""], ["FileName", "FileName", "", (go$arrayType(Go$Uint16, 259)), ""], ["AlternateFileName", "AlternateFileName", "", (go$arrayType(Go$Uint16, 13)), ""]]);
		win32finddata1.init([["FileAttributes", "FileAttributes", "", Go$Uint32, ""], ["CreationTime", "CreationTime", "", Filetime, ""], ["LastAccessTime", "LastAccessTime", "", Filetime, ""], ["LastWriteTime", "LastWriteTime", "", Filetime, ""], ["FileSizeHigh", "FileSizeHigh", "", Go$Uint32, ""], ["FileSizeLow", "FileSizeLow", "", Go$Uint32, ""], ["Reserved0", "Reserved0", "", Go$Uint32, ""], ["Reserved1", "Reserved1", "", Go$Uint32, ""], ["FileName", "FileName", "", (go$arrayType(Go$Uint16, 260)), ""], ["AlternateFileName", "AlternateFileName", "", (go$arrayType(Go$Uint16, 14)), ""]]);
		ByHandleFileInformation.init([["FileAttributes", "FileAttributes", "", Go$Uint32, ""], ["CreationTime", "CreationTime", "", Filetime, ""], ["LastAccessTime", "LastAccessTime", "", Filetime, ""], ["LastWriteTime", "LastWriteTime", "", Filetime, ""], ["VolumeSerialNumber", "VolumeSerialNumber", "", Go$Uint32, ""], ["FileSizeHigh", "FileSizeHigh", "", Go$Uint32, ""], ["FileSizeLow", "FileSizeLow", "", Go$Uint32, ""], ["NumberOfLinks", "NumberOfLinks", "", Go$Uint32, ""], ["FileIndexHigh", "FileIndexHigh", "", Go$Uint32, ""], ["FileIndexLow", "FileIndexLow", "", Go$Uint32, ""]]);
		Win32FileAttributeData.init([["FileAttributes", "FileAttributes", "", Go$Uint32, ""], ["CreationTime", "CreationTime", "", Filetime, ""], ["LastAccessTime", "LastAccessTime", "", Filetime, ""], ["LastWriteTime", "LastWriteTime", "", Filetime, ""], ["FileSizeHigh", "FileSizeHigh", "", Go$Uint32, ""], ["FileSizeLow", "FileSizeLow", "", Go$Uint32, ""]]);
		Systemtime.init([["Year", "Year", "", Go$Uint16, ""], ["Month", "Month", "", Go$Uint16, ""], ["DayOfWeek", "DayOfWeek", "", Go$Uint16, ""], ["Day", "Day", "", Go$Uint16, ""], ["Hour", "Hour", "", Go$Uint16, ""], ["Minute", "Minute", "", Go$Uint16, ""], ["Second", "Second", "", Go$Uint16, ""], ["Milliseconds", "Milliseconds", "", Go$Uint16, ""]]);
		Timezoneinformation.init([["Bias", "Bias", "", Go$Int32, ""], ["StandardName", "StandardName", "", (go$arrayType(Go$Uint16, 32)), ""], ["StandardDate", "StandardDate", "", Systemtime, ""], ["StandardBias", "StandardBias", "", Go$Int32, ""], ["DaylightName", "DaylightName", "", (go$arrayType(Go$Uint16, 32)), ""], ["DaylightDate", "DaylightDate", "", Systemtime, ""], ["DaylightBias", "DaylightBias", "", Go$Int32, ""]]);
		modkernel32 = NewLazyDLL("kernel32.dll");
		procSetHandleInformation = modkernel32.NewProc("SetHandleInformation");
		procGetStdHandle = modkernel32.NewProc("GetStdHandle");
		go$pkg.Stdin = getStdHandle(-10);
		go$pkg.Stdout = getStdHandle(-11);
		go$pkg.Stderr = getStdHandle(-12);
		errors = go$toNativeArray("String", ["argument list too long", "permission denied", "address already in use", "cannot assign requested address", "advertise error", "address family not supported by protocol", "resource temporarily unavailable", "operation already in progress", "invalid exchange", "bad file descriptor", "file descriptor in bad state", "bad message", "invalid request descriptor", "invalid request code", "invalid slot", "bad font file format", "device or resource busy", "operation canceled", "no child processes", "channel number out of range", "communication error on send", "software caused connection abort", "connection refused", "connection reset by peer", "resource deadlock avoided", "resource deadlock avoided", "destination address required", "numerical argument out of domain", "RFS specific error", "disk quota exceeded", "file exists", "bad address", "file too large", "host is down", "no route to host", "identifier removed", "invalid or incomplete multibyte or wide character", "operation now in progress", "interrupted system call", "invalid argument", "input/output error", "transport endpoint is already connected", "is a directory", "is a named type file", "key has expired", "key was rejected by service", "key has been revoked", "level 2 halted", "level 2 not synchronized", "level 3 halted", "level 3 reset", "can not access a needed shared library", "accessing a corrupted shared library", "cannot exec a shared library directly", "attempting to link in too many shared libraries", ".lib section in a.out corrupted", "link number out of range", "too many levels of symbolic links", "wrong medium type", "too many open files", "too many links", "message too long", "multihop attempted", "file name too long", "no XENIX semaphores available", "network is down", "network dropped connection on reset", "network is unreachable", "too many open files in system", "no anode", "no buffer space available", "no CSI structure available", "no data available", "no such device", "exec format error", "required key not available", "no locks available", "link has been severed", "no medium found", "cannot allocate memory", "no message of desired type", "machine is not on the network", "package not installed", "protocol not available", "no space left on device", "out of streams resources", "device not a stream", "function not implemented", "block device required", "transport endpoint is not connected", "directory not empty", "not a XENIX named type file", "state not recoverable", "socket operation on non-socket", "operation not supported", "inappropriate ioctl for device", "name not unique on network", "no such device or address", "operation not supported", "value too large for defined data type", "owner died", "operation not permitted", "protocol family not supported", "broken pipe", "protocol error", "protocol not supported", "protocol wrong type for socket", "numerical result out of range", "remote address changed", "object is remote", "remote I/O error", "interrupted system call should be restarted", "read-only file system", "cannot send after transport endpoint shutdown", "socket type not supported", "illegal seek", "no such process", "srmount error", "stale NFS file handle", "streams pipe error", "timer expired", "connection timed out", "too many references: cannot splice", "text file busy", "structure needs cleaning", "protocol driver not attached", "too many users", "resource temporarily unavailable", "invalid cross-device link", "exchange full", "not supported by windows"]);
		modadvapi32 = NewLazyDLL("advapi32.dll");
		modshell32 = NewLazyDLL("shell32.dll");
		modmswsock = NewLazyDLL("mswsock.dll");
		modcrypt32 = NewLazyDLL("crypt32.dll");
		modws2_32 = NewLazyDLL("ws2_32.dll");
		moddnsapi = NewLazyDLL("dnsapi.dll");
		modiphlpapi = NewLazyDLL("iphlpapi.dll");
		modsecur32 = NewLazyDLL("secur32.dll");
		modnetapi32 = NewLazyDLL("netapi32.dll");
		moduserenv = NewLazyDLL("userenv.dll");
		procGetLastError = modkernel32.NewProc("GetLastError");
		procLoadLibraryW = modkernel32.NewProc("LoadLibraryW");
		procFreeLibrary = modkernel32.NewProc("FreeLibrary");
		procGetProcAddress = modkernel32.NewProc("GetProcAddress");
		procGetVersion = modkernel32.NewProc("GetVersion");
		procFormatMessageW = modkernel32.NewProc("FormatMessageW");
		procExitProcess = modkernel32.NewProc("ExitProcess");
		procCreateFileW = modkernel32.NewProc("CreateFileW");
		procReadFile = modkernel32.NewProc("ReadFile");
		procWriteFile = modkernel32.NewProc("WriteFile");
		procSetFilePointer = modkernel32.NewProc("SetFilePointer");
		procCloseHandle = modkernel32.NewProc("CloseHandle");
		procFindFirstFileW = modkernel32.NewProc("FindFirstFileW");
		procFindNextFileW = modkernel32.NewProc("FindNextFileW");
		procFindClose = modkernel32.NewProc("FindClose");
		procGetFileInformationByHandle = modkernel32.NewProc("GetFileInformationByHandle");
		procGetCurrentDirectoryW = modkernel32.NewProc("GetCurrentDirectoryW");
		procSetCurrentDirectoryW = modkernel32.NewProc("SetCurrentDirectoryW");
		procCreateDirectoryW = modkernel32.NewProc("CreateDirectoryW");
		procRemoveDirectoryW = modkernel32.NewProc("RemoveDirectoryW");
		procDeleteFileW = modkernel32.NewProc("DeleteFileW");
		procMoveFileW = modkernel32.NewProc("MoveFileW");
		procGetComputerNameW = modkernel32.NewProc("GetComputerNameW");
		procSetEndOfFile = modkernel32.NewProc("SetEndOfFile");
		procGetSystemTimeAsFileTime = modkernel32.NewProc("GetSystemTimeAsFileTime");
		procGetTimeZoneInformation = modkernel32.NewProc("GetTimeZoneInformation");
		procCreateIoCompletionPort = modkernel32.NewProc("CreateIoCompletionPort");
		procGetQueuedCompletionStatus = modkernel32.NewProc("GetQueuedCompletionStatus");
		procPostQueuedCompletionStatus = modkernel32.NewProc("PostQueuedCompletionStatus");
		procCancelIo = modkernel32.NewProc("CancelIo");
		procCancelIoEx = modkernel32.NewProc("CancelIoEx");
		procCreateProcessW = modkernel32.NewProc("CreateProcessW");
		procOpenProcess = modkernel32.NewProc("OpenProcess");
		procTerminateProcess = modkernel32.NewProc("TerminateProcess");
		procGetExitCodeProcess = modkernel32.NewProc("GetExitCodeProcess");
		procGetStartupInfoW = modkernel32.NewProc("GetStartupInfoW");
		procGetCurrentProcess = modkernel32.NewProc("GetCurrentProcess");
		procGetProcessTimes = modkernel32.NewProc("GetProcessTimes");
		procDuplicateHandle = modkernel32.NewProc("DuplicateHandle");
		procWaitForSingleObject = modkernel32.NewProc("WaitForSingleObject");
		procGetTempPathW = modkernel32.NewProc("GetTempPathW");
		procCreatePipe = modkernel32.NewProc("CreatePipe");
		procGetFileType = modkernel32.NewProc("GetFileType");
		procCryptAcquireContextW = modadvapi32.NewProc("CryptAcquireContextW");
		procCryptReleaseContext = modadvapi32.NewProc("CryptReleaseContext");
		procCryptGenRandom = modadvapi32.NewProc("CryptGenRandom");
		procGetEnvironmentStringsW = modkernel32.NewProc("GetEnvironmentStringsW");
		procFreeEnvironmentStringsW = modkernel32.NewProc("FreeEnvironmentStringsW");
		procGetEnvironmentVariableW = modkernel32.NewProc("GetEnvironmentVariableW");
		procSetEnvironmentVariableW = modkernel32.NewProc("SetEnvironmentVariableW");
		procSetFileTime = modkernel32.NewProc("SetFileTime");
		procGetFileAttributesW = modkernel32.NewProc("GetFileAttributesW");
		procSetFileAttributesW = modkernel32.NewProc("SetFileAttributesW");
		procGetFileAttributesExW = modkernel32.NewProc("GetFileAttributesExW");
		procGetCommandLineW = modkernel32.NewProc("GetCommandLineW");
		procCommandLineToArgvW = modshell32.NewProc("CommandLineToArgvW");
		procLocalFree = modkernel32.NewProc("LocalFree");
		procFlushFileBuffers = modkernel32.NewProc("FlushFileBuffers");
		procGetFullPathNameW = modkernel32.NewProc("GetFullPathNameW");
		procGetLongPathNameW = modkernel32.NewProc("GetLongPathNameW");
		procGetShortPathNameW = modkernel32.NewProc("GetShortPathNameW");
		procCreateFileMappingW = modkernel32.NewProc("CreateFileMappingW");
		procMapViewOfFile = modkernel32.NewProc("MapViewOfFile");
		procUnmapViewOfFile = modkernel32.NewProc("UnmapViewOfFile");
		procFlushViewOfFile = modkernel32.NewProc("FlushViewOfFile");
		procVirtualLock = modkernel32.NewProc("VirtualLock");
		procVirtualUnlock = modkernel32.NewProc("VirtualUnlock");
		procTransmitFile = modmswsock.NewProc("TransmitFile");
		procReadDirectoryChangesW = modkernel32.NewProc("ReadDirectoryChangesW");
		procCertOpenSystemStoreW = modcrypt32.NewProc("CertOpenSystemStoreW");
		procCertOpenStore = modcrypt32.NewProc("CertOpenStore");
		procCertEnumCertificatesInStore = modcrypt32.NewProc("CertEnumCertificatesInStore");
		procCertAddCertificateContextToStore = modcrypt32.NewProc("CertAddCertificateContextToStore");
		procCertCloseStore = modcrypt32.NewProc("CertCloseStore");
		procCertGetCertificateChain = modcrypt32.NewProc("CertGetCertificateChain");
		procCertFreeCertificateChain = modcrypt32.NewProc("CertFreeCertificateChain");
		procCertCreateCertificateContext = modcrypt32.NewProc("CertCreateCertificateContext");
		procCertFreeCertificateContext = modcrypt32.NewProc("CertFreeCertificateContext");
		procCertVerifyCertificateChainPolicy = modcrypt32.NewProc("CertVerifyCertificateChainPolicy");
		procRegOpenKeyExW = modadvapi32.NewProc("RegOpenKeyExW");
		procRegCloseKey = modadvapi32.NewProc("RegCloseKey");
		procRegQueryInfoKeyW = modadvapi32.NewProc("RegQueryInfoKeyW");
		procRegEnumKeyExW = modadvapi32.NewProc("RegEnumKeyExW");
		procRegQueryValueExW = modadvapi32.NewProc("RegQueryValueExW");
		procGetCurrentProcessId = modkernel32.NewProc("GetCurrentProcessId");
		procGetConsoleMode = modkernel32.NewProc("GetConsoleMode");
		procWriteConsoleW = modkernel32.NewProc("WriteConsoleW");
		procReadConsoleW = modkernel32.NewProc("ReadConsoleW");
		procWSAStartup = modws2_32.NewProc("WSAStartup");
		procWSACleanup = modws2_32.NewProc("WSACleanup");
		procWSAIoctl = modws2_32.NewProc("WSAIoctl");
		procsocket = modws2_32.NewProc("socket");
		procsetsockopt = modws2_32.NewProc("setsockopt");
		procgetsockopt = modws2_32.NewProc("getsockopt");
		procbind = modws2_32.NewProc("bind");
		procconnect = modws2_32.NewProc("connect");
		procgetsockname = modws2_32.NewProc("getsockname");
		procgetpeername = modws2_32.NewProc("getpeername");
		proclisten = modws2_32.NewProc("listen");
		procshutdown = modws2_32.NewProc("shutdown");
		procclosesocket = modws2_32.NewProc("closesocket");
		procAcceptEx = modmswsock.NewProc("AcceptEx");
		procGetAcceptExSockaddrs = modmswsock.NewProc("GetAcceptExSockaddrs");
		procWSARecv = modws2_32.NewProc("WSARecv");
		procWSASend = modws2_32.NewProc("WSASend");
		procWSARecvFrom = modws2_32.NewProc("WSARecvFrom");
		procWSASendTo = modws2_32.NewProc("WSASendTo");
		procgethostbyname = modws2_32.NewProc("gethostbyname");
		procgetservbyname = modws2_32.NewProc("getservbyname");
		procntohs = modws2_32.NewProc("ntohs");
		procgetprotobyname = modws2_32.NewProc("getprotobyname");
		procDnsQuery_W = moddnsapi.NewProc("DnsQuery_W");
		procDnsRecordListFree = moddnsapi.NewProc("DnsRecordListFree");
		procGetAddrInfoW = modws2_32.NewProc("GetAddrInfoW");
		procFreeAddrInfoW = modws2_32.NewProc("FreeAddrInfoW");
		procGetIfEntry = modiphlpapi.NewProc("GetIfEntry");
		procGetAdaptersInfo = modiphlpapi.NewProc("GetAdaptersInfo");
		procSetFileCompletionNotificationModes = modkernel32.NewProc("SetFileCompletionNotificationModes");
		procWSAEnumProtocolsW = modws2_32.NewProc("WSAEnumProtocolsW");
		procTranslateNameW = modsecur32.NewProc("TranslateNameW");
		procGetUserNameExW = modsecur32.NewProc("GetUserNameExW");
		procNetUserGetInfo = modnetapi32.NewProc("NetUserGetInfo");
		procNetGetJoinInformation = modnetapi32.NewProc("NetGetJoinInformation");
		procNetApiBufferFree = modnetapi32.NewProc("NetApiBufferFree");
		procLookupAccountSidW = modadvapi32.NewProc("LookupAccountSidW");
		procLookupAccountNameW = modadvapi32.NewProc("LookupAccountNameW");
		procConvertSidToStringSidW = modadvapi32.NewProc("ConvertSidToStringSidW");
		procConvertStringSidToSidW = modadvapi32.NewProc("ConvertStringSidToSidW");
		procGetLengthSid = modadvapi32.NewProc("GetLengthSid");
		procCopySid = modadvapi32.NewProc("CopySid");
		procOpenProcessToken = modadvapi32.NewProc("OpenProcessToken");
		procGetTokenInformation = modadvapi32.NewProc("GetTokenInformation");
		procGetUserProfileDirectoryW = moduserenv.NewProc("GetUserProfileDirectoryW");
	}
	return go$pkg;
})();
go$packages["time"] = (function() {
	var go$pkg = {}, js = go$packages["github.com/gopherjs/gopherjs/js"], errors = go$packages["errors"], syscall = go$packages["syscall"], sync = go$packages["sync"], runtime = go$packages["runtime"], ParseError, Time, Month, Weekday, Duration, Location, zone, zoneTrans, abbr, now, startsWithLowerCase, nextStdChunk, match, lookup, appendUint, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, absWeekday, absClock, fmtFrac, fmtInt, absDate, daysIn, Now, Unix, isLeap, norm, Date, div, FixedZone, getKeyValue, matchZoneKey, toEnglishName, extractCAPS, abbrev, pseudoUnix, initLocalFromTZI, initLocal, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, months, days, daysBefore, utcLoc, localLoc, localOnce, zoneinfo, abbrs, badData;
	ParseError = go$pkg.ParseError = go$newType(0, "Struct", "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.go$val = this;
		this.Layout = Layout_ !== undefined ? Layout_ : "";
		this.Value = Value_ !== undefined ? Value_ : "";
		this.LayoutElem = LayoutElem_ !== undefined ? LayoutElem_ : "";
		this.ValueElem = ValueElem_ !== undefined ? ValueElem_ : "";
		this.Message = Message_ !== undefined ? Message_ : "";
	});
	Time = go$pkg.Time = go$newType(0, "Struct", "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.go$val = this;
		this.sec = sec_ !== undefined ? sec_ : new Go$Int64(0, 0);
		this.nsec = nsec_ !== undefined ? nsec_ : 0;
		this.loc = loc_ !== undefined ? loc_ : (go$ptrType(Location)).nil;
	});
	Month = go$pkg.Month = go$newType(4, "Int", "time.Month", "Month", "time", null);
	Weekday = go$pkg.Weekday = go$newType(4, "Int", "time.Weekday", "Weekday", "time", null);
	Duration = go$pkg.Duration = go$newType(8, "Int64", "time.Duration", "Duration", "time", null);
	Location = go$pkg.Location = go$newType(0, "Struct", "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.zone = zone_ !== undefined ? zone_ : (go$sliceType(zone)).nil;
		this.tx = tx_ !== undefined ? tx_ : (go$sliceType(zoneTrans)).nil;
		this.cacheStart = cacheStart_ !== undefined ? cacheStart_ : new Go$Int64(0, 0);
		this.cacheEnd = cacheEnd_ !== undefined ? cacheEnd_ : new Go$Int64(0, 0);
		this.cacheZone = cacheZone_ !== undefined ? cacheZone_ : (go$ptrType(zone)).nil;
	});
	zone = go$pkg.zone = go$newType(0, "Struct", "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.offset = offset_ !== undefined ? offset_ : 0;
		this.isDST = isDST_ !== undefined ? isDST_ : false;
	});
	zoneTrans = go$pkg.zoneTrans = go$newType(0, "Struct", "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.go$val = this;
		this.when = when_ !== undefined ? when_ : new Go$Int64(0, 0);
		this.index = index_ !== undefined ? index_ : 0;
		this.isstd = isstd_ !== undefined ? isstd_ : false;
		this.isutc = isutc_ !== undefined ? isutc_ : false;
	});
	abbr = go$pkg.abbr = go$newType(0, "Struct", "time.abbr", "abbr", "time", function(std_, dst_) {
		this.go$val = this;
		this.std = std_ !== undefined ? std_ : "";
		this.dst = dst_ !== undefined ? dst_ : "";
	});
	now = function() {
		var sec, nsec, msec, x, x$1, _tuple;
		sec = new Go$Int64(0, 0);
		nsec = 0;
		msec = go$internalize(new (go$global.Date)().getTime(), Go$Int64);
		_tuple = [go$div64(msec, new Go$Int64(0, 1000), false), (x = ((x$1 = go$div64(msec, new Go$Int64(0, 1000), true), x$1.low + ((x$1.high >> 31) * 4294967296)) >> 0), (((x >>> 16 << 16) * 1000000 >> 0) + (x << 16 >>> 16) * 1000000) >> 0)]; sec = _tuple[0]; nsec = _tuple[1];
		return [sec, nsec];
	};
	startsWithLowerCase = function(str) {
		var c;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var prefix, std, suffix, i, c, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, _tuple$18, _tuple$19, _tuple$20, _tuple$21, _tuple$22, _tuple$23, _tuple$24, ch, j, std$1, _tuple$25, _tuple$26;
		prefix = "";
		std = 0;
		suffix = "";
		i = 0;
		while (i < layout.length) {
			c = (layout.charCodeAt(i) >> 0);
			_ref = c;
			if (_ref === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tuple = [layout.substring(0, i), 257, layout.substring((i + 7 >> 0))]; prefix = _tuple[0]; std = _tuple[1]; suffix = _tuple[2];
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tuple$1 = [layout.substring(0, i), 258, layout.substring((i + 3 >> 0))]; prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tuple$2 = [layout.substring(0, i), 261, layout.substring((i + 6 >> 0))]; prefix = _tuple$2[0]; std = _tuple$2[1]; suffix = _tuple$2[2];
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tuple$3 = [layout.substring(0, i), 262, layout.substring((i + 3 >> 0))]; prefix = _tuple$3[0]; std = _tuple$3[1]; suffix = _tuple$3[2];
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tuple$4 = [layout.substring(0, i), 21, layout.substring((i + 3 >> 0))]; prefix = _tuple$4[0]; std = _tuple$4[1]; suffix = _tuple$4[2];
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tuple$5 = [layout.substring(0, i), std0x[(layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24)], layout.substring((i + 2 >> 0))]; prefix = _tuple$5[0]; std = _tuple$5[1]; suffix = _tuple$5[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tuple$6 = [layout.substring(0, i), 522, layout.substring((i + 2 >> 0))]; prefix = _tuple$6[0]; std = _tuple$6[1]; suffix = _tuple$6[2];
					return [prefix, std, suffix];
				}
				_tuple$7 = [layout.substring(0, i), 259, layout.substring((i + 1 >> 0))]; prefix = _tuple$7[0]; std = _tuple$7[1]; suffix = _tuple$7[2];
				return [prefix, std, suffix];
			} else if (_ref === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tuple$8 = [layout.substring(0, i), 273, layout.substring((i + 4 >> 0))]; prefix = _tuple$8[0]; std = _tuple$8[1]; suffix = _tuple$8[2];
					return [prefix, std, suffix];
				}
				_tuple$9 = [layout.substring(0, i), 263, layout.substring((i + 1 >> 0))]; prefix = _tuple$9[0]; std = _tuple$9[1]; suffix = _tuple$9[2];
				return [prefix, std, suffix];
			} else if (_ref === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					_tuple$10 = [layout.substring(0, i), 264, layout.substring((i + 2 >> 0))]; prefix = _tuple$10[0]; std = _tuple$10[1]; suffix = _tuple$10[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 51) {
				_tuple$11 = [layout.substring(0, i), 523, layout.substring((i + 1 >> 0))]; prefix = _tuple$11[0]; std = _tuple$11[1]; suffix = _tuple$11[2];
				return [prefix, std, suffix];
			} else if (_ref === 52) {
				_tuple$12 = [layout.substring(0, i), 525, layout.substring((i + 1 >> 0))]; prefix = _tuple$12[0]; std = _tuple$12[1]; suffix = _tuple$12[2];
				return [prefix, std, suffix];
			} else if (_ref === 53) {
				_tuple$13 = [layout.substring(0, i), 527, layout.substring((i + 1 >> 0))]; prefix = _tuple$13[0]; std = _tuple$13[1]; suffix = _tuple$13[2];
				return [prefix, std, suffix];
			} else if (_ref === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tuple$14 = [layout.substring(0, i), 531, layout.substring((i + 2 >> 0))]; prefix = _tuple$14[0]; std = _tuple$14[1]; suffix = _tuple$14[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tuple$15 = [layout.substring(0, i), 532, layout.substring((i + 2 >> 0))]; prefix = _tuple$15[0]; std = _tuple$15[1]; suffix = _tuple$15[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tuple$16 = [layout.substring(0, i), 27, layout.substring((i + 7 >> 0))]; prefix = _tuple$16[0]; std = _tuple$16[1]; suffix = _tuple$16[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tuple$17 = [layout.substring(0, i), 30, layout.substring((i + 9 >> 0))]; prefix = _tuple$17[0]; std = _tuple$17[1]; suffix = _tuple$17[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tuple$18 = [layout.substring(0, i), 26, layout.substring((i + 5 >> 0))]; prefix = _tuple$18[0]; std = _tuple$18[1]; suffix = _tuple$18[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tuple$19 = [layout.substring(0, i), 29, layout.substring((i + 6 >> 0))]; prefix = _tuple$19[0]; std = _tuple$19[1]; suffix = _tuple$19[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tuple$20 = [layout.substring(0, i), 28, layout.substring((i + 3 >> 0))]; prefix = _tuple$20[0]; std = _tuple$20[1]; suffix = _tuple$20[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tuple$21 = [layout.substring(0, i), 23, layout.substring((i + 7 >> 0))]; prefix = _tuple$21[0]; std = _tuple$21[1]; suffix = _tuple$21[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tuple$22 = [layout.substring(0, i), 25, layout.substring((i + 9 >> 0))]; prefix = _tuple$22[0]; std = _tuple$22[1]; suffix = _tuple$22[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tuple$23 = [layout.substring(0, i), 22, layout.substring((i + 5 >> 0))]; prefix = _tuple$23[0]; std = _tuple$23[1]; suffix = _tuple$23[2];
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tuple$24 = [layout.substring(0, i), 24, layout.substring((i + 6 >> 0))]; prefix = _tuple$24[0]; std = _tuple$24[1]; suffix = _tuple$24[2];
					return [prefix, std, suffix];
				}
			} else if (_ref === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (j < layout.length && (layout.charCodeAt(j) === ch)) {
						j = j + 1 >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 31;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 32;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tuple$25 = [layout.substring(0, i), std$1, layout.substring(j)]; prefix = _tuple$25[0]; std = _tuple$25[1]; suffix = _tuple$25[2];
						return [prefix, std, suffix];
					}
				}
			}
			i = i + 1 >> 0;
		}
		_tuple$26 = [layout, 0, ""]; prefix = _tuple$26[0]; std = _tuple$26[1]; suffix = _tuple$26[2];
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var i, c1, c2;
		i = 0;
		while (i < s1.length) {
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | 32) >>> 0;
				c2 = (c2 | 32) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + 1 >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _ref, _i, _slice, _index, v, i;
		_ref = tab;
		_i = 0;
		while (_i < _ref.length) {
			v = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), null];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendUint = function(b, x, pad) {
		var _q, _r, buf, n, _r$1, _q$1;
		if (x < 10) {
			if (!((pad === 0))) {
				b = go$append(b, pad);
			}
			return go$append(b, ((48 + x >>> 0) << 24 >>> 24));
		}
		if (x < 100) {
			b = go$append(b, ((48 + (_q = x / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			b = go$append(b, ((48 + (_r = x % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			return b;
		}
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		n = 32;
		if (x === 0) {
			return go$append(b, 48);
		}
		while (x >= 10) {
			n = n - 1 >> 0;
			buf[n] = (((_r$1 = x % 10, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			x = (_q$1 = x / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		n = n - 1 >> 0;
		buf[n] = ((x + 48 >>> 0) << 24 >>> 24);
		return go$appendSlice(b, go$subslice(new (go$sliceType(Go$Uint8))(buf), n));
	};
	atoi = function(s) {
		var x, err, neg, _tuple, q, rem, _tuple$1, _tuple$2;
		x = 0;
		err = null;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple = leadingInt(s); q = _tuple[0]; rem = _tuple[1]; err = _tuple[2];
		x = ((q.low + ((q.high >> 31) * 4294967296)) >> 0);
		if (!(go$interfaceIsEqual(err, null)) || !(rem === "")) {
			_tuple$1 = [0, atoiError]; x = _tuple$1[0]; err = _tuple$1[1];
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tuple$2 = [x, null]; x = _tuple$2[0]; err = _tuple$2[1];
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var u, buf, start, _r, _q;
		u = nanosec;
		buf = go$makeNativeArray("Uint8", 9, function() { return 0; });
		start = 9;
		while (start > 0) {
			start = start - 1 >> 0;
			buf[start] = (((_r = u % 10, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			u = (_q = u / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : go$throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (n > 0 && (buf[(n - 1 >> 0)] === 48)) {
				n = n - 1 >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = go$append(b, 46);
		return go$appendSlice(b, go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, n));
	};
	Time.Ptr.prototype.String = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return t.Format("2006-01-02 15:04:05.999999999 -0700 MST");
	};
	Time.prototype.String = function() { return this.go$val.String(); };
	Time.Ptr.prototype.Format = function(layout) {
		var _struct, t, _tuple, name, offset, abs, year, month, day, hour, min, sec, b, buf, max, _tuple$1, prefix, std, suffix, _tuple$2, _tuple$3, _ref, y, _r, y$1, m, s, _r$1, hr, _r$2, hr$1, _q, zone$1, absoffset, _q$1, _r$3, _r$4, _q$2, zone$2, _q$3, _r$5;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.locabs(); name = _tuple[0]; offset = _tuple[1]; abs = _tuple[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		b = (go$sliceType(Go$Uint8)).nil;
		buf = go$makeNativeArray("Uint8", 64, function() { return 0; });
		max = layout.length + 10 >> 0;
		if (max <= 64) {
			b = go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, 0);
		} else {
			b = (go$sliceType(Go$Uint8)).make(0, max, function() { return 0; });
		}
		while (!(layout === "")) {
			_tuple$1 = nextStdChunk(layout); prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];
			if (!(prefix === "")) {
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(prefix)));
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$2 = absDate(abs, true); year = _tuple$2[0]; month = _tuple$2[1]; day = _tuple$2[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$3 = absClock(abs); hour = _tuple$3[0]; min = _tuple$3[1]; sec = _tuple$3[2];
			}
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				y = year;
				if (y < 0) {
					y = -y;
				}
				b = appendUint(b, ((_r = y % 100, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 273) {
				y$1 = year;
				if (year <= -1000) {
					b = go$append(b, 45);
					y$1 = -y$1;
				} else if (year <= -100) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("-0")));
					y$1 = -y$1;
				} else if (year <= -10) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("-00")));
					y$1 = -y$1;
				} else if (year < 0) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("-000")));
					y$1 = -y$1;
				} else if (year < 10) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("000")));
				} else if (year < 100) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("00")));
				} else if (year < 1000) {
					b = go$append(b, 48);
				}
				b = appendUint(b, (y$1 >>> 0), 0);
			} else if (_ref === 258) {
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes((new Month(month)).String().substring(0, 3))));
			} else if (_ref === 257) {
				m = (new Month(month)).String();
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(m)));
			} else if (_ref === 259) {
				b = appendUint(b, (month >>> 0), 0);
			} else if (_ref === 260) {
				b = appendUint(b, (month >>> 0), 48);
			} else if (_ref === 262) {
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes((new Weekday(absWeekday(abs))).String().substring(0, 3))));
			} else if (_ref === 261) {
				s = (new Weekday(absWeekday(abs))).String();
				b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
			} else if (_ref === 263) {
				b = appendUint(b, (day >>> 0), 0);
			} else if (_ref === 264) {
				b = appendUint(b, (day >>> 0), 32);
			} else if (_ref === 265) {
				b = appendUint(b, (day >>> 0), 48);
			} else if (_ref === 522) {
				b = appendUint(b, (hour >>> 0), 48);
			} else if (_ref === 523) {
				hr = (_r$1 = hour % 12, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero"));
				if (hr === 0) {
					hr = 12;
				}
				b = appendUint(b, (hr >>> 0), 0);
			} else if (_ref === 524) {
				hr$1 = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : go$throwRuntimeError("integer divide by zero"));
				if (hr$1 === 0) {
					hr$1 = 12;
				}
				b = appendUint(b, (hr$1 >>> 0), 48);
			} else if (_ref === 525) {
				b = appendUint(b, (min >>> 0), 0);
			} else if (_ref === 526) {
				b = appendUint(b, (min >>> 0), 48);
			} else if (_ref === 527) {
				b = appendUint(b, (sec >>> 0), 0);
			} else if (_ref === 528) {
				b = appendUint(b, (sec >>> 0), 48);
			} else if (_ref === 531) {
				if (hour >= 12) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("PM")));
				} else {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("AM")));
				}
			} else if (_ref === 532) {
				if (hour >= 12) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("pm")));
				} else {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes("am")));
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {
				if ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {
					b = go$append(b, 90);
					break;
				}
				zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
				absoffset = offset;
				if (zone$1 < 0) {
					b = go$append(b, 45);
					zone$1 = -zone$1;
					absoffset = -absoffset;
				} else {
					b = go$append(b, 43);
				}
				b = appendUint(b, ((_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 24) || (std === 29)) {
					b = go$append(b, 58);
				}
				b = appendUint(b, ((_r$3 = zone$1 % 60, _r$3 === _r$3 ? _r$3 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {
					if ((std === 30) || (std === 25)) {
						b = go$append(b, 58);
					}
					b = appendUint(b, ((_r$4 = absoffset % 60, _r$4 === _r$4 ? _r$4 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
				}
			} else if (_ref === 21) {
				if (!(name === "")) {
					b = go$appendSlice(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(name)));
					break;
				}
				zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : go$throwRuntimeError("integer divide by zero"));
				if (zone$2 < 0) {
					b = go$append(b, 45);
					zone$2 = -zone$2;
				} else {
					b = go$append(b, 43);
				}
				b = appendUint(b, ((_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
				b = appendUint(b, ((_r$5 = zone$2 % 60, _r$5 === _r$5 ? _r$5 : go$throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 31 || _ref === 32) {
				b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);
			} }
		}
		return go$bytesToString(b);
	};
	Time.prototype.Format = function(layout) { return this.go$val.Format(layout); };
	quote = function(s) {
		return "\"" + s + "\"";
	};
	ParseError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.go$val.Error(); };
	isDigit = function(s, i) {
		var c;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var x;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), null];
		}
		return [(x = ((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), (((x >>> 16 << 16) * 10 >> 0) + (x << 16 >>> 16) * 10) >> 0) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), null];
	};
	cutspace = function(s) {
		while (s.length > 0 && (s.charCodeAt(0) === 32)) {
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		while (prefix.length > 0) {
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, null];
	};
	Parse = go$pkg.Parse = function(layout, value) {
		return parse(layout, value, go$pkg.UTC, go$pkg.Local);
	};
	parse = function(layout, value, defaultLocation, local) {
		var _tuple, alayout, avalue, rangeErrString, amSet, pmSet, year, month, day, hour, min, sec, nsec, z, zoneOffset, zoneName, err, _tuple$1, prefix, std, suffix, stdstr, _tuple$2, p, _ref, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, _tuple$16, _tuple$17, n, _tuple$18, _tuple$19, _ref$1, _tuple$20, _ref$2, _tuple$21, sign, hour$1, min$1, seconds, _tuple$22, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, hr, mm, ss, _tuple$28, _tuple$29, _tuple$30, x, _ref$3, _tuple$31, n$1, ok, _tuple$32, ndigit, _tuple$33, i, _tuple$34, _struct, _struct$1, t, x$1, x$2, _tuple$35, x$3, name, offset, _struct$2, _struct$3, _struct$4, t$1, _tuple$36, x$4, offset$1, ok$1, x$5, x$6, _struct$5, _tuple$37, _struct$6, _struct$7;
		_tuple = [layout, value]; alayout = _tuple[0]; avalue = _tuple[1];
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = (go$ptrType(Location)).nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = null;
			_tuple$1 = nextStdChunk(layout); prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix); value = _tuple$2[0]; err = _tuple$2[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [new Time.Ptr(new Go$Int64(0, 0), 0, (go$ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.Ptr(new Go$Int64(0, 0), 0, (go$ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tuple$3 = [value.substring(0, 2), value.substring(2)]; p = _tuple$3[0]; value = _tuple$3[1];
				_tuple$4 = atoi(p); year = _tuple$4[0]; err = _tuple$4[1];
				if (year >= 69) {
					year = year + 1900 >> 0;
				} else {
					year = year + 2000 >> 0;
				}
			} else if (_ref === 273) {
				if (value.length < 4 || !isDigit(value, 0)) {
					err = errBad;
					break;
				}
				_tuple$5 = [value.substring(0, 4), value.substring(4)]; p = _tuple$5[0]; value = _tuple$5[1];
				_tuple$6 = atoi(p); year = _tuple$6[0]; err = _tuple$6[1];
			} else if (_ref === 258) {
				_tuple$7 = lookup(shortMonthNames, value); month = _tuple$7[0]; value = _tuple$7[1]; err = _tuple$7[2];
			} else if (_ref === 257) {
				_tuple$8 = lookup(longMonthNames, value); month = _tuple$8[0]; value = _tuple$8[1]; err = _tuple$8[2];
			} else if (_ref === 259 || _ref === 260) {
				_tuple$9 = getnum(value, std === 260); month = _tuple$9[0]; value = _tuple$9[1]; err = _tuple$9[2];
				if (month <= 0 || 12 < month) {
					rangeErrString = "month";
				}
			} else if (_ref === 262) {
				_tuple$10 = lookup(shortDayNames, value); value = _tuple$10[1]; err = _tuple$10[2];
			} else if (_ref === 261) {
				_tuple$11 = lookup(longDayNames, value); value = _tuple$11[1]; err = _tuple$11[2];
			} else if (_ref === 263 || _ref === 264 || _ref === 265) {
				if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
					value = value.substring(1);
				}
				_tuple$12 = getnum(value, std === 265); day = _tuple$12[0]; value = _tuple$12[1]; err = _tuple$12[2];
				if (day < 0 || 31 < day) {
					rangeErrString = "day";
				}
			} else if (_ref === 522) {
				_tuple$13 = getnum(value, false); hour = _tuple$13[0]; value = _tuple$13[1]; err = _tuple$13[2];
				if (hour < 0 || 24 <= hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 523 || _ref === 524) {
				_tuple$14 = getnum(value, std === 524); hour = _tuple$14[0]; value = _tuple$14[1]; err = _tuple$14[2];
				if (hour < 0 || 12 < hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 525 || _ref === 526) {
				_tuple$15 = getnum(value, std === 526); min = _tuple$15[0]; value = _tuple$15[1]; err = _tuple$15[2];
				if (min < 0 || 60 <= min) {
					rangeErrString = "minute";
				}
			} else if (_ref === 527 || _ref === 528) {
				_tuple$16 = getnum(value, std === 528); sec = _tuple$16[0]; value = _tuple$16[1]; err = _tuple$16[2];
				if (sec < 0 || 60 <= sec) {
					rangeErrString = "second";
				}
				if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
					_tuple$17 = nextStdChunk(layout); std = _tuple$17[1];
					std = std & 65535;
					if ((std === 31) || (std === 32)) {
						break;
					}
					n = 2;
					while (n < value.length && isDigit(value, n)) {
						n = n + 1 >> 0;
					}
					_tuple$18 = parseNanoseconds(value, n); nsec = _tuple$18[0]; rangeErrString = _tuple$18[1]; err = _tuple$18[2];
					value = value.substring(n);
				}
			} else if (_ref === 531) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tuple$19 = [value.substring(0, 2), value.substring(2)]; p = _tuple$19[0]; value = _tuple$19[1];
				_ref$1 = p;
				if (_ref$1 === "PM") {
					pmSet = true;
				} else if (_ref$1 === "AM") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 532) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tuple$20 = [value.substring(0, 2), value.substring(2)]; p = _tuple$20[0]; value = _tuple$20[1];
				_ref$2 = p;
				if (_ref$2 === "pm") {
					pmSet = true;
				} else if (_ref$2 === "am") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {
				if (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
					value = value.substring(1);
					z = go$pkg.UTC;
					break;
				}
				_tuple$21 = ["", "", "", ""]; sign = _tuple$21[0]; hour$1 = _tuple$21[1]; min$1 = _tuple$21[2]; seconds = _tuple$21[3];
				if ((std === 24) || (std === 29)) {
					if (value.length < 6) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58))) {
						err = errBad;
						break;
					}
					_tuple$22 = [value.substring(0, 1), value.substring(1, 3), value.substring(4, 6), "00", value.substring(6)]; sign = _tuple$22[0]; hour$1 = _tuple$22[1]; min$1 = _tuple$22[2]; seconds = _tuple$22[3]; value = _tuple$22[4];
				} else if (std === 28) {
					if (value.length < 3) {
						err = errBad;
						break;
					}
					_tuple$23 = [value.substring(0, 1), value.substring(1, 3), "00", "00", value.substring(3)]; sign = _tuple$23[0]; hour$1 = _tuple$23[1]; min$1 = _tuple$23[2]; seconds = _tuple$23[3]; value = _tuple$23[4];
				} else if ((std === 25) || (std === 30)) {
					if (value.length < 9) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
						err = errBad;
						break;
					}
					_tuple$24 = [value.substring(0, 1), value.substring(1, 3), value.substring(4, 6), value.substring(7, 9), value.substring(9)]; sign = _tuple$24[0]; hour$1 = _tuple$24[1]; min$1 = _tuple$24[2]; seconds = _tuple$24[3]; value = _tuple$24[4];
				} else if ((std === 23) || (std === 27)) {
					if (value.length < 7) {
						err = errBad;
						break;
					}
					_tuple$25 = [value.substring(0, 1), value.substring(1, 3), value.substring(3, 5), value.substring(5, 7), value.substring(7)]; sign = _tuple$25[0]; hour$1 = _tuple$25[1]; min$1 = _tuple$25[2]; seconds = _tuple$25[3]; value = _tuple$25[4];
				} else {
					if (value.length < 5) {
						err = errBad;
						break;
					}
					_tuple$26 = [value.substring(0, 1), value.substring(1, 3), value.substring(3, 5), "00", value.substring(5)]; sign = _tuple$26[0]; hour$1 = _tuple$26[1]; min$1 = _tuple$26[2]; seconds = _tuple$26[3]; value = _tuple$26[4];
				}
				_tuple$27 = [0, 0, 0]; hr = _tuple$27[0]; mm = _tuple$27[1]; ss = _tuple$27[2];
				_tuple$28 = atoi(hour$1); hr = _tuple$28[0]; err = _tuple$28[1];
				if (go$interfaceIsEqual(err, null)) {
					_tuple$29 = atoi(min$1); mm = _tuple$29[0]; err = _tuple$29[1];
				}
				if (go$interfaceIsEqual(err, null)) {
					_tuple$30 = atoi(seconds); ss = _tuple$30[0]; err = _tuple$30[1];
				}
				zoneOffset = (x = (((((hr >>> 16 << 16) * 60 >> 0) + (hr << 16 >>> 16) * 60) >> 0) + mm >> 0), (((x >>> 16 << 16) * 60 >> 0) + (x << 16 >>> 16) * 60) >> 0) + ss >> 0;
				_ref$3 = sign.charCodeAt(0);
				if (_ref$3 === 43) {
				} else if (_ref$3 === 45) {
					zoneOffset = -zoneOffset;
				} else {
					err = errBad;
				}
			} else if (_ref === 21) {
				if (value.length >= 3 && value.substring(0, 3) === "UTC") {
					z = go$pkg.UTC;
					value = value.substring(3);
					break;
				}
				_tuple$31 = parseTimeZone(value); n$1 = _tuple$31[0]; ok = _tuple$31[1];
				if (!ok) {
					err = errBad;
					break;
				}
				_tuple$32 = [value.substring(0, n$1), value.substring(n$1)]; zoneName = _tuple$32[0]; value = _tuple$32[1];
			} else if (_ref === 31) {
				ndigit = 1 + ((std >> 16 >> 0)) >> 0;
				if (value.length < ndigit) {
					err = errBad;
					break;
				}
				_tuple$33 = parseNanoseconds(value, ndigit); nsec = _tuple$33[0]; rangeErrString = _tuple$33[1]; err = _tuple$33[2];
				value = value.substring(ndigit);
			} else if (_ref === 32) {
				if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
					break;
				}
				i = 0;
				while (i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57) {
					i = i + 1 >> 0;
				}
				_tuple$34 = parseNanoseconds(value, 1 + i >> 0); nsec = _tuple$34[0]; rangeErrString = _tuple$34[1]; err = _tuple$34[2];
				value = value.substring((1 + i >> 0));
			} }
			if (!(rangeErrString === "")) {
				return [new Time.Ptr(new Go$Int64(0, 0), 0, (go$ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!(go$interfaceIsEqual(err, null))) {
				return [new Time.Ptr(new Go$Int64(0, 0), 0, (go$ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + 12 >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (!(z === (go$ptrType(Location)).nil)) {
			return [(_struct = Date(year, (month >> 0), day, hour, min, sec, nsec, z), new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc)), null];
		}
		if (!((zoneOffset === -1))) {
			t = (_struct$1 = Date(year, (month >> 0), day, hour, min, sec, nsec, go$pkg.UTC), new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
			t.sec = (x$1 = t.sec, x$2 = new Go$Int64(0, zoneOffset), new Go$Int64(x$1.high - x$2.high, x$1.low - x$2.low));
			_tuple$35 = local.lookup((x$3 = t.sec, new Go$Int64(x$3.high + -15, x$3.low + 2288912640))); name = _tuple$35[0]; offset = _tuple$35[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [(_struct$2 = t, new Time.Ptr(_struct$2.sec, _struct$2.nsec, _struct$2.loc)), null];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [(_struct$3 = t, new Time.Ptr(_struct$3.sec, _struct$3.nsec, _struct$3.loc)), null];
		}
		if (!(zoneName === "")) {
			t$1 = (_struct$4 = Date(year, (month >> 0), day, hour, min, sec, nsec, go$pkg.UTC), new Time.Ptr(_struct$4.sec, _struct$4.nsec, _struct$4.loc));
			_tuple$36 = local.lookupName(zoneName, (x$4 = t$1.sec, new Go$Int64(x$4.high + -15, x$4.low + 2288912640))); offset$1 = _tuple$36[0]; ok$1 = _tuple$36[2];
			if (ok$1) {
				t$1.sec = (x$5 = t$1.sec, x$6 = new Go$Int64(0, offset$1), new Go$Int64(x$5.high - x$6.high, x$5.low - x$6.low));
				t$1.loc = local;
				return [(_struct$5 = t$1, new Time.Ptr(_struct$5.sec, _struct$5.nsec, _struct$5.loc)), null];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$37 = atoi(zoneName.substring(3)); offset$1 = _tuple$37[0];
				offset$1 = (((offset$1 >>> 16 << 16) * 3600 >> 0) + (offset$1 << 16 >>> 16) * 3600) >> 0;
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [(_struct$6 = t$1, new Time.Ptr(_struct$6.sec, _struct$6.nsec, _struct$6.loc)), null];
		}
		return [(_struct$7 = Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation), new Time.Ptr(_struct$7.sec, _struct$7.nsec, _struct$7.loc)), null];
	};
	parseTimeZone = function(value) {
		var length, ok, _tuple, _tuple$1, _tuple$2, nUpper, c, _ref, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7;
		length = 0;
		ok = false;
		if (value.length < 3) {
			_tuple = [0, false]; length = _tuple[0]; ok = _tuple[1];
			return [length, ok];
		}
		if (value.length >= 4 && value.substring(0, 4) === "ChST") {
			_tuple$1 = [4, true]; length = _tuple$1[0]; ok = _tuple$1[1];
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tuple$2 = [length, true]; length = _tuple$2[0]; ok = _tuple$2[1];
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (nUpper < 6) {
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + 1 >> 0;
		}
		_ref = nUpper;
		if (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {
			_tuple$3 = [0, false]; length = _tuple$3[0]; ok = _tuple$3[1];
			return [length, ok];
		} else if (_ref === 5) {
			if (value.charCodeAt(4) === 84) {
				_tuple$4 = [5, true]; length = _tuple$4[0]; ok = _tuple$4[1];
				return [length, ok];
			}
		} else if (_ref === 4) {
			if (value.charCodeAt(3) === 84) {
				_tuple$5 = [4, true]; length = _tuple$5[0]; ok = _tuple$5[1];
				return [length, ok];
			}
		} else if (_ref === 3) {
			_tuple$6 = [3, true]; length = _tuple$6[0]; ok = _tuple$6[1];
			return [length, ok];
		}
		_tuple$7 = [0, false]; length = _tuple$7[0]; ok = _tuple$7[1];
		return [length, ok];
	};
	parseGMT = function(value) {
		var sign, _tuple, x, rem, err;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple = leadingInt(value.substring(1)); x = _tuple[0]; rem = _tuple[1]; err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			return 3;
		}
		if (sign === 45) {
			x = new Go$Int64(-x.high, -x.low);
		}
		if ((x.high === 0 && x.low === 0) || (x.high < -1 || (x.high === -1 && x.low < 4294967282)) || (0 < x.high || (0 === x.high && 12 < x.low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var ns, rangeErrString, err, _tuple, scaleDigits, i;
		ns = 0;
		rangeErrString = "";
		err = null;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple = atoi(value.substring(1, nbytes)); ns = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (i < scaleDigits) {
			ns = (((ns >>> 16 << 16) * 10 >> 0) + (ns << 16 >>> 16) * 10) >> 0;
			i = i + 1 >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var x, rem, err, i, c, _tuple, x$1, x$2, x$3, _tuple$1;
		x = new Go$Int64(0, 0);
		rem = "";
		err = null;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.high > 214748364 || (x.high === 214748364 && x.low >= 3435973835))) {
				_tuple = [new Go$Int64(0, 0), "", errLeadingInt]; x = _tuple[0]; rem = _tuple[1]; err = _tuple[2];
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = go$mul64(x, new Go$Int64(0, 10)), x$3 = new Go$Int64(0, c), new Go$Int64(x$2.high + x$3.high, x$2.low + x$3.low)), new Go$Int64(x$1.high - 0, x$1.low - 48));
			i = i + 1 >> 0;
		}
		_tuple$1 = [x, s.substring(i), null]; x = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		return [x, rem, err];
	};
	Time.Ptr.prototype.After = function(u) {
		var _struct, t, x, x$1, x$2, x$3;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, x$1 = u.sec, (x.high > x$1.high || (x.high === x$1.high && x.low > x$1.low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.high === x$3.high && x$2.low === x$3.low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.go$val.After(u); };
	Time.Ptr.prototype.Before = function(u) {
		var _struct, t, x, x$1, x$2, x$3;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, x$1 = u.sec, (x.high < x$1.high || (x.high === x$1.high && x.low < x$1.low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.high === x$3.high && x$2.low === x$3.low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.go$val.Before(u); };
	Time.Ptr.prototype.Equal = function(u) {
		var _struct, t, x, x$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, x$1 = u.sec, (x.high === x$1.high && x.low === x$1.low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.go$val.Equal(u); };
	Month.prototype.String = function() {
		var m;
		m = this.go$val;
		return months[(m - 1 >> 0)];
	};
	go$ptrType(Month).prototype.String = function() { return new Month(this.go$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.go$val;
		return days[d];
	};
	go$ptrType(Weekday).prototype.String = function() { return new Weekday(this.go$get()).String(); };
	Time.Ptr.prototype.IsZero = function() {
		var _struct, t, x;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, (x.high === 0 && x.low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.go$val.IsZero(); };
	Time.Ptr.prototype.abs = function() {
		var _struct, t, l, x, sec, x$1, x$2, x$3, _tuple, offset, x$4, x$5;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		l = t.loc;
		if (l === (go$ptrType(Location)).nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new Go$Int64(x.high + -15, x.low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === (go$ptrType(zone)).nil) && (x$1 = l.cacheStart, (x$1.high < sec.high || (x$1.high === sec.high && x$1.low <= sec.low))) && (x$2 = l.cacheEnd, (sec.high < x$2.high || (sec.high === x$2.high && sec.low < x$2.low)))) {
				sec = (x$3 = new Go$Int64(0, l.cacheZone.offset), new Go$Int64(sec.high + x$3.high, sec.low + x$3.low));
			} else {
				_tuple = l.lookup(sec); offset = _tuple[1];
				sec = (x$4 = new Go$Int64(0, offset), new Go$Int64(sec.high + x$4.high, sec.low + x$4.low));
			}
		}
		return (x$5 = new Go$Int64(sec.high + 2147483646, sec.low + 450480384), new Go$Uint64(x$5.high, x$5.low));
	};
	Time.prototype.abs = function() { return this.go$val.abs(); };
	Time.Ptr.prototype.locabs = function() {
		var name, offset, abs, _struct, t, l, x, sec, x$1, x$2, _tuple, x$3, x$4;
		name = "";
		offset = 0;
		abs = new Go$Uint64(0, 0);
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		l = t.loc;
		if (l === (go$ptrType(Location)).nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new Go$Int64(x.high + -15, x.low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === (go$ptrType(zone)).nil) && (x$1 = l.cacheStart, (x$1.high < sec.high || (x$1.high === sec.high && x$1.low <= sec.low))) && (x$2 = l.cacheEnd, (sec.high < x$2.high || (sec.high === x$2.high && sec.low < x$2.low)))) {
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
			} else {
				_tuple = l.lookup(sec); name = _tuple[0]; offset = _tuple[1];
			}
			sec = (x$3 = new Go$Int64(0, offset), new Go$Int64(sec.high + x$3.high, sec.low + x$3.low));
		} else {
			name = "UTC";
		}
		abs = (x$4 = new Go$Int64(sec.high + 2147483646, sec.low + 450480384), new Go$Uint64(x$4.high, x$4.low));
		return [name, offset, abs];
	};
	Time.prototype.locabs = function() { return this.go$val.locabs(); };
	Time.Ptr.prototype.Date = function() {
		var year, month, day, _struct, t, _tuple;
		year = 0;
		month = 0;
		day = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(true); year = _tuple[0]; month = _tuple[1]; day = _tuple[2];
		return [year, month, day];
	};
	Time.prototype.Date = function() { return this.go$val.Date(); };
	Time.Ptr.prototype.Year = function() {
		var _struct, t, _tuple, year;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(false); year = _tuple[0];
		return year;
	};
	Time.prototype.Year = function() { return this.go$val.Year(); };
	Time.Ptr.prototype.Month = function() {
		var _struct, t, _tuple, month;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(true); month = _tuple[1];
		return month;
	};
	Time.prototype.Month = function() { return this.go$val.Month(); };
	Time.Ptr.prototype.Day = function() {
		var _struct, t, _tuple, day;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(true); day = _tuple[2];
		return day;
	};
	Time.prototype.Day = function() { return this.go$val.Day(); };
	Time.Ptr.prototype.Weekday = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return absWeekday(t.abs());
	};
	Time.prototype.Weekday = function() { return this.go$val.Weekday(); };
	absWeekday = function(abs) {
		var sec, _q;
		sec = go$div64((new Go$Uint64(abs.high + 0, abs.low + 86400)), new Go$Uint64(0, 604800), true);
		return ((_q = (sec.low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.Ptr.prototype.ISOWeek = function() {
		var year, week, _struct, t, _tuple, month, day, yday, _r, wday, _q, _r$1, jan1wday, _r$2, dec31wday;
		year = 0;
		week = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(true); year = _tuple[0]; month = _tuple[1]; day = _tuple[2]; yday = _tuple[3];
		wday = (_r = ((t.Weekday() + 6 >> 0) >> 0) % 7, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$1 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + 1 >> 0;
		}
		if (week === 0) {
			year = year - 1 >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + 1 >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$2 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$2 === _r$2 ? _r$2 : go$throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + 1 >> 0;
				week = 1;
			}
		}
		return [year, week];
	};
	Time.prototype.ISOWeek = function() { return this.go$val.ISOWeek(); };
	Time.Ptr.prototype.Clock = function() {
		var hour, min, sec, _struct, t, _tuple;
		hour = 0;
		min = 0;
		sec = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = absClock(t.abs()); hour = _tuple[0]; min = _tuple[1]; sec = _tuple[2];
		return [hour, min, sec];
	};
	Time.prototype.Clock = function() { return this.go$val.Clock(); };
	absClock = function(abs) {
		var hour, min, sec, _q, _q$1;
		hour = 0;
		min = 0;
		sec = 0;
		sec = (go$div64(abs, new Go$Uint64(0, 86400), true).low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		sec = sec - (((((hour >>> 16 << 16) * 3600 >> 0) + (hour << 16 >>> 16) * 3600) >> 0)) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
		sec = sec - (((((min >>> 16 << 16) * 60 >> 0) + (min << 16 >>> 16) * 60) >> 0)) >> 0;
		return [hour, min, sec];
	};
	Time.Ptr.prototype.Hour = function() {
		var _struct, t, _q;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (_q = (go$div64(t.abs(), new Go$Uint64(0, 86400), true).low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Hour = function() { return this.go$val.Hour(); };
	Time.Ptr.prototype.Minute = function() {
		var _struct, t, _q;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (_q = (go$div64(t.abs(), new Go$Uint64(0, 3600), true).low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Minute = function() { return this.go$val.Minute(); };
	Time.Ptr.prototype.Second = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (go$div64(t.abs(), new Go$Uint64(0, 60), true).low >> 0);
	};
	Time.prototype.Second = function() { return this.go$val.Second(); };
	Time.Ptr.prototype.Nanosecond = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.go$val.Nanosecond(); };
	Time.Ptr.prototype.YearDay = function() {
		var _struct, t, _tuple, yday;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.date(false); yday = _tuple[3];
		return yday + 1 >> 0;
	};
	Time.prototype.YearDay = function() { return this.go$val.YearDay(); };
	Duration.prototype.String = function() {
		var d, buf, w, u, neg, prec, unit, _tuple, _tuple$1;
		d = this;
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		w = 32;
		u = new Go$Uint64(d.high, d.low);
		neg = (d.high < 0 || (d.high === 0 && d.low < 0));
		if (neg) {
			u = new Go$Uint64(-u.high, -u.low);
		}
		if ((u.high < 0 || (u.high === 0 && u.low < 1000000000))) {
			prec = 0;
			unit = 0;
			if ((u.high === 0 && u.low === 0)) {
				return "0";
			} else if ((u.high < 0 || (u.high === 0 && u.low < 1000))) {
				prec = 0;
				unit = 110;
			} else if ((u.high < 0 || (u.high === 0 && u.low < 1000000))) {
				prec = 3;
				unit = 117;
			} else {
				prec = 6;
				unit = 109;
			}
			w = w - 2 >> 0;
			buf[w] = unit;
			buf[w + 1 >> 0] = 115;
			_tuple = fmtFrac(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), u, prec); w = _tuple[0]; u = _tuple[1];
			w = fmtInt(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), u);
		} else {
			w = w - 1 >> 0;
			buf[w] = 115;
			_tuple$1 = fmtFrac(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), u, 9); w = _tuple$1[0]; u = _tuple$1[1];
			w = fmtInt(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), go$div64(u, new Go$Uint64(0, 60), true));
			u = go$div64(u, new Go$Uint64(0, 60), false);
			if ((u.high > 0 || (u.high === 0 && u.low > 0))) {
				w = w - 1 >> 0;
				buf[w] = 109;
				w = fmtInt(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), go$div64(u, new Go$Uint64(0, 60), true));
				u = go$div64(u, new Go$Uint64(0, 60), false);
				if ((u.high > 0 || (u.high === 0 && u.low > 0))) {
					w = w - 1 >> 0;
					buf[w] = 104;
					w = fmtInt(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - 1 >> 0;
			buf[w] = 45;
		}
		return go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(buf), w));
	};
	go$ptrType(Duration).prototype.String = function() { return this.go$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var nw, nv, w, print, i, digit, _slice, _index, _slice$1, _index$1, _tuple;
		nw = 0;
		nv = new Go$Uint64(0, 0);
		w = buf.length;
		print = false;
		i = 0;
		while (i < prec) {
			digit = go$div64(v, new Go$Uint64(0, 10), true);
			print = print || !((digit.high === 0 && digit.low === 0));
			if (print) {
				w = w - 1 >> 0;
				_slice = buf; _index = w;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = (digit.low << 24 >>> 24) + 48 << 24 >>> 24) : go$throwRuntimeError("index out of range");
			}
			v = go$div64(v, new Go$Uint64(0, 10), false);
			i = i + 1 >> 0;
		}
		if (print) {
			w = w - 1 >> 0;
			_slice$1 = buf; _index$1 = w;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 46) : go$throwRuntimeError("index out of range");
		}
		_tuple = [w, v]; nw = _tuple[0]; nv = _tuple[1];
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var w, _slice, _index, _slice$1, _index$1;
		w = buf.length;
		if ((v.high === 0 && v.low === 0)) {
			w = w - 1 >> 0;
			_slice = buf; _index = w;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 48) : go$throwRuntimeError("index out of range");
		} else {
			while ((v.high > 0 || (v.high === 0 && v.low > 0))) {
				w = w - 1 >> 0;
				_slice$1 = buf; _index$1 = w;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (go$div64(v, new Go$Uint64(0, 10), true).low << 24 >>> 24) + 48 << 24 >>> 24) : go$throwRuntimeError("index out of range");
				v = go$div64(v, new Go$Uint64(0, 10), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return new Go$Int64(d.high, d.low);
	};
	go$ptrType(Duration).prototype.Nanoseconds = function() { return this.go$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, sec, nsec;
		d = this;
		sec = go$div64(d, new Duration(0, 1000000000), false);
		nsec = go$div64(d, new Duration(0, 1000000000), true);
		return go$flatten64(sec) + go$flatten64(nsec) * 1e-09;
	};
	go$ptrType(Duration).prototype.Seconds = function() { return this.go$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = go$div64(d, new Duration(13, 4165425152), false);
		nsec = go$div64(d, new Duration(13, 4165425152), true);
		return go$flatten64(min) + go$flatten64(nsec) * 1.6666666666666667e-11;
	};
	go$ptrType(Duration).prototype.Minutes = function() { return this.go$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = go$div64(d, new Duration(838, 817405952), false);
		nsec = go$div64(d, new Duration(838, 817405952), true);
		return go$flatten64(hour) + go$flatten64(nsec) * 2.777777777777778e-13;
	};
	go$ptrType(Duration).prototype.Hours = function() { return this.go$get().Hours(); };
	Time.Ptr.prototype.Add = function(d) {
		var _struct, t, x, x$1, x$2, x$3, nsec, x$4, x$5, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		t.sec = (x = t.sec, x$1 = (x$2 = go$div64(d, new Duration(0, 1000000000), false), new Go$Int64(x$2.high, x$2.low)), new Go$Int64(x.high + x$1.high, x.low + x$1.low));
		nsec = (t.nsec >> 0) + ((x$3 = go$div64(d, new Duration(0, 1000000000), true), x$3.low + ((x$3.high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, new Go$Int64(x$4.high + 0, x$4.low + 1));
			nsec = nsec - 1000000000 >> 0;
		} else if (nsec < 0) {
			t.sec = (x$5 = t.sec, new Go$Int64(x$5.high - 0, x$5.low - 1));
			nsec = nsec + 1000000000 >> 0;
		}
		t.nsec = (nsec >>> 0);
		return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.Add = function(d) { return this.go$val.Add(d); };
	Time.Ptr.prototype.Sub = function(u) {
		var _struct, t, x, x$1, x$2, x$3, x$4, d, _struct$1, _struct$2;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		d = (x = go$mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new Go$Int64(x$2.high - x$3.high, x$2.low - x$3.low)), new Duration(x$1.high, x$1.low)), new Duration(0, 1000000000)), x$4 = new Duration(0, ((t.nsec >> 0) - (u.nsec >> 0) >> 0)), new Duration(x.high + x$4.high, x.low + x$4.low));
		if (u.Add(d).Equal((_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc)))) {
			return d;
		} else if (t.Before((_struct$2 = u, new Time.Ptr(_struct$2.sec, _struct$2.nsec, _struct$2.loc)))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.go$val.Sub(u); };
	Time.Ptr.prototype.AddDate = function(years, months$1, days$1) {
		var _struct, t, _tuple, year, month, day, _tuple$1, hour, min, sec, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.Date(); year = _tuple[0]; month = _tuple[1]; day = _tuple[2];
		_tuple$1 = t.Clock(); hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
		return (_struct$1 = Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc), new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.go$val.AddDate(years, months$1, days$1); };
	Time.Ptr.prototype.date = function(full) {
		var year, month, day, yday, _struct, t, _tuple;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = absDate(t.abs(), full); year = _tuple[0]; month = _tuple[1]; day = _tuple[2]; yday = _tuple[3];
		return [year, month, day, yday];
	};
	Time.prototype.date = function(full) { return this.go$val.date(full); };
	absDate = function(abs, full) {
		var year, month, day, yday, d, n, y, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, _q, end, begin;
		year = 0;
		month = 0;
		day = 0;
		yday = 0;
		d = go$div64(abs, new Go$Uint64(0, 86400), false);
		n = go$div64(d, new Go$Uint64(0, 146097), false);
		y = go$mul64(new Go$Uint64(0, 400), n);
		d = (x = go$mul64(new Go$Uint64(0, 146097), n), new Go$Uint64(d.high - x.high, d.low - x.low));
		n = go$div64(d, new Go$Uint64(0, 36524), false);
		n = (x$1 = go$shiftRightUint64(n, 2), new Go$Uint64(n.high - x$1.high, n.low - x$1.low));
		y = (x$2 = go$mul64(new Go$Uint64(0, 100), n), new Go$Uint64(y.high + x$2.high, y.low + x$2.low));
		d = (x$3 = go$mul64(new Go$Uint64(0, 36524), n), new Go$Uint64(d.high - x$3.high, d.low - x$3.low));
		n = go$div64(d, new Go$Uint64(0, 1461), false);
		y = (x$4 = go$mul64(new Go$Uint64(0, 4), n), new Go$Uint64(y.high + x$4.high, y.low + x$4.low));
		d = (x$5 = go$mul64(new Go$Uint64(0, 1461), n), new Go$Uint64(d.high - x$5.high, d.low - x$5.low));
		n = go$div64(d, new Go$Uint64(0, 365), false);
		n = (x$6 = go$shiftRightUint64(n, 2), new Go$Uint64(n.high - x$6.high, n.low - x$6.low));
		y = (x$7 = n, new Go$Uint64(y.high + x$7.high, y.low + x$7.low));
		d = (x$8 = go$mul64(new Go$Uint64(0, 365), n), new Go$Uint64(d.high - x$8.high, d.low - x$8.low));
		year = ((x$9 = (x$10 = new Go$Int64(y.high, y.low), new Go$Int64(x$10.high + -69, x$10.low + 4075721025)), x$9.low + ((x$9.high >> 31) * 4294967296)) >> 0);
		yday = (d.low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - 1 >> 0;
			} else if (day === 59) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0);
		end = (daysBefore[(month + 1 >> 0)] >> 0);
		begin = 0;
		if (day >= end) {
			month = month + 1 >> 0;
			begin = end;
		} else {
			begin = (daysBefore[month] >> 0);
		}
		month = month + 1 >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	daysIn = function(m, year) {
		if ((m === 2) && isLeap(year)) {
			return 29;
		}
		return ((daysBefore[m] - daysBefore[(m - 1 >> 0)] >> 0) >> 0);
	};
	Now = go$pkg.Now = function() {
		var _tuple, sec, nsec;
		_tuple = now(); sec = _tuple[0]; nsec = _tuple[1];
		return new Time.Ptr(new Go$Int64(sec.high + 14, sec.low + 2006054656), (nsec >>> 0), go$pkg.Local);
	};
	Time.Ptr.prototype.UTC = function() {
		var _struct, t, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		t.loc = go$pkg.UTC;
		return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.UTC = function() { return this.go$val.UTC(); };
	Time.Ptr.prototype.Local = function() {
		var _struct, t, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		t.loc = go$pkg.Local;
		return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.Local = function() { return this.go$val.Local(); };
	Time.Ptr.prototype.In = function(loc) {
		var _struct, t, _struct$1;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		if (loc === (go$ptrType(Location)).nil) {
			throw go$panic(new Go$String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
	};
	Time.prototype.In = function(loc) { return this.go$val.In(loc); };
	Time.Ptr.prototype.Location = function() {
		var _struct, t, l;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		l = t.loc;
		if (l === (go$ptrType(Location)).nil) {
			l = go$pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.go$val.Location(); };
	Time.Ptr.prototype.Zone = function() {
		var name, offset, _struct, t, _tuple, x;
		name = "";
		offset = 0;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		_tuple = t.loc.lookup((x = t.sec, new Go$Int64(x.high + -15, x.low + 2288912640))); name = _tuple[0]; offset = _tuple[1];
		return [name, offset];
	};
	Time.prototype.Zone = function() { return this.go$val.Zone(); };
	Time.Ptr.prototype.Unix = function() {
		var _struct, t, x;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = t.sec, new Go$Int64(x.high + -15, x.low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.go$val.Unix(); };
	Time.Ptr.prototype.UnixNano = function() {
		var _struct, t, x, x$1, x$2, x$3;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return (x = go$mul64(((x$1 = t.sec, new Go$Int64(x$1.high + -15, x$1.low + 2288912640))), new Go$Int64(0, 1000000000)), x$2 = (x$3 = t.nsec, new Go$Int64(0, x$3.constructor === Number ? x$3 : 1)), new Go$Int64(x.high + x$2.high, x.low + x$2.low));
	};
	Time.prototype.UnixNano = function() { return this.go$val.UnixNano(); };
	Time.Ptr.prototype.MarshalBinary = function() {
		var _struct, t, offsetMin, _tuple, offset, _r, _q, enc;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		offsetMin = 0;
		if (t.Location() === utcLoc) {
			offsetMin = -1;
		} else {
			_tuple = t.Zone(); offset = _tuple[1];
			if (!(((_r = offset % 60, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0))) {
				return [(go$sliceType(Go$Uint8)).nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [(go$sliceType(Go$Uint8)).nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		}
		enc = new (go$sliceType(Go$Uint8))([1, (go$shiftRightInt64(t.sec, 56).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 48).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 40).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 32).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 24).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 16).low << 24 >>> 24), (go$shiftRightInt64(t.sec, 8).low << 24 >>> 24), (t.sec.low << 24 >>> 24), ((t.nsec >>> 24 >>> 0) << 24 >>> 24), ((t.nsec >>> 16 >>> 0) << 24 >>> 24), ((t.nsec >>> 8 >>> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, null];
	};
	Time.prototype.MarshalBinary = function() { return this.go$val.MarshalBinary(); };
	Time.Ptr.prototype.UnmarshalBinary = function(data$1) {
		var t, buf, _slice, _index, x, x$1, x$2, x$3, x$4, x$5, x$6, _slice$1, _index$1, x$7, _slice$2, _index$2, x$8, _slice$3, _index$3, x$9, _slice$4, _index$4, x$10, _slice$5, _index$5, x$11, _slice$6, _index$6, x$12, _slice$7, _index$7, x$13, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _slice$11, _index$11, _slice$12, _index$12, x$14, _slice$13, _index$13, _slice$14, _index$14, offset, _tuple, x$15, localoff;
		t = this;
		buf = data$1;
		if (buf.length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!(((_slice = buf, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = go$subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new Go$Int64(0, (_slice$1 = buf, _index$1 = 7, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))), x$7 = go$shiftLeft64(new Go$Int64(0, (_slice$2 = buf, _index$2 = 6, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))), 8), new Go$Int64(x$6.high | x$7.high, (x$6.low | x$7.low) >>> 0)), x$8 = go$shiftLeft64(new Go$Int64(0, (_slice$3 = buf, _index$3 = 5, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))), 16), new Go$Int64(x$5.high | x$8.high, (x$5.low | x$8.low) >>> 0)), x$9 = go$shiftLeft64(new Go$Int64(0, (_slice$4 = buf, _index$4 = 4, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"))), 24), new Go$Int64(x$4.high | x$9.high, (x$4.low | x$9.low) >>> 0)), x$10 = go$shiftLeft64(new Go$Int64(0, (_slice$5 = buf, _index$5 = 3, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"))), 32), new Go$Int64(x$3.high | x$10.high, (x$3.low | x$10.low) >>> 0)), x$11 = go$shiftLeft64(new Go$Int64(0, (_slice$6 = buf, _index$6 = 2, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"))), 40), new Go$Int64(x$2.high | x$11.high, (x$2.low | x$11.low) >>> 0)), x$12 = go$shiftLeft64(new Go$Int64(0, (_slice$7 = buf, _index$7 = 1, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"))), 48), new Go$Int64(x$1.high | x$12.high, (x$1.low | x$12.low) >>> 0)), x$13 = go$shiftLeft64(new Go$Int64(0, (_slice$8 = buf, _index$8 = 0, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"))), 56), new Go$Int64(x.high | x$13.high, (x.low | x$13.low) >>> 0));
		buf = go$subslice(buf, 8);
		t.nsec = ((((((_slice$9 = buf, _index$9 = 3, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")) >> 0) | (((_slice$10 = buf, _index$10 = 2, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")) >> 0) << 8 >> 0)) | (((_slice$11 = buf, _index$11 = 1, (_index$11 >= 0 && _index$11 < _slice$11.length) ? _slice$11.array[_slice$11.offset + _index$11] : go$throwRuntimeError("index out of range")) >> 0) << 16 >> 0)) | (((_slice$12 = buf, _index$12 = 0, (_index$12 >= 0 && _index$12 < _slice$12.length) ? _slice$12.array[_slice$12.offset + _index$12] : go$throwRuntimeError("index out of range")) >> 0) << 24 >> 0)) >>> 0);
		buf = go$subslice(buf, 4);
		offset = (x$14 = ((((_slice$13 = buf, _index$13 = 1, (_index$13 >= 0 && _index$13 < _slice$13.length) ? _slice$13.array[_slice$13.offset + _index$13] : go$throwRuntimeError("index out of range")) << 16 >> 16) | (((_slice$14 = buf, _index$14 = 0, (_index$14 >= 0 && _index$14 < _slice$14.length) ? _slice$14.array[_slice$14.offset + _index$14] : go$throwRuntimeError("index out of range")) << 16 >> 16) << 8 << 16 >> 16)) >> 0), (((x$14 >>> 16 << 16) * 60 >> 0) + (x$14 << 16 >>> 16) * 60) >> 0);
		if (offset === -60) {
			t.loc = utcLoc;
		} else {
			_tuple = go$pkg.Local.lookup((x$15 = t.sec, new Go$Int64(x$15.high + -15, x$15.low + 2288912640))); localoff = _tuple[1];
			if (offset === localoff) {
				t.loc = go$pkg.Local;
			} else {
				t.loc = FixedZone("", offset);
			}
		}
		return null;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.go$val.UnmarshalBinary(data$1); };
	Time.Ptr.prototype.GobEncode = function() {
		var _struct, t;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		return t.MarshalBinary();
	};
	Time.prototype.GobEncode = function() { return this.go$val.GobEncode(); };
	Time.Ptr.prototype.GobDecode = function(data$1) {
		var t;
		t = this;
		return t.UnmarshalBinary(data$1);
	};
	Time.prototype.GobDecode = function(data$1) { return this.go$val.GobDecode(data$1); };
	Time.Ptr.prototype.MarshalJSON = function() {
		var _struct, t, y;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [(go$sliceType(Go$Uint8)).nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		return [new (go$sliceType(Go$Uint8))(go$stringToBytes(t.Format("\"2006-01-02T15:04:05.999999999Z07:00\""))), null];
	};
	Time.prototype.MarshalJSON = function() { return this.go$val.MarshalJSON(); };
	Time.Ptr.prototype.UnmarshalJSON = function(data$1) {
		var err, t, _tuple, _struct, l, r;
		err = null;
		t = this;
		_tuple = Parse("\"2006-01-02T15:04:05Z07:00\"", go$bytesToString(data$1)); l = t; r = (_struct = _tuple[0], new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc)); l.sec = r.sec; l.nsec = r.nsec; l.loc = r.loc; err = _tuple[1];
		return err;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.go$val.UnmarshalJSON(data$1); };
	Time.Ptr.prototype.MarshalText = function() {
		var _struct, t, y;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [(go$sliceType(Go$Uint8)).nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		return [new (go$sliceType(Go$Uint8))(go$stringToBytes(t.Format("2006-01-02T15:04:05.999999999Z07:00"))), null];
	};
	Time.prototype.MarshalText = function() { return this.go$val.MarshalText(); };
	Time.Ptr.prototype.UnmarshalText = function(data$1) {
		var err, t, _tuple, _struct, l, r;
		err = null;
		t = this;
		_tuple = Parse("2006-01-02T15:04:05Z07:00", go$bytesToString(data$1)); l = t; r = (_struct = _tuple[0], new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc)); l.sec = r.sec; l.nsec = r.nsec; l.loc = r.loc; err = _tuple[1];
		return err;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.go$val.UnmarshalText(data$1); };
	Unix = go$pkg.Unix = function(sec, nsec) {
		var n, x, x$1;
		if ((nsec.high < 0 || (nsec.high === 0 && nsec.low < 0)) || (nsec.high > 0 || (nsec.high === 0 && nsec.low >= 1000000000))) {
			n = go$div64(nsec, new Go$Int64(0, 1000000000), false);
			sec = (x = n, new Go$Int64(sec.high + x.high, sec.low + x.low));
			nsec = (x$1 = go$mul64(n, new Go$Int64(0, 1000000000)), new Go$Int64(nsec.high - x$1.high, nsec.low - x$1.low));
			if ((nsec.high < 0 || (nsec.high === 0 && nsec.low < 0))) {
				nsec = new Go$Int64(nsec.high + 0, nsec.low + 1000000000);
				sec = new Go$Int64(sec.high - 0, sec.low - 1);
			}
		}
		return new Time.Ptr(new Go$Int64(sec.high + 14, sec.low + 2006054656), (nsec.low >>> 0), go$pkg.Local);
	};
	isLeap = function(year) {
		var _r, _r$1, _r$2;
		return ((_r = year % 4, _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : go$throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var nhi, nlo, _q, n, _q$1, n$1, _tuple;
		nhi = 0;
		nlo = 0;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (((((n >>> 16 << 16) * base >> 0) + (n << 16 >>> 16) * base) >> 0)) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (((((n$1 >>> 16 << 16) * base >> 0) + (n$1 << 16 >>> 16) * base) >> 0)) >> 0;
		}
		_tuple = [hi, lo]; nhi = _tuple[0]; nlo = _tuple[1];
		return [nhi, nlo];
	};
	Date = go$pkg.Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var m, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, x, x$1, y, n, x$2, d, x$3, x$4, x$5, x$6, x$7, x$8, x$9, abs, x$10, x$11, unix, _tuple$5, offset, start, end, x$12, utc, _tuple$6, _tuple$7, x$13;
		if (loc === (go$ptrType(Location)).nil) {
			throw go$panic(new Go$String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple = norm(year, m, 12); year = _tuple[0]; m = _tuple[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$1 = norm(sec, nsec, 1000000000); sec = _tuple$1[0]; nsec = _tuple$1[1];
		_tuple$2 = norm(min, sec, 60); min = _tuple$2[0]; sec = _tuple$2[1];
		_tuple$3 = norm(hour, min, 60); hour = _tuple$3[0]; min = _tuple$3[1];
		_tuple$4 = norm(day, hour, 24); day = _tuple$4[0]; hour = _tuple$4[1];
		y = (x = (x$1 = new Go$Int64(0, year), new Go$Int64(x$1.high - -69, x$1.low - 4075721025)), new Go$Uint64(x.high, x.low));
		n = go$div64(y, new Go$Uint64(0, 400), false);
		y = (x$2 = go$mul64(new Go$Uint64(0, 400), n), new Go$Uint64(y.high - x$2.high, y.low - x$2.low));
		d = go$mul64(new Go$Uint64(0, 146097), n);
		n = go$div64(y, new Go$Uint64(0, 100), false);
		y = (x$3 = go$mul64(new Go$Uint64(0, 100), n), new Go$Uint64(y.high - x$3.high, y.low - x$3.low));
		d = (x$4 = go$mul64(new Go$Uint64(0, 36524), n), new Go$Uint64(d.high + x$4.high, d.low + x$4.low));
		n = go$div64(y, new Go$Uint64(0, 4), false);
		y = (x$5 = go$mul64(new Go$Uint64(0, 4), n), new Go$Uint64(y.high - x$5.high, y.low - x$5.low));
		d = (x$6 = go$mul64(new Go$Uint64(0, 1461), n), new Go$Uint64(d.high + x$6.high, d.low + x$6.low));
		n = y;
		d = (x$7 = go$mul64(new Go$Uint64(0, 365), n), new Go$Uint64(d.high + x$7.high, d.low + x$7.low));
		d = (x$8 = new Go$Uint64(0, daysBefore[(month - 1 >> 0)]), new Go$Uint64(d.high + x$8.high, d.low + x$8.low));
		if (isLeap(year) && month >= 3) {
			d = new Go$Uint64(d.high + 0, d.low + 1);
		}
		d = (x$9 = new Go$Uint64(0, (day - 1 >> 0)), new Go$Uint64(d.high + x$9.high, d.low + x$9.low));
		abs = go$mul64(d, new Go$Uint64(0, 86400));
		abs = (x$10 = new Go$Uint64(0, ((((((hour >>> 16 << 16) * 3600 >> 0) + (hour << 16 >>> 16) * 3600) >> 0) + ((((min >>> 16 << 16) * 60 >> 0) + (min << 16 >>> 16) * 60) >> 0) >> 0) + sec >> 0)), new Go$Uint64(abs.high + x$10.high, abs.low + x$10.low));
		unix = (x$11 = new Go$Int64(abs.high, abs.low), new Go$Int64(x$11.high + -2147483647, x$11.low + 3844486912));
		_tuple$5 = loc.lookup(unix); offset = _tuple$5[1]; start = _tuple$5[3]; end = _tuple$5[4];
		if (!((offset === 0))) {
			utc = (x$12 = new Go$Int64(0, offset), new Go$Int64(unix.high - x$12.high, unix.low - x$12.low));
			if ((utc.high < start.high || (utc.high === start.high && utc.low < start.low))) {
				_tuple$6 = loc.lookup(new Go$Int64(start.high - 0, start.low - 1)); offset = _tuple$6[1];
			} else if ((utc.high > end.high || (utc.high === end.high && utc.low >= end.low))) {
				_tuple$7 = loc.lookup(end); offset = _tuple$7[1];
			}
			unix = (x$13 = new Go$Int64(0, offset), new Go$Int64(unix.high - x$13.high, unix.low - x$13.low));
		}
		return new Time.Ptr(new Go$Int64(unix.high + 14, unix.low + 2006054656), (nsec >>> 0), loc);
	};
	Time.Ptr.prototype.Truncate = function(d) {
		var _struct, t, _struct$1, _tuple, _struct$2, r, _struct$3;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		if ((d.high < 0 || (d.high === 0 && d.low <= 0))) {
			return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
		}
		_tuple = div((_struct$2 = t, new Time.Ptr(_struct$2.sec, _struct$2.nsec, _struct$2.loc)), d); r = _tuple[1];
		return (_struct$3 = t.Add(new Duration(-r.high, -r.low)), new Time.Ptr(_struct$3.sec, _struct$3.nsec, _struct$3.loc));
	};
	Time.prototype.Truncate = function(d) { return this.go$val.Truncate(d); };
	Time.Ptr.prototype.Round = function(d) {
		var _struct, t, _struct$1, _tuple, _struct$2, r, x, _struct$3, _struct$4;
		t = (_struct = this, new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		if ((d.high < 0 || (d.high === 0 && d.low <= 0))) {
			return (_struct$1 = t, new Time.Ptr(_struct$1.sec, _struct$1.nsec, _struct$1.loc));
		}
		_tuple = div((_struct$2 = t, new Time.Ptr(_struct$2.sec, _struct$2.nsec, _struct$2.loc)), d); r = _tuple[1];
		if ((x = new Duration(r.high + r.high, r.low + r.low), (x.high < d.high || (x.high === d.high && x.low < d.low)))) {
			return (_struct$3 = t.Add(new Duration(-r.high, -r.low)), new Time.Ptr(_struct$3.sec, _struct$3.nsec, _struct$3.loc));
		}
		return (_struct$4 = t.Add(new Duration(d.high - r.high, d.low - r.low)), new Time.Ptr(_struct$4.sec, _struct$4.nsec, _struct$4.loc));
	};
	Time.prototype.Round = function(d) { return this.go$val.Round(d); };
	div = function(t, d) {
		var qmod2, r, neg, nsec, x, x$1, x$2, x$3, x$4, _q, _r, x$5, d1, x$6, x$7, x$8, x$9, x$10, sec, tmp, u1, u0, _tuple, u0x, x$11, _tuple$1, d1$1, x$12, d0, _tuple$2, x$13, x$14, x$15;
		qmod2 = 0;
		r = new Duration(0, 0);
		neg = false;
		nsec = (t.nsec >> 0);
		if ((x = t.sec, (x.high < 0 || (x.high === 0 && x.low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new Go$Int64(-x$1.high, -x$1.low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + 1000000000 >> 0;
				t.sec = (x$2 = t.sec, new Go$Int64(x$2.high - 0, x$2.low - 1));
			}
		}
		if ((d.high < 0 || (d.high === 0 && d.low < 1000000000)) && (x$3 = go$div64(new Duration(0, 1000000000), (new Duration(d.high + d.high, d.low + d.low)), true), (x$3.high === 0 && x$3.low === 0))) {
			qmod2 = ((_q = nsec / ((d.low + ((d.high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r = nsec % ((d.low + ((d.high >> 31) * 4294967296)) >> 0), _r === _r ? _r : go$throwRuntimeError("integer divide by zero")));
		} else if ((x$4 = go$div64(d, new Duration(0, 1000000000), true), (x$4.high === 0 && x$4.low === 0))) {
			d1 = (x$5 = go$div64(d, new Duration(0, 1000000000), false), new Go$Int64(x$5.high, x$5.low));
			qmod2 = ((x$6 = go$div64(t.sec, d1, false), x$6.low + ((x$6.high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$7 = go$mul64((x$8 = go$div64(t.sec, d1, true), new Duration(x$8.high, x$8.low)), new Duration(0, 1000000000)), x$9 = new Duration(0, nsec), new Duration(x$7.high + x$9.high, x$7.low + x$9.low));
		} else {
			sec = (x$10 = t.sec, new Go$Uint64(x$10.high, x$10.low));
			tmp = go$mul64((go$shiftRightUint64(sec, 32)), new Go$Uint64(0, 1000000000));
			u1 = go$shiftRightUint64(tmp, 32);
			u0 = go$shiftLeft64(tmp, 32);
			tmp = go$mul64(new Go$Uint64(sec.high & 0, (sec.low & 4294967295) >>> 0), new Go$Uint64(0, 1000000000));
			_tuple = [u0, new Go$Uint64(u0.high + tmp.high, u0.low + tmp.low)]; u0x = _tuple[0]; u0 = _tuple[1];
			if ((u0.high < u0x.high || (u0.high === u0x.high && u0.low < u0x.low))) {
				u1 = new Go$Uint64(u1.high + 0, u1.low + 1);
			}
			_tuple$1 = [u0, (x$11 = new Go$Uint64(0, nsec), new Go$Uint64(u0.high + x$11.high, u0.low + x$11.low))]; u0x = _tuple$1[0]; u0 = _tuple$1[1];
			if ((u0.high < u0x.high || (u0.high === u0x.high && u0.low < u0x.low))) {
				u1 = new Go$Uint64(u1.high + 0, u1.low + 1);
			}
			d1$1 = new Go$Uint64(d.high, d.low);
			while (!((x$12 = go$shiftRightUint64(d1$1, 63), (x$12.high === 0 && x$12.low === 1)))) {
				d1$1 = go$shiftLeft64(d1$1, 1);
			}
			d0 = new Go$Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.high > d1$1.high || (u1.high === d1$1.high && u1.low > d1$1.low)) || (u1.high === d1$1.high && u1.low === d1$1.low) && (u0.high > d0.high || (u0.high === d0.high && u0.low >= d0.low))) {
					qmod2 = 1;
					_tuple$2 = [u0, new Go$Uint64(u0.high - d0.high, u0.low - d0.low)]; u0x = _tuple$2[0]; u0 = _tuple$2[1];
					if ((u0.high > u0x.high || (u0.high === u0x.high && u0.low > u0x.low))) {
						u1 = new Go$Uint64(u1.high - 0, u1.low - 1);
					}
					u1 = (x$13 = d1$1, new Go$Uint64(u1.high - x$13.high, u1.low - x$13.low));
				}
				if ((d1$1.high === 0 && d1$1.low === 0) && (x$14 = new Go$Uint64(d.high, d.low), (d0.high === x$14.high && d0.low === x$14.low))) {
					break;
				}
				d0 = go$shiftRightUint64(d0, 1);
				d0 = (x$15 = go$shiftLeft64((new Go$Uint64(d1$1.high & 0, (d1$1.low & 1) >>> 0)), 63), new Go$Uint64(d0.high | x$15.high, (d0.low | x$15.low) >>> 0));
				d1$1 = go$shiftRightUint64(d1$1, 1);
			}
			r = new Duration(u0.high, u0.low);
		}
		if (neg && !((r.high === 0 && r.low === 0))) {
			qmod2 = (qmod2 ^ 1) >> 0;
			r = new Duration(d.high - r.high, d.low - r.low);
		}
		return [qmod2, r];
	};
	Location.Ptr.prototype.get = function() {
		var l;
		l = this;
		if (l === (go$ptrType(Location)).nil) {
			return utcLoc;
		}
		if (l === localLoc) {
			localOnce.Do(initLocal);
		}
		return l;
	};
	Location.prototype.get = function() { return this.go$val.get(); };
	Location.Ptr.prototype.String = function() {
		var l;
		l = this;
		return l.get().name;
	};
	Location.prototype.String = function() { return this.go$val.String(); };
	FixedZone = go$pkg.FixedZone = function(name, offset) {
		var l, _slice, _index;
		l = new Location.Ptr(name, new (go$sliceType(zone))([new zone.Ptr(name, offset, false)]), new (go$sliceType(zoneTrans))([new zoneTrans.Ptr(new Go$Int64(-2147483648, 0), 0, false, false)]), new Go$Int64(-2147483648, 0), new Go$Int64(2147483647, 4294967295), (go$ptrType(zone)).nil);
		l.cacheZone = (_slice = l.zone, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		return l;
	};
	Location.Ptr.prototype.lookup = function(sec) {
		var name, offset, isDST, start, end, l, zone$1, x, x$1, tx, lo, hi, _q, m, _slice, _index, lim, _slice$1, _index$1, _slice$2, _index$2, zone$2, _slice$3, _index$3;
		name = "";
		offset = 0;
		isDST = false;
		start = new Go$Int64(0, 0);
		end = new Go$Int64(0, 0);
		l = this;
		l = l.get();
		if (l.tx.length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new Go$Int64(-2147483648, 0);
			end = new Go$Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === (go$ptrType(zone)).nil) && (x = l.cacheStart, (x.high < sec.high || (x.high === sec.high && x.low <= sec.low))) && (x$1 = l.cacheEnd, (sec.high < x$1.high || (sec.high === x$1.high && sec.low < x$1.low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new Go$Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.length;
		while ((hi - lo >> 0) > 1) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			lim = (_slice = tx, _index = m, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).when;
			if ((sec.high < lim.high || (sec.high === lim.high && sec.low < lim.low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$2 = (_slice$1 = l.zone, _index$1 = (_slice$2 = tx, _index$2 = lo, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).index, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		name = zone$2.name;
		offset = zone$2.offset;
		isDST = zone$2.isDST;
		start = (_slice$3 = tx, _index$3 = lo, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).when;
		return [name, offset, isDST, start, end];
	};
	Location.prototype.lookup = function(sec) { return this.go$val.lookup(sec); };
	Location.Ptr.prototype.lookupName = function(name, unix) {
		var offset, isDST, ok, l, _ref, _i, i, _slice, _index, zone$1, _tuple, x, nam, offset$1, isDST$1, _tuple$1, _ref$1, _i$1, i$1, _slice$1, _index$1, zone$2, _tuple$2;
		offset = 0;
		isDST = false;
		ok = false;
		l = this;
		l = l.get();
		_ref = l.zone;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			zone$1 = (_slice = l.zone, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (zone$1.name === name) {
				_tuple = l.lookup((x = new Go$Int64(0, zone$1.offset), new Go$Int64(unix.high - x.high, unix.low - x.low))); nam = _tuple[0]; offset$1 = _tuple[1]; isDST$1 = _tuple[2];
				if (nam === zone$1.name) {
					_tuple$1 = [offset$1, isDST$1, true]; offset = _tuple$1[0]; isDST = _tuple$1[1]; ok = _tuple$1[2];
					return [offset, isDST, ok];
				}
			}
			_i++;
		}
		_ref$1 = l.zone;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			i$1 = _i$1;
			zone$2 = (_slice$1 = l.zone, _index$1 = i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (zone$2.name === name) {
				_tuple$2 = [zone$2.offset, zone$2.isDST, true]; offset = _tuple$2[0]; isDST = _tuple$2[1]; ok = _tuple$2[2];
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
	};
	Location.prototype.lookupName = function(name, unix) { return this.go$val.lookupName(name, unix); };
	getKeyValue = function(kh, kname) {
		var buf, typ, n, _tuple, p, v, v$1, err;
		buf = go$makeNativeArray("Uint16", 50, function() { return 0; });
		typ = 0;
		n = 100;
		_tuple = syscall.UTF16PtrFromString(kname); p = _tuple[0];
		err = syscall.RegQueryValueEx(kh, p, (go$ptrType(Go$Uint32)).nil, new (go$ptrType(Go$Uint32))(function() { return typ; }, function(v) { typ = v;; }), go$sliceToArray(new (go$sliceType(Go$Uint8))(buf)), new (go$ptrType(Go$Uint32))(function() { return n; }, function(v$1) { n = v$1;; }));
		if (!(go$interfaceIsEqual(err, null))) {
			return ["", err];
		}
		if (!((typ === 1))) {
			return ["", errors.New("Key is not string")];
		}
		return [syscall.UTF16ToString(new (go$sliceType(Go$Uint16))(buf)), null];
	};
	matchZoneKey = function(zones, kname, stdname, dstname) {
		var matched, err2, h, _tuple, p, v, err, _tuple$1, _tuple$2, s, err$1, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8;
		matched = false;
		err2 = null;
		var go$deferred = [];
		try {
			h = 0;
			_tuple = syscall.UTF16PtrFromString(kname); p = _tuple[0];
			err = syscall.RegOpenKeyEx(zones, p, 0, 131097, new (go$ptrType(syscall.Handle))(function() { return h; }, function(v) { h = v;; }));
			if (!(go$interfaceIsEqual(err, null))) {
				_tuple$1 = [false, err]; matched = _tuple$1[0]; err2 = _tuple$1[1];
				return [matched, err2];
			}
			go$deferred.push({ recv: syscall, method: "RegCloseKey", args: [h] });
			_tuple$2 = getKeyValue(h, "Std"); s = _tuple$2[0]; err$1 = _tuple$2[1];
			if (!(go$interfaceIsEqual(err$1, null))) {
				_tuple$3 = [false, err$1]; matched = _tuple$3[0]; err2 = _tuple$3[1];
				return [matched, err2];
			}
			if (!(s === stdname)) {
				_tuple$4 = [false, null]; matched = _tuple$4[0]; err2 = _tuple$4[1];
				return [matched, err2];
			}
			_tuple$5 = getKeyValue(h, "Dlt"); s = _tuple$5[0]; err$1 = _tuple$5[1];
			if (!(go$interfaceIsEqual(err$1, null))) {
				_tuple$6 = [false, err$1]; matched = _tuple$6[0]; err2 = _tuple$6[1];
				return [matched, err2];
			}
			if (!(s === dstname)) {
				_tuple$7 = [false, null]; matched = _tuple$7[0]; err2 = _tuple$7[1];
				return [matched, err2];
			}
			_tuple$8 = [true, null]; matched = _tuple$8[0]; err2 = _tuple$8[1];
			return [matched, err2];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [matched, err2];
		}
	};
	toEnglishName = function(stdname, dstname) {
		var zones, _tuple, p, v, err, count, v$1, err$1, buf, i, n, v$2, v$3, kname, _tuple$1, matched, err$2;
		var go$deferred = [];
		try {
			zones = 0;
			_tuple = syscall.UTF16PtrFromString("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones"); p = _tuple[0];
			err = syscall.RegOpenKeyEx(2147483650, p, 0, 131097, new (go$ptrType(syscall.Handle))(function() { return zones; }, function(v) { zones = v;; }));
			if (!(go$interfaceIsEqual(err, null))) {
				return ["", err];
			}
			go$deferred.push({ recv: syscall, method: "RegCloseKey", args: [zones] });
			count = 0;
			err$1 = syscall.RegQueryInfoKey(zones, (go$ptrType(Go$Uint16)).nil, (go$ptrType(Go$Uint32)).nil, (go$ptrType(Go$Uint32)).nil, new (go$ptrType(Go$Uint32))(function() { return count; }, function(v$1) { count = v$1;; }), (go$ptrType(Go$Uint32)).nil, (go$ptrType(Go$Uint32)).nil, (go$ptrType(Go$Uint32)).nil, (go$ptrType(Go$Uint32)).nil, (go$ptrType(Go$Uint32)).nil, (go$ptrType(Go$Uint32)).nil, (go$ptrType(syscall.Filetime)).nil);
			if (!(go$interfaceIsEqual(err$1, null))) {
				return ["", err$1];
			}
			buf = go$makeNativeArray("Uint16", 50, function() { return 0; });
			i = 0;
			while (i < count) {
				n = [undefined];
				n[0] = 50;
				if (!(go$interfaceIsEqual(syscall.RegEnumKeyEx(zones, i, (function(n) { return new (go$ptrType(Go$Uint16))(function() { return buf[0]; }, function(v$2) { buf[0] = v$2;; }); })(n), (function(n) { return new (go$ptrType(Go$Uint32))(function() { return n[0]; }, function(v$3) { n[0] = v$3;; }); })(n), (go$ptrType(Go$Uint32)).nil, (go$ptrType(Go$Uint16)).nil, (go$ptrType(Go$Uint32)).nil, (go$ptrType(syscall.Filetime)).nil), null))) {
					i = i + 1 >>> 0;
					continue;
				}
				kname = syscall.UTF16ToString(new (go$sliceType(Go$Uint16))(buf));
				_tuple$1 = matchZoneKey(zones, kname, stdname, dstname); matched = _tuple$1[0]; err$2 = _tuple$1[1];
				if (go$interfaceIsEqual(err$2, null) && matched) {
					return [kname, null];
				}
				i = i + 1 >>> 0;
			}
			return ["", errors.New("English name for time zone \"" + stdname + "\" not found in registry")];
		} catch(go$err) {
			go$pushErr(go$err);
			return ["", null];
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	extractCAPS = function(desc) {
		var short$1, _ref, _i, _rune, c;
		short$1 = (go$sliceType(Go$Int32)).nil;
		_ref = desc;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			if (65 <= c && c <= 90) {
				short$1 = go$append(short$1, c);
			}
			_i += _rune[1];
		}
		return go$runesToString(short$1);
	};
	abbrev = function(z) {
		var std, dst, stdName, _tuple, _entry, _struct, a, ok, dstName, _tuple$1, englishName, err, _tuple$2, _entry$1, _struct$1, _tuple$3, _tuple$4, _tuple$5;
		std = "";
		dst = "";
		stdName = syscall.UTF16ToString(new (go$sliceType(Go$Uint16))(z.StandardName));
		_tuple = (_entry = abbrs[stdName], _entry !== undefined ? [_entry.v, true] : [new abbr.Ptr(), false]); a = (_struct = _tuple[0], new abbr.Ptr(_struct.std, _struct.dst)); ok = _tuple[1];
		if (!ok) {
			dstName = syscall.UTF16ToString(new (go$sliceType(Go$Uint16))(z.DaylightName));
			_tuple$1 = toEnglishName(stdName, dstName); englishName = _tuple$1[0]; err = _tuple$1[1];
			if (go$interfaceIsEqual(err, null)) {
				_tuple$2 = (_entry$1 = abbrs[englishName], _entry$1 !== undefined ? [_entry$1.v, true] : [new abbr.Ptr(), false]); a = (_struct$1 = _tuple$2[0], new abbr.Ptr(_struct$1.std, _struct$1.dst)); ok = _tuple$2[1];
				if (ok) {
					_tuple$3 = [a.std, a.dst]; std = _tuple$3[0]; dst = _tuple$3[1];
					return [std, dst];
				}
			}
			_tuple$4 = [extractCAPS(stdName), extractCAPS(dstName)]; std = _tuple$4[0]; dst = _tuple$4[1];
			return [std, dst];
		}
		_tuple$5 = [a.std, a.dst]; std = _tuple$5[0]; dst = _tuple$5[1];
		return [std, dst];
	};
	pseudoUnix = function(year, d) {
		var day, _struct, t, i, week, x, x$1, x$2;
		day = 1;
		t = (_struct = Date(year, (d.Month >> 0), day, (d.Hour >> 0), (d.Minute >> 0), (d.Second >> 0), 0, go$pkg.UTC), new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		i = (d.DayOfWeek >> 0) - (t.Weekday() >> 0) >> 0;
		if (i < 0) {
			i = i + 7 >> 0;
		}
		day = day + (i) >> 0;
		week = (d.Day >> 0) - 1 >> 0;
		if (week < 4) {
			day = day + (((((week >>> 16 << 16) * 7 >> 0) + (week << 16 >>> 16) * 7) >> 0)) >> 0;
		} else {
			day = day + 28 >> 0;
			if (day > daysIn((d.Month >> 0), year)) {
				day = day - 7 >> 0;
			}
		}
		return (x = (x$1 = t.sec, x$2 = go$mul64(new Go$Int64(0, (day - 1 >> 0)), new Go$Int64(0, 86400)), new Go$Int64(x$1.high + x$2.high, x$1.low + x$2.low)), new Go$Int64(x.high + -15, x.low + 2288912640));
	};
	initLocalFromTZI = function(i) {
		var l, nzone, _tuple, stdname, dstname, _slice, _index, std, x, _slice$1, _index$1, _slice$2, _index$2, x$1, _slice$3, _index$3, dst, x$2, d0, d1, i0, i1, _tuple$1, _tuple$2, _struct, t, year, txi, y, _slice$4, _index$4, tx, x$3, x$4, _slice$5, _index$5, _slice$6, _index$6, x$5, x$6, _slice$7, _index$7;
		l = localLoc;
		nzone = 1;
		if (i.StandardDate.Month > 0) {
			nzone = nzone + 1 >> 0;
		}
		l.zone = (go$sliceType(zone)).make(nzone, 0, function() { return new zone.Ptr(); });
		_tuple = abbrev(i); stdname = _tuple[0]; dstname = _tuple[1];
		std = (_slice = l.zone, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		std.name = stdname;
		if (nzone === 1) {
			std.offset = (x = -(i.Bias >> 0), (((x >>> 16 << 16) * 60 >> 0) + (x << 16 >>> 16) * 60) >> 0);
			l.cacheStart = new Go$Int64(-2147483648, 0);
			l.cacheEnd = new Go$Int64(2147483647, 4294967295);
			l.cacheZone = std;
			l.tx = (go$sliceType(zoneTrans)).make(1, 0, function() { return new zoneTrans.Ptr(); });
			(_slice$1 = l.tx, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).when = l.cacheStart;
			(_slice$2 = l.tx, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).index = 0;
			return;
		}
		std.offset = (x$1 = -((i.Bias + i.StandardBias >> 0) >> 0), (((x$1 >>> 16 << 16) * 60 >> 0) + (x$1 << 16 >>> 16) * 60) >> 0);
		dst = (_slice$3 = l.zone, _index$3 = 1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
		dst.name = dstname;
		dst.offset = (x$2 = -((i.Bias + i.DaylightBias >> 0) >> 0), (((x$2 >>> 16 << 16) * 60 >> 0) + (x$2 << 16 >>> 16) * 60) >> 0);
		dst.isDST = true;
		d0 = i.StandardDate;
		d1 = i.DaylightDate;
		i0 = 0;
		i1 = 1;
		if (d0.Month > d1.Month) {
			_tuple$1 = [d1, d0]; d0 = _tuple$1[0]; d1 = _tuple$1[1];
			_tuple$2 = [i1, i0]; i0 = _tuple$2[0]; i1 = _tuple$2[1];
		}
		l.tx = (go$sliceType(zoneTrans)).make(400, 0, function() { return new zoneTrans.Ptr(); });
		t = (_struct = Now().UTC(), new Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
		year = t.Year();
		txi = 0;
		y = year - 100 >> 0;
		while (y < (year + 100 >> 0)) {
			tx = (_slice$4 = l.tx, _index$4 = txi, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
			tx.when = (x$3 = pseudoUnix(y, d0), x$4 = new Go$Int64(0, (_slice$5 = l.zone, _index$5 = i1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")).offset), new Go$Int64(x$3.high - x$4.high, x$3.low - x$4.low));
			tx.index = (i0 << 24 >>> 24);
			txi = txi + 1 >> 0;
			tx = (_slice$6 = l.tx, _index$6 = txi, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
			tx.when = (x$5 = pseudoUnix(y, d1), x$6 = new Go$Int64(0, (_slice$7 = l.zone, _index$7 = i0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")).offset), new Go$Int64(x$5.high - x$6.high, x$5.low - x$6.low));
			tx.index = (i1 << 24 >>> 24);
			txi = txi + 1 >> 0;
			y = y + 1 >> 0;
		}
	};
	initLocal = function() {
		var i, _tuple, err;
		i = new syscall.Timezoneinformation.Ptr();
		_tuple = syscall.GetTimeZoneInformation(i); err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			localLoc.name = "UTC";
			return;
		}
		initLocalFromTZI(i);
	};
	go$pkg.init = function() {
		(go$ptrType(ParseError)).methods = [["Error", "", [], [Go$String], false, -1]];
		ParseError.init([["Layout", "Layout", "", Go$String, ""], ["Value", "Value", "", Go$String, ""], ["LayoutElem", "LayoutElem", "", Go$String, ""], ["ValueElem", "ValueElem", "", Go$String, ""], ["Message", "Message", "", Go$String, ""]]);
		Time.methods = [["Add", "", [Duration], [Time], false, -1], ["AddDate", "", [Go$Int, Go$Int, Go$Int], [Time], false, -1], ["After", "", [Time], [Go$Bool], false, -1], ["Before", "", [Time], [Go$Bool], false, -1], ["Clock", "", [], [Go$Int, Go$Int, Go$Int], false, -1], ["Date", "", [], [Go$Int, Month, Go$Int], false, -1], ["Day", "", [], [Go$Int], false, -1], ["Equal", "", [Time], [Go$Bool], false, -1], ["Format", "", [Go$String], [Go$String], false, -1], ["GobEncode", "", [], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["Hour", "", [], [Go$Int], false, -1], ["ISOWeek", "", [], [Go$Int, Go$Int], false, -1], ["In", "", [(go$ptrType(Location))], [Time], false, -1], ["IsZero", "", [], [Go$Bool], false, -1], ["Local", "", [], [Time], false, -1], ["Location", "", [], [(go$ptrType(Location))], false, -1], ["MarshalBinary", "", [], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["MarshalJSON", "", [], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["MarshalText", "", [], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["Minute", "", [], [Go$Int], false, -1], ["Month", "", [], [Month], false, -1], ["Nanosecond", "", [], [Go$Int], false, -1], ["Round", "", [Duration], [Time], false, -1], ["Second", "", [], [Go$Int], false, -1], ["String", "", [], [Go$String], false, -1], ["Sub", "", [Time], [Duration], false, -1], ["Truncate", "", [Duration], [Time], false, -1], ["UTC", "", [], [Time], false, -1], ["Unix", "", [], [Go$Int64], false, -1], ["UnixNano", "", [], [Go$Int64], false, -1], ["Weekday", "", [], [Weekday], false, -1], ["Year", "", [], [Go$Int], false, -1], ["YearDay", "", [], [Go$Int], false, -1], ["Zone", "", [], [Go$String, Go$Int], false, -1], ["abs", "time", [], [Go$Uint64], false, -1], ["date", "time", [Go$Bool], [Go$Int, Month, Go$Int, Go$Int], false, -1], ["locabs", "time", [], [Go$String, Go$Int, Go$Uint64], false, -1]];
		(go$ptrType(Time)).methods = [["Add", "", [Duration], [Time], false, -1], ["AddDate", "", [Go$Int, Go$Int, Go$Int], [Time], false, -1], ["After", "", [Time], [Go$Bool], false, -1], ["Before", "", [Time], [Go$Bool], false, -1], ["Clock", "", [], [Go$Int, Go$Int, Go$Int], false, -1], ["Date", "", [], [Go$Int, Month, Go$Int], false, -1], ["Day", "", [], [Go$Int], false, -1], ["Equal", "", [Time], [Go$Bool], false, -1], ["Format", "", [Go$String], [Go$String], false, -1], ["GobDecode", "", [(go$sliceType(Go$Uint8))], [go$error], false, -1], ["GobEncode", "", [], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["Hour", "", [], [Go$Int], false, -1], ["ISOWeek", "", [], [Go$Int, Go$Int], false, -1], ["In", "", [(go$ptrType(Location))], [Time], false, -1], ["IsZero", "", [], [Go$Bool], false, -1], ["Local", "", [], [Time], false, -1], ["Location", "", [], [(go$ptrType(Location))], false, -1], ["MarshalBinary", "", [], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["MarshalJSON", "", [], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["MarshalText", "", [], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["Minute", "", [], [Go$Int], false, -1], ["Month", "", [], [Month], false, -1], ["Nanosecond", "", [], [Go$Int], false, -1], ["Round", "", [Duration], [Time], false, -1], ["Second", "", [], [Go$Int], false, -1], ["String", "", [], [Go$String], false, -1], ["Sub", "", [Time], [Duration], false, -1], ["Truncate", "", [Duration], [Time], false, -1], ["UTC", "", [], [Time], false, -1], ["Unix", "", [], [Go$Int64], false, -1], ["UnixNano", "", [], [Go$Int64], false, -1], ["UnmarshalBinary", "", [(go$sliceType(Go$Uint8))], [go$error], false, -1], ["UnmarshalJSON", "", [(go$sliceType(Go$Uint8))], [go$error], false, -1], ["UnmarshalText", "", [(go$sliceType(Go$Uint8))], [go$error], false, -1], ["Weekday", "", [], [Weekday], false, -1], ["Year", "", [], [Go$Int], false, -1], ["YearDay", "", [], [Go$Int], false, -1], ["Zone", "", [], [Go$String, Go$Int], false, -1], ["abs", "time", [], [Go$Uint64], false, -1], ["date", "time", [Go$Bool], [Go$Int, Month, Go$Int, Go$Int], false, -1], ["locabs", "time", [], [Go$String, Go$Int, Go$Uint64], false, -1]];
		Time.init([["sec", "sec", "time", Go$Int64, ""], ["nsec", "nsec", "time", Go$Uintptr, ""], ["loc", "loc", "time", (go$ptrType(Location)), ""]]);
		Month.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(Month)).methods = [["String", "", [], [Go$String], false, -1]];
		Weekday.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(Weekday)).methods = [["String", "", [], [Go$String], false, -1]];
		Duration.methods = [["Hours", "", [], [Go$Float64], false, -1], ["Minutes", "", [], [Go$Float64], false, -1], ["Nanoseconds", "", [], [Go$Int64], false, -1], ["Seconds", "", [], [Go$Float64], false, -1], ["String", "", [], [Go$String], false, -1]];
		(go$ptrType(Duration)).methods = [["Hours", "", [], [Go$Float64], false, -1], ["Minutes", "", [], [Go$Float64], false, -1], ["Nanoseconds", "", [], [Go$Int64], false, -1], ["Seconds", "", [], [Go$Float64], false, -1], ["String", "", [], [Go$String], false, -1]];
		(go$ptrType(Location)).methods = [["String", "", [], [Go$String], false, -1], ["get", "time", [], [(go$ptrType(Location))], false, -1], ["lookup", "time", [Go$Int64], [Go$String, Go$Int, Go$Bool, Go$Int64, Go$Int64], false, -1], ["lookupName", "time", [Go$String, Go$Int64], [Go$Int, Go$Bool, Go$Bool], false, -1]];
		Location.init([["name", "name", "time", Go$String, ""], ["zone", "zone", "time", (go$sliceType(zone)), ""], ["tx", "tx", "time", (go$sliceType(zoneTrans)), ""], ["cacheStart", "cacheStart", "time", Go$Int64, ""], ["cacheEnd", "cacheEnd", "time", Go$Int64, ""], ["cacheZone", "cacheZone", "time", (go$ptrType(zone)), ""]]);
		zone.init([["name", "name", "time", Go$String, ""], ["offset", "offset", "time", Go$Int, ""], ["isDST", "isDST", "time", Go$Bool, ""]]);
		zoneTrans.init([["when", "when", "time", Go$Int64, ""], ["index", "index", "time", Go$Uint8, ""], ["isstd", "isstd", "time", Go$Bool, ""], ["isutc", "isutc", "time", Go$Bool, ""]]);
		abbr.init([["std", "std", "time", Go$String, ""], ["dst", "dst", "time", Go$String, ""]]);
		localLoc = new Location.Ptr();
		localOnce = new sync.Once.Ptr();
		std0x = go$toNativeArray("Int", [260, 265, 524, 526, 528, 274]);
		longDayNames = new (go$sliceType(Go$String))(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new (go$sliceType(Go$String))(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new (go$sliceType(Go$String))(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new (go$sliceType(Go$String))(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = go$toNativeArray("String", ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = go$toNativeArray("String", ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		daysBefore = go$toNativeArray("Int32", [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.Ptr("UTC", (go$sliceType(zone)).nil, (go$sliceType(zoneTrans)).nil, new Go$Int64(0, 0), new Go$Int64(0, 0), (go$ptrType(zone)).nil);
		go$pkg.UTC = utcLoc;
		go$pkg.Local = localLoc;
		var _tuple;
		_tuple = syscall.Getenv("ZONEINFO"); zoneinfo = _tuple[0];
		var _map$1, _key$1;
		abbrs = (_map$1 = new Go$Map(), _key$1 = "Egypt Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EET", "EET") }, _key$1 = "Morocco Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("WET", "WEST") }, _key$1 = "South Africa Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("SAST", "SAST") }, _key$1 = "W. Central Africa Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("WAT", "WAT") }, _key$1 = "E. Africa Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EAT", "EAT") }, _key$1 = "Namibia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("WAT", "WAST") }, _key$1 = "Alaskan Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("AKST", "AKDT") }, _key$1 = "Paraguay Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("PYT", "PYST") }, _key$1 = "Bahia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("BRT", "BRST") }, _key$1 = "SA Pacific Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("COT", "COT") }, _key$1 = "Argentina Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("ART", "ART") }, _key$1 = "Venezuela Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("VET", "VET") }, _key$1 = "SA Eastern Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GFT", "GFT") }, _key$1 = "Central Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CST", "CDT") }, _key$1 = "Mountain Standard Time (Mexico)", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("MST", "MDT") }, _key$1 = "Central Brazilian Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("AMT", "AMST") }, _key$1 = "Mountain Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("MST", "MDT") }, _key$1 = "Greenland Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("WGT", "WGST") }, _key$1 = "Central America Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CST", "CST") }, _key$1 = "Atlantic Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("AST", "ADT") }, _key$1 = "US Eastern Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EST", "EDT") }, _key$1 = "SA Western Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("BOT", "BOT") }, _key$1 = "Pacific Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("PST", "PDT") }, _key$1 = "Central Standard Time (Mexico)", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CST", "CDT") }, _key$1 = "Montevideo Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("UYT", "UYST") }, _key$1 = "Eastern Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EST", "EDT") }, _key$1 = "US Mountain Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("MST", "MST") }, _key$1 = "Canada Central Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CST", "CST") }, _key$1 = "Pacific Standard Time (Mexico)", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("PST", "PDT") }, _key$1 = "Pacific SA Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CLT", "CLST") }, _key$1 = "E. South America Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("BRT", "BRST") }, _key$1 = "Newfoundland Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("NST", "NDT") }, _key$1 = "Central Asia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("ALMT", "ALMT") }, _key$1 = "Jordan Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EET", "EEST") }, _key$1 = "Arabic Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("AST", "AST") }, _key$1 = "Azerbaijan Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("AZT", "AZST") }, _key$1 = "SE Asia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("ICT", "ICT") }, _key$1 = "Middle East Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EET", "EEST") }, _key$1 = "India Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("IST", "IST") }, _key$1 = "Sri Lanka Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("IST", "IST") }, _key$1 = "Syria Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EET", "EEST") }, _key$1 = "Bangladesh Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("BDT", "BDT") }, _key$1 = "Arabian Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GST", "GST") }, _key$1 = "North Asia East Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("IRKT", "IRKT") }, _key$1 = "Israel Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("IST", "IDT") }, _key$1 = "Afghanistan Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("AFT", "AFT") }, _key$1 = "Pakistan Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("PKT", "PKT") }, _key$1 = "Nepal Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("NPT", "NPT") }, _key$1 = "North Asia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("KRAT", "KRAT") }, _key$1 = "Magadan Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("MAGT", "MAGT") }, _key$1 = "E. Europe Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EET", "EEST") }, _key$1 = "N. Central Asia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("NOVT", "NOVT") }, _key$1 = "Myanmar Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("MMT", "MMT") }, _key$1 = "Arab Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("AST", "AST") }, _key$1 = "Korea Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("KST", "KST") }, _key$1 = "China Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CST", "CST") }, _key$1 = "Singapore Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("SGT", "SGT") }, _key$1 = "Taipei Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CST", "CST") }, _key$1 = "West Asia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("UZT", "UZT") }, _key$1 = "Georgian Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GET", "GET") }, _key$1 = "Iran Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("IRST", "IRDT") }, _key$1 = "Tokyo Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("JST", "JST") }, _key$1 = "Ulaanbaatar Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("ULAT", "ULAT") }, _key$1 = "Vladivostok Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("VLAT", "VLAT") }, _key$1 = "Yakutsk Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("YAKT", "YAKT") }, _key$1 = "Ekaterinburg Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("YEKT", "YEKT") }, _key$1 = "Caucasus Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("AMT", "AMT") }, _key$1 = "Azores Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("AZOT", "AZOST") }, _key$1 = "Cape Verde Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CVT", "CVT") }, _key$1 = "Greenwich Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GMT", "GMT") }, _key$1 = "Cen. Australia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CST", "CST") }, _key$1 = "E. Australia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EST", "EST") }, _key$1 = "AUS Central Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CST", "CST") }, _key$1 = "Tasmania Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EST", "EST") }, _key$1 = "W. Australia Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("WST", "WST") }, _key$1 = "AUS Eastern Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EST", "EST") }, _key$1 = "UTC", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GMT", "GMT") }, _key$1 = "UTC-11", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GMT+11", "GMT+11") }, _key$1 = "Dateline Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GMT+12", "GMT+12") }, _key$1 = "UTC-02", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GMT+2", "GMT+2") }, _key$1 = "UTC+12", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GMT-12", "GMT-12") }, _key$1 = "W. Europe Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CET", "CEST") }, _key$1 = "GTB Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EET", "EEST") }, _key$1 = "Central Europe Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CET", "CEST") }, _key$1 = "Turkey Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EET", "EEST") }, _key$1 = "Kaliningrad Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("FET", "FET") }, _key$1 = "FLE Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("EET", "EEST") }, _key$1 = "GMT Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("GMT", "BST") }, _key$1 = "Russian Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("MSK", "MSK") }, _key$1 = "Romance Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CET", "CEST") }, _key$1 = "Central European Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("CET", "CEST") }, _key$1 = "Mauritius Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("MUT", "MUT") }, _key$1 = "Samoa Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("WST", "WST") }, _key$1 = "New Zealand Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("NZST", "NZDT") }, _key$1 = "Fiji Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("FJT", "FJT") }, _key$1 = "Central Pacific Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("SBT", "SBT") }, _key$1 = "Hawaiian Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("HST", "HST") }, _key$1 = "West Pacific Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("PGT", "PGT") }, _key$1 = "Tonga Standard Time", _map$1[_key$1] = { k: _key$1, v: new abbr.Ptr("TOT", "TOT") }, _map$1);
		badData = errors.New("malformed time zone information");
	}
	return go$pkg;
})();
go$packages["os"] = (function() {
	var go$pkg = {}, js = go$packages["github.com/gopherjs/gopherjs/js"], time = go$packages["time"], syscall = go$packages["syscall"], errors = go$packages["errors"], runtime = go$packages["runtime"], atomic = go$packages["sync/atomic"], io = go$packages["io"], sync = go$packages["sync"], utf16 = go$packages["unicode/utf16"], utf8 = go$packages["unicode/utf8"], PathError, SyscallError, File, file, dirInfo, FileInfo, FileMode, fileStat, NewFile, Getenv, NewSyscallError, Open, syscallMode, newFile, epipecheck, openFile, openDir, OpenFile, Getwd, IsPathSeparator, Stat, Lstat, basename, isSlash, isAbs, volumeName, SameFile, sameFile, getwdCache, useSyscallwd, devNullStat;
	PathError = go$pkg.PathError = go$newType(0, "Struct", "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.go$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Path = Path_ !== undefined ? Path_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	SyscallError = go$pkg.SyscallError = go$newType(0, "Struct", "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.go$val = this;
		this.Syscall = Syscall_ !== undefined ? Syscall_ : "";
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	File = go$pkg.File = go$newType(0, "Struct", "os.File", "File", "os", function(file_) {
		this.go$val = this;
		this.file = file_ !== undefined ? file_ : (go$ptrType(file)).nil;
	});
	file = go$pkg.file = go$newType(0, "Struct", "os.file", "file", "os", function(fd_, name_, dirinfo_, l_, isConsole_, lastbits_, readbuf_) {
		this.go$val = this;
		this.fd = fd_ !== undefined ? fd_ : 0;
		this.name = name_ !== undefined ? name_ : "";
		this.dirinfo = dirinfo_ !== undefined ? dirinfo_ : (go$ptrType(dirInfo)).nil;
		this.l = l_ !== undefined ? l_ : new sync.Mutex.Ptr();
		this.isConsole = isConsole_ !== undefined ? isConsole_ : false;
		this.lastbits = lastbits_ !== undefined ? lastbits_ : (go$sliceType(Go$Uint8)).nil;
		this.readbuf = readbuf_ !== undefined ? readbuf_ : (go$sliceType(Go$Int32)).nil;
	});
	dirInfo = go$pkg.dirInfo = go$newType(0, "Struct", "os.dirInfo", "dirInfo", "os", function(data_, needdata_, path_, isempty_) {
		this.go$val = this;
		this.data = data_ !== undefined ? data_ : new syscall.Win32finddata.Ptr();
		this.needdata = needdata_ !== undefined ? needdata_ : false;
		this.path = path_ !== undefined ? path_ : "";
		this.isempty = isempty_ !== undefined ? isempty_ : false;
	});
	FileInfo = go$pkg.FileInfo = go$newType(0, "Interface", "os.FileInfo", "FileInfo", "os", null);
	FileMode = go$pkg.FileMode = go$newType(4, "Uint32", "os.FileMode", "FileMode", "os", null);
	fileStat = go$pkg.fileStat = go$newType(0, "Struct", "os.fileStat", "fileStat", "os", function(name_, sys_, Mutex_, path_, vol_, idxhi_, idxlo_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.sys = sys_ !== undefined ? sys_ : new syscall.Win32FileAttributeData.Ptr();
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new sync.Mutex.Ptr();
		this.path = path_ !== undefined ? path_ : "";
		this.vol = vol_ !== undefined ? vol_ : 0;
		this.idxhi = idxhi_ !== undefined ? idxhi_ : 0;
		this.idxlo = idxlo_ !== undefined ? idxlo_ : 0;
	});
	NewFile = go$pkg.NewFile = function(fd, name) {
		return new File.Ptr((go$ptrType(file)).nil);
	};
	File.Ptr.prototype.readdirnames = function(n) {
		var names, err, file$1, _tuple, fis, _ref, _i, _slice, _index, fi, i, _slice$1, _index$1, _tuple$1;
		names = (go$sliceType(Go$String)).nil;
		err = null;
		file$1 = this;
		_tuple = file$1.Readdir(n); fis = _tuple[0]; err = _tuple[1];
		names = (go$sliceType(Go$String)).make(fis.length, 0, function() { return ""; });
		_ref = fis;
		_i = 0;
		while (_i < _ref.length) {
			fi = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$1 = names; _index$1 = i;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = fi.Name()) : go$throwRuntimeError("index out of range");
			_i++;
		}
		_tuple$1 = [names, err]; names = _tuple$1[0]; err = _tuple$1[1];
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.go$val.readdirnames(n); };
	File.Ptr.prototype.Readdir = function(n) {
		var fi, err, f, _tuple, _tuple$1;
		fi = (go$sliceType(FileInfo)).nil;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [(go$sliceType(FileInfo)).nil, go$pkg.ErrInvalid]; fi = _tuple[0]; err = _tuple[1];
			return [fi, err];
		}
		_tuple$1 = f.readdir(n); fi = _tuple$1[0]; err = _tuple$1[1];
		return [fi, err];
	};
	File.prototype.Readdir = function(n) { return this.go$val.Readdir(n); };
	File.Ptr.prototype.Readdirnames = function(n) {
		var names, err, f, _tuple, _tuple$1;
		names = (go$sliceType(Go$String)).nil;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [(go$sliceType(Go$String)).nil, go$pkg.ErrInvalid]; names = _tuple[0]; err = _tuple[1];
			return [names, err];
		}
		_tuple$1 = f.readdirnames(n); names = _tuple$1[0]; err = _tuple$1[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.go$val.Readdirnames(n); };
	Getenv = go$pkg.Getenv = function(key) {
		var _tuple, v;
		_tuple = syscall.Getenv(key); v = _tuple[0];
		return v;
	};
	PathError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.Path + ": " + e.Err.Error();
	};
	PathError.prototype.Error = function() { return this.go$val.Error(); };
	SyscallError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Syscall + ": " + e.Err.Error();
	};
	SyscallError.prototype.Error = function() { return this.go$val.Error(); };
	NewSyscallError = go$pkg.NewSyscallError = function(syscall$1, err) {
		if (go$interfaceIsEqual(err, null)) {
			return null;
		}
		return new SyscallError.Ptr(syscall$1, err);
	};
	File.Ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.go$val.Name(); };
	File.Ptr.prototype.Read = function(b) {
		var n, err, f, _tuple, _tuple$1, e, _tuple$2, _tuple$3;
		n = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		_tuple$1 = f.read(b); n = _tuple$1[0]; e = _tuple$1[1];
		if (n < 0) {
			n = 0;
		}
		if ((n === 0) && b.length > 0 && go$interfaceIsEqual(e, null)) {
			_tuple$2 = [0, io.EOF]; n = _tuple$2[0]; err = _tuple$2[1];
			return [n, err];
		}
		if (!(go$interfaceIsEqual(e, null))) {
			err = new PathError.Ptr("read", f.file.name, e);
		}
		_tuple$3 = [n, err]; n = _tuple$3[0]; err = _tuple$3[1];
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.go$val.Read(b); };
	File.Ptr.prototype.ReadAt = function(b, off) {
		var n, err, f, _tuple, _tuple$1, m, e, _tuple$2, x;
		n = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		while (b.length > 0) {
			_tuple$1 = f.pread(b, off); m = _tuple$1[0]; e = _tuple$1[1];
			if ((m === 0) && go$interfaceIsEqual(e, null)) {
				_tuple$2 = [n, io.EOF]; n = _tuple$2[0]; err = _tuple$2[1];
				return [n, err];
			}
			if (!(go$interfaceIsEqual(e, null))) {
				err = new PathError.Ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = go$subslice(b, m);
			off = (x = new Go$Int64(0, m), new Go$Int64(off.high + x.high, off.low + x.low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.go$val.ReadAt(b, off); };
	File.Ptr.prototype.Write = function(b) {
		var n, err, f, _tuple, _tuple$1, e, _tuple$2;
		n = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		_tuple$1 = f.write(b); n = _tuple$1[0]; e = _tuple$1[1];
		if (n < 0) {
			n = 0;
		}
		epipecheck(f, e);
		if (!(go$interfaceIsEqual(e, null))) {
			err = new PathError.Ptr("write", f.file.name, e);
		}
		_tuple$2 = [n, err]; n = _tuple$2[0]; err = _tuple$2[1];
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.go$val.Write(b); };
	File.Ptr.prototype.WriteAt = function(b, off) {
		var n, err, f, _tuple, _tuple$1, m, e, x;
		n = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		while (b.length > 0) {
			_tuple$1 = f.pwrite(b, off); m = _tuple$1[0]; e = _tuple$1[1];
			if (!(go$interfaceIsEqual(e, null))) {
				err = new PathError.Ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = go$subslice(b, m);
			off = (x = new Go$Int64(0, m), new Go$Int64(off.high + x.high, off.low + x.low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.go$val.WriteAt(b, off); };
	File.Ptr.prototype.Seek = function(offset, whence) {
		var ret, err, f, _tuple, _tuple$1, r, e, _tuple$2, _tuple$3;
		ret = new Go$Int64(0, 0);
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [new Go$Int64(0, 0), go$pkg.ErrInvalid]; ret = _tuple[0]; err = _tuple[1];
			return [ret, err];
		}
		_tuple$1 = f.seek(offset, whence); r = _tuple$1[0]; e = _tuple$1[1];
		if (go$interfaceIsEqual(e, null) && !(f.file.dirinfo === (go$ptrType(dirInfo)).nil) && !((r.high === 0 && r.low === 0))) {
			e = new syscall.Errno(536870954);
		}
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$2 = [new Go$Int64(0, 0), new PathError.Ptr("seek", f.file.name, e)]; ret = _tuple$2[0]; err = _tuple$2[1];
			return [ret, err];
		}
		_tuple$3 = [r, null]; ret = _tuple$3[0]; err = _tuple$3[1];
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.go$val.Seek(offset, whence); };
	File.Ptr.prototype.WriteString = function(s) {
		var ret, err, f, _tuple, _tuple$1;
		ret = 0;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			_tuple = [0, go$pkg.ErrInvalid]; ret = _tuple[0]; err = _tuple[1];
			return [ret, err];
		}
		_tuple$1 = f.Write(new (go$sliceType(Go$Uint8))(go$stringToBytes(s))); ret = _tuple$1[0]; err = _tuple$1[1];
		return [ret, err];
	};
	File.prototype.WriteString = function(s) { return this.go$val.WriteString(s); };
	File.Ptr.prototype.Chdir = function() {
		var f, e;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!(go$interfaceIsEqual(e, null))) {
			return new PathError.Ptr("chdir", f.file.name, e);
		}
		return null;
	};
	File.prototype.Chdir = function() { return this.go$val.Chdir(); };
	Open = go$pkg.Open = function(name) {
		var file$1, err, _tuple;
		file$1 = (go$ptrType(File)).nil;
		err = null;
		_tuple = OpenFile(name, 0, 0); file$1 = _tuple[0]; err = _tuple[1];
		return [file$1, err];
	};
	syscallMode = function(i) {
		var o;
		o = 0;
		o = (o | (((new FileMode(i)).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | 2048) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | 1024) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | 512) >>> 0;
		}
		return o;
	};
	File.Ptr.prototype.Chmod = function(mode) {
		var f, e;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!(go$interfaceIsEqual(e, null))) {
			return new PathError.Ptr("chmod", f.file.name, e);
		}
		return null;
	};
	File.prototype.Chmod = function(mode) { return this.go$val.Chmod(mode); };
	File.Ptr.prototype.Chown = function(uid, gid) {
		var f, e;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!(go$interfaceIsEqual(e, null))) {
			return new PathError.Ptr("chown", f.file.name, e);
		}
		return null;
	};
	File.prototype.Chown = function(uid, gid) { return this.go$val.Chown(uid, gid); };
	File.Ptr.prototype.Truncate = function(size) {
		var f, e;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!(go$interfaceIsEqual(e, null))) {
			return new PathError.Ptr("truncate", f.file.name, e);
		}
		return null;
	};
	File.prototype.Truncate = function(size) { return this.go$val.Truncate(size); };
	File.Ptr.prototype.Sync = function() {
		var err, f, e;
		err = null;
		f = this;
		if (f === (go$ptrType(File)).nil) {
			err = new syscall.Errno(536870951);
			return err;
		}
		e = syscall.Fsync(f.file.fd);
		if (!(go$interfaceIsEqual(e, null))) {
			err = NewSyscallError("fsync", e);
			return err;
		}
		err = null;
		return err;
	};
	File.prototype.Sync = function() { return this.go$val.Sync(); };
	File.Ptr.prototype.Fd = function() {
		var file$1;
		file$1 = this;
		if (file$1 === (go$ptrType(File)).nil) {
			return 4294967295;
		}
		return (file$1.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.go$val.Fd(); };
	newFile = function(h, name) {
		var f, m, v;
		f = new File.Ptr(new file.Ptr(h, name, (go$ptrType(dirInfo)).nil, new sync.Mutex.Ptr(), false, (go$sliceType(Go$Uint8)).nil, (go$sliceType(Go$Int32)).nil));
		m = 0;
		if (go$interfaceIsEqual(syscall.GetConsoleMode(f.file.fd, new (go$ptrType(Go$Uint32))(function() { return m; }, function(v) { m = v;; })), null)) {
			f.file.isConsole = true;
		}
		runtime.SetFinalizer(f.file, new (go$funcType([(go$ptrType(file))], [go$error], false))((function(recv) { return recv.close(); })));
		return f;
	};
	epipecheck = function(file$1, e) {
	};
	file.Ptr.prototype.isdir = function() {
		var f;
		f = this;
		return !(f === (go$ptrType(file)).nil) && !(f.dirinfo === (go$ptrType(dirInfo)).nil);
	};
	file.prototype.isdir = function() { return this.go$val.isdir(); };
	openFile = function(name, flag, perm) {
		var file$1, err, _tuple, r, e, _tuple$1, _tuple$2;
		file$1 = (go$ptrType(File)).nil;
		err = null;
		_tuple = syscall.Open(name, flag | 524288, syscallMode(perm)); r = _tuple[0]; e = _tuple[1];
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$1 = [(go$ptrType(File)).nil, e]; file$1 = _tuple$1[0]; err = _tuple$1[1];
			return [file$1, err];
		}
		_tuple$2 = [NewFile((r >>> 0), name), null]; file$1 = _tuple$2[0]; err = _tuple$2[1];
		return [file$1, err];
	};
	openDir = function(name) {
		var file$1, err, _tuple, maskp, e, _tuple$1, d, _tuple$2, r, _tuple$3, fa, _tuple$4, namep, e$1, _tuple$5, _tuple$6, _tuple$7, _tuple$8, cwd, f, _tuple$9;
		file$1 = (go$ptrType(File)).nil;
		err = null;
		_tuple = syscall.UTF16PtrFromString(name + "\\*"); maskp = _tuple[0]; e = _tuple[1];
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$1 = [(go$ptrType(File)).nil, e]; file$1 = _tuple$1[0]; err = _tuple$1[1];
			return [file$1, err];
		}
		d = new dirInfo.Ptr();
		_tuple$2 = syscall.FindFirstFile(maskp, d.data); r = _tuple$2[0]; e = _tuple$2[1];
		if (!(go$interfaceIsEqual(e, null))) {
			if (!(go$interfaceIsEqual(e, new syscall.Errno(2)))) {
				_tuple$3 = [(go$ptrType(File)).nil, e]; file$1 = _tuple$3[0]; err = _tuple$3[1];
				return [file$1, err];
			}
			fa = new syscall.Win32FileAttributeData.Ptr();
			_tuple$4 = syscall.UTF16PtrFromString(name); namep = _tuple$4[0]; e$1 = _tuple$4[1];
			if (!(go$interfaceIsEqual(e$1, null))) {
				_tuple$5 = [(go$ptrType(File)).nil, e$1]; file$1 = _tuple$5[0]; err = _tuple$5[1];
				return [file$1, err];
			}
			e$1 = syscall.GetFileAttributesEx(namep, 0, fa);
			if (!(go$interfaceIsEqual(e$1, null))) {
				_tuple$6 = [(go$ptrType(File)).nil, e$1]; file$1 = _tuple$6[0]; err = _tuple$6[1];
				return [file$1, err];
			}
			if (((fa.FileAttributes & 16) >>> 0) === 0) {
				_tuple$7 = [(go$ptrType(File)).nil, e$1]; file$1 = _tuple$7[0]; err = _tuple$7[1];
				return [file$1, err];
			}
			d.isempty = true;
		}
		d.path = name;
		if (!isAbs(d.path)) {
			_tuple$8 = Getwd(); cwd = _tuple$8[0];
			d.path = cwd + "\\" + d.path;
		}
		f = newFile(r, name);
		f.file.dirinfo = d;
		_tuple$9 = [f, null]; file$1 = _tuple$9[0]; err = _tuple$9[1];
		return [file$1, err];
	};
	OpenFile = go$pkg.OpenFile = function(name, flag, perm) {
		var file$1, err, _tuple, _tuple$1, r, e, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6;
		file$1 = (go$ptrType(File)).nil;
		err = null;
		if (name === "") {
			_tuple = [(go$ptrType(File)).nil, new PathError.Ptr("open", name, new syscall.Errno(2))]; file$1 = _tuple[0]; err = _tuple[1];
			return [file$1, err];
		}
		_tuple$1 = openDir(name); r = _tuple$1[0]; e = _tuple$1[1];
		if (go$interfaceIsEqual(e, null)) {
			if (!(((flag & 1) === 0)) || !(((flag & 2) === 0))) {
				r.Close();
				_tuple$2 = [(go$ptrType(File)).nil, new PathError.Ptr("open", name, new syscall.Errno(536870954))]; file$1 = _tuple$2[0]; err = _tuple$2[1];
				return [file$1, err];
			}
			_tuple$3 = [r, null]; file$1 = _tuple$3[0]; err = _tuple$3[1];
			return [file$1, err];
		}
		_tuple$4 = openFile(name, flag, perm); r = _tuple$4[0]; e = _tuple$4[1];
		if (go$interfaceIsEqual(e, null)) {
			_tuple$5 = [r, null]; file$1 = _tuple$5[0]; err = _tuple$5[1];
			return [file$1, err];
		}
		_tuple$6 = [(go$ptrType(File)).nil, new PathError.Ptr("open", name, e)]; file$1 = _tuple$6[0]; err = _tuple$6[1];
		return [file$1, err];
	};
	File.Ptr.prototype.Close = function() {
		var file$1;
		file$1 = this;
		if (file$1 === (go$ptrType(File)).nil) {
			return go$pkg.ErrInvalid;
		}
		return file$1.file.close();
	};
	File.prototype.Close = function() { return this.go$val.Close(); };
	file.Ptr.prototype.close = function() {
		var file$1, e, err;
		file$1 = this;
		if (file$1 === (go$ptrType(file)).nil) {
			return new syscall.Errno(536870951);
		}
		if (file$1.isdir() && file$1.dirinfo.isempty) {
			return null;
		}
		if (file$1.fd === 4294967295) {
			return new syscall.Errno(536870951);
		}
		e = null;
		if (file$1.isdir()) {
			e = syscall.FindClose(file$1.fd);
		} else {
			e = syscall.CloseHandle(file$1.fd);
		}
		err = null;
		if (!(go$interfaceIsEqual(e, null))) {
			err = new PathError.Ptr("close", file$1.name, e);
		}
		file$1.fd = 4294967295;
		runtime.SetFinalizer(file$1, null);
		return err;
	};
	file.prototype.close = function() { return this.go$val.close(); };
	File.Ptr.prototype.readdir = function(n) {
		var fi, err, file$1, _tuple, _tuple$1, _tuple$2, wantAll, size, d, e, name, _struct, _struct$1, _struct$2, f, _tuple$3, _tuple$4;
		fi = (go$sliceType(FileInfo)).nil;
		err = null;
		file$1 = this;
		if (file$1 === (go$ptrType(File)).nil) {
			_tuple = [(go$sliceType(FileInfo)).nil, new syscall.Errno(536870951)]; fi = _tuple[0]; err = _tuple[1];
			return [fi, err];
		}
		if (!file$1.file.isdir()) {
			_tuple$1 = [(go$sliceType(FileInfo)).nil, new PathError.Ptr("Readdir", file$1.file.name, new syscall.Errno(3))]; fi = _tuple$1[0]; err = _tuple$1[1];
			return [fi, err];
		}
		if (!file$1.file.dirinfo.isempty && (file$1.file.fd === 4294967295)) {
			_tuple$2 = [(go$sliceType(FileInfo)).nil, new syscall.Errno(536870951)]; fi = _tuple$2[0]; err = _tuple$2[1];
			return [fi, err];
		}
		wantAll = n <= 0;
		size = n;
		if (wantAll) {
			n = -1;
			size = 100;
		}
		fi = (go$sliceType(FileInfo)).make(0, size, function() { return null; });
		d = file$1.file.dirinfo.data;
		while (!((n === 0)) && !file$1.file.dirinfo.isempty) {
			if (file$1.file.dirinfo.needdata) {
				e = syscall.FindNextFile(file$1.file.fd, d);
				if (!(go$interfaceIsEqual(e, null))) {
					if (go$interfaceIsEqual(e, new syscall.Errno(18))) {
						break;
					} else {
						err = new PathError.Ptr("FindNextFile", file$1.file.name, e);
						if (!wantAll) {
							fi = (go$sliceType(FileInfo)).nil;
						}
						return [fi, err];
					}
				}
			}
			file$1.file.dirinfo.needdata = true;
			name = syscall.UTF16ToString(go$subslice(new (go$sliceType(Go$Uint16))(d.FileName), 0));
			if (name === "." || name === "..") {
				continue;
			}
			f = new fileStat.Ptr(name, new syscall.Win32FileAttributeData.Ptr(d.FileAttributes, (_struct = d.CreationTime, new syscall.Filetime.Ptr(_struct.LowDateTime, _struct.HighDateTime)), (_struct$1 = d.LastAccessTime, new syscall.Filetime.Ptr(_struct$1.LowDateTime, _struct$1.HighDateTime)), (_struct$2 = d.LastWriteTime, new syscall.Filetime.Ptr(_struct$2.LowDateTime, _struct$2.HighDateTime)), d.FileSizeHigh, d.FileSizeLow), new sync.Mutex.Ptr(), file$1.file.dirinfo.path + "\\" + name, 0, 0, 0);
			n = n - 1 >> 0;
			fi = go$append(fi, f);
		}
		if (!wantAll && (fi.length === 0)) {
			_tuple$3 = [fi, io.EOF]; fi = _tuple$3[0]; err = _tuple$3[1];
			return [fi, err];
		}
		_tuple$4 = [fi, null]; fi = _tuple$4[0]; err = _tuple$4[1];
		return [fi, err];
	};
	File.prototype.readdir = function(n) { return this.go$val.readdir(n); };
	File.Ptr.prototype.readConsole = function(b) {
		var n, err, f, _tuple, numBytes, wchars, p, v, _slice, _index, _slice$1, _index$1, nw, v$1, err$1, _tuple$1, _ref, _i, _slice$2, _index$2, r, i, _tuple$2, nr, _tuple$3;
		n = 0;
		err = null;
		f = this;
		if (b.length === 0) {
			_tuple = [0, null]; n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		if (f.file.readbuf.length === 0) {
			numBytes = b.length;
			if (numBytes > 16000) {
				numBytes = 16000;
			}
			wchars = (go$sliceType(Go$Uint16)).make(numBytes, 0, function() { return 0; });
			p = (go$ptrType(Go$Uint16)).nil;
			if (b.length > 0) {
				p = new (go$ptrType(Go$Uint16))(function() { return (_slice$1 = wchars, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")); }, function(v) { _slice = wchars; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = v) : go$throwRuntimeError("index out of range");; });
			}
			nw = 0;
			err$1 = syscall.ReadConsole(f.file.fd, p, (wchars.length >>> 0), new (go$ptrType(Go$Uint32))(function() { return nw; }, function(v$1) { nw = v$1;; }), (go$ptrType(Go$Uint8)).nil);
			if (!(go$interfaceIsEqual(err$1, null))) {
				_tuple$1 = [0, err$1]; n = _tuple$1[0]; err = _tuple$1[1];
				return [n, err];
			}
			f.file.readbuf = utf16.Decode(go$subslice(wchars, 0, nw));
		}
		_ref = f.file.readbuf;
		_i = 0;
		while (_i < _ref.length) {
			r = (_slice$2 = _ref, _index$2 = _i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (utf8.RuneLen(r) > b.length) {
				f.file.readbuf = go$subslice(f.file.readbuf, i);
				_tuple$2 = [n, null]; n = _tuple$2[0]; err = _tuple$2[1];
				return [n, err];
			}
			nr = utf8.EncodeRune(b, r);
			b = go$subslice(b, nr);
			n = n + (nr) >> 0;
			_i++;
		}
		f.file.readbuf = (go$sliceType(Go$Int32)).nil;
		_tuple$3 = [n, null]; n = _tuple$3[0]; err = _tuple$3[1];
		return [n, err];
	};
	File.prototype.readConsole = function(b) { return this.go$val.readConsole(b); };
	File.Ptr.prototype.read = function(b) {
		var n, err, f, _tuple, _tuple$1;
		n = 0;
		err = null;
		var go$deferred = [];
		try {
			f = this;
			f.file.l.Lock();
			go$deferred.push({ recv: f.file.l, method: "Unlock", args: [] });
			if (f.file.isConsole) {
				_tuple = f.readConsole(b); n = _tuple[0]; err = _tuple[1];
				return [n, err];
			}
			_tuple$1 = syscall.Read(f.file.fd, b); n = _tuple$1[0]; err = _tuple$1[1];
			return [n, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [n, err];
		}
	};
	File.prototype.read = function(b) { return this.go$val.read(b); };
	File.Ptr.prototype.pread = function(b, off) {
		var n, err, f, _tuple, curoffset, e, _tuple$1, o, done, v, _tuple$2, _tuple$3, _tuple$4;
		n = 0;
		err = null;
		var go$deferred = [];
		try {
			f = this;
			f.file.l.Lock();
			go$deferred.push({ recv: f.file.l, method: "Unlock", args: [] });
			_tuple = syscall.Seek(f.file.fd, new Go$Int64(0, 0), 1); curoffset = _tuple[0]; e = _tuple[1];
			if (!(go$interfaceIsEqual(e, null))) {
				_tuple$1 = [0, e]; n = _tuple$1[0]; err = _tuple$1[1];
				return [n, err];
			}
			go$deferred.push({ recv: syscall, method: "Seek", args: [f.file.fd, curoffset, 0] });
			o = new syscall.Overlapped.Ptr(0, 0, (off.low >>> 0), (go$shiftRightInt64(off, 32).low >>> 0), 0);
			done = 0;
			e = syscall.ReadFile(f.file.fd, b, new (go$ptrType(Go$Uint32))(function() { return done; }, function(v) { done = v;; }), o);
			if (!(go$interfaceIsEqual(e, null))) {
				if (go$interfaceIsEqual(e, new syscall.Errno(38))) {
					_tuple$2 = [0, null]; n = _tuple$2[0]; err = _tuple$2[1];
					return [n, err];
				}
				_tuple$3 = [0, e]; n = _tuple$3[0]; err = _tuple$3[1];
				return [n, err];
			}
			_tuple$4 = [(done >> 0), null]; n = _tuple$4[0]; err = _tuple$4[1];
			return [n, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [n, err];
		}
	};
	File.prototype.pread = function(b, off) { return this.go$val.pread(b, off); };
	File.Ptr.prototype.writeConsole = function(b) {
		var n, err, f, runes, _tuple, r, l, m, chunk, uint16s, written, v, _slice, _index, _slice$1, _index$1, v$1, _tuple$1, _tuple$2;
		n = 0;
		err = null;
		f = this;
		n = b.length;
		runes = (go$sliceType(Go$Int32)).make(0, 256, function() { return 0; });
		if (f.file.lastbits.length > 0) {
			b = go$appendSlice(f.file.lastbits, b);
			f.file.lastbits = (go$sliceType(Go$Uint8)).nil;
		}
		while (b.length >= 4 || utf8.FullRune(b)) {
			_tuple = utf8.DecodeRune(b); r = _tuple[0]; l = _tuple[1];
			runes = go$append(runes, r);
			b = go$subslice(b, l);
		}
		if (b.length > 0) {
			f.file.lastbits = (go$sliceType(Go$Uint8)).make(b.length, 0, function() { return 0; });
			go$copySlice(f.file.lastbits, b);
		}
		while (runes.length > 0) {
			m = runes.length;
			if (m > 16000) {
				m = 16000;
			}
			chunk = go$subslice(runes, 0, m);
			runes = go$subslice(runes, m);
			uint16s = utf16.Encode(chunk);
			while (uint16s.length > 0) {
				written = [undefined];
				written[0] = 0;
				err = syscall.WriteConsole(f.file.fd, (function(written) { return new (go$ptrType(Go$Uint16))(function() { return (_slice$1 = uint16s, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")); }, function(v) { _slice = uint16s; _index = 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = v) : go$throwRuntimeError("index out of range");; }); })(written), (uint16s.length >>> 0), (function(written) { return new (go$ptrType(Go$Uint32))(function() { return written[0]; }, function(v$1) { written[0] = v$1;; }); })(written), (go$ptrType(Go$Uint8)).nil);
				if (!(go$interfaceIsEqual(err, null))) {
					_tuple$1 = [0, null]; n = _tuple$1[0]; err = _tuple$1[1];
					return [n, err];
				}
				uint16s = go$subslice(uint16s, written[0]);
			}
		}
		_tuple$2 = [n, null]; n = _tuple$2[0]; err = _tuple$2[1];
		return [n, err];
	};
	File.prototype.writeConsole = function(b) { return this.go$val.writeConsole(b); };
	File.Ptr.prototype.write = function(b) {
		var n, err, f, _tuple, _tuple$1;
		n = 0;
		err = null;
		var go$deferred = [];
		try {
			f = this;
			f.file.l.Lock();
			go$deferred.push({ recv: f.file.l, method: "Unlock", args: [] });
			if (f.file.isConsole) {
				_tuple = f.writeConsole(b); n = _tuple[0]; err = _tuple[1];
				return [n, err];
			}
			_tuple$1 = syscall.Write(f.file.fd, b); n = _tuple$1[0]; err = _tuple$1[1];
			return [n, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.go$val.write(b); };
	File.Ptr.prototype.pwrite = function(b, off) {
		var n, err, f, _tuple, curoffset, e, _tuple$1, o, done, v, _tuple$2, _tuple$3;
		n = 0;
		err = null;
		var go$deferred = [];
		try {
			f = this;
			f.file.l.Lock();
			go$deferred.push({ recv: f.file.l, method: "Unlock", args: [] });
			_tuple = syscall.Seek(f.file.fd, new Go$Int64(0, 0), 1); curoffset = _tuple[0]; e = _tuple[1];
			if (!(go$interfaceIsEqual(e, null))) {
				_tuple$1 = [0, e]; n = _tuple$1[0]; err = _tuple$1[1];
				return [n, err];
			}
			go$deferred.push({ recv: syscall, method: "Seek", args: [f.file.fd, curoffset, 0] });
			o = new syscall.Overlapped.Ptr(0, 0, (off.low >>> 0), (go$shiftRightInt64(off, 32).low >>> 0), 0);
			done = 0;
			e = syscall.WriteFile(f.file.fd, b, new (go$ptrType(Go$Uint32))(function() { return done; }, function(v) { done = v;; }), o);
			if (!(go$interfaceIsEqual(e, null))) {
				_tuple$2 = [0, e]; n = _tuple$2[0]; err = _tuple$2[1];
				return [n, err];
			}
			_tuple$3 = [(done >> 0), null]; n = _tuple$3[0]; err = _tuple$3[1];
			return [n, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [n, err];
		}
	};
	File.prototype.pwrite = function(b, off) { return this.go$val.pwrite(b, off); };
	File.Ptr.prototype.seek = function(offset, whence) {
		var ret, err, f, _tuple;
		ret = new Go$Int64(0, 0);
		err = null;
		var go$deferred = [];
		try {
			f = this;
			f.file.l.Lock();
			go$deferred.push({ recv: f.file.l, method: "Unlock", args: [] });
			_tuple = syscall.Seek(f.file.fd, offset, whence); ret = _tuple[0]; err = _tuple[1];
			return [ret, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [ret, err];
		}
	};
	File.prototype.seek = function(offset, whence) { return this.go$val.seek(offset, whence); };
	Getwd = go$pkg.Getwd = function() {
		var go$this = this, pwd, err, _tuple, s, e, _tuple$1, _tuple$2, dot, _tuple$3, _tuple$4, d, err$1, _tuple$5, _tuple$6, d$1, err$2, _tuple$7, _tuple$8, root, _tuple$9, _tuple$10, parent, _tuple$11, _tuple$12, fd, err$3, _tuple$13, _tuple$14, names, err$4, _tuple$15, _ref, _i, _slice, _index, name, _tuple$16, d$2, _tuple$17, pd, _tuple$18, _tuple$19;
		pwd = "";
		err = null;
		/* */ var go$s = 0, go$f = function() { while (true) { switch (go$s) { case 0:
		_tuple = syscall.Getwd(); s = _tuple[0]; e = _tuple[1];
		if (useSyscallwd(e)) {
			_tuple$1 = [s, NewSyscallError("getwd", e)]; pwd = _tuple$1[0]; err = _tuple$1[1];
			return [pwd, err];
		}
		_tuple$2 = Stat("."); dot = _tuple$2[0]; err = _tuple$2[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$3 = ["", err]; pwd = _tuple$3[0]; err = _tuple$3[1];
			return [pwd, err];
		}
		pwd = Getenv("PWD");
		if (pwd.length > 0 && (pwd.charCodeAt(0) === 47)) {
			_tuple$4 = Stat(pwd); d = _tuple$4[0]; err$1 = _tuple$4[1];
			if (go$interfaceIsEqual(err$1, null) && SameFile(dot, d)) {
				_tuple$5 = [pwd, null]; pwd = _tuple$5[0]; err = _tuple$5[1];
				return [pwd, err];
			}
		}
		getwdCache.Mutex.Lock();
		pwd = getwdCache.dir;
		getwdCache.Mutex.Unlock();
		if (pwd.length > 0) {
			_tuple$6 = Stat(pwd); d$1 = _tuple$6[0]; err$2 = _tuple$6[1];
			if (go$interfaceIsEqual(err$2, null) && SameFile(dot, d$1)) {
				_tuple$7 = [pwd, null]; pwd = _tuple$7[0]; err = _tuple$7[1];
				return [pwd, err];
			}
		}
		_tuple$8 = Stat("/"); root = _tuple$8[0]; err = _tuple$8[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$9 = ["", err]; pwd = _tuple$9[0]; err = _tuple$9[1];
			return [pwd, err];
		}
		if (SameFile(root, dot)) {
			_tuple$10 = ["/", null]; pwd = _tuple$10[0]; err = _tuple$10[1];
			return [pwd, err];
		}
		pwd = "";
		parent = "..";
		/* while (true) { */ case 2: if(!(true)) { go$s = 3; continue; }
			if (parent.length >= 1024) {
				_tuple$11 = ["", new syscall.Errno(536870975)]; pwd = _tuple$11[0]; err = _tuple$11[1];
				return [pwd, err];
			}
			_tuple$12 = Open(parent); fd = _tuple$12[0]; err$3 = _tuple$12[1];
			if (!(go$interfaceIsEqual(err$3, null))) {
				_tuple$13 = ["", err$3]; pwd = _tuple$13[0]; err = _tuple$13[1];
				return [pwd, err];
			}
			/* while (true) { */ case 4: if(!(true)) { go$s = 5; continue; }
				_tuple$14 = fd.Readdirnames(100); names = _tuple$14[0]; err$4 = _tuple$14[1];
				if (!(go$interfaceIsEqual(err$4, null))) {
					fd.Close();
					_tuple$15 = ["", err$4]; pwd = _tuple$15[0]; err = _tuple$15[1];
					return [pwd, err];
				}
				_ref = names;
				_i = 0;
				/* while (_i < _ref.length) { */ case 6: if(!(_i < _ref.length)) { go$s = 7; continue; }
					name = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					_tuple$16 = Lstat(parent + "/" + name); d$2 = _tuple$16[0];
					/* if (SameFile(d$2, dot)) { */ if (SameFile(d$2, dot)) {} else { go$s = 8; continue; }
						pwd = "/" + name + pwd;
						/* goto Found */ go$s = 1; continue;
					/* } */ case 8:
					_i++;
				/* } */ go$s = 6; continue; case 7:
			/* } */ go$s = 4; continue; case 5:
			/* Found: */ case 1:
			_tuple$17 = fd.Stat(); pd = _tuple$17[0]; err$3 = _tuple$17[1];
			if (!(go$interfaceIsEqual(err$3, null))) {
				_tuple$18 = ["", err$3]; pwd = _tuple$18[0]; err = _tuple$18[1];
				return [pwd, err];
			}
			fd.Close();
			if (SameFile(pd, root)) {
				/* break; */ go$s = 3; continue;
			}
			dot = pd;
			parent = "../" + parent;
		/* } */ go$s = 2; continue; case 3:
		getwdCache.Mutex.Lock();
		getwdCache.dir = pwd;
		getwdCache.Mutex.Unlock();
		_tuple$19 = [pwd, null]; pwd = _tuple$19[0]; err = _tuple$19[1];
		return [pwd, err];
		/* */ } break; } }; return go$f();
	};
	IsPathSeparator = go$pkg.IsPathSeparator = function(c) {
		return (c === 92) || (c === 47);
	};
	File.Ptr.prototype.Stat = function() {
		var fi, err, file$1, _tuple, _tuple$1, _tuple$2, _tuple$3, d, e, _tuple$4, _struct, _struct$1, _struct$2, _tuple$5;
		fi = null;
		err = null;
		file$1 = this;
		if (file$1 === (go$ptrType(File)).nil) {
			_tuple = [null, go$pkg.ErrInvalid]; fi = _tuple[0]; err = _tuple[1];
			return [fi, err];
		}
		if (file$1 === (go$ptrType(File)).nil || file$1.file.fd < 0) {
			_tuple$1 = [null, new syscall.Errno(536870951)]; fi = _tuple$1[0]; err = _tuple$1[1];
			return [fi, err];
		}
		if (file$1.file.isdir()) {
			_tuple$2 = Stat(file$1.file.name); fi = _tuple$2[0]; err = _tuple$2[1];
			return [fi, err];
		}
		if (file$1.file.name === "NUL") {
			_tuple$3 = [devNullStat, null]; fi = _tuple$3[0]; err = _tuple$3[1];
			return [fi, err];
		}
		d = new syscall.ByHandleFileInformation.Ptr();
		e = syscall.GetFileInformationByHandle(file$1.file.fd, d);
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$4 = [null, new PathError.Ptr("GetFileInformationByHandle", file$1.file.name, e)]; fi = _tuple$4[0]; err = _tuple$4[1];
			return [fi, err];
		}
		_tuple$5 = [new fileStat.Ptr(basename(file$1.file.name), new syscall.Win32FileAttributeData.Ptr(d.FileAttributes, (_struct = d.CreationTime, new syscall.Filetime.Ptr(_struct.LowDateTime, _struct.HighDateTime)), (_struct$1 = d.LastAccessTime, new syscall.Filetime.Ptr(_struct$1.LowDateTime, _struct$1.HighDateTime)), (_struct$2 = d.LastWriteTime, new syscall.Filetime.Ptr(_struct$2.LowDateTime, _struct$2.HighDateTime)), d.FileSizeHigh, d.FileSizeLow), new sync.Mutex.Ptr(), "", d.VolumeSerialNumber, d.FileIndexHigh, d.FileIndexLow), null]; fi = _tuple$5[0]; err = _tuple$5[1];
		return [fi, err];
	};
	File.prototype.Stat = function() { return this.go$val.Stat(); };
	Stat = go$pkg.Stat = function(name) {
		var fi, err, _tuple, _tuple$1, fs, _tuple$2, namep, e, _tuple$3, _tuple$4, _tuple$5, cwd, _tuple$6;
		fi = null;
		err = null;
		if (name.length === 0) {
			_tuple = [null, new PathError.Ptr("Stat", name, new syscall.Errno(3))]; fi = _tuple[0]; err = _tuple[1];
			return [fi, err];
		}
		if (name === "NUL") {
			_tuple$1 = [devNullStat, null]; fi = _tuple$1[0]; err = _tuple$1[1];
			return [fi, err];
		}
		fs = new fileStat.Ptr(basename(name), new syscall.Win32FileAttributeData.Ptr(), new sync.Mutex.Ptr(), "", 0, 0, 0);
		_tuple$2 = syscall.UTF16PtrFromString(name); namep = _tuple$2[0]; e = _tuple$2[1];
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$3 = [null, new PathError.Ptr("Stat", name, e)]; fi = _tuple$3[0]; err = _tuple$3[1];
			return [fi, err];
		}
		e = syscall.GetFileAttributesEx(namep, 0, fs.sys);
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple$4 = [null, new PathError.Ptr("GetFileAttributesEx", name, e)]; fi = _tuple$4[0]; err = _tuple$4[1];
			return [fi, err];
		}
		fs.path = name;
		if (!isAbs(fs.path)) {
			_tuple$5 = Getwd(); cwd = _tuple$5[0];
			fs.path = cwd + "\\" + fs.path;
		}
		_tuple$6 = [fs, null]; fi = _tuple$6[0]; err = _tuple$6[1];
		return [fi, err];
	};
	Lstat = go$pkg.Lstat = function(name) {
		var fi, err, _tuple;
		fi = null;
		err = null;
		_tuple = Stat(name); fi = _tuple[0]; err = _tuple[1];
		return [fi, err];
	};
	basename = function(name) {
		var i;
		if ((name.length === 2) && (name.charCodeAt(1) === 58)) {
			name = ".";
		} else if (name.length > 2 && (name.charCodeAt(1) === 58)) {
			name = name.substring(2);
		}
		i = name.length - 1 >> 0;
		while (i > 0 && ((name.charCodeAt(i) === 47) || (name.charCodeAt(i) === 92))) {
			name = name.substring(0, i);
			i = i - 1 >> 0;
		}
		i = i - 1 >> 0;
		while (i >= 0) {
			if ((name.charCodeAt(i) === 47) || (name.charCodeAt(i) === 92)) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - 1 >> 0;
		}
		return name;
	};
	isSlash = function(c) {
		return (c === 92) || (c === 47);
	};
	isAbs = function(path) {
		var b, v;
		b = false;
		v = volumeName(path);
		if (v === "") {
			b = false;
			return b;
		}
		path = path.substring(v.length);
		if (path === "") {
			b = false;
			return b;
		}
		b = isSlash(path.charCodeAt(0));
		return b;
	};
	volumeName = function(path) {
		var v, c, l, n;
		v = "";
		if (path.length < 2) {
			v = "";
			return v;
		}
		c = path.charCodeAt(0);
		if ((path.charCodeAt(1) === 58) && (48 <= c && c <= 57 || 97 <= c && c <= 122 || 65 <= c && c <= 90)) {
			v = path.substring(0, 2);
			return v;
		}
		l = path.length;
		if (l >= 5 && isSlash(path.charCodeAt(0)) && isSlash(path.charCodeAt(1)) && !isSlash(path.charCodeAt(2)) && !((path.charCodeAt(2) === 46))) {
			n = 3;
			while (n < (l - 1 >> 0)) {
				if (isSlash(path.charCodeAt(n))) {
					n = n + 1 >> 0;
					if (!isSlash(path.charCodeAt(n))) {
						if (path.charCodeAt(n) === 46) {
							break;
						}
						while (n < l) {
							if (isSlash(path.charCodeAt(n))) {
								break;
							}
							n = n + 1 >> 0;
						}
						v = path.substring(0, n);
						return v;
					}
					break;
				}
				n = n + 1 >> 0;
			}
		}
		v = "";
		return v;
	};
	FileMode.prototype.String = function() {
		var m, buf, w, _ref, _i, _rune, c, i, y, _ref$1, _i$1, _rune$1, c$1, i$1, y$1;
		m = this.go$val;
		buf = go$makeNativeArray("Uint8", 32, function() { return 0; });
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			i = _i;
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				buf[w] = (c << 24 >>> 24);
				w = w + 1 >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			buf[w] = 45;
			w = w + 1 >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			_rune$1 = go$decodeRune(_ref$1, _i$1);
			c$1 = _rune$1[0];
			i$1 = _i$1;
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				buf[w] = (c$1 << 24 >>> 24);
			} else {
				buf[w] = 45;
			}
			w = w + 1 >> 0;
			_i$1 += _rune$1[1];
		}
		return go$bytesToString(go$subslice(new (go$sliceType(Go$Uint8))(buf), 0, w));
	};
	go$ptrType(FileMode).prototype.String = function() { return new FileMode(this.go$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.go$val;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	go$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.go$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.go$val;
		return ((m & 2399141888) >>> 0) === 0;
	};
	go$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.go$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.go$val;
		return (m & 511) >>> 0;
	};
	go$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.go$get()).Perm(); };
	fileStat.Ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.go$val.Name(); };
	fileStat.Ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return (new FileMode(fs.Mode())).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.go$val.IsDir(); };
	SameFile = go$pkg.SameFile = function(fi1, fi2) {
		var _tuple, fs1, ok1, _tuple$1, fs2, ok2;
		_tuple = (fi1 !== null && fi1.constructor === (go$ptrType(fileStat)) ? [fi1.go$val, true] : [(go$ptrType(fileStat)).nil, false]); fs1 = _tuple[0]; ok1 = _tuple[1];
		_tuple$1 = (fi2 !== null && fi2.constructor === (go$ptrType(fileStat)) ? [fi2.go$val, true] : [(go$ptrType(fileStat)).nil, false]); fs2 = _tuple$1[0]; ok2 = _tuple$1[1];
		if (!ok1 || !ok2) {
			return false;
		}
		return sameFile(fs1, fs2);
	};
	fileStat.Ptr.prototype.Size = function() {
		var fs, x, x$1;
		fs = this;
		return (x = go$shiftLeft64(new Go$Int64(0, fs.sys.FileSizeHigh), 32), x$1 = new Go$Int64(0, fs.sys.FileSizeLow), new Go$Int64(x.high + x$1.high, x.low + x$1.low));
	};
	fileStat.prototype.Size = function() { return this.go$val.Size(); };
	fileStat.Ptr.prototype.Mode = function() {
		var m, fs;
		m = 0;
		fs = this;
		if (fs === devNullStat) {
			m = 69206454;
			return m;
		}
		if (!((((fs.sys.FileAttributes & 16) >>> 0) === 0))) {
			m = (m | 2147483721) >>> 0;
		}
		if (!((((fs.sys.FileAttributes & 1) >>> 0) === 0))) {
			m = (m | 292) >>> 0;
		} else {
			m = (m | 438) >>> 0;
		}
		m = m;
		return m;
	};
	fileStat.prototype.Mode = function() { return this.go$val.Mode(); };
	fileStat.Ptr.prototype.ModTime = function() {
		var fs, _struct;
		fs = this;
		return (_struct = time.Unix(new Go$Int64(0, 0), fs.sys.LastWriteTime.Nanoseconds()), new time.Time.Ptr(_struct.sec, _struct.nsec, _struct.loc));
	};
	fileStat.prototype.ModTime = function() { return this.go$val.ModTime(); };
	fileStat.Ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.go$val.Sys(); };
	fileStat.Ptr.prototype.loadFileId = function() {
		var fs, _tuple, pathp, err, _tuple$1, h, i;
		var go$deferred = [];
		try {
			fs = this;
			fs.Mutex.Lock();
			go$deferred.push({ recv: fs, method: "Unlock", args: [] });
			if (fs.path === "") {
				return null;
			}
			_tuple = syscall.UTF16PtrFromString(fs.path); pathp = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return err;
			}
			_tuple$1 = syscall.CreateFile(pathp, 0, 0, (go$ptrType(syscall.SecurityAttributes)).nil, 3, 33554432, 0); h = _tuple$1[0]; err = _tuple$1[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return err;
			}
			go$deferred.push({ recv: syscall, method: "CloseHandle", args: [h] });
			i = new syscall.ByHandleFileInformation.Ptr();
			err = syscall.GetFileInformationByHandle(h, i);
			if (!(go$interfaceIsEqual(err, null))) {
				return err;
			}
			fs.path = "";
			fs.vol = i.VolumeSerialNumber;
			fs.idxhi = i.FileIndexHigh;
			fs.idxlo = i.FileIndexLow;
			return null;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	fileStat.prototype.loadFileId = function() { return this.go$val.loadFileId(); };
	sameFile = function(fs1, fs2) {
		var e;
		e = fs1.loadFileId();
		if (!(go$interfaceIsEqual(e, null))) {
			return false;
		}
		e = fs2.loadFileId();
		if (!(go$interfaceIsEqual(e, null))) {
			return false;
		}
		return (fs1.vol === fs2.vol) && (fs1.idxhi === fs2.idxhi) && (fs1.idxlo === fs2.idxlo);
	};
	go$pkg.init = function() {
		(go$ptrType(PathError)).methods = [["Error", "", [], [Go$String], false, -1]];
		PathError.init([["Op", "Op", "", Go$String, ""], ["Path", "Path", "", Go$String, ""], ["Err", "Err", "", go$error, ""]]);
		(go$ptrType(SyscallError)).methods = [["Error", "", [], [Go$String], false, -1]];
		SyscallError.init([["Syscall", "Syscall", "", Go$String, ""], ["Err", "Err", "", go$error, ""]]);
		File.methods = [["close", "os", [], [go$error], false, 0], ["isdir", "os", [], [Go$Bool], false, 0]];
		(go$ptrType(File)).methods = [["Chdir", "", [], [go$error], false, -1], ["Chmod", "", [FileMode], [go$error], false, -1], ["Chown", "", [Go$Int, Go$Int], [go$error], false, -1], ["Close", "", [], [go$error], false, -1], ["Fd", "", [], [Go$Uintptr], false, -1], ["Name", "", [], [Go$String], false, -1], ["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["ReadAt", "", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false, -1], ["Readdir", "", [Go$Int], [(go$sliceType(FileInfo)), go$error], false, -1], ["Readdirnames", "", [Go$Int], [(go$sliceType(Go$String)), go$error], false, -1], ["Seek", "", [Go$Int64, Go$Int], [Go$Int64, go$error], false, -1], ["Stat", "", [], [FileInfo, go$error], false, -1], ["Sync", "", [], [go$error], false, -1], ["Truncate", "", [Go$Int64], [go$error], false, -1], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["WriteAt", "", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false, -1], ["WriteString", "", [Go$String], [Go$Int, go$error], false, -1], ["close", "os", [], [go$error], false, 0], ["isdir", "os", [], [Go$Bool], false, 0], ["pread", "os", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false, -1], ["pwrite", "os", [(go$sliceType(Go$Uint8)), Go$Int64], [Go$Int, go$error], false, -1], ["read", "os", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["readConsole", "os", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["readdir", "os", [Go$Int], [(go$sliceType(FileInfo)), go$error], false, -1], ["readdirnames", "os", [Go$Int], [(go$sliceType(Go$String)), go$error], false, -1], ["seek", "os", [Go$Int64, Go$Int], [Go$Int64, go$error], false, -1], ["write", "os", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["writeConsole", "os", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1]];
		File.init([["file", "", "os", (go$ptrType(file)), ""]]);
		(go$ptrType(file)).methods = [["close", "os", [], [go$error], false, -1], ["isdir", "os", [], [Go$Bool], false, -1]];
		file.init([["fd", "fd", "os", syscall.Handle, ""], ["name", "name", "os", Go$String, ""], ["dirinfo", "dirinfo", "os", (go$ptrType(dirInfo)), ""], ["l", "l", "os", sync.Mutex, ""], ["isConsole", "isConsole", "os", Go$Bool, ""], ["lastbits", "lastbits", "os", (go$sliceType(Go$Uint8)), ""], ["readbuf", "readbuf", "os", (go$sliceType(Go$Int32)), ""]]);
		dirInfo.init([["data", "data", "os", syscall.Win32finddata, ""], ["needdata", "needdata", "os", Go$Bool, ""], ["path", "path", "os", Go$String, ""], ["isempty", "isempty", "os", Go$Bool, ""]]);
		FileInfo.init([["IsDir", "", (go$funcType([], [Go$Bool], false))], ["ModTime", "", (go$funcType([], [time.Time], false))], ["Mode", "", (go$funcType([], [FileMode], false))], ["Name", "", (go$funcType([], [Go$String], false))], ["Size", "", (go$funcType([], [Go$Int64], false))], ["Sys", "", (go$funcType([], [go$emptyInterface], false))]]);
		FileMode.methods = [["IsDir", "", [], [Go$Bool], false, -1], ["IsRegular", "", [], [Go$Bool], false, -1], ["Perm", "", [], [FileMode], false, -1], ["String", "", [], [Go$String], false, -1]];
		(go$ptrType(FileMode)).methods = [["IsDir", "", [], [Go$Bool], false, -1], ["IsRegular", "", [], [Go$Bool], false, -1], ["Perm", "", [], [FileMode], false, -1], ["String", "", [], [Go$String], false, -1]];
		(go$ptrType(fileStat)).methods = [["IsDir", "", [], [Go$Bool], false, -1], ["Lock", "", [], [], false, 2], ["ModTime", "", [], [time.Time], false, -1], ["Mode", "", [], [FileMode], false, -1], ["Name", "", [], [Go$String], false, -1], ["Size", "", [], [Go$Int64], false, -1], ["Sys", "", [], [go$emptyInterface], false, -1], ["Unlock", "", [], [], false, 2], ["loadFileId", "os", [], [go$error], false, -1]];
		fileStat.init([["name", "name", "os", Go$String, ""], ["sys", "sys", "os", syscall.Win32FileAttributeData, ""], ["Mutex", "", "", sync.Mutex, ""], ["path", "path", "os", Go$String, ""], ["vol", "vol", "os", Go$Uint32, ""], ["idxhi", "idxhi", "os", Go$Uint32, ""], ["idxlo", "idxlo", "os", Go$Uint32, ""]]);
		getwdCache = new (go$structType([["Mutex", "", "", sync.Mutex, ""], ["dir", "dir", "os", Go$String, ""]])).Ptr(new sync.Mutex.Ptr(), "");
		go$pkg.Args = (go$sliceType(Go$String)).nil;
		go$pkg.ErrInvalid = errors.New("invalid argument");
		go$pkg.ErrPermission = errors.New("permission denied");
		go$pkg.ErrExist = errors.New("file already exists");
		go$pkg.ErrNotExist = errors.New("file does not exist");
		go$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		go$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		go$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		useSyscallwd = (function() {
			return true;
		});
		devNullStat = new fileStat.Ptr("NUL", new syscall.Win32FileAttributeData.Ptr(), new sync.Mutex.Ptr(), "", 0, 0, 0);
		var process, args, i, _slice, _index, argc, cmd, _tuple, v, argv, e, _ref, _i, _slice$1, _index$1, v$1, i$1, _slice$2, _index$2;
		var go$deferred = [];
		try {
			process = go$global.process;
			if (!(process === undefined)) {
				args = process.argv;
				go$pkg.Args = (go$sliceType(Go$String)).make(go$parseInt(args.length) - 1 >> 0, 0, function() { return ""; });
				i = 0;
				while (i < (go$parseInt(args.length) - 1 >> 0)) {
					_slice = go$pkg.Args; _index = i;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = go$internalize(args[(i + 1 >> 0)], Go$String)) : go$throwRuntimeError("index out of range");
					i = i + 1 >> 0;
				}
			}
			argc = 0;
			cmd = syscall.GetCommandLine();
			_tuple = syscall.CommandLineToArgv(cmd, new (go$ptrType(Go$Int32))(function() { return argc; }, function(v) { argc = v;; })); argv = _tuple[0]; e = _tuple[1];
			if (!(go$interfaceIsEqual(e, null))) {
				return;
			}
			go$deferred.push({ recv: syscall, method: "LocalFree", args: [(argv >>> 0)] });
			go$pkg.Args = (go$sliceType(Go$String)).make(argc, 0, function() { return ""; });
			_ref = go$subslice(new (go$sliceType((go$ptrType((go$arrayType(Go$Uint16, 8192))))))((argv)), 0, argc);
			_i = 0;
			while (_i < _ref.length) {
				v$1 = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				i$1 = _i;
				_slice$2 = go$pkg.Args; _index$2 = i$1;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = syscall.UTF16ToString(new (go$sliceType(Go$Uint16))((v$1)))) : go$throwRuntimeError("index out of range");
				_i++;
			}
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	}
	return go$pkg;
})();
go$packages["reflect"] = (function() {
	var go$pkg = {}, js = go$packages["github.com/gopherjs/gopherjs/js"], strconv = go$packages["strconv"], sync = go$packages["sync"], math = go$packages["math"], runtime = go$packages["runtime"], Type, Kind, rtype, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, iword, jsType, isWrapped, copyStruct, zeroVal, makeIndir, jsObject, TypeOf, makeMethodValue, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, SliceOf, toType, methodName, methodReceiver, valueInterface, overflowFloat32, typesMustMatch, Copy, unsafe_New, MakeSlice, MakeMap, ValueOf, Zero, New, convertOp, makeInt, makeFloat, makeComplex, makeString, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtDirect, cvtT2I, cvtI2I, chanclose, chanrecv, chansend, makemap, mapaccess, mapassign, mapiterinit, mapiterkey, mapiternext, maplen, call, ifaceE2I, kindNames, uint8Type;
	Type = go$pkg.Type = go$newType(0, "Interface", "reflect.Type", "Type", "reflect", null);
	Kind = go$pkg.Kind = go$newType(4, "Uint", "reflect.Kind", "Kind", "reflect", null);
	rtype = go$pkg.rtype = go$newType(0, "Struct", "reflect.rtype", "rtype", "reflect", function(size_, hash_, _$2_, align_, fieldAlign_, kind_, alg_, gc_, string_, uncommonType_, ptrToThis_) {
		this.go$val = this;
		this.size = size_ !== undefined ? size_ : 0;
		this.hash = hash_ !== undefined ? hash_ : 0;
		this._$2 = _$2_ !== undefined ? _$2_ : 0;
		this.align = align_ !== undefined ? align_ : 0;
		this.fieldAlign = fieldAlign_ !== undefined ? fieldAlign_ : 0;
		this.kind = kind_ !== undefined ? kind_ : 0;
		this.alg = alg_ !== undefined ? alg_ : (go$ptrType(Go$Uintptr)).nil;
		this.gc = gc_ !== undefined ? gc_ : 0;
		this.string = string_ !== undefined ? string_ : (go$ptrType(Go$String)).nil;
		this.uncommonType = uncommonType_ !== undefined ? uncommonType_ : (go$ptrType(uncommonType)).nil;
		this.ptrToThis = ptrToThis_ !== undefined ? ptrToThis_ : (go$ptrType(rtype)).nil;
	});
	method = go$pkg.method = go$newType(0, "Struct", "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : (go$ptrType(Go$String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : (go$ptrType(Go$String)).nil;
		this.mtyp = mtyp_ !== undefined ? mtyp_ : (go$ptrType(rtype)).nil;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(rtype)).nil;
		this.ifn = ifn_ !== undefined ? ifn_ : 0;
		this.tfn = tfn_ !== undefined ? tfn_ : 0;
	});
	uncommonType = go$pkg.uncommonType = go$newType(0, "Struct", "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : (go$ptrType(Go$String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : (go$ptrType(Go$String)).nil;
		this.methods = methods_ !== undefined ? methods_ : (go$sliceType(method)).nil;
	});
	ChanDir = go$pkg.ChanDir = go$newType(4, "Int", "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = go$pkg.arrayType = go$newType(0, "Struct", "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
		this.slice = slice_ !== undefined ? slice_ : (go$ptrType(rtype)).nil;
		this.len = len_ !== undefined ? len_ : 0;
	});
	chanType = go$pkg.chanType = go$newType(0, "Struct", "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
		this.dir = dir_ !== undefined ? dir_ : 0;
	});
	funcType = go$pkg.funcType = go$newType(0, "Struct", "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.dotdotdot = dotdotdot_ !== undefined ? dotdotdot_ : false;
		this.in$2 = in$2_ !== undefined ? in$2_ : (go$sliceType((go$ptrType(rtype)))).nil;
		this.out = out_ !== undefined ? out_ : (go$sliceType((go$ptrType(rtype)))).nil;
	});
	imethod = go$pkg.imethod = go$newType(0, "Struct", "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : (go$ptrType(Go$String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : (go$ptrType(Go$String)).nil;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(rtype)).nil;
	});
	interfaceType = go$pkg.interfaceType = go$newType(0, "Struct", "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.methods = methods_ !== undefined ? methods_ : (go$sliceType(imethod)).nil;
	});
	mapType = go$pkg.mapType = go$newType(0, "Struct", "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.key = key_ !== undefined ? key_ : (go$ptrType(rtype)).nil;
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
		this.bucket = bucket_ !== undefined ? bucket_ : (go$ptrType(rtype)).nil;
		this.hmap = hmap_ !== undefined ? hmap_ : (go$ptrType(rtype)).nil;
	});
	ptrType = go$pkg.ptrType = go$newType(0, "Struct", "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
	});
	sliceType = go$pkg.sliceType = go$newType(0, "Struct", "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : (go$ptrType(rtype)).nil;
	});
	structField = go$pkg.structField = go$newType(0, "Struct", "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : (go$ptrType(Go$String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : (go$ptrType(Go$String)).nil;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(rtype)).nil;
		this.tag = tag_ !== undefined ? tag_ : (go$ptrType(Go$String)).nil;
		this.offset = offset_ !== undefined ? offset_ : 0;
	});
	structType = go$pkg.structType = go$newType(0, "Struct", "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.go$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.fields = fields_ !== undefined ? fields_ : (go$sliceType(structField)).nil;
	});
	Method = go$pkg.Method = go$newType(0, "Struct", "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Func = Func_ !== undefined ? Func_ : new Value.Ptr();
		this.Index = Index_ !== undefined ? Index_ : 0;
	});
	StructField = go$pkg.StructField = go$newType(0, "Struct", "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Tag = Tag_ !== undefined ? Tag_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.Index = Index_ !== undefined ? Index_ : (go$sliceType(Go$Int)).nil;
		this.Anonymous = Anonymous_ !== undefined ? Anonymous_ : false;
	});
	StructTag = go$pkg.StructTag = go$newType(0, "String", "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = go$pkg.fieldScan = go$newType(0, "Struct", "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.go$val = this;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(structType)).nil;
		this.index = index_ !== undefined ? index_ : (go$sliceType(Go$Int)).nil;
	});
	Value = go$pkg.Value = go$newType(0, "Struct", "reflect.Value", "Value", "reflect", function(typ_, val_, flag_) {
		this.go$val = this;
		this.typ = typ_ !== undefined ? typ_ : (go$ptrType(rtype)).nil;
		this.val = val_ !== undefined ? val_ : 0;
		this.flag = flag_ !== undefined ? flag_ : 0;
	});
	flag = go$pkg.flag = go$newType(4, "Uintptr", "reflect.flag", "flag", "reflect", null);
	ValueError = go$pkg.ValueError = go$newType(0, "Struct", "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.go$val = this;
		this.Method = Method_ !== undefined ? Method_ : "";
		this.Kind = Kind_ !== undefined ? Kind_ : 0;
	});
	iword = go$pkg.iword = go$newType(0, "UnsafePointer", "reflect.iword", "iword", "reflect", null);
	jsType = function(typ) {
		return typ.jsType;
	};
	isWrapped = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 21 || _ref === 19 || _ref === 24 || _ref === 25) {
			return true;
		} else if (_ref === 22) {
			return typ.Elem().Kind() === 17;
		}
		return false;
	};
	copyStruct = function(dst, src, typ) {
		var fields, i, name;
		fields = jsType(typ).fields;
		i = 0;
		while (i < go$parseInt(fields.length)) {
			name = go$internalize(fields[i][0], Go$String);
			dst[go$externalize(name, Go$String)] = src[go$externalize(name, Go$String)];
			i = i + 1 >> 0;
		}
	};
	zeroVal = function(typ) {
		var _ref, elemType;
		_ref = typ.Kind();
		if (_ref === 1) {
			return false;
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14) {
			return 0;
		} else if (_ref === 6 || _ref === 11 || _ref === 15 || _ref === 16) {
			return new (jsType(typ))(0, 0);
		} else if (_ref === 17) {
			elemType = typ.Elem();
			return go$makeNativeArray(jsType(elemType).kind, typ.Len(), go$externalize((function() {
				return zeroVal(elemType);
			}), (go$funcType([], [js.Object], false))));
		} else if (_ref === 19) {
			return go$throwNilPointerError;
		} else if (_ref === 20) {
			return null;
		} else if (_ref === 21) {
			return false;
		} else if (_ref === 18 || _ref === 22 || _ref === 23) {
			return jsType(typ).nil;
		} else if (_ref === 24) {
			return "";
		} else if (_ref === 25) {
			return new (jsType(typ).Ptr)();
		} else {
			throw go$panic(new ValueError.Ptr("reflect.Zero", typ.Kind()));
		}
	};
	makeIndir = function(t, v) {
		if (t.size > 4) {
			return go$newDataPointer(v, jsType(t.ptrTo()));
		}
		return v;
	};
	jsObject = function() {
		var x;
		return (x = go$internalize(go$packages[go$externalize("github.com/gopherjs/gopherjs/js", Go$String)].Object.reflectType(), go$emptyInterface), (x !== null && x.constructor === (go$ptrType(rtype)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(rtype)))));
	};
	TypeOf = go$pkg.TypeOf = function(i) {
		var x;
		if (go$interfaceIsEqual(i, null)) {
			return null;
		}
		if (i.constructor.kind === undefined) {
			return jsObject();
		}
		return (x = go$internalize(i.constructor.reflectType(), go$emptyInterface), (x !== null && x.constructor === (go$ptrType(rtype)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(rtype)))));
	};
	makeMethodValue = function(op, v) {
			if ((v.flag & flagMethod) === 0) {
				throw go$panic(new Go$String("reflect: internal error: invalid use of makePartialFunc"));
			}

			var tuple = methodReceiver(op, v, v.flag >> flagMethodShift);
			var fn = tuple[1];
			var rcvr = tuple[2];
			var fv = function() { return fn.apply(rcvr, arguments); };
			return new Value.Ptr(v.Type(), fv, (v.flag & flagRO) | (Func << flagKindShift));
		};
	Kind.prototype.String = function() {
		var k, _slice, _index;
		k = this.go$val;
		if ((k >> 0) < kindNames.length) {
			return (_slice = kindNames, _index = k, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	go$ptrType(Kind).prototype.String = function() { return new Kind(this.go$get()).String(); };
	uncommonType.Ptr.prototype.uncommon = function() {
		var t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.go$val.uncommon(); };
	uncommonType.Ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		if (t === (go$ptrType(uncommonType)).nil || go$pointerIsEqual(t.pkgPath, (go$ptrType(Go$String)).nil)) {
			return "";
		}
		return t.pkgPath.go$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	uncommonType.Ptr.prototype.Name = function() {
		var t;
		t = this;
		if (t === (go$ptrType(uncommonType)).nil || go$pointerIsEqual(t.name, (go$ptrType(Go$String)).nil)) {
			return "";
		}
		return t.name.go$get();
	};
	uncommonType.prototype.Name = function() { return this.go$val.Name(); };
	rtype.Ptr.prototype.String = function() {
		var t;
		t = this;
		return t.string.go$get();
	};
	rtype.prototype.String = function() { return this.go$val.String(); };
	rtype.Ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.go$val.Size(); };
	rtype.Ptr.prototype.Bits = function() {
		var t, k, x;
		t = this;
		if (t === (go$ptrType(rtype)).nil) {
			throw go$panic(new Go$String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			throw go$panic(new Go$String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return (x = (t.size >> 0), (((x >>> 16 << 16) * 8 >> 0) + (x << 16 >>> 16) * 8) >> 0);
	};
	rtype.prototype.Bits = function() { return this.go$val.Bits(); };
	rtype.Ptr.prototype.Align = function() {
		var t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.go$val.Align(); };
	rtype.Ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.go$val.FieldAlign(); };
	rtype.Ptr.prototype.Kind = function() {
		var t;
		t = this;
		return (((t.kind & 127) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.go$val.Kind(); };
	rtype.Ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.go$val.common(); };
	uncommonType.Ptr.prototype.Method = function(i) {
			if (this === uncommonType.Ptr.nil || i < 0 || i >= this.methods.length) {
				throw go$panic(new Go$String("reflect: Method index out of range"));
			}
			var p = this.methods.array[i];
			var fl = Func << flagKindShift;
			var pkgPath = "";
			if (p.pkgPath.go$get !== go$throwNilPointerError) {
				pkgPath = p.pkgPath.go$get();
				fl |= flagRO;
			}
			var mt = p.typ;
			var name = p.name.go$get();
			if (go$reservedKeywords.indexOf(name) !== -1) {
				name += "$";
			}
			var fn = function(rcvr) {
				return rcvr[name].apply(rcvr, Go$Array.prototype.slice.apply(arguments, [1]));
			}
			return new Method.Ptr(p.name.go$get(), pkgPath, mt, new Value.Ptr(mt, fn, fl), i);
		};
	uncommonType.prototype.Method = function() { return this.go$val.Method(); };
	uncommonType.Ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		if (t === (go$ptrType(uncommonType)).nil) {
			return 0;
		}
		return t.methods.length;
	};
	uncommonType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	uncommonType.Ptr.prototype.MethodByName = function(name) {
		var m, ok, t, _struct, _struct$1, p, _ref, _i, i, _slice, _index, _struct$2, _struct$3, _tuple, _struct$4, _struct$5, _struct$6, _struct$7;
		m = new Method.Ptr();
		ok = false;
		t = this;
		if (t === (go$ptrType(uncommonType)).nil) {
			return [(_struct = m, new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index)), ok];
		}
		p = (go$ptrType(method)).nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			p = (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!(go$pointerIsEqual(p.name, (go$ptrType(Go$String)).nil)) && p.name.go$get() === name) {
				_tuple = [(_struct$2 = t.Method(i), new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index)), true]; m = _tuple[0]; ok = _tuple[1];
				return [(_struct$4 = m, new Method.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, (_struct$5 = _struct$4.Func, new Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), _struct$4.Index)), ok];
			}
			_i++;
		}
		return [(_struct$6 = m, new Method.Ptr(_struct$6.Name, _struct$6.PkgPath, _struct$6.Type, (_struct$7 = _struct$6.Func, new Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), _struct$6.Index)), ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	rtype.Ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	rtype.Ptr.prototype.Method = function(i) {
		var m, t, tt, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7;
		m = new Method.Ptr();
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			m = (_struct = tt.Method(i), new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index));
			return (_struct$2 = m, new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index));
		}
		m = (_struct$4 = t.uncommonType.Method(i), new Method.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, (_struct$5 = _struct$4.Func, new Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), _struct$4.Index));
		return (_struct$6 = m, new Method.Ptr(_struct$6.Name, _struct$6.PkgPath, _struct$6.Type, (_struct$7 = _struct$6.Func, new Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), _struct$6.Index));
	};
	rtype.prototype.Method = function(i) { return this.go$val.Method(i); };
	rtype.Ptr.prototype.MethodByName = function(name) {
		var m, ok, t, tt, _tuple, _struct, _struct$1, _struct$2, _struct$3, _tuple$1, _struct$4, _struct$5, _struct$6, _struct$7;
		m = new Method.Ptr();
		ok = false;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			_tuple = tt.MethodByName(name); m = (_struct = _tuple[0], new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index)); ok = _tuple[1];
			return [(_struct$2 = m, new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index)), ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name); m = (_struct$4 = _tuple$1[0], new Method.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, (_struct$5 = _struct$4.Func, new Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), _struct$4.Index)); ok = _tuple$1[1];
		return [(_struct$6 = m, new Method.Ptr(_struct$6.Name, _struct$6.PkgPath, _struct$6.Type, (_struct$7 = _struct$6.Func, new Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), _struct$6.Index)), ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	rtype.Ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.go$val.PkgPath(); };
	rtype.Ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.go$val.Name(); };
	rtype.Ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			throw go$panic(new Go$String("reflect: ChanDir of non-chan type"));
		}
		tt = t.chanType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.go$val.ChanDir(); };
	rtype.Ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: IsVariadic of non-func type"));
		}
		tt = t.funcType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.go$val.IsVariadic(); };
	rtype.Ptr.prototype.Elem = function() {
		var t, _ref, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_ref = t.Kind();
		if (_ref === 17) {
			tt = t.arrayType;
			return toType(tt.elem);
		} else if (_ref === 18) {
			tt$1 = t.chanType;
			return toType(tt$1.elem);
		} else if (_ref === 21) {
			tt$2 = t.mapType;
			return toType(tt$2.elem);
		} else if (_ref === 22) {
			tt$3 = t.ptrType;
			return toType(tt$3.elem);
		} else if (_ref === 23) {
			tt$4 = t.sliceType;
			return toType(tt$4.elem);
		}
		throw go$panic(new Go$String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.go$val.Elem(); };
	rtype.Ptr.prototype.Field = function(i) {
		var t, tt, _struct;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: Field of non-struct type"));
		}
		tt = t.structType;
		return (_struct = tt.Field(i), new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous));
	};
	rtype.prototype.Field = function(i) { return this.go$val.Field(i); };
	rtype.Ptr.prototype.FieldByIndex = function(index) {
		var t, tt, _struct;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.structType;
		return (_struct = tt.FieldByIndex(index), new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous));
	};
	rtype.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	rtype.Ptr.prototype.FieldByName = function(name) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: FieldByName of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByName(name);
	};
	rtype.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	rtype.Ptr.prototype.FieldByNameFunc = function(match) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByNameFunc(match);
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	rtype.Ptr.prototype.In = function(i) {
		var t, tt, _slice, _index;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: In of non-func type"));
		}
		tt = t.funcType;
		return toType((_slice = tt.in$2, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
	};
	rtype.prototype.In = function(i) { return this.go$val.In(i); };
	rtype.Ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			throw go$panic(new Go$String("reflect: Key of non-map type"));
		}
		tt = t.mapType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.go$val.Key(); };
	rtype.Ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			throw go$panic(new Go$String("reflect: Len of non-array type"));
		}
		tt = t.arrayType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.go$val.Len(); };
	rtype.Ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			throw go$panic(new Go$String("reflect: NumField of non-struct type"));
		}
		tt = t.structType;
		return tt.fields.length;
	};
	rtype.prototype.NumField = function() { return this.go$val.NumField(); };
	rtype.Ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: NumIn of non-func type"));
		}
		tt = t.funcType;
		return tt.in$2.length;
	};
	rtype.prototype.NumIn = function() { return this.go$val.NumIn(); };
	rtype.Ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: NumOut of non-func type"));
		}
		tt = t.funcType;
		return tt.out.length;
	};
	rtype.prototype.NumOut = function() { return this.go$val.NumOut(); };
	rtype.Ptr.prototype.Out = function(i) {
		var t, tt, _slice, _index;
		t = this;
		if (!((t.Kind() === 19))) {
			throw go$panic(new Go$String("reflect: Out of non-func type"));
		}
		tt = t.funcType;
		return toType((_slice = tt.out, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
	};
	rtype.prototype.Out = function(i) { return this.go$val.Out(i); };
	ChanDir.prototype.String = function() {
		var d, _ref;
		d = this.go$val;
		_ref = d;
		if (_ref === 2) {
			return "chan<-";
		} else if (_ref === 1) {
			return "<-chan";
		} else if (_ref === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	go$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.go$get()).String(); };
	interfaceType.Ptr.prototype.Method = function(i) {
		var m, t, _struct, _struct$1, _slice, _index, p, _struct$2, _struct$3;
		m = new Method.Ptr();
		t = this;
		if (i < 0 || i >= t.methods.length) {
			return (_struct = m, new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index));
		}
		p = (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		m.Name = p.name.go$get();
		if (!(go$pointerIsEqual(p.pkgPath, (go$ptrType(Go$String)).nil))) {
			m.PkgPath = p.pkgPath.go$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return (_struct$2 = m, new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index));
	};
	interfaceType.prototype.Method = function(i) { return this.go$val.Method(i); };
	interfaceType.Ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.length;
	};
	interfaceType.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	interfaceType.Ptr.prototype.MethodByName = function(name) {
		var m, ok, t, _struct, _struct$1, p, _ref, _i, i, _slice, _index, _struct$2, _struct$3, _tuple, _struct$4, _struct$5, _struct$6, _struct$7;
		m = new Method.Ptr();
		ok = false;
		t = this;
		if (t === (go$ptrType(interfaceType)).nil) {
			return [(_struct = m, new Method.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, (_struct$1 = _struct.Func, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), _struct.Index)), ok];
		}
		p = (go$ptrType(imethod)).nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			p = (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (p.name.go$get() === name) {
				_tuple = [(_struct$2 = t.Method(i), new Method.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, (_struct$3 = _struct$2.Func, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), _struct$2.Index)), true]; m = _tuple[0]; ok = _tuple[1];
				return [(_struct$4 = m, new Method.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, (_struct$5 = _struct$4.Func, new Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), _struct$4.Index)), ok];
			}
			_i++;
		}
		return [(_struct$6 = m, new Method.Ptr(_struct$6.Name, _struct$6.PkgPath, _struct$6.Type, (_struct$7 = _struct$6.Func, new Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), _struct$6.Index)), ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var tag, i, name, qvalue, _tuple, value;
		tag = this.go$val;
		while (!(tag === "")) {
			i = 0;
			while (i < tag.length && (tag.charCodeAt(i) === 32)) {
				i = i + 1 >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34))) {
				i = i + 1 >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (i < tag.length && !((tag.charCodeAt(i) === 34))) {
				if (tag.charCodeAt(i) === 92) {
					i = i + 1 >> 0;
				}
				i = i + 1 >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue); value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	go$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.go$get()).Get(key); };
	structType.Ptr.prototype.Field = function(i) {
		var f, t, _struct, _slice, _index, p, t$1, _struct$1;
		f = new StructField.Ptr();
		t = this;
		if (i < 0 || i >= t.fields.length) {
			return (_struct = f, new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous));
		}
		p = (_slice = t.fields, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		f.Type = toType(p.typ);
		if (!(go$pointerIsEqual(p.name, (go$ptrType(Go$String)).nil))) {
			f.Name = p.name.go$get();
		} else {
			t$1 = f.Type;
			if (t$1.Kind() === 22) {
				t$1 = t$1.Elem();
			}
			f.Name = t$1.Name();
			f.Anonymous = true;
		}
		if (!(go$pointerIsEqual(p.pkgPath, (go$ptrType(Go$String)).nil))) {
			f.PkgPath = p.pkgPath.go$get();
		}
		if (!(go$pointerIsEqual(p.tag, (go$ptrType(Go$String)).nil))) {
			f.Tag = p.tag.go$get();
		}
		f.Offset = p.offset;
		f.Index = new (go$sliceType(Go$Int))([i]);
		return (_struct$1 = f, new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous));
	};
	structType.prototype.Field = function(i) { return this.go$val.Field(i); };
	structType.Ptr.prototype.FieldByIndex = function(index) {
		var f, t, _ref, _i, _slice, _index, x, i, ft, _struct, _struct$1;
		f = new StructField.Ptr();
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				ft = f.Type;
				if ((ft.Kind() === 22) && (ft.Elem().Kind() === 25)) {
					ft = ft.Elem();
				}
				f.Type = ft;
			}
			f = (_struct = f.Type.Field(x), new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous));
			_i++;
		}
		return (_struct$1 = f, new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous));
	};
	structType.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	structType.Ptr.prototype.FieldByNameFunc = function(match) {
		var result, ok, t, current, next, nextCount, _map, _key, visited, _tuple, count, _ref, _i, _slice, _index, _struct, scan, t$1, _entry, _key$1, _ref$1, _i$1, i, _slice$1, _index$1, f, fname, ntyp, _entry$1, _tuple$1, _struct$1, _struct$2, styp, _entry$2, _key$2, _map$1, _key$3, _key$4, _entry$3, _key$5, index, _struct$3;
		result = new StructField.Ptr();
		ok = false;
		t = this;
		current = new (go$sliceType(fieldScan))([]);
		next = new (go$sliceType(fieldScan))([new fieldScan.Ptr(t, (go$sliceType(Go$Int)).nil)]);
		nextCount = false;
		visited = (_map = new Go$Map(), _map);
		while (next.length > 0) {
			_tuple = [next, go$subslice(current, 0, 0)]; current = _tuple[0]; next = _tuple[1];
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			while (_i < _ref.length) {
				scan = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new fieldScan.Ptr(_struct.typ, _struct.index));
				t$1 = scan.typ;
				if ((_entry = visited[t$1.go$key()], _entry !== undefined ? _entry.v : false)) {
					_i++;
					continue;
				}
				_key$1 = t$1; (visited || go$throwRuntimeError("assignment to entry in nil map"))[_key$1.go$key()] = { k: _key$1, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					i = _i$1;
					f = (_slice$1 = t$1.fields, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					fname = "";
					ntyp = (go$ptrType(rtype)).nil;
					if (!(go$pointerIsEqual(f.name, (go$ptrType(Go$String)).nil))) {
						fname = f.name.go$get();
					} else {
						ntyp = f.typ;
						if (ntyp.Kind() === 22) {
							ntyp = ntyp.Elem().common();
						}
						fname = ntyp.Name();
					}
					if (match(fname)) {
						if ((_entry$1 = count[t$1.go$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tuple$1 = [new StructField.Ptr("", "", null, "", 0, (go$sliceType(Go$Int)).nil, false), false]; result = _tuple$1[0]; ok = _tuple$1[1];
							return [(_struct$1 = result, new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous)), ok];
						}
						result = (_struct$2 = t$1.Field(i), new StructField.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, _struct$2.Tag, _struct$2.Offset, _struct$2.Index, _struct$2.Anonymous));
						result.Index = (go$sliceType(Go$Int)).nil;
						result.Index = go$appendSlice(result.Index, scan.index);
						result.Index = go$append(result.Index, i);
						ok = true;
						_i$1++;
						continue;
					}
					if (ok || ntyp === (go$ptrType(rtype)).nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						continue;
					}
					styp = ntyp.structType;
					if ((_entry$2 = nextCount[styp.go$key()], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$2 = styp; (nextCount || go$throwRuntimeError("assignment to entry in nil map"))[_key$2.go$key()] = { k: _key$2, v: 2 };
						_i$1++;
						continue;
					}
					if (nextCount === false) {
						nextCount = (_map$1 = new Go$Map(), _map$1);
					}
					_key$4 = styp; (nextCount || go$throwRuntimeError("assignment to entry in nil map"))[_key$4.go$key()] = { k: _key$4, v: 1 };
					if ((_entry$3 = count[t$1.go$key()], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$5 = styp; (nextCount || go$throwRuntimeError("assignment to entry in nil map"))[_key$5.go$key()] = { k: _key$5, v: 2 };
					}
					index = (go$sliceType(Go$Int)).nil;
					index = go$appendSlice(index, scan.index);
					index = go$append(index, i);
					next = go$append(next, new fieldScan.Ptr(styp, index));
					_i$1++;
				}
				_i++;
			}
			if (ok) {
				break;
			}
		}
		return [(_struct$3 = result, new StructField.Ptr(_struct$3.Name, _struct$3.PkgPath, _struct$3.Type, _struct$3.Tag, _struct$3.Offset, _struct$3.Index, _struct$3.Anonymous)), ok];
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	structType.Ptr.prototype.FieldByName = function(name) {
		var f, present, t, hasAnon, _ref, _i, i, _slice, _index, tf, _struct, _tuple, _struct$1, _struct$2, _tuple$1, _struct$3, _struct$4;
		f = new StructField.Ptr();
		present = false;
		t = this;
		hasAnon = false;
		if (!(name === "")) {
			_ref = t.fields;
			_i = 0;
			while (_i < _ref.length) {
				i = _i;
				tf = (_slice = t.fields, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (go$pointerIsEqual(tf.name, (go$ptrType(Go$String)).nil)) {
					hasAnon = true;
					_i++;
					continue;
				}
				if (tf.name.go$get() === name) {
					_tuple = [(_struct = t.Field(i), new StructField.Ptr(_struct.Name, _struct.PkgPath, _struct.Type, _struct.Tag, _struct.Offset, _struct.Index, _struct.Anonymous)), true]; f = _tuple[0]; present = _tuple[1];
					return [(_struct$1 = f, new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous)), present];
				}
				_i++;
			}
		}
		if (!hasAnon) {
			return [(_struct$2 = f, new StructField.Ptr(_struct$2.Name, _struct$2.PkgPath, _struct$2.Type, _struct$2.Tag, _struct$2.Offset, _struct$2.Index, _struct$2.Anonymous)), present];
		}
		_tuple$1 = t.FieldByNameFunc((function(s) {
			return s === name;
		})); f = (_struct$3 = _tuple$1[0], new StructField.Ptr(_struct$3.Name, _struct$3.PkgPath, _struct$3.Type, _struct$3.Tag, _struct$3.Offset, _struct$3.Index, _struct$3.Anonymous)); present = _tuple$1[1];
		return [(_struct$4 = f, new StructField.Ptr(_struct$4.Name, _struct$4.PkgPath, _struct$4.Type, _struct$4.Tag, _struct$4.Offset, _struct$4.Index, _struct$4.Anonymous)), present];
	};
	structType.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	PtrTo = go$pkg.PtrTo = function(t) {
		return (t !== null && t.constructor === (go$ptrType(rtype)) ? t.go$val : go$typeAssertionFailed(t, (go$ptrType(rtype)))).ptrTo();
	};
	rtype.Ptr.prototype.ptrTo = function() {
			return go$ptrType(this.jsType).reflectType();
		};
	rtype.prototype.ptrTo = function() { return this.go$val.ptrTo(); };
	rtype.Ptr.prototype.Implements = function(u) {
		var t;
		t = this;
		if (go$interfaceIsEqual(u, null)) {
			throw go$panic(new Go$String("reflect: nil type passed to Type.Implements"));
		}
		if (!((u.Kind() === 20))) {
			throw go$panic(new Go$String("reflect: non-interface type passed to Type.Implements"));
		}
		return implements$1((u !== null && u.constructor === (go$ptrType(rtype)) ? u.go$val : go$typeAssertionFailed(u, (go$ptrType(rtype)))), t);
	};
	rtype.prototype.Implements = function(u) { return this.go$val.Implements(u); };
	rtype.Ptr.prototype.AssignableTo = function(u) {
		var t, uu;
		t = this;
		if (go$interfaceIsEqual(u, null)) {
			throw go$panic(new Go$String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = (u !== null && u.constructor === (go$ptrType(rtype)) ? u.go$val : go$typeAssertionFailed(u, (go$ptrType(rtype))));
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.go$val.AssignableTo(u); };
	rtype.Ptr.prototype.ConvertibleTo = function(u) {
		var t, uu;
		t = this;
		if (go$interfaceIsEqual(u, null)) {
			throw go$panic(new Go$String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = (u !== null && u.constructor === (go$ptrType(rtype)) ? u.go$val : go$typeAssertionFailed(u, (go$ptrType(rtype))));
		return !(convertOp(uu, t) === go$throwNilPointerError);
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.go$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var t, v, i, j, _slice, _index, tm, _slice$1, _index$1, vm, v$1, i$1, j$1, _slice$2, _index$2, tm$1, _slice$3, _index$3, vm$1;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.interfaceType;
		if (t.methods.length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.interfaceType;
			i = 0;
			j = 0;
			while (j < v.methods.length) {
				tm = (_slice = t.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				vm = (_slice$1 = v.methods, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				if (go$pointerIsEqual(vm.name, tm.name) && go$pointerIsEqual(vm.pkgPath, tm.pkgPath) && vm.typ === tm.typ) {
					i = i + 1 >> 0;
					if (i >= t.methods.length) {
						return true;
					}
				}
				j = j + 1 >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === (go$ptrType(uncommonType)).nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (j$1 < v$1.methods.length) {
			tm$1 = (_slice$2 = t.methods, _index$2 = i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			vm$1 = (_slice$3 = v$1.methods, _index$3 = j$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			if (go$pointerIsEqual(vm$1.name, tm$1.name) && go$pointerIsEqual(vm$1.pkgPath, tm$1.pkgPath) && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + 1 >> 0;
				if (i$1 >= t.methods.length) {
					return true;
				}
			}
			j$1 = j$1 + 1 >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var kind, _ref, t, v, _ref$1, _i, _slice, _index, typ, i, _slice$1, _index$1, _ref$2, _i$1, _slice$2, _index$2, typ$1, i$1, _slice$3, _index$3, t$1, v$1, t$2, v$2, _ref$3, _i$2, i$2, _slice$4, _index$4, tf, _slice$5, _index$5, vf;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_ref = kind;
		if (_ref === 17) {
			return go$interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_ref === 18) {
			if ((V.ChanDir() === 3) && go$interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && go$interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 19) {
			t = T.funcType;
			v = V.funcType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.length === v.in$2.length)) || !((t.out.length === v.out.length))) {
				return false;
			}
			_ref$1 = t.in$2;
			_i = 0;
			while (_i < _ref$1.length) {
				typ = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (!(typ === (_slice$1 = v.in$2, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))) {
					return false;
				}
				_i++;
			}
			_ref$2 = t.out;
			_i$1 = 0;
			while (_i$1 < _ref$2.length) {
				typ$1 = (_slice$2 = _ref$2, _index$2 = _i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
				i$1 = _i$1;
				if (!(typ$1 === (_slice$3 = v.out, _index$3 = i$1, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref === 20) {
			t$1 = T.interfaceType;
			v$1 = V.interfaceType;
			if ((t$1.methods.length === 0) && (v$1.methods.length === 0)) {
				return true;
			}
			return false;
		} else if (_ref === 21) {
			return go$interfaceIsEqual(T.Key(), V.Key()) && go$interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 22 || _ref === 23) {
			return go$interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 25) {
			t$2 = T.structType;
			v$2 = V.structType;
			if (!((t$2.fields.length === v$2.fields.length))) {
				return false;
			}
			_ref$3 = t$2.fields;
			_i$2 = 0;
			while (_i$2 < _ref$3.length) {
				i$2 = _i$2;
				tf = (_slice$4 = t$2.fields, _index$4 = i$2, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
				vf = (_slice$5 = v$2.fields, _index$5 = i$2, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
				if (!(go$pointerIsEqual(tf.name, vf.name)) && (go$pointerIsEqual(tf.name, (go$ptrType(Go$String)).nil) || go$pointerIsEqual(vf.name, (go$ptrType(Go$String)).nil) || !(tf.name.go$get() === vf.name.go$get()))) {
					return false;
				}
				if (!(go$pointerIsEqual(tf.pkgPath, vf.pkgPath)) && (go$pointerIsEqual(tf.pkgPath, (go$ptrType(Go$String)).nil) || go$pointerIsEqual(vf.pkgPath, (go$ptrType(Go$String)).nil) || !(tf.pkgPath.go$get() === vf.pkgPath.go$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!(go$pointerIsEqual(tf.tag, vf.tag)) && (go$pointerIsEqual(tf.tag, (go$ptrType(Go$String)).nil) || go$pointerIsEqual(vf.tag, (go$ptrType(Go$String)).nil) || !(tf.tag.go$get() === vf.tag.go$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	SliceOf = go$pkg.SliceOf = function(t) {
			return go$sliceType(t.jsType).reflectType();
		};
	toType = function(t) {
		if (t === (go$ptrType(rtype)).nil) {
			return null;
		}
		return t;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.go$val;
		return (((((f >>> 4 >>> 0)) & 31) >>> 0) >>> 0);
	};
	go$ptrType(flag).prototype.kind = function() { return new flag(this.go$get()).kind(); };
	ValueError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + (new Kind(e.Kind)).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.go$val.Error(); };
	methodName = function() {
			return "?FIXME?";
		};
	Value.Ptr.prototype.iword = function() {
			if ((this.flag & flagIndir) !== 0 && this.typ.Kind() !== Array && this.typ.Kind() !== Struct) {
				return this.val.go$get();
			}
			return this.val;
		};
	Value.prototype.iword = function() { return this.go$val.iword(); };
	flag.prototype.mustBe = function(expected) {
		var f, k;
		f = this.go$val;
		k = (new flag(f)).kind();
		if (!((k === expected))) {
			throw go$panic(new ValueError.Ptr(methodName(), k));
		}
	};
	go$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.go$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.go$val;
		if (f === 0) {
			throw go$panic(new ValueError.Ptr(methodName(), 0));
		}
		if (!((((f & 1) >>> 0) === 0))) {
			throw go$panic(new Go$String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	go$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.go$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.go$val;
		if (f === 0) {
			throw go$panic(new ValueError.Ptr(methodName(), 0));
		}
		if (!((((f & 1) >>> 0) === 0))) {
			throw go$panic(new Go$String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 4) >>> 0) === 0) {
			throw go$panic(new Go$String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	go$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.go$get()).mustBeAssignable(); };
	Value.Ptr.prototype.Addr = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (((v.flag & 4) >>> 0) === 0) {
			throw go$panic(new Go$String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.Ptr(v.typ.ptrTo(), v.val, ((((v.flag & 1) >>> 0)) | 352) >>> 0);
	};
	Value.prototype.Addr = function() { return this.go$val.Addr(); };
	Value.Ptr.prototype.Bool = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(1);
		if (!((((v.flag & 2) >>> 0) === 0))) {
			return v.val.go$get();
		}
		return v.val;
	};
	Value.prototype.Bool = function() { return this.go$val.Bool(); };
	Value.Ptr.prototype.Bytes = function() {
			this.mustBe(Slice);
			if (this.typ.Elem().Kind() !== Uint8) {
				throw go$panic(new Go$String("reflect.Value.Bytes of non-byte slice"));
			}
			return this.iword();
		};
	Value.prototype.Bytes = function() { return this.go$val.Bytes(); };
	Value.Ptr.prototype.runes = function() {
			this.mustBe(Slice);
			if (this.typ.Elem().Kind() !== Int32) {
				throw new go$panic(new Go$String("reflect.Value.Bytes of non-rune slice"));
			}
			return this.iword();
		};
	Value.prototype.runes = function() { return this.go$val.runes(); };
	Value.Ptr.prototype.CanAddr = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		return !((((v.flag & 4) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.go$val.CanAddr(); };
	Value.Ptr.prototype.CanSet = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		return ((v.flag & 5) >>> 0) === 4;
	};
	Value.prototype.CanSet = function() { return this.go$val.CanSet(); };
	Value.Ptr.prototype.Call = function(in$1) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(19);
		(new flag(v.flag)).mustBeExported();
		return v.call("Call", in$1);
	};
	Value.prototype.Call = function(in$1) { return this.go$val.Call(in$1); };
	Value.Ptr.prototype.CallSlice = function(in$1) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(19);
		(new flag(v.flag)).mustBeExported();
		return v.call("CallSlice", in$1);
	};
	Value.prototype.CallSlice = function(in$1) { return this.go$val.CallSlice(in$1); };
	Value.Ptr.prototype.call = function(op, args) {
			var t = this.typ, fn, rcvr;

			if ((this.flag & flagMethod) !== 0) {
				var tuple = methodReceiver(op, this, this.flag >> flagMethodShift);
				t = tuple[0];
				fn = tuple[1];
				rcvr = tuple[2];
			} else {
				fn = this.iword();
			}

			if (fn === go$throwNilPointerError) {
				throw go$panic(new Go$String("reflect.Value.Call: call of nil function"));
			}

			var isSlice = (op === "CallSlice");
			var n = t.NumIn();
			if (isSlice) {
				if (!t.IsVariadic()) {
					throw go$panic(new Go$String("reflect: CallSlice of non-variadic function"));
				}
				if (args.length < n) {
					throw go$panic(new Go$String("reflect: CallSlice with too few input arguments"));
				}
				if (args.length > n) {
					throw go$panic(new Go$String("reflect: CallSlice with too many input arguments"));
				}
			} else {
				if (t.IsVariadic()) {
					n--;
				}
				if (args.length < n) {
					throw go$panic(new Go$String("reflect: Call with too few input arguments"));
				}
				if (!t.IsVariadic() && args.length > n) {
					throw go$panic(new Go$String("reflect: Call with too many input arguments"));
				}
			}
			var i;
			for (i = 0; i < args.length; i++) {
				if (args.array[args.offset + i].Kind() === Invalid) {
					throw go$panic(new Go$String("reflect: " + op + " using zero Value argument"));
				}
			}
			for (i = 0; i < n; i++) {
				var xt = args.array[args.offset + i].Type(), targ = t.In(i);
				if (!xt.AssignableTo(targ)) {
					throw go$panic(new Go$String("reflect: " + op + " using " + xt.String() + " as type " + targ.String()));
				}
			}
			if (!isSlice && t.IsVariadic()) {
				var m = args.length - n;
				var slice = MakeSlice(t.In(n), m, m);
				var elem = t.In(n).Elem();
				for (i = 0; i < m; i++) {
					var x = args.array[args.offset + n + i];
					var xt = x.Type();
					if (!xt.AssignableTo(elem)) {
						throw go$panic(new Go$String("reflect: cannot use " + xt.String() + " as type " + elem.String() + " in " + op));
					}
					slice.Index(i).Set(x);
				}
				args = new (go$sliceType(Value))(go$sliceToArray(args).slice(0, n).concat([slice]));
			}

			if (args.length !== t.NumIn()) {
				throw go$panic(new Go$String("reflect.Value.Call: wrong argument count"));
			}

			var argsArray = new Go$Array(t.NumIn());
			for (i = 0; i < t.NumIn(); i++) {
				argsArray[i] = args.array[args.offset + i].assignTo("reflect.Value.Call", t.In(i), go$ptrType(go$emptyInterface).nil).iword();
			}
			var results = fn.apply(rcvr, argsArray);
			if (t.NumOut() === 0) {
				results = [];
			} else if (t.NumOut() === 1) {
				results = [results];
			}
			for (i = 0; i < t.NumOut(); i++) {
				var typ = t.Out(i);
				var flag = typ.Kind() << flagKindShift;
				results[i] = new Value.Ptr(typ, results[i], flag);
			}
			return new (go$sliceType(Value))(results);
		};
	Value.prototype.call = function() { return this.go$val.call(); };
	methodReceiver = function(op, v, i) {
			var m, t;
			if (v.typ.Kind() === Interface) {
				var tt = v.typ.interfaceType;
				if (i < 0 || i >= tt.methods.length) {
					throw go$panic(new Go$String("reflect: internal error: invalid method index"));
				}
				if (v.IsNil()) {
					throw go$panic(new Go$String("reflect: " + op + " of method on nil interface value"));
				}
				m = tt.methods.array[i];
				t = m.typ;
			} else {
				var ut = v.typ.uncommon();
				if (ut === uncommonType.Ptr.nil || i < 0 || i >= ut.methods.length) {
					throw go$panic(new Go$String("reflect: internal error: invalid method index"));
				}
				m = ut.methods.array[i];
				t = m.mtyp;
			}
			if (m.pkgPath.go$get !== go$throwNilPointerError) {
				throw go$panic(new Go$String("reflect: " + op + " of unexported method"));
			}
			var name = m.name.go$get()
			if (go$reservedKeywords.indexOf(name) !== -1) {
				name += "$";
			}
			var rcvr = v.iword();
			if (isWrapped(v.typ)) {
				rcvr = new v.typ.jsType(rcvr);
			}
			return [t, rcvr[name], rcvr];
		};
	Value.Ptr.prototype.Cap = function() {
			var k = this.kind();
			switch (k) {
			case Slice:
				return this.iword().capacity;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Cap", k));
		};
	Value.prototype.Cap = function() { return this.go$val.Cap(); };
	Value.Ptr.prototype.Close = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		chanclose(v.iword());
	};
	Value.prototype.Close = function() { return this.go$val.Close(); };
	Value.Ptr.prototype.Complex = function() {
			return this.iword();
		};
	Value.prototype.Complex = function() { return this.go$val.Complex(); };
	Value.Ptr.prototype.Elem = function() {
			switch (this.kind()) {
			case Interface:
				var val = this.iword();
				if (val === null) {
					return new Value.Ptr();
				}
				if (val.constructor.kind === undefined) { // js.Object
					return new Value.Ptr(Go$String.reflectType(), go$toString(val), String << flagKindShift);
				}
				var typ = val.constructor.reflectType();
				var fl = this.flag & flagRO;
				fl |= typ.Kind() << flagKindShift;
				return new Value.Ptr(typ, val.go$val, fl);

			case Ptr:
				var val = this.iword();
				if (this.IsNil()) {
					return new Value.Ptr();
				}
				var tt = this.typ.ptrType;
				var fl = (this.flag & flagRO) | flagIndir | flagAddr;
				fl |= tt.elem.Kind() << flagKindShift;
				return new Value.Ptr(tt.elem, val, fl);
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Elem", this.kind()));
		};
	Value.prototype.Elem = function() { return this.go$val.Elem(); };
	Value.Ptr.prototype.Field = function(i) {
			this.mustBe(Struct);
			var tt = this.typ.structType;
			if (i < 0 || i >= tt.fields.length) {
				throw go$panic(new Go$String("reflect: Field index out of range"));
			}
			var field = tt.fields.array[i];
			var name = this.typ.jsType.fields[i][0];
			var typ = field.typ;
			var fl = this.flag & (flagRO | flagIndir | flagAddr);
			if (field.pkgPath.go$get !== go$throwNilPointerError) {
				fl |= flagRO;
			}
			fl |= typ.Kind() << flagKindShift;
			if ((this.flag & flagIndir) !== 0 && typ.Kind() !== Array && typ.Kind() !== Struct) {
				var struct = this.val;
				return new Value.Ptr(typ, new (go$ptrType(typ.jsType))(function() { return struct[name]; }, function(v) { struct[name] = v; }), fl);
			}
			return new Value.Ptr(typ, this.val[name], fl);
		};
	Value.prototype.Field = function() { return this.go$val.Field(); };
	Value.Ptr.prototype.FieldByIndex = function(index) {
		var _struct, v, _ref, _i, _slice, _index, x, i, _struct$1, _struct$2, _struct$3;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(25);
		_ref = index;
		_i = 0;
		while (_i < _ref.length) {
			x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				if ((v.Kind() === 22) && (v.Elem().Kind() === 25)) {
					v = (_struct$1 = v.Elem(), new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
				}
			}
			v = (_struct$2 = v.Field(x), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			_i++;
		}
		return (_struct$3 = v, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
	};
	Value.prototype.FieldByIndex = function(index) { return this.go$val.FieldByIndex(index); };
	Value.Ptr.prototype.FieldByName = function(name) {
		var _struct, v, _tuple, _struct$1, f, ok, _struct$2;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(25);
		_tuple = v.typ.FieldByName(name); f = (_struct$1 = _tuple[0], new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous)); ok = _tuple[1];
		if (ok) {
			return (_struct$2 = v.FieldByIndex(f.Index), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
	};
	Value.prototype.FieldByName = function(name) { return this.go$val.FieldByName(name); };
	Value.Ptr.prototype.FieldByNameFunc = function(match) {
		var _struct, v, _tuple, _struct$1, f, ok, _struct$2;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(25);
		_tuple = v.typ.FieldByNameFunc(match); f = (_struct$1 = _tuple[0], new StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous)); ok = _tuple[1];
		if (ok) {
			return (_struct$2 = v.FieldByIndex(f.Index), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.go$val.FieldByNameFunc(match); };
	Value.Ptr.prototype.Float = function() {
		var _struct, v, k, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 13) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return go$coerceFloat32(v.val.go$get());
			}
			return go$coerceFloat32(v.val);
		} else if (_ref === 14) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return v.val.go$get();
			}
			return v.val;
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.Float", k));
	};
	Value.prototype.Float = function() { return this.go$val.Float(); };
	Value.Ptr.prototype.Index = function(i) {
			var k = this.kind();
			switch (k) {
			case Array:
				var tt = this.typ.arrayType;
				if (i < 0 || i >= tt.len) {
					throw go$panic(new Go$String("reflect: array index out of range"));
				}
				var typ = tt.elem;
				var fl = this.flag & (flagRO | flagIndir | flagAddr);
				fl |= typ.Kind() << flagKindShift;
				if ((this.flag & flagIndir) !== 0 && typ.Kind() !== Array && typ.Kind() !== Struct) {
					var array = this.val;
					return new Value.Ptr(typ, new (go$ptrType(typ.jsType))(function() { return array[i]; }, function(v) { array[i] = v; }), fl);
				}
				return new Value.Ptr(typ, this.iword()[i], fl);
			case Slice:
				if (i < 0 || i >= this.iword().length) {
					throw go$panic(new Go$String("reflect: slice index out of range"));
				}
				var typ = this.typ.sliceType.elem;
				var fl = flagAddr | flagIndir | (this.flag & flagRO);
				fl |= typ.Kind() << flagKindShift;
				i += this.iword().offset;
				var array = this.iword().array;
				if (typ.Kind() === Struct) {
					return new Value.Ptr(typ, array[i], fl);
				}
				return new Value.Ptr(typ, new (go$ptrType(typ.jsType))(function() { return array[i]; }, function(v) { array[i] = v; }), fl);
			case String:
				var string = this.iword();
				if (i < 0 || i >= string.length) {
					throw go$panic(new Go$String("reflect: string index out of range"));
				}
				var fl = (this.flag & flagRO) | (Uint8 << flagKindShift);
				return new Value.Ptr(uint8Type, string.charCodeAt(i), fl);
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Index", k));
		};
	Value.prototype.Index = function() { return this.go$val.Index(); };
	Value.Ptr.prototype.Int = function() {
		var _struct, v, k, p, v$1, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		p = 0;
		if (!((((v.flag & 2) >>> 0) === 0))) {
			p = v.val;
		} else {
			p = new (go$ptrType(Go$UnsafePointer))(function() { return v.val; }, function(v$1) { v.val = v$1;; });
		}
		_ref = k;
		if (_ref === 2) {
			return new Go$Int64(0, p.go$get());
		} else if (_ref === 3) {
			return new Go$Int64(0, p.go$get());
		} else if (_ref === 4) {
			return new Go$Int64(0, p.go$get());
		} else if (_ref === 5) {
			return new Go$Int64(0, p.go$get());
		} else if (_ref === 6) {
			return p.go$get();
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.Int", k));
	};
	Value.prototype.Int = function() { return this.go$val.Int(); };
	Value.Ptr.prototype.CanInterface = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.flag === 0) {
			throw go$panic(new ValueError.Ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 1) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.go$val.CanInterface(); };
	Value.Ptr.prototype.Interface = function() {
		var i, _struct, v, _struct$1;
		i = null;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		i = valueInterface((_struct$1 = v, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), true);
		return i;
	};
	Value.prototype.Interface = function() { return this.go$val.Interface(); };
	valueInterface = function(v, safe) {
			if (v.flag === 0) {
				throw go$panic(new ValueError.Ptr("reflect.Value.Interface", 0));
			}
			if (safe && (v.flag & flagRO) !== 0) {
				throw go$panic(new Go$String("reflect.Value.Interface: cannot return value obtained from unexported field or method"))
			}
			if ((v.flag & flagMethod) !== 0) {
				v = makeMethodValue("Interface", v);
			}
			if (isWrapped(v.typ)) {
				return new v.typ.jsType(v.iword());
			}
			return v.iword();
		};
	Value.Ptr.prototype.InterfaceData = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(20);
		return go$mapArray(v.val, function(entry) { return entry; });
	};
	Value.prototype.InterfaceData = function() { return this.go$val.InterfaceData(); };
	Value.Ptr.prototype.IsNil = function() {
			switch (this.kind()) {
			case Chan:
			case Ptr:
			case Slice:
				return this.iword() === this.typ.jsType.nil;
			case Func:
				return this.iword() === go$throwNilPointerError;
			case Map:
				return this.iword() === false;
			case Interface:
				return this.iword() === null;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.IsNil", this.kind()));
		};
	Value.prototype.IsNil = function() { return this.go$val.IsNil(); };
	Value.Ptr.prototype.IsValid = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.go$val.IsValid(); };
	Value.Ptr.prototype.Kind = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		return (new flag(v.flag)).kind();
	};
	Value.prototype.Kind = function() { return this.go$val.Kind(); };
	Value.Ptr.prototype.Len = function() {
			var k = this.kind();
			switch (k) {
			case Array:
			case Slice:
			case String:
				return this.iword().length;
			case Map:
				return go$keys(this.iword()).length;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Len", k));
		};
	Value.prototype.Len = function() { return this.go$val.Len(); };
	Value.Ptr.prototype.MapIndex = function(key) {
		var _struct, v, tt, _struct$1, _tuple, word, ok, typ, fl;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(21);
		tt = v.typ.mapType;
		key = (_struct$1 = key.assignTo("reflect.Value.MapIndex", tt.key, (go$ptrType(go$emptyInterface)).nil), new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		_tuple = mapaccess(v.typ, v.iword(), key.iword()); word = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 1) >>> 0;
		if (typ.size > 4) {
			fl = (fl | 2) >>> 0;
		}
		fl = (fl | (((typ.Kind() >>> 0) << 4 >>> 0))) >>> 0;
		return new Value.Ptr(typ, word, fl);
	};
	Value.prototype.MapIndex = function(key) { return this.go$val.MapIndex(key); };
	Value.Ptr.prototype.MapKeys = function() {
		var _struct, v, tt, keyType, fl, m, mlen, it, a, i, _tuple, keyWord, ok, _slice, _index;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(21);
		tt = v.typ.mapType;
		keyType = tt.key;
		fl = (v.flag & 1) >>> 0;
		fl = (fl | (((keyType.Kind() >>> 0) << 4 >>> 0))) >>> 0;
		if (keyType.size > 4) {
			fl = (fl | 2) >>> 0;
		}
		m = v.iword();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = (go$sliceType(Value)).make(mlen, 0, function() { return new Value.Ptr(); });
		i = 0;
		i = 0;
		while (i < a.length) {
			_tuple = mapiterkey(it); keyWord = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				break;
			}
			_slice = a; _index = i;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = new Value.Ptr(keyType, keyWord, fl)) : go$throwRuntimeError("index out of range");
			mapiternext(it);
			i = i + 1 >> 0;
		}
		return go$subslice(a, 0, i);
	};
	Value.prototype.MapKeys = function() { return this.go$val.MapKeys(); };
	Value.Ptr.prototype.Method = function(i) {
		var _struct, v, fl;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.typ === (go$ptrType(rtype)).nil) {
			throw go$panic(new ValueError.Ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0)) || i < 0 || i >= v.typ.NumMethod()) {
			throw go$panic(new Go$String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			throw go$panic(new Go$String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 3) >>> 0;
		fl = (fl | 304) >>> 0;
		fl = (fl | (((((i >>> 0) << 9 >>> 0) | 8) >>> 0))) >>> 0;
		return new Value.Ptr(v.typ, v.val, fl);
	};
	Value.prototype.Method = function(i) { return this.go$val.Method(i); };
	Value.Ptr.prototype.NumMethod = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.typ === (go$ptrType(rtype)).nil) {
			throw go$panic(new ValueError.Ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.go$val.NumMethod(); };
	Value.Ptr.prototype.MethodByName = function(name) {
		var _struct, v, _tuple, _struct$1, _struct$2, m, ok, _struct$3;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.typ === (go$ptrType(rtype)).nil) {
			throw go$panic(new ValueError.Ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
		}
		_tuple = v.typ.MethodByName(name); m = (_struct$1 = _tuple[0], new Method.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, (_struct$2 = _struct$1.Func, new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), _struct$1.Index)); ok = _tuple[1];
		if (!ok) {
			return new Value.Ptr((go$ptrType(rtype)).nil, 0, 0);
		}
		return (_struct$3 = v.Method(m.Index), new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
	};
	Value.prototype.MethodByName = function(name) { return this.go$val.MethodByName(name); };
	Value.Ptr.prototype.NumField = function() {
		var _struct, v, tt;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(25);
		tt = v.typ.structType;
		return tt.fields.length;
	};
	Value.prototype.NumField = function() { return this.go$val.NumField(); };
	Value.Ptr.prototype.OverflowComplex = function(x) {
		var _struct, v, k, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 15) {
			return overflowFloat32(x.real) || overflowFloat32(x.imag);
		} else if (_ref === 16) {
			return false;
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.OverflowComplex", k));
	};
	Value.prototype.OverflowComplex = function(x) { return this.go$val.OverflowComplex(x); };
	Value.Ptr.prototype.OverflowFloat = function(x) {
		var _struct, v, k, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 13) {
			return overflowFloat32(x);
		} else if (_ref === 14) {
			return false;
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.OverflowFloat", k));
	};
	Value.prototype.OverflowFloat = function(x) { return this.go$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.Ptr.prototype.OverflowInt = function(x) {
		var _struct, v, k, _ref, x$1, bitSize, trunc;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = go$shiftRightInt64((go$shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.high === trunc.high && x.low === trunc.low));
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.OverflowInt", k));
	};
	Value.prototype.OverflowInt = function(x) { return this.go$val.OverflowInt(x); };
	Value.Ptr.prototype.OverflowUint = function(x) {
		var _struct, v, k, _ref, x$1, bitSize, trunc;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = go$shiftRightUint64((go$shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.high === trunc.high && x.low === trunc.low));
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.OverflowUint", k));
	};
	Value.prototype.OverflowUint = function(x) { return this.go$val.OverflowUint(x); };
	Value.Ptr.prototype.Pointer = function() {
			var k = this.kind();
			switch (k) {
			case Chan:
			case Map:
			case Ptr:
			case Slice:
			case UnsafePointer:
				if (this.IsNil()) {
					return 0;
				}
				return this.iword();
			case Func:
				if (this.IsNil()) {
					return 0;
				}
				return 1;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.Pointer", k));
		};
	Value.prototype.Pointer = function() { return this.go$val.Pointer(); };
	Value.Ptr.prototype.Recv = function() {
		var x, ok, _struct, v, _tuple, _struct$1, _struct$2;
		x = new Value.Ptr();
		ok = false;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		_tuple = v.recv(false); x = (_struct$1 = _tuple[0], new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)); ok = _tuple[1];
		return [(_struct$2 = x, new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), ok];
	};
	Value.prototype.Recv = function() { return this.go$val.Recv(); };
	Value.Ptr.prototype.recv = function(nb) {
		var val, ok, _struct, v, tt, _tuple, word, selected, typ, fl, _struct$1;
		val = new Value.Ptr();
		ok = false;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 1) === 0) {
			throw go$panic(new Go$String("reflect: recv on send-only channel"));
		}
		_tuple = chanrecv(v.typ, v.iword(), nb); word = _tuple[0]; selected = _tuple[1]; ok = _tuple[2];
		if (selected) {
			typ = tt.elem;
			fl = (typ.Kind() >>> 0) << 4 >>> 0;
			if (typ.size > 4) {
				fl = (fl | 2) >>> 0;
			}
			val = new Value.Ptr(typ, word, fl);
		}
		return [(_struct$1 = val, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), ok];
	};
	Value.prototype.recv = function(nb) { return this.go$val.recv(nb); };
	Value.Ptr.prototype.Send = function(x) {
		var _struct, v, _struct$1;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		v.send((_struct$1 = x, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), false);
	};
	Value.prototype.Send = function(x) { return this.go$val.Send(x); };
	Value.Ptr.prototype.send = function(x, nb) {
		var selected, _struct, v, tt, _struct$1;
		selected = false;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 2) === 0) {
			throw go$panic(new Go$String("reflect: send on recv-only channel"));
		}
		(new flag(x.flag)).mustBeExported();
		x = (_struct$1 = x.assignTo("reflect.Value.Send", tt.elem, (go$ptrType(go$emptyInterface)).nil), new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		selected = chansend(v.typ, v.iword(), x.iword(), nb);
		return selected;
	};
	Value.prototype.send = function(x, nb) { return this.go$val.send(x, nb); };
	Value.Ptr.prototype.Set = function(x) {
			this.mustBeAssignable();
			x.mustBeExported();
			if ((this.flag & flagIndir) !== 0) {
				switch (this.typ.Kind()) {
				case Array:
					go$copyArray(this.val, x.val);
					return;
				case Interface:
					this.val.go$set(valueInterface(x, false));
					return;
				case Struct:
					copyStruct(this.val, x.val, this.typ);
					return;
				default:
					this.val.go$set(x.iword());
					return;
				}
			}
			this.val = x.val;
		};
	Value.prototype.Set = function() { return this.go$val.Set(); };
	Value.Ptr.prototype.SetBool = function(x) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(1);
		v.val.go$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.go$val.SetBool(x); };
	Value.Ptr.prototype.SetBytes = function(x) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			throw go$panic(new Go$String("reflect.Value.SetBytes of non-byte slice"));
		}
		v.val.go$set(x);
	};
	Value.prototype.SetBytes = function(x) { return this.go$val.SetBytes(x); };
	Value.Ptr.prototype.SetComplex = function(x) {
			this.mustBeAssignable();
			var k = this.kind();
			switch (k) {
			case Complex64:
			case Complex128:
				this.val.go$set(new this.typ.jsType(x.real, x.imag));
				return;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.SetComplex", k));
		};
	Value.prototype.SetComplex = function() { return this.go$val.SetComplex(); };
	Value.Ptr.prototype.SetFloat = function(x) {
		var _struct, v, k, _ref;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		k = (new flag(v.flag)).kind();
		_ref = k;
		if (_ref === 13) {
			v.val.go$set(x);
		} else if (_ref === 14) {
			v.val.go$set(x);
		} else {
			throw go$panic(new ValueError.Ptr("reflect.Value.SetFloat", k));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.go$val.SetFloat(x); };
	Value.Ptr.prototype.SetInt = function(x) {
			this.mustBeAssignable();
			var k = this.kind();
			switch (k) {
			case Int:
			case Int8:
			case Int16:
			case Int32:
				this.val.go$set(go$flatten64(x));
				return;
			case Int64:
				this.val.go$set(new this.typ.jsType(x.high, x.low));
				return;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.SetInt", k));
		};
	Value.prototype.SetInt = function() { return this.go$val.SetInt(); };
	Value.Ptr.prototype.SetLen = function(n) {
			this.mustBeAssignable();
			this.mustBe(Slice);
			var s = this.val.go$get();
			if (n < 0 || n > s.capacity) {
				throw go$panic(new Go$String("reflect: slice length out of range in SetLen"));
			}
			var newSlice = new this.typ.jsType(s.array);
			newSlice.offset = s.offset;
			newSlice.length = n;
			newSlice.capacity = s.capacity;
			this.val.go$set(newSlice);
		};
	Value.prototype.SetLen = function() { return this.go$val.SetLen(); };
	Value.Ptr.prototype.SetCap = function(n) {
			this.mustBeAssignable();
			this.mustBe(Slice);
			var s = this.val.go$get();
			if (n < s.length || n > s.capacity) {
				throw go$panic(new Go$String("reflect: slice capacity out of range in SetCap"));
			}
			var newSlice = new this.typ.jsType(s.array);
			newSlice.offset = s.offset;
			newSlice.length = s.length;
			newSlice.capacity = n;
			this.val.go$set(newSlice);
		};
	Value.prototype.SetCap = function() { return this.go$val.SetCap(); };
	Value.Ptr.prototype.SetMapIndex = function(key, val) {
		var _struct, v, tt, _struct$1, _struct$2;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(21);
		(new flag(v.flag)).mustBeExported();
		(new flag(key.flag)).mustBeExported();
		tt = v.typ.mapType;
		key = (_struct$1 = key.assignTo("reflect.Value.SetMapIndex", tt.key, (go$ptrType(go$emptyInterface)).nil), new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		if (!(val.typ === (go$ptrType(rtype)).nil)) {
			(new flag(val.flag)).mustBeExported();
			val = (_struct$2 = val.assignTo("reflect.Value.SetMapIndex", tt.elem, (go$ptrType(go$emptyInterface)).nil), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		mapassign(v.typ, v.iword(), key.iword(), val.iword(), !(val.typ === (go$ptrType(rtype)).nil));
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.go$val.SetMapIndex(key, val); };
	Value.Ptr.prototype.SetUint = function(x) {
			this.mustBeAssignable();
			var k = this.kind();
			switch (k) {
			case Uint:
			case Uint8:
			case Uint16:
			case Uint32:
			case Uintptr:
				this.val.go$set(x.low);
				return;
			case Uint64:
				this.val.go$set(new this.typ.jsType(x.high, x.low));
				return;
			}
			throw go$panic(new ValueError.Ptr("reflect.Value.SetUint", k));
		};
	Value.prototype.SetUint = function() { return this.go$val.SetUint(); };
	Value.Ptr.prototype.SetPointer = function(x) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(26);
		v.val.go$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.go$val.SetPointer(x); };
	Value.Ptr.prototype.SetString = function(x) {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBeAssignable();
		(new flag(v.flag)).mustBe(24);
		v.val.go$set(x);
	};
	Value.prototype.SetString = function(x) { return this.go$val.SetString(x); };
	Value.Ptr.prototype.Slice = function(i, j) {
			var typ, s, cap;
			var kind = this.kind();
			switch (kind) {
			case Array:
				if ((this.flag & flagAddr) === 0) {
					throw go$panic(new Go$String("reflect.Value.Slice: slice of unaddressable array"));
				}
				var tt = this.typ.arrayType;
				cap = tt.len;
				typ = SliceOf(tt.elem);
				s = new typ.jsType(this.iword());
				break;
			case Slice:
				typ = this.typ.sliceType;
				s = this.iword();
				cap = s.capacity;
				break;
			case String:
				s = this.iword();
				if (i < 0 || j < i || j > s.length) {
					throw go$panic(new Go$String("reflect.Value.Slice: string slice index out of bounds"));
				}
				return new Value.Ptr(this.typ, s.substring(i, j), this.flag);
			default:
				throw go$panic(new ValueError.Ptr("reflect.Value.Slice", kind));
			}

			if (i < 0 || j < i || j > cap) {
				throw go$panic(new Go$String("reflect.Value.Slice: slice index out of bounds"));
			}

			var fl = (this.flag & flagRO) | (Slice << flagKindShift);
			return new Value.Ptr(typ.common(), go$subslice(s, i, j), fl);
		};
	Value.prototype.Slice = function() { return this.go$val.Slice(); };
	Value.Ptr.prototype.Slice3 = function(i, j, k) {
			var typ, s, cap;
			var kind = this.kind();
			switch (kind) {
			case Array:
				if ((this.flag & flagAddr) === 0) {
					throw go$panic(new Go$String("reflect.Value.Slice3: slice of unaddressable array"));
				}
				var tt = this.typ.arrayType;
				cap = tt.len;
				typ = SliceOf(tt.elem);
				s = new typ.jsType(this.iword());
				break;
			case Slice:
				typ = this.typ.sliceType;
				s = this.iword();
				cap = s.capacity;
				break;
			default:
				throw go$panic(new ValueError.Ptr("reflect.Value.Slice3", kind));
			}

			if (i < 0 || j < i || k < j || k > cap) {
				throw go$panic(new Go$String("reflect.Value.Slice3: slice index out of bounds"));
			}

			var fl = (this.flag & flagRO) | (Slice << flagKindShift);
			return new Value.Ptr(typ.common(), go$subslice(s, i, j, k), fl);
		};
	Value.prototype.Slice3 = function() { return this.go$val.Slice3(); };
	Value.Ptr.prototype.String = function() {
			switch (this.kind()) {
			case Invalid:
				return "<invalid Value>";
			case String:
				return this.iword();
			}
			return "<" + this.typ.String() + " Value>";
		};
	Value.prototype.String = function() { return this.go$val.String(); };
	Value.Ptr.prototype.TryRecv = function() {
		var x, ok, _struct, v, _tuple, _struct$1, _struct$2;
		x = new Value.Ptr();
		ok = false;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		_tuple = v.recv(true); x = (_struct$1 = _tuple[0], new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)); ok = _tuple[1];
		return [(_struct$2 = x, new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), ok];
	};
	Value.prototype.TryRecv = function() { return this.go$val.TryRecv(); };
	Value.Ptr.prototype.TrySend = function(x) {
		var _struct, v, _struct$1;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		(new flag(v.flag)).mustBe(18);
		(new flag(v.flag)).mustBeExported();
		return v.send((_struct$1 = x, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), true);
	};
	Value.prototype.TrySend = function(x) { return this.go$val.TrySend(x); };
	Value.Ptr.prototype.Type = function() {
		var _struct, v, f, i, tt, _slice, _index, m, ut, _slice$1, _index$1, m$1;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		f = v.flag;
		if (f === 0) {
			throw go$panic(new ValueError.Ptr("reflect.Value.Type", 0));
		}
		if (((f & 8) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 9 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.interfaceType;
			if (i < 0 || i >= tt.methods.length) {
				throw go$panic(new Go$String("reflect: internal error: invalid method index"));
			}
			m = (_slice = tt.methods, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === (go$ptrType(uncommonType)).nil || i < 0 || i >= ut.methods.length) {
			throw go$panic(new Go$String("reflect: internal error: invalid method index"));
		}
		m$1 = (_slice$1 = ut.methods, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.go$val.Type(); };
	Value.Ptr.prototype.Uint = function() {
		var _struct, v, k, p, v$1, _ref, x;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		k = (new flag(v.flag)).kind();
		p = 0;
		if (!((((v.flag & 2) >>> 0) === 0))) {
			p = v.val;
		} else {
			p = new (go$ptrType(Go$UnsafePointer))(function() { return v.val; }, function(v$1) { v.val = v$1;; });
		}
		_ref = k;
		if (_ref === 7) {
			return new Go$Uint64(0, p.go$get());
		} else if (_ref === 8) {
			return new Go$Uint64(0, p.go$get());
		} else if (_ref === 9) {
			return new Go$Uint64(0, p.go$get());
		} else if (_ref === 10) {
			return new Go$Uint64(0, p.go$get());
		} else if (_ref === 11) {
			return p.go$get();
		} else if (_ref === 12) {
			return (x = p.go$get(), new Go$Uint64(0, x.constructor === Number ? x : 1));
		}
		throw go$panic(new ValueError.Ptr("reflect.Value.Uint", k));
	};
	Value.prototype.Uint = function() { return this.go$val.Uint(); };
	Value.Ptr.prototype.UnsafeAddr = function() {
		var _struct, v;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (v.typ === (go$ptrType(rtype)).nil) {
			throw go$panic(new ValueError.Ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 4) >>> 0) === 0) {
			throw go$panic(new Go$String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.val;
	};
	Value.prototype.UnsafeAddr = function() { return this.go$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		if (!(go$interfaceIsEqual(t1, t2))) {
			throw go$panic(new Go$String(what + ": " + t1.String() + " != " + t2.String()));
		}
	};
	Copy = go$pkg.Copy = function(dst, src) {
			var dk = dst.kind();
			if (dk !== Array && dk !== Slice) {
				throw go$panic(new ValueError.Ptr("reflect.Copy", dk));
			}
			if (dk === Array) {
				dst.mustBeAssignable();
			}
			dst.mustBeExported();

			var sk = src.kind();
			if (sk !== Array && sk != Slice) {
				throw go$panic(new ValueError.Ptr("reflect.Copy", sk));
			}
			src.mustBeExported();

			typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem());

			var dstVal = dst.iword();
			if (dk === Array) {
				dstVal = new (go$sliceType(dst.typ.Elem().jsType))(dstVal);
			}
			var srcVal = src.iword();
			if (sk === Array) {
				srcVal = new (go$sliceType(src.typ.Elem().jsType))(srcVal);
			}
			return go$copySlice(dstVal, srcVal);
		};
	unsafe_New = function(typ) {
			switch (typ.Kind()) {
			case Struct:
				return new typ.jsType.Ptr();
			case Array:
				return zeroVal(typ);
			default:
				return go$newDataPointer(zeroVal(typ), typ.ptrTo().jsType);
			}
		};
	MakeSlice = go$pkg.MakeSlice = function(typ, len, cap) {
			if (typ.Kind() !== Slice) {
				throw go$panic(new Go$String("reflect.MakeSlice of non-slice type"));
			}
			if (len < 0) {
				throw go$panic(new Go$String("reflect.MakeSlice: negative len"));
			}
			if (cap < 0) {
				throw go$panic(new Go$String("reflect.MakeSlice: negative cap"));
			}
			if (len > cap) {
				throw go$panic(new Go$String("reflect.MakeSlice: len > cap"));
			}
			return new Value.Ptr(typ.common(), typ.jsType.make(len, cap, function() { return zeroVal(typ.Elem()); }), Slice << flagKindShift);
		};
	MakeMap = go$pkg.MakeMap = function(typ) {
		var m;
		if (!((typ.Kind() === 21))) {
			throw go$panic(new Go$String("reflect.MakeMap of non-map type"));
		}
		m = makemap((typ !== null && typ.constructor === (go$ptrType(rtype)) ? typ.go$val : go$typeAssertionFailed(typ, (go$ptrType(rtype)))));
		return new Value.Ptr(typ.common(), m, 336);
	};
	ValueOf = go$pkg.ValueOf = function(i) {
			if (i === null) {
				return new Value.Ptr();
			}
			if (i.constructor.kind === undefined) { // js.Object
				return new Value.Ptr(jsObject(), i, Interface << flagKindShift);
			}
			var typ = i.constructor.reflectType();
			return new Value.Ptr(typ, i.go$val, typ.Kind() << flagKindShift);
		};
	Zero = go$pkg.Zero = function(typ) {
			return new Value.Ptr(typ, zeroVal(typ), typ.Kind() << flagKindShift);
		};
	New = go$pkg.New = function(typ) {
		var ptr, fl;
		if (go$interfaceIsEqual(typ, null)) {
			throw go$panic(new Go$String("reflect: New(nil)"));
		}
		ptr = unsafe_New((typ !== null && typ.constructor === (go$ptrType(rtype)) ? typ.go$val : go$typeAssertionFailed(typ, (go$ptrType(rtype)))));
		fl = 352;
		return new Value.Ptr(typ.common().ptrTo(), ptr, fl);
	};
	Value.Ptr.prototype.assignTo = function(context, dst, target) {
		var _struct, v, _struct$1, _struct$2, fl, _struct$3, x;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (!((((v.flag & 8) >>> 0) === 0))) {
			v = (_struct$2 = makeMethodValue(context, (_struct$1 = v, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		if (directlyAssignable(dst, v.typ)) {
			v.typ = dst;
			fl = (v.flag & 7) >>> 0;
			fl = (fl | (((dst.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			return new Value.Ptr(dst, v.val, fl);
		} else if (implements$1(dst, v.typ)) {
			if (target === (go$ptrType(go$emptyInterface)).nil) {
				target = go$newDataPointer(null, (go$ptrType(go$emptyInterface)));
			}
			x = valueInterface((_struct$3 = v, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), false);
			if (dst.NumMethod() === 0) {
				target.go$set(x);
			} else {
				ifaceE2I(dst, x, target);
			}
			return new Value.Ptr(dst, target, 322);
		}
		throw go$panic(new Go$String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.go$val.assignTo(context, dst, target); };
	Value.Ptr.prototype.Convert = function(t) {
		var _struct, v, _struct$1, _struct$2, op, _struct$3, _struct$4;
		v = (_struct = this, new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (!((((v.flag & 8) >>> 0) === 0))) {
			v = (_struct$2 = makeMethodValue("Convert", (_struct$1 = v, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		op = convertOp(t.common(), v.typ);
		if (op === go$throwNilPointerError) {
			throw go$panic(new Go$String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + t.String()));
		}
		return (_struct$4 = op((_struct$3 = v, new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), t), new Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
	};
	Value.prototype.Convert = function(t) { return this.go$val.Convert(t); };
	convertOp = function(dst, src) {
		var _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6;
		_ref = src.Kind();
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			_ref$1 = dst.Kind();
			if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				return cvtInt;
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				return cvtIntFloat;
			} else if (_ref$1 === 24) {
				return cvtIntString;
			}
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			_ref$2 = dst.Kind();
			if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
				return cvtUint;
			} else if (_ref$2 === 13 || _ref$2 === 14) {
				return cvtUintFloat;
			} else if (_ref$2 === 24) {
				return cvtUintString;
			}
		} else if (_ref === 13 || _ref === 14) {
			_ref$3 = dst.Kind();
			if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
				return cvtFloatInt;
			} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
				return cvtFloatUint;
			} else if (_ref$3 === 13 || _ref$3 === 14) {
				return cvtFloat;
			}
		} else if (_ref === 15 || _ref === 16) {
			_ref$4 = dst.Kind();
			if (_ref$4 === 15 || _ref$4 === 16) {
				return cvtComplex;
			}
		} else if (_ref === 24) {
			if ((dst.Kind() === 23) && dst.Elem().PkgPath() === "") {
				_ref$5 = dst.Elem().Kind();
				if (_ref$5 === 8) {
					return cvtStringBytes;
				} else if (_ref$5 === 5) {
					return cvtStringRunes;
				}
			}
		} else if (_ref === 23) {
			if ((dst.Kind() === 24) && src.Elem().PkgPath() === "") {
				_ref$6 = src.Elem().Kind();
				if (_ref$6 === 8) {
					return cvtBytesString;
				} else if (_ref$6 === 5) {
					return cvtRunesString;
				}
			}
		}
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if ((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "" && haveIdenticalUnderlyingType(dst.Elem().common(), src.Elem().common())) {
			return cvtDirect;
		}
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return go$throwNilPointerError;
	};
	makeInt = function(f, bits, typ) {
			var val;
			switch (typ.Kind()) {
			case Int8:
				val = bits.low << 24 >> 24;
				break;
			case Int16:
				val = bits.low << 16 >> 16;
				break;
			case Int:
			case Int32:
				val = bits.low >> 0;
				break;
			case Int64:
				return new Value.Ptr(typ, go$newDataPointer(new Go$Int64(bits.high, bits.low), typ.ptrTo().jsType), f | flagIndir | (Int64 << flagKindShift));
			case Uint8:
				val = bits.low << 24 >>> 24;
				break;
			case Uint16:
				val = bits.low << 16 >>> 16;
				break;
			case Uint64:
				return new Value.Ptr(typ, go$newDataPointer(bits, typ.ptrTo().jsType), f | flagIndir | (Int64 << flagKindShift));
			case Uint:
			case Uint32:
			case Uintptr:
				val = bits.low >>> 0;
				break;
			}
			return new Value.Ptr(typ, val, f | (typ.Kind() << flagKindShift));
		};
	makeFloat = function(f, v, t) {
		var typ, ptr, w, _ref, v$1, v$2;
		typ = t.common();
		if (typ.size > 4) {
			ptr = unsafe_New(typ);
			ptr.go$set(v);
			return new Value.Ptr(typ, ptr, (((f | 2) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		w = 0;
		_ref = typ.size;
		if (_ref === 4) {
			new (go$ptrType(iword))(function() { return w; }, function(v$1) { w = v$1;; }).go$set(v);
		} else if (_ref === 8) {
			new (go$ptrType(iword))(function() { return w; }, function(v$2) { w = v$2;; }).go$set(v);
		}
		return new Value.Ptr(typ, w, (f | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	makeComplex = function(f, v, typ) {
			return new Value.Ptr(typ, new typ.jsType(v.real, v.imag), f | (typ.Kind() << flagKindShift));
		};
	makeString = function(f, v, t) {
		var _struct, ret, _struct$1;
		ret = (_struct = New(t).Elem(), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		ret.SetString(v);
		ret.flag = ((ret.flag & ~4) | f) >>> 0;
		return (_struct$1 = ret, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
	};
	cvtInt = function(v, t) {
		var x, _struct;
		return (_struct = makeInt((v.flag & 1) >>> 0, (x = v.Int(), new Go$Uint64(x.high, x.low)), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtUint = function(v, t) {
		var _struct;
		return (_struct = makeInt((v.flag & 1) >>> 0, v.Uint(), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtFloatInt = function(v, t) {
		var x, _struct;
		return (_struct = makeInt((v.flag & 1) >>> 0, (x = new Go$Int64(0, v.Float()), new Go$Uint64(x.high, x.low)), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtFloatUint = function(v, t) {
		var _struct;
		return (_struct = makeInt((v.flag & 1) >>> 0, new Go$Uint64(0, v.Float()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtIntFloat = function(v, t) {
		var _struct;
		return (_struct = makeFloat((v.flag & 1) >>> 0, go$flatten64(v.Int()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtUintFloat = function(v, t) {
		var _struct;
		return (_struct = makeFloat((v.flag & 1) >>> 0, go$flatten64(v.Uint()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtFloat = function(v, t) {
		var _struct;
		return (_struct = makeFloat((v.flag & 1) >>> 0, v.Float(), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtComplex = function(v, t) {
		var _struct;
		return (_struct = makeComplex((v.flag & 1) >>> 0, v.Complex(), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtIntString = function(v, t) {
		var _struct;
		return (_struct = makeString((v.flag & 1) >>> 0, go$encodeRune(v.Int().low), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtUintString = function(v, t) {
		var _struct;
		return (_struct = makeString((v.flag & 1) >>> 0, go$encodeRune(v.Uint().low), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtBytesString = function(v, t) {
		var _struct;
		return (_struct = makeString((v.flag & 1) >>> 0, go$bytesToString(v.Bytes()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtStringBytes = function(v, typ) {
			return new Value.Ptr(typ, new typ.jsType(go$stringToBytes(v.iword())), (v.flag & flagRO) | (Slice << flagKindShift));
		};
	cvtRunesString = function(v, t) {
		var _struct;
		return (_struct = makeString((v.flag & 1) >>> 0, go$runesToString(v.runes()), t), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	cvtStringRunes = function(v, typ) {
			return new Value.Ptr(typ, new typ.jsType(go$stringToRunes(v.iword())), (v.flag & flagRO) | (Slice << flagKindShift));
		};
	cvtDirect = function(v, typ) {
			var srcVal = v.iword();
			if (srcVal === v.typ.jsType.nil) {
				return new Value.Ptr(typ, typ.jsType.nil, v.flag);
			}

			var val;
			switch (typ.Kind()) {
			case Chan:
				val = new typ.jsType();
				break;
			case Slice:
				val = new typ.jsType(srcVal.array);
				val.length = srcVal.length;
				val.cap = srcVal.cap;
				break;
			case Ptr:
				if (typ.Elem().Kind() === Struct) {
					if (typ.Elem() === v.typ.Elem()) {
						val = srcVal;
					}
					val = new typ.jsType();
					copyStruct(val, srcVal, typ.Elem());
					break;
				}
				val = new typ.jsType(srcVal.go$get, srcVal.go$set);
				break;
			case Struct:
				val = new typ.jsType.Ptr();
				copyStruct(val, srcVal, typ);
				break;
			case Array:
			case Func:
			case Interface:
			case Map:
			case String:
				val = srcVal;
				break;
			default:
				throw go$panic(new ValueError.Ptr("reflect.Convert", typ.Kind()));
			}
			return new Value.Ptr(typ, val, (v.flag & flagRO) | (typ.Kind() << flagKindShift));
		};
	cvtT2I = function(v, typ) {
		var target, _struct, x;
		target = go$newDataPointer(null, (go$ptrType(go$emptyInterface)));
		x = valueInterface((_struct = v, new Value.Ptr(_struct.typ, _struct.val, _struct.flag)), false);
		if (typ.NumMethod() === 0) {
			target.go$set(x);
		} else {
			ifaceE2I((typ !== null && typ.constructor === (go$ptrType(rtype)) ? typ.go$val : go$typeAssertionFailed(typ, (go$ptrType(rtype)))), x, target);
		}
		return new Value.Ptr(typ.common(), target, (((((v.flag & 1) >>> 0) | 2) >>> 0) | 320) >>> 0);
	};
	cvtI2I = function(v, typ) {
		var _struct, ret, _struct$1, _struct$2, _struct$3;
		if (v.IsNil()) {
			ret = (_struct = Zero(typ), new Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			ret.flag = (ret.flag | (((v.flag & 1) >>> 0))) >>> 0;
			return (_struct$1 = ret, new Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		return (_struct$3 = cvtT2I((_struct$2 = v.Elem(), new Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), typ), new Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
	};
	chanclose = function(ch) { go$notSupported("channels"); };
	chanrecv = function(t, ch, nb) { go$notSupported("channels"); };
	chansend = function(t, ch, val, nb) { go$notSupported("channels"); };
	makemap = function(t) {
			return new Go$Map();
		};
	mapaccess = function(t, m, key) {
			var entry = m[key.go$key ? key.go$key() : key];
			if (entry === undefined) {
				return [undefined, false];
			}
			return [makeIndir(t.Elem(), entry.v), true];
		};
	mapassign = function(t, m, key, val, ok) {
			if (!ok) {
				delete m[key.go$key ? key.go$key() : key];
				return;
			}
			if (t.Elem().kind === Struct) {
				var newVal = {};
				copyStruct(newVal, val, t.Elem());
				val = newVal;
			}
			m[key.go$key ? key.go$key() : key] = { k: key, v: val };
		};
	mapiterinit = function(t, m) {
			return {t: t, m: m, keys: go$keys(m), i: 0};
		};
	mapiterkey = function(it) {
			var key = it.keys[it.i];
			return [makeIndir(it.t.Key(), it.m[key].k), true];
		};
	mapiternext = function(it) {
			it.i++;
		};
	maplen = function(m) {
			return go$keys(m).length;
		};
	call = function() {
		throw go$panic("Native function not implemented: call");
	};
	ifaceE2I = function(t, src, dst) {
			dst.go$set(src);
		};

			var Invalid = 0;
			var Bool = 1;
			var Int = 2;
			var Int8 = 3;
			var Int16 = 4;
			var Int32 = 5;
			var Int64 = 6;
			var Uint = 7;
			var Uint8 = 8;
			var Uint16 = 9;
			var Uint32 = 10;
			var Uint64 = 11;
			var Uintptr = 12;
			var Float32 = 13;
			var Float64 = 14;
			var Complex64 = 15;
			var Complex128 = 16;
			var Array = 17;
			var Chan = 18;
			var Func = 19;
			var Interface = 20;
			var Map = 21;
			var Ptr = 22;
			var Slice = 23;
			var String = 24;
			var Struct = 25;
			var UnsafePointer = 26;

			var RecvDir = 1;
			var SendDir = 2;
			var BothDir = 3;

			var flagRO = 1;
			var flagIndir = 2;
			var flagAddr = 4;
			var flagMethod = 8;
			var flagKindShift = 4;
			var flagKindWidth = 5;
			var flagKindMask = 31;
			var flagMethodShift = 9;

			go$reflect = {
				rtype: rtype.Ptr, uncommonType: uncommonType.Ptr, method: method.Ptr, arrayType: arrayType.Ptr, chanType: chanType.Ptr, funcType: funcType.Ptr, interfaceType: interfaceType.Ptr, mapType: mapType.Ptr, ptrType: ptrType.Ptr, sliceType: sliceType.Ptr, structType: structType.Ptr,
				imethod: imethod.Ptr, structField: structField.Ptr,
				kinds: { Bool: Bool, Int: Int, Int8: Int8, Int16: Int16, Int32: Int32, Int64: Int64, Uint: Uint, Uint8: Uint8, Uint16: Uint16, Uint32: Uint32, Uint64: Uint64, Uintptr: Uintptr, Float32: Float32, Float64: Float64, Complex64: Complex64, Complex128: Complex128, Array: Array, Chan: Chan, Func: Func, Interface: Interface, Map: Map, Ptr: Ptr, Slice: Slice, String: String, Struct: Struct, UnsafePointer: UnsafePointer },
				RecvDir: RecvDir, SendDir: SendDir, BothDir: BothDir
			};

			var deepValueEqual = function(v1, v2, visited) {
				if (!v1.IsValid() || !v2.IsValid()) {
					return !v1.IsValid() && !v2.IsValid();
				}
				if (v1.Type() !== v2.Type()) {
					return false;
				}

				var i;
				switch(v1.Kind()) {
				case Array:
				case Map:
				case Slice:
				case Struct:
					for (i = 0; i < visited.length; i++) {
						var entry = visited[i];
						if (v1.val === entry[0] && v2.val === entry[1]) {
							return true;
						}
					}
					visited.push([v1.val, v2.val]);
				}

				switch(v1.Kind()) {
				case Array:
				case Slice:
					if (v1.Kind() === Slice) {
						if (v1.IsNil() !== v2.IsNil()) {
							return false;
						}
						if (v1.iword() === v2.iword()) {
							return true;
						}
					}
					var n = v1.Len();
					if (n !== v2.Len()) {
						return false;
					}
					for (i = 0; i < n; i++) {
						if (!deepValueEqual(v1.Index(i), v2.Index(i), visited)) {
							return false;
						}
					}
					return true;
				case Interface:
					if (v1.IsNil() || v2.IsNil()) {
						return v1.IsNil() && v2.IsNil();
					}
					return deepValueEqual(v1.Elem(), v2.Elem(), visited);
				case Ptr:
					return deepValueEqual(v1.Elem(), v2.Elem(), visited);
				case Struct:
					var n = v1.NumField();
					for (i = 0; i < n; i++) {
						if (!deepValueEqual(v1.Field(i), v2.Field(i), visited)) {
							return false;
						}
					}
					return true;
				case Map:
					if (v1.IsNil() !== v2.IsNil()) {
						return false;
					}
					if (v1.iword() === v2.iword()) {
						return true;
					}
					var keys = v1.MapKeys();
					if (keys.length !== v2.Len()) {
						return false;
					}
					for (i = 0; i < keys.length; i++) {
						var k = keys.array[i];
						if (!deepValueEqual(v1.MapIndex(k), v2.MapIndex(k), visited)) {
							return false;
						}
					}
					return true;
				case Func:
					return v1.IsNil() && v2.IsNil();
				}

				return go$interfaceIsEqual(valueInterface(v1, false), valueInterface(v2, false));
			};
			go$pkg.init = function() {
		Type.init([["Align", "", (go$funcType([], [Go$Int], false))], ["AssignableTo", "", (go$funcType([Type], [Go$Bool], false))], ["Bits", "", (go$funcType([], [Go$Int], false))], ["ChanDir", "", (go$funcType([], [ChanDir], false))], ["ConvertibleTo", "", (go$funcType([Type], [Go$Bool], false))], ["Elem", "", (go$funcType([], [Type], false))], ["Field", "", (go$funcType([Go$Int], [StructField], false))], ["FieldAlign", "", (go$funcType([], [Go$Int], false))], ["FieldByIndex", "", (go$funcType([(go$sliceType(Go$Int))], [StructField], false))], ["FieldByName", "", (go$funcType([Go$String], [StructField, Go$Bool], false))], ["FieldByNameFunc", "", (go$funcType([(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false))], ["Implements", "", (go$funcType([Type], [Go$Bool], false))], ["In", "", (go$funcType([Go$Int], [Type], false))], ["IsVariadic", "", (go$funcType([], [Go$Bool], false))], ["Key", "", (go$funcType([], [Type], false))], ["Kind", "", (go$funcType([], [Kind], false))], ["Len", "", (go$funcType([], [Go$Int], false))], ["Method", "", (go$funcType([Go$Int], [Method], false))], ["MethodByName", "", (go$funcType([Go$String], [Method, Go$Bool], false))], ["Name", "", (go$funcType([], [Go$String], false))], ["NumField", "", (go$funcType([], [Go$Int], false))], ["NumIn", "", (go$funcType([], [Go$Int], false))], ["NumMethod", "", (go$funcType([], [Go$Int], false))], ["NumOut", "", (go$funcType([], [Go$Int], false))], ["Out", "", (go$funcType([Go$Int], [Type], false))], ["PkgPath", "", (go$funcType([], [Go$String], false))], ["Size", "", (go$funcType([], [Go$Uintptr], false))], ["String", "", (go$funcType([], [Go$String], false))], ["common", "reflect", (go$funcType([], [(go$ptrType(rtype))], false))], ["uncommon", "reflect", (go$funcType([], [(go$ptrType(uncommonType))], false))]]);
		Kind.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(Kind)).methods = [["String", "", [], [Go$String], false, -1]];
		rtype.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 9]];
		(go$ptrType(rtype)).methods = [["Align", "", [], [Go$Int], false, -1], ["AssignableTo", "", [Type], [Go$Bool], false, -1], ["Bits", "", [], [Go$Int], false, -1], ["ChanDir", "", [], [ChanDir], false, -1], ["ConvertibleTo", "", [Type], [Go$Bool], false, -1], ["Elem", "", [], [Type], false, -1], ["Field", "", [Go$Int], [StructField], false, -1], ["FieldAlign", "", [], [Go$Int], false, -1], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false, -1], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false, -1], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false, -1], ["Implements", "", [Type], [Go$Bool], false, -1], ["In", "", [Go$Int], [Type], false, -1], ["IsVariadic", "", [], [Go$Bool], false, -1], ["Key", "", [], [Type], false, -1], ["Kind", "", [], [Kind], false, -1], ["Len", "", [], [Go$Int], false, -1], ["Method", "", [Go$Int], [Method], false, -1], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, -1], ["Name", "", [], [Go$String], false, -1], ["NumField", "", [], [Go$Int], false, -1], ["NumIn", "", [], [Go$Int], false, -1], ["NumMethod", "", [], [Go$Int], false, -1], ["NumOut", "", [], [Go$Int], false, -1], ["Out", "", [Go$Int], [Type], false, -1], ["PkgPath", "", [], [Go$String], false, -1], ["Size", "", [], [Go$Uintptr], false, -1], ["String", "", [], [Go$String], false, -1], ["common", "reflect", [], [(go$ptrType(rtype))], false, -1], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false, -1], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 9]];
		rtype.init([["size", "size", "reflect", Go$Uintptr, ""], ["hash", "hash", "reflect", Go$Uint32, ""], ["_$2", "_", "reflect", Go$Uint8, ""], ["align", "align", "reflect", Go$Uint8, ""], ["fieldAlign", "fieldAlign", "reflect", Go$Uint8, ""], ["kind", "kind", "reflect", Go$Uint8, ""], ["alg", "alg", "reflect", (go$ptrType(Go$Uintptr)), ""], ["gc", "gc", "reflect", Go$UnsafePointer, ""], ["string", "string", "reflect", (go$ptrType(Go$String)), ""], ["uncommonType", "", "reflect", (go$ptrType(uncommonType)), ""], ["ptrToThis", "ptrToThis", "reflect", (go$ptrType(rtype)), ""]]);
		method.init([["name", "name", "reflect", (go$ptrType(Go$String)), ""], ["pkgPath", "pkgPath", "reflect", (go$ptrType(Go$String)), ""], ["mtyp", "mtyp", "reflect", (go$ptrType(rtype)), ""], ["typ", "typ", "reflect", (go$ptrType(rtype)), ""], ["ifn", "ifn", "reflect", Go$UnsafePointer, ""], ["tfn", "tfn", "reflect", Go$UnsafePointer, ""]]);
		(go$ptrType(uncommonType)).methods = [["Method", "", [Go$Int], [Method], false, -1], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, -1], ["Name", "", [], [Go$String], false, -1], ["NumMethod", "", [], [Go$Int], false, -1], ["PkgPath", "", [], [Go$String], false, -1], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, -1]];
		uncommonType.init([["name", "name", "reflect", (go$ptrType(Go$String)), ""], ["pkgPath", "pkgPath", "reflect", (go$ptrType(Go$String)), ""], ["methods", "methods", "reflect", (go$sliceType(method)), ""]]);
		ChanDir.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(ChanDir)).methods = [["String", "", [], [Go$String], false, -1]];
		arrayType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		(go$ptrType(arrayType)).methods = [["Align", "", [], [Go$Int], false, 0], ["AssignableTo", "", [Type], [Go$Bool], false, 0], ["Bits", "", [], [Go$Int], false, 0], ["ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "", [Type], [Go$Bool], false, 0], ["Elem", "", [], [Type], false, 0], ["Field", "", [Go$Int], [StructField], false, 0], ["FieldAlign", "", [], [Go$Int], false, 0], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false, 0], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false, 0], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false, 0], ["Implements", "", [Type], [Go$Bool], false, 0], ["In", "", [Go$Int], [Type], false, 0], ["IsVariadic", "", [], [Go$Bool], false, 0], ["Key", "", [], [Type], false, 0], ["Kind", "", [], [Kind], false, 0], ["Len", "", [], [Go$Int], false, 0], ["Method", "", [Go$Int], [Method], false, 0], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, 0], ["Name", "", [], [Go$String], false, 0], ["NumField", "", [], [Go$Int], false, 0], ["NumIn", "", [], [Go$Int], false, 0], ["NumMethod", "", [], [Go$Int], false, 0], ["NumOut", "", [], [Go$Int], false, 0], ["Out", "", [Go$Int], [Type], false, 0], ["PkgPath", "", [], [Go$String], false, 0], ["Size", "", [], [Go$Uintptr], false, 0], ["String", "", [], [Go$String], false, 0], ["common", "reflect", [], [(go$ptrType(rtype))], false, 0], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false, 0], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		arrayType.init([["rtype", "", "reflect", rtype, "reflect:\"array\""], ["elem", "elem", "reflect", (go$ptrType(rtype)), ""], ["slice", "slice", "reflect", (go$ptrType(rtype)), ""], ["len", "len", "reflect", Go$Uintptr, ""]]);
		chanType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		(go$ptrType(chanType)).methods = [["Align", "", [], [Go$Int], false, 0], ["AssignableTo", "", [Type], [Go$Bool], false, 0], ["Bits", "", [], [Go$Int], false, 0], ["ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "", [Type], [Go$Bool], false, 0], ["Elem", "", [], [Type], false, 0], ["Field", "", [Go$Int], [StructField], false, 0], ["FieldAlign", "", [], [Go$Int], false, 0], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false, 0], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false, 0], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false, 0], ["Implements", "", [Type], [Go$Bool], false, 0], ["In", "", [Go$Int], [Type], false, 0], ["IsVariadic", "", [], [Go$Bool], false, 0], ["Key", "", [], [Type], false, 0], ["Kind", "", [], [Kind], false, 0], ["Len", "", [], [Go$Int], false, 0], ["Method", "", [Go$Int], [Method], false, 0], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, 0], ["Name", "", [], [Go$String], false, 0], ["NumField", "", [], [Go$Int], false, 0], ["NumIn", "", [], [Go$Int], false, 0], ["NumMethod", "", [], [Go$Int], false, 0], ["NumOut", "", [], [Go$Int], false, 0], ["Out", "", [Go$Int], [Type], false, 0], ["PkgPath", "", [], [Go$String], false, 0], ["Size", "", [], [Go$Uintptr], false, 0], ["String", "", [], [Go$String], false, 0], ["common", "reflect", [], [(go$ptrType(rtype))], false, 0], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false, 0], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		chanType.init([["rtype", "", "reflect", rtype, "reflect:\"chan\""], ["elem", "elem", "reflect", (go$ptrType(rtype)), ""], ["dir", "dir", "reflect", Go$Uintptr, ""]]);
		funcType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		(go$ptrType(funcType)).methods = [["Align", "", [], [Go$Int], false, 0], ["AssignableTo", "", [Type], [Go$Bool], false, 0], ["Bits", "", [], [Go$Int], false, 0], ["ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "", [Type], [Go$Bool], false, 0], ["Elem", "", [], [Type], false, 0], ["Field", "", [Go$Int], [StructField], false, 0], ["FieldAlign", "", [], [Go$Int], false, 0], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false, 0], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false, 0], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false, 0], ["Implements", "", [Type], [Go$Bool], false, 0], ["In", "", [Go$Int], [Type], false, 0], ["IsVariadic", "", [], [Go$Bool], false, 0], ["Key", "", [], [Type], false, 0], ["Kind", "", [], [Kind], false, 0], ["Len", "", [], [Go$Int], false, 0], ["Method", "", [Go$Int], [Method], false, 0], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, 0], ["Name", "", [], [Go$String], false, 0], ["NumField", "", [], [Go$Int], false, 0], ["NumIn", "", [], [Go$Int], false, 0], ["NumMethod", "", [], [Go$Int], false, 0], ["NumOut", "", [], [Go$Int], false, 0], ["Out", "", [Go$Int], [Type], false, 0], ["PkgPath", "", [], [Go$String], false, 0], ["Size", "", [], [Go$Uintptr], false, 0], ["String", "", [], [Go$String], false, 0], ["common", "reflect", [], [(go$ptrType(rtype))], false, 0], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false, 0], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		funcType.init([["rtype", "", "reflect", rtype, "reflect:\"func\""], ["dotdotdot", "dotdotdot", "reflect", Go$Bool, ""], ["in$2", "in", "reflect", (go$sliceType((go$ptrType(rtype)))), ""], ["out", "out", "reflect", (go$sliceType((go$ptrType(rtype)))), ""]]);
		imethod.init([["name", "name", "reflect", (go$ptrType(Go$String)), ""], ["pkgPath", "pkgPath", "reflect", (go$ptrType(Go$String)), ""], ["typ", "typ", "reflect", (go$ptrType(rtype)), ""]]);
		interfaceType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		(go$ptrType(interfaceType)).methods = [["Align", "", [], [Go$Int], false, 0], ["AssignableTo", "", [Type], [Go$Bool], false, 0], ["Bits", "", [], [Go$Int], false, 0], ["ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "", [Type], [Go$Bool], false, 0], ["Elem", "", [], [Type], false, 0], ["Field", "", [Go$Int], [StructField], false, 0], ["FieldAlign", "", [], [Go$Int], false, 0], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false, 0], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false, 0], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false, 0], ["Implements", "", [Type], [Go$Bool], false, 0], ["In", "", [Go$Int], [Type], false, 0], ["IsVariadic", "", [], [Go$Bool], false, 0], ["Key", "", [], [Type], false, 0], ["Kind", "", [], [Kind], false, 0], ["Len", "", [], [Go$Int], false, 0], ["Method", "", [Go$Int], [Method], false, -1], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, -1], ["Name", "", [], [Go$String], false, 0], ["NumField", "", [], [Go$Int], false, 0], ["NumIn", "", [], [Go$Int], false, 0], ["NumMethod", "", [], [Go$Int], false, -1], ["NumOut", "", [], [Go$Int], false, 0], ["Out", "", [Go$Int], [Type], false, 0], ["PkgPath", "", [], [Go$String], false, 0], ["Size", "", [], [Go$Uintptr], false, 0], ["String", "", [], [Go$String], false, 0], ["common", "reflect", [], [(go$ptrType(rtype))], false, 0], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false, 0], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		interfaceType.init([["rtype", "", "reflect", rtype, "reflect:\"interface\""], ["methods", "methods", "reflect", (go$sliceType(imethod)), ""]]);
		mapType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		(go$ptrType(mapType)).methods = [["Align", "", [], [Go$Int], false, 0], ["AssignableTo", "", [Type], [Go$Bool], false, 0], ["Bits", "", [], [Go$Int], false, 0], ["ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "", [Type], [Go$Bool], false, 0], ["Elem", "", [], [Type], false, 0], ["Field", "", [Go$Int], [StructField], false, 0], ["FieldAlign", "", [], [Go$Int], false, 0], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false, 0], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false, 0], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false, 0], ["Implements", "", [Type], [Go$Bool], false, 0], ["In", "", [Go$Int], [Type], false, 0], ["IsVariadic", "", [], [Go$Bool], false, 0], ["Key", "", [], [Type], false, 0], ["Kind", "", [], [Kind], false, 0], ["Len", "", [], [Go$Int], false, 0], ["Method", "", [Go$Int], [Method], false, 0], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, 0], ["Name", "", [], [Go$String], false, 0], ["NumField", "", [], [Go$Int], false, 0], ["NumIn", "", [], [Go$Int], false, 0], ["NumMethod", "", [], [Go$Int], false, 0], ["NumOut", "", [], [Go$Int], false, 0], ["Out", "", [Go$Int], [Type], false, 0], ["PkgPath", "", [], [Go$String], false, 0], ["Size", "", [], [Go$Uintptr], false, 0], ["String", "", [], [Go$String], false, 0], ["common", "reflect", [], [(go$ptrType(rtype))], false, 0], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false, 0], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		mapType.init([["rtype", "", "reflect", rtype, "reflect:\"map\""], ["key", "key", "reflect", (go$ptrType(rtype)), ""], ["elem", "elem", "reflect", (go$ptrType(rtype)), ""], ["bucket", "bucket", "reflect", (go$ptrType(rtype)), ""], ["hmap", "hmap", "reflect", (go$ptrType(rtype)), ""]]);
		ptrType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		(go$ptrType(ptrType)).methods = [["Align", "", [], [Go$Int], false, 0], ["AssignableTo", "", [Type], [Go$Bool], false, 0], ["Bits", "", [], [Go$Int], false, 0], ["ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "", [Type], [Go$Bool], false, 0], ["Elem", "", [], [Type], false, 0], ["Field", "", [Go$Int], [StructField], false, 0], ["FieldAlign", "", [], [Go$Int], false, 0], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false, 0], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false, 0], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false, 0], ["Implements", "", [Type], [Go$Bool], false, 0], ["In", "", [Go$Int], [Type], false, 0], ["IsVariadic", "", [], [Go$Bool], false, 0], ["Key", "", [], [Type], false, 0], ["Kind", "", [], [Kind], false, 0], ["Len", "", [], [Go$Int], false, 0], ["Method", "", [Go$Int], [Method], false, 0], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, 0], ["Name", "", [], [Go$String], false, 0], ["NumField", "", [], [Go$Int], false, 0], ["NumIn", "", [], [Go$Int], false, 0], ["NumMethod", "", [], [Go$Int], false, 0], ["NumOut", "", [], [Go$Int], false, 0], ["Out", "", [Go$Int], [Type], false, 0], ["PkgPath", "", [], [Go$String], false, 0], ["Size", "", [], [Go$Uintptr], false, 0], ["String", "", [], [Go$String], false, 0], ["common", "reflect", [], [(go$ptrType(rtype))], false, 0], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false, 0], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		ptrType.init([["rtype", "", "reflect", rtype, "reflect:\"ptr\""], ["elem", "elem", "reflect", (go$ptrType(rtype)), ""]]);
		sliceType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		(go$ptrType(sliceType)).methods = [["Align", "", [], [Go$Int], false, 0], ["AssignableTo", "", [Type], [Go$Bool], false, 0], ["Bits", "", [], [Go$Int], false, 0], ["ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "", [Type], [Go$Bool], false, 0], ["Elem", "", [], [Type], false, 0], ["Field", "", [Go$Int], [StructField], false, 0], ["FieldAlign", "", [], [Go$Int], false, 0], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false, 0], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false, 0], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false, 0], ["Implements", "", [Type], [Go$Bool], false, 0], ["In", "", [Go$Int], [Type], false, 0], ["IsVariadic", "", [], [Go$Bool], false, 0], ["Key", "", [], [Type], false, 0], ["Kind", "", [], [Kind], false, 0], ["Len", "", [], [Go$Int], false, 0], ["Method", "", [Go$Int], [Method], false, 0], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, 0], ["Name", "", [], [Go$String], false, 0], ["NumField", "", [], [Go$Int], false, 0], ["NumIn", "", [], [Go$Int], false, 0], ["NumMethod", "", [], [Go$Int], false, 0], ["NumOut", "", [], [Go$Int], false, 0], ["Out", "", [Go$Int], [Type], false, 0], ["PkgPath", "", [], [Go$String], false, 0], ["Size", "", [], [Go$Uintptr], false, 0], ["String", "", [], [Go$String], false, 0], ["common", "reflect", [], [(go$ptrType(rtype))], false, 0], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false, 0], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		sliceType.init([["rtype", "", "reflect", rtype, "reflect:\"slice\""], ["elem", "elem", "reflect", (go$ptrType(rtype)), ""]]);
		structField.init([["name", "name", "reflect", (go$ptrType(Go$String)), ""], ["pkgPath", "pkgPath", "reflect", (go$ptrType(Go$String)), ""], ["typ", "typ", "reflect", (go$ptrType(rtype)), ""], ["tag", "tag", "reflect", (go$ptrType(Go$String)), ""], ["offset", "offset", "reflect", Go$Uintptr, ""]]);
		structType.methods = [["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		(go$ptrType(structType)).methods = [["Align", "", [], [Go$Int], false, 0], ["AssignableTo", "", [Type], [Go$Bool], false, 0], ["Bits", "", [], [Go$Int], false, 0], ["ChanDir", "", [], [ChanDir], false, 0], ["ConvertibleTo", "", [Type], [Go$Bool], false, 0], ["Elem", "", [], [Type], false, 0], ["Field", "", [Go$Int], [StructField], false, -1], ["FieldAlign", "", [], [Go$Int], false, 0], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [StructField], false, -1], ["FieldByName", "", [Go$String], [StructField, Go$Bool], false, -1], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [StructField, Go$Bool], false, -1], ["Implements", "", [Type], [Go$Bool], false, 0], ["In", "", [Go$Int], [Type], false, 0], ["IsVariadic", "", [], [Go$Bool], false, 0], ["Key", "", [], [Type], false, 0], ["Kind", "", [], [Kind], false, 0], ["Len", "", [], [Go$Int], false, 0], ["Method", "", [Go$Int], [Method], false, 0], ["MethodByName", "", [Go$String], [Method, Go$Bool], false, 0], ["Name", "", [], [Go$String], false, 0], ["NumField", "", [], [Go$Int], false, 0], ["NumIn", "", [], [Go$Int], false, 0], ["NumMethod", "", [], [Go$Int], false, 0], ["NumOut", "", [], [Go$Int], false, 0], ["Out", "", [Go$Int], [Type], false, 0], ["PkgPath", "", [], [Go$String], false, 0], ["Size", "", [], [Go$Uintptr], false, 0], ["String", "", [], [Go$String], false, 0], ["common", "reflect", [], [(go$ptrType(rtype))], false, 0], ["ptrTo", "reflect", [], [(go$ptrType(rtype))], false, 0], ["uncommon", "reflect", [], [(go$ptrType(uncommonType))], false, 0]];
		structType.init([["rtype", "", "reflect", rtype, "reflect:\"struct\""], ["fields", "fields", "reflect", (go$sliceType(structField)), ""]]);
		Method.init([["Name", "Name", "", Go$String, ""], ["PkgPath", "PkgPath", "", Go$String, ""], ["Type", "Type", "", Type, ""], ["Func", "Func", "", Value, ""], ["Index", "Index", "", Go$Int, ""]]);
		StructField.init([["Name", "Name", "", Go$String, ""], ["PkgPath", "PkgPath", "", Go$String, ""], ["Type", "Type", "", Type, ""], ["Tag", "Tag", "", StructTag, ""], ["Offset", "Offset", "", Go$Uintptr, ""], ["Index", "Index", "", (go$sliceType(Go$Int)), ""], ["Anonymous", "Anonymous", "", Go$Bool, ""]]);
		StructTag.methods = [["Get", "", [Go$String], [Go$String], false, -1]];
		(go$ptrType(StructTag)).methods = [["Get", "", [Go$String], [Go$String], false, -1]];
		fieldScan.init([["typ", "typ", "reflect", (go$ptrType(structType)), ""], ["index", "index", "reflect", (go$sliceType(Go$Int)), ""]]);
		Value.methods = [["Addr", "", [], [Value], false, -1], ["Bool", "", [], [Go$Bool], false, -1], ["Bytes", "", [], [(go$sliceType(Go$Uint8))], false, -1], ["Call", "", [(go$sliceType(Value))], [(go$sliceType(Value))], false, -1], ["CallSlice", "", [(go$sliceType(Value))], [(go$sliceType(Value))], false, -1], ["CanAddr", "", [], [Go$Bool], false, -1], ["CanInterface", "", [], [Go$Bool], false, -1], ["CanSet", "", [], [Go$Bool], false, -1], ["Cap", "", [], [Go$Int], false, -1], ["Close", "", [], [], false, -1], ["Complex", "", [], [Go$Complex128], false, -1], ["Convert", "", [Type], [Value], false, -1], ["Elem", "", [], [Value], false, -1], ["Field", "", [Go$Int], [Value], false, -1], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [Value], false, -1], ["FieldByName", "", [Go$String], [Value], false, -1], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [Value], false, -1], ["Float", "", [], [Go$Float64], false, -1], ["Index", "", [Go$Int], [Value], false, -1], ["Int", "", [], [Go$Int64], false, -1], ["Interface", "", [], [go$emptyInterface], false, -1], ["InterfaceData", "", [], [(go$arrayType(Go$Uintptr, 2))], false, -1], ["IsNil", "", [], [Go$Bool], false, -1], ["IsValid", "", [], [Go$Bool], false, -1], ["Kind", "", [], [Kind], false, -1], ["Len", "", [], [Go$Int], false, -1], ["MapIndex", "", [Value], [Value], false, -1], ["MapKeys", "", [], [(go$sliceType(Value))], false, -1], ["Method", "", [Go$Int], [Value], false, -1], ["MethodByName", "", [Go$String], [Value], false, -1], ["NumField", "", [], [Go$Int], false, -1], ["NumMethod", "", [], [Go$Int], false, -1], ["OverflowComplex", "", [Go$Complex128], [Go$Bool], false, -1], ["OverflowFloat", "", [Go$Float64], [Go$Bool], false, -1], ["OverflowInt", "", [Go$Int64], [Go$Bool], false, -1], ["OverflowUint", "", [Go$Uint64], [Go$Bool], false, -1], ["Pointer", "", [], [Go$Uintptr], false, -1], ["Recv", "", [], [Value, Go$Bool], false, -1], ["Send", "", [Value], [], false, -1], ["Set", "", [Value], [], false, -1], ["SetBool", "", [Go$Bool], [], false, -1], ["SetBytes", "", [(go$sliceType(Go$Uint8))], [], false, -1], ["SetCap", "", [Go$Int], [], false, -1], ["SetComplex", "", [Go$Complex128], [], false, -1], ["SetFloat", "", [Go$Float64], [], false, -1], ["SetInt", "", [Go$Int64], [], false, -1], ["SetLen", "", [Go$Int], [], false, -1], ["SetMapIndex", "", [Value, Value], [], false, -1], ["SetPointer", "", [Go$UnsafePointer], [], false, -1], ["SetString", "", [Go$String], [], false, -1], ["SetUint", "", [Go$Uint64], [], false, -1], ["Slice", "", [Go$Int, Go$Int], [Value], false, -1], ["Slice3", "", [Go$Int, Go$Int, Go$Int], [Value], false, -1], ["String", "", [], [Go$String], false, -1], ["TryRecv", "", [], [Value, Go$Bool], false, -1], ["TrySend", "", [Value], [Go$Bool], false, -1], ["Type", "", [], [Type], false, -1], ["Uint", "", [], [Go$Uint64], false, -1], ["UnsafeAddr", "", [], [Go$Uintptr], false, -1], ["assignTo", "reflect", [Go$String, (go$ptrType(rtype)), (go$ptrType(go$emptyInterface))], [Value], false, -1], ["call", "reflect", [Go$String, (go$sliceType(Value))], [(go$sliceType(Value))], false, -1], ["iword", "reflect", [], [iword], false, -1], ["kind", "reflect", [], [Kind], false, 2], ["mustBe", "reflect", [Kind], [], false, 2], ["mustBeAssignable", "reflect", [], [], false, 2], ["mustBeExported", "reflect", [], [], false, 2], ["recv", "reflect", [Go$Bool], [Value, Go$Bool], false, -1], ["runes", "reflect", [], [(go$sliceType(Go$Int32))], false, -1], ["send", "reflect", [Value, Go$Bool], [Go$Bool], false, -1], ["setRunes", "reflect", [(go$sliceType(Go$Int32))], [], false, -1]];
		(go$ptrType(Value)).methods = [["Addr", "", [], [Value], false, -1], ["Bool", "", [], [Go$Bool], false, -1], ["Bytes", "", [], [(go$sliceType(Go$Uint8))], false, -1], ["Call", "", [(go$sliceType(Value))], [(go$sliceType(Value))], false, -1], ["CallSlice", "", [(go$sliceType(Value))], [(go$sliceType(Value))], false, -1], ["CanAddr", "", [], [Go$Bool], false, -1], ["CanInterface", "", [], [Go$Bool], false, -1], ["CanSet", "", [], [Go$Bool], false, -1], ["Cap", "", [], [Go$Int], false, -1], ["Close", "", [], [], false, -1], ["Complex", "", [], [Go$Complex128], false, -1], ["Convert", "", [Type], [Value], false, -1], ["Elem", "", [], [Value], false, -1], ["Field", "", [Go$Int], [Value], false, -1], ["FieldByIndex", "", [(go$sliceType(Go$Int))], [Value], false, -1], ["FieldByName", "", [Go$String], [Value], false, -1], ["FieldByNameFunc", "", [(go$funcType([Go$String], [Go$Bool], false))], [Value], false, -1], ["Float", "", [], [Go$Float64], false, -1], ["Index", "", [Go$Int], [Value], false, -1], ["Int", "", [], [Go$Int64], false, -1], ["Interface", "", [], [go$emptyInterface], false, -1], ["InterfaceData", "", [], [(go$arrayType(Go$Uintptr, 2))], false, -1], ["IsNil", "", [], [Go$Bool], false, -1], ["IsValid", "", [], [Go$Bool], false, -1], ["Kind", "", [], [Kind], false, -1], ["Len", "", [], [Go$Int], false, -1], ["MapIndex", "", [Value], [Value], false, -1], ["MapKeys", "", [], [(go$sliceType(Value))], false, -1], ["Method", "", [Go$Int], [Value], false, -1], ["MethodByName", "", [Go$String], [Value], false, -1], ["NumField", "", [], [Go$Int], false, -1], ["NumMethod", "", [], [Go$Int], false, -1], ["OverflowComplex", "", [Go$Complex128], [Go$Bool], false, -1], ["OverflowFloat", "", [Go$Float64], [Go$Bool], false, -1], ["OverflowInt", "", [Go$Int64], [Go$Bool], false, -1], ["OverflowUint", "", [Go$Uint64], [Go$Bool], false, -1], ["Pointer", "", [], [Go$Uintptr], false, -1], ["Recv", "", [], [Value, Go$Bool], false, -1], ["Send", "", [Value], [], false, -1], ["Set", "", [Value], [], false, -1], ["SetBool", "", [Go$Bool], [], false, -1], ["SetBytes", "", [(go$sliceType(Go$Uint8))], [], false, -1], ["SetCap", "", [Go$Int], [], false, -1], ["SetComplex", "", [Go$Complex128], [], false, -1], ["SetFloat", "", [Go$Float64], [], false, -1], ["SetInt", "", [Go$Int64], [], false, -1], ["SetLen", "", [Go$Int], [], false, -1], ["SetMapIndex", "", [Value, Value], [], false, -1], ["SetPointer", "", [Go$UnsafePointer], [], false, -1], ["SetString", "", [Go$String], [], false, -1], ["SetUint", "", [Go$Uint64], [], false, -1], ["Slice", "", [Go$Int, Go$Int], [Value], false, -1], ["Slice3", "", [Go$Int, Go$Int, Go$Int], [Value], false, -1], ["String", "", [], [Go$String], false, -1], ["TryRecv", "", [], [Value, Go$Bool], false, -1], ["TrySend", "", [Value], [Go$Bool], false, -1], ["Type", "", [], [Type], false, -1], ["Uint", "", [], [Go$Uint64], false, -1], ["UnsafeAddr", "", [], [Go$Uintptr], false, -1], ["assignTo", "reflect", [Go$String, (go$ptrType(rtype)), (go$ptrType(go$emptyInterface))], [Value], false, -1], ["call", "reflect", [Go$String, (go$sliceType(Value))], [(go$sliceType(Value))], false, -1], ["iword", "reflect", [], [iword], false, -1], ["kind", "reflect", [], [Kind], false, 2], ["mustBe", "reflect", [Kind], [], false, 2], ["mustBeAssignable", "reflect", [], [], false, 2], ["mustBeExported", "reflect", [], [], false, 2], ["recv", "reflect", [Go$Bool], [Value, Go$Bool], false, -1], ["runes", "reflect", [], [(go$sliceType(Go$Int32))], false, -1], ["send", "reflect", [Value, Go$Bool], [Go$Bool], false, -1], ["setRunes", "reflect", [(go$sliceType(Go$Int32))], [], false, -1]];
		Value.init([["typ", "typ", "reflect", (go$ptrType(rtype)), ""], ["val", "val", "reflect", Go$UnsafePointer, ""], ["flag", "", "reflect", flag, ""]]);
		flag.methods = [["kind", "reflect", [], [Kind], false, -1], ["mustBe", "reflect", [Kind], [], false, -1], ["mustBeAssignable", "reflect", [], [], false, -1], ["mustBeExported", "reflect", [], [], false, -1]];
		(go$ptrType(flag)).methods = [["kind", "reflect", [], [Kind], false, -1], ["mustBe", "reflect", [Kind], [], false, -1], ["mustBeAssignable", "reflect", [], [], false, -1], ["mustBeExported", "reflect", [], [], false, -1]];
		(go$ptrType(ValueError)).methods = [["Error", "", [], [Go$String], false, -1]];
		ValueError.init([["Method", "Method", "", Go$String, ""], ["Kind", "Kind", "", Kind, ""]]);
		kindNames = new (go$sliceType(Go$String))(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		var x;
		uint8Type = (x = TypeOf(new Go$Uint8(0)), (x !== null && x.constructor === (go$ptrType(rtype)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(rtype)))));
		var a;
		a = false;
		if (a) {
			isWrapped(null);
			copyStruct(null, null, null);
			zeroVal(null);
			makeIndir((go$ptrType(rtype)).nil, null);
			jsObject();
		}
	}
	return go$pkg;
})();
go$packages["fmt"] = (function() {
	var go$pkg = {}, strconv = go$packages["strconv"], utf8 = go$packages["unicode/utf8"], errors = go$packages["errors"], io = go$packages["io"], os = go$packages["os"], reflect = go$packages["reflect"], sync = go$packages["sync"], math = go$packages["math"], fmt, State, Formatter, Stringer, GoStringer, buffer, pp, cache, runeUnreader, ScanState, Scanner, stringReader, scanError, ss, ssave, readRune, doPrec, newCache, newPrinter, Fprintf, Sprintf, Errorf, Fprint, Sprint, Sprintln, getField, parsenum, intFromArg, parseArgNumber, Sscan, Fscan, isSpace, notSpace, newScanState, indexRune, errorHandler, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, space, ssFree, complexError, boolError;
	fmt = go$pkg.fmt = go$newType(0, "Struct", "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_) {
		this.go$val = this;
		this.intbuf = intbuf_ !== undefined ? intbuf_ : go$makeNativeArray("Uint8", 65, function() { return 0; });
		this.buf = buf_ !== undefined ? buf_ : (go$ptrType(buffer)).nil;
		this.wid = wid_ !== undefined ? wid_ : 0;
		this.prec = prec_ !== undefined ? prec_ : 0;
		this.widPresent = widPresent_ !== undefined ? widPresent_ : false;
		this.precPresent = precPresent_ !== undefined ? precPresent_ : false;
		this.minus = minus_ !== undefined ? minus_ : false;
		this.plus = plus_ !== undefined ? plus_ : false;
		this.sharp = sharp_ !== undefined ? sharp_ : false;
		this.space = space_ !== undefined ? space_ : false;
		this.unicode = unicode_ !== undefined ? unicode_ : false;
		this.uniQuote = uniQuote_ !== undefined ? uniQuote_ : false;
		this.zero = zero_ !== undefined ? zero_ : false;
	});
	State = go$pkg.State = go$newType(0, "Interface", "fmt.State", "State", "fmt", null);
	Formatter = go$pkg.Formatter = go$newType(0, "Interface", "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = go$pkg.Stringer = go$newType(0, "Interface", "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = go$pkg.GoStringer = go$newType(0, "Interface", "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = go$pkg.buffer = go$newType(0, "Slice", "fmt.buffer", "buffer", "fmt", null);
	pp = go$pkg.pp = go$newType(0, "Struct", "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.go$val = this;
		this.n = n_ !== undefined ? n_ : 0;
		this.panicking = panicking_ !== undefined ? panicking_ : false;
		this.erroring = erroring_ !== undefined ? erroring_ : false;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.arg = arg_ !== undefined ? arg_ : null;
		this.value = value_ !== undefined ? value_ : new reflect.Value.Ptr();
		this.reordered = reordered_ !== undefined ? reordered_ : false;
		this.goodArgNum = goodArgNum_ !== undefined ? goodArgNum_ : false;
		this.runeBuf = runeBuf_ !== undefined ? runeBuf_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.fmt = fmt_ !== undefined ? fmt_ : new fmt.Ptr();
	});
	cache = go$pkg.cache = go$newType(0, "Struct", "fmt.cache", "cache", "fmt", function(mu_, saved_, new$2_) {
		this.go$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.saved = saved_ !== undefined ? saved_ : (go$sliceType(go$emptyInterface)).nil;
		this.new$2 = new$2_ !== undefined ? new$2_ : go$throwNilPointerError;
	});
	runeUnreader = go$pkg.runeUnreader = go$newType(0, "Interface", "fmt.runeUnreader", "runeUnreader", "fmt", null);
	ScanState = go$pkg.ScanState = go$newType(0, "Interface", "fmt.ScanState", "ScanState", "fmt", null);
	Scanner = go$pkg.Scanner = go$newType(0, "Interface", "fmt.Scanner", "Scanner", "fmt", null);
	stringReader = go$pkg.stringReader = go$newType(0, "String", "fmt.stringReader", "stringReader", "fmt", null);
	scanError = go$pkg.scanError = go$newType(0, "Struct", "fmt.scanError", "scanError", "fmt", function(err_) {
		this.go$val = this;
		this.err = err_ !== undefined ? err_ : null;
	});
	ss = go$pkg.ss = go$newType(0, "Struct", "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.go$val = this;
		this.rr = rr_ !== undefined ? rr_ : null;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.peekRune = peekRune_ !== undefined ? peekRune_ : 0;
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
		this.count = count_ !== undefined ? count_ : 0;
		this.atEOF = atEOF_ !== undefined ? atEOF_ : false;
		this.ssave = ssave_ !== undefined ? ssave_ : new ssave.Ptr();
	});
	ssave = go$pkg.ssave = go$newType(0, "Struct", "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.go$val = this;
		this.validSave = validSave_ !== undefined ? validSave_ : false;
		this.nlIsEnd = nlIsEnd_ !== undefined ? nlIsEnd_ : false;
		this.nlIsSpace = nlIsSpace_ !== undefined ? nlIsSpace_ : false;
		this.argLimit = argLimit_ !== undefined ? argLimit_ : 0;
		this.limit = limit_ !== undefined ? limit_ : 0;
		this.maxWid = maxWid_ !== undefined ? maxWid_ : 0;
	});
	readRune = go$pkg.readRune = go$newType(0, "Struct", "fmt.readRune", "readRune", "fmt", function(reader_, buf_, pending_, pendBuf_) {
		this.go$val = this;
		this.reader = reader_ !== undefined ? reader_ : null;
		this.buf = buf_ !== undefined ? buf_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
		this.pending = pending_ !== undefined ? pending_ : 0;
		this.pendBuf = pendBuf_ !== undefined ? pendBuf_ : go$makeNativeArray("Uint8", 4, function() { return 0; });
	});
	fmt.Ptr.prototype.clearflags = function() {
		var f;
		f = this;
		f.wid = 0;
		f.widPresent = false;
		f.prec = 0;
		f.precPresent = false;
		f.minus = false;
		f.plus = false;
		f.sharp = false;
		f.space = false;
		f.unicode = false;
		f.uniQuote = false;
		f.zero = false;
	};
	fmt.prototype.clearflags = function() { return this.go$val.clearflags(); };
	fmt.Ptr.prototype.init = function(buf) {
		var f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.go$val.init(buf); };
	fmt.Ptr.prototype.computePadding = function(width) {
		var padding, leftWidth, rightWidth, f, left, w, _tuple, _tuple$1, _tuple$2;
		padding = (go$sliceType(Go$Uint8)).nil;
		leftWidth = 0;
		rightWidth = 0;
		f = this;
		left = !f.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.zero) {
				_tuple = [padZeroBytes, w, 0]; padding = _tuple[0]; leftWidth = _tuple[1]; rightWidth = _tuple[2];
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tuple$1 = [padSpaceBytes, w, 0]; padding = _tuple$1[0]; leftWidth = _tuple$1[1]; rightWidth = _tuple$1[2];
				return [padding, leftWidth, rightWidth];
			} else {
				_tuple$2 = [padSpaceBytes, 0, w]; padding = _tuple$2[0]; leftWidth = _tuple$2[1]; rightWidth = _tuple$2[2];
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.go$val.computePadding(width); };
	fmt.Ptr.prototype.writePadding = function(n, padding) {
		var f, m;
		f = this;
		while (n > 0) {
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write(go$subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.go$val.writePadding(n, padding); };
	fmt.Ptr.prototype.pad = function(b) {
		var f, _tuple, padding, left, right;
		f = this;
		if (!f.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(b.length); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.go$val.pad(b); };
	fmt.Ptr.prototype.padString = function(s) {
		var f, _tuple, padding, left, right;
		f = this;
		if (!f.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.go$val.padString(s); };
	fmt.Ptr.prototype.fmt_boolean = function(v) {
		var f;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.go$val.fmt_boolean(v); };
	fmt.Ptr.prototype.integer = function(a, base, signedness, digits) {
		var f, buf, negative, prec, i, ua, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _ref, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _slice$11, _index$11, runeWidth, width, j, _slice$12, _index$12, _slice$13, _index$13, _slice$14, _index$14;
		f = this;
		if (f.precPresent && (f.prec === 0) && (a.high === 0 && a.low === 0)) {
			return;
		}
		buf = go$subslice(new (go$sliceType(Go$Uint8))(f.intbuf), 0);
		if (f.widPresent && f.wid > 65) {
			buf = (go$sliceType(Go$Uint8)).make(f.wid, 0, function() { return 0; });
		}
		negative = signedness === true && (a.high < 0 || (a.high === 0 && a.low < 0));
		if (negative) {
			a = new Go$Int64(-a.high, -a.low);
		}
		prec = 0;
		if (f.precPresent) {
			prec = f.prec;
			f.zero = false;
		} else if (f.zero && f.widPresent && !f.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.plus || f.space) {
				prec = prec - 1 >> 0;
			}
		}
		i = buf.length;
		ua = new Go$Uint64(a.high, a.low);
		while ((ua.high > base.high || (ua.high === base.high && ua.low >= base.low))) {
			i = i - 1 >> 0;
			_slice = buf; _index = i;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = digits.charCodeAt(go$flatten64(go$div64(ua, base, true)))) : go$throwRuntimeError("index out of range");
			ua = go$div64(ua, (base), false);
		}
		i = i - 1 >> 0;
		_slice$1 = buf; _index$1 = i;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = digits.charCodeAt(go$flatten64(ua))) : go$throwRuntimeError("index out of range");
		while (i > 0 && prec > (buf.length - i >> 0)) {
			i = i - 1 >> 0;
			_slice$2 = buf; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 48) : go$throwRuntimeError("index out of range");
		}
		if (f.sharp) {
			_ref = base;
			if ((_ref.high === 0 && _ref.low === 8)) {
				if (!(((_slice$3 = buf, _index$3 = i, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) === 48))) {
					i = i - 1 >> 0;
					_slice$4 = buf; _index$4 = i;(_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = 48) : go$throwRuntimeError("index out of range");
				}
			} else if ((_ref.high === 0 && _ref.low === 16)) {
				i = i - 1 >> 0;
				_slice$5 = buf; _index$5 = i;(_index$5 >= 0 && _index$5 < _slice$5.length) ? (_slice$5.array[_slice$5.offset + _index$5] = (120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24) : go$throwRuntimeError("index out of range");
				i = i - 1 >> 0;
				_slice$6 = buf; _index$6 = i;(_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = 48) : go$throwRuntimeError("index out of range");
			}
		}
		if (f.unicode) {
			i = i - 1 >> 0;
			_slice$7 = buf; _index$7 = i;(_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = 43) : go$throwRuntimeError("index out of range");
			i = i - 1 >> 0;
			_slice$8 = buf; _index$8 = i;(_index$8 >= 0 && _index$8 < _slice$8.length) ? (_slice$8.array[_slice$8.offset + _index$8] = 85) : go$throwRuntimeError("index out of range");
		}
		if (negative) {
			i = i - 1 >> 0;
			_slice$9 = buf; _index$9 = i;(_index$9 >= 0 && _index$9 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$9] = 45) : go$throwRuntimeError("index out of range");
		} else if (f.plus) {
			i = i - 1 >> 0;
			_slice$10 = buf; _index$10 = i;(_index$10 >= 0 && _index$10 < _slice$10.length) ? (_slice$10.array[_slice$10.offset + _index$10] = 43) : go$throwRuntimeError("index out of range");
		} else if (f.space) {
			i = i - 1 >> 0;
			_slice$11 = buf; _index$11 = i;(_index$11 >= 0 && _index$11 < _slice$11.length) ? (_slice$11.array[_slice$11.offset + _index$11] = 32) : go$throwRuntimeError("index out of range");
		}
		if (f.unicode && f.uniQuote && (a.high > 0 || (a.high === 0 && a.low >= 0)) && (a.high < 0 || (a.high === 0 && a.low <= 1114111)) && strconv.IsPrint(((a.low + ((a.high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.low + ((a.high >> 31) * 4294967296)) >> 0));
			width = (2 + runeWidth >> 0) + 1 >> 0;
			go$copySlice(go$subslice(buf, (i - width >> 0)), go$subslice(buf, i));
			i = i - (width) >> 0;
			j = buf.length - width >> 0;
			_slice$12 = buf; _index$12 = j;(_index$12 >= 0 && _index$12 < _slice$12.length) ? (_slice$12.array[_slice$12.offset + _index$12] = 32) : go$throwRuntimeError("index out of range");
			j = j + 1 >> 0;
			_slice$13 = buf; _index$13 = j;(_index$13 >= 0 && _index$13 < _slice$13.length) ? (_slice$13.array[_slice$13.offset + _index$13] = 39) : go$throwRuntimeError("index out of range");
			j = j + 1 >> 0;
			utf8.EncodeRune(go$subslice(buf, j), ((a.low + ((a.high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			_slice$14 = buf; _index$14 = j;(_index$14 >= 0 && _index$14 < _slice$14.length) ? (_slice$14.array[_slice$14.offset + _index$14] = 39) : go$throwRuntimeError("index out of range");
		}
		f.pad(go$subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.go$val.integer(a, base, signedness, digits); };
	fmt.Ptr.prototype.truncate = function(s) {
		var f, n, _ref, _i, _rune, i;
		f = this;
		if (f.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = go$decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - 1 >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.go$val.truncate(s); };
	fmt.Ptr.prototype.fmt_s = function(s) {
		var f;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.go$val.fmt_s(s); };
	fmt.Ptr.prototype.fmt_sbx = function(s, b, digits) {
		var f, n, x, buf, i, c, _slice, _index;
		f = this;
		n = b.length;
		if (b === (go$sliceType(Go$Uint8)).nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = (go$sliceType(Go$Uint8)).nil;
		i = 0;
		while (i < n) {
			if (i > 0 && f.space) {
				buf = go$append(buf, 32);
			}
			if (f.sharp) {
				buf = go$append(buf, 48, x);
			}
			c = 0;
			if (b === (go$sliceType(Go$Uint8)).nil) {
				c = s.charCodeAt(i);
			} else {
				c = (_slice = b, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			}
			buf = go$append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + 1 >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.go$val.fmt_sbx(s, b, digits); };
	fmt.Ptr.prototype.fmt_sx = function(s, digits) {
		var f;
		f = this;
		f.fmt_sbx(s, (go$sliceType(Go$Uint8)).nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.go$val.fmt_sx(s, digits); };
	fmt.Ptr.prototype.fmt_bx = function(b, digits) {
		var f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.go$val.fmt_bx(b, digits); };
	fmt.Ptr.prototype.fmt_q = function(s) {
		var f, quoted;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.go$val.fmt_q(s); };
	fmt.Ptr.prototype.fmt_qc = function(c) {
		var f, quoted;
		f = this;
		quoted = (go$sliceType(Go$Uint8)).nil;
		if (f.plus) {
			quoted = strconv.AppendQuoteRuneToASCII(go$subslice(new (go$sliceType(Go$Uint8))(f.intbuf), 0, 0), ((c.low + ((c.high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune(go$subslice(new (go$sliceType(Go$Uint8))(f.intbuf), 0, 0), ((c.low + ((c.high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.go$val.fmt_qc(c); };
	doPrec = function(f, def) {
		if (f.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.Ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var f, slice, _ref, _slice, _index, _slice$1, _index$1, _slice$2, _index$2;
		f = this;
		f.intbuf[0] = 32;
		slice = strconv.AppendFloat(go$subslice(new (go$sliceType(Go$Uint8))(f.intbuf), 0, 1), v, verb, prec, n);
		_ref = (_slice = slice, _index = 1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (_ref === 45 || _ref === 43) {
			if (f.zero && f.widPresent && f.wid > slice.length) {
				f.buf.WriteByte((_slice$1 = slice, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")));
				f.wid = f.wid - 1 >> 0;
				f.pad(go$subslice(slice, 2));
				return;
			}
			slice = go$subslice(slice, 1);
		} else {
			if (f.plus) {
				_slice$2 = slice; _index$2 = 0;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 43) : go$throwRuntimeError("index out of range");
			} else if (f.space) {
			} else {
				slice = go$subslice(slice, 1);
			}
		}
		f.pad(slice);
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.go$val.formatFloat(v, verb, prec, n); };
	fmt.Ptr.prototype.fmt_e64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.go$val.fmt_e64(v); };
	fmt.Ptr.prototype.fmt_E64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.go$val.fmt_E64(v); };
	fmt.Ptr.prototype.fmt_f64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.go$val.fmt_f64(v); };
	fmt.Ptr.prototype.fmt_g64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.go$val.fmt_g64(v); };
	fmt.Ptr.prototype.fmt_G64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.go$val.fmt_G64(v); };
	fmt.Ptr.prototype.fmt_fb64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.go$val.fmt_fb64(v); };
	fmt.Ptr.prototype.fmt_e32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$coerceFloat32(v), 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.go$val.fmt_e32(v); };
	fmt.Ptr.prototype.fmt_E32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$coerceFloat32(v), 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.go$val.fmt_E32(v); };
	fmt.Ptr.prototype.fmt_f32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$coerceFloat32(v), 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.go$val.fmt_f32(v); };
	fmt.Ptr.prototype.fmt_g32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$coerceFloat32(v), 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.go$val.fmt_g32(v); };
	fmt.Ptr.prototype.fmt_G32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$coerceFloat32(v), 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.go$val.fmt_G32(v); };
	fmt.Ptr.prototype.fmt_fb32 = function(v) {
		var f;
		f = this;
		f.formatFloat(go$coerceFloat32(v), 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.go$val.fmt_fb32(v); };
	fmt.Ptr.prototype.fmt_c64 = function(v, verb) {
		var f, r, oldPlus, i, _ref;
		f = this;
		f.buf.WriteByte(40);
		r = v.real;
		oldPlus = f.plus;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.fmt_fb32(r);
			} else if (_ref === 101) {
				f.fmt_e32(r);
			} else if (_ref === 69) {
				f.fmt_E32(r);
			} else if (_ref === 102) {
				f.fmt_f32(r);
			} else if (_ref === 103) {
				f.fmt_g32(r);
			} else if (_ref === 71) {
				f.fmt_G32(r);
			}
			if (!((i === 0))) {
				break;
			}
			f.plus = true;
			r = v.imag;
			i = i + 1 >> 0;
		}
		f.plus = oldPlus;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.go$val.fmt_c64(v, verb); };
	fmt.Ptr.prototype.fmt_c128 = function(v, verb) {
		var f, r, oldPlus, i, _ref;
		f = this;
		f.buf.WriteByte(40);
		r = v.real;
		oldPlus = f.plus;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.fmt_fb64(r);
			} else if (_ref === 101) {
				f.fmt_e64(r);
			} else if (_ref === 69) {
				f.fmt_E64(r);
			} else if (_ref === 102) {
				f.fmt_f64(r);
			} else if (_ref === 103) {
				f.fmt_g64(r);
			} else if (_ref === 71) {
				f.fmt_G64(r);
			}
			if (!((i === 0))) {
				break;
			}
			f.plus = true;
			r = v.imag;
			i = i + 1 >> 0;
		}
		f.plus = oldPlus;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.go$val.fmt_c128(v, verb); };
	go$ptrType(buffer).prototype.Write = function(p) {
		var n, err, b, _tuple;
		n = 0;
		err = null;
		b = this;
		b.go$set(go$appendSlice(b.go$get(), p));
		_tuple = [p.length, null]; n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	buffer.prototype.Write = function(p) { var obj = this; return (new (go$ptrType(buffer))(function() { return obj; }, null)).Write(p); };
	go$ptrType(buffer).prototype.WriteString = function(s) {
		var n, err, b, _tuple;
		n = 0;
		err = null;
		b = this;
		b.go$set(go$appendSlice(b.go$get(), new buffer(go$stringToBytes(s))));
		_tuple = [s.length, null]; n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	buffer.prototype.WriteString = function(s) { var obj = this; return (new (go$ptrType(buffer))(function() { return obj; }, null)).WriteString(s); };
	go$ptrType(buffer).prototype.WriteByte = function(c) {
		var b;
		b = this;
		b.go$set(go$append(b.go$get(), c));
		return null;
	};
	buffer.prototype.WriteByte = function(c) { var obj = this; return (new (go$ptrType(buffer))(function() { return obj; }, null)).WriteByte(c); };
	go$ptrType(buffer).prototype.WriteRune = function(r) {
		var bp, b, n, x, w;
		bp = this;
		if (r < 128) {
			bp.go$set(go$append(bp.go$get(), (r << 24 >>> 24)));
			return null;
		}
		b = bp.go$get();
		n = b.length;
		while ((n + 4 >> 0) > b.capacity) {
			b = go$append(b, 0);
		}
		w = utf8.EncodeRune((x = go$subslice(b, n, (n + 4 >> 0)), go$subslice(new (go$sliceType(Go$Uint8))(x.array), x.offset, x.offset + x.length)), r);
		bp.go$set(go$subslice(b, 0, (n + w >> 0)));
		return null;
	};
	buffer.prototype.WriteRune = function(r) { var obj = this; return (new (go$ptrType(buffer))(function() { return obj; }, null)).WriteRune(r); };
	cache.Ptr.prototype.put = function(x) {
		var c;
		c = this;
		c.mu.Lock();
		if (c.saved.length < c.saved.capacity) {
			c.saved = go$append(c.saved, x);
		}
		c.mu.Unlock();
	};
	cache.prototype.put = function(x) { return this.go$val.put(x); };
	cache.Ptr.prototype.get = function() {
		var c, n, _slice, _index, x;
		c = this;
		c.mu.Lock();
		n = c.saved.length;
		if (n === 0) {
			c.mu.Unlock();
			return c.new$2();
		}
		x = (_slice = c.saved, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		c.saved = go$subslice(c.saved, 0, (n - 1 >> 0));
		c.mu.Unlock();
		return x;
	};
	cache.prototype.get = function() { return this.go$val.get(); };
	newCache = function(f) {
		return new cache.Ptr(new sync.Mutex.Ptr(), (go$sliceType(go$emptyInterface)).make(0, 100, function() { return null; }), f);
	};
	newPrinter = function() {
		var x, p, v;
		p = (x = ppFree.get(), (x !== null && x.constructor === (go$ptrType(pp)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(pp)))));
		p.panicking = false;
		p.erroring = false;
		p.fmt.init(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v;; }));
		return p;
	};
	pp.Ptr.prototype.free = function() {
		var p;
		p = this;
		if (p.buf.capacity > 1024) {
			return;
		}
		p.buf = go$subslice(p.buf, 0, 0);
		p.arg = null;
		p.value = new reflect.Value.Ptr((go$ptrType(reflect.rtype)).nil, 0, 0);
		ppFree.put(p);
	};
	pp.prototype.free = function() { return this.go$val.free(); };
	pp.Ptr.prototype.Width = function() {
		var wid, ok, p, _tuple;
		wid = 0;
		ok = false;
		p = this;
		_tuple = [p.fmt.wid, p.fmt.widPresent]; wid = _tuple[0]; ok = _tuple[1];
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.go$val.Width(); };
	pp.Ptr.prototype.Precision = function() {
		var prec, ok, p, _tuple;
		prec = 0;
		ok = false;
		p = this;
		_tuple = [p.fmt.prec, p.fmt.precPresent]; prec = _tuple[0]; ok = _tuple[1];
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.go$val.Precision(); };
	pp.Ptr.prototype.Flag = function(b) {
		var p, _ref;
		p = this;
		_ref = b;
		if (_ref === 45) {
			return p.fmt.minus;
		} else if (_ref === 43) {
			return p.fmt.plus;
		} else if (_ref === 35) {
			return p.fmt.sharp;
		} else if (_ref === 32) {
			return p.fmt.space;
		} else if (_ref === 48) {
			return p.fmt.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.go$val.Flag(b); };
	pp.Ptr.prototype.add = function(c) {
		var p, v;
		p = this;
		(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.go$val.add(c); };
	pp.Ptr.prototype.Write = function(b) {
		var ret, err, p, _tuple, v;
		ret = 0;
		err = null;
		p = this;
		_tuple = (new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).Write(b); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.go$val.Write(b); };
	Fprintf = go$pkg.Fprintf = function(w, format, a) {
		var n, err, p, _tuple, x;
		n = 0;
		err = null;
		p = newPrinter();
		p.doPrintf(format, a);
		_tuple = w.Write((x = p.buf, go$subslice(new (go$sliceType(Go$Uint8))(x.array), x.offset, x.offset + x.length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Sprintf = go$pkg.Sprintf = function(format, a) {
		var p, s;
		p = newPrinter();
		p.doPrintf(format, a);
		s = go$bytesToString(p.buf);
		p.free();
		return s;
	};
	Errorf = go$pkg.Errorf = function(format, a) {
		return errors.New(Sprintf(format, a));
	};
	Fprint = go$pkg.Fprint = function(w, a) {
		var n, err, p, _tuple, x;
		n = 0;
		err = null;
		p = newPrinter();
		p.doPrint(a, false, false);
		_tuple = w.Write((x = p.buf, go$subslice(new (go$sliceType(Go$Uint8))(x.array), x.offset, x.offset + x.length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Sprint = go$pkg.Sprint = function(a) {
		var p, s;
		p = newPrinter();
		p.doPrint(a, false, false);
		s = go$bytesToString(p.buf);
		p.free();
		return s;
	};
	Sprintln = go$pkg.Sprintln = function(a) {
		var p, s;
		p = newPrinter();
		p.doPrint(a, true, true);
		s = go$bytesToString(p.buf);
		p.free();
		return s;
	};
	getField = function(v, i) {
		var _struct, val, _struct$1, _struct$2;
		val = (_struct = v.Field(i), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if ((val.Kind() === 20) && !val.IsNil()) {
			val = (_struct$1 = val.Elem(), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		return (_struct$2 = val, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
	};
	parsenum = function(s, start, end) {
		var num, isnum, newi, _tuple;
		num = 0;
		isnum = false;
		newi = 0;
		if (start >= end) {
			_tuple = [0, false, end]; num = _tuple[0]; isnum = _tuple[1]; newi = _tuple[2];
			return [num, isnum, newi];
		}
		newi = start;
		while (newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57) {
			num = ((((num >>> 16 << 16) * 10 >> 0) + (num << 16 >>> 16) * 10) >> 0) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + 1 >> 0;
		}
		return [num, isnum, newi];
	};
	pp.Ptr.prototype.unknownType = function(v) {
		var p, v$1, v$2, v$3, v$4;
		p = this;
		if (go$interfaceIsEqual(v, null)) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(nilAngleBytes);
			return;
		}
		(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).WriteByte(63);
		(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).WriteString(reflect.TypeOf(v).String());
		(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(63);
	};
	pp.prototype.unknownType = function(v) { return this.go$val.unknownType(v); };
	pp.Ptr.prototype.badVerb = function(verb) {
		var p, v, v$1, _struct, v$2;
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
		if (!(go$interfaceIsEqual(p.arg, null))) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(reflect.TypeOf(p.arg).String());
			p.add(61);
			p.printArg(p.arg, 118, false, false, 0);
		} else if (p.value.IsValid()) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteString(p.value.Type().String());
			p.add(61);
			p.printValue((_struct = p.value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), 118, false, false, 0);
		} else {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(nilAngleBytes);
		}
		p.add(41);
		p.erroring = false;
	};
	pp.prototype.badVerb = function(verb) { return this.go$val.badVerb(verb); };
	pp.Ptr.prototype.fmtBool = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 116 || _ref === 118) {
			p.fmt.fmt_boolean(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBool = function(v, verb) { return this.go$val.fmtBool(v, verb); };
	pp.Ptr.prototype.fmtC = function(c) {
		var p, r, x, w;
		p = this;
		r = ((c.low + ((c.high >> 31) * 4294967296)) >> 0);
		if (!((x = new Go$Int64(0, r), (x.high === c.high && x.low === c.low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune(go$subslice(new (go$sliceType(Go$Uint8))(p.runeBuf), 0, 4), r);
		p.fmt.pad(go$subslice(new (go$sliceType(Go$Uint8))(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.go$val.fmtC(c); };
	pp.Ptr.prototype.fmtInt64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(v, new Go$Uint64(0, 2), true, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(v);
		} else if (_ref === 100 || _ref === 118) {
			p.fmt.integer(v, new Go$Uint64(0, 10), true, "0123456789abcdef");
		} else if (_ref === 111) {
			p.fmt.integer(v, new Go$Uint64(0, 8), true, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.high || (0 === v.high && 0 <= v.low)) && (v.high < 0 || (v.high === 0 && v.low <= 1114111))) {
				p.fmt.fmt_qc(v);
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(v, new Go$Uint64(0, 16), true, "0123456789abcdef");
		} else if (_ref === 85) {
			p.fmtUnicode(v);
		} else if (_ref === 88) {
			p.fmt.integer(v, new Go$Uint64(0, 16), true, "0123456789ABCDEF");
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.go$val.fmtInt64(v, verb); };
	pp.Ptr.prototype.fmt0x64 = function(v, leading0x) {
		var p, sharp;
		p = this;
		sharp = p.fmt.sharp;
		p.fmt.sharp = leading0x;
		p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.go$val.fmt0x64(v, leading0x); };
	pp.Ptr.prototype.fmtUnicode = function(v) {
		var p, precPresent, sharp, prec;
		p = this;
		precPresent = p.fmt.precPresent;
		sharp = p.fmt.sharp;
		p.fmt.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.precPresent = true;
		}
		p.fmt.unicode = true;
		p.fmt.uniQuote = sharp;
		p.fmt.integer(v, new Go$Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.unicode = false;
		p.fmt.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.precPresent = precPresent;
		p.fmt.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.go$val.fmtUnicode(v); };
	pp.Ptr.prototype.fmtUint64 = function(v, verb, goSyntax) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 2), false, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(new Go$Int64(v.high, v.low));
		} else if (_ref === 100) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 10), false, "0123456789abcdef");
		} else if (_ref === 118) {
			if (goSyntax) {
				p.fmt0x64(v, true);
			} else {
				p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 10), false, "0123456789abcdef");
			}
		} else if (_ref === 111) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 8), false, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.high || (0 === v.high && 0 <= v.low)) && (v.high < 0 || (v.high === 0 && v.low <= 1114111))) {
				p.fmt.fmt_qc(new Go$Int64(v.high, v.low));
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 16), false, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.integer(new Go$Int64(v.high, v.low), new Go$Uint64(0, 16), false, "0123456789ABCDEF");
		} else if (_ref === 85) {
			p.fmtUnicode(new Go$Int64(v.high, v.low));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtUint64 = function(v, verb, goSyntax) { return this.go$val.fmtUint64(v, verb, goSyntax); };
	pp.Ptr.prototype.fmtFloat32 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb32(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e32(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E32(v);
		} else if (_ref === 102) {
			p.fmt.fmt_f32(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g32(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G32(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.go$val.fmtFloat32(v, verb); };
	pp.Ptr.prototype.fmtFloat64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb64(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e64(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E64(v);
		} else if (_ref === 102) {
			p.fmt.fmt_f64(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g64(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G64(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.go$val.fmtFloat64(v, verb); };
	pp.Ptr.prototype.fmtComplex64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c64(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c64(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.go$val.fmtComplex64(v, verb); };
	pp.Ptr.prototype.fmtComplex128 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c128(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c128(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.go$val.fmtComplex128(v, verb); };
	pp.Ptr.prototype.fmtString = function(v, verb, goSyntax) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 118) {
			if (goSyntax) {
				p.fmt.fmt_q(v);
			} else {
				p.fmt.fmt_s(v);
			}
		} else if (_ref === 115) {
			p.fmt.fmt_s(v);
		} else if (_ref === 120) {
			p.fmt.fmt_sx(v, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.fmt_sx(v, "0123456789ABCDEF");
		} else if (_ref === 113) {
			p.fmt.fmt_q(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtString = function(v, verb, goSyntax) { return this.go$val.fmtString(v, verb, goSyntax); };
	pp.Ptr.prototype.fmtBytes = function(v, verb, goSyntax, typ, depth) {
		var p, v$1, v$2, v$3, v$4, _ref, _i, _slice, _index, c, i, v$5, v$6, v$7, v$8, _ref$1;
		p = this;
		if ((verb === 118) || (verb === 100)) {
			if (goSyntax) {
				if (go$interfaceIsEqual(typ, null)) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(bytesBytes);
				} else {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).WriteString(typ.String());
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).WriteByte(123);
				}
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(91);
			}
			_ref = v;
			_i = 0;
			while (_i < _ref.length) {
				c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (i > 0) {
					if (goSyntax) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$5) { p.buf = v$5; })).Write(commaSpaceBytes);
					} else {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$6) { p.buf = v$6; })).WriteByte(32);
					}
				}
				p.printArg(new Go$Uint8(c), 118, p.fmt.plus, goSyntax, depth + 1 >> 0);
				_i++;
			}
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$7) { p.buf = v$7; })).WriteByte(125);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$8) { p.buf = v$8; })).WriteByte(93);
			}
			return;
		}
		_ref$1 = verb;
		if (_ref$1 === 115) {
			p.fmt.fmt_s(go$bytesToString(v));
		} else if (_ref$1 === 120) {
			p.fmt.fmt_bx(v, "0123456789abcdef");
		} else if (_ref$1 === 88) {
			p.fmt.fmt_bx(v, "0123456789ABCDEF");
		} else if (_ref$1 === 113) {
			p.fmt.fmt_q(go$bytesToString(v));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBytes = function(v, verb, goSyntax, typ, depth) { return this.go$val.fmtBytes(v, verb, goSyntax, typ, depth); };
	pp.Ptr.prototype.fmtPointer = function(value, verb, goSyntax) {
		var p, use0x64, _ref, u, _ref$1, v, v$1, v$2;
		p = this;
		use0x64 = true;
		_ref = verb;
		if (_ref === 112 || _ref === 118) {
		} else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) {
			use0x64 = false;
		} else {
			p.badVerb(verb);
			return;
		}
		u = 0;
		_ref$1 = value.Kind();
		if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) {
			u = value.Pointer();
		} else {
			p.badVerb(verb);
			return;
		}
		if (goSyntax) {
			p.add(40);
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(value.Type().String());
			p.add(41);
			p.add(40);
			if (u === 0) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(nilBytes);
			} else {
				p.fmt0x64(new Go$Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
		} else if ((verb === 118) && (u === 0)) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(nilAngleBytes);
		} else {
			if (use0x64) {
				p.fmt0x64(new Go$Uint64(0, u.constructor === Number ? u : 1), !p.fmt.sharp);
			} else {
				p.fmtUint64(new Go$Uint64(0, u.constructor === Number ? u : 1), verb, false);
			}
		}
	};
	pp.prototype.fmtPointer = function(value, verb, goSyntax) { return this.go$val.fmtPointer(value, verb, goSyntax); };
	pp.Ptr.prototype.catchPanic = function(arg, verb) {
		var p, err, _struct, v, v$1, v$2, v$3, v$4;
		p = this;
		err = go$recover();
		if (!(go$interfaceIsEqual(err, null))) {
			v = (_struct = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			if ((v.Kind() === 22) && v.IsNil()) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(nilAngleBytes);
				return;
			}
			if (p.panicking) {
				throw go$panic(err);
			}
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(percentBangBytes);
			p.add(verb);
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(panicBytes);
			p.panicking = true;
			p.printArg(err, 118, false, false, 0);
			p.panicking = false;
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(41);
		}
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.go$val.catchPanic(arg, verb); };
	pp.Ptr.prototype.handleMethods = function(verb, plus, goSyntax, depth) {
		var wasString, handled, p, _tuple, x, formatter, ok, _tuple$1, x$1, stringer, ok$1, _ref, v, _ref$1, _type;
		wasString = false;
		handled = false;
		var go$deferred = [];
		try {
			p = this;
			if (p.erroring) {
				return [wasString, handled];
			}
			_tuple = (x = p.arg, (x !== null && Formatter.implementedBy.indexOf(x.constructor) !== -1 ? [x, true] : [null, false])); formatter = _tuple[0]; ok = _tuple[1];
			if (ok) {
				handled = true;
				wasString = false;
				go$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
				formatter.Format(p, verb);
				return [wasString, handled];
			}
			if (plus) {
				p.fmt.plus = false;
			}
			if (goSyntax) {
				p.fmt.sharp = false;
				_tuple$1 = (x$1 = p.arg, (x$1 !== null && GoStringer.implementedBy.indexOf(x$1.constructor) !== -1 ? [x$1, true] : [null, false])); stringer = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1) {
					wasString = false;
					handled = true;
					go$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
					p.fmtString(stringer.GoString(), 115, false);
					return [wasString, handled];
				}
			} else {
				_ref = verb;
				if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) {
					_ref$1 = p.arg;
					_type = _ref$1 !== null ? _ref$1.constructor : null;
					if (go$error.implementedBy.indexOf(_type) !== -1) {
						v = _ref$1;
						wasString = false;
						handled = true;
						go$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
						p.printArg(new Go$String(v.Error()), verb, plus, false, depth);
						return [wasString, handled];
					} else if (Stringer.implementedBy.indexOf(_type) !== -1) {
						v = _ref$1;
						wasString = false;
						handled = true;
						go$deferred.push({ recv: p, method: "catchPanic", args: [p.arg, verb] });
						p.printArg(new Go$String(v.String()), verb, plus, false, depth);
						return [wasString, handled];
					}
				}
			}
			handled = false;
			return [wasString, handled];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [wasString, handled];
		}
	};
	pp.prototype.handleMethods = function(verb, plus, goSyntax, depth) { return this.go$val.handleMethods(verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printArg = function(arg, verb, plus, goSyntax, depth) {
		var wasString, p, _ref, _struct, oldPlus, oldSharp, f, _ref$1, _type, _tuple, isString, handled, _struct$1;
		wasString = false;
		p = this;
		p.arg = arg;
		p.value = new reflect.Value.Ptr((go$ptrType(reflect.rtype)).nil, 0, 0);
		if (go$interfaceIsEqual(arg, null)) {
			if ((verb === 84) || (verb === 118)) {
				p.fmt.pad(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new Go$String(reflect.TypeOf(arg).String()), 115, false, false, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer((_struct = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), verb, goSyntax);
			wasString = false;
			return wasString;
		}
		oldPlus = p.fmt.plus;
		oldSharp = p.fmt.sharp;
		if (plus) {
			p.fmt.plus = false;
		}
		if (goSyntax) {
			p.fmt.sharp = false;
		}
		_ref$1 = arg;
		_type = _ref$1 !== null ? _ref$1.constructor : null;
		if (_type === Go$Bool) {
			f = _ref$1.go$val;
			p.fmtBool(f, verb);
		} else if (_type === Go$Float32) {
			f = _ref$1.go$val;
			p.fmtFloat32(f, verb);
		} else if (_type === Go$Float64) {
			f = _ref$1.go$val;
			p.fmtFloat64(f, verb);
		} else if (_type === Go$Complex64) {
			f = _ref$1.go$val;
			p.fmtComplex64(f, verb);
		} else if (_type === Go$Complex128) {
			f = _ref$1.go$val;
			p.fmtComplex128(f, verb);
		} else if (_type === Go$Int) {
			f = _ref$1.go$val;
			p.fmtInt64(new Go$Int64(0, f), verb);
		} else if (_type === Go$Int8) {
			f = _ref$1.go$val;
			p.fmtInt64(new Go$Int64(0, f), verb);
		} else if (_type === Go$Int16) {
			f = _ref$1.go$val;
			p.fmtInt64(new Go$Int64(0, f), verb);
		} else if (_type === Go$Int32) {
			f = _ref$1.go$val;
			p.fmtInt64(new Go$Int64(0, f), verb);
		} else if (_type === Go$Int64) {
			f = _ref$1.go$val;
			p.fmtInt64(f, verb);
		} else if (_type === Go$Uint) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f), verb, goSyntax);
		} else if (_type === Go$Uint8) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f), verb, goSyntax);
		} else if (_type === Go$Uint16) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f), verb, goSyntax);
		} else if (_type === Go$Uint32) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f), verb, goSyntax);
		} else if (_type === Go$Uint64) {
			f = _ref$1.go$val;
			p.fmtUint64(f, verb, goSyntax);
		} else if (_type === Go$Uintptr) {
			f = _ref$1.go$val;
			p.fmtUint64(new Go$Uint64(0, f.constructor === Number ? f : 1), verb, goSyntax);
		} else if (_type === Go$String) {
			f = _ref$1.go$val;
			p.fmtString(f, verb, goSyntax);
			wasString = (verb === 115) || (verb === 118);
		} else if (_type === (go$sliceType(Go$Uint8))) {
			f = _ref$1.go$val;
			p.fmtBytes(f, verb, goSyntax, null, depth);
			wasString = verb === 115;
		} else {
			f = _ref$1;
			p.fmt.plus = oldPlus;
			p.fmt.sharp = oldSharp;
			_tuple = p.handleMethods(verb, plus, goSyntax, depth); isString = _tuple[0]; handled = _tuple[1];
			if (handled) {
				wasString = isString;
				return wasString;
			}
			wasString = p.printReflectValue((_struct$1 = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), verb, plus, goSyntax, depth);
			return wasString;
		}
		p.arg = null;
		return wasString;
	};
	pp.prototype.printArg = function(arg, verb, plus, goSyntax, depth) { return this.go$val.printArg(arg, verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printValue = function(value, verb, plus, goSyntax, depth) {
		var wasString, p, v, _ref, _struct, _tuple, isString, handled, _struct$1;
		wasString = false;
		p = this;
		if (!value.IsValid()) {
			if ((verb === 84) || (verb === 118)) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).Write(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new Go$String(value.Type().String()), 115, false, false, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer((_struct = value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), verb, goSyntax);
			wasString = false;
			return wasString;
		}
		p.arg = null;
		if (value.CanInterface()) {
			p.arg = value.Interface();
		}
		_tuple = p.handleMethods(verb, plus, goSyntax, depth); isString = _tuple[0]; handled = _tuple[1];
		if (handled) {
			wasString = isString;
			return wasString;
		}
		wasString = p.printReflectValue((_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), verb, plus, goSyntax, depth);
		return wasString;
	};
	pp.prototype.printValue = function(value, verb, plus, goSyntax, depth) { return this.go$val.printValue(value, verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printReflectValue = function(value, verb, plus, goSyntax, depth) {
		var wasString, p, _struct, oldValue, _struct$1, _struct$2, f, _ref, x, v, v$1, v$2, v$3, keys, _ref$1, _i, _slice, _index, _struct$3, key, i, v$4, v$5, _struct$4, v$6, _struct$5, _struct$6, v$7, v$8, v$9, _struct$7, v$10, t, i$1, v$11, v$12, _struct$8, f$1, v$13, v$14, _struct$9, _struct$10, v$15, _struct$11, value$1, v$16, v$17, v$18, _struct$12, typ, bytes, _ref$2, _i$1, i$2, _slice$1, _index$1, v$19, v$20, v$21, v$22, i$3, v$23, v$24, _struct$13, v$25, v$26, v$27, _struct$14, a, _ref$3, v$28, _struct$15, v$29, _struct$16, _struct$17, _struct$18, _struct$19;
		wasString = false;
		p = this;
		oldValue = (_struct = p.value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		p.value = (_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		f = (_struct$2 = value, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		_ref = f.Kind();
		BigSwitch:
		switch (0) { default: if (_ref === 1) {
			p.fmtBool(f.Bool(), verb);
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			p.fmtInt64(f.Int(), verb);
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			p.fmtUint64(f.Uint(), verb, goSyntax);
		} else if (_ref === 13 || _ref === 14) {
			if (f.Type().Size() === 4) {
				p.fmtFloat32(f.Float(), verb);
			} else {
				p.fmtFloat64(f.Float(), verb);
			}
		} else if (_ref === 15 || _ref === 16) {
			if (f.Type().Size() === 8) {
				p.fmtComplex64((x = f.Complex(), new Go$Complex64(x.real, x.imag)), verb);
			} else {
				p.fmtComplex128(f.Complex(), verb);
			}
		} else if (_ref === 24) {
			p.fmtString(f.String(), verb, goSyntax);
		} else if (_ref === 21) {
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(f.Type().String());
				if (f.IsNil()) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteString("(nil)");
					break;
				}
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).WriteByte(123);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(mapBytes);
			}
			keys = f.MapKeys();
			_ref$1 = keys;
			_i = 0;
			while (_i < _ref$1.length) {
				key = (_struct$3 = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
				i = _i;
				if (i > 0) {
					if (goSyntax) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).Write(commaSpaceBytes);
					} else {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$5) { p.buf = v$5; })).WriteByte(32);
					}
				}
				p.printValue((_struct$4 = key, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), verb, plus, goSyntax, depth + 1 >> 0);
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$6) { p.buf = v$6; })).WriteByte(58);
				p.printValue((_struct$6 = f.MapIndex((_struct$5 = key, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag))), new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)), verb, plus, goSyntax, depth + 1 >> 0);
				_i++;
			}
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$7) { p.buf = v$7; })).WriteByte(125);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$8) { p.buf = v$8; })).WriteByte(93);
			}
		} else if (_ref === 25) {
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$9) { p.buf = v$9; })).WriteString(value.Type().String());
			}
			p.add(123);
			v$10 = (_struct$7 = f, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag));
			t = v$10.Type();
			i$1 = 0;
			while (i$1 < v$10.NumField()) {
				if (i$1 > 0) {
					if (goSyntax) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$11) { p.buf = v$11; })).Write(commaSpaceBytes);
					} else {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$12) { p.buf = v$12; })).WriteByte(32);
					}
				}
				if (plus || goSyntax) {
					f$1 = (_struct$8 = t.Field(i$1), new reflect.StructField.Ptr(_struct$8.Name, _struct$8.PkgPath, _struct$8.Type, _struct$8.Tag, _struct$8.Offset, _struct$8.Index, _struct$8.Anonymous));
					if (!(f$1.Name === "")) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$13) { p.buf = v$13; })).WriteString(f$1.Name);
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$14) { p.buf = v$14; })).WriteByte(58);
					}
				}
				p.printValue((_struct$10 = getField((_struct$9 = v$10, new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag)), i$1), new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag)), verb, plus, goSyntax, depth + 1 >> 0);
				i$1 = i$1 + 1 >> 0;
			}
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$15) { p.buf = v$15; })).WriteByte(125);
		} else if (_ref === 20) {
			value$1 = (_struct$11 = f.Elem(), new reflect.Value.Ptr(_struct$11.typ, _struct$11.val, _struct$11.flag));
			if (!value$1.IsValid()) {
				if (goSyntax) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$16) { p.buf = v$16; })).WriteString(f.Type().String());
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$17) { p.buf = v$17; })).Write(nilParenBytes);
				} else {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$18) { p.buf = v$18; })).Write(nilAngleBytes);
				}
			} else {
				wasString = p.printValue((_struct$12 = value$1, new reflect.Value.Ptr(_struct$12.typ, _struct$12.val, _struct$12.flag)), verb, plus, goSyntax, depth + 1 >> 0);
			}
		} else if (_ref === 17 || _ref === 23) {
			typ = f.Type();
			if (typ.Elem().Kind() === 8) {
				bytes = (go$sliceType(Go$Uint8)).nil;
				if (f.Kind() === 23) {
					bytes = f.Bytes();
				} else if (f.CanAddr()) {
					bytes = f.Slice(0, f.Len()).Bytes();
				} else {
					bytes = (go$sliceType(Go$Uint8)).make(f.Len(), 0, function() { return 0; });
					_ref$2 = bytes;
					_i$1 = 0;
					while (_i$1 < _ref$2.length) {
						i$2 = _i$1;
						_slice$1 = bytes; _index$1 = i$2;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (f.Index(i$2).Uint().low << 24 >>> 24)) : go$throwRuntimeError("index out of range");
						_i$1++;
					}
				}
				p.fmtBytes(bytes, verb, goSyntax, typ, depth);
				wasString = verb === 115;
				break;
			}
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$19) { p.buf = v$19; })).WriteString(value.Type().String());
				if ((f.Kind() === 23) && f.IsNil()) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$20) { p.buf = v$20; })).WriteString("(nil)");
					break;
				}
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$21) { p.buf = v$21; })).WriteByte(123);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$22) { p.buf = v$22; })).WriteByte(91);
			}
			i$3 = 0;
			while (i$3 < f.Len()) {
				if (i$3 > 0) {
					if (goSyntax) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$23) { p.buf = v$23; })).Write(commaSpaceBytes);
					} else {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$24) { p.buf = v$24; })).WriteByte(32);
					}
				}
				p.printValue((_struct$13 = f.Index(i$3), new reflect.Value.Ptr(_struct$13.typ, _struct$13.val, _struct$13.flag)), verb, plus, goSyntax, depth + 1 >> 0);
				i$3 = i$3 + 1 >> 0;
			}
			if (goSyntax) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$25) { p.buf = v$25; })).WriteByte(125);
			} else {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$26) { p.buf = v$26; })).WriteByte(93);
			}
		} else if (_ref === 22) {
			v$27 = f.Pointer();
			if (!((v$27 === 0)) && (depth === 0)) {
				a = (_struct$14 = f.Elem(), new reflect.Value.Ptr(_struct$14.typ, _struct$14.val, _struct$14.flag));
				_ref$3 = a.Kind();
				if (_ref$3 === 17 || _ref$3 === 23) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$28) { p.buf = v$28; })).WriteByte(38);
					p.printValue((_struct$15 = a, new reflect.Value.Ptr(_struct$15.typ, _struct$15.val, _struct$15.flag)), verb, plus, goSyntax, depth + 1 >> 0);
					break BigSwitch;
				} else if (_ref$3 === 25) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$29) { p.buf = v$29; })).WriteByte(38);
					p.printValue((_struct$16 = a, new reflect.Value.Ptr(_struct$16.typ, _struct$16.val, _struct$16.flag)), verb, plus, goSyntax, depth + 1 >> 0);
					break BigSwitch;
				}
			}
			p.fmtPointer((_struct$17 = value, new reflect.Value.Ptr(_struct$17.typ, _struct$17.val, _struct$17.flag)), verb, goSyntax);
		} else if (_ref === 18 || _ref === 19 || _ref === 26) {
			p.fmtPointer((_struct$18 = value, new reflect.Value.Ptr(_struct$18.typ, _struct$18.val, _struct$18.flag)), verb, goSyntax);
		} else {
			p.unknownType(new f.constructor.Struct(f));
		} }
		p.value = (_struct$19 = oldValue, new reflect.Value.Ptr(_struct$19.typ, _struct$19.val, _struct$19.flag));
		wasString = wasString;
		return wasString;
	};
	pp.prototype.printReflectValue = function(value, verb, plus, goSyntax, depth) { return this.go$val.printReflectValue(value, verb, plus, goSyntax, depth); };
	intFromArg = function(a, argNum) {
		var num, isInt, newArgNum, _tuple, x, _slice, _index;
		num = 0;
		isInt = false;
		newArgNum = 0;
		newArgNum = argNum;
		if (argNum < a.length) {
			_tuple = (x = (_slice = a, _index = argNum, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === Go$Int ? [x.go$val, true] : [0, false])); num = _tuple[0]; isInt = _tuple[1];
			newArgNum = argNum + 1 >> 0;
		}
		return [num, isInt, newArgNum];
	};
	parseArgNumber = function(format) {
		var index, wid, ok, i, _tuple, width, ok$1, newi, _tuple$1, _tuple$2, _tuple$3;
		index = 0;
		wid = 0;
		ok = false;
		i = 1;
		while (i < format.length) {
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i); width = _tuple[0]; ok$1 = _tuple[1]; newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tuple$1 = [0, i + 1 >> 0, false]; index = _tuple$1[0]; wid = _tuple$1[1]; ok = _tuple$1[2];
					return [index, wid, ok];
				}
				_tuple$2 = [width - 1 >> 0, i + 1 >> 0, true]; index = _tuple$2[0]; wid = _tuple$2[1]; ok = _tuple$2[2];
				return [index, wid, ok];
			}
			i = i + 1 >> 0;
		}
		_tuple$3 = [0, 1, false]; index = _tuple$3[0]; wid = _tuple$3[1]; ok = _tuple$3[2];
		return [index, wid, ok];
	};
	pp.Ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var newArgNum, newi, found, p, _tuple, _tuple$1, index, wid, ok, _tuple$2, _tuple$3;
		newArgNum = 0;
		newi = 0;
		found = false;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tuple = [argNum, i, false]; newArgNum = _tuple[0]; newi = _tuple[1]; found = _tuple[2];
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple$1 = parseArgNumber(format.substring(i)); index = _tuple$1[0]; wid = _tuple$1[1]; ok = _tuple$1[2];
		if (ok && 0 <= index && index < numArgs) {
			_tuple$2 = [index, i + wid >> 0, true]; newArgNum = _tuple$2[0]; newi = _tuple$2[1]; found = _tuple$2[2];
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tuple$3 = [argNum, i + wid >> 0, true]; newArgNum = _tuple$3[0]; newi = _tuple$3[1]; found = _tuple$3[2];
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.go$val.argNumber(argNum, format, i, numArgs); };
	pp.Ptr.prototype.doPrintf = function(format, a) {
		var p, end, argNum, afterIndex, i, lasti, v, _ref, _tuple, _tuple$1, v$1, _tuple$2, _tuple$3, _tuple$4, v$2, _tuple$5, _tuple$6, v$3, _tuple$7, c, w, v$4, v$5, v$6, v$7, v$8, _slice, _index, arg, goSyntax, plus, v$9, _slice$1, _index$1, arg$1, v$10, v$11, v$12, v$13;
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		while (i < end) {
			p.goodArgNum = true;
			lasti = i;
			while (i < end && !((format.charCodeAt(i) === 37))) {
				i = i + 1 >> 0;
			}
			if (i > lasti) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				break;
			}
			i = i + 1 >> 0;
			p.fmt.clearflags();
			F:
			while (i < end) {
				_ref = format.charCodeAt(i);
				if (_ref === 35) {
					p.fmt.sharp = true;
				} else if (_ref === 48) {
					p.fmt.zero = true;
				} else if (_ref === 43) {
					p.fmt.plus = true;
				} else if (_ref === 45) {
					p.fmt.minus = true;
				} else if (_ref === 32) {
					p.fmt.space = true;
				} else {
					break F;
				}
				i = i + 1 >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.length); argNum = _tuple[0]; i = _tuple[1]; afterIndex = _tuple[2];
			if (i < end && (format.charCodeAt(i) === 42)) {
				i = i + 1 >> 0;
				_tuple$1 = intFromArg(a, argNum); p.fmt.wid = _tuple$1[0]; p.fmt.widPresent = _tuple$1[1]; argNum = _tuple$1[2];
				if (!p.fmt.widPresent) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).Write(badWidthBytes);
				}
				afterIndex = false;
			} else {
				_tuple$2 = parsenum(format, i, end); p.fmt.wid = _tuple$2[0]; p.fmt.widPresent = _tuple$2[1]; i = _tuple$2[2];
				if (afterIndex && p.fmt.widPresent) {
					p.goodArgNum = false;
				}
			}
			if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {
				i = i + 1 >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.length); argNum = _tuple$3[0]; i = _tuple$3[1]; afterIndex = _tuple$3[2];
				if (format.charCodeAt(i) === 42) {
					i = i + 1 >> 0;
					_tuple$4 = intFromArg(a, argNum); p.fmt.prec = _tuple$4[0]; p.fmt.precPresent = _tuple$4[1]; argNum = _tuple$4[2];
					if (!p.fmt.precPresent) {
						(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$2) { p.buf = v$2; })).Write(badPrecBytes);
					}
					afterIndex = false;
				} else {
					_tuple$5 = parsenum(format, i, end); p.fmt.prec = _tuple$5[0]; p.fmt.precPresent = _tuple$5[1]; i = _tuple$5[2];
					if (!p.fmt.precPresent) {
						p.fmt.prec = 0;
						p.fmt.precPresent = true;
					}
				}
			}
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.length); argNum = _tuple$6[0]; i = _tuple$6[1]; afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$3) { p.buf = v$3; })).Write(noVerbBytes);
				continue;
			}
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i)); c = _tuple$7[0]; w = _tuple$7[1];
			i = i + (w) >> 0;
			if (c === 37) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$4) { p.buf = v$4; })).WriteByte(37);
				continue;
			}
			if (!p.goodArgNum) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$5) { p.buf = v$5; })).Write(percentBangBytes);
				p.add(c);
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$6) { p.buf = v$6; })).Write(badIndexBytes);
				continue;
			} else if (argNum >= a.length) {
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$7) { p.buf = v$7; })).Write(percentBangBytes);
				p.add(c);
				(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$8) { p.buf = v$8; })).Write(missingBytes);
				continue;
			}
			arg = (_slice = a, _index = argNum, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			argNum = argNum + 1 >> 0;
			goSyntax = (c === 118) && p.fmt.sharp;
			plus = (c === 118) && p.fmt.plus;
			p.printArg(arg, c, plus, goSyntax, 0);
		}
		if (!p.reordered && argNum < a.length) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$9) { p.buf = v$9; })).Write(extraBytes);
			while (argNum < a.length) {
				arg$1 = (_slice$1 = a, _index$1 = argNum, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				if (!(go$interfaceIsEqual(arg$1, null))) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$10) { p.buf = v$10; })).WriteString(reflect.TypeOf(arg$1).String());
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$11) { p.buf = v$11; })).WriteByte(61);
				}
				p.printArg(arg$1, 118, false, false, 0);
				if ((argNum + 1 >> 0) < a.length) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$12) { p.buf = v$12; })).Write(commaSpaceBytes);
				}
				argNum = argNum + 1 >> 0;
			}
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$13) { p.buf = v$13; })).WriteByte(41);
		}
	};
	pp.prototype.doPrintf = function(format, a) { return this.go$val.doPrintf(format, a); };
	pp.Ptr.prototype.doPrint = function(a, addspace, addnewline) {
		var p, prevString, argNum, _slice, _index, arg, isString, v, v$1;
		p = this;
		prevString = false;
		argNum = 0;
		while (argNum < a.length) {
			p.fmt.clearflags();
			arg = (_slice = a, _index = argNum, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (argNum > 0) {
				isString = !(go$interfaceIsEqual(arg, null)) && (reflect.TypeOf(arg).Kind() === 24);
				if (addspace || !isString && !prevString) {
					(new (go$ptrType(buffer))(function() { return p.buf; }, function(v) { p.buf = v; })).WriteByte(32);
				}
			}
			prevString = p.printArg(arg, 118, false, false, 0);
			argNum = argNum + 1 >> 0;
		}
		if (addnewline) {
			(new (go$ptrType(buffer))(function() { return p.buf; }, function(v$1) { p.buf = v$1; })).WriteByte(10);
		}
	};
	pp.prototype.doPrint = function(a, addspace, addnewline) { return this.go$val.doPrint(a, addspace, addnewline); };
	go$ptrType(stringReader).prototype.Read = function(b) {
		var n, err, r;
		n = 0;
		err = null;
		r = this;
		n = go$copyString(b, r.go$get());
		r.go$set((r.go$get()).substring(n));
		if (n === 0) {
			err = io.EOF;
		}
		return [n, err];
	};
	stringReader.prototype.Read = function(b) { var obj = this.go$val; return (new (go$ptrType(stringReader))(function() { return obj; }, null)).Read(b); };
	Sscan = go$pkg.Sscan = function(str, a) {
		var n, err, _tuple, x, v;
		n = 0;
		err = null;
		_tuple = Fscan((x = new (go$ptrType(Go$String))(function() { return str; }, function(v) { str = v;; }), new (go$ptrType(stringReader))(x.go$get, x.go$set)), a); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Fscan = go$pkg.Fscan = function(r, a) {
		var n, err, _tuple, s, _struct, old, _tuple$1, _struct$1;
		n = 0;
		err = null;
		_tuple = newScanState(r, true, false); s = _tuple[0]; old = (_struct = _tuple[1], new ssave.Ptr(_struct.validSave, _struct.nlIsEnd, _struct.nlIsSpace, _struct.argLimit, _struct.limit, _struct.maxWid));
		_tuple$1 = s.doScan(a); n = _tuple$1[0]; err = _tuple$1[1];
		s.free((_struct$1 = old, new ssave.Ptr(_struct$1.validSave, _struct$1.nlIsEnd, _struct$1.nlIsSpace, _struct$1.argLimit, _struct$1.limit, _struct$1.maxWid)));
		return [n, err];
	};
	ss.Ptr.prototype.Read = function(buf) {
		var n, err, s, _tuple;
		n = 0;
		err = null;
		s = this;
		_tuple = [0, errors.New("ScanState's Read should not be called. Use ReadRune")]; n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.go$val.Read(buf); };
	ss.Ptr.prototype.ReadRune = function() {
		var r, size, err, s, _tuple;
		r = 0;
		size = 0;
		err = null;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + 1 >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_tuple = s.rr.ReadRune(); r = _tuple[0]; size = _tuple[1]; err = _tuple[2];
		if (go$interfaceIsEqual(err, null)) {
			s.count = s.count + 1 >> 0;
			s.prevRune = r;
		} else if (go$interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
	};
	ss.prototype.ReadRune = function() { return this.go$val.ReadRune(); };
	ss.Ptr.prototype.Width = function() {
		var wid, ok, s, _tuple, _tuple$1;
		wid = 0;
		ok = false;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tuple = [0, false]; wid = _tuple[0]; ok = _tuple[1];
			return [wid, ok];
		}
		_tuple$1 = [s.ssave.maxWid, true]; wid = _tuple$1[0]; ok = _tuple$1[1];
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.go$val.Width(); };
	ss.Ptr.prototype.getRune = function() {
		var r, s, _tuple, err;
		r = 0;
		s = this;
		_tuple = s.ReadRune(); r = _tuple[0]; err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			if (go$interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
	};
	ss.prototype.getRune = function() { return this.go$val.getRune(); };
	ss.Ptr.prototype.mustReadRune = function() {
		var r, s;
		r = 0;
		s = this;
		r = s.getRune();
		if (r === -1) {
			s.error(io.ErrUnexpectedEOF);
		}
		return r;
	};
	ss.prototype.mustReadRune = function() { return this.go$val.mustReadRune(); };
	ss.Ptr.prototype.UnreadRune = function() {
		var s, _tuple, x, u, ok;
		s = this;
		_tuple = (x = s.rr, (x !== null && runeUnreader.implementedBy.indexOf(x.constructor) !== -1 ? [x, true] : [null, false])); u = _tuple[0]; ok = _tuple[1];
		if (ok) {
			u.UnreadRune();
		} else {
			s.peekRune = s.prevRune;
		}
		s.prevRune = -1;
		s.count = s.count - 1 >> 0;
		return null;
	};
	ss.prototype.UnreadRune = function() { return this.go$val.UnreadRune(); };
	ss.Ptr.prototype.error = function(err) {
		var s, x;
		s = this;
		throw go$panic((x = new scanError.Ptr(err), new x.constructor.Struct(x)));
	};
	ss.prototype.error = function(err) { return this.go$val.error(err); };
	ss.Ptr.prototype.errorString = function(err) {
		var s, x;
		s = this;
		throw go$panic((x = new scanError.Ptr(errors.New(err)), new x.constructor.Struct(x)));
	};
	ss.prototype.errorString = function(err) { return this.go$val.errorString(err); };
	ss.Ptr.prototype.Token = function(skipSpace, f) {
		var tok, err, s;
		tok = (go$sliceType(Go$Uint8)).nil;
		err = null;
		var go$deferred = [];
		try {
			s = this;
			go$deferred.push({ fun: (function() {
				var e, _tuple, _struct, se, ok;
				e = go$recover();
				if (!(go$interfaceIsEqual(e, null))) {
					_tuple = (e !== null && e.constructor === scanError ? [e.go$val, true] : [new scanError.Ptr(), false]); se = (_struct = _tuple[0], new scanError.Ptr(_struct.err)); ok = _tuple[1];
					if (ok) {
						err = se.err;
					} else {
						throw go$panic(e);
					}
				}
			}), args: [] });
			if (f === go$throwNilPointerError) {
				f = notSpace;
			}
			s.buf = go$subslice(s.buf, 0, 0);
			tok = s.token(skipSpace, f);
			return [tok, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [tok, err];
		}
	};
	ss.prototype.Token = function(skipSpace, f) { return this.go$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var rx, _ref, _i, _slice, _index, rng;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (_i < _ref.length) {
			rng = go$mapArray((_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), function(entry) { return entry; });
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		return !isSpace(r);
	};
	ss.Ptr.prototype.SkipSpace = function() {
		var s;
		s = this;
		s.skipSpace(false);
	};
	ss.prototype.SkipSpace = function() { return this.go$val.SkipSpace(); };
	readRune.Ptr.prototype.readByte = function() {
		var b, err, r, _tuple, n, _tuple$1, _tuple$2;
		b = 0;
		err = null;
		r = this;
		if (r.pending > 0) {
			b = r.pendBuf[0];
			go$copySlice(go$subslice(new (go$sliceType(Go$Uint8))(r.pendBuf), 0), go$subslice(new (go$sliceType(Go$Uint8))(r.pendBuf), 1));
			r.pending = r.pending - 1 >> 0;
			return [b, err];
		}
		_tuple = io.ReadFull(r.reader, go$subslice(new (go$sliceType(Go$Uint8))(r.pendBuf), 0, 1)); n = _tuple[0]; err = _tuple[1];
		if (!((n === 1))) {
			_tuple$1 = [0, err]; b = _tuple$1[0]; err = _tuple$1[1];
			return [b, err];
		}
		_tuple$2 = [r.pendBuf[0], err]; b = _tuple$2[0]; err = _tuple$2[1];
		return [b, err];
	};
	readRune.prototype.readByte = function() { return this.go$val.readByte(); };
	readRune.Ptr.prototype.unread = function(buf) {
		var r;
		r = this;
		go$copySlice(go$subslice(new (go$sliceType(Go$Uint8))(r.pendBuf), r.pending), buf);
		r.pending = r.pending + (buf.length) >> 0;
	};
	readRune.prototype.unread = function(buf) { return this.go$val.unread(buf); };
	readRune.Ptr.prototype.ReadRune = function() {
		var rr, size, err, r, _tuple, _tuple$1, n, _tuple$2, _tuple$3;
		rr = 0;
		size = 0;
		err = null;
		r = this;
		_tuple = r.readByte(); r.buf[0] = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			_tuple$1 = [0, 0, err]; rr = _tuple$1[0]; size = _tuple$1[1]; err = _tuple$1[2];
			return [rr, size, err];
		}
		if (r.buf[0] < 128) {
			rr = (r.buf[0] >> 0);
			return [rr, size, err];
		}
		n = 0;
		n = 1;
		while (!utf8.FullRune(go$subslice(new (go$sliceType(Go$Uint8))(r.buf), 0, n))) {
			_tuple$2 = r.readByte(); r.buf[n] = _tuple$2[0]; err = _tuple$2[1];
			if (!(go$interfaceIsEqual(err, null))) {
				if (go$interfaceIsEqual(err, io.EOF)) {
					err = null;
					break;
				}
				return [rr, size, err];
			}
			n = n + 1 >> 0;
		}
		_tuple$3 = utf8.DecodeRune(go$subslice(new (go$sliceType(Go$Uint8))(r.buf), 0, n)); rr = _tuple$3[0]; size = _tuple$3[1];
		if (size < n) {
			r.unread(go$subslice(new (go$sliceType(Go$Uint8))(r.buf), size, n));
		}
		return [rr, size, err];
	};
	readRune.prototype.ReadRune = function() { return this.go$val.ReadRune(); };
	newScanState = function(r, nlIsSpace, nlIsEnd) {
		var s, old, _tuple, ok, _struct, _struct$1, x, _tuple$1, rr, ok$1, _struct$2;
		s = (go$ptrType(ss)).nil;
		old = new ssave.Ptr();
		_tuple = (r !== null && r.constructor === (go$ptrType(ss)) ? [r.go$val, true] : [(go$ptrType(ss)).nil, false]); s = _tuple[0]; ok = _tuple[1];
		if (ok) {
			old = (_struct = s.ssave, new ssave.Ptr(_struct.validSave, _struct.nlIsEnd, _struct.nlIsSpace, _struct.argLimit, _struct.limit, _struct.maxWid));
			s.ssave.limit = s.ssave.argLimit;
			s.ssave.nlIsEnd = nlIsEnd || s.ssave.nlIsEnd;
			s.ssave.nlIsSpace = nlIsSpace;
			return [s, (_struct$1 = old, new ssave.Ptr(_struct$1.validSave, _struct$1.nlIsEnd, _struct$1.nlIsSpace, _struct$1.argLimit, _struct$1.limit, _struct$1.maxWid))];
		}
		s = (x = ssFree.get(), (x !== null && x.constructor === (go$ptrType(ss)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(ss)))));
		_tuple$1 = (r !== null && io.RuneReader.implementedBy.indexOf(r.constructor) !== -1 ? [r, true] : [null, false]); rr = _tuple$1[0]; ok$1 = _tuple$1[1];
		if (ok$1) {
			s.rr = rr;
		} else {
			s.rr = new readRune.Ptr(r, go$makeNativeArray("Uint8", 4, function() { return 0; }), 0, go$makeNativeArray("Uint8", 4, function() { return 0; }));
		}
		s.ssave.nlIsSpace = nlIsSpace;
		s.ssave.nlIsEnd = nlIsEnd;
		s.prevRune = -1;
		s.peekRune = -1;
		s.atEOF = false;
		s.ssave.limit = 1073741824;
		s.ssave.argLimit = 1073741824;
		s.ssave.maxWid = 1073741824;
		s.ssave.validSave = true;
		s.count = 0;
		return [s, (_struct$2 = old, new ssave.Ptr(_struct$2.validSave, _struct$2.nlIsEnd, _struct$2.nlIsSpace, _struct$2.argLimit, _struct$2.limit, _struct$2.maxWid))];
	};
	ss.Ptr.prototype.free = function(old) {
		var s, _struct;
		s = this;
		if (old.validSave) {
			s.ssave = (_struct = old, new ssave.Ptr(_struct.validSave, _struct.nlIsEnd, _struct.nlIsSpace, _struct.argLimit, _struct.limit, _struct.maxWid));
			return;
		}
		if (s.buf.capacity > 1024) {
			return;
		}
		s.buf = go$subslice(s.buf, 0, 0);
		s.rr = null;
		ssFree.put(s);
	};
	ss.prototype.free = function(old) { return this.go$val.free(old); };
	ss.Ptr.prototype.skipSpace = function(stopAtNewline) {
		var s, r;
		s = this;
		while (true) {
			r = s.getRune();
			if (r === -1) {
				return;
			}
			if ((r === 13) && s.peek("\n")) {
				continue;
			}
			if (r === 10) {
				if (stopAtNewline) {
					break;
				}
				if (s.ssave.nlIsSpace) {
					continue;
				}
				s.errorString("unexpected newline");
				return;
			}
			if (!isSpace(r)) {
				s.UnreadRune();
				break;
			}
		}
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.go$val.skipSpace(stopAtNewline); };
	ss.Ptr.prototype.token = function(skipSpace, f) {
		var s, r, v, x;
		s = this;
		if (skipSpace) {
			s.skipSpace(false);
		}
		while (true) {
			r = s.getRune();
			if (r === -1) {
				break;
			}
			if (!f(r)) {
				s.UnreadRune();
				break;
			}
			(new (go$ptrType(buffer))(function() { return s.buf; }, function(v) { s.buf = v; })).WriteRune(r);
		}
		return (x = s.buf, go$subslice(new (go$sliceType(Go$Uint8))(x.array), x.offset, x.offset + x.length));
	};
	ss.prototype.token = function(skipSpace, f) { return this.go$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _ref, _i, _rune, c, i;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			i = _i;
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.Ptr.prototype.consume = function(ok, accept) {
		var s, r, v;
		s = this;
		r = s.getRune();
		if (r === -1) {
			return false;
		}
		if (indexRune(ok, r) >= 0) {
			if (accept) {
				(new (go$ptrType(buffer))(function() { return s.buf; }, function(v) { s.buf = v; })).WriteRune(r);
			}
			return true;
		}
		if (!((r === -1)) && accept) {
			s.UnreadRune();
		}
		return false;
	};
	ss.prototype.consume = function(ok, accept) { return this.go$val.consume(ok, accept); };
	ss.Ptr.prototype.peek = function(ok) {
		var s, r;
		s = this;
		r = s.getRune();
		if (!((r === -1))) {
			s.UnreadRune();
		}
		return indexRune(ok, r) >= 0;
	};
	ss.prototype.peek = function(ok) { return this.go$val.peek(ok); };
	ss.Ptr.prototype.notEOF = function() {
		var s, r;
		s = this;
		r = s.getRune();
		if (r === -1) {
			throw go$panic(io.EOF);
		}
		s.UnreadRune();
	};
	ss.prototype.notEOF = function() { return this.go$val.notEOF(); };
	ss.Ptr.prototype.accept = function(ok) {
		var s;
		s = this;
		return s.consume(ok, true);
	};
	ss.prototype.accept = function(ok) { return this.go$val.accept(ok); };
	ss.Ptr.prototype.okVerb = function(verb, okVerbs, typ) {
		var s, _ref, _i, _rune, v;
		s = this;
		_ref = okVerbs;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			v = _rune[0];
			if (v === verb) {
				return true;
			}
			_i += _rune[1];
		}
		s.errorString("bad verb %" + go$encodeRune(verb) + " for " + typ);
		return false;
	};
	ss.prototype.okVerb = function(verb, okVerbs, typ) { return this.go$val.okVerb(verb, okVerbs, typ); };
	ss.Ptr.prototype.scanBool = function(verb) {
		var s, _ref;
		s = this;
		s.skipSpace(false);
		s.notEOF();
		if (!s.okVerb(verb, "tv", "boolean")) {
			return false;
		}
		_ref = s.getRune();
		if (_ref === 48) {
			return false;
		} else if (_ref === 49) {
			return true;
		} else if (_ref === 116 || _ref === 84) {
			if (s.accept("rR") && (!s.accept("uU") || !s.accept("eE"))) {
				s.error(boolError);
			}
			return true;
		} else if (_ref === 102 || _ref === 70) {
			if (s.accept("aA") && (!s.accept("lL") || !s.accept("sS") || !s.accept("eE"))) {
				s.error(boolError);
			}
			return false;
		}
		return false;
	};
	ss.prototype.scanBool = function(verb) { return this.go$val.scanBool(verb); };
	ss.Ptr.prototype.getBase = function(verb) {
		var base, digits, s, _ref;
		base = 0;
		digits = "";
		s = this;
		s.okVerb(verb, "bdoUxXv", "integer");
		base = 10;
		digits = "0123456789";
		_ref = verb;
		if (_ref === 98) {
			base = 2;
			digits = "01";
		} else if (_ref === 111) {
			base = 8;
			digits = "01234567";
		} else if (_ref === 120 || _ref === 88 || _ref === 85) {
			base = 16;
			digits = "0123456789aAbBcCdDeEfF";
		}
		return [base, digits];
	};
	ss.prototype.getBase = function(verb) { return this.go$val.getBase(verb); };
	ss.Ptr.prototype.scanNumber = function(digits, haveDigits) {
		var s;
		s = this;
		if (!haveDigits) {
			s.notEOF();
			if (!s.accept(digits)) {
				s.errorString("expected integer");
			}
		}
		while (s.accept(digits)) {
		}
		return go$bytesToString(s.buf);
	};
	ss.prototype.scanNumber = function(digits, haveDigits) { return this.go$val.scanNumber(digits, haveDigits); };
	ss.Ptr.prototype.scanRune = function(bitSize) {
		var s, r, n, x;
		s = this;
		s.notEOF();
		r = new Go$Int64(0, s.getRune());
		n = (bitSize >>> 0);
		x = go$shiftRightInt64((go$shiftLeft64(r, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x.high === r.high && x.low === r.low))) {
			s.errorString("overflow on character value " + go$encodeRune(r.low));
		}
		return r;
	};
	ss.prototype.scanRune = function(bitSize) { return this.go$val.scanRune(bitSize); };
	ss.Ptr.prototype.scanBasePrefix = function() {
		var base, digits, found, s, _tuple, _tuple$1, _tuple$2;
		base = 0;
		digits = "";
		found = false;
		s = this;
		if (!s.peek("0")) {
			_tuple = [10, "0123456789", false]; base = _tuple[0]; digits = _tuple[1]; found = _tuple[2];
			return [base, digits, found];
		}
		s.accept("0");
		found = true;
		_tuple$1 = [8, "01234567"]; base = _tuple$1[0]; digits = _tuple$1[1];
		if (s.peek("xX")) {
			s.consume("xX", false);
			_tuple$2 = [16, "0123456789aAbBcCdDeEfF"]; base = _tuple$2[0]; digits = _tuple$2[1];
		}
		return [base, digits, found];
	};
	ss.prototype.scanBasePrefix = function() { return this.go$val.scanBasePrefix(); };
	ss.Ptr.prototype.scanInt = function(verb, bitSize) {
		var s, _tuple, base, digits, haveDigits, _tuple$1, tok, _tuple$2, i, err, n, x;
		s = this;
		if (verb === 99) {
			return s.scanRune(bitSize);
		}
		s.skipSpace(false);
		s.notEOF();
		_tuple = s.getBase(verb); base = _tuple[0]; digits = _tuple[1];
		haveDigits = false;
		if (verb === 85) {
			if (!s.consume("U", false) || !s.consume("+", false)) {
				s.errorString("bad unicode format ");
			}
		} else {
			s.accept("+-");
			if (verb === 118) {
				_tuple$1 = s.scanBasePrefix(); base = _tuple$1[0]; digits = _tuple$1[1]; haveDigits = _tuple$1[2];
			}
		}
		tok = s.scanNumber(digits, haveDigits);
		_tuple$2 = strconv.ParseInt(tok, base, 64); i = _tuple$2[0]; err = _tuple$2[1];
		if (!(go$interfaceIsEqual(err, null))) {
			s.error(err);
		}
		n = (bitSize >>> 0);
		x = go$shiftRightInt64((go$shiftLeft64(i, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x.high === i.high && x.low === i.low))) {
			s.errorString("integer overflow on token " + tok);
		}
		return i;
	};
	ss.prototype.scanInt = function(verb, bitSize) { return this.go$val.scanInt(verb, bitSize); };
	ss.Ptr.prototype.scanUint = function(verb, bitSize) {
		var s, x, _tuple, base, digits, haveDigits, _tuple$1, tok, _tuple$2, i, err, n, x$1;
		s = this;
		if (verb === 99) {
			return (x = s.scanRune(bitSize), new Go$Uint64(x.high, x.low));
		}
		s.skipSpace(false);
		s.notEOF();
		_tuple = s.getBase(verb); base = _tuple[0]; digits = _tuple[1];
		haveDigits = false;
		if (verb === 85) {
			if (!s.consume("U", false) || !s.consume("+", false)) {
				s.errorString("bad unicode format ");
			}
		} else if (verb === 118) {
			_tuple$1 = s.scanBasePrefix(); base = _tuple$1[0]; digits = _tuple$1[1]; haveDigits = _tuple$1[2];
		}
		tok = s.scanNumber(digits, haveDigits);
		_tuple$2 = strconv.ParseUint(tok, base, 64); i = _tuple$2[0]; err = _tuple$2[1];
		if (!(go$interfaceIsEqual(err, null))) {
			s.error(err);
		}
		n = (bitSize >>> 0);
		x$1 = go$shiftRightUint64((go$shiftLeft64(i, ((64 - n >>> 0)))), ((64 - n >>> 0)));
		if (!((x$1.high === i.high && x$1.low === i.low))) {
			s.errorString("unsigned integer overflow on token " + tok);
		}
		return i;
	};
	ss.prototype.scanUint = function(verb, bitSize) { return this.go$val.scanUint(verb, bitSize); };
	ss.Ptr.prototype.floatToken = function() {
		var s;
		s = this;
		s.buf = go$subslice(s.buf, 0, 0);
		if (s.accept("nN") && s.accept("aA") && s.accept("nN")) {
			return go$bytesToString(s.buf);
		}
		s.accept("+-");
		if (s.accept("iI") && s.accept("nN") && s.accept("fF")) {
			return go$bytesToString(s.buf);
		}
		while (s.accept("0123456789")) {
		}
		if (s.accept(".")) {
			while (s.accept("0123456789")) {
			}
		}
		if (s.accept("eEp")) {
			s.accept("+-");
			while (s.accept("0123456789")) {
			}
		}
		return go$bytesToString(s.buf);
	};
	ss.prototype.floatToken = function() { return this.go$val.floatToken(); };
	ss.Ptr.prototype.complexTokens = function() {
		var real, imag, s, parens, imagSign, _tuple;
		real = "";
		imag = "";
		s = this;
		parens = s.accept("(");
		real = s.floatToken();
		s.buf = go$subslice(s.buf, 0, 0);
		if (!s.accept("+-")) {
			s.error(complexError);
		}
		imagSign = go$bytesToString(s.buf);
		imag = s.floatToken();
		if (!s.accept("i")) {
			s.error(complexError);
		}
		if (parens && !s.accept(")")) {
			s.error(complexError);
		}
		_tuple = [real, imagSign + imag]; real = _tuple[0]; imag = _tuple[1];
		return [real, imag];
	};
	ss.prototype.complexTokens = function() { return this.go$val.complexTokens(); };
	ss.Ptr.prototype.convertFloat = function(str, n) {
		var s, p, _tuple, f, err, _tuple$1, e, ok, _tuple$2, m, _tuple$3, e$1, ok$1, _tuple$4, f$1, err$1;
		s = this;
		p = indexRune(str, 112);
		if (p >= 0) {
			_tuple = strconv.ParseFloat(str.substring(0, p), n); f = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				_tuple$1 = (err !== null && err.constructor === (go$ptrType(strconv.NumError)) ? [err.go$val, true] : [(go$ptrType(strconv.NumError)).nil, false]); e = _tuple$1[0]; ok = _tuple$1[1];
				if (ok) {
					e.Num = str;
				}
				s.error(err);
			}
			_tuple$2 = strconv.Atoi(str.substring((p + 1 >> 0))); m = _tuple$2[0]; err = _tuple$2[1];
			if (!(go$interfaceIsEqual(err, null))) {
				_tuple$3 = (err !== null && err.constructor === (go$ptrType(strconv.NumError)) ? [err.go$val, true] : [(go$ptrType(strconv.NumError)).nil, false]); e$1 = _tuple$3[0]; ok$1 = _tuple$3[1];
				if (ok$1) {
					e$1.Num = str;
				}
				s.error(err);
			}
			return math.Ldexp(f, m);
		}
		_tuple$4 = strconv.ParseFloat(str, n); f$1 = _tuple$4[0]; err$1 = _tuple$4[1];
		if (!(go$interfaceIsEqual(err$1, null))) {
			s.error(err$1);
		}
		return f$1;
	};
	ss.prototype.convertFloat = function(str, n) { return this.go$val.convertFloat(str, n); };
	ss.Ptr.prototype.scanComplex = function(verb, n) {
		var s, _tuple, sreal, simag, _q, real, _q$1, imag;
		s = this;
		if (!s.okVerb(verb, "beEfFgGv", "complex")) {
			return new Go$Complex128(0, 0);
		}
		s.skipSpace(false);
		s.notEOF();
		_tuple = s.complexTokens(); sreal = _tuple[0]; simag = _tuple[1];
		real = s.convertFloat(sreal, (_q = n / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")));
		imag = s.convertFloat(simag, (_q$1 = n / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero")));
		return new Go$Complex128(real, imag);
	};
	ss.prototype.scanComplex = function(verb, n) { return this.go$val.scanComplex(verb, n); };
	ss.Ptr.prototype.convertString = function(verb) {
		var str, s, _ref;
		str = "";
		s = this;
		if (!s.okVerb(verb, "svqx", "string")) {
			str = "";
			return str;
		}
		s.skipSpace(false);
		s.notEOF();
		_ref = verb;
		if (_ref === 113) {
			str = s.quotedString();
		} else if (_ref === 120) {
			str = s.hexString();
		} else {
			str = go$bytesToString(s.token(true, notSpace));
		}
		return str;
	};
	ss.prototype.convertString = function(verb) { return this.go$val.convertString(verb); };
	ss.Ptr.prototype.quotedString = function() {
		var s, quote, _ref, r, v, v$1, r$1, v$2, v$3, _tuple, result, err;
		s = this;
		s.notEOF();
		quote = s.getRune();
		_ref = quote;
		if (_ref === 96) {
			while (true) {
				r = s.mustReadRune();
				if (r === quote) {
					break;
				}
				(new (go$ptrType(buffer))(function() { return s.buf; }, function(v) { s.buf = v; })).WriteRune(r);
			}
			return go$bytesToString(s.buf);
		} else if (_ref === 34) {
			(new (go$ptrType(buffer))(function() { return s.buf; }, function(v$1) { s.buf = v$1; })).WriteRune(quote);
			while (true) {
				r$1 = s.mustReadRune();
				(new (go$ptrType(buffer))(function() { return s.buf; }, function(v$2) { s.buf = v$2; })).WriteRune(r$1);
				if (r$1 === 92) {
					(new (go$ptrType(buffer))(function() { return s.buf; }, function(v$3) { s.buf = v$3; })).WriteRune(s.mustReadRune());
				} else if (r$1 === 34) {
					break;
				}
			}
			_tuple = strconv.Unquote(go$bytesToString(s.buf)); result = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				s.error(err);
			}
			return result;
		} else {
			s.errorString("expected quoted string");
		}
		return "";
	};
	ss.prototype.quotedString = function() { return this.go$val.quotedString(); };
	ss.Ptr.prototype.hexDigit = function(d) {
		var s, digit, _ref;
		s = this;
		digit = (d >> 0);
		_ref = digit;
		if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55 || _ref === 56 || _ref === 57) {
			return digit - 48 >> 0;
		} else if (_ref === 97 || _ref === 98 || _ref === 99 || _ref === 100 || _ref === 101 || _ref === 102) {
			return (10 + digit >> 0) - 97 >> 0;
		} else if (_ref === 65 || _ref === 66 || _ref === 67 || _ref === 68 || _ref === 69 || _ref === 70) {
			return (10 + digit >> 0) - 65 >> 0;
		}
		s.errorString("illegal hex digit");
		return 0;
	};
	ss.prototype.hexDigit = function(d) { return this.go$val.hexDigit(d); };
	ss.Ptr.prototype.hexByte = function() {
		var b, ok, s, rune1, rune2, _tuple;
		b = 0;
		ok = false;
		s = this;
		rune1 = s.getRune();
		if (rune1 === -1) {
			return [b, ok];
		}
		if (isSpace(rune1)) {
			s.UnreadRune();
			return [b, ok];
		}
		rune2 = s.mustReadRune();
		_tuple = [(((s.hexDigit(rune1) << 4 >> 0) | s.hexDigit(rune2)) << 24 >>> 24), true]; b = _tuple[0]; ok = _tuple[1];
		return [b, ok];
	};
	ss.prototype.hexByte = function() { return this.go$val.hexByte(); };
	ss.Ptr.prototype.hexString = function() {
		var s, _tuple, b, ok, v;
		s = this;
		s.notEOF();
		while (true) {
			_tuple = s.hexByte(); b = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				break;
			}
			(new (go$ptrType(buffer))(function() { return s.buf; }, function(v) { s.buf = v; })).WriteByte(b);
		}
		if (s.buf.length === 0) {
			s.errorString("no hex data for %x string");
			return "";
		}
		return go$bytesToString(s.buf);
	};
	ss.prototype.hexString = function() { return this.go$val.hexString(); };
	ss.Ptr.prototype.scanOne = function(verb, arg) {
		var s, err, _tuple, v, ok, v$1, _ref, _type, x, x$1, x$2, x$3, x$4, _struct, val, _struct$1, ptr, _struct$2, v$2, _ref$1, typ, str, _struct$3, i;
		s = this;
		s.buf = go$subslice(s.buf, 0, 0);
		err = null;
		_tuple = (arg !== null && Scanner.implementedBy.indexOf(arg.constructor) !== -1 ? [arg, true] : [null, false]); v = _tuple[0]; ok = _tuple[1];
		if (ok) {
			err = v.Scan(s, verb);
			if (!(go$interfaceIsEqual(err, null))) {
				if (go$interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				s.error(err);
			}
			return;
		}
		_ref = arg;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(Go$Bool))) {
			v$1 = _ref.go$val;
			v$1.go$set(s.scanBool(verb));
		} else if (_type === (go$ptrType(Go$Complex64))) {
			v$1 = _ref.go$val;
			v$1.go$set((x = s.scanComplex(verb, 64), new Go$Complex64(x.real, x.imag)));
		} else if (_type === (go$ptrType(Go$Complex128))) {
			v$1 = _ref.go$val;
			v$1.go$set(s.scanComplex(verb, 128));
		} else if (_type === (go$ptrType(Go$Int))) {
			v$1 = _ref.go$val;
			v$1.go$set(((x$1 = s.scanInt(verb, intBits), x$1.low + ((x$1.high >> 31) * 4294967296)) >> 0));
		} else if (_type === (go$ptrType(Go$Int8))) {
			v$1 = _ref.go$val;
			v$1.go$set(((x$2 = s.scanInt(verb, 8), x$2.low + ((x$2.high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_type === (go$ptrType(Go$Int16))) {
			v$1 = _ref.go$val;
			v$1.go$set(((x$3 = s.scanInt(verb, 16), x$3.low + ((x$3.high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_type === (go$ptrType(Go$Int32))) {
			v$1 = _ref.go$val;
			v$1.go$set(((x$4 = s.scanInt(verb, 32), x$4.low + ((x$4.high >> 31) * 4294967296)) >> 0));
		} else if (_type === (go$ptrType(Go$Int64))) {
			v$1 = _ref.go$val;
			v$1.go$set(s.scanInt(verb, 64));
		} else if (_type === (go$ptrType(Go$Uint))) {
			v$1 = _ref.go$val;
			v$1.go$set((s.scanUint(verb, intBits).low >>> 0));
		} else if (_type === (go$ptrType(Go$Uint8))) {
			v$1 = _ref.go$val;
			v$1.go$set((s.scanUint(verb, 8).low << 24 >>> 24));
		} else if (_type === (go$ptrType(Go$Uint16))) {
			v$1 = _ref.go$val;
			v$1.go$set((s.scanUint(verb, 16).low << 16 >>> 16));
		} else if (_type === (go$ptrType(Go$Uint32))) {
			v$1 = _ref.go$val;
			v$1.go$set((s.scanUint(verb, 32).low >>> 0));
		} else if (_type === (go$ptrType(Go$Uint64))) {
			v$1 = _ref.go$val;
			v$1.go$set(s.scanUint(verb, 64));
		} else if (_type === (go$ptrType(Go$Uintptr))) {
			v$1 = _ref.go$val;
			v$1.go$set((s.scanUint(verb, uintptrBits).low >>> 0));
		} else if (_type === (go$ptrType(Go$Float32))) {
			v$1 = _ref.go$val;
			if (s.okVerb(verb, "beEfFgGv", "float32")) {
				s.skipSpace(false);
				s.notEOF();
				v$1.go$set(s.convertFloat(s.floatToken(), 32));
			}
		} else if (_type === (go$ptrType(Go$Float64))) {
			v$1 = _ref.go$val;
			if (s.okVerb(verb, "beEfFgGv", "float64")) {
				s.skipSpace(false);
				s.notEOF();
				v$1.go$set(s.convertFloat(s.floatToken(), 64));
			}
		} else if (_type === (go$ptrType(Go$String))) {
			v$1 = _ref.go$val;
			v$1.go$set(s.convertString(verb));
		} else if (_type === (go$ptrType((go$sliceType(Go$Uint8))))) {
			v$1 = _ref.go$val;
			v$1.go$set(new (go$sliceType(Go$Uint8))(go$stringToBytes(s.convertString(verb))));
		} else {
			v$1 = _ref;
			val = (_struct = reflect.ValueOf(v$1), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			ptr = (_struct$1 = val, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
			if (!((ptr.Kind() === 22))) {
				s.errorString("type not a pointer: " + val.Type().String());
				return;
			}
			v$2 = (_struct$2 = ptr.Elem(), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			_ref$1 = v$2.Kind();
			if (_ref$1 === 1) {
				v$2.SetBool(s.scanBool(verb));
			} else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) {
				v$2.SetInt(s.scanInt(verb, v$2.Type().Bits()));
			} else if (_ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				v$2.SetUint(s.scanUint(verb, v$2.Type().Bits()));
			} else if (_ref$1 === 24) {
				v$2.SetString(s.convertString(verb));
			} else if (_ref$1 === 23) {
				typ = v$2.Type();
				if (!((typ.Elem().Kind() === 8))) {
					s.errorString("can't scan type: " + val.Type().String());
				}
				str = s.convertString(verb);
				v$2.Set((_struct$3 = reflect.MakeSlice(typ, str.length, str.length), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)));
				i = 0;
				while (i < str.length) {
					v$2.Index(i).SetUint(new Go$Uint64(0, str.charCodeAt(i)));
					i = i + 1 >> 0;
				}
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				s.skipSpace(false);
				s.notEOF();
				v$2.SetFloat(s.convertFloat(s.floatToken(), v$2.Type().Bits()));
			} else if (_ref$1 === 15 || _ref$1 === 16) {
				v$2.SetComplex(s.scanComplex(verb, v$2.Type().Bits()));
			} else {
				s.errorString("can't scan type: " + val.Type().String());
			}
		}
	};
	ss.prototype.scanOne = function(verb, arg) { return this.go$val.scanOne(verb, arg); };
	errorHandler = function(errp) {
		var e, _tuple, _struct, se, ok, _tuple$1, eof, ok$1;
		e = go$recover();
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple = (e !== null && e.constructor === scanError ? [e.go$val, true] : [new scanError.Ptr(), false]); se = (_struct = _tuple[0], new scanError.Ptr(_struct.err)); ok = _tuple[1];
			if (ok) {
				errp.go$set(se.err);
			} else {
				_tuple$1 = (e !== null && go$error.implementedBy.indexOf(e.constructor) !== -1 ? [e, true] : [null, false]); eof = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1 && go$interfaceIsEqual(eof, io.EOF)) {
					errp.go$set(eof);
				} else {
					throw go$panic(e);
				}
			}
		}
	};
	ss.Ptr.prototype.doScan = function(a) {
		var numProcessed, err, s, v, _ref, _i, _slice, _index, arg, r;
		numProcessed = 0;
		err = null;
		var go$deferred = [];
		try {
			s = this;
			go$deferred.push({ fun: errorHandler, args: [new (go$ptrType(go$error))(function() { return err; }, function(v) { err = v;; })] });
			_ref = a;
			_i = 0;
			while (_i < _ref.length) {
				arg = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				s.scanOne(118, arg);
				numProcessed = numProcessed + 1 >> 0;
				_i++;
			}
			if (!s.ssave.nlIsSpace) {
				while (true) {
					r = s.getRune();
					if ((r === 10) || (r === -1)) {
						break;
					}
					if (!isSpace(r)) {
						s.errorString("expected newline");
						break;
					}
				}
			}
			return [numProcessed, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [numProcessed, err];
		}
	};
	ss.prototype.doScan = function(a) { return this.go$val.doScan(a); };
	go$pkg.init = function() {
		(go$ptrType(fmt)).methods = [["clearflags", "fmt", [], [], false, -1], ["computePadding", "fmt", [Go$Int], [(go$sliceType(Go$Uint8)), Go$Int, Go$Int], false, -1], ["fmt_E32", "fmt", [Go$Float32], [], false, -1], ["fmt_E64", "fmt", [Go$Float64], [], false, -1], ["fmt_G32", "fmt", [Go$Float32], [], false, -1], ["fmt_G64", "fmt", [Go$Float64], [], false, -1], ["fmt_boolean", "fmt", [Go$Bool], [], false, -1], ["fmt_bx", "fmt", [(go$sliceType(Go$Uint8)), Go$String], [], false, -1], ["fmt_c128", "fmt", [Go$Complex128, Go$Int32], [], false, -1], ["fmt_c64", "fmt", [Go$Complex64, Go$Int32], [], false, -1], ["fmt_e32", "fmt", [Go$Float32], [], false, -1], ["fmt_e64", "fmt", [Go$Float64], [], false, -1], ["fmt_f32", "fmt", [Go$Float32], [], false, -1], ["fmt_f64", "fmt", [Go$Float64], [], false, -1], ["fmt_fb32", "fmt", [Go$Float32], [], false, -1], ["fmt_fb64", "fmt", [Go$Float64], [], false, -1], ["fmt_g32", "fmt", [Go$Float32], [], false, -1], ["fmt_g64", "fmt", [Go$Float64], [], false, -1], ["fmt_q", "fmt", [Go$String], [], false, -1], ["fmt_qc", "fmt", [Go$Int64], [], false, -1], ["fmt_s", "fmt", [Go$String], [], false, -1], ["fmt_sbx", "fmt", [Go$String, (go$sliceType(Go$Uint8)), Go$String], [], false, -1], ["fmt_sx", "fmt", [Go$String, Go$String], [], false, -1], ["formatFloat", "fmt", [Go$Float64, Go$Uint8, Go$Int, Go$Int], [], false, -1], ["init", "fmt", [(go$ptrType(buffer))], [], false, -1], ["integer", "fmt", [Go$Int64, Go$Uint64, Go$Bool, Go$String], [], false, -1], ["pad", "fmt", [(go$sliceType(Go$Uint8))], [], false, -1], ["padString", "fmt", [Go$String], [], false, -1], ["truncate", "fmt", [Go$String], [Go$String], false, -1], ["writePadding", "fmt", [Go$Int, (go$sliceType(Go$Uint8))], [], false, -1]];
		fmt.init([["intbuf", "intbuf", "fmt", (go$arrayType(Go$Uint8, 65)), ""], ["buf", "buf", "fmt", (go$ptrType(buffer)), ""], ["wid", "wid", "fmt", Go$Int, ""], ["prec", "prec", "fmt", Go$Int, ""], ["widPresent", "widPresent", "fmt", Go$Bool, ""], ["precPresent", "precPresent", "fmt", Go$Bool, ""], ["minus", "minus", "fmt", Go$Bool, ""], ["plus", "plus", "fmt", Go$Bool, ""], ["sharp", "sharp", "fmt", Go$Bool, ""], ["space", "space", "fmt", Go$Bool, ""], ["unicode", "unicode", "fmt", Go$Bool, ""], ["uniQuote", "uniQuote", "fmt", Go$Bool, ""], ["zero", "zero", "fmt", Go$Bool, ""]]);
		State.init([["Flag", "", (go$funcType([Go$Int], [Go$Bool], false))], ["Precision", "", (go$funcType([], [Go$Int, Go$Bool], false))], ["Width", "", (go$funcType([], [Go$Int, Go$Bool], false))], ["Write", "", (go$funcType([(go$sliceType(Go$Uint8))], [Go$Int, go$error], false))]]);
		Formatter.init([["Format", "", (go$funcType([State, Go$Int32], [], false))]]);
		Stringer.init([["String", "", (go$funcType([], [Go$String], false))]]);
		GoStringer.init([["GoString", "", (go$funcType([], [Go$String], false))]]);
		(go$ptrType(buffer)).methods = [["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["WriteByte", "", [Go$Uint8], [go$error], false, -1], ["WriteRune", "", [Go$Int32], [go$error], false, -1], ["WriteString", "", [Go$String], [Go$Int, go$error], false, -1]];
		buffer.init(Go$Uint8);
		(go$ptrType(pp)).methods = [["Flag", "", [Go$Int], [Go$Bool], false, -1], ["Precision", "", [], [Go$Int, Go$Bool], false, -1], ["Width", "", [], [Go$Int, Go$Bool], false, -1], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["add", "fmt", [Go$Int32], [], false, -1], ["argNumber", "fmt", [Go$Int, Go$String, Go$Int, Go$Int], [Go$Int, Go$Int, Go$Bool], false, -1], ["badVerb", "fmt", [Go$Int32], [], false, -1], ["catchPanic", "fmt", [go$emptyInterface, Go$Int32], [], false, -1], ["doPrint", "fmt", [(go$sliceType(go$emptyInterface)), Go$Bool, Go$Bool], [], false, -1], ["doPrintf", "fmt", [Go$String, (go$sliceType(go$emptyInterface))], [], false, -1], ["fmt0x64", "fmt", [Go$Uint64, Go$Bool], [], false, -1], ["fmtBool", "fmt", [Go$Bool, Go$Int32], [], false, -1], ["fmtBytes", "fmt", [(go$sliceType(Go$Uint8)), Go$Int32, Go$Bool, reflect.Type, Go$Int], [], false, -1], ["fmtC", "fmt", [Go$Int64], [], false, -1], ["fmtComplex128", "fmt", [Go$Complex128, Go$Int32], [], false, -1], ["fmtComplex64", "fmt", [Go$Complex64, Go$Int32], [], false, -1], ["fmtFloat32", "fmt", [Go$Float32, Go$Int32], [], false, -1], ["fmtFloat64", "fmt", [Go$Float64, Go$Int32], [], false, -1], ["fmtInt64", "fmt", [Go$Int64, Go$Int32], [], false, -1], ["fmtPointer", "fmt", [reflect.Value, Go$Int32, Go$Bool], [], false, -1], ["fmtString", "fmt", [Go$String, Go$Int32, Go$Bool], [], false, -1], ["fmtUint64", "fmt", [Go$Uint64, Go$Int32, Go$Bool], [], false, -1], ["fmtUnicode", "fmt", [Go$Int64], [], false, -1], ["free", "fmt", [], [], false, -1], ["handleMethods", "fmt", [Go$Int32, Go$Bool, Go$Bool, Go$Int], [Go$Bool, Go$Bool], false, -1], ["printArg", "fmt", [go$emptyInterface, Go$Int32, Go$Bool, Go$Bool, Go$Int], [Go$Bool], false, -1], ["printReflectValue", "fmt", [reflect.Value, Go$Int32, Go$Bool, Go$Bool, Go$Int], [Go$Bool], false, -1], ["printValue", "fmt", [reflect.Value, Go$Int32, Go$Bool, Go$Bool, Go$Int], [Go$Bool], false, -1], ["unknownType", "fmt", [go$emptyInterface], [], false, -1]];
		pp.init([["n", "n", "fmt", Go$Int, ""], ["panicking", "panicking", "fmt", Go$Bool, ""], ["erroring", "erroring", "fmt", Go$Bool, ""], ["buf", "buf", "fmt", buffer, ""], ["arg", "arg", "fmt", go$emptyInterface, ""], ["value", "value", "fmt", reflect.Value, ""], ["reordered", "reordered", "fmt", Go$Bool, ""], ["goodArgNum", "goodArgNum", "fmt", Go$Bool, ""], ["runeBuf", "runeBuf", "fmt", (go$arrayType(Go$Uint8, 4)), ""], ["fmt", "fmt", "fmt", fmt, ""]]);
		(go$ptrType(cache)).methods = [["get", "fmt", [], [go$emptyInterface], false, -1], ["put", "fmt", [go$emptyInterface], [], false, -1]];
		cache.init([["mu", "mu", "fmt", sync.Mutex, ""], ["saved", "saved", "fmt", (go$sliceType(go$emptyInterface)), ""], ["new$2", "new", "fmt", (go$funcType([], [go$emptyInterface], false)), ""]]);
		runeUnreader.init([["UnreadRune", "", (go$funcType([], [go$error], false))]]);
		ScanState.init([["Read", "", (go$funcType([(go$sliceType(Go$Uint8))], [Go$Int, go$error], false))], ["ReadRune", "", (go$funcType([], [Go$Int32, Go$Int, go$error], false))], ["SkipSpace", "", (go$funcType([], [], false))], ["Token", "", (go$funcType([Go$Bool, (go$funcType([Go$Int32], [Go$Bool], false))], [(go$sliceType(Go$Uint8)), go$error], false))], ["UnreadRune", "", (go$funcType([], [go$error], false))], ["Width", "", (go$funcType([], [Go$Int, Go$Bool], false))]]);
		Scanner.init([["Scan", "", (go$funcType([ScanState, Go$Int32], [go$error], false))]]);
		(go$ptrType(stringReader)).methods = [["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1]];
		scanError.init([["err", "err", "fmt", go$error, ""]]);
		(go$ptrType(ss)).methods = [["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1], ["ReadRune", "", [], [Go$Int32, Go$Int, go$error], false, -1], ["SkipSpace", "", [], [], false, -1], ["Token", "", [Go$Bool, (go$funcType([Go$Int32], [Go$Bool], false))], [(go$sliceType(Go$Uint8)), go$error], false, -1], ["UnreadRune", "", [], [go$error], false, -1], ["Width", "", [], [Go$Int, Go$Bool], false, -1], ["accept", "fmt", [Go$String], [Go$Bool], false, -1], ["advance", "fmt", [Go$String], [Go$Int], false, -1], ["complexTokens", "fmt", [], [Go$String, Go$String], false, -1], ["consume", "fmt", [Go$String, Go$Bool], [Go$Bool], false, -1], ["convertFloat", "fmt", [Go$String, Go$Int], [Go$Float64], false, -1], ["convertString", "fmt", [Go$Int32], [Go$String], false, -1], ["doScan", "fmt", [(go$sliceType(go$emptyInterface))], [Go$Int, go$error], false, -1], ["doScanf", "fmt", [Go$String, (go$sliceType(go$emptyInterface))], [Go$Int, go$error], false, -1], ["error", "fmt", [go$error], [], false, -1], ["errorString", "fmt", [Go$String], [], false, -1], ["floatToken", "fmt", [], [Go$String], false, -1], ["free", "fmt", [ssave], [], false, -1], ["getBase", "fmt", [Go$Int32], [Go$Int, Go$String], false, -1], ["getRune", "fmt", [], [Go$Int32], false, -1], ["hexByte", "fmt", [], [Go$Uint8, Go$Bool], false, -1], ["hexDigit", "fmt", [Go$Int32], [Go$Int], false, -1], ["hexString", "fmt", [], [Go$String], false, -1], ["mustReadRune", "fmt", [], [Go$Int32], false, -1], ["notEOF", "fmt", [], [], false, -1], ["okVerb", "fmt", [Go$Int32, Go$String, Go$String], [Go$Bool], false, -1], ["peek", "fmt", [Go$String], [Go$Bool], false, -1], ["quotedString", "fmt", [], [Go$String], false, -1], ["scanBasePrefix", "fmt", [], [Go$Int, Go$String, Go$Bool], false, -1], ["scanBool", "fmt", [Go$Int32], [Go$Bool], false, -1], ["scanComplex", "fmt", [Go$Int32, Go$Int], [Go$Complex128], false, -1], ["scanInt", "fmt", [Go$Int32, Go$Int], [Go$Int64], false, -1], ["scanNumber", "fmt", [Go$String, Go$Bool], [Go$String], false, -1], ["scanOne", "fmt", [Go$Int32, go$emptyInterface], [], false, -1], ["scanRune", "fmt", [Go$Int], [Go$Int64], false, -1], ["scanUint", "fmt", [Go$Int32, Go$Int], [Go$Uint64], false, -1], ["skipSpace", "fmt", [Go$Bool], [], false, -1], ["token", "fmt", [Go$Bool, (go$funcType([Go$Int32], [Go$Bool], false))], [(go$sliceType(Go$Uint8))], false, -1]];
		ss.init([["rr", "rr", "fmt", io.RuneReader, ""], ["buf", "buf", "fmt", buffer, ""], ["peekRune", "peekRune", "fmt", Go$Int32, ""], ["prevRune", "prevRune", "fmt", Go$Int32, ""], ["count", "count", "fmt", Go$Int, ""], ["atEOF", "atEOF", "fmt", Go$Bool, ""], ["ssave", "", "fmt", ssave, ""]]);
		ssave.init([["validSave", "validSave", "fmt", Go$Bool, ""], ["nlIsEnd", "nlIsEnd", "fmt", Go$Bool, ""], ["nlIsSpace", "nlIsSpace", "fmt", Go$Bool, ""], ["argLimit", "argLimit", "fmt", Go$Int, ""], ["limit", "limit", "fmt", Go$Int, ""], ["maxWid", "maxWid", "fmt", Go$Int, ""]]);
		(go$ptrType(readRune)).methods = [["ReadRune", "", [], [Go$Int32, Go$Int, go$error], false, -1], ["readByte", "fmt", [], [Go$Uint8, go$error], false, -1], ["unread", "fmt", [(go$sliceType(Go$Uint8))], [], false, -1]];
		readRune.init([["reader", "reader", "fmt", io.Reader, ""], ["buf", "buf", "fmt", (go$arrayType(Go$Uint8, 4)), ""], ["pending", "pending", "fmt", Go$Int, ""], ["pendBuf", "pendBuf", "fmt", (go$arrayType(Go$Uint8, 4)), ""]]);
		padZeroBytes = (go$sliceType(Go$Uint8)).make(65, 0, function() { return 0; });
		padSpaceBytes = (go$sliceType(Go$Uint8)).make(65, 0, function() { return 0; });
		trueBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("true"));
		falseBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("false"));
		commaSpaceBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes(", "));
		nilAngleBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("<nil>"));
		nilParenBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("(nil)"));
		nilBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("nil"));
		mapBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("map["));
		percentBangBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!"));
		missingBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("(MISSING)"));
		badIndexBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("(BADINDEX)"));
		panicBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("(PANIC="));
		extraBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!(EXTRA "));
		irparenBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("i)"));
		bytesBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("[]byte{"));
		badWidthBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!(BADPREC)"));
		noVerbBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("%!(NOVERB)"));
		ppFree = newCache((function() {
			return new pp.Ptr();
		}));
		intBits = reflect.TypeOf(new Go$Int(0)).Bits();
		uintptrBits = reflect.TypeOf(new Go$Uintptr(0)).Bits();
		space = new (go$sliceType((go$arrayType(Go$Uint16, 2))))([go$toNativeArray("Uint16", [9, 13]), go$toNativeArray("Uint16", [32, 32]), go$toNativeArray("Uint16", [133, 133]), go$toNativeArray("Uint16", [160, 160]), go$toNativeArray("Uint16", [5760, 5760]), go$toNativeArray("Uint16", [6158, 6158]), go$toNativeArray("Uint16", [8192, 8202]), go$toNativeArray("Uint16", [8232, 8233]), go$toNativeArray("Uint16", [8239, 8239]), go$toNativeArray("Uint16", [8287, 8287]), go$toNativeArray("Uint16", [12288, 12288])]);
		ssFree = newCache((function() {
			return new ss.Ptr();
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		var i, _slice, _index, _slice$1, _index$1;
		i = 0;
		while (i < 65) {
			_slice = padZeroBytes; _index = i;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 48) : go$throwRuntimeError("index out of range");
			_slice$1 = padSpaceBytes; _index$1 = i;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 32) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
	}
	return go$pkg;
})();
go$packages["sort"] = (function() {
	var go$pkg = {}, StringSlice, Search, SearchStrings, min, insertionSort, siftDown, heapSort, medianOfThree, swapRange, doPivot, quickSort, Sort, Strings;
	StringSlice = go$pkg.StringSlice = go$newType(0, "Slice", "sort.StringSlice", "StringSlice", "sort", null);
	Search = go$pkg.Search = function(n, f) {
		var _tuple, i, j, _q, h;
		_tuple = [0, n]; i = _tuple[0]; j = _tuple[1];
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
			if (!f(h)) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	SearchStrings = go$pkg.SearchStrings = function(a, x) {
		return Search(a.length, (function(i) {
			var _slice, _index;
			return (_slice = a, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >= x;
		}));
	};
	StringSlice.prototype.Search = function(x) {
		var p;
		p = this;
		return SearchStrings(go$subslice(new (go$sliceType(Go$String))(p.array), p.offset, p.offset + p.length), x);
	};
	go$ptrType(StringSlice).prototype.Search = function(x) { return this.go$get().Search(x); };
	min = function(a, b) {
		if (a < b) {
			return a;
		}
		return b;
	};
	insertionSort = function(data, a, b) {
		var i, j;
		i = a + 1 >> 0;
		while (i < b) {
			j = i;
			while (j > a && data.Less(j, j - 1 >> 0)) {
				data.Swap(j, j - 1 >> 0);
				j = j - 1 >> 0;
			}
			i = i + 1 >> 0;
		}
	};
	siftDown = function(data, lo, hi, first) {
		var root, child;
		root = lo;
		while (true) {
			child = ((((2 >>> 16 << 16) * root >> 0) + (2 << 16 >>> 16) * root) >> 0) + 1 >> 0;
			if (child >= hi) {
				break;
			}
			if ((child + 1 >> 0) < hi && data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0)) {
				child = child + 1 >> 0;
			}
			if (!data.Less(first + root >> 0, first + child >> 0)) {
				return;
			}
			data.Swap(first + root >> 0, first + child >> 0);
			root = child;
		}
	};
	heapSort = function(data, a, b) {
		var first, lo, hi, _q, i, i$1;
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		while (i >= 0) {
			siftDown(data, i, hi, first);
			i = i - 1 >> 0;
		}
		i$1 = hi - 1 >> 0;
		while (i$1 >= 0) {
			data.Swap(first, first + i$1 >> 0);
			siftDown(data, lo, i$1, first);
			i$1 = i$1 - 1 >> 0;
		}
	};
	medianOfThree = function(data, a, b, c) {
		var m0, m1, m2;
		m0 = b;
		m1 = a;
		m2 = c;
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
		if (data.Less(m2, m1)) {
			data.Swap(m2, m1);
		}
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
	};
	swapRange = function(data, a, b, n) {
		var i;
		i = 0;
		while (i < n) {
			data.Swap(a + i >> 0, b + i >> 0);
			i = i + 1 >> 0;
		}
	};
	doPivot = function(data, lo, hi) {
		var midlo, midhi, _q, m, _q$1, s, pivot, _tuple, a, b, c, d, n, _tuple$1;
		midlo = 0;
		midhi = 0;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
		if ((hi - lo >> 0) > 40) {
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : go$throwRuntimeError("integer divide by zero"));
			medianOfThree(data, lo, lo + s >> 0, lo + ((((2 >>> 16 << 16) * s >> 0) + (2 << 16 >>> 16) * s) >> 0) >> 0);
			medianOfThree(data, m, m - s >> 0, m + s >> 0);
			medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ((((2 >>> 16 << 16) * s >> 0) + (2 << 16 >>> 16) * s) >> 0) >> 0);
		}
		medianOfThree(data, lo, m, hi - 1 >> 0);
		pivot = lo;
		_tuple = [lo + 1 >> 0, lo + 1 >> 0, hi, hi]; a = _tuple[0]; b = _tuple[1]; c = _tuple[2]; d = _tuple[3];
		while (true) {
			while (b < c) {
				if (data.Less(b, pivot)) {
					b = b + 1 >> 0;
				} else if (!data.Less(pivot, b)) {
					data.Swap(a, b);
					a = a + 1 >> 0;
					b = b + 1 >> 0;
				} else {
					break;
				}
			}
			while (b < c) {
				if (data.Less(pivot, c - 1 >> 0)) {
					c = c - 1 >> 0;
				} else if (!data.Less(c - 1 >> 0, pivot)) {
					data.Swap(c - 1 >> 0, d - 1 >> 0);
					c = c - 1 >> 0;
					d = d - 1 >> 0;
				} else {
					break;
				}
			}
			if (b >= c) {
				break;
			}
			data.Swap(b, c - 1 >> 0);
			b = b + 1 >> 0;
			c = c - 1 >> 0;
		}
		n = min(b - a >> 0, a - lo >> 0);
		swapRange(data, lo, b - n >> 0, n);
		n = min(hi - d >> 0, d - c >> 0);
		swapRange(data, c, hi - n >> 0, n);
		_tuple$1 = [(lo + b >> 0) - a >> 0, hi - ((d - c >> 0)) >> 0]; midlo = _tuple$1[0]; midhi = _tuple$1[1];
		return [midlo, midhi];
	};
	quickSort = function(data, a, b, maxDepth) {
		var _tuple, mlo, mhi;
		while ((b - a >> 0) > 7) {
			if (maxDepth === 0) {
				heapSort(data, a, b);
				return;
			}
			maxDepth = maxDepth - 1 >> 0;
			_tuple = doPivot(data, a, b); mlo = _tuple[0]; mhi = _tuple[1];
			if ((mlo - a >> 0) < (b - mhi >> 0)) {
				quickSort(data, a, mlo, maxDepth);
				a = mhi;
			} else {
				quickSort(data, mhi, b, maxDepth);
				b = mlo;
			}
		}
		if ((b - a >> 0) > 1) {
			insertionSort(data, a, b);
		}
	};
	Sort = go$pkg.Sort = function(data) {
		var n, maxDepth, i;
		n = data.Len();
		maxDepth = 0;
		i = n;
		while (i > 0) {
			maxDepth = maxDepth + 1 >> 0;
			i = i >> 1 >> 0;
		}
		maxDepth = (((maxDepth >>> 16 << 16) * 2 >> 0) + (maxDepth << 16 >>> 16) * 2) >> 0;
		quickSort(data, 0, n, maxDepth);
	};
	StringSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.length;
	};
	go$ptrType(StringSlice).prototype.Len = function() { return this.go$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var p, _slice, _index, _slice$1, _index$1;
		p = this;
		return (_slice = p, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) < (_slice$1 = p, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
	};
	go$ptrType(StringSlice).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var p, _slice, _index, _slice$1, _index$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		p = this;
		_tuple = [(_slice = p, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (_slice$1 = p, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))]; _slice$2 = p; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"); _slice$3 = p; _index$3 = j;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var p;
		p = this;
		Sort(p);
	};
	go$ptrType(StringSlice).prototype.Sort = function() { return this.go$get().Sort(); };
	Strings = go$pkg.Strings = function(a) {
		Sort(go$subslice(new StringSlice(a.array), a.offset, a.offset + a.length));
	};
	go$pkg.init = function() {
		StringSlice.methods = [["Len", "", [], [Go$Int], false, -1], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Search", "", [Go$String], [Go$Int], false, -1], ["Sort", "", [], [], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1]];
		(go$ptrType(StringSlice)).methods = [["Len", "", [], [Go$Int], false, -1], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Search", "", [Go$String], [Go$Int], false, -1], ["Sort", "", [], [], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1]];
		StringSlice.init(Go$String);
	}
	return go$pkg;
})();
go$packages["encoding/json"] = (function() {
	var go$pkg = {}, encoding = go$packages["encoding"], base64 = go$packages["encoding/base64"], errors = go$packages["errors"], fmt = go$packages["fmt"], reflect = go$packages["reflect"], runtime = go$packages["runtime"], strconv = go$packages["strconv"], strings = go$packages["strings"], unicode = go$packages["unicode"], utf16 = go$packages["unicode/utf16"], utf8 = go$packages["unicode/utf8"], bytes = go$packages["bytes"], math = go$packages["math"], sort = go$packages["sort"], sync = go$packages["sync"], io = go$packages["io"], Unmarshaler, UnmarshalTypeError, InvalidUnmarshalError, Number, decodeState, Marshaler, UnsupportedTypeError, UnsupportedValueError, MarshalerError, encodeState, encoderFunc, floatEncoder, structEncoder, mapEncoder, sliceEncoder, arrayEncoder, ptrEncoder, condAddrEncoder, stringValues, field, byName, byIndex, SyntaxError, scanner, tagOptions, Unmarshal, getu4, unquote, unquoteBytes, Marshal, isEmptyValue, valueEncoder, typeEncoder, newTypeEncoder, invalidValueEncoder, marshalerEncoder, addrMarshalerEncoder, textMarshalerEncoder, addrTextMarshalerEncoder, boolEncoder, intEncoder, uintEncoder, stringEncoder, interfaceEncoder, unsupportedTypeEncoder, newStructEncoder, newMapEncoder, encodeByteSlice, newSliceEncoder, newArrayEncoder, newPtrEncoder, newCondAddrEncoder, isValidTag, fieldByIndex, typeByIndex, typeFields, dominantField, cachedTypeFields, compact, checkValid, nextValue, isSpace, stateBeginValueOrEmpty, stateBeginValue, stateBeginStringOrEmpty, stateBeginString, stateEndValue, stateEndTop, stateInString, stateInStringEsc, stateInStringEscU, stateInStringEscU1, stateInStringEscU12, stateInStringEscU123, stateNeg, state1, state0, stateDot, stateDot0, stateE, stateESign, stateE0, stateT, stateTr, stateTru, stateF, stateFa, stateFal, stateFals, stateN, stateNu, stateNul, stateError, quoteChar, stateRedo, parseTag, errPhase, numberType, hex, encodeStatePool, byteSliceType, encoderCache, marshalerType, textMarshalerType, float32Encoder, float64Encoder, fieldCache;
	Unmarshaler = go$pkg.Unmarshaler = go$newType(0, "Interface", "json.Unmarshaler", "Unmarshaler", "encoding/json", null);
	UnmarshalTypeError = go$pkg.UnmarshalTypeError = go$newType(0, "Struct", "json.UnmarshalTypeError", "UnmarshalTypeError", "encoding/json", function(Value_, Type_) {
		this.go$val = this;
		this.Value = Value_ !== undefined ? Value_ : "";
		this.Type = Type_ !== undefined ? Type_ : null;
	});
	InvalidUnmarshalError = go$pkg.InvalidUnmarshalError = go$newType(0, "Struct", "json.InvalidUnmarshalError", "InvalidUnmarshalError", "encoding/json", function(Type_) {
		this.go$val = this;
		this.Type = Type_ !== undefined ? Type_ : null;
	});
	Number = go$pkg.Number = go$newType(0, "String", "json.Number", "Number", "encoding/json", null);
	decodeState = go$pkg.decodeState = go$newType(0, "Struct", "json.decodeState", "decodeState", "encoding/json", function(data_, off_, scan_, nextscan_, savedError_, tempstr_, useNumber_) {
		this.go$val = this;
		this.data = data_ !== undefined ? data_ : (go$sliceType(Go$Uint8)).nil;
		this.off = off_ !== undefined ? off_ : 0;
		this.scan = scan_ !== undefined ? scan_ : new scanner.Ptr();
		this.nextscan = nextscan_ !== undefined ? nextscan_ : new scanner.Ptr();
		this.savedError = savedError_ !== undefined ? savedError_ : null;
		this.tempstr = tempstr_ !== undefined ? tempstr_ : "";
		this.useNumber = useNumber_ !== undefined ? useNumber_ : false;
	});
	Marshaler = go$pkg.Marshaler = go$newType(0, "Interface", "json.Marshaler", "Marshaler", "encoding/json", null);
	UnsupportedTypeError = go$pkg.UnsupportedTypeError = go$newType(0, "Struct", "json.UnsupportedTypeError", "UnsupportedTypeError", "encoding/json", function(Type_) {
		this.go$val = this;
		this.Type = Type_ !== undefined ? Type_ : null;
	});
	UnsupportedValueError = go$pkg.UnsupportedValueError = go$newType(0, "Struct", "json.UnsupportedValueError", "UnsupportedValueError", "encoding/json", function(Value_, Str_) {
		this.go$val = this;
		this.Value = Value_ !== undefined ? Value_ : new reflect.Value.Ptr();
		this.Str = Str_ !== undefined ? Str_ : "";
	});
	MarshalerError = go$pkg.MarshalerError = go$newType(0, "Struct", "json.MarshalerError", "MarshalerError", "encoding/json", function(Type_, Err_) {
		this.go$val = this;
		this.Type = Type_ !== undefined ? Type_ : null;
		this.Err = Err_ !== undefined ? Err_ : null;
	});
	encodeState = go$pkg.encodeState = go$newType(0, "Struct", "json.encodeState", "encodeState", "encoding/json", function(Buffer_, scratch_) {
		this.go$val = this;
		this.Buffer = Buffer_ !== undefined ? Buffer_ : new bytes.Buffer.Ptr();
		this.scratch = scratch_ !== undefined ? scratch_ : go$makeNativeArray("Uint8", 64, function() { return 0; });
	});
	encoderFunc = go$pkg.encoderFunc = go$newType(0, "Func", "json.encoderFunc", "encoderFunc", "encoding/json", null);
	floatEncoder = go$pkg.floatEncoder = go$newType(4, "Int", "json.floatEncoder", "floatEncoder", "encoding/json", null);
	structEncoder = go$pkg.structEncoder = go$newType(0, "Struct", "json.structEncoder", "structEncoder", "encoding/json", function(fields_, fieldEncs_) {
		this.go$val = this;
		this.fields = fields_ !== undefined ? fields_ : (go$sliceType(field)).nil;
		this.fieldEncs = fieldEncs_ !== undefined ? fieldEncs_ : (go$sliceType(encoderFunc)).nil;
	});
	mapEncoder = go$pkg.mapEncoder = go$newType(0, "Struct", "json.mapEncoder", "mapEncoder", "encoding/json", function(elemEnc_) {
		this.go$val = this;
		this.elemEnc = elemEnc_ !== undefined ? elemEnc_ : go$throwNilPointerError;
	});
	sliceEncoder = go$pkg.sliceEncoder = go$newType(0, "Struct", "json.sliceEncoder", "sliceEncoder", "encoding/json", function(arrayEnc_) {
		this.go$val = this;
		this.arrayEnc = arrayEnc_ !== undefined ? arrayEnc_ : go$throwNilPointerError;
	});
	arrayEncoder = go$pkg.arrayEncoder = go$newType(0, "Struct", "json.arrayEncoder", "arrayEncoder", "encoding/json", function(elemEnc_) {
		this.go$val = this;
		this.elemEnc = elemEnc_ !== undefined ? elemEnc_ : go$throwNilPointerError;
	});
	ptrEncoder = go$pkg.ptrEncoder = go$newType(0, "Struct", "json.ptrEncoder", "ptrEncoder", "encoding/json", function(elemEnc_) {
		this.go$val = this;
		this.elemEnc = elemEnc_ !== undefined ? elemEnc_ : go$throwNilPointerError;
	});
	condAddrEncoder = go$pkg.condAddrEncoder = go$newType(0, "Struct", "json.condAddrEncoder", "condAddrEncoder", "encoding/json", function(canAddrEnc_, elseEnc_) {
		this.go$val = this;
		this.canAddrEnc = canAddrEnc_ !== undefined ? canAddrEnc_ : go$throwNilPointerError;
		this.elseEnc = elseEnc_ !== undefined ? elseEnc_ : go$throwNilPointerError;
	});
	stringValues = go$pkg.stringValues = go$newType(0, "Slice", "json.stringValues", "stringValues", "encoding/json", null);
	field = go$pkg.field = go$newType(0, "Struct", "json.field", "field", "encoding/json", function(name_, tag_, index_, typ_, omitEmpty_, quoted_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.tag = tag_ !== undefined ? tag_ : false;
		this.index = index_ !== undefined ? index_ : (go$sliceType(Go$Int)).nil;
		this.typ = typ_ !== undefined ? typ_ : null;
		this.omitEmpty = omitEmpty_ !== undefined ? omitEmpty_ : false;
		this.quoted = quoted_ !== undefined ? quoted_ : false;
	});
	byName = go$pkg.byName = go$newType(0, "Slice", "json.byName", "byName", "encoding/json", null);
	byIndex = go$pkg.byIndex = go$newType(0, "Slice", "json.byIndex", "byIndex", "encoding/json", null);
	SyntaxError = go$pkg.SyntaxError = go$newType(0, "Struct", "json.SyntaxError", "SyntaxError", "encoding/json", function(msg_, Offset_) {
		this.go$val = this;
		this.msg = msg_ !== undefined ? msg_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : new Go$Int64(0, 0);
	});
	scanner = go$pkg.scanner = go$newType(0, "Struct", "json.scanner", "scanner", "encoding/json", function(step_, endTop_, parseState_, err_, redo_, redoCode_, redoState_, bytes_) {
		this.go$val = this;
		this.step = step_ !== undefined ? step_ : go$throwNilPointerError;
		this.endTop = endTop_ !== undefined ? endTop_ : false;
		this.parseState = parseState_ !== undefined ? parseState_ : (go$sliceType(Go$Int)).nil;
		this.err = err_ !== undefined ? err_ : null;
		this.redo = redo_ !== undefined ? redo_ : false;
		this.redoCode = redoCode_ !== undefined ? redoCode_ : 0;
		this.redoState = redoState_ !== undefined ? redoState_ : go$throwNilPointerError;
		this.bytes = bytes_ !== undefined ? bytes_ : new Go$Int64(0, 0);
	});
	tagOptions = go$pkg.tagOptions = go$newType(0, "String", "json.tagOptions", "tagOptions", "encoding/json", null);
	Unmarshal = go$pkg.Unmarshal = function(data, v) {
		var d, err;
		d = new decodeState.Ptr();
		err = checkValid(data, d.scan);
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		d.init(data);
		return d.unmarshal(v);
	};
	UnmarshalTypeError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: cannot unmarshal " + e.Value + " into Go value of type " + e.Type.String();
	};
	UnmarshalTypeError.prototype.Error = function() { return this.go$val.Error(); };
	InvalidUnmarshalError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (go$interfaceIsEqual(e.Type, null)) {
			return "json: Unmarshal(nil)";
		}
		if (!((e.Type.Kind() === 22))) {
			return "json: Unmarshal(non-pointer " + e.Type.String() + ")";
		}
		return "json: Unmarshal(nil " + e.Type.String() + ")";
	};
	InvalidUnmarshalError.prototype.Error = function() { return this.go$val.Error(); };
	decodeState.Ptr.prototype.unmarshal = function(v) {
		var err, d, _struct, rv, _struct$1;
		err = null;
		var go$deferred = [];
		try {
			d = this;
			go$deferred.push({ fun: (function() {
				var r, _tuple, ok;
				r = go$recover();
				if (!(go$interfaceIsEqual(r, null))) {
					_tuple = (r !== null && runtime.Error.implementedBy.indexOf(r.constructor) !== -1 ? [r, true] : [null, false]); ok = _tuple[1];
					if (ok) {
						throw go$panic(r);
					}
					err = (r !== null && go$error.implementedBy.indexOf(r.constructor) !== -1 ? r : go$typeAssertionFailed(r, go$error));
				}
			}), args: [] });
			rv = (_struct = reflect.ValueOf(v), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			if (!((rv.Kind() === 22)) || rv.IsNil()) {
				err = new InvalidUnmarshalError.Ptr(reflect.TypeOf(v));
				return err;
			}
			d.scan.reset();
			d.value((_struct$1 = rv, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)));
			err = d.savedError;
			return err;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return err;
		}
	};
	decodeState.prototype.unmarshal = function(v) { return this.go$val.unmarshal(v); };
	Number.prototype.String = function() {
		var n;
		n = this.go$val;
		return n;
	};
	go$ptrType(Number).prototype.String = function() { return new Number(this.go$get()).String(); };
	Number.prototype.Float64 = function() {
		var n;
		n = this.go$val;
		return strconv.ParseFloat(n, 64);
	};
	go$ptrType(Number).prototype.Float64 = function() { return new Number(this.go$get()).Float64(); };
	Number.prototype.Int64 = function() {
		var n;
		n = this.go$val;
		return strconv.ParseInt(n, 10, 64);
	};
	go$ptrType(Number).prototype.Int64 = function() { return new Number(this.go$get()).Int64(); };
	decodeState.Ptr.prototype.init = function(data) {
		var d;
		d = this;
		d.data = data;
		d.off = 0;
		d.savedError = null;
		return d;
	};
	decodeState.prototype.init = function(data) { return this.go$val.init(data); };
	decodeState.Ptr.prototype.error = function(err) {
		var d;
		d = this;
		throw go$panic(err);
	};
	decodeState.prototype.error = function(err) { return this.go$val.error(err); };
	decodeState.Ptr.prototype.saveError = function(err) {
		var d;
		d = this;
		if (go$interfaceIsEqual(d.savedError, null)) {
			d.savedError = err;
		}
	};
	decodeState.prototype.saveError = function(err) { return this.go$val.saveError(err); };
	decodeState.Ptr.prototype.next = function() {
		var d, _slice, _index, c, _tuple, item, rest, err;
		d = this;
		c = (_slice = d.data, _index = d.off, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		_tuple = nextValue(go$subslice(d.data, d.off), d.nextscan); item = _tuple[0]; rest = _tuple[1]; err = _tuple[2];
		if (!(go$interfaceIsEqual(err, null))) {
			d.error(err);
		}
		d.off = d.data.length - rest.length >> 0;
		if (c === 123) {
			d.scan.step(d.scan, 125);
		} else {
			d.scan.step(d.scan, 93);
		}
		return item;
	};
	decodeState.prototype.next = function() { return this.go$val.next(); };
	decodeState.Ptr.prototype.scanWhile = function(op) {
		var d, newOp, _slice, _index, c;
		d = this;
		newOp = 0;
		while (true) {
			if (d.off >= d.data.length) {
				newOp = d.scan.eof();
				d.off = d.data.length + 1 >> 0;
			} else {
				c = ((_slice = d.data, _index = d.off, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) >> 0);
				d.off = d.off + 1 >> 0;
				newOp = d.scan.step(d.scan, c);
			}
			if (!((newOp === op))) {
				break;
			}
		}
		return newOp;
	};
	decodeState.prototype.scanWhile = function(op) { return this.go$val.scanWhile(op); };
	decodeState.Ptr.prototype.value = function(v) {
		var d, _tuple, rest, err, n, _slice, _index, op, _ref, _struct, _struct$1, _struct$2;
		d = this;
		if (!v.IsValid()) {
			_tuple = nextValue(go$subslice(d.data, d.off), d.nextscan); rest = _tuple[1]; err = _tuple[2];
			if (!(go$interfaceIsEqual(err, null))) {
				d.error(err);
			}
			d.off = d.data.length - rest.length >> 0;
			if (d.scan.redo) {
				d.scan.redo = false;
				d.scan.step = stateBeginValue;
			}
			d.scan.step(d.scan, 34);
			d.scan.step(d.scan, 34);
			n = d.scan.parseState.length;
			if (n > 0 && ((_slice = d.scan.parseState, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 0)) {
				d.scan.step(d.scan, 58);
				d.scan.step(d.scan, 34);
				d.scan.step(d.scan, 34);
				d.scan.step(d.scan, 125);
			}
			return;
		}
		op = d.scanWhile(9);
		_ref = op;
		if (_ref === 6) {
			d.array((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)));
		} else if (_ref === 2) {
			d.object((_struct$1 = v, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)));
		} else if (_ref === 1) {
			d.literal((_struct$2 = v, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)));
		} else {
			d.error(errPhase);
		}
	};
	decodeState.prototype.value = function(v) { return this.go$val.value(v); };
	decodeState.Ptr.prototype.indirect = function(v, decodingNull) {
		var d, _struct, _struct$1, e, _struct$2, _struct$3, _tuple, x, u, ok, _tuple$1, x$1, u$1, ok$1, _struct$4, _struct$5;
		d = this;
		if (!((v.Kind() === 22)) && !(v.Type().Name() === "") && v.CanAddr()) {
			v = (_struct = v.Addr(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		}
		while (true) {
			if ((v.Kind() === 20) && !v.IsNil()) {
				e = (_struct$1 = v.Elem(), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
				if ((e.Kind() === 22) && !e.IsNil() && (!decodingNull || (e.Elem().Kind() === 22))) {
					v = (_struct$2 = e, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
					continue;
				}
			}
			if (!((v.Kind() === 22))) {
				break;
			}
			if (!((v.Elem().Kind() === 22)) && decodingNull && v.CanSet()) {
				break;
			}
			if (v.IsNil()) {
				v.Set((_struct$3 = reflect.New(v.Type().Elem()), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)));
			}
			if (v.Type().NumMethod() > 0) {
				_tuple = (x = v.Interface(), (x !== null && Unmarshaler.implementedBy.indexOf(x.constructor) !== -1 ? [x, true] : [null, false])); u = _tuple[0]; ok = _tuple[1];
				if (ok) {
					return [u, null, new reflect.Value.Ptr((go$ptrType(reflect.rtype)).nil, 0, 0)];
				}
				_tuple$1 = (x$1 = v.Interface(), (x$1 !== null && encoding.TextUnmarshaler.implementedBy.indexOf(x$1.constructor) !== -1 ? [x$1, true] : [null, false])); u$1 = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1) {
					return [null, u$1, new reflect.Value.Ptr((go$ptrType(reflect.rtype)).nil, 0, 0)];
				}
			}
			v = (_struct$4 = v.Elem(), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
		}
		return [null, null, (_struct$5 = v, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag))];
	};
	decodeState.prototype.indirect = function(v, decodingNull) { return this.go$val.indirect(v, decodingNull); };
	decodeState.Ptr.prototype.array = function(v) {
		var d, _tuple, _struct, u, ut, _struct$1, pv, err, _struct$2, _ref, _struct$3, i, op, _q, newcap, _struct$4, newv, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, z, _struct$10, _struct$11;
		d = this;
		_tuple = d.indirect((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), false); u = _tuple[0]; ut = _tuple[1]; pv = (_struct$1 = _tuple[2], new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		if (!(go$interfaceIsEqual(u, null))) {
			d.off = d.off - 1 >> 0;
			err = u.UnmarshalJSON(d.next());
			if (!(go$interfaceIsEqual(err, null))) {
				d.error(err);
			}
			return;
		}
		if (!(go$interfaceIsEqual(ut, null))) {
			d.saveError(new UnmarshalTypeError.Ptr("array", v.Type()));
			d.off = d.off - 1 >> 0;
			d.next();
			return;
		}
		v = (_struct$2 = pv, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		_ref = v.Kind();
		switch (0) { default: if (_ref === 20) {
			if (v.NumMethod() === 0) {
				v.Set((_struct$3 = reflect.ValueOf(d.arrayInterface()), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)));
				return;
			}
			d.saveError(new UnmarshalTypeError.Ptr("array", v.Type()));
			d.off = d.off - 1 >> 0;
			d.next();
			return;
		} else if (_ref === 17) {
		} else if (_ref === 23) {
			break;
		} else {
			d.saveError(new UnmarshalTypeError.Ptr("array", v.Type()));
			d.off = d.off - 1 >> 0;
			d.next();
			return;
		} }
		i = 0;
		while (true) {
			op = d.scanWhile(9);
			if (op === 8) {
				break;
			}
			d.off = d.off - 1 >> 0;
			d.scan.undo(op);
			if (v.Kind() === 23) {
				if (i >= v.Cap()) {
					newcap = v.Cap() + (_q = v.Cap() / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")) >> 0;
					if (newcap < 4) {
						newcap = 4;
					}
					newv = (_struct$4 = reflect.MakeSlice(v.Type(), v.Len(), newcap), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
					reflect.Copy((_struct$5 = newv, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), (_struct$6 = v, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)));
					v.Set((_struct$7 = newv, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)));
				}
				if (i >= v.Len()) {
					v.SetLen(i + 1 >> 0);
				}
			}
			if (i < v.Len()) {
				d.value((_struct$8 = v.Index(i), new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag)));
			} else {
				d.value(new reflect.Value.Ptr((go$ptrType(reflect.rtype)).nil, 0, 0));
			}
			i = i + 1 >> 0;
			op = d.scanWhile(9);
			if (op === 8) {
				break;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		}
		if (i < v.Len()) {
			if (v.Kind() === 17) {
				z = (_struct$9 = reflect.Zero(v.Type().Elem()), new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag));
				while (i < v.Len()) {
					v.Index(i).Set((_struct$10 = z, new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag)));
					i = i + 1 >> 0;
				}
			} else {
				v.SetLen(i);
			}
		}
		if ((i === 0) && (v.Kind() === 23)) {
			v.Set((_struct$11 = reflect.MakeSlice(v.Type(), 0, 0), new reflect.Value.Ptr(_struct$11.typ, _struct$11.val, _struct$11.flag)));
		}
	};
	decodeState.prototype.array = function(v) { return this.go$val.array(v); };
	decodeState.Ptr.prototype.object = function(v) {
		var d, _tuple, _struct, u, ut, _struct$1, pv, err, _struct$2, _struct$3, _ref, t, _struct$4, mapElem, op, start, item, _tuple$1, key, ok, subv, destring, elemType, _struct$5, _struct$6, _struct$7, f, fields, _ref$1, _i, i, _slice, _index, ff, _struct$8, _ref$2, _i$1, _slice$1, _index$1, i$1, _struct$9, _struct$10, _struct$11, v$1, _struct$12, _struct$13, _struct$14, _struct$15, kv, _struct$16, _struct$17;
		d = this;
		_tuple = d.indirect((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), false); u = _tuple[0]; ut = _tuple[1]; pv = (_struct$1 = _tuple[2], new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		if (!(go$interfaceIsEqual(u, null))) {
			d.off = d.off - 1 >> 0;
			err = u.UnmarshalJSON(d.next());
			if (!(go$interfaceIsEqual(err, null))) {
				d.error(err);
			}
			return;
		}
		if (!(go$interfaceIsEqual(ut, null))) {
			d.saveError(new UnmarshalTypeError.Ptr("object", v.Type()));
			d.off = d.off - 1 >> 0;
			d.next();
			return;
		}
		v = (_struct$2 = pv, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		if ((v.Kind() === 20) && (v.NumMethod() === 0)) {
			v.Set((_struct$3 = reflect.ValueOf(new (go$mapType(Go$String, go$emptyInterface))(d.objectInterface())), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)));
			return;
		}
		_ref = v.Kind();
		switch (0) { default: if (_ref === 21) {
			t = v.Type();
			if (!((t.Key().Kind() === 24))) {
				d.saveError(new UnmarshalTypeError.Ptr("object", v.Type()));
				break;
			}
			if (v.IsNil()) {
				v.Set((_struct$4 = reflect.MakeMap(t), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)));
			}
		} else if (_ref === 25) {
		} else {
			d.saveError(new UnmarshalTypeError.Ptr("object", v.Type()));
			d.off = d.off - 1 >> 0;
			d.next();
			return;
		} }
		mapElem = new reflect.Value.Ptr();
		while (true) {
			op = d.scanWhile(9);
			if (op === 5) {
				break;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			op = d.scanWhile(0);
			item = go$subslice(d.data, start, (d.off - 1 >> 0));
			_tuple$1 = unquote(item); key = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				d.error(errPhase);
			}
			subv = new reflect.Value.Ptr();
			destring = false;
			if (v.Kind() === 21) {
				elemType = v.Type().Elem();
				if (!mapElem.IsValid()) {
					mapElem = (_struct$5 = reflect.New(elemType).Elem(), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag));
				} else {
					mapElem.Set((_struct$6 = reflect.Zero(elemType), new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)));
				}
				subv = (_struct$7 = mapElem, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag));
			} else {
				f = (go$ptrType(field)).nil;
				fields = cachedTypeFields(v.Type());
				_ref$1 = fields;
				_i = 0;
				while (_i < _ref$1.length) {
					i = _i;
					ff = (_slice = fields, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
					if (ff.name === key) {
						f = ff;
						break;
					}
					if (f === (go$ptrType(field)).nil && strings.EqualFold(ff.name, key)) {
						f = ff;
					}
					_i++;
				}
				if (!(f === (go$ptrType(field)).nil)) {
					subv = (_struct$8 = v, new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag));
					destring = f.quoted;
					_ref$2 = f.index;
					_i$1 = 0;
					while (_i$1 < _ref$2.length) {
						i$1 = (_slice$1 = _ref$2, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
						if (subv.Kind() === 22) {
							if (subv.IsNil()) {
								subv.Set((_struct$9 = reflect.New(subv.Type().Elem()), new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag)));
							}
							subv = (_struct$10 = subv.Elem(), new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag));
						}
						subv = (_struct$11 = subv.Field(i$1), new reflect.Value.Ptr(_struct$11.typ, _struct$11.val, _struct$11.flag));
						_i$1++;
					}
				}
			}
			if (op === 9) {
				op = d.scanWhile(9);
			}
			if (!((op === 3))) {
				d.error(errPhase);
			}
			if (destring) {
				d.value((_struct$12 = reflect.ValueOf(new (go$ptrType(Go$String))(function() { return d.tempstr; }, function(v$1) { d.tempstr = v$1;; })), new reflect.Value.Ptr(_struct$12.typ, _struct$12.val, _struct$12.flag)));
				d.literalStore(new (go$sliceType(Go$Uint8))(go$stringToBytes(d.tempstr)), (_struct$13 = subv, new reflect.Value.Ptr(_struct$13.typ, _struct$13.val, _struct$13.flag)), true);
			} else {
				d.value((_struct$14 = subv, new reflect.Value.Ptr(_struct$14.typ, _struct$14.val, _struct$14.flag)));
			}
			if (v.Kind() === 21) {
				kv = (_struct$15 = reflect.ValueOf(new Go$String(key)).Convert(v.Type().Key()), new reflect.Value.Ptr(_struct$15.typ, _struct$15.val, _struct$15.flag));
				v.SetMapIndex((_struct$16 = kv, new reflect.Value.Ptr(_struct$16.typ, _struct$16.val, _struct$16.flag)), (_struct$17 = subv, new reflect.Value.Ptr(_struct$17.typ, _struct$17.val, _struct$17.flag)));
			}
			op = d.scanWhile(9);
			if (op === 5) {
				break;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		}
	};
	decodeState.prototype.object = function(v) { return this.go$val.object(v); };
	decodeState.Ptr.prototype.literal = function(v) {
		var d, start, op, _struct;
		d = this;
		start = d.off - 1 >> 0;
		op = d.scanWhile(0);
		d.off = d.off - 1 >> 0;
		d.scan.undo(op);
		d.literalStore(go$subslice(d.data, start, d.off), (_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), false);
	};
	decodeState.prototype.literal = function(v) { return this.go$val.literal(v); };
	decodeState.Ptr.prototype.convertNumber = function(s) {
		var d, _tuple, f, err;
		d = this;
		if (d.useNumber) {
			return [new Number(s), null];
		}
		_tuple = strconv.ParseFloat(s, 64); f = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [null, new UnmarshalTypeError.Ptr("number " + s, reflect.TypeOf(new Go$Float64(0)))];
		}
		return [new Go$Float64(f), null];
	};
	decodeState.prototype.convertNumber = function(s) { return this.go$val.convertNumber(s); };
	decodeState.Ptr.prototype.literalStore = function(item, v, fromQuoted) {
		var d, _slice, _index, wantptr, _tuple, _struct, u, ut, _struct$1, pv, err, _slice$1, _index$1, _tuple$1, s, ok, err$1, _struct$2, _slice$2, _index$2, c, _ref, _ref$1, _struct$3, value, _ref$2, _struct$4, _tuple$2, s$1, ok$1, _ref$3, b, _tuple$3, n, err$2, _struct$5, _struct$6, s$2, _ref$4, _tuple$4, n$1, err$3, _struct$7, _tuple$5, n$2, err$4, _tuple$6, n$3, err$5, _tuple$7, n$4, err$6;
		d = this;
		if (item.length === 0) {
			d.saveError(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new (go$sliceType(go$emptyInterface))([item, v.Type()])));
			return;
		}
		wantptr = (_slice = item, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 110;
		_tuple = d.indirect((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), wantptr); u = _tuple[0]; ut = _tuple[1]; pv = (_struct$1 = _tuple[2], new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		if (!(go$interfaceIsEqual(u, null))) {
			err = u.UnmarshalJSON(item);
			if (!(go$interfaceIsEqual(err, null))) {
				d.error(err);
			}
			return;
		}
		if (!(go$interfaceIsEqual(ut, null))) {
			if (!(((_slice$1 = item, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 34))) {
				if (fromQuoted) {
					d.saveError(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new (go$sliceType(go$emptyInterface))([item, v.Type()])));
				} else {
					d.saveError(new UnmarshalTypeError.Ptr("string", v.Type()));
				}
			}
			_tuple$1 = unquoteBytes(item); s = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				if (fromQuoted) {
					d.error(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new (go$sliceType(go$emptyInterface))([item, v.Type()])));
				} else {
					d.error(errPhase);
				}
			}
			err$1 = ut.UnmarshalText(s);
			if (!(go$interfaceIsEqual(err$1, null))) {
				d.error(err$1);
			}
			return;
		}
		v = (_struct$2 = pv, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		c = (_slice$2 = item, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
		_ref = c;
		if (_ref === 110) {
			_ref$1 = v.Kind();
			if (_ref$1 === 20 || _ref$1 === 22 || _ref$1 === 21 || _ref$1 === 23) {
				v.Set((_struct$3 = reflect.Zero(v.Type()), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)));
			}
		} else if (_ref === 116 || _ref === 102) {
			value = c === 116;
			_ref$2 = v.Kind();
			if (_ref$2 === 1) {
				v.SetBool(value);
			} else if (_ref$2 === 20) {
				if (v.NumMethod() === 0) {
					v.Set((_struct$4 = reflect.ValueOf(new Go$Bool(value)), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)));
				} else {
					d.saveError(new UnmarshalTypeError.Ptr("bool", v.Type()));
				}
			} else {
				if (fromQuoted) {
					d.saveError(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new (go$sliceType(go$emptyInterface))([item, v.Type()])));
				} else {
					d.saveError(new UnmarshalTypeError.Ptr("bool", v.Type()));
				}
			}
		} else if (_ref === 34) {
			_tuple$2 = unquoteBytes(item); s$1 = _tuple$2[0]; ok$1 = _tuple$2[1];
			if (!ok$1) {
				if (fromQuoted) {
					d.error(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new (go$sliceType(go$emptyInterface))([item, v.Type()])));
				} else {
					d.error(errPhase);
				}
			}
			_ref$3 = v.Kind();
			switch (0) { default: if (_ref$3 === 23) {
				if (!(go$interfaceIsEqual(v.Type(), byteSliceType))) {
					d.saveError(new UnmarshalTypeError.Ptr("string", v.Type()));
					break;
				}
				b = (go$sliceType(Go$Uint8)).make(base64.StdEncoding.DecodedLen(s$1.length), 0, function() { return 0; });
				_tuple$3 = base64.StdEncoding.Decode(b, s$1); n = _tuple$3[0]; err$2 = _tuple$3[1];
				if (!(go$interfaceIsEqual(err$2, null))) {
					d.saveError(err$2);
					break;
				}
				v.Set((_struct$5 = reflect.ValueOf(go$subslice(b, 0, n)), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)));
			} else if (_ref$3 === 24) {
				v.SetString(go$bytesToString(s$1));
			} else if (_ref$3 === 20) {
				if (v.NumMethod() === 0) {
					v.Set((_struct$6 = reflect.ValueOf(new Go$String(go$bytesToString(s$1))), new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)));
				} else {
					d.saveError(new UnmarshalTypeError.Ptr("string", v.Type()));
				}
			} else {
				d.saveError(new UnmarshalTypeError.Ptr("string", v.Type()));
			} }
		} else {
			if (!((c === 45)) && (c < 48 || c > 57)) {
				if (fromQuoted) {
					d.error(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new (go$sliceType(go$emptyInterface))([item, v.Type()])));
				} else {
					d.error(errPhase);
				}
			}
			s$2 = go$bytesToString(item);
			_ref$4 = v.Kind();
			switch (0) { default: if (_ref$4 === 20) {
				_tuple$4 = d.convertNumber(s$2); n$1 = _tuple$4[0]; err$3 = _tuple$4[1];
				if (!(go$interfaceIsEqual(err$3, null))) {
					d.saveError(err$3);
					break;
				}
				if (!((v.NumMethod() === 0))) {
					d.saveError(new UnmarshalTypeError.Ptr("number", v.Type()));
					break;
				}
				v.Set((_struct$7 = reflect.ValueOf(n$1), new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)));
			} else if (_ref$4 === 2 || _ref$4 === 3 || _ref$4 === 4 || _ref$4 === 5 || _ref$4 === 6) {
				_tuple$5 = strconv.ParseInt(s$2, 10, 64); n$2 = _tuple$5[0]; err$4 = _tuple$5[1];
				if (!(go$interfaceIsEqual(err$4, null)) || v.OverflowInt(n$2)) {
					d.saveError(new UnmarshalTypeError.Ptr("number " + s$2, v.Type()));
					break;
				}
				v.SetInt(n$2);
			} else if (_ref$4 === 7 || _ref$4 === 8 || _ref$4 === 9 || _ref$4 === 10 || _ref$4 === 11 || _ref$4 === 12) {
				_tuple$6 = strconv.ParseUint(s$2, 10, 64); n$3 = _tuple$6[0]; err$5 = _tuple$6[1];
				if (!(go$interfaceIsEqual(err$5, null)) || v.OverflowUint(n$3)) {
					d.saveError(new UnmarshalTypeError.Ptr("number " + s$2, v.Type()));
					break;
				}
				v.SetUint(n$3);
			} else if (_ref$4 === 13 || _ref$4 === 14) {
				_tuple$7 = strconv.ParseFloat(s$2, v.Type().Bits()); n$4 = _tuple$7[0]; err$6 = _tuple$7[1];
				if (!(go$interfaceIsEqual(err$6, null)) || v.OverflowFloat(n$4)) {
					d.saveError(new UnmarshalTypeError.Ptr("number " + s$2, v.Type()));
					break;
				}
				v.SetFloat(n$4);
			} else {
				if ((v.Kind() === 24) && go$interfaceIsEqual(v.Type(), numberType)) {
					v.SetString(s$2);
					break;
				}
				if (fromQuoted) {
					d.error(fmt.Errorf("json: invalid use of ,string struct tag, trying to unmarshal %q into %v", new (go$sliceType(go$emptyInterface))([item, v.Type()])));
				} else {
					d.error(new UnmarshalTypeError.Ptr("number", v.Type()));
				}
			} }
		}
	};
	decodeState.prototype.literalStore = function(item, v, fromQuoted) { return this.go$val.literalStore(item, v, fromQuoted); };
	decodeState.Ptr.prototype.valueInterface = function() {
		var d, _ref;
		d = this;
		_ref = d.scanWhile(9);
		if (_ref === 6) {
			return d.arrayInterface();
		} else if (_ref === 2) {
			return new (go$mapType(Go$String, go$emptyInterface))(d.objectInterface());
		} else if (_ref === 1) {
			return d.literalInterface();
		} else {
			d.error(errPhase);
			throw go$panic(new Go$String("unreachable"));
		}
	};
	decodeState.prototype.valueInterface = function() { return this.go$val.valueInterface(); };
	decodeState.Ptr.prototype.arrayInterface = function() {
		var d, v, op;
		d = this;
		v = (go$sliceType(go$emptyInterface)).make(0, 0, function() { return null; });
		while (true) {
			op = d.scanWhile(9);
			if (op === 8) {
				break;
			}
			d.off = d.off - 1 >> 0;
			d.scan.undo(op);
			v = go$append(v, d.valueInterface());
			op = d.scanWhile(9);
			if (op === 8) {
				break;
			}
			if (!((op === 7))) {
				d.error(errPhase);
			}
		}
		return v;
	};
	decodeState.prototype.arrayInterface = function() { return this.go$val.arrayInterface(); };
	decodeState.Ptr.prototype.objectInterface = function() {
		var d, m, op, start, item, _tuple, key, ok, _key;
		d = this;
		m = new Go$Map();
		while (true) {
			op = d.scanWhile(9);
			if (op === 5) {
				break;
			}
			if (!((op === 1))) {
				d.error(errPhase);
			}
			start = d.off - 1 >> 0;
			op = d.scanWhile(0);
			item = go$subslice(d.data, start, (d.off - 1 >> 0));
			_tuple = unquote(item); key = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			if (op === 9) {
				op = d.scanWhile(9);
			}
			if (!((op === 3))) {
				d.error(errPhase);
			}
			_key = key; (m || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: d.valueInterface() };
			op = d.scanWhile(9);
			if (op === 5) {
				break;
			}
			if (!((op === 4))) {
				d.error(errPhase);
			}
		}
		return m;
	};
	decodeState.prototype.objectInterface = function() { return this.go$val.objectInterface(); };
	decodeState.Ptr.prototype.literalInterface = function() {
		var d, start, op, item, _slice, _index, c, _ref, _tuple, s, ok, _tuple$1, n, err;
		d = this;
		start = d.off - 1 >> 0;
		op = d.scanWhile(0);
		d.off = d.off - 1 >> 0;
		d.scan.undo(op);
		item = go$subslice(d.data, start, d.off);
		c = (_slice = item, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		_ref = c;
		if (_ref === 110) {
			return null;
		} else if (_ref === 116 || _ref === 102) {
			return new Go$Bool((c === 116));
		} else if (_ref === 34) {
			_tuple = unquote(item); s = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				d.error(errPhase);
			}
			return new Go$String(s);
		} else {
			if (!((c === 45)) && (c < 48 || c > 57)) {
				d.error(errPhase);
			}
			_tuple$1 = d.convertNumber(go$bytesToString(item)); n = _tuple$1[0]; err = _tuple$1[1];
			if (!(go$interfaceIsEqual(err, null))) {
				d.saveError(err);
			}
			return n;
		}
	};
	decodeState.prototype.literalInterface = function() { return this.go$val.literalInterface(); };
	getu4 = function(s) {
		var _slice, _index, _slice$1, _index$1, _tuple, r, err;
		if (s.length < 6 || !(((_slice = s, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 92)) || !(((_slice$1 = s, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 117))) {
			return -1;
		}
		_tuple = strconv.ParseUint(go$bytesToString(go$subslice(s, 2, 6)), 16, 64); r = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return -1;
		}
		return (r.low >> 0);
	};
	unquote = function(s) {
		var t, ok, _tuple;
		t = "";
		ok = false;
		_tuple = unquoteBytes(s); s = _tuple[0]; ok = _tuple[1];
		t = go$bytesToString(s);
		return [t, ok];
	};
	unquoteBytes = function(s) {
		var t, ok, _slice, _index, _slice$1, _index$1, r, _slice$2, _index$2, c, _tuple, rr, size, _tuple$1, b, w, x, nb, _slice$3, _index$3, c$1, _ref, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10, _slice$11, _index$11, rr$1, rr1, dec, _slice$12, _index$12, _tuple$2, rr$2, size$1, _tuple$3;
		t = (go$sliceType(Go$Uint8)).nil;
		ok = false;
		if (s.length < 2 || !(((_slice = s, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 34)) || !(((_slice$1 = s, _index$1 = (s.length - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 34))) {
			return [t, ok];
		}
		s = go$subslice(s, 1, (s.length - 1 >> 0));
		r = 0;
		while (r < s.length) {
			c = (_slice$2 = s, _index$2 = r, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			if ((c === 92) || (c === 34) || c < 32) {
				break;
			}
			if (c < 128) {
				r = r + 1 >> 0;
				continue;
			}
			_tuple = utf8.DecodeRune(go$subslice(s, r)); rr = _tuple[0]; size = _tuple[1];
			if ((rr === 65533) && (size === 1)) {
				break;
			}
			r = r + (size) >> 0;
		}
		if (r === s.length) {
			_tuple$1 = [s, true]; t = _tuple$1[0]; ok = _tuple$1[1];
			return [t, ok];
		}
		b = (go$sliceType(Go$Uint8)).make(s.length + 8 >> 0, 0, function() { return 0; });
		w = go$copySlice(b, go$subslice(s, 0, r));
		while (r < s.length) {
			if (w >= (b.length - 8 >> 0)) {
				nb = (go$sliceType(Go$Uint8)).make((x = (b.length + 4 >> 0), (((x >>> 16 << 16) * 2 >> 0) + (x << 16 >>> 16) * 2) >> 0), 0, function() { return 0; });
				go$copySlice(nb, go$subslice(b, 0, w));
				b = nb;
			}
			c$1 = (_slice$3 = s, _index$3 = r, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
			if (c$1 === 92) {
				r = r + 1 >> 0;
				if (r >= s.length) {
					return [t, ok];
				}
				_ref = (_slice$4 = s, _index$4 = r, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range"));
				switch (0) { default: if (_ref === 34 || _ref === 92 || _ref === 47 || _ref === 39) {
					_slice$6 = b; _index$6 = w;(_index$6 >= 0 && _index$6 < _slice$6.length) ? (_slice$6.array[_slice$6.offset + _index$6] = (_slice$5 = s, _index$5 = r, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"))) : go$throwRuntimeError("index out of range");
					r = r + 1 >> 0;
					w = w + 1 >> 0;
				} else if (_ref === 98) {
					_slice$7 = b; _index$7 = w;(_index$7 >= 0 && _index$7 < _slice$7.length) ? (_slice$7.array[_slice$7.offset + _index$7] = 8) : go$throwRuntimeError("index out of range");
					r = r + 1 >> 0;
					w = w + 1 >> 0;
				} else if (_ref === 102) {
					_slice$8 = b; _index$8 = w;(_index$8 >= 0 && _index$8 < _slice$8.length) ? (_slice$8.array[_slice$8.offset + _index$8] = 12) : go$throwRuntimeError("index out of range");
					r = r + 1 >> 0;
					w = w + 1 >> 0;
				} else if (_ref === 110) {
					_slice$9 = b; _index$9 = w;(_index$9 >= 0 && _index$9 < _slice$9.length) ? (_slice$9.array[_slice$9.offset + _index$9] = 10) : go$throwRuntimeError("index out of range");
					r = r + 1 >> 0;
					w = w + 1 >> 0;
				} else if (_ref === 114) {
					_slice$10 = b; _index$10 = w;(_index$10 >= 0 && _index$10 < _slice$10.length) ? (_slice$10.array[_slice$10.offset + _index$10] = 13) : go$throwRuntimeError("index out of range");
					r = r + 1 >> 0;
					w = w + 1 >> 0;
				} else if (_ref === 116) {
					_slice$11 = b; _index$11 = w;(_index$11 >= 0 && _index$11 < _slice$11.length) ? (_slice$11.array[_slice$11.offset + _index$11] = 9) : go$throwRuntimeError("index out of range");
					r = r + 1 >> 0;
					w = w + 1 >> 0;
				} else if (_ref === 117) {
					r = r - 1 >> 0;
					rr$1 = getu4(go$subslice(s, r));
					if (rr$1 < 0) {
						return [t, ok];
					}
					r = r + 6 >> 0;
					if (utf16.IsSurrogate(rr$1)) {
						rr1 = getu4(go$subslice(s, r));
						dec = utf16.DecodeRune(rr$1, rr1);
						if (!((dec === 65533))) {
							r = r + 6 >> 0;
							w = w + (utf8.EncodeRune(go$subslice(b, w), dec)) >> 0;
							break;
						}
						rr$1 = 65533;
					}
					w = w + (utf8.EncodeRune(go$subslice(b, w), rr$1)) >> 0;
				} else {
					return [t, ok];
				} }
			} else if (c$1 === 34 || c$1 < 32) {
				return [t, ok];
			} else if (c$1 < 128) {
				_slice$12 = b; _index$12 = w;(_index$12 >= 0 && _index$12 < _slice$12.length) ? (_slice$12.array[_slice$12.offset + _index$12] = c$1) : go$throwRuntimeError("index out of range");
				r = r + 1 >> 0;
				w = w + 1 >> 0;
			} else {
				_tuple$2 = utf8.DecodeRune(go$subslice(s, r)); rr$2 = _tuple$2[0]; size$1 = _tuple$2[1];
				r = r + (size$1) >> 0;
				w = w + (utf8.EncodeRune(go$subslice(b, w), rr$2)) >> 0;
			}
		}
		_tuple$3 = [go$subslice(b, 0, w), true]; t = _tuple$3[0]; ok = _tuple$3[1];
		return [t, ok];
	};
	Marshal = go$pkg.Marshal = function(v) {
		var e, err;
		e = new encodeState.Ptr(new bytes.Buffer.Ptr(), go$makeNativeArray("Uint8", 64, function() { return 0; }));
		err = e.marshal(v);
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$sliceType(Go$Uint8)).nil, err];
		}
		return [e.Buffer.Bytes(), null];
	};
	UnsupportedTypeError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: unsupported type: " + e.Type.String();
	};
	UnsupportedTypeError.prototype.Error = function() { return this.go$val.Error(); };
	UnsupportedValueError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: unsupported value: " + e.Str;
	};
	UnsupportedValueError.prototype.Error = function() { return this.go$val.Error(); };
	MarshalerError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: error calling MarshalJSON for type " + e.Type.String() + ": " + e.Err.Error();
	};
	MarshalerError.prototype.Error = function() { return this.go$val.Error(); };
	encodeState.Ptr.prototype.marshal = function(v) {
		var err, e, _struct;
		err = null;
		var go$deferred = [];
		try {
			e = this;
			go$deferred.push({ fun: (function() {
				var r, _tuple, ok, _tuple$1, s, ok$1;
				r = go$recover();
				if (!(go$interfaceIsEqual(r, null))) {
					_tuple = (r !== null && runtime.Error.implementedBy.indexOf(r.constructor) !== -1 ? [r, true] : [null, false]); ok = _tuple[1];
					if (ok) {
						throw go$panic(r);
					}
					_tuple$1 = (r !== null && r.constructor === Go$String ? [r.go$val, true] : ["", false]); s = _tuple$1[0]; ok$1 = _tuple$1[1];
					if (ok$1) {
						throw go$panic(new Go$String(s));
					}
					err = (r !== null && go$error.implementedBy.indexOf(r.constructor) !== -1 ? r : go$typeAssertionFailed(r, go$error));
				}
			}), args: [] });
			e.reflectValue((_struct = reflect.ValueOf(v), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)));
			err = null;
			return err;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return err;
		}
	};
	encodeState.prototype.marshal = function(v) { return this.go$val.marshal(v); };
	encodeState.Ptr.prototype.error = function(err) {
		var e;
		e = this;
		throw go$panic(err);
	};
	encodeState.prototype.error = function(err) { return this.go$val.error(err); };
	isEmptyValue = function(v) {
		var _ref, x, x$1;
		_ref = v.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 24) {
			return v.Len() === 0;
		} else if (_ref === 1) {
			return !v.Bool();
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return (x = v.Int(), (x.high === 0 && x.low === 0));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return (x$1 = v.Uint(), (x$1.high === 0 && x$1.low === 0));
		} else if (_ref === 13 || _ref === 14) {
			return v.Float() === 0;
		} else if (_ref === 20 || _ref === 22) {
			return v.IsNil();
		}
		return false;
	};
	encodeState.Ptr.prototype.reflectValue = function(v) {
		var e, _struct, _struct$1;
		e = this;
		valueEncoder((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)))(e, (_struct$1 = v, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), false);
	};
	encodeState.prototype.reflectValue = function(v) { return this.go$val.reflectValue(v); };
	valueEncoder = function(v) {
		if (!v.IsValid()) {
			return invalidValueEncoder;
		}
		return typeEncoder(v.Type());
	};
	typeEncoder = function(t) {
		var _entry, f, wg, _key, _key$1;
		encoderCache.RWMutex.RLock();
		f = (_entry = encoderCache.m[(t || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : go$throwNilPointerError);
		encoderCache.RWMutex.RUnlock();
		if (!(f === go$throwNilPointerError)) {
			return f;
		}
		encoderCache.RWMutex.Lock();
		if (encoderCache.m === false) {
			encoderCache.m = new Go$Map();
		}
		wg = new sync.WaitGroup.Ptr();
		wg.Add(1);
		_key = t; (encoderCache.m || go$throwRuntimeError("assignment to entry in nil map"))[(_key || go$interfaceNil).go$key()] = { k: _key, v: (function(e, v, quoted) {
			var _struct;
			wg.Wait();
			f(e, (_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), quoted);
		}) };
		encoderCache.RWMutex.Unlock();
		f = newTypeEncoder(t, true);
		wg.Done();
		encoderCache.RWMutex.Lock();
		_key$1 = t; (encoderCache.m || go$throwRuntimeError("assignment to entry in nil map"))[(_key$1 || go$interfaceNil).go$key()] = { k: _key$1, v: f };
		encoderCache.RWMutex.Unlock();
		return f;
	};
	newTypeEncoder = function(t, allowAddr) {
		var _ref;
		if (t.Implements(marshalerType)) {
			return marshalerEncoder;
		}
		if (!((t.Kind() === 22)) && allowAddr) {
			if (reflect.PtrTo(t).Implements(marshalerType)) {
				return newCondAddrEncoder(addrMarshalerEncoder, newTypeEncoder(t, false));
			}
		}
		if (t.Implements(textMarshalerType)) {
			return textMarshalerEncoder;
		}
		if (!((t.Kind() === 22)) && allowAddr) {
			if (reflect.PtrTo(t).Implements(textMarshalerType)) {
				return newCondAddrEncoder(addrTextMarshalerEncoder, newTypeEncoder(t, false));
			}
		}
		_ref = t.Kind();
		if (_ref === 1) {
			return boolEncoder;
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return intEncoder;
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return uintEncoder;
		} else if (_ref === 13) {
			return float32Encoder;
		} else if (_ref === 14) {
			return float64Encoder;
		} else if (_ref === 24) {
			return stringEncoder;
		} else if (_ref === 20) {
			return interfaceEncoder;
		} else if (_ref === 25) {
			return newStructEncoder(t);
		} else if (_ref === 21) {
			return newMapEncoder(t);
		} else if (_ref === 23) {
			return newSliceEncoder(t);
		} else if (_ref === 17) {
			return newArrayEncoder(t);
		} else if (_ref === 22) {
			return newPtrEncoder(t);
		} else {
			return unsupportedTypeEncoder;
		}
	};
	invalidValueEncoder = function(e, v, quoted) {
		e.Buffer.WriteString("null");
	};
	marshalerEncoder = function(e, v, quoted) {
		var x, m, _tuple, b, err;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = (x = v.Interface(), (x !== null && Marshaler.implementedBy.indexOf(x.constructor) !== -1 ? x : go$typeAssertionFailed(x, Marshaler)));
		_tuple = m.MarshalJSON(); b = _tuple[0]; err = _tuple[1];
		if (go$interfaceIsEqual(err, null)) {
			err = compact(e.Buffer, b, true);
		}
		if (!(go$interfaceIsEqual(err, null))) {
			e.error(new MarshalerError.Ptr(v.Type(), err));
		}
	};
	addrMarshalerEncoder = function(e, v, quoted) {
		var _struct, va, x, m, _tuple, b, err;
		va = (_struct = v.Addr(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = (x = va.Interface(), (x !== null && Marshaler.implementedBy.indexOf(x.constructor) !== -1 ? x : go$typeAssertionFailed(x, Marshaler)));
		_tuple = m.MarshalJSON(); b = _tuple[0]; err = _tuple[1];
		if (go$interfaceIsEqual(err, null)) {
			err = compact(e.Buffer, b, true);
		}
		if (!(go$interfaceIsEqual(err, null))) {
			e.error(new MarshalerError.Ptr(v.Type(), err));
		}
	};
	textMarshalerEncoder = function(e, v, quoted) {
		var x, m, _tuple, b, err, _tuple$1;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = (x = v.Interface(), (x !== null && encoding.TextMarshaler.implementedBy.indexOf(x.constructor) !== -1 ? x : go$typeAssertionFailed(x, encoding.TextMarshaler)));
		_tuple = m.MarshalText(); b = _tuple[0]; err = _tuple[1];
		if (go$interfaceIsEqual(err, null)) {
			_tuple$1 = e.stringBytes(b); err = _tuple$1[1];
		}
		if (!(go$interfaceIsEqual(err, null))) {
			e.error(new MarshalerError.Ptr(v.Type(), err));
		}
	};
	addrTextMarshalerEncoder = function(e, v, quoted) {
		var _struct, va, x, m, _tuple, b, err, _tuple$1;
		va = (_struct = v.Addr(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = (x = va.Interface(), (x !== null && encoding.TextMarshaler.implementedBy.indexOf(x.constructor) !== -1 ? x : go$typeAssertionFailed(x, encoding.TextMarshaler)));
		_tuple = m.MarshalText(); b = _tuple[0]; err = _tuple[1];
		if (go$interfaceIsEqual(err, null)) {
			_tuple$1 = e.stringBytes(b); err = _tuple$1[1];
		}
		if (!(go$interfaceIsEqual(err, null))) {
			e.error(new MarshalerError.Ptr(v.Type(), err));
		}
	};
	boolEncoder = function(e, v, quoted) {
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		if (v.Bool()) {
			e.Buffer.WriteString("true");
		} else {
			e.Buffer.WriteString("false");
		}
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	intEncoder = function(e, v, quoted) {
		var b;
		b = strconv.AppendInt(go$subslice(new (go$sliceType(Go$Uint8))(e.scratch), 0, 0), v.Int(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	uintEncoder = function(e, v, quoted) {
		var b;
		b = strconv.AppendUint(go$subslice(new (go$sliceType(Go$Uint8))(e.scratch), 0, 0), v.Uint(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	floatEncoder.prototype.encode = function(e, v, quoted) {
		var bits, f, _struct, b;
		bits = this.go$val;
		f = v.Float();
		if (math.IsInf(f, 0) || math.IsNaN(f)) {
			e.error(new UnsupportedValueError.Ptr((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), strconv.FormatFloat(f, 103, -1, (bits >> 0))));
		}
		b = strconv.AppendFloat(go$subslice(new (go$sliceType(Go$Uint8))(e.scratch), 0, 0), f, 103, -1, (bits >> 0));
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	go$ptrType(floatEncoder).prototype.encode = function(e, v, quoted) { return new floatEncoder(this.go$get()).encode(e, v, quoted); };
	stringEncoder = function(e, v, quoted) {
		var numStr, _tuple, sb, err;
		if (go$interfaceIsEqual(v.Type(), numberType)) {
			numStr = v.String();
			if (numStr === "") {
				numStr = "0";
			}
			e.Buffer.WriteString(numStr);
			return;
		}
		if (quoted) {
			_tuple = Marshal(new Go$String(v.String())); sb = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				e.error(err);
			}
			e.string(go$bytesToString(sb));
		} else {
			e.string(v.String());
		}
	};
	interfaceEncoder = function(e, v, quoted) {
		var _struct;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		e.reflectValue((_struct = v.Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)));
	};
	unsupportedTypeEncoder = function(e, v, quoted) {
		e.error(new UnsupportedTypeError.Ptr(v.Type()));
	};
	structEncoder.Ptr.prototype.encode = function(e, v, quoted) {
		var se, first, _ref, _i, _slice, _index, _struct, f, i, _struct$1, _struct$2, fv, _struct$3, _slice$1, _index$1, _struct$4;
		se = this;
		e.Buffer.WriteByte(123);
		first = true;
		_ref = se.fields;
		_i = 0;
		while (_i < _ref.length) {
			f = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct.name, _struct.tag, _struct.index, _struct.typ, _struct.omitEmpty, _struct.quoted));
			i = _i;
			fv = (_struct$2 = fieldByIndex((_struct$1 = v, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), f.index), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			if (!fv.IsValid() || f.omitEmpty && isEmptyValue((_struct$3 = fv, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)))) {
				_i++;
				continue;
			}
			if (first) {
				first = false;
			} else {
				e.Buffer.WriteByte(44);
			}
			e.string(f.name);
			e.Buffer.WriteByte(58);
			(_slice$1 = se.fieldEncs, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))(e, (_struct$4 = fv, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), f.quoted);
			_i++;
		}
		e.Buffer.WriteByte(125);
	};
	structEncoder.prototype.encode = function(e, v, quoted) { return this.go$val.encode(e, v, quoted); };
	newStructEncoder = function(t) {
		var fields, se, _ref, _i, _slice, _index, _struct, f, i, _slice$1, _index$1, e, v, quoted, _recv;
		fields = cachedTypeFields(t);
		se = new structEncoder.Ptr(fields, (go$sliceType(encoderFunc)).make(fields.length, 0, function() { return go$throwNilPointerError; }));
		_ref = fields;
		_i = 0;
		while (_i < _ref.length) {
			f = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct.name, _struct.tag, _struct.index, _struct.typ, _struct.omitEmpty, _struct.quoted));
			i = _i;
			_slice$1 = se.fieldEncs; _index$1 = i;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = typeEncoder(typeByIndex(t, f.index))) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return (_recv = se, function(e, v, quoted) { return _recv.encode(e, v, quoted); });
	};
	mapEncoder.Ptr.prototype.encode = function(e, v, param) {
		var me, x, sv, _ref, _i, _slice, _index, _struct, k, i, _struct$1, _struct$2;
		me = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		e.Buffer.WriteByte(123);
		sv = (x = v.MapKeys(), go$subslice(new stringValues(x.array), x.offset, x.offset + x.length));
		sort.Sort(sv);
		_ref = sv;
		_i = 0;
		while (_i < _ref.length) {
			k = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			i = _i;
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			e.string(k.String());
			e.Buffer.WriteByte(58);
			me.elemEnc(e, (_struct$2 = v.MapIndex((_struct$1 = k, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), false);
			_i++;
		}
		e.Buffer.WriteByte(125);
	};
	mapEncoder.prototype.encode = function(e, v, param) { return this.go$val.encode(e, v, param); };
	newMapEncoder = function(t) {
		var me, e, v, _, _recv;
		if (!((t.Key().Kind() === 24))) {
			return unsupportedTypeEncoder;
		}
		me = new mapEncoder.Ptr(typeEncoder(t.Elem()));
		return (_recv = me, function(e, v, _) { return _recv.encode(e, v, _); });
	};
	encodeByteSlice = function(e, v, param) {
		var s, dst, enc;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		s = v.Bytes();
		e.Buffer.WriteByte(34);
		if (s.length < 1024) {
			dst = (go$sliceType(Go$Uint8)).make(base64.StdEncoding.EncodedLen(s.length), 0, function() { return 0; });
			base64.StdEncoding.Encode(dst, s);
			e.Buffer.Write(dst);
		} else {
			enc = base64.NewEncoder(base64.StdEncoding, e);
			enc.Write(s);
			enc.Close();
		}
		e.Buffer.WriteByte(34);
	};
	sliceEncoder.Ptr.prototype.encode = function(e, v, param) {
		var se, _struct;
		se = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		se.arrayEnc(e, (_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), false);
	};
	sliceEncoder.prototype.encode = function(e, v, param) { return this.go$val.encode(e, v, param); };
	newSliceEncoder = function(t) {
		var enc, e, v, _, _recv;
		if (t.Elem().Kind() === 8) {
			return encodeByteSlice;
		}
		enc = new sliceEncoder.Ptr(newArrayEncoder(t));
		return (_recv = enc, function(e, v, _) { return _recv.encode(e, v, _); });
	};
	arrayEncoder.Ptr.prototype.encode = function(e, v, param) {
		var ae, n, i, _struct;
		ae = this;
		e.Buffer.WriteByte(91);
		n = v.Len();
		i = 0;
		while (i < n) {
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			ae.elemEnc(e, (_struct = v.Index(i), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), false);
			i = i + 1 >> 0;
		}
		e.Buffer.WriteByte(93);
	};
	arrayEncoder.prototype.encode = function(e, v, param) { return this.go$val.encode(e, v, param); };
	newArrayEncoder = function(t) {
		var enc, e, v, _, _recv;
		enc = new arrayEncoder.Ptr(typeEncoder(t.Elem()));
		return (_recv = enc, function(e, v, _) { return _recv.encode(e, v, _); });
	};
	ptrEncoder.Ptr.prototype.encode = function(e, v, param) {
		var pe, _struct;
		pe = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		pe.elemEnc(e, (_struct = v.Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), false);
	};
	ptrEncoder.prototype.encode = function(e, v, param) { return this.go$val.encode(e, v, param); };
	newPtrEncoder = function(t) {
		var enc, e, v, _, _recv;
		enc = new ptrEncoder.Ptr(typeEncoder(t.Elem()));
		return (_recv = enc, function(e, v, _) { return _recv.encode(e, v, _); });
	};
	condAddrEncoder.Ptr.prototype.encode = function(e, v, quoted) {
		var ce, _struct, _struct$1;
		ce = this;
		if (v.CanAddr()) {
			ce.canAddrEnc(e, (_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), quoted);
		} else {
			ce.elseEnc(e, (_struct$1 = v, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), quoted);
		}
	};
	condAddrEncoder.prototype.encode = function(e, v, quoted) { return this.go$val.encode(e, v, quoted); };
	newCondAddrEncoder = function(canAddrEnc, elseEnc) {
		var enc, e, v, quoted, _recv;
		enc = new condAddrEncoder.Ptr(canAddrEnc, elseEnc);
		return (_recv = enc, function(e, v, quoted) { return _recv.encode(e, v, quoted); });
	};
	isValidTag = function(s) {
		var _ref, _i, _rune, c;
		if (s === "") {
			return false;
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			if (strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c)) {
			} else {
				if (!unicode.IsLetter(c) && !unicode.IsDigit(c)) {
					return false;
				}
			}
			_i += _rune[1];
		}
		return true;
	};
	fieldByIndex = function(v, index) {
		var _ref, _i, _slice, _index, i, _struct, _struct$1, _struct$2;
		_ref = index;
		_i = 0;
		while (_i < _ref.length) {
			i = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (v.Kind() === 22) {
				if (v.IsNil()) {
					return new reflect.Value.Ptr((go$ptrType(reflect.rtype)).nil, 0, 0);
				}
				v = (_struct = v.Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			}
			v = (_struct$1 = v.Field(i), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
			_i++;
		}
		return (_struct$2 = v, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
	};
	typeByIndex = function(t, index) {
		var _ref, _i, _slice, _index, i;
		_ref = index;
		_i = 0;
		while (_i < _ref.length) {
			i = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (t.Kind() === 22) {
				t = t.Elem();
			}
			t = t.Field(i).Type;
			_i++;
		}
		return t;
	};
	stringValues.prototype.Len = function() {
		var sv;
		sv = this;
		return sv.length;
	};
	go$ptrType(stringValues).prototype.Len = function() { return this.go$get().Len(); };
	stringValues.prototype.Swap = function(i, j) {
		var sv, _slice, _index, _struct, _slice$1, _index$1, _struct$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		sv = this;
		_tuple = [(_struct = (_slice = sv, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), (_struct$1 = (_slice$1 = sv, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))]; _slice$2 = sv; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"); _slice$3 = sv; _index$3 = j;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(stringValues).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	stringValues.prototype.Less = function(i, j) {
		var sv;
		sv = this;
		return sv.get(i) < sv.get(j);
	};
	go$ptrType(stringValues).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	stringValues.prototype.get = function(i) {
		var sv, _slice, _index;
		sv = this;
		return (_slice = sv, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).String();
	};
	go$ptrType(stringValues).prototype.get = function(i) { return this.go$get().get(i); };
	encodeState.Ptr.prototype.string = function(s) {
		var e, len0, start, i, b, _ref, _tuple, c, size;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (i < s.length) {
			b = s.charCodeAt(i);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + 1 >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				_ref = b;
				if (_ref === 92 || _ref === 34) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_ref === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_ref === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + 1 >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRuneInString(s.substring(i)); c = _tuple[0]; size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.length) {
			e.Buffer.WriteString(s.substring(start));
		}
		e.Buffer.WriteByte(34);
		return [e.Buffer.Len() - len0 >> 0, null];
	};
	encodeState.prototype.string = function(s) { return this.go$val.string(s); };
	encodeState.Ptr.prototype.stringBytes = function(s) {
		var e, len0, start, i, _slice, _index, b, _ref, _tuple, c, size;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (i < s.length) {
			b = (_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + 1 >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.Write(go$subslice(s, start, i));
				}
				_ref = b;
				if (_ref === 92 || _ref === 34) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_ref === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_ref === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + 1 >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRune(go$subslice(s, i)); c = _tuple[0]; size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.Write(go$subslice(s, start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.Write(go$subslice(s, start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.length) {
			e.Buffer.Write(go$subslice(s, start));
		}
		e.Buffer.WriteByte(34);
		return [e.Buffer.Len() - len0 >> 0, null];
	};
	encodeState.prototype.stringBytes = function(s) { return this.go$val.stringBytes(s); };
	byName.prototype.Len = function() {
		var x;
		x = this;
		return x.length;
	};
	go$ptrType(byName).prototype.Len = function() { return this.go$get().Len(); };
	byName.prototype.Swap = function(i, j) {
		var x, _slice, _index, _struct, _slice$1, _index$1, _struct$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		x = this;
		_tuple = [(_struct = (_slice = x, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct.name, _struct.tag, _struct.index, _struct.typ, _struct.omitEmpty, _struct.quoted)), (_struct$1 = (_slice$1 = x, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct$1.name, _struct$1.tag, _struct$1.index, _struct$1.typ, _struct$1.omitEmpty, _struct$1.quoted))]; _slice$2 = x; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"); _slice$3 = x; _index$3 = j;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(byName).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	byName.prototype.Less = function(i, j) {
		var x, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _slice$9, _index$9, _slice$10, _index$10;
		x = this;
		if (!((_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).name === (_slice$1 = x, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).name)) {
			return (_slice$2 = x, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).name < (_slice$3 = x, _index$3 = j, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).name;
		}
		if (!(((_slice$4 = x, _index$4 = i, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).index.length === (_slice$5 = x, _index$5 = j, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")).index.length))) {
			return (_slice$6 = x, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")).index.length < (_slice$7 = x, _index$7 = j, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")).index.length;
		}
		if (!((_slice$8 = x, _index$8 = i, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")).tag === (_slice$9 = x, _index$9 = j, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range")).tag)) {
			return (_slice$10 = x, _index$10 = i, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")).tag;
		}
		return go$subslice(new byIndex(x.array), x.offset, x.offset + x.length).Less(i, j);
	};
	go$ptrType(byName).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	byIndex.prototype.Len = function() {
		var x;
		x = this;
		return x.length;
	};
	go$ptrType(byIndex).prototype.Len = function() { return this.go$get().Len(); };
	byIndex.prototype.Swap = function(i, j) {
		var x, _slice, _index, _struct, _slice$1, _index$1, _struct$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		x = this;
		_tuple = [(_struct = (_slice = x, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct.name, _struct.tag, _struct.index, _struct.typ, _struct.omitEmpty, _struct.quoted)), (_struct$1 = (_slice$1 = x, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct$1.name, _struct$1.tag, _struct$1.index, _struct$1.typ, _struct$1.omitEmpty, _struct$1.quoted))]; _slice$2 = x; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"); _slice$3 = x; _index$3 = j;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(byIndex).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	byIndex.prototype.Less = function(i, j) {
		var x, _ref, _slice, _index, _i, _slice$1, _index$1, xik, k, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _slice$5, _index$5, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8;
		x = this;
		_ref = (_slice = x, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).index;
		_i = 0;
		while (_i < _ref.length) {
			xik = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			k = _i;
			if (k >= (_slice$2 = x, _index$2 = j, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).index.length) {
				return false;
			}
			if (!((xik === (_slice$3 = (_slice$4 = x, _index$4 = j, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).index, _index$3 = k, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))))) {
				return xik < (_slice$5 = (_slice$6 = x, _index$6 = j, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")).index, _index$5 = k, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
			}
			_i++;
		}
		return (_slice$7 = x, _index$7 = i, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")).index.length < (_slice$8 = x, _index$8 = j, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range")).index.length;
	};
	go$ptrType(byIndex).prototype.Less = function(i, j) { return this.go$get().Less(i, j); };
	typeFields = function(t) {
		var current, next, _map, _key, count, _map$1, _key$1, nextCount, _map$2, _key$2, visited, fields, _tuple, _map$3, _key$3, _tuple$1, _ref, _i, _slice, _index, _struct, f, _entry, _key$4, i, _struct$1, sf, tag, _tuple$2, name, opts, index, _slice$1, _index$1, ft, tagged, _entry$1, _slice$2, _index$2, _struct$2, _lhs, _index$3, _entry$2, _key$5, _entry$3, out, _tuple$3, advance, i$1, _slice$3, _index$4, _struct$3, fi, name$1, _slice$4, _index$5, _struct$4, fj, _struct$5, _tuple$4, _struct$6, dominant, ok, _struct$7;
		current = new (go$sliceType(field))([]);
		next = new (go$sliceType(field))([new field.Ptr("", false, (go$sliceType(Go$Int)).nil, t, false, false)]);
		count = (_map = new Go$Map(), _map);
		nextCount = (_map$1 = new Go$Map(), _map$1);
		visited = (_map$2 = new Go$Map(), _map$2);
		fields = (go$sliceType(field)).nil;
		while (next.length > 0) {
			_tuple = [next, go$subslice(current, 0, 0)]; current = _tuple[0]; next = _tuple[1];
			_tuple$1 = [nextCount, (_map$3 = new Go$Map(), _map$3)]; count = _tuple$1[0]; nextCount = _tuple$1[1];
			_ref = current;
			_i = 0;
			while (_i < _ref.length) {
				f = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct.name, _struct.tag, _struct.index, _struct.typ, _struct.omitEmpty, _struct.quoted));
				if ((_entry = visited[(f.typ || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : false)) {
					_i++;
					continue;
				}
				_key$4 = f.typ; (visited || go$throwRuntimeError("assignment to entry in nil map"))[(_key$4 || go$interfaceNil).go$key()] = { k: _key$4, v: true };
				i = 0;
				while (i < f.typ.NumField()) {
					sf = (_struct$1 = f.typ.Field(i), new reflect.StructField.Ptr(_struct$1.Name, _struct$1.PkgPath, _struct$1.Type, _struct$1.Tag, _struct$1.Offset, _struct$1.Index, _struct$1.Anonymous));
					if (!(sf.PkgPath === "")) {
						i = i + 1 >> 0;
						continue;
					}
					tag = (new reflect.StructTag(sf.Tag)).Get("json");
					if (tag === "-") {
						i = i + 1 >> 0;
						continue;
					}
					_tuple$2 = parseTag(tag); name = _tuple$2[0]; opts = _tuple$2[1];
					if (!isValidTag(name)) {
						name = "";
					}
					index = (go$sliceType(Go$Int)).make(f.index.length + 1 >> 0, 0, function() { return 0; });
					go$copySlice(index, f.index);
					_slice$1 = index; _index$1 = f.index.length;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = i) : go$throwRuntimeError("index out of range");
					ft = sf.Type;
					if (ft.Name() === "" && (ft.Kind() === 22)) {
						ft = ft.Elem();
					}
					if (!(name === "") || !sf.Anonymous || !((ft.Kind() === 25))) {
						tagged = !(name === "");
						if (name === "") {
							name = sf.Name;
						}
						fields = go$append(fields, new field.Ptr(name, tagged, index, ft, (new tagOptions(opts)).Contains("omitempty"), (new tagOptions(opts)).Contains("string")));
						if ((_entry$1 = count[(f.typ || go$interfaceNil).go$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1) {
							fields = go$append(fields, (_struct$2 = (_slice$2 = fields, _index$2 = (fields.length - 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct$2.name, _struct$2.tag, _struct$2.index, _struct$2.typ, _struct$2.omitEmpty, _struct$2.quoted)));
						}
						i = i + 1 >> 0;
						continue;
					}
					_lhs = nextCount; _index$3 = ft; _key$5 = _index$3; (_lhs || go$throwRuntimeError("assignment to entry in nil map"))[(_key$5 || go$interfaceNil).go$key()] = { k: _key$5, v: (_entry$2 = _lhs[(_index$3 || go$interfaceNil).go$key()], _entry$2 !== undefined ? _entry$2.v : 0) + 1 >> 0 };
					if ((_entry$3 = nextCount[(ft || go$interfaceNil).go$key()], _entry$3 !== undefined ? _entry$3.v : 0) === 1) {
						next = go$append(next, new field.Ptr(ft.Name(), false, index, ft, false, false));
					}
					i = i + 1 >> 0;
				}
				_i++;
			}
		}
		sort.Sort(go$subslice(new byName(fields.array), fields.offset, fields.offset + fields.length));
		out = go$subslice(fields, 0, 0);
		_tuple$3 = [0, 0]; advance = _tuple$3[0]; i$1 = _tuple$3[1];
		while (i$1 < fields.length) {
			fi = (_struct$3 = (_slice$3 = fields, _index$4 = i$1, (_index$4 >= 0 && _index$4 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$4] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct$3.name, _struct$3.tag, _struct$3.index, _struct$3.typ, _struct$3.omitEmpty, _struct$3.quoted));
			name$1 = fi.name;
			advance = 1;
			while ((i$1 + advance >> 0) < fields.length) {
				fj = (_struct$4 = (_slice$4 = fields, _index$5 = (i$1 + advance >> 0), (_index$5 >= 0 && _index$5 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$5] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct$4.name, _struct$4.tag, _struct$4.index, _struct$4.typ, _struct$4.omitEmpty, _struct$4.quoted));
				if (!(fj.name === name$1)) {
					break;
				}
				advance = advance + 1 >> 0;
			}
			if (advance === 1) {
				out = go$append(out, (_struct$5 = fi, new field.Ptr(_struct$5.name, _struct$5.tag, _struct$5.index, _struct$5.typ, _struct$5.omitEmpty, _struct$5.quoted)));
				i$1 = i$1 + (advance) >> 0;
				continue;
			}
			_tuple$4 = dominantField(go$subslice(fields, i$1, (i$1 + advance >> 0))); dominant = (_struct$6 = _tuple$4[0], new field.Ptr(_struct$6.name, _struct$6.tag, _struct$6.index, _struct$6.typ, _struct$6.omitEmpty, _struct$6.quoted)); ok = _tuple$4[1];
			if (ok) {
				out = go$append(out, (_struct$7 = dominant, new field.Ptr(_struct$7.name, _struct$7.tag, _struct$7.index, _struct$7.typ, _struct$7.omitEmpty, _struct$7.quoted)));
			}
			i$1 = i$1 + (advance) >> 0;
		}
		fields = out;
		sort.Sort(go$subslice(new byIndex(fields.array), fields.offset, fields.offset + fields.length));
		return fields;
	};
	dominantField = function(fields) {
		var _slice, _index, length, tagged, _ref, _i, _slice$1, _index$1, _struct, f, i, _slice$2, _index$2, _struct$1, _slice$3, _index$3, _struct$2;
		length = (_slice = fields, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).index.length;
		tagged = -1;
		_ref = fields;
		_i = 0;
		while (_i < _ref.length) {
			f = (_struct = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct.name, _struct.tag, _struct.index, _struct.typ, _struct.omitEmpty, _struct.quoted));
			i = _i;
			if (f.index.length > length) {
				fields = go$subslice(fields, 0, i);
				break;
			}
			if (f.tag) {
				if (tagged >= 0) {
					return [new field.Ptr("", false, (go$sliceType(Go$Int)).nil, null, false, false), false];
				}
				tagged = i;
			}
			_i++;
		}
		if (tagged >= 0) {
			return [(_struct$1 = (_slice$2 = fields, _index$2 = tagged, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct$1.name, _struct$1.tag, _struct$1.index, _struct$1.typ, _struct$1.omitEmpty, _struct$1.quoted)), true];
		}
		if (fields.length > 1) {
			return [new field.Ptr("", false, (go$sliceType(Go$Int)).nil, null, false, false), false];
		}
		return [(_struct$2 = (_slice$3 = fields, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), new field.Ptr(_struct$2.name, _struct$2.tag, _struct$2.index, _struct$2.typ, _struct$2.omitEmpty, _struct$2.quoted)), true];
	};
	cachedTypeFields = function(t) {
		var _entry, f, _map, _key, _key$1;
		fieldCache.RWMutex.RLock();
		f = (_entry = fieldCache.m[(t || go$interfaceNil).go$key()], _entry !== undefined ? _entry.v : (go$sliceType(field)).nil);
		fieldCache.RWMutex.RUnlock();
		if (!(f === (go$sliceType(field)).nil)) {
			return f;
		}
		f = typeFields(t);
		if (f === (go$sliceType(field)).nil) {
			f = new (go$sliceType(field))([]);
		}
		fieldCache.RWMutex.Lock();
		if (fieldCache.m === false) {
			fieldCache.m = (_map = new Go$Map(), _map);
		}
		_key$1 = t; (fieldCache.m || go$throwRuntimeError("assignment to entry in nil map"))[(_key$1 || go$interfaceNil).go$key()] = { k: _key$1, v: f };
		fieldCache.RWMutex.Unlock();
		return f;
	};
	compact = function(dst, src, escape) {
		var origLen, scan, start, _ref, _i, _slice, _index, c, i, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, v;
		origLen = dst.Len();
		scan = new scanner.Ptr();
		scan.reset();
		start = 0;
		_ref = src;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (escape && ((c === 60) || (c === 62) || (c === 38))) {
				if (start < i) {
					dst.Write(go$subslice(src, start, i));
				}
				dst.WriteString("\\u00");
				dst.WriteByte(hex.charCodeAt((c >>> 4 << 24 >>> 24)));
				dst.WriteByte(hex.charCodeAt(((c & 15) >>> 0)));
				start = i + 1 >> 0;
			}
			if ((c === 226) && (i + 2 >> 0) < src.length && ((_slice$1 = src, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 128) && (((_slice$2 = src, _index$2 = (i + 2 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) & ~1) === 168)) {
				if (start < i) {
					dst.Write(go$subslice(src, start, i));
				}
				dst.WriteString("\\u202");
				dst.WriteByte(hex.charCodeAt((((_slice$3 = src, _index$3 = (i + 2 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) & 15) >>> 0)));
				start = i + 3 >> 0;
			}
			v = scan.step(scan, (c >> 0));
			if (v >= 9) {
				if (v === 11) {
					break;
				}
				if (start < i) {
					dst.Write(go$subslice(src, start, i));
				}
				start = i + 1 >> 0;
			}
			_i++;
		}
		if (scan.eof() === 11) {
			dst.Truncate(origLen);
			return scan.err;
		}
		if (start < src.length) {
			dst.Write(go$subslice(src, start));
		}
		return null;
	};
	checkValid = function(data, scan) {
		var _ref, _i, _slice, _index, c, x;
		scan.reset();
		_ref = data;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			scan.bytes = (x = scan.bytes, new Go$Int64(x.high + 0, x.low + 1));
			if (scan.step(scan, (c >> 0)) === 11) {
				return scan.err;
			}
			_i++;
		}
		if (scan.eof() === 11) {
			return scan.err;
		}
		return null;
	};
	nextValue = function(data, scan) {
		var value, rest, err, _ref, _i, _slice, _index, c, i, v, _ref$1, _tuple, _tuple$1, _tuple$2, _tuple$3;
		value = (go$sliceType(Go$Uint8)).nil;
		rest = (go$sliceType(Go$Uint8)).nil;
		err = null;
		scan.reset();
		_ref = data;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			v = scan.step(scan, (c >> 0));
			if (v >= 10) {
				_ref$1 = v;
				if (_ref$1 === 11) {
					_tuple = [(go$sliceType(Go$Uint8)).nil, (go$sliceType(Go$Uint8)).nil, scan.err]; value = _tuple[0]; rest = _tuple[1]; err = _tuple[2];
					return [value, rest, err];
				} else if (_ref$1 === 10) {
					_tuple$1 = [go$subslice(data, 0, i), go$subslice(data, i), null]; value = _tuple$1[0]; rest = _tuple$1[1]; err = _tuple$1[2];
					return [value, rest, err];
				}
			}
			_i++;
		}
		if (scan.eof() === 11) {
			_tuple$2 = [(go$sliceType(Go$Uint8)).nil, (go$sliceType(Go$Uint8)).nil, scan.err]; value = _tuple$2[0]; rest = _tuple$2[1]; err = _tuple$2[2];
			return [value, rest, err];
		}
		_tuple$3 = [data, (go$sliceType(Go$Uint8)).nil, null]; value = _tuple$3[0]; rest = _tuple$3[1]; err = _tuple$3[2];
		return [value, rest, err];
	};
	SyntaxError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.msg;
	};
	SyntaxError.prototype.Error = function() { return this.go$val.Error(); };
	scanner.Ptr.prototype.reset = function() {
		var s;
		s = this;
		s.step = stateBeginValue;
		s.parseState = go$subslice(s.parseState, 0, 0);
		s.err = null;
		s.redo = false;
		s.endTop = false;
	};
	scanner.prototype.reset = function() { return this.go$val.reset(); };
	scanner.Ptr.prototype.eof = function() {
		var s;
		s = this;
		if (!(go$interfaceIsEqual(s.err, null))) {
			return 11;
		}
		if (s.endTop) {
			return 10;
		}
		s.step(s, 32);
		if (s.endTop) {
			return 10;
		}
		if (go$interfaceIsEqual(s.err, null)) {
			s.err = new SyntaxError.Ptr("unexpected end of JSON input", s.bytes);
		}
		return 11;
	};
	scanner.prototype.eof = function() { return this.go$val.eof(); };
	scanner.Ptr.prototype.pushParseState = function(p) {
		var s;
		s = this;
		s.parseState = go$append(s.parseState, p);
	};
	scanner.prototype.pushParseState = function(p) { return this.go$val.pushParseState(p); };
	scanner.Ptr.prototype.popParseState = function() {
		var s, n;
		s = this;
		n = s.parseState.length - 1 >> 0;
		s.parseState = go$subslice(s.parseState, 0, n);
		s.redo = false;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
		} else {
			s.step = stateEndValue;
		}
	};
	scanner.prototype.popParseState = function() { return this.go$val.popParseState(); };
	isSpace = function(c) {
		return (c === 32) || (c === 9) || (c === 13) || (c === 10);
	};
	stateBeginValueOrEmpty = function(s, c) {
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 93) {
			return stateEndValue(s, c);
		}
		return stateBeginValue(s, c);
	};
	stateBeginValue = function(s, c) {
		var _ref;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		_ref = c;
		if (_ref === 123) {
			s.step = stateBeginStringOrEmpty;
			s.pushParseState(0);
			return 2;
		} else if (_ref === 91) {
			s.step = stateBeginValueOrEmpty;
			s.pushParseState(2);
			return 6;
		} else if (_ref === 34) {
			s.step = stateInString;
			return 1;
		} else if (_ref === 45) {
			s.step = stateNeg;
			return 1;
		} else if (_ref === 48) {
			s.step = state0;
			return 1;
		} else if (_ref === 116) {
			s.step = stateT;
			return 1;
		} else if (_ref === 102) {
			s.step = stateF;
			return 1;
		} else if (_ref === 110) {
			s.step = stateN;
			return 1;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 1;
		}
		return s.error(c, "looking for beginning of value");
	};
	stateBeginStringOrEmpty = function(s, c) {
		var n, _slice, _index;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 125) {
			n = s.parseState.length;
			_slice = s.parseState; _index = n - 1 >> 0;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 1) : go$throwRuntimeError("index out of range");
			return stateEndValue(s, c);
		}
		return stateBeginString(s, c);
	};
	stateBeginString = function(s, c) {
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 34) {
			s.step = stateInString;
			return 1;
		}
		return s.error(c, "looking for beginning of object key string");
	};
	stateEndValue = function(s, c) {
		var n, _slice, _index, ps, _ref, _slice$1, _index$1, _slice$2, _index$2;
		n = s.parseState.length;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
			return stateEndTop(s, c);
		}
		if (c <= 32 && isSpace((c >> 0))) {
			s.step = stateEndValue;
			return 9;
		}
		ps = (_slice = s.parseState, _index = (n - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		_ref = ps;
		if (_ref === 0) {
			if (c === 58) {
				_slice$1 = s.parseState; _index$1 = n - 1 >> 0;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 1) : go$throwRuntimeError("index out of range");
				s.step = stateBeginValue;
				return 3;
			}
			return s.error(c, "after object key");
		} else if (_ref === 1) {
			if (c === 44) {
				_slice$2 = s.parseState; _index$2 = n - 1 >> 0;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = 0) : go$throwRuntimeError("index out of range");
				s.step = stateBeginString;
				return 4;
			}
			if (c === 125) {
				s.popParseState();
				return 5;
			}
			return s.error(c, "after object key:value pair");
		} else if (_ref === 2) {
			if (c === 44) {
				s.step = stateBeginValue;
				return 7;
			}
			if (c === 93) {
				s.popParseState();
				return 8;
			}
			return s.error(c, "after array element");
		}
		return s.error(c, "");
	};
	stateEndTop = function(s, c) {
		if (!((c === 32)) && !((c === 9)) && !((c === 13)) && !((c === 10))) {
			s.error(c, "after top-level value");
		}
		return 10;
	};
	stateInString = function(s, c) {
		if (c === 34) {
			s.step = stateEndValue;
			return 0;
		}
		if (c === 92) {
			s.step = stateInStringEsc;
			return 0;
		}
		if (c < 32) {
			return s.error(c, "in string literal");
		}
		return 0;
	};
	stateInStringEsc = function(s, c) {
		var _ref;
		_ref = c;
		if (_ref === 98 || _ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 92 || _ref === 47 || _ref === 34) {
			s.step = stateInString;
			return 0;
		}
		if (c === 117) {
			s.step = stateInStringEscU;
			return 0;
		}
		return s.error(c, "in string escape code");
	};
	stateInStringEscU = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU1;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU1 = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU12;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU12 = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU123;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU123 = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInString;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateNeg = function(s, c) {
		if (c === 48) {
			s.step = state0;
			return 0;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return s.error(c, "in numeric literal");
	};
	state1 = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return state0(s, c);
	};
	state0 = function(s, c) {
		if (c === 46) {
			s.step = stateDot;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateDot = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		return s.error(c, "after decimal point in numeric literal");
	};
	stateDot0 = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateE = function(s, c) {
		if (c === 43) {
			s.step = stateESign;
			return 0;
		}
		if (c === 45) {
			s.step = stateESign;
			return 0;
		}
		return stateESign(s, c);
	};
	stateESign = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return s.error(c, "in exponent of numeric literal");
	};
	stateE0 = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateT = function(s, c) {
		if (c === 114) {
			s.step = stateTr;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'r')");
	};
	stateTr = function(s, c) {
		if (c === 117) {
			s.step = stateTru;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'u')");
	};
	stateTru = function(s, c) {
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'e')");
	};
	stateF = function(s, c) {
		if (c === 97) {
			s.step = stateFa;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'a')");
	};
	stateFa = function(s, c) {
		if (c === 108) {
			s.step = stateFal;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'l')");
	};
	stateFal = function(s, c) {
		if (c === 115) {
			s.step = stateFals;
			return 0;
		}
		return s.error(c, "in literal false (expecting 's')");
	};
	stateFals = function(s, c) {
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'e')");
	};
	stateN = function(s, c) {
		if (c === 117) {
			s.step = stateNu;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'u')");
	};
	stateNu = function(s, c) {
		if (c === 108) {
			s.step = stateNul;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateNul = function(s, c) {
		if (c === 108) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateError = function(s, c) {
		return 11;
	};
	scanner.Ptr.prototype.error = function(c, context) {
		var s;
		s = this;
		s.step = stateError;
		s.err = new SyntaxError.Ptr("invalid character " + quoteChar(c) + " " + context, s.bytes);
		return 11;
	};
	scanner.prototype.error = function(c, context) { return this.go$val.error(c, context); };
	quoteChar = function(c) {
		var s;
		if (c === 39) {
			return "'\\''";
		}
		if (c === 34) {
			return "'\"'";
		}
		s = strconv.Quote(go$encodeRune(c));
		return "'" + s.substring(1, (s.length - 1 >> 0)) + "'";
	};
	scanner.Ptr.prototype.undo = function(scanCode) {
		var s;
		s = this;
		if (s.redo) {
			throw go$panic(new Go$String("json: invalid use of scanner"));
		}
		s.redoCode = scanCode;
		s.redoState = s.step;
		s.step = stateRedo;
		s.redo = true;
	};
	scanner.prototype.undo = function(scanCode) { return this.go$val.undo(scanCode); };
	stateRedo = function(s, c) {
		s.redo = false;
		s.step = s.redoState;
		return s.redoCode;
	};
	parseTag = function(tag) {
		var idx;
		idx = strings.Index(tag, ",");
		if (!((idx === -1))) {
			return [tag.substring(0, idx), tag.substring((idx + 1 >> 0))];
		}
		return [tag, ""];
	};
	tagOptions.prototype.Contains = function(optionName) {
		var o, s, next, i, _tuple;
		o = this.go$val;
		if (o.length === 0) {
			return false;
		}
		s = o;
		while (!(s === "")) {
			next = "";
			i = strings.Index(s, ",");
			if (i >= 0) {
				_tuple = [s.substring(0, i), s.substring((i + 1 >> 0))]; s = _tuple[0]; next = _tuple[1];
			}
			if (s === optionName) {
				return true;
			}
			s = next;
		}
		return false;
	};
	go$ptrType(tagOptions).prototype.Contains = function(optionName) { return new tagOptions(this.go$get()).Contains(optionName); };
	go$pkg.init = function() {
		Unmarshaler.init([["UnmarshalJSON", "", (go$funcType([(go$sliceType(Go$Uint8))], [go$error], false))]]);
		(go$ptrType(UnmarshalTypeError)).methods = [["Error", "", [], [Go$String], false, -1]];
		UnmarshalTypeError.init([["Value", "Value", "", Go$String, ""], ["Type", "Type", "", reflect.Type, ""]]);
		(go$ptrType(InvalidUnmarshalError)).methods = [["Error", "", [], [Go$String], false, -1]];
		InvalidUnmarshalError.init([["Type", "Type", "", reflect.Type, ""]]);
		Number.methods = [["Float64", "", [], [Go$Float64, go$error], false, -1], ["Int64", "", [], [Go$Int64, go$error], false, -1], ["String", "", [], [Go$String], false, -1]];
		(go$ptrType(Number)).methods = [["Float64", "", [], [Go$Float64, go$error], false, -1], ["Int64", "", [], [Go$Int64, go$error], false, -1], ["String", "", [], [Go$String], false, -1]];
		(go$ptrType(decodeState)).methods = [["array", "encoding/json", [reflect.Value], [], false, -1], ["arrayInterface", "encoding/json", [], [(go$sliceType(go$emptyInterface))], false, -1], ["convertNumber", "encoding/json", [Go$String], [go$emptyInterface, go$error], false, -1], ["error", "encoding/json", [go$error], [], false, -1], ["indirect", "encoding/json", [reflect.Value, Go$Bool], [Unmarshaler, encoding.TextUnmarshaler, reflect.Value], false, -1], ["init", "encoding/json", [(go$sliceType(Go$Uint8))], [(go$ptrType(decodeState))], false, -1], ["literal", "encoding/json", [reflect.Value], [], false, -1], ["literalInterface", "encoding/json", [], [go$emptyInterface], false, -1], ["literalStore", "encoding/json", [(go$sliceType(Go$Uint8)), reflect.Value, Go$Bool], [], false, -1], ["next", "encoding/json", [], [(go$sliceType(Go$Uint8))], false, -1], ["object", "encoding/json", [reflect.Value], [], false, -1], ["objectInterface", "encoding/json", [], [(go$mapType(Go$String, go$emptyInterface))], false, -1], ["saveError", "encoding/json", [go$error], [], false, -1], ["scanWhile", "encoding/json", [Go$Int], [Go$Int], false, -1], ["unmarshal", "encoding/json", [go$emptyInterface], [go$error], false, -1], ["value", "encoding/json", [reflect.Value], [], false, -1], ["valueInterface", "encoding/json", [], [go$emptyInterface], false, -1]];
		decodeState.init([["data", "data", "encoding/json", (go$sliceType(Go$Uint8)), ""], ["off", "off", "encoding/json", Go$Int, ""], ["scan", "scan", "encoding/json", scanner, ""], ["nextscan", "nextscan", "encoding/json", scanner, ""], ["savedError", "savedError", "encoding/json", go$error, ""], ["tempstr", "tempstr", "encoding/json", Go$String, ""], ["useNumber", "useNumber", "encoding/json", Go$Bool, ""]]);
		Marshaler.init([["MarshalJSON", "", (go$funcType([], [(go$sliceType(Go$Uint8)), go$error], false))]]);
		(go$ptrType(UnsupportedTypeError)).methods = [["Error", "", [], [Go$String], false, -1]];
		UnsupportedTypeError.init([["Type", "Type", "", reflect.Type, ""]]);
		(go$ptrType(UnsupportedValueError)).methods = [["Error", "", [], [Go$String], false, -1]];
		UnsupportedValueError.init([["Value", "Value", "", reflect.Value, ""], ["Str", "Str", "", Go$String, ""]]);
		(go$ptrType(MarshalerError)).methods = [["Error", "", [], [Go$String], false, -1]];
		MarshalerError.init([["Type", "Type", "", reflect.Type, ""], ["Err", "Err", "", go$error, ""]]);
		(go$ptrType(encodeState)).methods = [["Bytes", "", [], [(go$sliceType(Go$Uint8))], false, 0], ["Grow", "", [Go$Int], [], false, 0], ["Len", "", [], [Go$Int], false, 0], ["Next", "", [Go$Int], [(go$sliceType(Go$Uint8))], false, 0], ["Read", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, 0], ["ReadByte", "", [], [Go$Uint8, go$error], false, 0], ["ReadBytes", "", [Go$Uint8], [(go$sliceType(Go$Uint8)), go$error], false, 0], ["ReadFrom", "", [io.Reader], [Go$Int64, go$error], false, 0], ["ReadRune", "", [], [Go$Int32, Go$Int, go$error], false, 0], ["ReadString", "", [Go$Uint8], [Go$String, go$error], false, 0], ["Reset", "", [], [], false, 0], ["String", "", [], [Go$String], false, 0], ["Truncate", "", [Go$Int], [], false, 0], ["UnreadByte", "", [], [go$error], false, 0], ["UnreadRune", "", [], [go$error], false, 0], ["Write", "", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, 0], ["WriteByte", "", [Go$Uint8], [go$error], false, 0], ["WriteRune", "", [Go$Int32], [Go$Int, go$error], false, 0], ["WriteString", "", [Go$String], [Go$Int, go$error], false, 0], ["WriteTo", "", [io.Writer], [Go$Int64, go$error], false, 0], ["grow", "bytes", [Go$Int], [Go$Int], false, 0], ["readSlice", "bytes", [Go$Uint8], [(go$sliceType(Go$Uint8)), go$error], false, 0], ["error", "encoding/json", [go$error], [], false, -1], ["marshal", "encoding/json", [go$emptyInterface], [go$error], false, -1], ["reflectValue", "encoding/json", [reflect.Value], [], false, -1], ["string", "encoding/json", [Go$String], [Go$Int, go$error], false, -1], ["stringBytes", "encoding/json", [(go$sliceType(Go$Uint8))], [Go$Int, go$error], false, -1]];
		encodeState.init([["Buffer", "", "", bytes.Buffer, ""], ["scratch", "scratch", "encoding/json", (go$arrayType(Go$Uint8, 64)), ""]]);
		encoderFunc.init([(go$ptrType(encodeState)), reflect.Value, Go$Bool], [], false);
		floatEncoder.methods = [["encode", "encoding/json", [(go$ptrType(encodeState)), reflect.Value, Go$Bool], [], false, -1]];
		(go$ptrType(floatEncoder)).methods = [["encode", "encoding/json", [(go$ptrType(encodeState)), reflect.Value, Go$Bool], [], false, -1]];
		(go$ptrType(structEncoder)).methods = [["encode", "encoding/json", [(go$ptrType(encodeState)), reflect.Value, Go$Bool], [], false, -1]];
		structEncoder.init([["fields", "fields", "encoding/json", (go$sliceType(field)), ""], ["fieldEncs", "fieldEncs", "encoding/json", (go$sliceType(encoderFunc)), ""]]);
		(go$ptrType(mapEncoder)).methods = [["encode", "encoding/json", [(go$ptrType(encodeState)), reflect.Value, Go$Bool], [], false, -1]];
		mapEncoder.init([["elemEnc", "elemEnc", "encoding/json", encoderFunc, ""]]);
		(go$ptrType(sliceEncoder)).methods = [["encode", "encoding/json", [(go$ptrType(encodeState)), reflect.Value, Go$Bool], [], false, -1]];
		sliceEncoder.init([["arrayEnc", "arrayEnc", "encoding/json", encoderFunc, ""]]);
		(go$ptrType(arrayEncoder)).methods = [["encode", "encoding/json", [(go$ptrType(encodeState)), reflect.Value, Go$Bool], [], false, -1]];
		arrayEncoder.init([["elemEnc", "elemEnc", "encoding/json", encoderFunc, ""]]);
		(go$ptrType(ptrEncoder)).methods = [["encode", "encoding/json", [(go$ptrType(encodeState)), reflect.Value, Go$Bool], [], false, -1]];
		ptrEncoder.init([["elemEnc", "elemEnc", "encoding/json", encoderFunc, ""]]);
		(go$ptrType(condAddrEncoder)).methods = [["encode", "encoding/json", [(go$ptrType(encodeState)), reflect.Value, Go$Bool], [], false, -1]];
		condAddrEncoder.init([["canAddrEnc", "canAddrEnc", "encoding/json", encoderFunc, ""], ["elseEnc", "elseEnc", "encoding/json", encoderFunc, ""]]);
		stringValues.methods = [["Len", "", [], [Go$Int], false, -1], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1], ["get", "encoding/json", [Go$Int], [Go$String], false, -1]];
		(go$ptrType(stringValues)).methods = [["Len", "", [], [Go$Int], false, -1], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1], ["get", "encoding/json", [Go$Int], [Go$String], false, -1]];
		stringValues.init(reflect.Value);
		field.init([["name", "name", "encoding/json", Go$String, ""], ["tag", "tag", "encoding/json", Go$Bool, ""], ["index", "index", "encoding/json", (go$sliceType(Go$Int)), ""], ["typ", "typ", "encoding/json", reflect.Type, ""], ["omitEmpty", "omitEmpty", "encoding/json", Go$Bool, ""], ["quoted", "quoted", "encoding/json", Go$Bool, ""]]);
		byName.methods = [["Len", "", [], [Go$Int], false, -1], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1]];
		(go$ptrType(byName)).methods = [["Len", "", [], [Go$Int], false, -1], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1]];
		byName.init(field);
		byIndex.methods = [["Len", "", [], [Go$Int], false, -1], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1]];
		(go$ptrType(byIndex)).methods = [["Len", "", [], [Go$Int], false, -1], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1]];
		byIndex.init(field);
		(go$ptrType(SyntaxError)).methods = [["Error", "", [], [Go$String], false, -1]];
		SyntaxError.init([["msg", "msg", "encoding/json", Go$String, ""], ["Offset", "Offset", "", Go$Int64, ""]]);
		(go$ptrType(scanner)).methods = [["eof", "encoding/json", [], [Go$Int], false, -1], ["error", "encoding/json", [Go$Int, Go$String], [Go$Int], false, -1], ["popParseState", "encoding/json", [], [], false, -1], ["pushParseState", "encoding/json", [Go$Int], [], false, -1], ["reset", "encoding/json", [], [], false, -1], ["undo", "encoding/json", [Go$Int], [], false, -1]];
		scanner.init([["step", "step", "encoding/json", (go$funcType([(go$ptrType(scanner)), Go$Int], [Go$Int], false)), ""], ["endTop", "endTop", "encoding/json", Go$Bool, ""], ["parseState", "parseState", "encoding/json", (go$sliceType(Go$Int)), ""], ["err", "err", "encoding/json", go$error, ""], ["redo", "redo", "encoding/json", Go$Bool, ""], ["redoCode", "redoCode", "encoding/json", Go$Int, ""], ["redoState", "redoState", "encoding/json", (go$funcType([(go$ptrType(scanner)), Go$Int], [Go$Int], false)), ""], ["bytes", "bytes", "encoding/json", Go$Int64, ""]]);
		tagOptions.methods = [["Contains", "", [Go$String], [Go$Bool], false, -1]];
		(go$ptrType(tagOptions)).methods = [["Contains", "", [Go$String], [Go$Bool], false, -1]];
		encoderCache = new (go$structType([["RWMutex", "", "", sync.RWMutex, ""], ["m", "m", "encoding/json", (go$mapType(reflect.Type, encoderFunc)), ""]])).Ptr(new sync.RWMutex.Ptr(), false);
		fieldCache = new (go$structType([["RWMutex", "", "", sync.RWMutex, ""], ["m", "m", "encoding/json", (go$mapType(reflect.Type, (go$sliceType(field)))), ""]])).Ptr(new sync.RWMutex.Ptr(), false);
		errPhase = errors.New("JSON decoder out of sync - data changing underfoot?");
		numberType = reflect.TypeOf(new Number(""));
		hex = "0123456789abcdef";
		encodeStatePool = new (go$chanType((go$ptrType(encodeState)), false, false))();
		byteSliceType = reflect.TypeOf((go$sliceType(Go$Uint8)).nil);
		marshalerType = reflect.TypeOf(go$newDataPointer(null, (go$ptrType(Marshaler)))).Elem();
		textMarshalerType = reflect.TypeOf(go$newDataPointer(null, (go$ptrType(encoding.TextMarshaler)))).Elem();
		var e, v, quoted, _recv;
		float32Encoder = (_recv = (new floatEncoder(32)), function(e, v, quoted) { return _recv.encode(e, v, quoted); });
		var e$1, v$1, quoted$1, _recv$1;
		float64Encoder = (_recv$1 = (new floatEncoder(64)), function(e$1, v$1, quoted$1) { return _recv$1.encode(e$1, v$1, quoted$1); });
	}
	return go$pkg;
})();
go$packages["math/rand"] = (function() {
	var go$pkg = {}, math = go$packages["math"], sync = go$packages["sync"], Source, Rand, lockedSource, rngSource, absInt32, NewSource, New, Seed, Intn, seedrand, ke, we, fe, kn, wn, fn, globalRand, rng_cooked;
	Source = go$pkg.Source = go$newType(0, "Interface", "rand.Source", "Source", "math/rand", null);
	Rand = go$pkg.Rand = go$newType(0, "Struct", "rand.Rand", "Rand", "math/rand", function(src_) {
		this.go$val = this;
		this.src = src_ !== undefined ? src_ : null;
	});
	lockedSource = go$pkg.lockedSource = go$newType(0, "Struct", "rand.lockedSource", "lockedSource", "math/rand", function(lk_, src_) {
		this.go$val = this;
		this.lk = lk_ !== undefined ? lk_ : new sync.Mutex.Ptr();
		this.src = src_ !== undefined ? src_ : null;
	});
	rngSource = go$pkg.rngSource = go$newType(0, "Struct", "rand.rngSource", "rngSource", "math/rand", function(tap_, feed_, vec_) {
		this.go$val = this;
		this.tap = tap_ !== undefined ? tap_ : 0;
		this.feed = feed_ !== undefined ? feed_ : 0;
		this.vec = vec_ !== undefined ? vec_ : go$makeNativeArray("Int64", 607, function() { return new Go$Int64(0, 0); });
	});
	Rand.Ptr.prototype.ExpFloat64 = function() {
		var r, j, i, x;
		r = this;
		while (true) {
			j = r.Uint32();
			i = (j & 255) >>> 0;
			x = j * go$coerceFloat32(we[i]);
			if (j < ke[i]) {
				return x;
			}
			if (i === 0) {
				return 7.69711747013105 - math.Log(r.Float64());
			}
			if (fe[i] + r.Float64() * (fe[(i - 1 >>> 0)] - fe[i]) < math.Exp(-x)) {
				return x;
			}
		}
	};
	Rand.prototype.ExpFloat64 = function() { return this.go$val.ExpFloat64(); };
	absInt32 = function(i) {
		if (i < 0) {
			return (-i >>> 0);
		}
		return (i >>> 0);
	};
	Rand.Ptr.prototype.NormFloat64 = function() {
		var r, j, i, x, y;
		r = this;
		while (true) {
			j = (r.Uint32() >> 0);
			i = j & 127;
			x = j * go$coerceFloat32(wn[i]);
			if (absInt32(j) < kn[i]) {
				return x;
			}
			if (i === 0) {
				while (true) {
					x = -math.Log(r.Float64()) * 0.29047645161474317;
					y = -math.Log(r.Float64());
					if (y + y >= x * x) {
						break;
					}
				}
				if (j > 0) {
					return 3.442619855899 + x;
				}
				return -3.442619855899 - x;
			}
			if (fn[i] + r.Float64() * (fn[(i - 1 >> 0)] - fn[i]) < math.Exp(-0.5 * x * x)) {
				return x;
			}
		}
	};
	Rand.prototype.NormFloat64 = function() { return this.go$val.NormFloat64(); };
	NewSource = go$pkg.NewSource = function(seed) {
		var rng;
		rng = new rngSource.Ptr();
		rng.Seed(seed);
		return rng;
	};
	New = go$pkg.New = function(src) {
		return new Rand.Ptr(src);
	};
	Rand.Ptr.prototype.Seed = function(seed) {
		var r;
		r = this;
		r.src.Seed(seed);
	};
	Rand.prototype.Seed = function(seed) { return this.go$val.Seed(seed); };
	Rand.Ptr.prototype.Int63 = function() {
		var r;
		r = this;
		return r.src.Int63();
	};
	Rand.prototype.Int63 = function() { return this.go$val.Int63(); };
	Rand.Ptr.prototype.Uint32 = function() {
		var r;
		r = this;
		return (go$shiftRightInt64(r.Int63(), 31).low >>> 0);
	};
	Rand.prototype.Uint32 = function() { return this.go$val.Uint32(); };
	Rand.Ptr.prototype.Int31 = function() {
		var r, x;
		r = this;
		return ((x = go$shiftRightInt64(r.Int63(), 32), x.low + ((x.high >> 31) * 4294967296)) >> 0);
	};
	Rand.prototype.Int31 = function() { return this.go$val.Int31(); };
	Rand.Ptr.prototype.Int = function() {
		var r, u;
		r = this;
		u = (r.Int63().low >>> 0);
		return (((u << 1 >>> 0) >>> 1 >>> 0) >> 0);
	};
	Rand.prototype.Int = function() { return this.go$val.Int(); };
	Rand.Ptr.prototype.Int63n = function(n) {
		var r, x, x$1, max, v;
		r = this;
		if ((n.high < 0 || (n.high === 0 && n.low <= 0))) {
			throw go$panic(new Go$String("invalid argument to Int63n"));
		}
		max = (x = (x$1 = go$div64(new Go$Uint64(2147483648, 0), new Go$Uint64(n.high, n.low), true), new Go$Uint64(2147483647 - x$1.high, 4294967295 - x$1.low)), new Go$Int64(x.high, x.low));
		v = r.Int63();
		while ((v.high > max.high || (v.high === max.high && v.low > max.low))) {
			v = r.Int63();
		}
		return go$div64(v, n, true);
	};
	Rand.prototype.Int63n = function(n) { return this.go$val.Int63n(n); };
	Rand.Ptr.prototype.Int31n = function(n) {
		var r, _r, max, v, _r$1;
		r = this;
		if (n <= 0) {
			throw go$panic(new Go$String("invalid argument to Int31n"));
		}
		max = ((2147483647 - (_r = 2147483648 % (n >>> 0), _r === _r ? _r : go$throwRuntimeError("integer divide by zero")) >>> 0) >> 0);
		v = r.Int31();
		while (v > max) {
			v = r.Int31();
		}
		return (_r$1 = v % n, _r$1 === _r$1 ? _r$1 : go$throwRuntimeError("integer divide by zero"));
	};
	Rand.prototype.Int31n = function(n) { return this.go$val.Int31n(n); };
	Rand.Ptr.prototype.Intn = function(n) {
		var r, x;
		r = this;
		if (n <= 0) {
			throw go$panic(new Go$String("invalid argument to Intn"));
		}
		if (n <= 2147483647) {
			return (r.Int31n((n >> 0)) >> 0);
		}
		return ((x = r.Int63n(new Go$Int64(0, n)), x.low + ((x.high >> 31) * 4294967296)) >> 0);
	};
	Rand.prototype.Intn = function(n) { return this.go$val.Intn(n); };
	Rand.Ptr.prototype.Float64 = function() {
		var r;
		r = this;
		return go$flatten64(r.Int63()) / 9.223372036854776e+18;
	};
	Rand.prototype.Float64 = function() { return this.go$val.Float64(); };
	Rand.Ptr.prototype.Float32 = function() {
		var r;
		r = this;
		return r.Float64();
	};
	Rand.prototype.Float32 = function() { return this.go$val.Float32(); };
	Rand.Ptr.prototype.Perm = function(n) {
		var r, m, i, _slice, _index, i$1, j, _slice$1, _index$1, _slice$2, _index$2, _tuple, _slice$3, _index$3, _slice$4, _index$4;
		r = this;
		m = (go$sliceType(Go$Int)).make(n, 0, function() { return 0; });
		i = 0;
		while (i < n) {
			_slice = m; _index = i;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = i) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		i$1 = 0;
		while (i$1 < n) {
			j = r.Intn(i$1 + 1 >> 0);
			_tuple = [(_slice$1 = m, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (_slice$2 = m, _index$2 = i$1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))]; _slice$3 = m; _index$3 = i$1;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[0]) : go$throwRuntimeError("index out of range"); _slice$4 = m; _index$4 = j;(_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = _tuple[1]) : go$throwRuntimeError("index out of range");
			i$1 = i$1 + 1 >> 0;
		}
		return m;
	};
	Rand.prototype.Perm = function(n) { return this.go$val.Perm(n); };
	Seed = go$pkg.Seed = function(seed) {
		globalRand.Seed(seed);
	};
	Intn = go$pkg.Intn = function(n) {
		return globalRand.Intn(n);
	};
	lockedSource.Ptr.prototype.Int63 = function() {
		var n, r;
		n = new Go$Int64(0, 0);
		r = this;
		r.lk.Lock();
		n = r.src.Int63();
		r.lk.Unlock();
		return n;
	};
	lockedSource.prototype.Int63 = function() { return this.go$val.Int63(); };
	lockedSource.Ptr.prototype.Seed = function(seed) {
		var r;
		r = this;
		r.lk.Lock();
		r.src.Seed(seed);
		r.lk.Unlock();
	};
	lockedSource.prototype.Seed = function(seed) { return this.go$val.Seed(seed); };
	seedrand = function(x) {
		var _q, hi, _r, lo;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : go$throwRuntimeError("integer divide by zero"));
		x = ((((48271 >>> 16 << 16) * lo >> 0) + (48271 << 16 >>> 16) * lo) >> 0) - ((((3399 >>> 16 << 16) * hi >> 0) + (3399 << 16 >>> 16) * hi) >> 0) >> 0;
		if (x < 0) {
			x = x + 2147483647 >> 0;
		}
		return x;
	};
	rngSource.Ptr.prototype.Seed = function(seed) {
		var rng, x, i, u, x$1, x$2, x$3;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = go$div64(seed, new Go$Int64(0, 2147483647), true);
		if ((seed.high < 0 || (seed.high === 0 && seed.low < 0))) {
			seed = new Go$Int64(seed.high + 0, seed.low + 2147483647);
		}
		if ((seed.high === 0 && seed.low === 0)) {
			seed = new Go$Int64(0, 89482311);
		}
		x = ((seed.low + ((seed.high >> 31) * 4294967296)) >> 0);
		i = -20;
		while (i < 607) {
			x = seedrand(x);
			if (i >= 0) {
				u = new Go$Int64(0, 0);
				u = go$shiftLeft64(new Go$Int64(0, x), 40);
				x = seedrand(x);
				u = (x$1 = go$shiftLeft64(new Go$Int64(0, x), 20), new Go$Int64(u.high ^ x$1.high, (u.low ^ x$1.low) >>> 0));
				x = seedrand(x);
				u = (x$2 = new Go$Int64(0, x), new Go$Int64(u.high ^ x$2.high, (u.low ^ x$2.low) >>> 0));
				u = (x$3 = rng_cooked[i], new Go$Int64(u.high ^ x$3.high, (u.low ^ x$3.low) >>> 0));
				rng.vec[i] = new Go$Int64(u.high & 2147483647, (u.low & 4294967295) >>> 0);
			}
			i = i + 1 >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.go$val.Seed(seed); };
	rngSource.Ptr.prototype.Int63 = function() {
		var rng, x, x$1, x$2, x$3;
		rng = this;
		rng.tap = rng.tap - 1 >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + 607 >> 0;
		}
		rng.feed = rng.feed - 1 >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + 607 >> 0;
		}
		x$3 = (x = (x$1 = rng.vec[rng.feed], x$2 = rng.vec[rng.tap], new Go$Int64(x$1.high + x$2.high, x$1.low + x$2.low)), new Go$Int64(x.high & 2147483647, (x.low & 4294967295) >>> 0));
		rng.vec[rng.feed] = x$3;
		return x$3;
	};
	rngSource.prototype.Int63 = function() { return this.go$val.Int63(); };
	go$pkg.init = function() {
		Source.init([["Int63", "", (go$funcType([], [Go$Int64], false))], ["Seed", "", (go$funcType([Go$Int64], [], false))]]);
		(go$ptrType(Rand)).methods = [["ExpFloat64", "", [], [Go$Float64], false, -1], ["Float32", "", [], [Go$Float32], false, -1], ["Float64", "", [], [Go$Float64], false, -1], ["Int", "", [], [Go$Int], false, -1], ["Int31", "", [], [Go$Int32], false, -1], ["Int31n", "", [Go$Int32], [Go$Int32], false, -1], ["Int63", "", [], [Go$Int64], false, -1], ["Int63n", "", [Go$Int64], [Go$Int64], false, -1], ["Intn", "", [Go$Int], [Go$Int], false, -1], ["NormFloat64", "", [], [Go$Float64], false, -1], ["Perm", "", [Go$Int], [(go$sliceType(Go$Int))], false, -1], ["Seed", "", [Go$Int64], [], false, -1], ["Uint32", "", [], [Go$Uint32], false, -1]];
		Rand.init([["src", "src", "math/rand", Source, ""]]);
		(go$ptrType(lockedSource)).methods = [["Int63", "", [], [Go$Int64], false, -1], ["Seed", "", [Go$Int64], [], false, -1]];
		lockedSource.init([["lk", "lk", "math/rand", sync.Mutex, ""], ["src", "src", "math/rand", Source, ""]]);
		(go$ptrType(rngSource)).methods = [["Int63", "", [], [Go$Int64], false, -1], ["Seed", "", [Go$Int64], [], false, -1]];
		rngSource.init([["tap", "tap", "math/rand", Go$Int, ""], ["feed", "feed", "math/rand", Go$Int, ""], ["vec", "vec", "math/rand", (go$arrayType(Go$Int64, 607)), ""]]);
		ke = go$toNativeArray("Uint32", [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = go$toNativeArray("Float32", [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = go$toNativeArray("Float32", [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = go$toNativeArray("Uint32", [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = go$toNativeArray("Float32", [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = go$toNativeArray("Float32", [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = go$toNativeArray("Int64", [new Go$Int64(1173834291, 3952672746), new Go$Int64(1081821761, 3130416987), new Go$Int64(324977939, 3414273807), new Go$Int64(1241840476, 2806224363), new Go$Int64(669549340, 1997590414), new Go$Int64(2103305448, 2402795971), new Go$Int64(1663160183, 1140819369), new Go$Int64(1120601685, 1788868961), new Go$Int64(1848035537, 1089001426), new Go$Int64(1235702047, 873593504), new Go$Int64(1911387977, 581324885), new Go$Int64(492609478, 1609182556), new Go$Int64(1069394745, 1241596776), new Go$Int64(1895445337, 1771189259), new Go$Int64(772864846, 3467012610), new Go$Int64(2006957225, 2344407434), new Go$Int64(402115761, 782467244), new Go$Int64(26335124, 3404933915), new Go$Int64(1063924276, 618867887), new Go$Int64(1178782866, 520164395), new Go$Int64(555910815, 1341358184), new Go$Int64(632398609, 665794848), new Go$Int64(1527227641, 3183648150), new Go$Int64(1781176124, 696329606), new Go$Int64(1789146075, 4151988961), new Go$Int64(60039534, 998951326), new Go$Int64(1535158725, 1364957564), new Go$Int64(63173359, 4090230633), new Go$Int64(649454641, 4009697548), new Go$Int64(248009524, 2569622517), new Go$Int64(778703922, 3742421481), new Go$Int64(1038377625, 1506914633), new Go$Int64(1738099768, 1983412561), new Go$Int64(236311649, 1436266083), new Go$Int64(1035966148, 3922894967), new Go$Int64(810508934, 1792680179), new Go$Int64(563141142, 1188796351), new Go$Int64(1349617468, 405968250), new Go$Int64(1044074554, 433754187), new Go$Int64(870549669, 4073162024), new Go$Int64(1053232044, 433121399), new Go$Int64(2451824, 4162580594), new Go$Int64(2010221076, 4132415622), new Go$Int64(611252600, 3033822028), new Go$Int64(2016407895, 824682382), new Go$Int64(2366218, 3583765414), new Go$Int64(1522878809, 535386927), new Go$Int64(1637219058, 2286693689), new Go$Int64(1453075389, 2968466525), new Go$Int64(193683513, 1351410206), new Go$Int64(1863677552, 1412813499), new Go$Int64(492736522, 4126267639), new Go$Int64(512765208, 2105529399), new Go$Int64(2132966268, 2413882233), new Go$Int64(947457634, 32226200), new Go$Int64(1149341356, 2032329073), new Go$Int64(106485445, 1356518208), new Go$Int64(79673492, 3430061722), new Go$Int64(663048513, 3820169661), new Go$Int64(481498454, 2981816134), new Go$Int64(1017155588, 4184371017), new Go$Int64(206574701, 2119206761), new Go$Int64(1295374591, 2472200560), new Go$Int64(1587026100, 2853524696), new Go$Int64(1307803389, 1681119904), new Go$Int64(1972496813, 95608918), new Go$Int64(392686347, 3690479145), new Go$Int64(941912722, 1397922290), new Go$Int64(988169623, 1516129515), new Go$Int64(1827305493, 1547420459), new Go$Int64(1311333971, 1470949486), new Go$Int64(194013850, 1336785672), new Go$Int64(2102397034, 4131677129), new Go$Int64(755205548, 4246329084), new Go$Int64(1004983461, 3788585631), new Go$Int64(2081005363, 3080389532), new Go$Int64(1501045284, 2215402037), new Go$Int64(391002300, 1171593935), new Go$Int64(1408774047, 1423855166), new Go$Int64(1628305930, 2276716302), new Go$Int64(1779030508, 2068027241), new Go$Int64(1369359303, 3427553297), new Go$Int64(189241615, 3289637845), new Go$Int64(1057480830, 3486407650), new Go$Int64(634572984, 3071877822), new Go$Int64(1159653919, 3363620705), new Go$Int64(1213226718, 4159821533), new Go$Int64(2070861710, 1894661), new Go$Int64(1472989750, 1156868282), new Go$Int64(348271067, 776219088), new Go$Int64(1646054810, 2425634259), new Go$Int64(1716021749, 680510161), new Go$Int64(1573220192, 1310101429), new Go$Int64(1095885995, 2964454134), new Go$Int64(1821788136, 3467098407), new Go$Int64(1990672920, 2109628894), new Go$Int64(7834944, 1232604732), new Go$Int64(309412934, 3261916179), new Go$Int64(1699175360, 434597899), new Go$Int64(235436061, 1624796439), new Go$Int64(521080809, 3589632480), new Go$Int64(1198416575, 864579159), new Go$Int64(208735487, 1380889830), new Go$Int64(619206309, 2654509477), new Go$Int64(1419738251, 1468209306), new Go$Int64(403198876, 100794388), new Go$Int64(956062190, 2991674471), new Go$Int64(1938816907, 2224662036), new Go$Int64(1973824487, 977097250), new Go$Int64(1351320195, 726419512), new Go$Int64(1964023751, 1747974366), new Go$Int64(1394388465, 1556430604), new Go$Int64(1097991433, 1080776742), new Go$Int64(1761636690, 280794874), new Go$Int64(117767733, 919835643), new Go$Int64(1180474222, 3434019658), new Go$Int64(196069168, 2461941785), new Go$Int64(133215641, 3615001066), new Go$Int64(417204809, 3103414427), new Go$Int64(790056561, 3380809712), new Go$Int64(879802240, 2724693469), new Go$Int64(547796833, 598827710), new Go$Int64(300924196, 3452273442), new Go$Int64(2071705424, 649274915), new Go$Int64(1346182319, 2585724112), new Go$Int64(636549385, 3165579553), new Go$Int64(1185578221, 2635894283), new Go$Int64(2094573470, 2053289721), new Go$Int64(985976581, 3169337108), new Go$Int64(1170569632, 144717764), new Go$Int64(1079216270, 1383666384), new Go$Int64(2022678706, 681540375), new Go$Int64(1375448925, 537050586), new Go$Int64(182715304, 315246468), new Go$Int64(226402871, 849323088), new Go$Int64(1262421183, 45543944), new Go$Int64(1201038398, 2319052083), new Go$Int64(2106775454, 3613090841), new Go$Int64(560472520, 2992171180), new Go$Int64(1765620479, 2068244785), new Go$Int64(917538188, 4239862634), new Go$Int64(777927839, 3892253031), new Go$Int64(720683925, 958186149), new Go$Int64(1724185863, 1877702262), new Go$Int64(1357886971, 837674867), new Go$Int64(1837048883, 1507589294), new Go$Int64(1905518400, 873336795), new Go$Int64(267722611, 2764496274), new Go$Int64(341003118, 4196182374), new Go$Int64(1080717893, 550964545), new Go$Int64(818747069, 420611474), new Go$Int64(222653272, 204265180), new Go$Int64(1549974541, 1787046383), new Go$Int64(1215581865, 3102292318), new Go$Int64(418321538, 1552199393), new Go$Int64(1243493047, 980542004), new Go$Int64(267284263, 3293718720), new Go$Int64(1179528763, 3771917473), new Go$Int64(599484404, 2195808264), new Go$Int64(252818753, 3894702887), new Go$Int64(780007692, 2099949527), new Go$Int64(1424094358, 338442522), new Go$Int64(490737398, 637158004), new Go$Int64(419862118, 281976339), new Go$Int64(574970164, 3619802330), new Go$Int64(1715552825, 3084554784), new Go$Int64(882872465, 4129772886), new Go$Int64(43084605, 1680378557), new Go$Int64(525521057, 3339087776), new Go$Int64(1680500332, 4220317857), new Go$Int64(211654685, 2959322499), new Go$Int64(1675600481, 1488354890), new Go$Int64(1312620086, 3958162143), new Go$Int64(920972075, 2773705983), new Go$Int64(1876039582, 225908689), new Go$Int64(963748535, 908216283), new Go$Int64(1541787429, 3574646075), new Go$Int64(319760557, 1936937569), new Go$Int64(1519770881, 75492235), new Go$Int64(816689472, 1935193178), new Go$Int64(2142521206, 2018250883), new Go$Int64(455141620, 3943126022), new Go$Int64(1546084160, 3066544345), new Go$Int64(1932392669, 2793082663), new Go$Int64(908474287, 3297036421), new Go$Int64(1640597065, 2206987825), new Go$Int64(1594236910, 807894872), new Go$Int64(366158341, 766252117), new Go$Int64(2060649606, 3833114345), new Go$Int64(845619743, 1255067973), new Go$Int64(1201145605, 741697208), new Go$Int64(671241040, 2810093753), new Go$Int64(1109032642, 4229340371), new Go$Int64(1462188720, 1361684224), new Go$Int64(988084219, 1906263026), new Go$Int64(475781207, 3904421704), new Go$Int64(1523946520, 1769075545), new Go$Int64(1062308525, 2621599764), new Go$Int64(1279509432, 3431891480), new Go$Int64(404732502, 1871896503), new Go$Int64(128756421, 1412808876), new Go$Int64(1605404688, 952876175), new Go$Int64(1917039957, 1824438899), new Go$Int64(1662295856, 1005035476), new Go$Int64(1990909507, 527508597), new Go$Int64(1288873303, 3066806859), new Go$Int64(565995893, 3244940914), new Go$Int64(1257737460, 209092916), new Go$Int64(1899814242, 1242699167), new Go$Int64(1433653252, 456723774), new Go$Int64(1776978905, 1001252870), new Go$Int64(1468772157, 2026725874), new Go$Int64(857254202, 2137562569), new Go$Int64(765939740, 3183366709), new Go$Int64(1533887628, 2612072960), new Go$Int64(56977098, 1727148468), new Go$Int64(949899753, 3803658212), new Go$Int64(1883670356, 479946959), new Go$Int64(685713571, 1562982345), new Go$Int64(201241205, 1766109365), new Go$Int64(700596547, 3257093788), new Go$Int64(1962768719, 2365720207), new Go$Int64(93384808, 3742754173), new Go$Int64(1689098413, 2878193673), new Go$Int64(1096135042, 2174002182), new Go$Int64(1313222695, 3573511231), new Go$Int64(1392911121, 1760299077), new Go$Int64(771856457, 2260779833), new Go$Int64(1281464374, 1452805722), new Go$Int64(917811730, 2940011802), new Go$Int64(1890251082, 1886183802), new Go$Int64(893897673, 2514369088), new Go$Int64(1644345561, 3924317791), new Go$Int64(172616216, 500935732), new Go$Int64(1403501753, 676580929), new Go$Int64(581571365, 1184984890), new Go$Int64(1455515235, 1271474274), new Go$Int64(318728910, 3163791473), new Go$Int64(2051027584, 2842487377), new Go$Int64(1511537551, 2170968612), new Go$Int64(573262976, 3535856740), new Go$Int64(94256461, 1488599718), new Go$Int64(966951817, 3408913763), new Go$Int64(60951736, 2501050084), new Go$Int64(1272353200, 1639124157), new Go$Int64(138001144, 4088176393), new Go$Int64(1574896563, 3989947576), new Go$Int64(1982239940, 3414355209), new Go$Int64(1355154361, 2275136352), new Go$Int64(89709303, 2151835223), new Go$Int64(1216338715, 1654534827), new Go$Int64(1467562197, 377892833), new Go$Int64(1664767638, 660204544), new Go$Int64(85706799, 390828249), new Go$Int64(725310955, 3402783878), new Go$Int64(678849488, 3717936603), new Go$Int64(1113532086, 2211058823), new Go$Int64(1564224320, 2692150867), new Go$Int64(1952770442, 1928910388), new Go$Int64(788716862, 3931011137), new Go$Int64(1083670504, 1112701047), new Go$Int64(2079333076, 2452299106), new Go$Int64(1251318826, 2337204777), new Go$Int64(1774877857, 273889282), new Go$Int64(1798719843, 1462008793), new Go$Int64(2138834788, 1554494002), new Go$Int64(952516517, 182675323), new Go$Int64(548928884, 1882802136), new Go$Int64(589279648, 3700220025), new Go$Int64(381039426, 3083431543), new Go$Int64(1295624457, 3622207527), new Go$Int64(338126939, 432729309), new Go$Int64(480013522, 2391914317), new Go$Int64(297925497, 235747924), new Go$Int64(2120733629, 3088823825), new Go$Int64(1402403853, 2314658321), new Go$Int64(1165929723, 2957634338), new Go$Int64(501323675, 4117056981), new Go$Int64(1564699815, 1482500298), new Go$Int64(1406657158, 840489337), new Go$Int64(799522364, 3483178565), new Go$Int64(532129761, 2074004656), new Go$Int64(724246478, 3643392642), new Go$Int64(1482330167, 1583624461), new Go$Int64(1261660694, 287473085), new Go$Int64(1667835381, 3136843981), new Go$Int64(1138806821, 1266970974), new Go$Int64(135185781, 1998688839), new Go$Int64(392094735, 1492900209), new Go$Int64(1031326774, 1538112737), new Go$Int64(76914806, 2207265429), new Go$Int64(260686035, 963263315), new Go$Int64(1671145500, 2295892134), new Go$Int64(1068469660, 2002560897), new Go$Int64(1791233343, 1369254035), new Go$Int64(33436120, 3353312708), new Go$Int64(57507843, 947771099), new Go$Int64(201728503, 1747061399), new Go$Int64(1507240140, 2047354631), new Go$Int64(720000810, 4165367136), new Go$Int64(479265078, 3388864963), new Go$Int64(1195302398, 286492130), new Go$Int64(2045622690, 2795735007), new Go$Int64(1431753082, 3703961339), new Go$Int64(1999047161, 1797825479), new Go$Int64(1429039600, 1116589674), new Go$Int64(482063550, 2593309206), new Go$Int64(1329049334, 3404995677), new Go$Int64(1396904208, 3453462936), new Go$Int64(1014767077, 3016498634), new Go$Int64(75698599, 1650371545), new Go$Int64(1592007860, 212344364), new Go$Int64(1127766888, 3843932156), new Go$Int64(1399463792, 3573129983), new Go$Int64(1256901817, 665897820), new Go$Int64(1071492673, 1675628772), new Go$Int64(243225682, 2831752928), new Go$Int64(2120298836, 1486294219), new Go$Int64(193076235, 268782709), new Go$Int64(1145360145, 4186179080), new Go$Int64(624342951, 1613720397), new Go$Int64(857179861, 2703686015), new Go$Int64(1235864944, 2205342611), new Go$Int64(1474779655, 1411666394), new Go$Int64(619028749, 677744900), new Go$Int64(270855115, 4172867247), new Go$Int64(135494707, 2163418403), new Go$Int64(849547544, 2841526879), new Go$Int64(1029966689, 1082141470), new Go$Int64(377371856, 4046134367), new Go$Int64(51415528, 2142943655), new Go$Int64(1897659315, 3124627521), new Go$Int64(998228909, 219992939), new Go$Int64(1068692697, 1756846531), new Go$Int64(1283749206, 1225118210), new Go$Int64(1621625642, 1647770243), new Go$Int64(111523943, 444807907), new Go$Int64(2036369448, 3952076173), new Go$Int64(53201823, 1461839639), new Go$Int64(315761893, 3699250910), new Go$Int64(702974850, 1373688981), new Go$Int64(734022261, 147523747), new Go$Int64(100152742, 1211276581), new Go$Int64(1294440951, 2548832680), new Go$Int64(1144696256, 1995631888), new Go$Int64(154500578, 2011457303), new Go$Int64(796460974, 3057425772), new Go$Int64(667839456, 81484597), new Go$Int64(465502760, 3646681560), new Go$Int64(775020923, 635548515), new Go$Int64(602489502, 2508044581), new Go$Int64(353263531, 1014917157), new Go$Int64(719992433, 3214891315), new Go$Int64(852684611, 959582252), new Go$Int64(226415134, 3347040449), new Go$Int64(1784615552, 4102971975), new Go$Int64(397887437, 4078022210), new Go$Int64(1610679822, 2851767182), new Go$Int64(749162636, 1540160644), new Go$Int64(598384772, 1057290595), new Go$Int64(2034890660, 3907769253), new Go$Int64(579300318, 4248952684), new Go$Int64(1092907599, 132554364), new Go$Int64(1061621234, 1029351092), new Go$Int64(697840928, 2583007416), new Go$Int64(298619124, 1486185789), new Go$Int64(55905697, 2871589073), new Go$Int64(2017643612, 723203291), new Go$Int64(146250550, 2494333952), new Go$Int64(1064490251, 2230939180), new Go$Int64(342915576, 3943232912), new Go$Int64(1768732449, 2181367922), new Go$Int64(1418222537, 2889274791), new Go$Int64(1824032949, 2046728161), new Go$Int64(1653899792, 1376052477), new Go$Int64(1022327048, 381236993), new Go$Int64(1034385958, 3188942166), new Go$Int64(2073003539, 350070824), new Go$Int64(144881592, 61758415), new Go$Int64(1405659422, 3492950336), new Go$Int64(117440928, 3093818430), new Go$Int64(1693893113, 2962480613), new Go$Int64(235432940, 3154871160), new Go$Int64(511005079, 3228564679), new Go$Int64(610731502, 888276216), new Go$Int64(1200780674, 3574998604), new Go$Int64(870415268, 1967526716), new Go$Int64(591335707, 1554691298), new Go$Int64(574459414, 339944798), new Go$Int64(1223764147, 1154515356), new Go$Int64(1825645307, 967516237), new Go$Int64(1546195135, 596588202), new Go$Int64(279882768, 3764362170), new Go$Int64(492091056, 266611402), new Go$Int64(1754227768, 2047856075), new Go$Int64(1146757215, 21444105), new Go$Int64(1198058894, 3065563181), new Go$Int64(1915064845, 1140663212), new Go$Int64(633187674, 2323741028), new Go$Int64(2126290159, 3103873707), new Go$Int64(1008658319, 2766828349), new Go$Int64(1661896145, 1970872996), new Go$Int64(1628585413, 3766615585), new Go$Int64(1552335120, 2036813414), new Go$Int64(152606527, 3105536507), new Go$Int64(13954645, 3396176938), new Go$Int64(1426081645, 1377154485), new Go$Int64(2085644467, 3807014186), new Go$Int64(543009040, 3710110597), new Go$Int64(396058129, 916420443), new Go$Int64(734556788, 2103831255), new Go$Int64(381322154, 717331943), new Go$Int64(572884752, 3550505941), new Go$Int64(45939673, 378749927), new Go$Int64(149867929, 611017331), new Go$Int64(592130075, 758907650), new Go$Int64(1012992349, 154266815), new Go$Int64(1107028706, 1407468696), new Go$Int64(469292398, 970098704), new Go$Int64(1862426162, 1971660656), new Go$Int64(998365243, 3332747885), new Go$Int64(1947089649, 1935189867), new Go$Int64(1510248801, 203520055), new Go$Int64(842317902, 3916463034), new Go$Int64(1758884993, 3474113316), new Go$Int64(1036101639, 316544223), new Go$Int64(373738757, 1650844677), new Go$Int64(1240292229, 4267565603), new Go$Int64(1077208624, 2501167616), new Go$Int64(626831785, 3929401789), new Go$Int64(56122796, 337170252), new Go$Int64(1186981558, 2061966842), new Go$Int64(1843292800, 2508461464), new Go$Int64(206012532, 2791377107), new Go$Int64(1240791848, 1227227588), new Go$Int64(1813978778, 1709681848), new Go$Int64(1153692192, 3768820575), new Go$Int64(1145186199, 2887126398), new Go$Int64(700372314, 296561685), new Go$Int64(700300844, 3729960077), new Go$Int64(575172304, 372833036), new Go$Int64(2078875613, 2409779288), new Go$Int64(1829161290, 555274064), new Go$Int64(1041887929, 4239804901), new Go$Int64(1839403216, 3723486978), new Go$Int64(498390553, 2145871984), new Go$Int64(564717933, 3565480803), new Go$Int64(578829821, 2197313814), new Go$Int64(974785092, 3613674566), new Go$Int64(438638731, 3042093666), new Go$Int64(2050927384, 3324034321), new Go$Int64(869420878, 3708873369), new Go$Int64(946682149, 1698090092), new Go$Int64(1618900382, 4213940712), new Go$Int64(304003901, 2087477361), new Go$Int64(381315848, 2407950639), new Go$Int64(851258090, 3942568569), new Go$Int64(923583198, 4088074412), new Go$Int64(723260036, 2964773675), new Go$Int64(1473561819, 1539178386), new Go$Int64(1062961552, 2694849566), new Go$Int64(460977733, 2120273838), new Go$Int64(542912908, 2484608657), new Go$Int64(880846449, 2956190677), new Go$Int64(1970902366, 4223313749), new Go$Int64(662161910, 3502682327), new Go$Int64(705634754, 4133891139), new Go$Int64(1116124348, 1166449596), new Go$Int64(1038247601, 3362705993), new Go$Int64(93734798, 3892921029), new Go$Int64(1876124043, 786869787), new Go$Int64(1057490746, 1046342263), new Go$Int64(242763728, 493777327), new Go$Int64(1293910447, 3304827646), new Go$Int64(616460742, 125356352), new Go$Int64(499300063, 74094113), new Go$Int64(1351896723, 2500816079), new Go$Int64(1657235204, 514015239), new Go$Int64(1377565129, 543520454), new Go$Int64(107706923, 3614531153), new Go$Int64(2056746300, 2356753985), new Go$Int64(1390062617, 2018141668), new Go$Int64(131272971, 2087974891), new Go$Int64(644556607, 3166972343), new Go$Int64(372256200, 1517638666), new Go$Int64(1212207984, 173466846), new Go$Int64(1451709187, 4241513471), new Go$Int64(733932806, 2783126920), new Go$Int64(1972004134, 4167264826), new Go$Int64(29260506, 3907395640), new Go$Int64(1236582087, 1539634186), new Go$Int64(1551526350, 178241987), new Go$Int64(2034206012, 182168164), new Go$Int64(1044953189, 2386154934), new Go$Int64(1379126408, 4077374341), new Go$Int64(32803926, 1732699140), new Go$Int64(1726425903, 1041306002), new Go$Int64(1860414813, 2068001749), new Go$Int64(1005320202, 3208962910), new Go$Int64(844054010, 697710380), new Go$Int64(638124245, 2228431183), new Go$Int64(1337169671, 3554678728), new Go$Int64(1396494601, 173470263), new Go$Int64(2061597383, 3848297795), new Go$Int64(1220546671, 246236185), new Go$Int64(163293187, 2066374846), new Go$Int64(1771673660, 312890749), new Go$Int64(703378057, 3573310289), new Go$Int64(1548631747, 143166754), new Go$Int64(613554316, 2081511079), new Go$Int64(1197802104, 486038032), new Go$Int64(240999859, 2982218564), new Go$Int64(364901986, 1000939191), new Go$Int64(1902782651, 2750454885), new Go$Int64(1475638791, 3375313137), new Go$Int64(503615608, 881302957), new Go$Int64(638698903, 2514186393), new Go$Int64(443860803, 360024739), new Go$Int64(1399671872, 292500025), new Go$Int64(1381210821, 2276300752), new Go$Int64(521803381, 4069087683), new Go$Int64(208500981, 1637778212), new Go$Int64(720490469, 1676670893), new Go$Int64(1067262482, 3855174429), new Go$Int64(2114075974, 2067248671), new Go$Int64(2058057389, 2884561259), new Go$Int64(1341742553, 2456511185), new Go$Int64(983726246, 561175414), new Go$Int64(427994085, 432588903), new Go$Int64(885133709, 4059399550), new Go$Int64(2054387382, 1075014784), new Go$Int64(413651020, 2728058415), new Go$Int64(1839142064, 1299703678), new Go$Int64(1262333188, 2347583393), new Go$Int64(1285481956, 2468164145), new Go$Int64(989129637, 1140014346), new Go$Int64(2033889184, 1936972070), new Go$Int64(409904655, 3870530098), new Go$Int64(1662989391, 1717789158), new Go$Int64(1914486492, 1153452491), new Go$Int64(1157059232, 3948827651), new Go$Int64(790338018, 2101413152), new Go$Int64(1495744672, 3854091229), new Go$Int64(83644069, 4215565463), new Go$Int64(762206335, 1202710438), new Go$Int64(1582574611, 2072216740), new Go$Int64(705690639, 2066751068), new Go$Int64(33900336, 173902580), new Go$Int64(1405499842, 142459001), new Go$Int64(172391592, 1889151926), new Go$Int64(1648540523, 3034199774), new Go$Int64(1618587731, 516490102), new Go$Int64(93114264, 3692577783), new Go$Int64(68662295, 2953948865), new Go$Int64(1826544975, 4041040923), new Go$Int64(204965672, 592046130), new Go$Int64(1441840008, 384297211), new Go$Int64(95834184, 265863924), new Go$Int64(2101717619, 1333136237), new Go$Int64(1499611781, 1406273556), new Go$Int64(1074670496, 426305476), new Go$Int64(125704633, 2750898176), new Go$Int64(488068495, 1633944332), new Go$Int64(2037723464, 3236349343), new Go$Int64(444060402, 4013676611), new Go$Int64(1718532237, 2265047407), new Go$Int64(1433593806, 875071080), new Go$Int64(1804436145, 1418843655), new Go$Int64(2009228711, 451657300), new Go$Int64(1229446621, 1866374663), new Go$Int64(1653472867, 1551455622), new Go$Int64(577191481, 3560962459), new Go$Int64(1669204077, 3347903778), new Go$Int64(1849156454, 2675874918), new Go$Int64(316128071, 2762991672), new Go$Int64(530492383, 3689068477), new Go$Int64(844089962, 4071997905), new Go$Int64(1508155730, 1381702441), new Go$Int64(2089931018, 2373284878), new Go$Int64(1283216186, 2143983064), new Go$Int64(308739063, 1938207195), new Go$Int64(1754949306, 1188152253), new Go$Int64(1272345009, 615870490), new Go$Int64(742653194, 2662252621), new Go$Int64(1477718295, 3839976789), new Go$Int64(56149435, 306752547), new Go$Int64(720795581, 2162363077), new Go$Int64(2090431015, 2767224719), new Go$Int64(675859549, 2628837712), new Go$Int64(1678405918, 2967771969), new Go$Int64(1694285728, 499792248), new Go$Int64(403352367, 4285253508), new Go$Int64(962357072, 2856511070), new Go$Int64(679471692, 2526409716), new Go$Int64(353777175, 1240875658), new Go$Int64(1232590226, 2577342868), new Go$Int64(1146185433, 4136853496), new Go$Int64(670368674, 2403540137), new Go$Int64(1372824515, 1371410668), new Go$Int64(1970921600, 371758825), new Go$Int64(1706420536, 1528834084), new Go$Int64(2075795018, 1504757260), new Go$Int64(685663576, 699052551), new Go$Int64(1641940109, 3347789870), new Go$Int64(1951619734, 3430604759), new Go$Int64(2119672219, 1935601723), new Go$Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.Ptr(new sync.Mutex.Ptr(), NewSource(new Go$Int64(0, 1))));
	}
	return go$pkg;
})();
go$packages["github.com/gopherjs/todomvc/utils"] = (function() {
	var go$pkg = {}, json = go$packages["encoding/json"], fmt = go$packages["fmt"], js = go$packages["github.com/gopherjs/gopherjs/js"], rand = go$packages["math/rand"], time = go$packages["time"], Router, Store, Retrieve, Pluralize, Uuid, NewRouter;
	Router = go$pkg.Router = go$newType(0, "Struct", "utils.Router", "Router", "github.com/gopherjs/todomvc/utils", function(Object_) {
		this.go$val = this;
		this.Object = Object_ !== undefined ? Object_ : null;
	});
	Store = go$pkg.Store = function(key, val) {
		var _tuple, byteArr, str;
		_tuple = json.Marshal(val); byteArr = _tuple[0];
		str = go$bytesToString(byteArr);
		go$global.localStorage.setItem(go$externalize(key, Go$String), go$externalize(str, Go$String));
	};
	Retrieve = go$pkg.Retrieve = function(key, val) {
		var item, str, v;
		item = go$global.localStorage.getItem(go$externalize(key, Go$String));
		if (item === null) {
			val = null;
			return;
		}
		str = go$internalize(item, Go$String);
		json.Unmarshal(new (go$sliceType(Go$Uint8))(go$stringToBytes(str)), new (go$ptrType(go$emptyInterface))(function() { return val; }, function(v) { val = v;; }));
	};
	Pluralize = go$pkg.Pluralize = function(count, word) {
		if (count === 1) {
			return word;
		}
		return word + "s";
	};
	Uuid = go$pkg.Uuid = function() {
		var uuid, i, x, x$1, random, _ref, _ref$1;
		uuid = "";
		i = 0;
		while (i < 32) {
			rand.Seed((x = time.Now().UnixNano(), x$1 = new Go$Int64(0, i), new Go$Int64(x.high + x$1.high, x.low + x$1.low)));
			random = rand.Intn(16);
			_ref = i;
			if (_ref === 8 || _ref === 12 || _ref === 16 || _ref === 20) {
				uuid = uuid + "-";
			}
			_ref$1 = i;
			if (_ref$1 === 12) {
				uuid = uuid + (fmt.Sprintf("%x", new (go$sliceType(go$emptyInterface))([new Go$Int(4)])));
			} else if (_ref$1 === 16) {
				uuid = uuid + (fmt.Sprintf("%x", new (go$sliceType(go$emptyInterface))([new Go$Int(((random & 3) | 8))])));
			} else {
				uuid = uuid + (fmt.Sprintf("%x", new (go$sliceType(go$emptyInterface))([new Go$Int(random)])));
			}
			i = i + 1 >> 0;
		}
		return uuid;
	};
	NewRouter = go$pkg.NewRouter = function() {
		return new Router.Ptr(new (go$global.Router)());
	};
	Router.Ptr.prototype.On = function(path, handler) {
		var _struct, r;
		r = (_struct = this, new Router.Ptr(_struct.Object));
		r.Object.on(go$externalize(path, Go$String), go$externalize(handler, (go$funcType([Go$String], [], false))));
	};
	Router.prototype.On = function(path, handler) { return this.go$val.On(path, handler); };
	Router.Ptr.prototype.Init = function(path) {
		var _struct, r;
		r = (_struct = this, new Router.Ptr(_struct.Object));
		r.Object.init(go$externalize(path, Go$String));
	};
	Router.prototype.Init = function(path) { return this.go$val.Init(path); };
	go$pkg.init = function() {
		Router.methods = [["Bool", "", [], [Go$Bool], false, 0], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["Float", "", [], [Go$Float64], false, 0], ["Get", "", [Go$String], [js.Object], false, 0], ["Index", "", [Go$Int], [js.Object], false, 0], ["Init", "", [Go$String], [], false, -1], ["Int", "", [], [Go$Int], false, 0], ["Int64", "", [], [Go$Int64], false, 0], ["Interface", "", [], [go$emptyInterface], false, 0], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["IsNull", "", [], [Go$Bool], false, 0], ["IsUndefined", "", [], [Go$Bool], false, 0], ["Length", "", [], [Go$Int], false, 0], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["On", "", [Go$String, (go$funcType([Go$String], [], false))], [], false, -1], ["Set", "", [Go$String, go$emptyInterface], [], false, 0], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false, 0], ["Str", "", [], [Go$String], false, 0], ["Uint64", "", [], [Go$Uint64], false, 0]];
		(go$ptrType(Router)).methods = [["Bool", "", [], [Go$Bool], false, 0], ["Call", "", [Go$String, (go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["Float", "", [], [Go$Float64], false, 0], ["Get", "", [Go$String], [js.Object], false, 0], ["Index", "", [Go$Int], [js.Object], false, 0], ["Init", "", [Go$String], [], false, -1], ["Int", "", [], [Go$Int], false, 0], ["Int64", "", [], [Go$Int64], false, 0], ["Interface", "", [], [go$emptyInterface], false, 0], ["Invoke", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["IsNull", "", [], [Go$Bool], false, 0], ["IsUndefined", "", [], [Go$Bool], false, 0], ["Length", "", [], [Go$Int], false, 0], ["New", "", [(go$sliceType(go$emptyInterface))], [js.Object], true, 0], ["On", "", [Go$String, (go$funcType([Go$String], [], false))], [], false, -1], ["Set", "", [Go$String, go$emptyInterface], [], false, 0], ["SetIndex", "", [Go$Int, go$emptyInterface], [], false, 0], ["Str", "", [], [Go$String], false, 0], ["Uint64", "", [], [Go$Uint64], false, 0]];
		Router.init([["Object", "", "", js.Object, ""]]);
	}
	return go$pkg;
})();
go$packages["html"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], strings = go$packages["strings"], utf8 = go$packages["unicode/utf8"], unescapeEntity, unescape, UnescapeString, entity, entity2, replacementTable;
	unescapeEntity = function(b, dst, src, attribute) {
		var dst1, src1, _tuple, i, s, _slice, _index, _slice$1, _index$1, _tuple$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4, _tuple$2, _slice$5, _index$5, c, hex, x, _slice$6, _index$6, _slice$7, _index$7, _slice$8, _index$8, _tuple$3, _tuple$4, _slice$9, _index$9, c$1, entityName, _slice$10, _index$10, _entry, x$1, _tuple$5, _entry$1, x$2, dst1$1, _tuple$6, maxLen, j, _entry$2, x$3, _tuple$7, _tuple$8, _tuple$9;
		dst1 = 0;
		src1 = 0;
		_tuple = [1, go$subslice(b, src)]; i = _tuple[0]; s = _tuple[1];
		if (s.length <= 1) {
			_slice$1 = b; _index$1 = dst;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (_slice = b, _index = src, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))) : go$throwRuntimeError("index out of range");
			_tuple$1 = [dst + 1 >> 0, src + 1 >> 0]; dst1 = _tuple$1[0]; src1 = _tuple$1[1];
			return [dst1, src1];
		}
		if ((_slice$2 = s, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 35) {
			if (s.length <= 3) {
				_slice$4 = b; _index$4 = dst;(_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = (_slice$3 = b, _index$3 = src, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"))) : go$throwRuntimeError("index out of range");
				_tuple$2 = [dst + 1 >> 0, src + 1 >> 0]; dst1 = _tuple$2[0]; src1 = _tuple$2[1];
				return [dst1, src1];
			}
			i = i + 1 >> 0;
			c = (_slice$5 = s, _index$5 = i, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
			hex = false;
			if ((c === 120) || (c === 88)) {
				hex = true;
				i = i + 1 >> 0;
			}
			x = 0;
			while (i < s.length) {
				c = (_slice$6 = s, _index$6 = i, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range"));
				i = i + 1 >> 0;
				if (hex) {
					if (48 <= c && c <= 57) {
						x = (((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 48 >> 0;
						continue;
					} else if (97 <= c && c <= 102) {
						x = ((((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 97 >> 0) + 10 >> 0;
						continue;
					} else if (65 <= c && c <= 70) {
						x = ((((((16 >>> 16 << 16) * x >> 0) + (16 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 65 >> 0) + 10 >> 0;
						continue;
					}
				} else if (48 <= c && c <= 57) {
					x = (((((10 >>> 16 << 16) * x >> 0) + (10 << 16 >>> 16) * x) >> 0) + (c >> 0) >> 0) - 48 >> 0;
					continue;
				}
				if (!((c === 59))) {
					i = i - 1 >> 0;
				}
				break;
			}
			if (i <= 3) {
				_slice$8 = b; _index$8 = dst;(_index$8 >= 0 && _index$8 < _slice$8.length) ? (_slice$8.array[_slice$8.offset + _index$8] = (_slice$7 = b, _index$7 = src, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range"))) : go$throwRuntimeError("index out of range");
				_tuple$3 = [dst + 1 >> 0, src + 1 >> 0]; dst1 = _tuple$3[0]; src1 = _tuple$3[1];
				return [dst1, src1];
			}
			if (128 <= x && x <= 159) {
				x = replacementTable[(x - 128 >> 0)];
			} else if ((x === 0) || (55296 <= x && x <= 57343) || x > 1114111) {
				x = 65533;
			}
			_tuple$4 = [dst + utf8.EncodeRune(go$subslice(b, dst), x) >> 0, src + i >> 0]; dst1 = _tuple$4[0]; src1 = _tuple$4[1];
			return [dst1, src1];
		}
		while (i < s.length) {
			c$1 = (_slice$9 = s, _index$9 = i, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"));
			i = i + 1 >> 0;
			if (97 <= c$1 && c$1 <= 122 || 65 <= c$1 && c$1 <= 90 || 48 <= c$1 && c$1 <= 57) {
				continue;
			}
			if (!((c$1 === 59))) {
				i = i - 1 >> 0;
			}
			break;
		}
		entityName = go$bytesToString(go$subslice(s, 1, i));
		if (entityName === "") {
		} else if (attribute && !((entityName.charCodeAt((entityName.length - 1 >> 0)) === 59)) && s.length > i && ((_slice$10 = s, _index$10 = i, (_index$10 >= 0 && _index$10 < _slice$10.length) ? _slice$10.array[_slice$10.offset + _index$10] : go$throwRuntimeError("index out of range")) === 61)) {
		} else {
			x$1 = (_entry = entity[entityName], _entry !== undefined ? _entry.v : 0);
			if (!((x$1 === 0))) {
				_tuple$5 = [dst + utf8.EncodeRune(go$subslice(b, dst), x$1) >> 0, src + i >> 0]; dst1 = _tuple$5[0]; src1 = _tuple$5[1];
				return [dst1, src1];
			} else {
				x$2 = go$mapArray((_entry$1 = entity2[entityName], _entry$1 !== undefined ? _entry$1.v : go$makeNativeArray("Int32", 2, function() { return 0; })), function(entry) { return entry; });
				if (!((x$2[0] === 0))) {
					dst1$1 = dst + utf8.EncodeRune(go$subslice(b, dst), x$2[0]) >> 0;
					_tuple$6 = [dst1$1 + utf8.EncodeRune(go$subslice(b, dst1$1), x$2[1]) >> 0, src + i >> 0]; dst1 = _tuple$6[0]; src1 = _tuple$6[1];
					return [dst1, src1];
				} else if (!attribute) {
					maxLen = entityName.length - 1 >> 0;
					if (maxLen > 6) {
						maxLen = 6;
					}
					j = maxLen;
					while (j > 1) {
						x$3 = (_entry$2 = entity[entityName.substring(0, j)], _entry$2 !== undefined ? _entry$2.v : 0);
						if (!((x$3 === 0))) {
							_tuple$7 = [dst + utf8.EncodeRune(go$subslice(b, dst), x$3) >> 0, (src + j >> 0) + 1 >> 0]; dst1 = _tuple$7[0]; src1 = _tuple$7[1];
							return [dst1, src1];
						}
						j = j - 1 >> 0;
					}
				}
			}
		}
		_tuple$8 = [dst + i >> 0, src + i >> 0]; dst1 = _tuple$8[0]; src1 = _tuple$8[1];
		go$copySlice(go$subslice(b, dst, dst1), go$subslice(b, src, src1));
		_tuple$9 = [dst1, src1]; dst1 = _tuple$9[0]; src1 = _tuple$9[1];
		return [dst1, src1];
	};
	unescape = function(b) {
		var _ref, _i, _slice, _index, c, i, _tuple, dst, src, _slice$1, _index$1, c$1, _tuple$1, _slice$2, _index$2, _tuple$2;
		_ref = b;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (c === 38) {
				_tuple = unescapeEntity(b, i, i, false); dst = _tuple[0]; src = _tuple[1];
				while (src < b.length) {
					c$1 = (_slice$1 = b, _index$1 = src, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					if (c$1 === 38) {
						_tuple$1 = unescapeEntity(b, dst, src, false); dst = _tuple$1[0]; src = _tuple$1[1];
					} else {
						_slice$2 = b; _index$2 = dst;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = c$1) : go$throwRuntimeError("index out of range");
						_tuple$2 = [dst + 1 >> 0, src + 1 >> 0]; dst = _tuple$2[0]; src = _tuple$2[1];
					}
				}
				return go$subslice(b, 0, dst);
			}
			_i++;
		}
		return b;
	};
	UnescapeString = go$pkg.UnescapeString = function(s) {
		var _ref, _i, _rune, c;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			c = _rune[0];
			if (c === 38) {
				return go$bytesToString(unescape(new (go$sliceType(Go$Uint8))(go$stringToBytes(s))));
			}
			_i += _rune[1];
		}
		return s;
	};
	go$pkg.init = function() {
		var _map, _key;
		entity = (_map = new Go$Map(), _key = "AElig;", _map[_key] = { k: _key, v: 198 }, _key = "AMP;", _map[_key] = { k: _key, v: 38 }, _key = "Aacute;", _map[_key] = { k: _key, v: 193 }, _key = "Abreve;", _map[_key] = { k: _key, v: 258 }, _key = "Acirc;", _map[_key] = { k: _key, v: 194 }, _key = "Acy;", _map[_key] = { k: _key, v: 1040 }, _key = "Afr;", _map[_key] = { k: _key, v: 120068 }, _key = "Agrave;", _map[_key] = { k: _key, v: 192 }, _key = "Alpha;", _map[_key] = { k: _key, v: 913 }, _key = "Amacr;", _map[_key] = { k: _key, v: 256 }, _key = "And;", _map[_key] = { k: _key, v: 10835 }, _key = "Aogon;", _map[_key] = { k: _key, v: 260 }, _key = "Aopf;", _map[_key] = { k: _key, v: 120120 }, _key = "ApplyFunction;", _map[_key] = { k: _key, v: 8289 }, _key = "Aring;", _map[_key] = { k: _key, v: 197 }, _key = "Ascr;", _map[_key] = { k: _key, v: 119964 }, _key = "Assign;", _map[_key] = { k: _key, v: 8788 }, _key = "Atilde;", _map[_key] = { k: _key, v: 195 }, _key = "Auml;", _map[_key] = { k: _key, v: 196 }, _key = "Backslash;", _map[_key] = { k: _key, v: 8726 }, _key = "Barv;", _map[_key] = { k: _key, v: 10983 }, _key = "Barwed;", _map[_key] = { k: _key, v: 8966 }, _key = "Bcy;", _map[_key] = { k: _key, v: 1041 }, _key = "Because;", _map[_key] = { k: _key, v: 8757 }, _key = "Bernoullis;", _map[_key] = { k: _key, v: 8492 }, _key = "Beta;", _map[_key] = { k: _key, v: 914 }, _key = "Bfr;", _map[_key] = { k: _key, v: 120069 }, _key = "Bopf;", _map[_key] = { k: _key, v: 120121 }, _key = "Breve;", _map[_key] = { k: _key, v: 728 }, _key = "Bscr;", _map[_key] = { k: _key, v: 8492 }, _key = "Bumpeq;", _map[_key] = { k: _key, v: 8782 }, _key = "CHcy;", _map[_key] = { k: _key, v: 1063 }, _key = "COPY;", _map[_key] = { k: _key, v: 169 }, _key = "Cacute;", _map[_key] = { k: _key, v: 262 }, _key = "Cap;", _map[_key] = { k: _key, v: 8914 }, _key = "CapitalDifferentialD;", _map[_key] = { k: _key, v: 8517 }, _key = "Cayleys;", _map[_key] = { k: _key, v: 8493 }, _key = "Ccaron;", _map[_key] = { k: _key, v: 268 }, _key = "Ccedil;", _map[_key] = { k: _key, v: 199 }, _key = "Ccirc;", _map[_key] = { k: _key, v: 264 }, _key = "Cconint;", _map[_key] = { k: _key, v: 8752 }, _key = "Cdot;", _map[_key] = { k: _key, v: 266 }, _key = "Cedilla;", _map[_key] = { k: _key, v: 184 }, _key = "CenterDot;", _map[_key] = { k: _key, v: 183 }, _key = "Cfr;", _map[_key] = { k: _key, v: 8493 }, _key = "Chi;", _map[_key] = { k: _key, v: 935 }, _key = "CircleDot;", _map[_key] = { k: _key, v: 8857 }, _key = "CircleMinus;", _map[_key] = { k: _key, v: 8854 }, _key = "CirclePlus;", _map[_key] = { k: _key, v: 8853 }, _key = "CircleTimes;", _map[_key] = { k: _key, v: 8855 }, _key = "ClockwiseContourIntegral;", _map[_key] = { k: _key, v: 8754 }, _key = "CloseCurlyDoubleQuote;", _map[_key] = { k: _key, v: 8221 }, _key = "CloseCurlyQuote;", _map[_key] = { k: _key, v: 8217 }, _key = "Colon;", _map[_key] = { k: _key, v: 8759 }, _key = "Colone;", _map[_key] = { k: _key, v: 10868 }, _key = "Congruent;", _map[_key] = { k: _key, v: 8801 }, _key = "Conint;", _map[_key] = { k: _key, v: 8751 }, _key = "ContourIntegral;", _map[_key] = { k: _key, v: 8750 }, _key = "Copf;", _map[_key] = { k: _key, v: 8450 }, _key = "Coproduct;", _map[_key] = { k: _key, v: 8720 }, _key = "CounterClockwiseContourIntegral;", _map[_key] = { k: _key, v: 8755 }, _key = "Cross;", _map[_key] = { k: _key, v: 10799 }, _key = "Cscr;", _map[_key] = { k: _key, v: 119966 }, _key = "Cup;", _map[_key] = { k: _key, v: 8915 }, _key = "CupCap;", _map[_key] = { k: _key, v: 8781 }, _key = "DD;", _map[_key] = { k: _key, v: 8517 }, _key = "DDotrahd;", _map[_key] = { k: _key, v: 10513 }, _key = "DJcy;", _map[_key] = { k: _key, v: 1026 }, _key = "DScy;", _map[_key] = { k: _key, v: 1029 }, _key = "DZcy;", _map[_key] = { k: _key, v: 1039 }, _key = "Dagger;", _map[_key] = { k: _key, v: 8225 }, _key = "Darr;", _map[_key] = { k: _key, v: 8609 }, _key = "Dashv;", _map[_key] = { k: _key, v: 10980 }, _key = "Dcaron;", _map[_key] = { k: _key, v: 270 }, _key = "Dcy;", _map[_key] = { k: _key, v: 1044 }, _key = "Del;", _map[_key] = { k: _key, v: 8711 }, _key = "Delta;", _map[_key] = { k: _key, v: 916 }, _key = "Dfr;", _map[_key] = { k: _key, v: 120071 }, _key = "DiacriticalAcute;", _map[_key] = { k: _key, v: 180 }, _key = "DiacriticalDot;", _map[_key] = { k: _key, v: 729 }, _key = "DiacriticalDoubleAcute;", _map[_key] = { k: _key, v: 733 }, _key = "DiacriticalGrave;", _map[_key] = { k: _key, v: 96 }, _key = "DiacriticalTilde;", _map[_key] = { k: _key, v: 732 }, _key = "Diamond;", _map[_key] = { k: _key, v: 8900 }, _key = "DifferentialD;", _map[_key] = { k: _key, v: 8518 }, _key = "Dopf;", _map[_key] = { k: _key, v: 120123 }, _key = "Dot;", _map[_key] = { k: _key, v: 168 }, _key = "DotDot;", _map[_key] = { k: _key, v: 8412 }, _key = "DotEqual;", _map[_key] = { k: _key, v: 8784 }, _key = "DoubleContourIntegral;", _map[_key] = { k: _key, v: 8751 }, _key = "DoubleDot;", _map[_key] = { k: _key, v: 168 }, _key = "DoubleDownArrow;", _map[_key] = { k: _key, v: 8659 }, _key = "DoubleLeftArrow;", _map[_key] = { k: _key, v: 8656 }, _key = "DoubleLeftRightArrow;", _map[_key] = { k: _key, v: 8660 }, _key = "DoubleLeftTee;", _map[_key] = { k: _key, v: 10980 }, _key = "DoubleLongLeftArrow;", _map[_key] = { k: _key, v: 10232 }, _key = "DoubleLongLeftRightArrow;", _map[_key] = { k: _key, v: 10234 }, _key = "DoubleLongRightArrow;", _map[_key] = { k: _key, v: 10233 }, _key = "DoubleRightArrow;", _map[_key] = { k: _key, v: 8658 }, _key = "DoubleRightTee;", _map[_key] = { k: _key, v: 8872 }, _key = "DoubleUpArrow;", _map[_key] = { k: _key, v: 8657 }, _key = "DoubleUpDownArrow;", _map[_key] = { k: _key, v: 8661 }, _key = "DoubleVerticalBar;", _map[_key] = { k: _key, v: 8741 }, _key = "DownArrow;", _map[_key] = { k: _key, v: 8595 }, _key = "DownArrowBar;", _map[_key] = { k: _key, v: 10515 }, _key = "DownArrowUpArrow;", _map[_key] = { k: _key, v: 8693 }, _key = "DownBreve;", _map[_key] = { k: _key, v: 785 }, _key = "DownLeftRightVector;", _map[_key] = { k: _key, v: 10576 }, _key = "DownLeftTeeVector;", _map[_key] = { k: _key, v: 10590 }, _key = "DownLeftVector;", _map[_key] = { k: _key, v: 8637 }, _key = "DownLeftVectorBar;", _map[_key] = { k: _key, v: 10582 }, _key = "DownRightTeeVector;", _map[_key] = { k: _key, v: 10591 }, _key = "DownRightVector;", _map[_key] = { k: _key, v: 8641 }, _key = "DownRightVectorBar;", _map[_key] = { k: _key, v: 10583 }, _key = "DownTee;", _map[_key] = { k: _key, v: 8868 }, _key = "DownTeeArrow;", _map[_key] = { k: _key, v: 8615 }, _key = "Downarrow;", _map[_key] = { k: _key, v: 8659 }, _key = "Dscr;", _map[_key] = { k: _key, v: 119967 }, _key = "Dstrok;", _map[_key] = { k: _key, v: 272 }, _key = "ENG;", _map[_key] = { k: _key, v: 330 }, _key = "ETH;", _map[_key] = { k: _key, v: 208 }, _key = "Eacute;", _map[_key] = { k: _key, v: 201 }, _key = "Ecaron;", _map[_key] = { k: _key, v: 282 }, _key = "Ecirc;", _map[_key] = { k: _key, v: 202 }, _key = "Ecy;", _map[_key] = { k: _key, v: 1069 }, _key = "Edot;", _map[_key] = { k: _key, v: 278 }, _key = "Efr;", _map[_key] = { k: _key, v: 120072 }, _key = "Egrave;", _map[_key] = { k: _key, v: 200 }, _key = "Element;", _map[_key] = { k: _key, v: 8712 }, _key = "Emacr;", _map[_key] = { k: _key, v: 274 }, _key = "EmptySmallSquare;", _map[_key] = { k: _key, v: 9723 }, _key = "EmptyVerySmallSquare;", _map[_key] = { k: _key, v: 9643 }, _key = "Eogon;", _map[_key] = { k: _key, v: 280 }, _key = "Eopf;", _map[_key] = { k: _key, v: 120124 }, _key = "Epsilon;", _map[_key] = { k: _key, v: 917 }, _key = "Equal;", _map[_key] = { k: _key, v: 10869 }, _key = "EqualTilde;", _map[_key] = { k: _key, v: 8770 }, _key = "Equilibrium;", _map[_key] = { k: _key, v: 8652 }, _key = "Escr;", _map[_key] = { k: _key, v: 8496 }, _key = "Esim;", _map[_key] = { k: _key, v: 10867 }, _key = "Eta;", _map[_key] = { k: _key, v: 919 }, _key = "Euml;", _map[_key] = { k: _key, v: 203 }, _key = "Exists;", _map[_key] = { k: _key, v: 8707 }, _key = "ExponentialE;", _map[_key] = { k: _key, v: 8519 }, _key = "Fcy;", _map[_key] = { k: _key, v: 1060 }, _key = "Ffr;", _map[_key] = { k: _key, v: 120073 }, _key = "FilledSmallSquare;", _map[_key] = { k: _key, v: 9724 }, _key = "FilledVerySmallSquare;", _map[_key] = { k: _key, v: 9642 }, _key = "Fopf;", _map[_key] = { k: _key, v: 120125 }, _key = "ForAll;", _map[_key] = { k: _key, v: 8704 }, _key = "Fouriertrf;", _map[_key] = { k: _key, v: 8497 }, _key = "Fscr;", _map[_key] = { k: _key, v: 8497 }, _key = "GJcy;", _map[_key] = { k: _key, v: 1027 }, _key = "GT;", _map[_key] = { k: _key, v: 62 }, _key = "Gamma;", _map[_key] = { k: _key, v: 915 }, _key = "Gammad;", _map[_key] = { k: _key, v: 988 }, _key = "Gbreve;", _map[_key] = { k: _key, v: 286 }, _key = "Gcedil;", _map[_key] = { k: _key, v: 290 }, _key = "Gcirc;", _map[_key] = { k: _key, v: 284 }, _key = "Gcy;", _map[_key] = { k: _key, v: 1043 }, _key = "Gdot;", _map[_key] = { k: _key, v: 288 }, _key = "Gfr;", _map[_key] = { k: _key, v: 120074 }, _key = "Gg;", _map[_key] = { k: _key, v: 8921 }, _key = "Gopf;", _map[_key] = { k: _key, v: 120126 }, _key = "GreaterEqual;", _map[_key] = { k: _key, v: 8805 }, _key = "GreaterEqualLess;", _map[_key] = { k: _key, v: 8923 }, _key = "GreaterFullEqual;", _map[_key] = { k: _key, v: 8807 }, _key = "GreaterGreater;", _map[_key] = { k: _key, v: 10914 }, _key = "GreaterLess;", _map[_key] = { k: _key, v: 8823 }, _key = "GreaterSlantEqual;", _map[_key] = { k: _key, v: 10878 }, _key = "GreaterTilde;", _map[_key] = { k: _key, v: 8819 }, _key = "Gscr;", _map[_key] = { k: _key, v: 119970 }, _key = "Gt;", _map[_key] = { k: _key, v: 8811 }, _key = "HARDcy;", _map[_key] = { k: _key, v: 1066 }, _key = "Hacek;", _map[_key] = { k: _key, v: 711 }, _key = "Hat;", _map[_key] = { k: _key, v: 94 }, _key = "Hcirc;", _map[_key] = { k: _key, v: 292 }, _key = "Hfr;", _map[_key] = { k: _key, v: 8460 }, _key = "HilbertSpace;", _map[_key] = { k: _key, v: 8459 }, _key = "Hopf;", _map[_key] = { k: _key, v: 8461 }, _key = "HorizontalLine;", _map[_key] = { k: _key, v: 9472 }, _key = "Hscr;", _map[_key] = { k: _key, v: 8459 }, _key = "Hstrok;", _map[_key] = { k: _key, v: 294 }, _key = "HumpDownHump;", _map[_key] = { k: _key, v: 8782 }, _key = "HumpEqual;", _map[_key] = { k: _key, v: 8783 }, _key = "IEcy;", _map[_key] = { k: _key, v: 1045 }, _key = "IJlig;", _map[_key] = { k: _key, v: 306 }, _key = "IOcy;", _map[_key] = { k: _key, v: 1025 }, _key = "Iacute;", _map[_key] = { k: _key, v: 205 }, _key = "Icirc;", _map[_key] = { k: _key, v: 206 }, _key = "Icy;", _map[_key] = { k: _key, v: 1048 }, _key = "Idot;", _map[_key] = { k: _key, v: 304 }, _key = "Ifr;", _map[_key] = { k: _key, v: 8465 }, _key = "Igrave;", _map[_key] = { k: _key, v: 204 }, _key = "Im;", _map[_key] = { k: _key, v: 8465 }, _key = "Imacr;", _map[_key] = { k: _key, v: 298 }, _key = "ImaginaryI;", _map[_key] = { k: _key, v: 8520 }, _key = "Implies;", _map[_key] = { k: _key, v: 8658 }, _key = "Int;", _map[_key] = { k: _key, v: 8748 }, _key = "Integral;", _map[_key] = { k: _key, v: 8747 }, _key = "Intersection;", _map[_key] = { k: _key, v: 8898 }, _key = "InvisibleComma;", _map[_key] = { k: _key, v: 8291 }, _key = "InvisibleTimes;", _map[_key] = { k: _key, v: 8290 }, _key = "Iogon;", _map[_key] = { k: _key, v: 302 }, _key = "Iopf;", _map[_key] = { k: _key, v: 120128 }, _key = "Iota;", _map[_key] = { k: _key, v: 921 }, _key = "Iscr;", _map[_key] = { k: _key, v: 8464 }, _key = "Itilde;", _map[_key] = { k: _key, v: 296 }, _key = "Iukcy;", _map[_key] = { k: _key, v: 1030 }, _key = "Iuml;", _map[_key] = { k: _key, v: 207 }, _key = "Jcirc;", _map[_key] = { k: _key, v: 308 }, _key = "Jcy;", _map[_key] = { k: _key, v: 1049 }, _key = "Jfr;", _map[_key] = { k: _key, v: 120077 }, _key = "Jopf;", _map[_key] = { k: _key, v: 120129 }, _key = "Jscr;", _map[_key] = { k: _key, v: 119973 }, _key = "Jsercy;", _map[_key] = { k: _key, v: 1032 }, _key = "Jukcy;", _map[_key] = { k: _key, v: 1028 }, _key = "KHcy;", _map[_key] = { k: _key, v: 1061 }, _key = "KJcy;", _map[_key] = { k: _key, v: 1036 }, _key = "Kappa;", _map[_key] = { k: _key, v: 922 }, _key = "Kcedil;", _map[_key] = { k: _key, v: 310 }, _key = "Kcy;", _map[_key] = { k: _key, v: 1050 }, _key = "Kfr;", _map[_key] = { k: _key, v: 120078 }, _key = "Kopf;", _map[_key] = { k: _key, v: 120130 }, _key = "Kscr;", _map[_key] = { k: _key, v: 119974 }, _key = "LJcy;", _map[_key] = { k: _key, v: 1033 }, _key = "LT;", _map[_key] = { k: _key, v: 60 }, _key = "Lacute;", _map[_key] = { k: _key, v: 313 }, _key = "Lambda;", _map[_key] = { k: _key, v: 923 }, _key = "Lang;", _map[_key] = { k: _key, v: 10218 }, _key = "Laplacetrf;", _map[_key] = { k: _key, v: 8466 }, _key = "Larr;", _map[_key] = { k: _key, v: 8606 }, _key = "Lcaron;", _map[_key] = { k: _key, v: 317 }, _key = "Lcedil;", _map[_key] = { k: _key, v: 315 }, _key = "Lcy;", _map[_key] = { k: _key, v: 1051 }, _key = "LeftAngleBracket;", _map[_key] = { k: _key, v: 10216 }, _key = "LeftArrow;", _map[_key] = { k: _key, v: 8592 }, _key = "LeftArrowBar;", _map[_key] = { k: _key, v: 8676 }, _key = "LeftArrowRightArrow;", _map[_key] = { k: _key, v: 8646 }, _key = "LeftCeiling;", _map[_key] = { k: _key, v: 8968 }, _key = "LeftDoubleBracket;", _map[_key] = { k: _key, v: 10214 }, _key = "LeftDownTeeVector;", _map[_key] = { k: _key, v: 10593 }, _key = "LeftDownVector;", _map[_key] = { k: _key, v: 8643 }, _key = "LeftDownVectorBar;", _map[_key] = { k: _key, v: 10585 }, _key = "LeftFloor;", _map[_key] = { k: _key, v: 8970 }, _key = "LeftRightArrow;", _map[_key] = { k: _key, v: 8596 }, _key = "LeftRightVector;", _map[_key] = { k: _key, v: 10574 }, _key = "LeftTee;", _map[_key] = { k: _key, v: 8867 }, _key = "LeftTeeArrow;", _map[_key] = { k: _key, v: 8612 }, _key = "LeftTeeVector;", _map[_key] = { k: _key, v: 10586 }, _key = "LeftTriangle;", _map[_key] = { k: _key, v: 8882 }, _key = "LeftTriangleBar;", _map[_key] = { k: _key, v: 10703 }, _key = "LeftTriangleEqual;", _map[_key] = { k: _key, v: 8884 }, _key = "LeftUpDownVector;", _map[_key] = { k: _key, v: 10577 }, _key = "LeftUpTeeVector;", _map[_key] = { k: _key, v: 10592 }, _key = "LeftUpVector;", _map[_key] = { k: _key, v: 8639 }, _key = "LeftUpVectorBar;", _map[_key] = { k: _key, v: 10584 }, _key = "LeftVector;", _map[_key] = { k: _key, v: 8636 }, _key = "LeftVectorBar;", _map[_key] = { k: _key, v: 10578 }, _key = "Leftarrow;", _map[_key] = { k: _key, v: 8656 }, _key = "Leftrightarrow;", _map[_key] = { k: _key, v: 8660 }, _key = "LessEqualGreater;", _map[_key] = { k: _key, v: 8922 }, _key = "LessFullEqual;", _map[_key] = { k: _key, v: 8806 }, _key = "LessGreater;", _map[_key] = { k: _key, v: 8822 }, _key = "LessLess;", _map[_key] = { k: _key, v: 10913 }, _key = "LessSlantEqual;", _map[_key] = { k: _key, v: 10877 }, _key = "LessTilde;", _map[_key] = { k: _key, v: 8818 }, _key = "Lfr;", _map[_key] = { k: _key, v: 120079 }, _key = "Ll;", _map[_key] = { k: _key, v: 8920 }, _key = "Lleftarrow;", _map[_key] = { k: _key, v: 8666 }, _key = "Lmidot;", _map[_key] = { k: _key, v: 319 }, _key = "LongLeftArrow;", _map[_key] = { k: _key, v: 10229 }, _key = "LongLeftRightArrow;", _map[_key] = { k: _key, v: 10231 }, _key = "LongRightArrow;", _map[_key] = { k: _key, v: 10230 }, _key = "Longleftarrow;", _map[_key] = { k: _key, v: 10232 }, _key = "Longleftrightarrow;", _map[_key] = { k: _key, v: 10234 }, _key = "Longrightarrow;", _map[_key] = { k: _key, v: 10233 }, _key = "Lopf;", _map[_key] = { k: _key, v: 120131 }, _key = "LowerLeftArrow;", _map[_key] = { k: _key, v: 8601 }, _key = "LowerRightArrow;", _map[_key] = { k: _key, v: 8600 }, _key = "Lscr;", _map[_key] = { k: _key, v: 8466 }, _key = "Lsh;", _map[_key] = { k: _key, v: 8624 }, _key = "Lstrok;", _map[_key] = { k: _key, v: 321 }, _key = "Lt;", _map[_key] = { k: _key, v: 8810 }, _key = "Map;", _map[_key] = { k: _key, v: 10501 }, _key = "Mcy;", _map[_key] = { k: _key, v: 1052 }, _key = "MediumSpace;", _map[_key] = { k: _key, v: 8287 }, _key = "Mellintrf;", _map[_key] = { k: _key, v: 8499 }, _key = "Mfr;", _map[_key] = { k: _key, v: 120080 }, _key = "MinusPlus;", _map[_key] = { k: _key, v: 8723 }, _key = "Mopf;", _map[_key] = { k: _key, v: 120132 }, _key = "Mscr;", _map[_key] = { k: _key, v: 8499 }, _key = "Mu;", _map[_key] = { k: _key, v: 924 }, _key = "NJcy;", _map[_key] = { k: _key, v: 1034 }, _key = "Nacute;", _map[_key] = { k: _key, v: 323 }, _key = "Ncaron;", _map[_key] = { k: _key, v: 327 }, _key = "Ncedil;", _map[_key] = { k: _key, v: 325 }, _key = "Ncy;", _map[_key] = { k: _key, v: 1053 }, _key = "NegativeMediumSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NegativeThickSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NegativeThinSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NegativeVeryThinSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "NestedGreaterGreater;", _map[_key] = { k: _key, v: 8811 }, _key = "NestedLessLess;", _map[_key] = { k: _key, v: 8810 }, _key = "NewLine;", _map[_key] = { k: _key, v: 10 }, _key = "Nfr;", _map[_key] = { k: _key, v: 120081 }, _key = "NoBreak;", _map[_key] = { k: _key, v: 8288 }, _key = "NonBreakingSpace;", _map[_key] = { k: _key, v: 160 }, _key = "Nopf;", _map[_key] = { k: _key, v: 8469 }, _key = "Not;", _map[_key] = { k: _key, v: 10988 }, _key = "NotCongruent;", _map[_key] = { k: _key, v: 8802 }, _key = "NotCupCap;", _map[_key] = { k: _key, v: 8813 }, _key = "NotDoubleVerticalBar;", _map[_key] = { k: _key, v: 8742 }, _key = "NotElement;", _map[_key] = { k: _key, v: 8713 }, _key = "NotEqual;", _map[_key] = { k: _key, v: 8800 }, _key = "NotExists;", _map[_key] = { k: _key, v: 8708 }, _key = "NotGreater;", _map[_key] = { k: _key, v: 8815 }, _key = "NotGreaterEqual;", _map[_key] = { k: _key, v: 8817 }, _key = "NotGreaterLess;", _map[_key] = { k: _key, v: 8825 }, _key = "NotGreaterTilde;", _map[_key] = { k: _key, v: 8821 }, _key = "NotLeftTriangle;", _map[_key] = { k: _key, v: 8938 }, _key = "NotLeftTriangleEqual;", _map[_key] = { k: _key, v: 8940 }, _key = "NotLess;", _map[_key] = { k: _key, v: 8814 }, _key = "NotLessEqual;", _map[_key] = { k: _key, v: 8816 }, _key = "NotLessGreater;", _map[_key] = { k: _key, v: 8824 }, _key = "NotLessTilde;", _map[_key] = { k: _key, v: 8820 }, _key = "NotPrecedes;", _map[_key] = { k: _key, v: 8832 }, _key = "NotPrecedesSlantEqual;", _map[_key] = { k: _key, v: 8928 }, _key = "NotReverseElement;", _map[_key] = { k: _key, v: 8716 }, _key = "NotRightTriangle;", _map[_key] = { k: _key, v: 8939 }, _key = "NotRightTriangleEqual;", _map[_key] = { k: _key, v: 8941 }, _key = "NotSquareSubsetEqual;", _map[_key] = { k: _key, v: 8930 }, _key = "NotSquareSupersetEqual;", _map[_key] = { k: _key, v: 8931 }, _key = "NotSubsetEqual;", _map[_key] = { k: _key, v: 8840 }, _key = "NotSucceeds;", _map[_key] = { k: _key, v: 8833 }, _key = "NotSucceedsSlantEqual;", _map[_key] = { k: _key, v: 8929 }, _key = "NotSupersetEqual;", _map[_key] = { k: _key, v: 8841 }, _key = "NotTilde;", _map[_key] = { k: _key, v: 8769 }, _key = "NotTildeEqual;", _map[_key] = { k: _key, v: 8772 }, _key = "NotTildeFullEqual;", _map[_key] = { k: _key, v: 8775 }, _key = "NotTildeTilde;", _map[_key] = { k: _key, v: 8777 }, _key = "NotVerticalBar;", _map[_key] = { k: _key, v: 8740 }, _key = "Nscr;", _map[_key] = { k: _key, v: 119977 }, _key = "Ntilde;", _map[_key] = { k: _key, v: 209 }, _key = "Nu;", _map[_key] = { k: _key, v: 925 }, _key = "OElig;", _map[_key] = { k: _key, v: 338 }, _key = "Oacute;", _map[_key] = { k: _key, v: 211 }, _key = "Ocirc;", _map[_key] = { k: _key, v: 212 }, _key = "Ocy;", _map[_key] = { k: _key, v: 1054 }, _key = "Odblac;", _map[_key] = { k: _key, v: 336 }, _key = "Ofr;", _map[_key] = { k: _key, v: 120082 }, _key = "Ograve;", _map[_key] = { k: _key, v: 210 }, _key = "Omacr;", _map[_key] = { k: _key, v: 332 }, _key = "Omega;", _map[_key] = { k: _key, v: 937 }, _key = "Omicron;", _map[_key] = { k: _key, v: 927 }, _key = "Oopf;", _map[_key] = { k: _key, v: 120134 }, _key = "OpenCurlyDoubleQuote;", _map[_key] = { k: _key, v: 8220 }, _key = "OpenCurlyQuote;", _map[_key] = { k: _key, v: 8216 }, _key = "Or;", _map[_key] = { k: _key, v: 10836 }, _key = "Oscr;", _map[_key] = { k: _key, v: 119978 }, _key = "Oslash;", _map[_key] = { k: _key, v: 216 }, _key = "Otilde;", _map[_key] = { k: _key, v: 213 }, _key = "Otimes;", _map[_key] = { k: _key, v: 10807 }, _key = "Ouml;", _map[_key] = { k: _key, v: 214 }, _key = "OverBar;", _map[_key] = { k: _key, v: 8254 }, _key = "OverBrace;", _map[_key] = { k: _key, v: 9182 }, _key = "OverBracket;", _map[_key] = { k: _key, v: 9140 }, _key = "OverParenthesis;", _map[_key] = { k: _key, v: 9180 }, _key = "PartialD;", _map[_key] = { k: _key, v: 8706 }, _key = "Pcy;", _map[_key] = { k: _key, v: 1055 }, _key = "Pfr;", _map[_key] = { k: _key, v: 120083 }, _key = "Phi;", _map[_key] = { k: _key, v: 934 }, _key = "Pi;", _map[_key] = { k: _key, v: 928 }, _key = "PlusMinus;", _map[_key] = { k: _key, v: 177 }, _key = "Poincareplane;", _map[_key] = { k: _key, v: 8460 }, _key = "Popf;", _map[_key] = { k: _key, v: 8473 }, _key = "Pr;", _map[_key] = { k: _key, v: 10939 }, _key = "Precedes;", _map[_key] = { k: _key, v: 8826 }, _key = "PrecedesEqual;", _map[_key] = { k: _key, v: 10927 }, _key = "PrecedesSlantEqual;", _map[_key] = { k: _key, v: 8828 }, _key = "PrecedesTilde;", _map[_key] = { k: _key, v: 8830 }, _key = "Prime;", _map[_key] = { k: _key, v: 8243 }, _key = "Product;", _map[_key] = { k: _key, v: 8719 }, _key = "Proportion;", _map[_key] = { k: _key, v: 8759 }, _key = "Proportional;", _map[_key] = { k: _key, v: 8733 }, _key = "Pscr;", _map[_key] = { k: _key, v: 119979 }, _key = "Psi;", _map[_key] = { k: _key, v: 936 }, _key = "QUOT;", _map[_key] = { k: _key, v: 34 }, _key = "Qfr;", _map[_key] = { k: _key, v: 120084 }, _key = "Qopf;", _map[_key] = { k: _key, v: 8474 }, _key = "Qscr;", _map[_key] = { k: _key, v: 119980 }, _key = "RBarr;", _map[_key] = { k: _key, v: 10512 }, _key = "REG;", _map[_key] = { k: _key, v: 174 }, _key = "Racute;", _map[_key] = { k: _key, v: 340 }, _key = "Rang;", _map[_key] = { k: _key, v: 10219 }, _key = "Rarr;", _map[_key] = { k: _key, v: 8608 }, _key = "Rarrtl;", _map[_key] = { k: _key, v: 10518 }, _key = "Rcaron;", _map[_key] = { k: _key, v: 344 }, _key = "Rcedil;", _map[_key] = { k: _key, v: 342 }, _key = "Rcy;", _map[_key] = { k: _key, v: 1056 }, _key = "Re;", _map[_key] = { k: _key, v: 8476 }, _key = "ReverseElement;", _map[_key] = { k: _key, v: 8715 }, _key = "ReverseEquilibrium;", _map[_key] = { k: _key, v: 8651 }, _key = "ReverseUpEquilibrium;", _map[_key] = { k: _key, v: 10607 }, _key = "Rfr;", _map[_key] = { k: _key, v: 8476 }, _key = "Rho;", _map[_key] = { k: _key, v: 929 }, _key = "RightAngleBracket;", _map[_key] = { k: _key, v: 10217 }, _key = "RightArrow;", _map[_key] = { k: _key, v: 8594 }, _key = "RightArrowBar;", _map[_key] = { k: _key, v: 8677 }, _key = "RightArrowLeftArrow;", _map[_key] = { k: _key, v: 8644 }, _key = "RightCeiling;", _map[_key] = { k: _key, v: 8969 }, _key = "RightDoubleBracket;", _map[_key] = { k: _key, v: 10215 }, _key = "RightDownTeeVector;", _map[_key] = { k: _key, v: 10589 }, _key = "RightDownVector;", _map[_key] = { k: _key, v: 8642 }, _key = "RightDownVectorBar;", _map[_key] = { k: _key, v: 10581 }, _key = "RightFloor;", _map[_key] = { k: _key, v: 8971 }, _key = "RightTee;", _map[_key] = { k: _key, v: 8866 }, _key = "RightTeeArrow;", _map[_key] = { k: _key, v: 8614 }, _key = "RightTeeVector;", _map[_key] = { k: _key, v: 10587 }, _key = "RightTriangle;", _map[_key] = { k: _key, v: 8883 }, _key = "RightTriangleBar;", _map[_key] = { k: _key, v: 10704 }, _key = "RightTriangleEqual;", _map[_key] = { k: _key, v: 8885 }, _key = "RightUpDownVector;", _map[_key] = { k: _key, v: 10575 }, _key = "RightUpTeeVector;", _map[_key] = { k: _key, v: 10588 }, _key = "RightUpVector;", _map[_key] = { k: _key, v: 8638 }, _key = "RightUpVectorBar;", _map[_key] = { k: _key, v: 10580 }, _key = "RightVector;", _map[_key] = { k: _key, v: 8640 }, _key = "RightVectorBar;", _map[_key] = { k: _key, v: 10579 }, _key = "Rightarrow;", _map[_key] = { k: _key, v: 8658 }, _key = "Ropf;", _map[_key] = { k: _key, v: 8477 }, _key = "RoundImplies;", _map[_key] = { k: _key, v: 10608 }, _key = "Rrightarrow;", _map[_key] = { k: _key, v: 8667 }, _key = "Rscr;", _map[_key] = { k: _key, v: 8475 }, _key = "Rsh;", _map[_key] = { k: _key, v: 8625 }, _key = "RuleDelayed;", _map[_key] = { k: _key, v: 10740 }, _key = "SHCHcy;", _map[_key] = { k: _key, v: 1065 }, _key = "SHcy;", _map[_key] = { k: _key, v: 1064 }, _key = "SOFTcy;", _map[_key] = { k: _key, v: 1068 }, _key = "Sacute;", _map[_key] = { k: _key, v: 346 }, _key = "Sc;", _map[_key] = { k: _key, v: 10940 }, _key = "Scaron;", _map[_key] = { k: _key, v: 352 }, _key = "Scedil;", _map[_key] = { k: _key, v: 350 }, _key = "Scirc;", _map[_key] = { k: _key, v: 348 }, _key = "Scy;", _map[_key] = { k: _key, v: 1057 }, _key = "Sfr;", _map[_key] = { k: _key, v: 120086 }, _key = "ShortDownArrow;", _map[_key] = { k: _key, v: 8595 }, _key = "ShortLeftArrow;", _map[_key] = { k: _key, v: 8592 }, _key = "ShortRightArrow;", _map[_key] = { k: _key, v: 8594 }, _key = "ShortUpArrow;", _map[_key] = { k: _key, v: 8593 }, _key = "Sigma;", _map[_key] = { k: _key, v: 931 }, _key = "SmallCircle;", _map[_key] = { k: _key, v: 8728 }, _key = "Sopf;", _map[_key] = { k: _key, v: 120138 }, _key = "Sqrt;", _map[_key] = { k: _key, v: 8730 }, _key = "Square;", _map[_key] = { k: _key, v: 9633 }, _key = "SquareIntersection;", _map[_key] = { k: _key, v: 8851 }, _key = "SquareSubset;", _map[_key] = { k: _key, v: 8847 }, _key = "SquareSubsetEqual;", _map[_key] = { k: _key, v: 8849 }, _key = "SquareSuperset;", _map[_key] = { k: _key, v: 8848 }, _key = "SquareSupersetEqual;", _map[_key] = { k: _key, v: 8850 }, _key = "SquareUnion;", _map[_key] = { k: _key, v: 8852 }, _key = "Sscr;", _map[_key] = { k: _key, v: 119982 }, _key = "Star;", _map[_key] = { k: _key, v: 8902 }, _key = "Sub;", _map[_key] = { k: _key, v: 8912 }, _key = "Subset;", _map[_key] = { k: _key, v: 8912 }, _key = "SubsetEqual;", _map[_key] = { k: _key, v: 8838 }, _key = "Succeeds;", _map[_key] = { k: _key, v: 8827 }, _key = "SucceedsEqual;", _map[_key] = { k: _key, v: 10928 }, _key = "SucceedsSlantEqual;", _map[_key] = { k: _key, v: 8829 }, _key = "SucceedsTilde;", _map[_key] = { k: _key, v: 8831 }, _key = "SuchThat;", _map[_key] = { k: _key, v: 8715 }, _key = "Sum;", _map[_key] = { k: _key, v: 8721 }, _key = "Sup;", _map[_key] = { k: _key, v: 8913 }, _key = "Superset;", _map[_key] = { k: _key, v: 8835 }, _key = "SupersetEqual;", _map[_key] = { k: _key, v: 8839 }, _key = "Supset;", _map[_key] = { k: _key, v: 8913 }, _key = "THORN;", _map[_key] = { k: _key, v: 222 }, _key = "TRADE;", _map[_key] = { k: _key, v: 8482 }, _key = "TSHcy;", _map[_key] = { k: _key, v: 1035 }, _key = "TScy;", _map[_key] = { k: _key, v: 1062 }, _key = "Tab;", _map[_key] = { k: _key, v: 9 }, _key = "Tau;", _map[_key] = { k: _key, v: 932 }, _key = "Tcaron;", _map[_key] = { k: _key, v: 356 }, _key = "Tcedil;", _map[_key] = { k: _key, v: 354 }, _key = "Tcy;", _map[_key] = { k: _key, v: 1058 }, _key = "Tfr;", _map[_key] = { k: _key, v: 120087 }, _key = "Therefore;", _map[_key] = { k: _key, v: 8756 }, _key = "Theta;", _map[_key] = { k: _key, v: 920 }, _key = "ThinSpace;", _map[_key] = { k: _key, v: 8201 }, _key = "Tilde;", _map[_key] = { k: _key, v: 8764 }, _key = "TildeEqual;", _map[_key] = { k: _key, v: 8771 }, _key = "TildeFullEqual;", _map[_key] = { k: _key, v: 8773 }, _key = "TildeTilde;", _map[_key] = { k: _key, v: 8776 }, _key = "Topf;", _map[_key] = { k: _key, v: 120139 }, _key = "TripleDot;", _map[_key] = { k: _key, v: 8411 }, _key = "Tscr;", _map[_key] = { k: _key, v: 119983 }, _key = "Tstrok;", _map[_key] = { k: _key, v: 358 }, _key = "Uacute;", _map[_key] = { k: _key, v: 218 }, _key = "Uarr;", _map[_key] = { k: _key, v: 8607 }, _key = "Uarrocir;", _map[_key] = { k: _key, v: 10569 }, _key = "Ubrcy;", _map[_key] = { k: _key, v: 1038 }, _key = "Ubreve;", _map[_key] = { k: _key, v: 364 }, _key = "Ucirc;", _map[_key] = { k: _key, v: 219 }, _key = "Ucy;", _map[_key] = { k: _key, v: 1059 }, _key = "Udblac;", _map[_key] = { k: _key, v: 368 }, _key = "Ufr;", _map[_key] = { k: _key, v: 120088 }, _key = "Ugrave;", _map[_key] = { k: _key, v: 217 }, _key = "Umacr;", _map[_key] = { k: _key, v: 362 }, _key = "UnderBar;", _map[_key] = { k: _key, v: 95 }, _key = "UnderBrace;", _map[_key] = { k: _key, v: 9183 }, _key = "UnderBracket;", _map[_key] = { k: _key, v: 9141 }, _key = "UnderParenthesis;", _map[_key] = { k: _key, v: 9181 }, _key = "Union;", _map[_key] = { k: _key, v: 8899 }, _key = "UnionPlus;", _map[_key] = { k: _key, v: 8846 }, _key = "Uogon;", _map[_key] = { k: _key, v: 370 }, _key = "Uopf;", _map[_key] = { k: _key, v: 120140 }, _key = "UpArrow;", _map[_key] = { k: _key, v: 8593 }, _key = "UpArrowBar;", _map[_key] = { k: _key, v: 10514 }, _key = "UpArrowDownArrow;", _map[_key] = { k: _key, v: 8645 }, _key = "UpDownArrow;", _map[_key] = { k: _key, v: 8597 }, _key = "UpEquilibrium;", _map[_key] = { k: _key, v: 10606 }, _key = "UpTee;", _map[_key] = { k: _key, v: 8869 }, _key = "UpTeeArrow;", _map[_key] = { k: _key, v: 8613 }, _key = "Uparrow;", _map[_key] = { k: _key, v: 8657 }, _key = "Updownarrow;", _map[_key] = { k: _key, v: 8661 }, _key = "UpperLeftArrow;", _map[_key] = { k: _key, v: 8598 }, _key = "UpperRightArrow;", _map[_key] = { k: _key, v: 8599 }, _key = "Upsi;", _map[_key] = { k: _key, v: 978 }, _key = "Upsilon;", _map[_key] = { k: _key, v: 933 }, _key = "Uring;", _map[_key] = { k: _key, v: 366 }, _key = "Uscr;", _map[_key] = { k: _key, v: 119984 }, _key = "Utilde;", _map[_key] = { k: _key, v: 360 }, _key = "Uuml;", _map[_key] = { k: _key, v: 220 }, _key = "VDash;", _map[_key] = { k: _key, v: 8875 }, _key = "Vbar;", _map[_key] = { k: _key, v: 10987 }, _key = "Vcy;", _map[_key] = { k: _key, v: 1042 }, _key = "Vdash;", _map[_key] = { k: _key, v: 8873 }, _key = "Vdashl;", _map[_key] = { k: _key, v: 10982 }, _key = "Vee;", _map[_key] = { k: _key, v: 8897 }, _key = "Verbar;", _map[_key] = { k: _key, v: 8214 }, _key = "Vert;", _map[_key] = { k: _key, v: 8214 }, _key = "VerticalBar;", _map[_key] = { k: _key, v: 8739 }, _key = "VerticalLine;", _map[_key] = { k: _key, v: 124 }, _key = "VerticalSeparator;", _map[_key] = { k: _key, v: 10072 }, _key = "VerticalTilde;", _map[_key] = { k: _key, v: 8768 }, _key = "VeryThinSpace;", _map[_key] = { k: _key, v: 8202 }, _key = "Vfr;", _map[_key] = { k: _key, v: 120089 }, _key = "Vopf;", _map[_key] = { k: _key, v: 120141 }, _key = "Vscr;", _map[_key] = { k: _key, v: 119985 }, _key = "Vvdash;", _map[_key] = { k: _key, v: 8874 }, _key = "Wcirc;", _map[_key] = { k: _key, v: 372 }, _key = "Wedge;", _map[_key] = { k: _key, v: 8896 }, _key = "Wfr;", _map[_key] = { k: _key, v: 120090 }, _key = "Wopf;", _map[_key] = { k: _key, v: 120142 }, _key = "Wscr;", _map[_key] = { k: _key, v: 119986 }, _key = "Xfr;", _map[_key] = { k: _key, v: 120091 }, _key = "Xi;", _map[_key] = { k: _key, v: 926 }, _key = "Xopf;", _map[_key] = { k: _key, v: 120143 }, _key = "Xscr;", _map[_key] = { k: _key, v: 119987 }, _key = "YAcy;", _map[_key] = { k: _key, v: 1071 }, _key = "YIcy;", _map[_key] = { k: _key, v: 1031 }, _key = "YUcy;", _map[_key] = { k: _key, v: 1070 }, _key = "Yacute;", _map[_key] = { k: _key, v: 221 }, _key = "Ycirc;", _map[_key] = { k: _key, v: 374 }, _key = "Ycy;", _map[_key] = { k: _key, v: 1067 }, _key = "Yfr;", _map[_key] = { k: _key, v: 120092 }, _key = "Yopf;", _map[_key] = { k: _key, v: 120144 }, _key = "Yscr;", _map[_key] = { k: _key, v: 119988 }, _key = "Yuml;", _map[_key] = { k: _key, v: 376 }, _key = "ZHcy;", _map[_key] = { k: _key, v: 1046 }, _key = "Zacute;", _map[_key] = { k: _key, v: 377 }, _key = "Zcaron;", _map[_key] = { k: _key, v: 381 }, _key = "Zcy;", _map[_key] = { k: _key, v: 1047 }, _key = "Zdot;", _map[_key] = { k: _key, v: 379 }, _key = "ZeroWidthSpace;", _map[_key] = { k: _key, v: 8203 }, _key = "Zeta;", _map[_key] = { k: _key, v: 918 }, _key = "Zfr;", _map[_key] = { k: _key, v: 8488 }, _key = "Zopf;", _map[_key] = { k: _key, v: 8484 }, _key = "Zscr;", _map[_key] = { k: _key, v: 119989 }, _key = "aacute;", _map[_key] = { k: _key, v: 225 }, _key = "abreve;", _map[_key] = { k: _key, v: 259 }, _key = "ac;", _map[_key] = { k: _key, v: 8766 }, _key = "acd;", _map[_key] = { k: _key, v: 8767 }, _key = "acirc;", _map[_key] = { k: _key, v: 226 }, _key = "acute;", _map[_key] = { k: _key, v: 180 }, _key = "acy;", _map[_key] = { k: _key, v: 1072 }, _key = "aelig;", _map[_key] = { k: _key, v: 230 }, _key = "af;", _map[_key] = { k: _key, v: 8289 }, _key = "afr;", _map[_key] = { k: _key, v: 120094 }, _key = "agrave;", _map[_key] = { k: _key, v: 224 }, _key = "alefsym;", _map[_key] = { k: _key, v: 8501 }, _key = "aleph;", _map[_key] = { k: _key, v: 8501 }, _key = "alpha;", _map[_key] = { k: _key, v: 945 }, _key = "amacr;", _map[_key] = { k: _key, v: 257 }, _key = "amalg;", _map[_key] = { k: _key, v: 10815 }, _key = "amp;", _map[_key] = { k: _key, v: 38 }, _key = "and;", _map[_key] = { k: _key, v: 8743 }, _key = "andand;", _map[_key] = { k: _key, v: 10837 }, _key = "andd;", _map[_key] = { k: _key, v: 10844 }, _key = "andslope;", _map[_key] = { k: _key, v: 10840 }, _key = "andv;", _map[_key] = { k: _key, v: 10842 }, _key = "ang;", _map[_key] = { k: _key, v: 8736 }, _key = "ange;", _map[_key] = { k: _key, v: 10660 }, _key = "angle;", _map[_key] = { k: _key, v: 8736 }, _key = "angmsd;", _map[_key] = { k: _key, v: 8737 }, _key = "angmsdaa;", _map[_key] = { k: _key, v: 10664 }, _key = "angmsdab;", _map[_key] = { k: _key, v: 10665 }, _key = "angmsdac;", _map[_key] = { k: _key, v: 10666 }, _key = "angmsdad;", _map[_key] = { k: _key, v: 10667 }, _key = "angmsdae;", _map[_key] = { k: _key, v: 10668 }, _key = "angmsdaf;", _map[_key] = { k: _key, v: 10669 }, _key = "angmsdag;", _map[_key] = { k: _key, v: 10670 }, _key = "angmsdah;", _map[_key] = { k: _key, v: 10671 }, _key = "angrt;", _map[_key] = { k: _key, v: 8735 }, _key = "angrtvb;", _map[_key] = { k: _key, v: 8894 }, _key = "angrtvbd;", _map[_key] = { k: _key, v: 10653 }, _key = "angsph;", _map[_key] = { k: _key, v: 8738 }, _key = "angst;", _map[_key] = { k: _key, v: 197 }, _key = "angzarr;", _map[_key] = { k: _key, v: 9084 }, _key = "aogon;", _map[_key] = { k: _key, v: 261 }, _key = "aopf;", _map[_key] = { k: _key, v: 120146 }, _key = "ap;", _map[_key] = { k: _key, v: 8776 }, _key = "apE;", _map[_key] = { k: _key, v: 10864 }, _key = "apacir;", _map[_key] = { k: _key, v: 10863 }, _key = "ape;", _map[_key] = { k: _key, v: 8778 }, _key = "apid;", _map[_key] = { k: _key, v: 8779 }, _key = "apos;", _map[_key] = { k: _key, v: 39 }, _key = "approx;", _map[_key] = { k: _key, v: 8776 }, _key = "approxeq;", _map[_key] = { k: _key, v: 8778 }, _key = "aring;", _map[_key] = { k: _key, v: 229 }, _key = "ascr;", _map[_key] = { k: _key, v: 119990 }, _key = "ast;", _map[_key] = { k: _key, v: 42 }, _key = "asymp;", _map[_key] = { k: _key, v: 8776 }, _key = "asympeq;", _map[_key] = { k: _key, v: 8781 }, _key = "atilde;", _map[_key] = { k: _key, v: 227 }, _key = "auml;", _map[_key] = { k: _key, v: 228 }, _key = "awconint;", _map[_key] = { k: _key, v: 8755 }, _key = "awint;", _map[_key] = { k: _key, v: 10769 }, _key = "bNot;", _map[_key] = { k: _key, v: 10989 }, _key = "backcong;", _map[_key] = { k: _key, v: 8780 }, _key = "backepsilon;", _map[_key] = { k: _key, v: 1014 }, _key = "backprime;", _map[_key] = { k: _key, v: 8245 }, _key = "backsim;", _map[_key] = { k: _key, v: 8765 }, _key = "backsimeq;", _map[_key] = { k: _key, v: 8909 }, _key = "barvee;", _map[_key] = { k: _key, v: 8893 }, _key = "barwed;", _map[_key] = { k: _key, v: 8965 }, _key = "barwedge;", _map[_key] = { k: _key, v: 8965 }, _key = "bbrk;", _map[_key] = { k: _key, v: 9141 }, _key = "bbrktbrk;", _map[_key] = { k: _key, v: 9142 }, _key = "bcong;", _map[_key] = { k: _key, v: 8780 }, _key = "bcy;", _map[_key] = { k: _key, v: 1073 }, _key = "bdquo;", _map[_key] = { k: _key, v: 8222 }, _key = "becaus;", _map[_key] = { k: _key, v: 8757 }, _key = "because;", _map[_key] = { k: _key, v: 8757 }, _key = "bemptyv;", _map[_key] = { k: _key, v: 10672 }, _key = "bepsi;", _map[_key] = { k: _key, v: 1014 }, _key = "bernou;", _map[_key] = { k: _key, v: 8492 }, _key = "beta;", _map[_key] = { k: _key, v: 946 }, _key = "beth;", _map[_key] = { k: _key, v: 8502 }, _key = "between;", _map[_key] = { k: _key, v: 8812 }, _key = "bfr;", _map[_key] = { k: _key, v: 120095 }, _key = "bigcap;", _map[_key] = { k: _key, v: 8898 }, _key = "bigcirc;", _map[_key] = { k: _key, v: 9711 }, _key = "bigcup;", _map[_key] = { k: _key, v: 8899 }, _key = "bigodot;", _map[_key] = { k: _key, v: 10752 }, _key = "bigoplus;", _map[_key] = { k: _key, v: 10753 }, _key = "bigotimes;", _map[_key] = { k: _key, v: 10754 }, _key = "bigsqcup;", _map[_key] = { k: _key, v: 10758 }, _key = "bigstar;", _map[_key] = { k: _key, v: 9733 }, _key = "bigtriangledown;", _map[_key] = { k: _key, v: 9661 }, _key = "bigtriangleup;", _map[_key] = { k: _key, v: 9651 }, _key = "biguplus;", _map[_key] = { k: _key, v: 10756 }, _key = "bigvee;", _map[_key] = { k: _key, v: 8897 }, _key = "bigwedge;", _map[_key] = { k: _key, v: 8896 }, _key = "bkarow;", _map[_key] = { k: _key, v: 10509 }, _key = "blacklozenge;", _map[_key] = { k: _key, v: 10731 }, _key = "blacksquare;", _map[_key] = { k: _key, v: 9642 }, _key = "blacktriangle;", _map[_key] = { k: _key, v: 9652 }, _key = "blacktriangledown;", _map[_key] = { k: _key, v: 9662 }, _key = "blacktriangleleft;", _map[_key] = { k: _key, v: 9666 }, _key = "blacktriangleright;", _map[_key] = { k: _key, v: 9656 }, _key = "blank;", _map[_key] = { k: _key, v: 9251 }, _key = "blk12;", _map[_key] = { k: _key, v: 9618 }, _key = "blk14;", _map[_key] = { k: _key, v: 9617 }, _key = "blk34;", _map[_key] = { k: _key, v: 9619 }, _key = "block;", _map[_key] = { k: _key, v: 9608 }, _key = "bnot;", _map[_key] = { k: _key, v: 8976 }, _key = "bopf;", _map[_key] = { k: _key, v: 120147 }, _key = "bot;", _map[_key] = { k: _key, v: 8869 }, _key = "bottom;", _map[_key] = { k: _key, v: 8869 }, _key = "bowtie;", _map[_key] = { k: _key, v: 8904 }, _key = "boxDL;", _map[_key] = { k: _key, v: 9559 }, _key = "boxDR;", _map[_key] = { k: _key, v: 9556 }, _key = "boxDl;", _map[_key] = { k: _key, v: 9558 }, _key = "boxDr;", _map[_key] = { k: _key, v: 9555 }, _key = "boxH;", _map[_key] = { k: _key, v: 9552 }, _key = "boxHD;", _map[_key] = { k: _key, v: 9574 }, _key = "boxHU;", _map[_key] = { k: _key, v: 9577 }, _key = "boxHd;", _map[_key] = { k: _key, v: 9572 }, _key = "boxHu;", _map[_key] = { k: _key, v: 9575 }, _key = "boxUL;", _map[_key] = { k: _key, v: 9565 }, _key = "boxUR;", _map[_key] = { k: _key, v: 9562 }, _key = "boxUl;", _map[_key] = { k: _key, v: 9564 }, _key = "boxUr;", _map[_key] = { k: _key, v: 9561 }, _key = "boxV;", _map[_key] = { k: _key, v: 9553 }, _key = "boxVH;", _map[_key] = { k: _key, v: 9580 }, _key = "boxVL;", _map[_key] = { k: _key, v: 9571 }, _key = "boxVR;", _map[_key] = { k: _key, v: 9568 }, _key = "boxVh;", _map[_key] = { k: _key, v: 9579 }, _key = "boxVl;", _map[_key] = { k: _key, v: 9570 }, _key = "boxVr;", _map[_key] = { k: _key, v: 9567 }, _key = "boxbox;", _map[_key] = { k: _key, v: 10697 }, _key = "boxdL;", _map[_key] = { k: _key, v: 9557 }, _key = "boxdR;", _map[_key] = { k: _key, v: 9554 }, _key = "boxdl;", _map[_key] = { k: _key, v: 9488 }, _key = "boxdr;", _map[_key] = { k: _key, v: 9484 }, _key = "boxh;", _map[_key] = { k: _key, v: 9472 }, _key = "boxhD;", _map[_key] = { k: _key, v: 9573 }, _key = "boxhU;", _map[_key] = { k: _key, v: 9576 }, _key = "boxhd;", _map[_key] = { k: _key, v: 9516 }, _key = "boxhu;", _map[_key] = { k: _key, v: 9524 }, _key = "boxminus;", _map[_key] = { k: _key, v: 8863 }, _key = "boxplus;", _map[_key] = { k: _key, v: 8862 }, _key = "boxtimes;", _map[_key] = { k: _key, v: 8864 }, _key = "boxuL;", _map[_key] = { k: _key, v: 9563 }, _key = "boxuR;", _map[_key] = { k: _key, v: 9560 }, _key = "boxul;", _map[_key] = { k: _key, v: 9496 }, _key = "boxur;", _map[_key] = { k: _key, v: 9492 }, _key = "boxv;", _map[_key] = { k: _key, v: 9474 }, _key = "boxvH;", _map[_key] = { k: _key, v: 9578 }, _key = "boxvL;", _map[_key] = { k: _key, v: 9569 }, _key = "boxvR;", _map[_key] = { k: _key, v: 9566 }, _key = "boxvh;", _map[_key] = { k: _key, v: 9532 }, _key = "boxvl;", _map[_key] = { k: _key, v: 9508 }, _key = "boxvr;", _map[_key] = { k: _key, v: 9500 }, _key = "bprime;", _map[_key] = { k: _key, v: 8245 }, _key = "breve;", _map[_key] = { k: _key, v: 728 }, _key = "brvbar;", _map[_key] = { k: _key, v: 166 }, _key = "bscr;", _map[_key] = { k: _key, v: 119991 }, _key = "bsemi;", _map[_key] = { k: _key, v: 8271 }, _key = "bsim;", _map[_key] = { k: _key, v: 8765 }, _key = "bsime;", _map[_key] = { k: _key, v: 8909 }, _key = "bsol;", _map[_key] = { k: _key, v: 92 }, _key = "bsolb;", _map[_key] = { k: _key, v: 10693 }, _key = "bsolhsub;", _map[_key] = { k: _key, v: 10184 }, _key = "bull;", _map[_key] = { k: _key, v: 8226 }, _key = "bullet;", _map[_key] = { k: _key, v: 8226 }, _key = "bump;", _map[_key] = { k: _key, v: 8782 }, _key = "bumpE;", _map[_key] = { k: _key, v: 10926 }, _key = "bumpe;", _map[_key] = { k: _key, v: 8783 }, _key = "bumpeq;", _map[_key] = { k: _key, v: 8783 }, _key = "cacute;", _map[_key] = { k: _key, v: 263 }, _key = "cap;", _map[_key] = { k: _key, v: 8745 }, _key = "capand;", _map[_key] = { k: _key, v: 10820 }, _key = "capbrcup;", _map[_key] = { k: _key, v: 10825 }, _key = "capcap;", _map[_key] = { k: _key, v: 10827 }, _key = "capcup;", _map[_key] = { k: _key, v: 10823 }, _key = "capdot;", _map[_key] = { k: _key, v: 10816 }, _key = "caret;", _map[_key] = { k: _key, v: 8257 }, _key = "caron;", _map[_key] = { k: _key, v: 711 }, _key = "ccaps;", _map[_key] = { k: _key, v: 10829 }, _key = "ccaron;", _map[_key] = { k: _key, v: 269 }, _key = "ccedil;", _map[_key] = { k: _key, v: 231 }, _key = "ccirc;", _map[_key] = { k: _key, v: 265 }, _key = "ccups;", _map[_key] = { k: _key, v: 10828 }, _key = "ccupssm;", _map[_key] = { k: _key, v: 10832 }, _key = "cdot;", _map[_key] = { k: _key, v: 267 }, _key = "cedil;", _map[_key] = { k: _key, v: 184 }, _key = "cemptyv;", _map[_key] = { k: _key, v: 10674 }, _key = "cent;", _map[_key] = { k: _key, v: 162 }, _key = "centerdot;", _map[_key] = { k: _key, v: 183 }, _key = "cfr;", _map[_key] = { k: _key, v: 120096 }, _key = "chcy;", _map[_key] = { k: _key, v: 1095 }, _key = "check;", _map[_key] = { k: _key, v: 10003 }, _key = "checkmark;", _map[_key] = { k: _key, v: 10003 }, _key = "chi;", _map[_key] = { k: _key, v: 967 }, _key = "cir;", _map[_key] = { k: _key, v: 9675 }, _key = "cirE;", _map[_key] = { k: _key, v: 10691 }, _key = "circ;", _map[_key] = { k: _key, v: 710 }, _key = "circeq;", _map[_key] = { k: _key, v: 8791 }, _key = "circlearrowleft;", _map[_key] = { k: _key, v: 8634 }, _key = "circlearrowright;", _map[_key] = { k: _key, v: 8635 }, _key = "circledR;", _map[_key] = { k: _key, v: 174 }, _key = "circledS;", _map[_key] = { k: _key, v: 9416 }, _key = "circledast;", _map[_key] = { k: _key, v: 8859 }, _key = "circledcirc;", _map[_key] = { k: _key, v: 8858 }, _key = "circleddash;", _map[_key] = { k: _key, v: 8861 }, _key = "cire;", _map[_key] = { k: _key, v: 8791 }, _key = "cirfnint;", _map[_key] = { k: _key, v: 10768 }, _key = "cirmid;", _map[_key] = { k: _key, v: 10991 }, _key = "cirscir;", _map[_key] = { k: _key, v: 10690 }, _key = "clubs;", _map[_key] = { k: _key, v: 9827 }, _key = "clubsuit;", _map[_key] = { k: _key, v: 9827 }, _key = "colon;", _map[_key] = { k: _key, v: 58 }, _key = "colone;", _map[_key] = { k: _key, v: 8788 }, _key = "coloneq;", _map[_key] = { k: _key, v: 8788 }, _key = "comma;", _map[_key] = { k: _key, v: 44 }, _key = "commat;", _map[_key] = { k: _key, v: 64 }, _key = "comp;", _map[_key] = { k: _key, v: 8705 }, _key = "compfn;", _map[_key] = { k: _key, v: 8728 }, _key = "complement;", _map[_key] = { k: _key, v: 8705 }, _key = "complexes;", _map[_key] = { k: _key, v: 8450 }, _key = "cong;", _map[_key] = { k: _key, v: 8773 }, _key = "congdot;", _map[_key] = { k: _key, v: 10861 }, _key = "conint;", _map[_key] = { k: _key, v: 8750 }, _key = "copf;", _map[_key] = { k: _key, v: 120148 }, _key = "coprod;", _map[_key] = { k: _key, v: 8720 }, _key = "copy;", _map[_key] = { k: _key, v: 169 }, _key = "copysr;", _map[_key] = { k: _key, v: 8471 }, _key = "crarr;", _map[_key] = { k: _key, v: 8629 }, _key = "cross;", _map[_key] = { k: _key, v: 10007 }, _key = "cscr;", _map[_key] = { k: _key, v: 119992 }, _key = "csub;", _map[_key] = { k: _key, v: 10959 }, _key = "csube;", _map[_key] = { k: _key, v: 10961 }, _key = "csup;", _map[_key] = { k: _key, v: 10960 }, _key = "csupe;", _map[_key] = { k: _key, v: 10962 }, _key = "ctdot;", _map[_key] = { k: _key, v: 8943 }, _key = "cudarrl;", _map[_key] = { k: _key, v: 10552 }, _key = "cudarrr;", _map[_key] = { k: _key, v: 10549 }, _key = "cuepr;", _map[_key] = { k: _key, v: 8926 }, _key = "cuesc;", _map[_key] = { k: _key, v: 8927 }, _key = "cularr;", _map[_key] = { k: _key, v: 8630 }, _key = "cularrp;", _map[_key] = { k: _key, v: 10557 }, _key = "cup;", _map[_key] = { k: _key, v: 8746 }, _key = "cupbrcap;", _map[_key] = { k: _key, v: 10824 }, _key = "cupcap;", _map[_key] = { k: _key, v: 10822 }, _key = "cupcup;", _map[_key] = { k: _key, v: 10826 }, _key = "cupdot;", _map[_key] = { k: _key, v: 8845 }, _key = "cupor;", _map[_key] = { k: _key, v: 10821 }, _key = "curarr;", _map[_key] = { k: _key, v: 8631 }, _key = "curarrm;", _map[_key] = { k: _key, v: 10556 }, _key = "curlyeqprec;", _map[_key] = { k: _key, v: 8926 }, _key = "curlyeqsucc;", _map[_key] = { k: _key, v: 8927 }, _key = "curlyvee;", _map[_key] = { k: _key, v: 8910 }, _key = "curlywedge;", _map[_key] = { k: _key, v: 8911 }, _key = "curren;", _map[_key] = { k: _key, v: 164 }, _key = "curvearrowleft;", _map[_key] = { k: _key, v: 8630 }, _key = "curvearrowright;", _map[_key] = { k: _key, v: 8631 }, _key = "cuvee;", _map[_key] = { k: _key, v: 8910 }, _key = "cuwed;", _map[_key] = { k: _key, v: 8911 }, _key = "cwconint;", _map[_key] = { k: _key, v: 8754 }, _key = "cwint;", _map[_key] = { k: _key, v: 8753 }, _key = "cylcty;", _map[_key] = { k: _key, v: 9005 }, _key = "dArr;", _map[_key] = { k: _key, v: 8659 }, _key = "dHar;", _map[_key] = { k: _key, v: 10597 }, _key = "dagger;", _map[_key] = { k: _key, v: 8224 }, _key = "daleth;", _map[_key] = { k: _key, v: 8504 }, _key = "darr;", _map[_key] = { k: _key, v: 8595 }, _key = "dash;", _map[_key] = { k: _key, v: 8208 }, _key = "dashv;", _map[_key] = { k: _key, v: 8867 }, _key = "dbkarow;", _map[_key] = { k: _key, v: 10511 }, _key = "dblac;", _map[_key] = { k: _key, v: 733 }, _key = "dcaron;", _map[_key] = { k: _key, v: 271 }, _key = "dcy;", _map[_key] = { k: _key, v: 1076 }, _key = "dd;", _map[_key] = { k: _key, v: 8518 }, _key = "ddagger;", _map[_key] = { k: _key, v: 8225 }, _key = "ddarr;", _map[_key] = { k: _key, v: 8650 }, _key = "ddotseq;", _map[_key] = { k: _key, v: 10871 }, _key = "deg;", _map[_key] = { k: _key, v: 176 }, _key = "delta;", _map[_key] = { k: _key, v: 948 }, _key = "demptyv;", _map[_key] = { k: _key, v: 10673 }, _key = "dfisht;", _map[_key] = { k: _key, v: 10623 }, _key = "dfr;", _map[_key] = { k: _key, v: 120097 }, _key = "dharl;", _map[_key] = { k: _key, v: 8643 }, _key = "dharr;", _map[_key] = { k: _key, v: 8642 }, _key = "diam;", _map[_key] = { k: _key, v: 8900 }, _key = "diamond;", _map[_key] = { k: _key, v: 8900 }, _key = "diamondsuit;", _map[_key] = { k: _key, v: 9830 }, _key = "diams;", _map[_key] = { k: _key, v: 9830 }, _key = "die;", _map[_key] = { k: _key, v: 168 }, _key = "digamma;", _map[_key] = { k: _key, v: 989 }, _key = "disin;", _map[_key] = { k: _key, v: 8946 }, _key = "div;", _map[_key] = { k: _key, v: 247 }, _key = "divide;", _map[_key] = { k: _key, v: 247 }, _key = "divideontimes;", _map[_key] = { k: _key, v: 8903 }, _key = "divonx;", _map[_key] = { k: _key, v: 8903 }, _key = "djcy;", _map[_key] = { k: _key, v: 1106 }, _key = "dlcorn;", _map[_key] = { k: _key, v: 8990 }, _key = "dlcrop;", _map[_key] = { k: _key, v: 8973 }, _key = "dollar;", _map[_key] = { k: _key, v: 36 }, _key = "dopf;", _map[_key] = { k: _key, v: 120149 }, _key = "dot;", _map[_key] = { k: _key, v: 729 }, _key = "doteq;", _map[_key] = { k: _key, v: 8784 }, _key = "doteqdot;", _map[_key] = { k: _key, v: 8785 }, _key = "dotminus;", _map[_key] = { k: _key, v: 8760 }, _key = "dotplus;", _map[_key] = { k: _key, v: 8724 }, _key = "dotsquare;", _map[_key] = { k: _key, v: 8865 }, _key = "doublebarwedge;", _map[_key] = { k: _key, v: 8966 }, _key = "downarrow;", _map[_key] = { k: _key, v: 8595 }, _key = "downdownarrows;", _map[_key] = { k: _key, v: 8650 }, _key = "downharpoonleft;", _map[_key] = { k: _key, v: 8643 }, _key = "downharpoonright;", _map[_key] = { k: _key, v: 8642 }, _key = "drbkarow;", _map[_key] = { k: _key, v: 10512 }, _key = "drcorn;", _map[_key] = { k: _key, v: 8991 }, _key = "drcrop;", _map[_key] = { k: _key, v: 8972 }, _key = "dscr;", _map[_key] = { k: _key, v: 119993 }, _key = "dscy;", _map[_key] = { k: _key, v: 1109 }, _key = "dsol;", _map[_key] = { k: _key, v: 10742 }, _key = "dstrok;", _map[_key] = { k: _key, v: 273 }, _key = "dtdot;", _map[_key] = { k: _key, v: 8945 }, _key = "dtri;", _map[_key] = { k: _key, v: 9663 }, _key = "dtrif;", _map[_key] = { k: _key, v: 9662 }, _key = "duarr;", _map[_key] = { k: _key, v: 8693 }, _key = "duhar;", _map[_key] = { k: _key, v: 10607 }, _key = "dwangle;", _map[_key] = { k: _key, v: 10662 }, _key = "dzcy;", _map[_key] = { k: _key, v: 1119 }, _key = "dzigrarr;", _map[_key] = { k: _key, v: 10239 }, _key = "eDDot;", _map[_key] = { k: _key, v: 10871 }, _key = "eDot;", _map[_key] = { k: _key, v: 8785 }, _key = "eacute;", _map[_key] = { k: _key, v: 233 }, _key = "easter;", _map[_key] = { k: _key, v: 10862 }, _key = "ecaron;", _map[_key] = { k: _key, v: 283 }, _key = "ecir;", _map[_key] = { k: _key, v: 8790 }, _key = "ecirc;", _map[_key] = { k: _key, v: 234 }, _key = "ecolon;", _map[_key] = { k: _key, v: 8789 }, _key = "ecy;", _map[_key] = { k: _key, v: 1101 }, _key = "edot;", _map[_key] = { k: _key, v: 279 }, _key = "ee;", _map[_key] = { k: _key, v: 8519 }, _key = "efDot;", _map[_key] = { k: _key, v: 8786 }, _key = "efr;", _map[_key] = { k: _key, v: 120098 }, _key = "eg;", _map[_key] = { k: _key, v: 10906 }, _key = "egrave;", _map[_key] = { k: _key, v: 232 }, _key = "egs;", _map[_key] = { k: _key, v: 10902 }, _key = "egsdot;", _map[_key] = { k: _key, v: 10904 }, _key = "el;", _map[_key] = { k: _key, v: 10905 }, _key = "elinters;", _map[_key] = { k: _key, v: 9191 }, _key = "ell;", _map[_key] = { k: _key, v: 8467 }, _key = "els;", _map[_key] = { k: _key, v: 10901 }, _key = "elsdot;", _map[_key] = { k: _key, v: 10903 }, _key = "emacr;", _map[_key] = { k: _key, v: 275 }, _key = "empty;", _map[_key] = { k: _key, v: 8709 }, _key = "emptyset;", _map[_key] = { k: _key, v: 8709 }, _key = "emptyv;", _map[_key] = { k: _key, v: 8709 }, _key = "emsp;", _map[_key] = { k: _key, v: 8195 }, _key = "emsp13;", _map[_key] = { k: _key, v: 8196 }, _key = "emsp14;", _map[_key] = { k: _key, v: 8197 }, _key = "eng;", _map[_key] = { k: _key, v: 331 }, _key = "ensp;", _map[_key] = { k: _key, v: 8194 }, _key = "eogon;", _map[_key] = { k: _key, v: 281 }, _key = "eopf;", _map[_key] = { k: _key, v: 120150 }, _key = "epar;", _map[_key] = { k: _key, v: 8917 }, _key = "eparsl;", _map[_key] = { k: _key, v: 10723 }, _key = "eplus;", _map[_key] = { k: _key, v: 10865 }, _key = "epsi;", _map[_key] = { k: _key, v: 949 }, _key = "epsilon;", _map[_key] = { k: _key, v: 949 }, _key = "epsiv;", _map[_key] = { k: _key, v: 1013 }, _key = "eqcirc;", _map[_key] = { k: _key, v: 8790 }, _key = "eqcolon;", _map[_key] = { k: _key, v: 8789 }, _key = "eqsim;", _map[_key] = { k: _key, v: 8770 }, _key = "eqslantgtr;", _map[_key] = { k: _key, v: 10902 }, _key = "eqslantless;", _map[_key] = { k: _key, v: 10901 }, _key = "equals;", _map[_key] = { k: _key, v: 61 }, _key = "equest;", _map[_key] = { k: _key, v: 8799 }, _key = "equiv;", _map[_key] = { k: _key, v: 8801 }, _key = "equivDD;", _map[_key] = { k: _key, v: 10872 }, _key = "eqvparsl;", _map[_key] = { k: _key, v: 10725 }, _key = "erDot;", _map[_key] = { k: _key, v: 8787 }, _key = "erarr;", _map[_key] = { k: _key, v: 10609 }, _key = "escr;", _map[_key] = { k: _key, v: 8495 }, _key = "esdot;", _map[_key] = { k: _key, v: 8784 }, _key = "esim;", _map[_key] = { k: _key, v: 8770 }, _key = "eta;", _map[_key] = { k: _key, v: 951 }, _key = "eth;", _map[_key] = { k: _key, v: 240 }, _key = "euml;", _map[_key] = { k: _key, v: 235 }, _key = "euro;", _map[_key] = { k: _key, v: 8364 }, _key = "excl;", _map[_key] = { k: _key, v: 33 }, _key = "exist;", _map[_key] = { k: _key, v: 8707 }, _key = "expectation;", _map[_key] = { k: _key, v: 8496 }, _key = "exponentiale;", _map[_key] = { k: _key, v: 8519 }, _key = "fallingdotseq;", _map[_key] = { k: _key, v: 8786 }, _key = "fcy;", _map[_key] = { k: _key, v: 1092 }, _key = "female;", _map[_key] = { k: _key, v: 9792 }, _key = "ffilig;", _map[_key] = { k: _key, v: 64259 }, _key = "fflig;", _map[_key] = { k: _key, v: 64256 }, _key = "ffllig;", _map[_key] = { k: _key, v: 64260 }, _key = "ffr;", _map[_key] = { k: _key, v: 120099 }, _key = "filig;", _map[_key] = { k: _key, v: 64257 }, _key = "flat;", _map[_key] = { k: _key, v: 9837 }, _key = "fllig;", _map[_key] = { k: _key, v: 64258 }, _key = "fltns;", _map[_key] = { k: _key, v: 9649 }, _key = "fnof;", _map[_key] = { k: _key, v: 402 }, _key = "fopf;", _map[_key] = { k: _key, v: 120151 }, _key = "forall;", _map[_key] = { k: _key, v: 8704 }, _key = "fork;", _map[_key] = { k: _key, v: 8916 }, _key = "forkv;", _map[_key] = { k: _key, v: 10969 }, _key = "fpartint;", _map[_key] = { k: _key, v: 10765 }, _key = "frac12;", _map[_key] = { k: _key, v: 189 }, _key = "frac13;", _map[_key] = { k: _key, v: 8531 }, _key = "frac14;", _map[_key] = { k: _key, v: 188 }, _key = "frac15;", _map[_key] = { k: _key, v: 8533 }, _key = "frac16;", _map[_key] = { k: _key, v: 8537 }, _key = "frac18;", _map[_key] = { k: _key, v: 8539 }, _key = "frac23;", _map[_key] = { k: _key, v: 8532 }, _key = "frac25;", _map[_key] = { k: _key, v: 8534 }, _key = "frac34;", _map[_key] = { k: _key, v: 190 }, _key = "frac35;", _map[_key] = { k: _key, v: 8535 }, _key = "frac38;", _map[_key] = { k: _key, v: 8540 }, _key = "frac45;", _map[_key] = { k: _key, v: 8536 }, _key = "frac56;", _map[_key] = { k: _key, v: 8538 }, _key = "frac58;", _map[_key] = { k: _key, v: 8541 }, _key = "frac78;", _map[_key] = { k: _key, v: 8542 }, _key = "frasl;", _map[_key] = { k: _key, v: 8260 }, _key = "frown;", _map[_key] = { k: _key, v: 8994 }, _key = "fscr;", _map[_key] = { k: _key, v: 119995 }, _key = "gE;", _map[_key] = { k: _key, v: 8807 }, _key = "gEl;", _map[_key] = { k: _key, v: 10892 }, _key = "gacute;", _map[_key] = { k: _key, v: 501 }, _key = "gamma;", _map[_key] = { k: _key, v: 947 }, _key = "gammad;", _map[_key] = { k: _key, v: 989 }, _key = "gap;", _map[_key] = { k: _key, v: 10886 }, _key = "gbreve;", _map[_key] = { k: _key, v: 287 }, _key = "gcirc;", _map[_key] = { k: _key, v: 285 }, _key = "gcy;", _map[_key] = { k: _key, v: 1075 }, _key = "gdot;", _map[_key] = { k: _key, v: 289 }, _key = "ge;", _map[_key] = { k: _key, v: 8805 }, _key = "gel;", _map[_key] = { k: _key, v: 8923 }, _key = "geq;", _map[_key] = { k: _key, v: 8805 }, _key = "geqq;", _map[_key] = { k: _key, v: 8807 }, _key = "geqslant;", _map[_key] = { k: _key, v: 10878 }, _key = "ges;", _map[_key] = { k: _key, v: 10878 }, _key = "gescc;", _map[_key] = { k: _key, v: 10921 }, _key = "gesdot;", _map[_key] = { k: _key, v: 10880 }, _key = "gesdoto;", _map[_key] = { k: _key, v: 10882 }, _key = "gesdotol;", _map[_key] = { k: _key, v: 10884 }, _key = "gesles;", _map[_key] = { k: _key, v: 10900 }, _key = "gfr;", _map[_key] = { k: _key, v: 120100 }, _key = "gg;", _map[_key] = { k: _key, v: 8811 }, _key = "ggg;", _map[_key] = { k: _key, v: 8921 }, _key = "gimel;", _map[_key] = { k: _key, v: 8503 }, _key = "gjcy;", _map[_key] = { k: _key, v: 1107 }, _key = "gl;", _map[_key] = { k: _key, v: 8823 }, _key = "glE;", _map[_key] = { k: _key, v: 10898 }, _key = "gla;", _map[_key] = { k: _key, v: 10917 }, _key = "glj;", _map[_key] = { k: _key, v: 10916 }, _key = "gnE;", _map[_key] = { k: _key, v: 8809 }, _key = "gnap;", _map[_key] = { k: _key, v: 10890 }, _key = "gnapprox;", _map[_key] = { k: _key, v: 10890 }, _key = "gne;", _map[_key] = { k: _key, v: 10888 }, _key = "gneq;", _map[_key] = { k: _key, v: 10888 }, _key = "gneqq;", _map[_key] = { k: _key, v: 8809 }, _key = "gnsim;", _map[_key] = { k: _key, v: 8935 }, _key = "gopf;", _map[_key] = { k: _key, v: 120152 }, _key = "grave;", _map[_key] = { k: _key, v: 96 }, _key = "gscr;", _map[_key] = { k: _key, v: 8458 }, _key = "gsim;", _map[_key] = { k: _key, v: 8819 }, _key = "gsime;", _map[_key] = { k: _key, v: 10894 }, _key = "gsiml;", _map[_key] = { k: _key, v: 10896 }, _key = "gt;", _map[_key] = { k: _key, v: 62 }, _key = "gtcc;", _map[_key] = { k: _key, v: 10919 }, _key = "gtcir;", _map[_key] = { k: _key, v: 10874 }, _key = "gtdot;", _map[_key] = { k: _key, v: 8919 }, _key = "gtlPar;", _map[_key] = { k: _key, v: 10645 }, _key = "gtquest;", _map[_key] = { k: _key, v: 10876 }, _key = "gtrapprox;", _map[_key] = { k: _key, v: 10886 }, _key = "gtrarr;", _map[_key] = { k: _key, v: 10616 }, _key = "gtrdot;", _map[_key] = { k: _key, v: 8919 }, _key = "gtreqless;", _map[_key] = { k: _key, v: 8923 }, _key = "gtreqqless;", _map[_key] = { k: _key, v: 10892 }, _key = "gtrless;", _map[_key] = { k: _key, v: 8823 }, _key = "gtrsim;", _map[_key] = { k: _key, v: 8819 }, _key = "hArr;", _map[_key] = { k: _key, v: 8660 }, _key = "hairsp;", _map[_key] = { k: _key, v: 8202 }, _key = "half;", _map[_key] = { k: _key, v: 189 }, _key = "hamilt;", _map[_key] = { k: _key, v: 8459 }, _key = "hardcy;", _map[_key] = { k: _key, v: 1098 }, _key = "harr;", _map[_key] = { k: _key, v: 8596 }, _key = "harrcir;", _map[_key] = { k: _key, v: 10568 }, _key = "harrw;", _map[_key] = { k: _key, v: 8621 }, _key = "hbar;", _map[_key] = { k: _key, v: 8463 }, _key = "hcirc;", _map[_key] = { k: _key, v: 293 }, _key = "hearts;", _map[_key] = { k: _key, v: 9829 }, _key = "heartsuit;", _map[_key] = { k: _key, v: 9829 }, _key = "hellip;", _map[_key] = { k: _key, v: 8230 }, _key = "hercon;", _map[_key] = { k: _key, v: 8889 }, _key = "hfr;", _map[_key] = { k: _key, v: 120101 }, _key = "hksearow;", _map[_key] = { k: _key, v: 10533 }, _key = "hkswarow;", _map[_key] = { k: _key, v: 10534 }, _key = "hoarr;", _map[_key] = { k: _key, v: 8703 }, _key = "homtht;", _map[_key] = { k: _key, v: 8763 }, _key = "hookleftarrow;", _map[_key] = { k: _key, v: 8617 }, _key = "hookrightarrow;", _map[_key] = { k: _key, v: 8618 }, _key = "hopf;", _map[_key] = { k: _key, v: 120153 }, _key = "horbar;", _map[_key] = { k: _key, v: 8213 }, _key = "hscr;", _map[_key] = { k: _key, v: 119997 }, _key = "hslash;", _map[_key] = { k: _key, v: 8463 }, _key = "hstrok;", _map[_key] = { k: _key, v: 295 }, _key = "hybull;", _map[_key] = { k: _key, v: 8259 }, _key = "hyphen;", _map[_key] = { k: _key, v: 8208 }, _key = "iacute;", _map[_key] = { k: _key, v: 237 }, _key = "ic;", _map[_key] = { k: _key, v: 8291 }, _key = "icirc;", _map[_key] = { k: _key, v: 238 }, _key = "icy;", _map[_key] = { k: _key, v: 1080 }, _key = "iecy;", _map[_key] = { k: _key, v: 1077 }, _key = "iexcl;", _map[_key] = { k: _key, v: 161 }, _key = "iff;", _map[_key] = { k: _key, v: 8660 }, _key = "ifr;", _map[_key] = { k: _key, v: 120102 }, _key = "igrave;", _map[_key] = { k: _key, v: 236 }, _key = "ii;", _map[_key] = { k: _key, v: 8520 }, _key = "iiiint;", _map[_key] = { k: _key, v: 10764 }, _key = "iiint;", _map[_key] = { k: _key, v: 8749 }, _key = "iinfin;", _map[_key] = { k: _key, v: 10716 }, _key = "iiota;", _map[_key] = { k: _key, v: 8489 }, _key = "ijlig;", _map[_key] = { k: _key, v: 307 }, _key = "imacr;", _map[_key] = { k: _key, v: 299 }, _key = "image;", _map[_key] = { k: _key, v: 8465 }, _key = "imagline;", _map[_key] = { k: _key, v: 8464 }, _key = "imagpart;", _map[_key] = { k: _key, v: 8465 }, _key = "imath;", _map[_key] = { k: _key, v: 305 }, _key = "imof;", _map[_key] = { k: _key, v: 8887 }, _key = "imped;", _map[_key] = { k: _key, v: 437 }, _key = "in;", _map[_key] = { k: _key, v: 8712 }, _key = "incare;", _map[_key] = { k: _key, v: 8453 }, _key = "infin;", _map[_key] = { k: _key, v: 8734 }, _key = "infintie;", _map[_key] = { k: _key, v: 10717 }, _key = "inodot;", _map[_key] = { k: _key, v: 305 }, _key = "int;", _map[_key] = { k: _key, v: 8747 }, _key = "intcal;", _map[_key] = { k: _key, v: 8890 }, _key = "integers;", _map[_key] = { k: _key, v: 8484 }, _key = "intercal;", _map[_key] = { k: _key, v: 8890 }, _key = "intlarhk;", _map[_key] = { k: _key, v: 10775 }, _key = "intprod;", _map[_key] = { k: _key, v: 10812 }, _key = "iocy;", _map[_key] = { k: _key, v: 1105 }, _key = "iogon;", _map[_key] = { k: _key, v: 303 }, _key = "iopf;", _map[_key] = { k: _key, v: 120154 }, _key = "iota;", _map[_key] = { k: _key, v: 953 }, _key = "iprod;", _map[_key] = { k: _key, v: 10812 }, _key = "iquest;", _map[_key] = { k: _key, v: 191 }, _key = "iscr;", _map[_key] = { k: _key, v: 119998 }, _key = "isin;", _map[_key] = { k: _key, v: 8712 }, _key = "isinE;", _map[_key] = { k: _key, v: 8953 }, _key = "isindot;", _map[_key] = { k: _key, v: 8949 }, _key = "isins;", _map[_key] = { k: _key, v: 8948 }, _key = "isinsv;", _map[_key] = { k: _key, v: 8947 }, _key = "isinv;", _map[_key] = { k: _key, v: 8712 }, _key = "it;", _map[_key] = { k: _key, v: 8290 }, _key = "itilde;", _map[_key] = { k: _key, v: 297 }, _key = "iukcy;", _map[_key] = { k: _key, v: 1110 }, _key = "iuml;", _map[_key] = { k: _key, v: 239 }, _key = "jcirc;", _map[_key] = { k: _key, v: 309 }, _key = "jcy;", _map[_key] = { k: _key, v: 1081 }, _key = "jfr;", _map[_key] = { k: _key, v: 120103 }, _key = "jmath;", _map[_key] = { k: _key, v: 567 }, _key = "jopf;", _map[_key] = { k: _key, v: 120155 }, _key = "jscr;", _map[_key] = { k: _key, v: 119999 }, _key = "jsercy;", _map[_key] = { k: _key, v: 1112 }, _key = "jukcy;", _map[_key] = { k: _key, v: 1108 }, _key = "kappa;", _map[_key] = { k: _key, v: 954 }, _key = "kappav;", _map[_key] = { k: _key, v: 1008 }, _key = "kcedil;", _map[_key] = { k: _key, v: 311 }, _key = "kcy;", _map[_key] = { k: _key, v: 1082 }, _key = "kfr;", _map[_key] = { k: _key, v: 120104 }, _key = "kgreen;", _map[_key] = { k: _key, v: 312 }, _key = "khcy;", _map[_key] = { k: _key, v: 1093 }, _key = "kjcy;", _map[_key] = { k: _key, v: 1116 }, _key = "kopf;", _map[_key] = { k: _key, v: 120156 }, _key = "kscr;", _map[_key] = { k: _key, v: 120000 }, _key = "lAarr;", _map[_key] = { k: _key, v: 8666 }, _key = "lArr;", _map[_key] = { k: _key, v: 8656 }, _key = "lAtail;", _map[_key] = { k: _key, v: 10523 }, _key = "lBarr;", _map[_key] = { k: _key, v: 10510 }, _key = "lE;", _map[_key] = { k: _key, v: 8806 }, _key = "lEg;", _map[_key] = { k: _key, v: 10891 }, _key = "lHar;", _map[_key] = { k: _key, v: 10594 }, _key = "lacute;", _map[_key] = { k: _key, v: 314 }, _key = "laemptyv;", _map[_key] = { k: _key, v: 10676 }, _key = "lagran;", _map[_key] = { k: _key, v: 8466 }, _key = "lambda;", _map[_key] = { k: _key, v: 955 }, _key = "lang;", _map[_key] = { k: _key, v: 10216 }, _key = "langd;", _map[_key] = { k: _key, v: 10641 }, _key = "langle;", _map[_key] = { k: _key, v: 10216 }, _key = "lap;", _map[_key] = { k: _key, v: 10885 }, _key = "laquo;", _map[_key] = { k: _key, v: 171 }, _key = "larr;", _map[_key] = { k: _key, v: 8592 }, _key = "larrb;", _map[_key] = { k: _key, v: 8676 }, _key = "larrbfs;", _map[_key] = { k: _key, v: 10527 }, _key = "larrfs;", _map[_key] = { k: _key, v: 10525 }, _key = "larrhk;", _map[_key] = { k: _key, v: 8617 }, _key = "larrlp;", _map[_key] = { k: _key, v: 8619 }, _key = "larrpl;", _map[_key] = { k: _key, v: 10553 }, _key = "larrsim;", _map[_key] = { k: _key, v: 10611 }, _key = "larrtl;", _map[_key] = { k: _key, v: 8610 }, _key = "lat;", _map[_key] = { k: _key, v: 10923 }, _key = "latail;", _map[_key] = { k: _key, v: 10521 }, _key = "late;", _map[_key] = { k: _key, v: 10925 }, _key = "lbarr;", _map[_key] = { k: _key, v: 10508 }, _key = "lbbrk;", _map[_key] = { k: _key, v: 10098 }, _key = "lbrace;", _map[_key] = { k: _key, v: 123 }, _key = "lbrack;", _map[_key] = { k: _key, v: 91 }, _key = "lbrke;", _map[_key] = { k: _key, v: 10635 }, _key = "lbrksld;", _map[_key] = { k: _key, v: 10639 }, _key = "lbrkslu;", _map[_key] = { k: _key, v: 10637 }, _key = "lcaron;", _map[_key] = { k: _key, v: 318 }, _key = "lcedil;", _map[_key] = { k: _key, v: 316 }, _key = "lceil;", _map[_key] = { k: _key, v: 8968 }, _key = "lcub;", _map[_key] = { k: _key, v: 123 }, _key = "lcy;", _map[_key] = { k: _key, v: 1083 }, _key = "ldca;", _map[_key] = { k: _key, v: 10550 }, _key = "ldquo;", _map[_key] = { k: _key, v: 8220 }, _key = "ldquor;", _map[_key] = { k: _key, v: 8222 }, _key = "ldrdhar;", _map[_key] = { k: _key, v: 10599 }, _key = "ldrushar;", _map[_key] = { k: _key, v: 10571 }, _key = "ldsh;", _map[_key] = { k: _key, v: 8626 }, _key = "le;", _map[_key] = { k: _key, v: 8804 }, _key = "leftarrow;", _map[_key] = { k: _key, v: 8592 }, _key = "leftarrowtail;", _map[_key] = { k: _key, v: 8610 }, _key = "leftharpoondown;", _map[_key] = { k: _key, v: 8637 }, _key = "leftharpoonup;", _map[_key] = { k: _key, v: 8636 }, _key = "leftleftarrows;", _map[_key] = { k: _key, v: 8647 }, _key = "leftrightarrow;", _map[_key] = { k: _key, v: 8596 }, _key = "leftrightarrows;", _map[_key] = { k: _key, v: 8646 }, _key = "leftrightharpoons;", _map[_key] = { k: _key, v: 8651 }, _key = "leftrightsquigarrow;", _map[_key] = { k: _key, v: 8621 }, _key = "leftthreetimes;", _map[_key] = { k: _key, v: 8907 }, _key = "leg;", _map[_key] = { k: _key, v: 8922 }, _key = "leq;", _map[_key] = { k: _key, v: 8804 }, _key = "leqq;", _map[_key] = { k: _key, v: 8806 }, _key = "leqslant;", _map[_key] = { k: _key, v: 10877 }, _key = "les;", _map[_key] = { k: _key, v: 10877 }, _key = "lescc;", _map[_key] = { k: _key, v: 10920 }, _key = "lesdot;", _map[_key] = { k: _key, v: 10879 }, _key = "lesdoto;", _map[_key] = { k: _key, v: 10881 }, _key = "lesdotor;", _map[_key] = { k: _key, v: 10883 }, _key = "lesges;", _map[_key] = { k: _key, v: 10899 }, _key = "lessapprox;", _map[_key] = { k: _key, v: 10885 }, _key = "lessdot;", _map[_key] = { k: _key, v: 8918 }, _key = "lesseqgtr;", _map[_key] = { k: _key, v: 8922 }, _key = "lesseqqgtr;", _map[_key] = { k: _key, v: 10891 }, _key = "lessgtr;", _map[_key] = { k: _key, v: 8822 }, _key = "lesssim;", _map[_key] = { k: _key, v: 8818 }, _key = "lfisht;", _map[_key] = { k: _key, v: 10620 }, _key = "lfloor;", _map[_key] = { k: _key, v: 8970 }, _key = "lfr;", _map[_key] = { k: _key, v: 120105 }, _key = "lg;", _map[_key] = { k: _key, v: 8822 }, _key = "lgE;", _map[_key] = { k: _key, v: 10897 }, _key = "lhard;", _map[_key] = { k: _key, v: 8637 }, _key = "lharu;", _map[_key] = { k: _key, v: 8636 }, _key = "lharul;", _map[_key] = { k: _key, v: 10602 }, _key = "lhblk;", _map[_key] = { k: _key, v: 9604 }, _key = "ljcy;", _map[_key] = { k: _key, v: 1113 }, _key = "ll;", _map[_key] = { k: _key, v: 8810 }, _key = "llarr;", _map[_key] = { k: _key, v: 8647 }, _key = "llcorner;", _map[_key] = { k: _key, v: 8990 }, _key = "llhard;", _map[_key] = { k: _key, v: 10603 }, _key = "lltri;", _map[_key] = { k: _key, v: 9722 }, _key = "lmidot;", _map[_key] = { k: _key, v: 320 }, _key = "lmoust;", _map[_key] = { k: _key, v: 9136 }, _key = "lmoustache;", _map[_key] = { k: _key, v: 9136 }, _key = "lnE;", _map[_key] = { k: _key, v: 8808 }, _key = "lnap;", _map[_key] = { k: _key, v: 10889 }, _key = "lnapprox;", _map[_key] = { k: _key, v: 10889 }, _key = "lne;", _map[_key] = { k: _key, v: 10887 }, _key = "lneq;", _map[_key] = { k: _key, v: 10887 }, _key = "lneqq;", _map[_key] = { k: _key, v: 8808 }, _key = "lnsim;", _map[_key] = { k: _key, v: 8934 }, _key = "loang;", _map[_key] = { k: _key, v: 10220 }, _key = "loarr;", _map[_key] = { k: _key, v: 8701 }, _key = "lobrk;", _map[_key] = { k: _key, v: 10214 }, _key = "longleftarrow;", _map[_key] = { k: _key, v: 10229 }, _key = "longleftrightarrow;", _map[_key] = { k: _key, v: 10231 }, _key = "longmapsto;", _map[_key] = { k: _key, v: 10236 }, _key = "longrightarrow;", _map[_key] = { k: _key, v: 10230 }, _key = "looparrowleft;", _map[_key] = { k: _key, v: 8619 }, _key = "looparrowright;", _map[_key] = { k: _key, v: 8620 }, _key = "lopar;", _map[_key] = { k: _key, v: 10629 }, _key = "lopf;", _map[_key] = { k: _key, v: 120157 }, _key = "loplus;", _map[_key] = { k: _key, v: 10797 }, _key = "lotimes;", _map[_key] = { k: _key, v: 10804 }, _key = "lowast;", _map[_key] = { k: _key, v: 8727 }, _key = "lowbar;", _map[_key] = { k: _key, v: 95 }, _key = "loz;", _map[_key] = { k: _key, v: 9674 }, _key = "lozenge;", _map[_key] = { k: _key, v: 9674 }, _key = "lozf;", _map[_key] = { k: _key, v: 10731 }, _key = "lpar;", _map[_key] = { k: _key, v: 40 }, _key = "lparlt;", _map[_key] = { k: _key, v: 10643 }, _key = "lrarr;", _map[_key] = { k: _key, v: 8646 }, _key = "lrcorner;", _map[_key] = { k: _key, v: 8991 }, _key = "lrhar;", _map[_key] = { k: _key, v: 8651 }, _key = "lrhard;", _map[_key] = { k: _key, v: 10605 }, _key = "lrm;", _map[_key] = { k: _key, v: 8206 }, _key = "lrtri;", _map[_key] = { k: _key, v: 8895 }, _key = "lsaquo;", _map[_key] = { k: _key, v: 8249 }, _key = "lscr;", _map[_key] = { k: _key, v: 120001 }, _key = "lsh;", _map[_key] = { k: _key, v: 8624 }, _key = "lsim;", _map[_key] = { k: _key, v: 8818 }, _key = "lsime;", _map[_key] = { k: _key, v: 10893 }, _key = "lsimg;", _map[_key] = { k: _key, v: 10895 }, _key = "lsqb;", _map[_key] = { k: _key, v: 91 }, _key = "lsquo;", _map[_key] = { k: _key, v: 8216 }, _key = "lsquor;", _map[_key] = { k: _key, v: 8218 }, _key = "lstrok;", _map[_key] = { k: _key, v: 322 }, _key = "lt;", _map[_key] = { k: _key, v: 60 }, _key = "ltcc;", _map[_key] = { k: _key, v: 10918 }, _key = "ltcir;", _map[_key] = { k: _key, v: 10873 }, _key = "ltdot;", _map[_key] = { k: _key, v: 8918 }, _key = "lthree;", _map[_key] = { k: _key, v: 8907 }, _key = "ltimes;", _map[_key] = { k: _key, v: 8905 }, _key = "ltlarr;", _map[_key] = { k: _key, v: 10614 }, _key = "ltquest;", _map[_key] = { k: _key, v: 10875 }, _key = "ltrPar;", _map[_key] = { k: _key, v: 10646 }, _key = "ltri;", _map[_key] = { k: _key, v: 9667 }, _key = "ltrie;", _map[_key] = { k: _key, v: 8884 }, _key = "ltrif;", _map[_key] = { k: _key, v: 9666 }, _key = "lurdshar;", _map[_key] = { k: _key, v: 10570 }, _key = "luruhar;", _map[_key] = { k: _key, v: 10598 }, _key = "mDDot;", _map[_key] = { k: _key, v: 8762 }, _key = "macr;", _map[_key] = { k: _key, v: 175 }, _key = "male;", _map[_key] = { k: _key, v: 9794 }, _key = "malt;", _map[_key] = { k: _key, v: 10016 }, _key = "maltese;", _map[_key] = { k: _key, v: 10016 }, _key = "map;", _map[_key] = { k: _key, v: 8614 }, _key = "mapsto;", _map[_key] = { k: _key, v: 8614 }, _key = "mapstodown;", _map[_key] = { k: _key, v: 8615 }, _key = "mapstoleft;", _map[_key] = { k: _key, v: 8612 }, _key = "mapstoup;", _map[_key] = { k: _key, v: 8613 }, _key = "marker;", _map[_key] = { k: _key, v: 9646 }, _key = "mcomma;", _map[_key] = { k: _key, v: 10793 }, _key = "mcy;", _map[_key] = { k: _key, v: 1084 }, _key = "mdash;", _map[_key] = { k: _key, v: 8212 }, _key = "measuredangle;", _map[_key] = { k: _key, v: 8737 }, _key = "mfr;", _map[_key] = { k: _key, v: 120106 }, _key = "mho;", _map[_key] = { k: _key, v: 8487 }, _key = "micro;", _map[_key] = { k: _key, v: 181 }, _key = "mid;", _map[_key] = { k: _key, v: 8739 }, _key = "midast;", _map[_key] = { k: _key, v: 42 }, _key = "midcir;", _map[_key] = { k: _key, v: 10992 }, _key = "middot;", _map[_key] = { k: _key, v: 183 }, _key = "minus;", _map[_key] = { k: _key, v: 8722 }, _key = "minusb;", _map[_key] = { k: _key, v: 8863 }, _key = "minusd;", _map[_key] = { k: _key, v: 8760 }, _key = "minusdu;", _map[_key] = { k: _key, v: 10794 }, _key = "mlcp;", _map[_key] = { k: _key, v: 10971 }, _key = "mldr;", _map[_key] = { k: _key, v: 8230 }, _key = "mnplus;", _map[_key] = { k: _key, v: 8723 }, _key = "models;", _map[_key] = { k: _key, v: 8871 }, _key = "mopf;", _map[_key] = { k: _key, v: 120158 }, _key = "mp;", _map[_key] = { k: _key, v: 8723 }, _key = "mscr;", _map[_key] = { k: _key, v: 120002 }, _key = "mstpos;", _map[_key] = { k: _key, v: 8766 }, _key = "mu;", _map[_key] = { k: _key, v: 956 }, _key = "multimap;", _map[_key] = { k: _key, v: 8888 }, _key = "mumap;", _map[_key] = { k: _key, v: 8888 }, _key = "nLeftarrow;", _map[_key] = { k: _key, v: 8653 }, _key = "nLeftrightarrow;", _map[_key] = { k: _key, v: 8654 }, _key = "nRightarrow;", _map[_key] = { k: _key, v: 8655 }, _key = "nVDash;", _map[_key] = { k: _key, v: 8879 }, _key = "nVdash;", _map[_key] = { k: _key, v: 8878 }, _key = "nabla;", _map[_key] = { k: _key, v: 8711 }, _key = "nacute;", _map[_key] = { k: _key, v: 324 }, _key = "nap;", _map[_key] = { k: _key, v: 8777 }, _key = "napos;", _map[_key] = { k: _key, v: 329 }, _key = "napprox;", _map[_key] = { k: _key, v: 8777 }, _key = "natur;", _map[_key] = { k: _key, v: 9838 }, _key = "natural;", _map[_key] = { k: _key, v: 9838 }, _key = "naturals;", _map[_key] = { k: _key, v: 8469 }, _key = "nbsp;", _map[_key] = { k: _key, v: 160 }, _key = "ncap;", _map[_key] = { k: _key, v: 10819 }, _key = "ncaron;", _map[_key] = { k: _key, v: 328 }, _key = "ncedil;", _map[_key] = { k: _key, v: 326 }, _key = "ncong;", _map[_key] = { k: _key, v: 8775 }, _key = "ncup;", _map[_key] = { k: _key, v: 10818 }, _key = "ncy;", _map[_key] = { k: _key, v: 1085 }, _key = "ndash;", _map[_key] = { k: _key, v: 8211 }, _key = "ne;", _map[_key] = { k: _key, v: 8800 }, _key = "neArr;", _map[_key] = { k: _key, v: 8663 }, _key = "nearhk;", _map[_key] = { k: _key, v: 10532 }, _key = "nearr;", _map[_key] = { k: _key, v: 8599 }, _key = "nearrow;", _map[_key] = { k: _key, v: 8599 }, _key = "nequiv;", _map[_key] = { k: _key, v: 8802 }, _key = "nesear;", _map[_key] = { k: _key, v: 10536 }, _key = "nexist;", _map[_key] = { k: _key, v: 8708 }, _key = "nexists;", _map[_key] = { k: _key, v: 8708 }, _key = "nfr;", _map[_key] = { k: _key, v: 120107 }, _key = "nge;", _map[_key] = { k: _key, v: 8817 }, _key = "ngeq;", _map[_key] = { k: _key, v: 8817 }, _key = "ngsim;", _map[_key] = { k: _key, v: 8821 }, _key = "ngt;", _map[_key] = { k: _key, v: 8815 }, _key = "ngtr;", _map[_key] = { k: _key, v: 8815 }, _key = "nhArr;", _map[_key] = { k: _key, v: 8654 }, _key = "nharr;", _map[_key] = { k: _key, v: 8622 }, _key = "nhpar;", _map[_key] = { k: _key, v: 10994 }, _key = "ni;", _map[_key] = { k: _key, v: 8715 }, _key = "nis;", _map[_key] = { k: _key, v: 8956 }, _key = "nisd;", _map[_key] = { k: _key, v: 8954 }, _key = "niv;", _map[_key] = { k: _key, v: 8715 }, _key = "njcy;", _map[_key] = { k: _key, v: 1114 }, _key = "nlArr;", _map[_key] = { k: _key, v: 8653 }, _key = "nlarr;", _map[_key] = { k: _key, v: 8602 }, _key = "nldr;", _map[_key] = { k: _key, v: 8229 }, _key = "nle;", _map[_key] = { k: _key, v: 8816 }, _key = "nleftarrow;", _map[_key] = { k: _key, v: 8602 }, _key = "nleftrightarrow;", _map[_key] = { k: _key, v: 8622 }, _key = "nleq;", _map[_key] = { k: _key, v: 8816 }, _key = "nless;", _map[_key] = { k: _key, v: 8814 }, _key = "nlsim;", _map[_key] = { k: _key, v: 8820 }, _key = "nlt;", _map[_key] = { k: _key, v: 8814 }, _key = "nltri;", _map[_key] = { k: _key, v: 8938 }, _key = "nltrie;", _map[_key] = { k: _key, v: 8940 }, _key = "nmid;", _map[_key] = { k: _key, v: 8740 }, _key = "nopf;", _map[_key] = { k: _key, v: 120159 }, _key = "not;", _map[_key] = { k: _key, v: 172 }, _key = "notin;", _map[_key] = { k: _key, v: 8713 }, _key = "notinva;", _map[_key] = { k: _key, v: 8713 }, _key = "notinvb;", _map[_key] = { k: _key, v: 8951 }, _key = "notinvc;", _map[_key] = { k: _key, v: 8950 }, _key = "notni;", _map[_key] = { k: _key, v: 8716 }, _key = "notniva;", _map[_key] = { k: _key, v: 8716 }, _key = "notnivb;", _map[_key] = { k: _key, v: 8958 }, _key = "notnivc;", _map[_key] = { k: _key, v: 8957 }, _key = "npar;", _map[_key] = { k: _key, v: 8742 }, _key = "nparallel;", _map[_key] = { k: _key, v: 8742 }, _key = "npolint;", _map[_key] = { k: _key, v: 10772 }, _key = "npr;", _map[_key] = { k: _key, v: 8832 }, _key = "nprcue;", _map[_key] = { k: _key, v: 8928 }, _key = "nprec;", _map[_key] = { k: _key, v: 8832 }, _key = "nrArr;", _map[_key] = { k: _key, v: 8655 }, _key = "nrarr;", _map[_key] = { k: _key, v: 8603 }, _key = "nrightarrow;", _map[_key] = { k: _key, v: 8603 }, _key = "nrtri;", _map[_key] = { k: _key, v: 8939 }, _key = "nrtrie;", _map[_key] = { k: _key, v: 8941 }, _key = "nsc;", _map[_key] = { k: _key, v: 8833 }, _key = "nsccue;", _map[_key] = { k: _key, v: 8929 }, _key = "nscr;", _map[_key] = { k: _key, v: 120003 }, _key = "nshortmid;", _map[_key] = { k: _key, v: 8740 }, _key = "nshortparallel;", _map[_key] = { k: _key, v: 8742 }, _key = "nsim;", _map[_key] = { k: _key, v: 8769 }, _key = "nsime;", _map[_key] = { k: _key, v: 8772 }, _key = "nsimeq;", _map[_key] = { k: _key, v: 8772 }, _key = "nsmid;", _map[_key] = { k: _key, v: 8740 }, _key = "nspar;", _map[_key] = { k: _key, v: 8742 }, _key = "nsqsube;", _map[_key] = { k: _key, v: 8930 }, _key = "nsqsupe;", _map[_key] = { k: _key, v: 8931 }, _key = "nsub;", _map[_key] = { k: _key, v: 8836 }, _key = "nsube;", _map[_key] = { k: _key, v: 8840 }, _key = "nsubseteq;", _map[_key] = { k: _key, v: 8840 }, _key = "nsucc;", _map[_key] = { k: _key, v: 8833 }, _key = "nsup;", _map[_key] = { k: _key, v: 8837 }, _key = "nsupe;", _map[_key] = { k: _key, v: 8841 }, _key = "nsupseteq;", _map[_key] = { k: _key, v: 8841 }, _key = "ntgl;", _map[_key] = { k: _key, v: 8825 }, _key = "ntilde;", _map[_key] = { k: _key, v: 241 }, _key = "ntlg;", _map[_key] = { k: _key, v: 8824 }, _key = "ntriangleleft;", _map[_key] = { k: _key, v: 8938 }, _key = "ntrianglelefteq;", _map[_key] = { k: _key, v: 8940 }, _key = "ntriangleright;", _map[_key] = { k: _key, v: 8939 }, _key = "ntrianglerighteq;", _map[_key] = { k: _key, v: 8941 }, _key = "nu;", _map[_key] = { k: _key, v: 957 }, _key = "num;", _map[_key] = { k: _key, v: 35 }, _key = "numero;", _map[_key] = { k: _key, v: 8470 }, _key = "numsp;", _map[_key] = { k: _key, v: 8199 }, _key = "nvDash;", _map[_key] = { k: _key, v: 8877 }, _key = "nvHarr;", _map[_key] = { k: _key, v: 10500 }, _key = "nvdash;", _map[_key] = { k: _key, v: 8876 }, _key = "nvinfin;", _map[_key] = { k: _key, v: 10718 }, _key = "nvlArr;", _map[_key] = { k: _key, v: 10498 }, _key = "nvrArr;", _map[_key] = { k: _key, v: 10499 }, _key = "nwArr;", _map[_key] = { k: _key, v: 8662 }, _key = "nwarhk;", _map[_key] = { k: _key, v: 10531 }, _key = "nwarr;", _map[_key] = { k: _key, v: 8598 }, _key = "nwarrow;", _map[_key] = { k: _key, v: 8598 }, _key = "nwnear;", _map[_key] = { k: _key, v: 10535 }, _key = "oS;", _map[_key] = { k: _key, v: 9416 }, _key = "oacute;", _map[_key] = { k: _key, v: 243 }, _key = "oast;", _map[_key] = { k: _key, v: 8859 }, _key = "ocir;", _map[_key] = { k: _key, v: 8858 }, _key = "ocirc;", _map[_key] = { k: _key, v: 244 }, _key = "ocy;", _map[_key] = { k: _key, v: 1086 }, _key = "odash;", _map[_key] = { k: _key, v: 8861 }, _key = "odblac;", _map[_key] = { k: _key, v: 337 }, _key = "odiv;", _map[_key] = { k: _key, v: 10808 }, _key = "odot;", _map[_key] = { k: _key, v: 8857 }, _key = "odsold;", _map[_key] = { k: _key, v: 10684 }, _key = "oelig;", _map[_key] = { k: _key, v: 339 }, _key = "ofcir;", _map[_key] = { k: _key, v: 10687 }, _key = "ofr;", _map[_key] = { k: _key, v: 120108 }, _key = "ogon;", _map[_key] = { k: _key, v: 731 }, _key = "ograve;", _map[_key] = { k: _key, v: 242 }, _key = "ogt;", _map[_key] = { k: _key, v: 10689 }, _key = "ohbar;", _map[_key] = { k: _key, v: 10677 }, _key = "ohm;", _map[_key] = { k: _key, v: 937 }, _key = "oint;", _map[_key] = { k: _key, v: 8750 }, _key = "olarr;", _map[_key] = { k: _key, v: 8634 }, _key = "olcir;", _map[_key] = { k: _key, v: 10686 }, _key = "olcross;", _map[_key] = { k: _key, v: 10683 }, _key = "oline;", _map[_key] = { k: _key, v: 8254 }, _key = "olt;", _map[_key] = { k: _key, v: 10688 }, _key = "omacr;", _map[_key] = { k: _key, v: 333 }, _key = "omega;", _map[_key] = { k: _key, v: 969 }, _key = "omicron;", _map[_key] = { k: _key, v: 959 }, _key = "omid;", _map[_key] = { k: _key, v: 10678 }, _key = "ominus;", _map[_key] = { k: _key, v: 8854 }, _key = "oopf;", _map[_key] = { k: _key, v: 120160 }, _key = "opar;", _map[_key] = { k: _key, v: 10679 }, _key = "operp;", _map[_key] = { k: _key, v: 10681 }, _key = "oplus;", _map[_key] = { k: _key, v: 8853 }, _key = "or;", _map[_key] = { k: _key, v: 8744 }, _key = "orarr;", _map[_key] = { k: _key, v: 8635 }, _key = "ord;", _map[_key] = { k: _key, v: 10845 }, _key = "order;", _map[_key] = { k: _key, v: 8500 }, _key = "orderof;", _map[_key] = { k: _key, v: 8500 }, _key = "ordf;", _map[_key] = { k: _key, v: 170 }, _key = "ordm;", _map[_key] = { k: _key, v: 186 }, _key = "origof;", _map[_key] = { k: _key, v: 8886 }, _key = "oror;", _map[_key] = { k: _key, v: 10838 }, _key = "orslope;", _map[_key] = { k: _key, v: 10839 }, _key = "orv;", _map[_key] = { k: _key, v: 10843 }, _key = "oscr;", _map[_key] = { k: _key, v: 8500 }, _key = "oslash;", _map[_key] = { k: _key, v: 248 }, _key = "osol;", _map[_key] = { k: _key, v: 8856 }, _key = "otilde;", _map[_key] = { k: _key, v: 245 }, _key = "otimes;", _map[_key] = { k: _key, v: 8855 }, _key = "otimesas;", _map[_key] = { k: _key, v: 10806 }, _key = "ouml;", _map[_key] = { k: _key, v: 246 }, _key = "ovbar;", _map[_key] = { k: _key, v: 9021 }, _key = "par;", _map[_key] = { k: _key, v: 8741 }, _key = "para;", _map[_key] = { k: _key, v: 182 }, _key = "parallel;", _map[_key] = { k: _key, v: 8741 }, _key = "parsim;", _map[_key] = { k: _key, v: 10995 }, _key = "parsl;", _map[_key] = { k: _key, v: 11005 }, _key = "part;", _map[_key] = { k: _key, v: 8706 }, _key = "pcy;", _map[_key] = { k: _key, v: 1087 }, _key = "percnt;", _map[_key] = { k: _key, v: 37 }, _key = "period;", _map[_key] = { k: _key, v: 46 }, _key = "permil;", _map[_key] = { k: _key, v: 8240 }, _key = "perp;", _map[_key] = { k: _key, v: 8869 }, _key = "pertenk;", _map[_key] = { k: _key, v: 8241 }, _key = "pfr;", _map[_key] = { k: _key, v: 120109 }, _key = "phi;", _map[_key] = { k: _key, v: 966 }, _key = "phiv;", _map[_key] = { k: _key, v: 981 }, _key = "phmmat;", _map[_key] = { k: _key, v: 8499 }, _key = "phone;", _map[_key] = { k: _key, v: 9742 }, _key = "pi;", _map[_key] = { k: _key, v: 960 }, _key = "pitchfork;", _map[_key] = { k: _key, v: 8916 }, _key = "piv;", _map[_key] = { k: _key, v: 982 }, _key = "planck;", _map[_key] = { k: _key, v: 8463 }, _key = "planckh;", _map[_key] = { k: _key, v: 8462 }, _key = "plankv;", _map[_key] = { k: _key, v: 8463 }, _key = "plus;", _map[_key] = { k: _key, v: 43 }, _key = "plusacir;", _map[_key] = { k: _key, v: 10787 }, _key = "plusb;", _map[_key] = { k: _key, v: 8862 }, _key = "pluscir;", _map[_key] = { k: _key, v: 10786 }, _key = "plusdo;", _map[_key] = { k: _key, v: 8724 }, _key = "plusdu;", _map[_key] = { k: _key, v: 10789 }, _key = "pluse;", _map[_key] = { k: _key, v: 10866 }, _key = "plusmn;", _map[_key] = { k: _key, v: 177 }, _key = "plussim;", _map[_key] = { k: _key, v: 10790 }, _key = "plustwo;", _map[_key] = { k: _key, v: 10791 }, _key = "pm;", _map[_key] = { k: _key, v: 177 }, _key = "pointint;", _map[_key] = { k: _key, v: 10773 }, _key = "popf;", _map[_key] = { k: _key, v: 120161 }, _key = "pound;", _map[_key] = { k: _key, v: 163 }, _key = "pr;", _map[_key] = { k: _key, v: 8826 }, _key = "prE;", _map[_key] = { k: _key, v: 10931 }, _key = "prap;", _map[_key] = { k: _key, v: 10935 }, _key = "prcue;", _map[_key] = { k: _key, v: 8828 }, _key = "pre;", _map[_key] = { k: _key, v: 10927 }, _key = "prec;", _map[_key] = { k: _key, v: 8826 }, _key = "precapprox;", _map[_key] = { k: _key, v: 10935 }, _key = "preccurlyeq;", _map[_key] = { k: _key, v: 8828 }, _key = "preceq;", _map[_key] = { k: _key, v: 10927 }, _key = "precnapprox;", _map[_key] = { k: _key, v: 10937 }, _key = "precneqq;", _map[_key] = { k: _key, v: 10933 }, _key = "precnsim;", _map[_key] = { k: _key, v: 8936 }, _key = "precsim;", _map[_key] = { k: _key, v: 8830 }, _key = "prime;", _map[_key] = { k: _key, v: 8242 }, _key = "primes;", _map[_key] = { k: _key, v: 8473 }, _key = "prnE;", _map[_key] = { k: _key, v: 10933 }, _key = "prnap;", _map[_key] = { k: _key, v: 10937 }, _key = "prnsim;", _map[_key] = { k: _key, v: 8936 }, _key = "prod;", _map[_key] = { k: _key, v: 8719 }, _key = "profalar;", _map[_key] = { k: _key, v: 9006 }, _key = "profline;", _map[_key] = { k: _key, v: 8978 }, _key = "profsurf;", _map[_key] = { k: _key, v: 8979 }, _key = "prop;", _map[_key] = { k: _key, v: 8733 }, _key = "propto;", _map[_key] = { k: _key, v: 8733 }, _key = "prsim;", _map[_key] = { k: _key, v: 8830 }, _key = "prurel;", _map[_key] = { k: _key, v: 8880 }, _key = "pscr;", _map[_key] = { k: _key, v: 120005 }, _key = "psi;", _map[_key] = { k: _key, v: 968 }, _key = "puncsp;", _map[_key] = { k: _key, v: 8200 }, _key = "qfr;", _map[_key] = { k: _key, v: 120110 }, _key = "qint;", _map[_key] = { k: _key, v: 10764 }, _key = "qopf;", _map[_key] = { k: _key, v: 120162 }, _key = "qprime;", _map[_key] = { k: _key, v: 8279 }, _key = "qscr;", _map[_key] = { k: _key, v: 120006 }, _key = "quaternions;", _map[_key] = { k: _key, v: 8461 }, _key = "quatint;", _map[_key] = { k: _key, v: 10774 }, _key = "quest;", _map[_key] = { k: _key, v: 63 }, _key = "questeq;", _map[_key] = { k: _key, v: 8799 }, _key = "quot;", _map[_key] = { k: _key, v: 34 }, _key = "rAarr;", _map[_key] = { k: _key, v: 8667 }, _key = "rArr;", _map[_key] = { k: _key, v: 8658 }, _key = "rAtail;", _map[_key] = { k: _key, v: 10524 }, _key = "rBarr;", _map[_key] = { k: _key, v: 10511 }, _key = "rHar;", _map[_key] = { k: _key, v: 10596 }, _key = "racute;", _map[_key] = { k: _key, v: 341 }, _key = "radic;", _map[_key] = { k: _key, v: 8730 }, _key = "raemptyv;", _map[_key] = { k: _key, v: 10675 }, _key = "rang;", _map[_key] = { k: _key, v: 10217 }, _key = "rangd;", _map[_key] = { k: _key, v: 10642 }, _key = "range;", _map[_key] = { k: _key, v: 10661 }, _key = "rangle;", _map[_key] = { k: _key, v: 10217 }, _key = "raquo;", _map[_key] = { k: _key, v: 187 }, _key = "rarr;", _map[_key] = { k: _key, v: 8594 }, _key = "rarrap;", _map[_key] = { k: _key, v: 10613 }, _key = "rarrb;", _map[_key] = { k: _key, v: 8677 }, _key = "rarrbfs;", _map[_key] = { k: _key, v: 10528 }, _key = "rarrc;", _map[_key] = { k: _key, v: 10547 }, _key = "rarrfs;", _map[_key] = { k: _key, v: 10526 }, _key = "rarrhk;", _map[_key] = { k: _key, v: 8618 }, _key = "rarrlp;", _map[_key] = { k: _key, v: 8620 }, _key = "rarrpl;", _map[_key] = { k: _key, v: 10565 }, _key = "rarrsim;", _map[_key] = { k: _key, v: 10612 }, _key = "rarrtl;", _map[_key] = { k: _key, v: 8611 }, _key = "rarrw;", _map[_key] = { k: _key, v: 8605 }, _key = "ratail;", _map[_key] = { k: _key, v: 10522 }, _key = "ratio;", _map[_key] = { k: _key, v: 8758 }, _key = "rationals;", _map[_key] = { k: _key, v: 8474 }, _key = "rbarr;", _map[_key] = { k: _key, v: 10509 }, _key = "rbbrk;", _map[_key] = { k: _key, v: 10099 }, _key = "rbrace;", _map[_key] = { k: _key, v: 125 }, _key = "rbrack;", _map[_key] = { k: _key, v: 93 }, _key = "rbrke;", _map[_key] = { k: _key, v: 10636 }, _key = "rbrksld;", _map[_key] = { k: _key, v: 10638 }, _key = "rbrkslu;", _map[_key] = { k: _key, v: 10640 }, _key = "rcaron;", _map[_key] = { k: _key, v: 345 }, _key = "rcedil;", _map[_key] = { k: _key, v: 343 }, _key = "rceil;", _map[_key] = { k: _key, v: 8969 }, _key = "rcub;", _map[_key] = { k: _key, v: 125 }, _key = "rcy;", _map[_key] = { k: _key, v: 1088 }, _key = "rdca;", _map[_key] = { k: _key, v: 10551 }, _key = "rdldhar;", _map[_key] = { k: _key, v: 10601 }, _key = "rdquo;", _map[_key] = { k: _key, v: 8221 }, _key = "rdquor;", _map[_key] = { k: _key, v: 8221 }, _key = "rdsh;", _map[_key] = { k: _key, v: 8627 }, _key = "real;", _map[_key] = { k: _key, v: 8476 }, _key = "realine;", _map[_key] = { k: _key, v: 8475 }, _key = "realpart;", _map[_key] = { k: _key, v: 8476 }, _key = "reals;", _map[_key] = { k: _key, v: 8477 }, _key = "rect;", _map[_key] = { k: _key, v: 9645 }, _key = "reg;", _map[_key] = { k: _key, v: 174 }, _key = "rfisht;", _map[_key] = { k: _key, v: 10621 }, _key = "rfloor;", _map[_key] = { k: _key, v: 8971 }, _key = "rfr;", _map[_key] = { k: _key, v: 120111 }, _key = "rhard;", _map[_key] = { k: _key, v: 8641 }, _key = "rharu;", _map[_key] = { k: _key, v: 8640 }, _key = "rharul;", _map[_key] = { k: _key, v: 10604 }, _key = "rho;", _map[_key] = { k: _key, v: 961 }, _key = "rhov;", _map[_key] = { k: _key, v: 1009 }, _key = "rightarrow;", _map[_key] = { k: _key, v: 8594 }, _key = "rightarrowtail;", _map[_key] = { k: _key, v: 8611 }, _key = "rightharpoondown;", _map[_key] = { k: _key, v: 8641 }, _key = "rightharpoonup;", _map[_key] = { k: _key, v: 8640 }, _key = "rightleftarrows;", _map[_key] = { k: _key, v: 8644 }, _key = "rightleftharpoons;", _map[_key] = { k: _key, v: 8652 }, _key = "rightrightarrows;", _map[_key] = { k: _key, v: 8649 }, _key = "rightsquigarrow;", _map[_key] = { k: _key, v: 8605 }, _key = "rightthreetimes;", _map[_key] = { k: _key, v: 8908 }, _key = "ring;", _map[_key] = { k: _key, v: 730 }, _key = "risingdotseq;", _map[_key] = { k: _key, v: 8787 }, _key = "rlarr;", _map[_key] = { k: _key, v: 8644 }, _key = "rlhar;", _map[_key] = { k: _key, v: 8652 }, _key = "rlm;", _map[_key] = { k: _key, v: 8207 }, _key = "rmoust;", _map[_key] = { k: _key, v: 9137 }, _key = "rmoustache;", _map[_key] = { k: _key, v: 9137 }, _key = "rnmid;", _map[_key] = { k: _key, v: 10990 }, _key = "roang;", _map[_key] = { k: _key, v: 10221 }, _key = "roarr;", _map[_key] = { k: _key, v: 8702 }, _key = "robrk;", _map[_key] = { k: _key, v: 10215 }, _key = "ropar;", _map[_key] = { k: _key, v: 10630 }, _key = "ropf;", _map[_key] = { k: _key, v: 120163 }, _key = "roplus;", _map[_key] = { k: _key, v: 10798 }, _key = "rotimes;", _map[_key] = { k: _key, v: 10805 }, _key = "rpar;", _map[_key] = { k: _key, v: 41 }, _key = "rpargt;", _map[_key] = { k: _key, v: 10644 }, _key = "rppolint;", _map[_key] = { k: _key, v: 10770 }, _key = "rrarr;", _map[_key] = { k: _key, v: 8649 }, _key = "rsaquo;", _map[_key] = { k: _key, v: 8250 }, _key = "rscr;", _map[_key] = { k: _key, v: 120007 }, _key = "rsh;", _map[_key] = { k: _key, v: 8625 }, _key = "rsqb;", _map[_key] = { k: _key, v: 93 }, _key = "rsquo;", _map[_key] = { k: _key, v: 8217 }, _key = "rsquor;", _map[_key] = { k: _key, v: 8217 }, _key = "rthree;", _map[_key] = { k: _key, v: 8908 }, _key = "rtimes;", _map[_key] = { k: _key, v: 8906 }, _key = "rtri;", _map[_key] = { k: _key, v: 9657 }, _key = "rtrie;", _map[_key] = { k: _key, v: 8885 }, _key = "rtrif;", _map[_key] = { k: _key, v: 9656 }, _key = "rtriltri;", _map[_key] = { k: _key, v: 10702 }, _key = "ruluhar;", _map[_key] = { k: _key, v: 10600 }, _key = "rx;", _map[_key] = { k: _key, v: 8478 }, _key = "sacute;", _map[_key] = { k: _key, v: 347 }, _key = "sbquo;", _map[_key] = { k: _key, v: 8218 }, _key = "sc;", _map[_key] = { k: _key, v: 8827 }, _key = "scE;", _map[_key] = { k: _key, v: 10932 }, _key = "scap;", _map[_key] = { k: _key, v: 10936 }, _key = "scaron;", _map[_key] = { k: _key, v: 353 }, _key = "sccue;", _map[_key] = { k: _key, v: 8829 }, _key = "sce;", _map[_key] = { k: _key, v: 10928 }, _key = "scedil;", _map[_key] = { k: _key, v: 351 }, _key = "scirc;", _map[_key] = { k: _key, v: 349 }, _key = "scnE;", _map[_key] = { k: _key, v: 10934 }, _key = "scnap;", _map[_key] = { k: _key, v: 10938 }, _key = "scnsim;", _map[_key] = { k: _key, v: 8937 }, _key = "scpolint;", _map[_key] = { k: _key, v: 10771 }, _key = "scsim;", _map[_key] = { k: _key, v: 8831 }, _key = "scy;", _map[_key] = { k: _key, v: 1089 }, _key = "sdot;", _map[_key] = { k: _key, v: 8901 }, _key = "sdotb;", _map[_key] = { k: _key, v: 8865 }, _key = "sdote;", _map[_key] = { k: _key, v: 10854 }, _key = "seArr;", _map[_key] = { k: _key, v: 8664 }, _key = "searhk;", _map[_key] = { k: _key, v: 10533 }, _key = "searr;", _map[_key] = { k: _key, v: 8600 }, _key = "searrow;", _map[_key] = { k: _key, v: 8600 }, _key = "sect;", _map[_key] = { k: _key, v: 167 }, _key = "semi;", _map[_key] = { k: _key, v: 59 }, _key = "seswar;", _map[_key] = { k: _key, v: 10537 }, _key = "setminus;", _map[_key] = { k: _key, v: 8726 }, _key = "setmn;", _map[_key] = { k: _key, v: 8726 }, _key = "sext;", _map[_key] = { k: _key, v: 10038 }, _key = "sfr;", _map[_key] = { k: _key, v: 120112 }, _key = "sfrown;", _map[_key] = { k: _key, v: 8994 }, _key = "sharp;", _map[_key] = { k: _key, v: 9839 }, _key = "shchcy;", _map[_key] = { k: _key, v: 1097 }, _key = "shcy;", _map[_key] = { k: _key, v: 1096 }, _key = "shortmid;", _map[_key] = { k: _key, v: 8739 }, _key = "shortparallel;", _map[_key] = { k: _key, v: 8741 }, _key = "shy;", _map[_key] = { k: _key, v: 173 }, _key = "sigma;", _map[_key] = { k: _key, v: 963 }, _key = "sigmaf;", _map[_key] = { k: _key, v: 962 }, _key = "sigmav;", _map[_key] = { k: _key, v: 962 }, _key = "sim;", _map[_key] = { k: _key, v: 8764 }, _key = "simdot;", _map[_key] = { k: _key, v: 10858 }, _key = "sime;", _map[_key] = { k: _key, v: 8771 }, _key = "simeq;", _map[_key] = { k: _key, v: 8771 }, _key = "simg;", _map[_key] = { k: _key, v: 10910 }, _key = "simgE;", _map[_key] = { k: _key, v: 10912 }, _key = "siml;", _map[_key] = { k: _key, v: 10909 }, _key = "simlE;", _map[_key] = { k: _key, v: 10911 }, _key = "simne;", _map[_key] = { k: _key, v: 8774 }, _key = "simplus;", _map[_key] = { k: _key, v: 10788 }, _key = "simrarr;", _map[_key] = { k: _key, v: 10610 }, _key = "slarr;", _map[_key] = { k: _key, v: 8592 }, _key = "smallsetminus;", _map[_key] = { k: _key, v: 8726 }, _key = "smashp;", _map[_key] = { k: _key, v: 10803 }, _key = "smeparsl;", _map[_key] = { k: _key, v: 10724 }, _key = "smid;", _map[_key] = { k: _key, v: 8739 }, _key = "smile;", _map[_key] = { k: _key, v: 8995 }, _key = "smt;", _map[_key] = { k: _key, v: 10922 }, _key = "smte;", _map[_key] = { k: _key, v: 10924 }, _key = "softcy;", _map[_key] = { k: _key, v: 1100 }, _key = "sol;", _map[_key] = { k: _key, v: 47 }, _key = "solb;", _map[_key] = { k: _key, v: 10692 }, _key = "solbar;", _map[_key] = { k: _key, v: 9023 }, _key = "sopf;", _map[_key] = { k: _key, v: 120164 }, _key = "spades;", _map[_key] = { k: _key, v: 9824 }, _key = "spadesuit;", _map[_key] = { k: _key, v: 9824 }, _key = "spar;", _map[_key] = { k: _key, v: 8741 }, _key = "sqcap;", _map[_key] = { k: _key, v: 8851 }, _key = "sqcup;", _map[_key] = { k: _key, v: 8852 }, _key = "sqsub;", _map[_key] = { k: _key, v: 8847 }, _key = "sqsube;", _map[_key] = { k: _key, v: 8849 }, _key = "sqsubset;", _map[_key] = { k: _key, v: 8847 }, _key = "sqsubseteq;", _map[_key] = { k: _key, v: 8849 }, _key = "sqsup;", _map[_key] = { k: _key, v: 8848 }, _key = "sqsupe;", _map[_key] = { k: _key, v: 8850 }, _key = "sqsupset;", _map[_key] = { k: _key, v: 8848 }, _key = "sqsupseteq;", _map[_key] = { k: _key, v: 8850 }, _key = "squ;", _map[_key] = { k: _key, v: 9633 }, _key = "square;", _map[_key] = { k: _key, v: 9633 }, _key = "squarf;", _map[_key] = { k: _key, v: 9642 }, _key = "squf;", _map[_key] = { k: _key, v: 9642 }, _key = "srarr;", _map[_key] = { k: _key, v: 8594 }, _key = "sscr;", _map[_key] = { k: _key, v: 120008 }, _key = "ssetmn;", _map[_key] = { k: _key, v: 8726 }, _key = "ssmile;", _map[_key] = { k: _key, v: 8995 }, _key = "sstarf;", _map[_key] = { k: _key, v: 8902 }, _key = "star;", _map[_key] = { k: _key, v: 9734 }, _key = "starf;", _map[_key] = { k: _key, v: 9733 }, _key = "straightepsilon;", _map[_key] = { k: _key, v: 1013 }, _key = "straightphi;", _map[_key] = { k: _key, v: 981 }, _key = "strns;", _map[_key] = { k: _key, v: 175 }, _key = "sub;", _map[_key] = { k: _key, v: 8834 }, _key = "subE;", _map[_key] = { k: _key, v: 10949 }, _key = "subdot;", _map[_key] = { k: _key, v: 10941 }, _key = "sube;", _map[_key] = { k: _key, v: 8838 }, _key = "subedot;", _map[_key] = { k: _key, v: 10947 }, _key = "submult;", _map[_key] = { k: _key, v: 10945 }, _key = "subnE;", _map[_key] = { k: _key, v: 10955 }, _key = "subne;", _map[_key] = { k: _key, v: 8842 }, _key = "subplus;", _map[_key] = { k: _key, v: 10943 }, _key = "subrarr;", _map[_key] = { k: _key, v: 10617 }, _key = "subset;", _map[_key] = { k: _key, v: 8834 }, _key = "subseteq;", _map[_key] = { k: _key, v: 8838 }, _key = "subseteqq;", _map[_key] = { k: _key, v: 10949 }, _key = "subsetneq;", _map[_key] = { k: _key, v: 8842 }, _key = "subsetneqq;", _map[_key] = { k: _key, v: 10955 }, _key = "subsim;", _map[_key] = { k: _key, v: 10951 }, _key = "subsub;", _map[_key] = { k: _key, v: 10965 }, _key = "subsup;", _map[_key] = { k: _key, v: 10963 }, _key = "succ;", _map[_key] = { k: _key, v: 8827 }, _key = "succapprox;", _map[_key] = { k: _key, v: 10936 }, _key = "succcurlyeq;", _map[_key] = { k: _key, v: 8829 }, _key = "succeq;", _map[_key] = { k: _key, v: 10928 }, _key = "succnapprox;", _map[_key] = { k: _key, v: 10938 }, _key = "succneqq;", _map[_key] = { k: _key, v: 10934 }, _key = "succnsim;", _map[_key] = { k: _key, v: 8937 }, _key = "succsim;", _map[_key] = { k: _key, v: 8831 }, _key = "sum;", _map[_key] = { k: _key, v: 8721 }, _key = "sung;", _map[_key] = { k: _key, v: 9834 }, _key = "sup;", _map[_key] = { k: _key, v: 8835 }, _key = "sup1;", _map[_key] = { k: _key, v: 185 }, _key = "sup2;", _map[_key] = { k: _key, v: 178 }, _key = "sup3;", _map[_key] = { k: _key, v: 179 }, _key = "supE;", _map[_key] = { k: _key, v: 10950 }, _key = "supdot;", _map[_key] = { k: _key, v: 10942 }, _key = "supdsub;", _map[_key] = { k: _key, v: 10968 }, _key = "supe;", _map[_key] = { k: _key, v: 8839 }, _key = "supedot;", _map[_key] = { k: _key, v: 10948 }, _key = "suphsol;", _map[_key] = { k: _key, v: 10185 }, _key = "suphsub;", _map[_key] = { k: _key, v: 10967 }, _key = "suplarr;", _map[_key] = { k: _key, v: 10619 }, _key = "supmult;", _map[_key] = { k: _key, v: 10946 }, _key = "supnE;", _map[_key] = { k: _key, v: 10956 }, _key = "supne;", _map[_key] = { k: _key, v: 8843 }, _key = "supplus;", _map[_key] = { k: _key, v: 10944 }, _key = "supset;", _map[_key] = { k: _key, v: 8835 }, _key = "supseteq;", _map[_key] = { k: _key, v: 8839 }, _key = "supseteqq;", _map[_key] = { k: _key, v: 10950 }, _key = "supsetneq;", _map[_key] = { k: _key, v: 8843 }, _key = "supsetneqq;", _map[_key] = { k: _key, v: 10956 }, _key = "supsim;", _map[_key] = { k: _key, v: 10952 }, _key = "supsub;", _map[_key] = { k: _key, v: 10964 }, _key = "supsup;", _map[_key] = { k: _key, v: 10966 }, _key = "swArr;", _map[_key] = { k: _key, v: 8665 }, _key = "swarhk;", _map[_key] = { k: _key, v: 10534 }, _key = "swarr;", _map[_key] = { k: _key, v: 8601 }, _key = "swarrow;", _map[_key] = { k: _key, v: 8601 }, _key = "swnwar;", _map[_key] = { k: _key, v: 10538 }, _key = "szlig;", _map[_key] = { k: _key, v: 223 }, _key = "target;", _map[_key] = { k: _key, v: 8982 }, _key = "tau;", _map[_key] = { k: _key, v: 964 }, _key = "tbrk;", _map[_key] = { k: _key, v: 9140 }, _key = "tcaron;", _map[_key] = { k: _key, v: 357 }, _key = "tcedil;", _map[_key] = { k: _key, v: 355 }, _key = "tcy;", _map[_key] = { k: _key, v: 1090 }, _key = "tdot;", _map[_key] = { k: _key, v: 8411 }, _key = "telrec;", _map[_key] = { k: _key, v: 8981 }, _key = "tfr;", _map[_key] = { k: _key, v: 120113 }, _key = "there4;", _map[_key] = { k: _key, v: 8756 }, _key = "therefore;", _map[_key] = { k: _key, v: 8756 }, _key = "theta;", _map[_key] = { k: _key, v: 952 }, _key = "thetasym;", _map[_key] = { k: _key, v: 977 }, _key = "thetav;", _map[_key] = { k: _key, v: 977 }, _key = "thickapprox;", _map[_key] = { k: _key, v: 8776 }, _key = "thicksim;", _map[_key] = { k: _key, v: 8764 }, _key = "thinsp;", _map[_key] = { k: _key, v: 8201 }, _key = "thkap;", _map[_key] = { k: _key, v: 8776 }, _key = "thksim;", _map[_key] = { k: _key, v: 8764 }, _key = "thorn;", _map[_key] = { k: _key, v: 254 }, _key = "tilde;", _map[_key] = { k: _key, v: 732 }, _key = "times;", _map[_key] = { k: _key, v: 215 }, _key = "timesb;", _map[_key] = { k: _key, v: 8864 }, _key = "timesbar;", _map[_key] = { k: _key, v: 10801 }, _key = "timesd;", _map[_key] = { k: _key, v: 10800 }, _key = "tint;", _map[_key] = { k: _key, v: 8749 }, _key = "toea;", _map[_key] = { k: _key, v: 10536 }, _key = "top;", _map[_key] = { k: _key, v: 8868 }, _key = "topbot;", _map[_key] = { k: _key, v: 9014 }, _key = "topcir;", _map[_key] = { k: _key, v: 10993 }, _key = "topf;", _map[_key] = { k: _key, v: 120165 }, _key = "topfork;", _map[_key] = { k: _key, v: 10970 }, _key = "tosa;", _map[_key] = { k: _key, v: 10537 }, _key = "tprime;", _map[_key] = { k: _key, v: 8244 }, _key = "trade;", _map[_key] = { k: _key, v: 8482 }, _key = "triangle;", _map[_key] = { k: _key, v: 9653 }, _key = "triangledown;", _map[_key] = { k: _key, v: 9663 }, _key = "triangleleft;", _map[_key] = { k: _key, v: 9667 }, _key = "trianglelefteq;", _map[_key] = { k: _key, v: 8884 }, _key = "triangleq;", _map[_key] = { k: _key, v: 8796 }, _key = "triangleright;", _map[_key] = { k: _key, v: 9657 }, _key = "trianglerighteq;", _map[_key] = { k: _key, v: 8885 }, _key = "tridot;", _map[_key] = { k: _key, v: 9708 }, _key = "trie;", _map[_key] = { k: _key, v: 8796 }, _key = "triminus;", _map[_key] = { k: _key, v: 10810 }, _key = "triplus;", _map[_key] = { k: _key, v: 10809 }, _key = "trisb;", _map[_key] = { k: _key, v: 10701 }, _key = "tritime;", _map[_key] = { k: _key, v: 10811 }, _key = "trpezium;", _map[_key] = { k: _key, v: 9186 }, _key = "tscr;", _map[_key] = { k: _key, v: 120009 }, _key = "tscy;", _map[_key] = { k: _key, v: 1094 }, _key = "tshcy;", _map[_key] = { k: _key, v: 1115 }, _key = "tstrok;", _map[_key] = { k: _key, v: 359 }, _key = "twixt;", _map[_key] = { k: _key, v: 8812 }, _key = "twoheadleftarrow;", _map[_key] = { k: _key, v: 8606 }, _key = "twoheadrightarrow;", _map[_key] = { k: _key, v: 8608 }, _key = "uArr;", _map[_key] = { k: _key, v: 8657 }, _key = "uHar;", _map[_key] = { k: _key, v: 10595 }, _key = "uacute;", _map[_key] = { k: _key, v: 250 }, _key = "uarr;", _map[_key] = { k: _key, v: 8593 }, _key = "ubrcy;", _map[_key] = { k: _key, v: 1118 }, _key = "ubreve;", _map[_key] = { k: _key, v: 365 }, _key = "ucirc;", _map[_key] = { k: _key, v: 251 }, _key = "ucy;", _map[_key] = { k: _key, v: 1091 }, _key = "udarr;", _map[_key] = { k: _key, v: 8645 }, _key = "udblac;", _map[_key] = { k: _key, v: 369 }, _key = "udhar;", _map[_key] = { k: _key, v: 10606 }, _key = "ufisht;", _map[_key] = { k: _key, v: 10622 }, _key = "ufr;", _map[_key] = { k: _key, v: 120114 }, _key = "ugrave;", _map[_key] = { k: _key, v: 249 }, _key = "uharl;", _map[_key] = { k: _key, v: 8639 }, _key = "uharr;", _map[_key] = { k: _key, v: 8638 }, _key = "uhblk;", _map[_key] = { k: _key, v: 9600 }, _key = "ulcorn;", _map[_key] = { k: _key, v: 8988 }, _key = "ulcorner;", _map[_key] = { k: _key, v: 8988 }, _key = "ulcrop;", _map[_key] = { k: _key, v: 8975 }, _key = "ultri;", _map[_key] = { k: _key, v: 9720 }, _key = "umacr;", _map[_key] = { k: _key, v: 363 }, _key = "uml;", _map[_key] = { k: _key, v: 168 }, _key = "uogon;", _map[_key] = { k: _key, v: 371 }, _key = "uopf;", _map[_key] = { k: _key, v: 120166 }, _key = "uparrow;", _map[_key] = { k: _key, v: 8593 }, _key = "updownarrow;", _map[_key] = { k: _key, v: 8597 }, _key = "upharpoonleft;", _map[_key] = { k: _key, v: 8639 }, _key = "upharpoonright;", _map[_key] = { k: _key, v: 8638 }, _key = "uplus;", _map[_key] = { k: _key, v: 8846 }, _key = "upsi;", _map[_key] = { k: _key, v: 965 }, _key = "upsih;", _map[_key] = { k: _key, v: 978 }, _key = "upsilon;", _map[_key] = { k: _key, v: 965 }, _key = "upuparrows;", _map[_key] = { k: _key, v: 8648 }, _key = "urcorn;", _map[_key] = { k: _key, v: 8989 }, _key = "urcorner;", _map[_key] = { k: _key, v: 8989 }, _key = "urcrop;", _map[_key] = { k: _key, v: 8974 }, _key = "uring;", _map[_key] = { k: _key, v: 367 }, _key = "urtri;", _map[_key] = { k: _key, v: 9721 }, _key = "uscr;", _map[_key] = { k: _key, v: 120010 }, _key = "utdot;", _map[_key] = { k: _key, v: 8944 }, _key = "utilde;", _map[_key] = { k: _key, v: 361 }, _key = "utri;", _map[_key] = { k: _key, v: 9653 }, _key = "utrif;", _map[_key] = { k: _key, v: 9652 }, _key = "uuarr;", _map[_key] = { k: _key, v: 8648 }, _key = "uuml;", _map[_key] = { k: _key, v: 252 }, _key = "uwangle;", _map[_key] = { k: _key, v: 10663 }, _key = "vArr;", _map[_key] = { k: _key, v: 8661 }, _key = "vBar;", _map[_key] = { k: _key, v: 10984 }, _key = "vBarv;", _map[_key] = { k: _key, v: 10985 }, _key = "vDash;", _map[_key] = { k: _key, v: 8872 }, _key = "vangrt;", _map[_key] = { k: _key, v: 10652 }, _key = "varepsilon;", _map[_key] = { k: _key, v: 1013 }, _key = "varkappa;", _map[_key] = { k: _key, v: 1008 }, _key = "varnothing;", _map[_key] = { k: _key, v: 8709 }, _key = "varphi;", _map[_key] = { k: _key, v: 981 }, _key = "varpi;", _map[_key] = { k: _key, v: 982 }, _key = "varpropto;", _map[_key] = { k: _key, v: 8733 }, _key = "varr;", _map[_key] = { k: _key, v: 8597 }, _key = "varrho;", _map[_key] = { k: _key, v: 1009 }, _key = "varsigma;", _map[_key] = { k: _key, v: 962 }, _key = "vartheta;", _map[_key] = { k: _key, v: 977 }, _key = "vartriangleleft;", _map[_key] = { k: _key, v: 8882 }, _key = "vartriangleright;", _map[_key] = { k: _key, v: 8883 }, _key = "vcy;", _map[_key] = { k: _key, v: 1074 }, _key = "vdash;", _map[_key] = { k: _key, v: 8866 }, _key = "vee;", _map[_key] = { k: _key, v: 8744 }, _key = "veebar;", _map[_key] = { k: _key, v: 8891 }, _key = "veeeq;", _map[_key] = { k: _key, v: 8794 }, _key = "vellip;", _map[_key] = { k: _key, v: 8942 }, _key = "verbar;", _map[_key] = { k: _key, v: 124 }, _key = "vert;", _map[_key] = { k: _key, v: 124 }, _key = "vfr;", _map[_key] = { k: _key, v: 120115 }, _key = "vltri;", _map[_key] = { k: _key, v: 8882 }, _key = "vopf;", _map[_key] = { k: _key, v: 120167 }, _key = "vprop;", _map[_key] = { k: _key, v: 8733 }, _key = "vrtri;", _map[_key] = { k: _key, v: 8883 }, _key = "vscr;", _map[_key] = { k: _key, v: 120011 }, _key = "vzigzag;", _map[_key] = { k: _key, v: 10650 }, _key = "wcirc;", _map[_key] = { k: _key, v: 373 }, _key = "wedbar;", _map[_key] = { k: _key, v: 10847 }, _key = "wedge;", _map[_key] = { k: _key, v: 8743 }, _key = "wedgeq;", _map[_key] = { k: _key, v: 8793 }, _key = "weierp;", _map[_key] = { k: _key, v: 8472 }, _key = "wfr;", _map[_key] = { k: _key, v: 120116 }, _key = "wopf;", _map[_key] = { k: _key, v: 120168 }, _key = "wp;", _map[_key] = { k: _key, v: 8472 }, _key = "wr;", _map[_key] = { k: _key, v: 8768 }, _key = "wreath;", _map[_key] = { k: _key, v: 8768 }, _key = "wscr;", _map[_key] = { k: _key, v: 120012 }, _key = "xcap;", _map[_key] = { k: _key, v: 8898 }, _key = "xcirc;", _map[_key] = { k: _key, v: 9711 }, _key = "xcup;", _map[_key] = { k: _key, v: 8899 }, _key = "xdtri;", _map[_key] = { k: _key, v: 9661 }, _key = "xfr;", _map[_key] = { k: _key, v: 120117 }, _key = "xhArr;", _map[_key] = { k: _key, v: 10234 }, _key = "xharr;", _map[_key] = { k: _key, v: 10231 }, _key = "xi;", _map[_key] = { k: _key, v: 958 }, _key = "xlArr;", _map[_key] = { k: _key, v: 10232 }, _key = "xlarr;", _map[_key] = { k: _key, v: 10229 }, _key = "xmap;", _map[_key] = { k: _key, v: 10236 }, _key = "xnis;", _map[_key] = { k: _key, v: 8955 }, _key = "xodot;", _map[_key] = { k: _key, v: 10752 }, _key = "xopf;", _map[_key] = { k: _key, v: 120169 }, _key = "xoplus;", _map[_key] = { k: _key, v: 10753 }, _key = "xotime;", _map[_key] = { k: _key, v: 10754 }, _key = "xrArr;", _map[_key] = { k: _key, v: 10233 }, _key = "xrarr;", _map[_key] = { k: _key, v: 10230 }, _key = "xscr;", _map[_key] = { k: _key, v: 120013 }, _key = "xsqcup;", _map[_key] = { k: _key, v: 10758 }, _key = "xuplus;", _map[_key] = { k: _key, v: 10756 }, _key = "xutri;", _map[_key] = { k: _key, v: 9651 }, _key = "xvee;", _map[_key] = { k: _key, v: 8897 }, _key = "xwedge;", _map[_key] = { k: _key, v: 8896 }, _key = "yacute;", _map[_key] = { k: _key, v: 253 }, _key = "yacy;", _map[_key] = { k: _key, v: 1103 }, _key = "ycirc;", _map[_key] = { k: _key, v: 375 }, _key = "ycy;", _map[_key] = { k: _key, v: 1099 }, _key = "yen;", _map[_key] = { k: _key, v: 165 }, _key = "yfr;", _map[_key] = { k: _key, v: 120118 }, _key = "yicy;", _map[_key] = { k: _key, v: 1111 }, _key = "yopf;", _map[_key] = { k: _key, v: 120170 }, _key = "yscr;", _map[_key] = { k: _key, v: 120014 }, _key = "yucy;", _map[_key] = { k: _key, v: 1102 }, _key = "yuml;", _map[_key] = { k: _key, v: 255 }, _key = "zacute;", _map[_key] = { k: _key, v: 378 }, _key = "zcaron;", _map[_key] = { k: _key, v: 382 }, _key = "zcy;", _map[_key] = { k: _key, v: 1079 }, _key = "zdot;", _map[_key] = { k: _key, v: 380 }, _key = "zeetrf;", _map[_key] = { k: _key, v: 8488 }, _key = "zeta;", _map[_key] = { k: _key, v: 950 }, _key = "zfr;", _map[_key] = { k: _key, v: 120119 }, _key = "zhcy;", _map[_key] = { k: _key, v: 1078 }, _key = "zigrarr;", _map[_key] = { k: _key, v: 8669 }, _key = "zopf;", _map[_key] = { k: _key, v: 120171 }, _key = "zscr;", _map[_key] = { k: _key, v: 120015 }, _key = "zwj;", _map[_key] = { k: _key, v: 8205 }, _key = "zwnj;", _map[_key] = { k: _key, v: 8204 }, _key = "AElig", _map[_key] = { k: _key, v: 198 }, _key = "AMP", _map[_key] = { k: _key, v: 38 }, _key = "Aacute", _map[_key] = { k: _key, v: 193 }, _key = "Acirc", _map[_key] = { k: _key, v: 194 }, _key = "Agrave", _map[_key] = { k: _key, v: 192 }, _key = "Aring", _map[_key] = { k: _key, v: 197 }, _key = "Atilde", _map[_key] = { k: _key, v: 195 }, _key = "Auml", _map[_key] = { k: _key, v: 196 }, _key = "COPY", _map[_key] = { k: _key, v: 169 }, _key = "Ccedil", _map[_key] = { k: _key, v: 199 }, _key = "ETH", _map[_key] = { k: _key, v: 208 }, _key = "Eacute", _map[_key] = { k: _key, v: 201 }, _key = "Ecirc", _map[_key] = { k: _key, v: 202 }, _key = "Egrave", _map[_key] = { k: _key, v: 200 }, _key = "Euml", _map[_key] = { k: _key, v: 203 }, _key = "GT", _map[_key] = { k: _key, v: 62 }, _key = "Iacute", _map[_key] = { k: _key, v: 205 }, _key = "Icirc", _map[_key] = { k: _key, v: 206 }, _key = "Igrave", _map[_key] = { k: _key, v: 204 }, _key = "Iuml", _map[_key] = { k: _key, v: 207 }, _key = "LT", _map[_key] = { k: _key, v: 60 }, _key = "Ntilde", _map[_key] = { k: _key, v: 209 }, _key = "Oacute", _map[_key] = { k: _key, v: 211 }, _key = "Ocirc", _map[_key] = { k: _key, v: 212 }, _key = "Ograve", _map[_key] = { k: _key, v: 210 }, _key = "Oslash", _map[_key] = { k: _key, v: 216 }, _key = "Otilde", _map[_key] = { k: _key, v: 213 }, _key = "Ouml", _map[_key] = { k: _key, v: 214 }, _key = "QUOT", _map[_key] = { k: _key, v: 34 }, _key = "REG", _map[_key] = { k: _key, v: 174 }, _key = "THORN", _map[_key] = { k: _key, v: 222 }, _key = "Uacute", _map[_key] = { k: _key, v: 218 }, _key = "Ucirc", _map[_key] = { k: _key, v: 219 }, _key = "Ugrave", _map[_key] = { k: _key, v: 217 }, _key = "Uuml", _map[_key] = { k: _key, v: 220 }, _key = "Yacute", _map[_key] = { k: _key, v: 221 }, _key = "aacute", _map[_key] = { k: _key, v: 225 }, _key = "acirc", _map[_key] = { k: _key, v: 226 }, _key = "acute", _map[_key] = { k: _key, v: 180 }, _key = "aelig", _map[_key] = { k: _key, v: 230 }, _key = "agrave", _map[_key] = { k: _key, v: 224 }, _key = "amp", _map[_key] = { k: _key, v: 38 }, _key = "aring", _map[_key] = { k: _key, v: 229 }, _key = "atilde", _map[_key] = { k: _key, v: 227 }, _key = "auml", _map[_key] = { k: _key, v: 228 }, _key = "brvbar", _map[_key] = { k: _key, v: 166 }, _key = "ccedil", _map[_key] = { k: _key, v: 231 }, _key = "cedil", _map[_key] = { k: _key, v: 184 }, _key = "cent", _map[_key] = { k: _key, v: 162 }, _key = "copy", _map[_key] = { k: _key, v: 169 }, _key = "curren", _map[_key] = { k: _key, v: 164 }, _key = "deg", _map[_key] = { k: _key, v: 176 }, _key = "divide", _map[_key] = { k: _key, v: 247 }, _key = "eacute", _map[_key] = { k: _key, v: 233 }, _key = "ecirc", _map[_key] = { k: _key, v: 234 }, _key = "egrave", _map[_key] = { k: _key, v: 232 }, _key = "eth", _map[_key] = { k: _key, v: 240 }, _key = "euml", _map[_key] = { k: _key, v: 235 }, _key = "frac12", _map[_key] = { k: _key, v: 189 }, _key = "frac14", _map[_key] = { k: _key, v: 188 }, _key = "frac34", _map[_key] = { k: _key, v: 190 }, _key = "gt", _map[_key] = { k: _key, v: 62 }, _key = "iacute", _map[_key] = { k: _key, v: 237 }, _key = "icirc", _map[_key] = { k: _key, v: 238 }, _key = "iexcl", _map[_key] = { k: _key, v: 161 }, _key = "igrave", _map[_key] = { k: _key, v: 236 }, _key = "iquest", _map[_key] = { k: _key, v: 191 }, _key = "iuml", _map[_key] = { k: _key, v: 239 }, _key = "laquo", _map[_key] = { k: _key, v: 171 }, _key = "lt", _map[_key] = { k: _key, v: 60 }, _key = "macr", _map[_key] = { k: _key, v: 175 }, _key = "micro", _map[_key] = { k: _key, v: 181 }, _key = "middot", _map[_key] = { k: _key, v: 183 }, _key = "nbsp", _map[_key] = { k: _key, v: 160 }, _key = "not", _map[_key] = { k: _key, v: 172 }, _key = "ntilde", _map[_key] = { k: _key, v: 241 }, _key = "oacute", _map[_key] = { k: _key, v: 243 }, _key = "ocirc", _map[_key] = { k: _key, v: 244 }, _key = "ograve", _map[_key] = { k: _key, v: 242 }, _key = "ordf", _map[_key] = { k: _key, v: 170 }, _key = "ordm", _map[_key] = { k: _key, v: 186 }, _key = "oslash", _map[_key] = { k: _key, v: 248 }, _key = "otilde", _map[_key] = { k: _key, v: 245 }, _key = "ouml", _map[_key] = { k: _key, v: 246 }, _key = "para", _map[_key] = { k: _key, v: 182 }, _key = "plusmn", _map[_key] = { k: _key, v: 177 }, _key = "pound", _map[_key] = { k: _key, v: 163 }, _key = "quot", _map[_key] = { k: _key, v: 34 }, _key = "raquo", _map[_key] = { k: _key, v: 187 }, _key = "reg", _map[_key] = { k: _key, v: 174 }, _key = "sect", _map[_key] = { k: _key, v: 167 }, _key = "shy", _map[_key] = { k: _key, v: 173 }, _key = "sup1", _map[_key] = { k: _key, v: 185 }, _key = "sup2", _map[_key] = { k: _key, v: 178 }, _key = "sup3", _map[_key] = { k: _key, v: 179 }, _key = "szlig", _map[_key] = { k: _key, v: 223 }, _key = "thorn", _map[_key] = { k: _key, v: 254 }, _key = "times", _map[_key] = { k: _key, v: 215 }, _key = "uacute", _map[_key] = { k: _key, v: 250 }, _key = "ucirc", _map[_key] = { k: _key, v: 251 }, _key = "ugrave", _map[_key] = { k: _key, v: 249 }, _key = "uml", _map[_key] = { k: _key, v: 168 }, _key = "uuml", _map[_key] = { k: _key, v: 252 }, _key = "yacute", _map[_key] = { k: _key, v: 253 }, _key = "yen", _map[_key] = { k: _key, v: 165 }, _key = "yuml", _map[_key] = { k: _key, v: 255 }, _map);
		var _map$1, _key$1;
		entity2 = (_map$1 = new Go$Map(), _key$1 = "NotEqualTilde;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8770, 824]) }, _key$1 = "NotGreaterFullEqual;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8807, 824]) }, _key$1 = "NotGreaterGreater;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8811, 824]) }, _key$1 = "NotGreaterSlantEqual;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10878, 824]) }, _key$1 = "NotHumpDownHump;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8782, 824]) }, _key$1 = "NotHumpEqual;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8783, 824]) }, _key$1 = "NotLeftTriangleBar;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10703, 824]) }, _key$1 = "NotLessLess;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8810, 824]) }, _key$1 = "NotLessSlantEqual;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10877, 824]) }, _key$1 = "NotNestedGreaterGreater;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10914, 824]) }, _key$1 = "NotNestedLessLess;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10913, 824]) }, _key$1 = "NotPrecedesEqual;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10927, 824]) }, _key$1 = "NotRightTriangleBar;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10704, 824]) }, _key$1 = "NotSquareSubset;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8847, 824]) }, _key$1 = "NotSquareSuperset;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8848, 824]) }, _key$1 = "NotSubset;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8834, 8402]) }, _key$1 = "NotSucceedsEqual;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10928, 824]) }, _key$1 = "NotSucceedsTilde;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8831, 824]) }, _key$1 = "NotSuperset;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8835, 8402]) }, _key$1 = "ThickSpace;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8287, 8202]) }, _key$1 = "acE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8766, 819]) }, _key$1 = "bne;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [61, 8421]) }, _key$1 = "bnequiv;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8801, 8421]) }, _key$1 = "caps;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8745, 65024]) }, _key$1 = "cups;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8746, 65024]) }, _key$1 = "fjlig;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [102, 106]) }, _key$1 = "gesl;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8923, 65024]) }, _key$1 = "gvertneqq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8809, 65024]) }, _key$1 = "gvnE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8809, 65024]) }, _key$1 = "lates;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10925, 65024]) }, _key$1 = "lesg;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8922, 65024]) }, _key$1 = "lvertneqq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8808, 65024]) }, _key$1 = "lvnE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8808, 65024]) }, _key$1 = "nGg;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8921, 824]) }, _key$1 = "nGtv;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8811, 824]) }, _key$1 = "nLl;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8920, 824]) }, _key$1 = "nLtv;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8810, 824]) }, _key$1 = "nang;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8736, 8402]) }, _key$1 = "napE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10864, 824]) }, _key$1 = "napid;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8779, 824]) }, _key$1 = "nbump;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8782, 824]) }, _key$1 = "nbumpe;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8783, 824]) }, _key$1 = "ncongdot;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10861, 824]) }, _key$1 = "nedot;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8784, 824]) }, _key$1 = "nesim;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8770, 824]) }, _key$1 = "ngE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8807, 824]) }, _key$1 = "ngeqq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8807, 824]) }, _key$1 = "ngeqslant;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10878, 824]) }, _key$1 = "nges;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10878, 824]) }, _key$1 = "nlE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8806, 824]) }, _key$1 = "nleqq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8806, 824]) }, _key$1 = "nleqslant;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10877, 824]) }, _key$1 = "nles;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10877, 824]) }, _key$1 = "notinE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8953, 824]) }, _key$1 = "notindot;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8949, 824]) }, _key$1 = "nparsl;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [11005, 8421]) }, _key$1 = "npart;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8706, 824]) }, _key$1 = "npre;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10927, 824]) }, _key$1 = "npreceq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10927, 824]) }, _key$1 = "nrarrc;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10547, 824]) }, _key$1 = "nrarrw;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8605, 824]) }, _key$1 = "nsce;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10928, 824]) }, _key$1 = "nsubE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10949, 824]) }, _key$1 = "nsubset;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8834, 8402]) }, _key$1 = "nsubseteqq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10949, 824]) }, _key$1 = "nsucceq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10928, 824]) }, _key$1 = "nsupE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10950, 824]) }, _key$1 = "nsupset;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8835, 8402]) }, _key$1 = "nsupseteqq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10950, 824]) }, _key$1 = "nvap;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8781, 8402]) }, _key$1 = "nvge;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8805, 8402]) }, _key$1 = "nvgt;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [62, 8402]) }, _key$1 = "nvle;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8804, 8402]) }, _key$1 = "nvlt;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [60, 8402]) }, _key$1 = "nvltrie;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8884, 8402]) }, _key$1 = "nvrtrie;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8885, 8402]) }, _key$1 = "nvsim;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8764, 8402]) }, _key$1 = "race;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8765, 817]) }, _key$1 = "smtes;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10924, 65024]) }, _key$1 = "sqcaps;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8851, 65024]) }, _key$1 = "sqcups;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8852, 65024]) }, _key$1 = "varsubsetneq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8842, 65024]) }, _key$1 = "varsubsetneqq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10955, 65024]) }, _key$1 = "varsupsetneq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8843, 65024]) }, _key$1 = "varsupsetneqq;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10956, 65024]) }, _key$1 = "vnsub;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8834, 8402]) }, _key$1 = "vnsup;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8835, 8402]) }, _key$1 = "vsubnE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10955, 65024]) }, _key$1 = "vsubne;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8842, 65024]) }, _key$1 = "vsupnE;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [10956, 65024]) }, _key$1 = "vsupne;", _map$1[_key$1] = { k: _key$1, v: go$toNativeArray("Int32", [8843, 65024]) }, _map$1);
		replacementTable = go$toNativeArray("Int32", [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352, 8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732, 8482, 353, 8250, 339, 157, 382, 376]);
	}
	return go$pkg;
})();
go$packages["path/filepath"] = (function() {
	var go$pkg = {}, errors = go$packages["errors"], os = go$packages["os"], runtime = go$packages["runtime"], sort = go$packages["sort"], strings = go$packages["strings"], utf8 = go$packages["unicode/utf8"], syscall = go$packages["syscall"], lazybuf, Match, scanChunk, matchChunk, getEsc, Glob, glob, hasMeta, Clean, FromSlash, Split, Join, Base, VolumeName, isSlash, volumeNameLen;
	lazybuf = go$pkg.lazybuf = go$newType(0, "Struct", "filepath.lazybuf", "lazybuf", "path/filepath", function(path_, buf_, w_, volAndPath_, volLen_) {
		this.go$val = this;
		this.path = path_ !== undefined ? path_ : "";
		this.buf = buf_ !== undefined ? buf_ : (go$sliceType(Go$Uint8)).nil;
		this.w = w_ !== undefined ? w_ : 0;
		this.volAndPath = volAndPath_ !== undefined ? volAndPath_ : "";
		this.volLen = volLen_ !== undefined ? volLen_ : 0;
	});
	Match = go$pkg.Match = function(pattern, name) {
		var matched, err, star, chunk, _tuple, _tuple$1, _tuple$2, t, ok, err$1, _tuple$3, i, _tuple$4, t$1, ok$1, err$2, _tuple$5, _tuple$6, _tuple$7;
		matched = false;
		err = null;
		Pattern:
		while (pattern.length > 0) {
			star = false;
			chunk = "";
			_tuple = scanChunk(pattern); star = _tuple[0]; chunk = _tuple[1]; pattern = _tuple[2];
			if (star && chunk === "") {
				_tuple$1 = [strings.Index(name, "\\") < 0, null]; matched = _tuple$1[0]; err = _tuple$1[1];
				return [matched, err];
			}
			_tuple$2 = matchChunk(chunk, name); t = _tuple$2[0]; ok = _tuple$2[1]; err$1 = _tuple$2[2];
			if (ok && ((t.length === 0) || pattern.length > 0)) {
				name = t;
				continue;
			}
			if (!(go$interfaceIsEqual(err$1, null))) {
				_tuple$3 = [false, err$1]; matched = _tuple$3[0]; err = _tuple$3[1];
				return [matched, err];
			}
			if (star) {
				i = 0;
				while (i < name.length && !((name.charCodeAt(i) === 92))) {
					_tuple$4 = matchChunk(chunk, name.substring((i + 1 >> 0))); t$1 = _tuple$4[0]; ok$1 = _tuple$4[1]; err$2 = _tuple$4[2];
					if (ok$1) {
						if ((pattern.length === 0) && t$1.length > 0) {
							i = i + 1 >> 0;
							continue;
						}
						name = t$1;
						continue Pattern;
					}
					if (!(go$interfaceIsEqual(err$2, null))) {
						_tuple$5 = [false, err$2]; matched = _tuple$5[0]; err = _tuple$5[1];
						return [matched, err];
					}
					i = i + 1 >> 0;
				}
			}
			_tuple$6 = [false, null]; matched = _tuple$6[0]; err = _tuple$6[1];
			return [matched, err];
		}
		_tuple$7 = [name.length === 0, null]; matched = _tuple$7[0]; err = _tuple$7[1];
		return [matched, err];
	};
	scanChunk = function(pattern) {
		var star, chunk, rest, inrange, i, _ref, _tuple;
		star = false;
		chunk = "";
		rest = "";
		while (pattern.length > 0 && (pattern.charCodeAt(0) === 42)) {
			pattern = pattern.substring(1);
			star = true;
		}
		inrange = false;
		i = 0;
		i = 0;
		Scan:
		while (i < pattern.length) {
			_ref = pattern.charCodeAt(i);
			if (_ref === 92) {
			} else if (_ref === 91) {
				inrange = true;
			} else if (_ref === 93) {
				inrange = false;
			} else if (_ref === 42) {
				if (!inrange) {
					break Scan;
				}
			}
			i = i + 1 >> 0;
		}
		_tuple = [star, pattern.substring(0, i), pattern.substring(i)]; star = _tuple[0]; chunk = _tuple[1]; rest = _tuple[2];
		return [star, chunk, rest];
	};
	matchChunk = function(chunk, s) {
		var rest, ok, err, _ref, _tuple, r, n, negated, match, nrange, _tuple$1, lo, hi, _tuple$2, _tuple$3, _tuple$4, n$1, _tuple$5;
		rest = "";
		ok = false;
		err = null;
		while (chunk.length > 0) {
			if (s.length === 0) {
				return [rest, ok, err];
			}
			_ref = chunk.charCodeAt(0);
			if (_ref === 91) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; n = _tuple[1];
				s = s.substring(n);
				chunk = chunk.substring(1);
				if (chunk.length === 0) {
					err = go$pkg.ErrBadPattern;
					return [rest, ok, err];
				}
				negated = chunk.charCodeAt(0) === 94;
				if (negated) {
					chunk = chunk.substring(1);
				}
				match = false;
				nrange = 0;
				while (true) {
					if (chunk.length > 0 && (chunk.charCodeAt(0) === 93) && nrange > 0) {
						chunk = chunk.substring(1);
						break;
					}
					_tuple$1 = [0, 0]; lo = _tuple$1[0]; hi = _tuple$1[1];
					_tuple$2 = getEsc(chunk); lo = _tuple$2[0]; chunk = _tuple$2[1]; err = _tuple$2[2];
					if (!(go$interfaceIsEqual(err, null))) {
						return [rest, ok, err];
					}
					hi = lo;
					if (chunk.charCodeAt(0) === 45) {
						_tuple$3 = getEsc(chunk.substring(1)); hi = _tuple$3[0]; chunk = _tuple$3[1]; err = _tuple$3[2];
						if (!(go$interfaceIsEqual(err, null))) {
							return [rest, ok, err];
						}
					}
					if (lo <= r && r <= hi) {
						match = true;
					}
					nrange = nrange + 1 >> 0;
				}
				if (match === negated) {
					return [rest, ok, err];
				}
			} else if (_ref === 63) {
				if (s.charCodeAt(0) === 92) {
					return [rest, ok, err];
				}
				_tuple$4 = utf8.DecodeRuneInString(s); n$1 = _tuple$4[1];
				s = s.substring(n$1);
				chunk = chunk.substring(1);
			} else if (_ref === 92) {
				if (!((chunk.charCodeAt(0) === s.charCodeAt(0)))) {
					return [rest, ok, err];
				}
				s = s.substring(1);
				chunk = chunk.substring(1);
			} else {
				if (!((chunk.charCodeAt(0) === s.charCodeAt(0)))) {
					return [rest, ok, err];
				}
				s = s.substring(1);
				chunk = chunk.substring(1);
			}
		}
		_tuple$5 = [s, true, null]; rest = _tuple$5[0]; ok = _tuple$5[1]; err = _tuple$5[2];
		return [rest, ok, err];
	};
	getEsc = function(chunk) {
		var r, nchunk, err, _tuple, n;
		r = 0;
		nchunk = "";
		err = null;
		if ((chunk.length === 0) || (chunk.charCodeAt(0) === 45) || (chunk.charCodeAt(0) === 93)) {
			err = go$pkg.ErrBadPattern;
			return [r, nchunk, err];
		}
		if ((chunk.charCodeAt(0) === 92) && false) {
			chunk = chunk.substring(1);
			if (chunk.length === 0) {
				err = go$pkg.ErrBadPattern;
				return [r, nchunk, err];
			}
		}
		_tuple = utf8.DecodeRuneInString(chunk); r = _tuple[0]; n = _tuple[1];
		if ((r === 65533) && (n === 1)) {
			err = go$pkg.ErrBadPattern;
		}
		nchunk = chunk.substring(n);
		if (nchunk.length === 0) {
			err = go$pkg.ErrBadPattern;
		}
		return [r, nchunk, err];
	};
	Glob = go$pkg.Glob = function(pattern) {
		var matches, err, _tuple, _tuple$1, _tuple$2, _tuple$3, dir, file, _ref, _tuple$4, m, _tuple$5, _ref$1, _i, _slice, _index, d, _tuple$6;
		matches = (go$sliceType(Go$String)).nil;
		err = null;
		if (!hasMeta(pattern)) {
			_tuple = os.Stat(pattern); err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				_tuple$1 = [(go$sliceType(Go$String)).nil, null]; matches = _tuple$1[0]; err = _tuple$1[1];
				return [matches, err];
			}
			_tuple$2 = [new (go$sliceType(Go$String))([pattern]), null]; matches = _tuple$2[0]; err = _tuple$2[1];
			return [matches, err];
		}
		_tuple$3 = Split(pattern); dir = _tuple$3[0]; file = _tuple$3[1];
		_ref = dir;
		if (_ref === "") {
			dir = ".";
		} else if (_ref === "\\") {
		} else {
			dir = dir.substring(0, (dir.length - 1 >> 0));
		}
		if (!hasMeta(dir)) {
			_tuple$4 = glob(dir, file, (go$sliceType(Go$String)).nil); matches = _tuple$4[0]; err = _tuple$4[1];
			return [matches, err];
		}
		m = (go$sliceType(Go$String)).nil;
		_tuple$5 = Glob(dir); m = _tuple$5[0]; err = _tuple$5[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [matches, err];
		}
		_ref$1 = m;
		_i = 0;
		while (_i < _ref$1.length) {
			d = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_tuple$6 = glob(d, file, matches); matches = _tuple$6[0]; err = _tuple$6[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [matches, err];
			}
			_i++;
		}
		return [matches, err];
	};
	glob = function(dir, pattern, matches) {
		var m, e, _tuple, fi, err, _tuple$1, d, _tuple$2, names, _ref, _i, _slice, _index, n, _tuple$3, matched, err$1, _tuple$4;
		m = (go$sliceType(Go$String)).nil;
		e = null;
		var go$deferred = [];
		try {
			m = matches;
			_tuple = os.Stat(dir); fi = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [m, e];
			}
			if (!fi.IsDir()) {
				return [m, e];
			}
			_tuple$1 = os.Open(dir); d = _tuple$1[0]; err = _tuple$1[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [m, e];
			}
			go$deferred.push({ recv: d, method: "Close", args: [] });
			_tuple$2 = d.Readdirnames(-1); names = _tuple$2[0]; err = _tuple$2[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [m, e];
			}
			sort.Strings(names);
			_ref = names;
			_i = 0;
			while (_i < _ref.length) {
				n = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				_tuple$3 = Match(pattern, n); matched = _tuple$3[0]; err$1 = _tuple$3[1];
				if (!(go$interfaceIsEqual(err$1, null))) {
					_tuple$4 = [m, err$1]; m = _tuple$4[0]; e = _tuple$4[1];
					return [m, e];
				}
				if (matched) {
					m = go$append(m, Join(new (go$sliceType(Go$String))([dir, n])));
				}
				_i++;
			}
			return [m, e];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [m, e];
		}
	};
	hasMeta = function(path) {
		return strings.IndexAny(path, "*?[") >= 0;
	};
	lazybuf.Ptr.prototype.index = function(i) {
		var b, _slice, _index;
		b = this;
		if (!(b.buf === (go$sliceType(Go$Uint8)).nil)) {
			return (_slice = b.buf, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.go$val.index(i); };
	lazybuf.Ptr.prototype.append = function(c) {
		var b, _slice, _index;
		b = this;
		if (b.buf === (go$sliceType(Go$Uint8)).nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + 1 >> 0;
				return;
			}
			b.buf = (go$sliceType(Go$Uint8)).make(b.path.length, 0, function() { return 0; });
			go$copyString(b.buf, b.path.substring(0, b.w));
		}
		_slice = b.buf; _index = b.w;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = c) : go$throwRuntimeError("index out of range");
		b.w = b.w + 1 >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.go$val.append(c); };
	lazybuf.Ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === (go$sliceType(Go$Uint8)).nil) {
			return b.volAndPath.substring(0, (b.volLen + b.w >> 0));
		}
		return b.volAndPath.substring(0, b.volLen) + go$bytesToString(go$subslice(b.buf, 0, b.w));
	};
	lazybuf.prototype.string = function() { return this.go$val.string(); };
	Clean = go$pkg.Clean = function(path) {
		var originalPath, volLen, rooted, n, out, _tuple, r, dotdot, _tuple$1;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = path.substring(volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.Ptr(path, (go$sliceType(Go$Uint8)).nil, 0, originalPath, volLen);
		_tuple = [0, 0]; r = _tuple[0]; dotdot = _tuple[1];
		if (rooted) {
			out.append(92);
			_tuple$1 = [1, 1]; r = _tuple$1[0]; dotdot = _tuple$1[1];
		}
		while (r < n) {
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + 1 >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + 1 >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + 2 >> 0;
				if (out.w > dotdot) {
					out.w = out.w - 1 >> 0;
					while (out.w > dotdot && !os.IsPathSeparator(out.index(out.w))) {
						out.w = out.w - 1 >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(92);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(92);
				}
				while (r < n && !os.IsPathSeparator(path.charCodeAt(r))) {
					out.append(path.charCodeAt(r));
					r = r + 1 >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	FromSlash = go$pkg.FromSlash = function(path) {
		return strings.Replace(path, "/", "\\", -1);
	};
	Split = go$pkg.Split = function(path) {
		var dir, file, vol, i, _tuple;
		dir = "";
		file = "";
		vol = VolumeName(path);
		i = path.length - 1 >> 0;
		while (i >= vol.length && !os.IsPathSeparator(path.charCodeAt(i))) {
			i = i - 1 >> 0;
		}
		_tuple = [path.substring(0, (i + 1 >> 0)), path.substring((i + 1 >> 0))]; dir = _tuple[0]; file = _tuple[1];
		return [dir, file];
	};
	Join = go$pkg.Join = function(elem) {
		var _ref, _i, _slice, _index, e, i;
		_ref = elem;
		_i = 0;
		while (_i < _ref.length) {
			e = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (!(e === "")) {
				return Clean(strings.Join(go$subslice(elem, i), "\\"));
			}
			_i++;
		}
		return "";
	};
	Base = go$pkg.Base = function(path) {
		var i;
		if (path === "") {
			return ".";
		}
		while (path.length > 0 && os.IsPathSeparator(path.charCodeAt((path.length - 1 >> 0)))) {
			path = path.substring(0, (path.length - 1 >> 0));
		}
		path = path.substring(VolumeName(path).length);
		i = path.length - 1 >> 0;
		while (i >= 0 && !os.IsPathSeparator(path.charCodeAt(i))) {
			i = i - 1 >> 0;
		}
		if (i >= 0) {
			path = path.substring((i + 1 >> 0));
		}
		if (path === "") {
			return "\\";
		}
		return path;
	};
	VolumeName = go$pkg.VolumeName = function(path) {
		var v;
		v = "";
		v = path.substring(0, volumeNameLen(path));
		return v;
	};
	isSlash = function(c) {
		return (c === 92) || (c === 47);
	};
	volumeNameLen = function(path) {
		var c, l, n;
		if (path.length < 2) {
			return 0;
		}
		c = path.charCodeAt(0);
		if ((path.charCodeAt(1) === 58) && (97 <= c && c <= 122 || 65 <= c && c <= 90)) {
			return 2;
		}
		l = path.length;
		if (l >= 5 && isSlash(path.charCodeAt(0)) && isSlash(path.charCodeAt(1)) && !isSlash(path.charCodeAt(2)) && !((path.charCodeAt(2) === 46))) {
			n = 3;
			while (n < (l - 1 >> 0)) {
				if (isSlash(path.charCodeAt(n))) {
					n = n + 1 >> 0;
					if (!isSlash(path.charCodeAt(n))) {
						if (path.charCodeAt(n) === 46) {
							break;
						}
						while (n < l) {
							if (isSlash(path.charCodeAt(n))) {
								break;
							}
							n = n + 1 >> 0;
						}
						return n;
					}
					break;
				}
				n = n + 1 >> 0;
			}
		}
		return 0;
	};
	go$pkg.init = function() {
		(go$ptrType(lazybuf)).methods = [["append", "path/filepath", [Go$Uint8], [], false, -1], ["index", "path/filepath", [Go$Int], [Go$Uint8], false, -1], ["string", "path/filepath", [], [Go$String], false, -1]];
		lazybuf.init([["path", "path", "path/filepath", Go$String, ""], ["buf", "buf", "path/filepath", (go$sliceType(Go$Uint8)), ""], ["w", "w", "path/filepath", Go$Int, ""], ["volAndPath", "volAndPath", "path/filepath", Go$String, ""], ["volLen", "volLen", "path/filepath", Go$Int, ""]]);
		go$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		go$pkg.SkipDir = errors.New("skip this directory");
	}
	return go$pkg;
})();
go$packages["io/ioutil"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], io = go$packages["io"], os = go$packages["os"], sort = go$packages["sort"], filepath = go$packages["path/filepath"], strconv = go$packages["strconv"], sync = go$packages["sync"], time = go$packages["time"], readAll, ReadFile, blackHoleBuf;
	readAll = function(r, capacity) {
		var b, err, buf, _tuple, _tuple$1;
		b = (go$sliceType(Go$Uint8)).nil;
		err = null;
		var go$deferred = [];
		try {
			buf = bytes.NewBuffer((go$sliceType(Go$Uint8)).make(0, go$flatten64(capacity), function() { return 0; }));
			go$deferred.push({ fun: (function() {
				var e, _tuple, panicErr, ok;
				e = go$recover();
				if (go$interfaceIsEqual(e, null)) {
					return;
				}
				_tuple = (e !== null && go$error.implementedBy.indexOf(e.constructor) !== -1 ? [e, true] : [null, false]); panicErr = _tuple[0]; ok = _tuple[1];
				if (ok && go$interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
					err = panicErr;
				} else {
					throw go$panic(e);
				}
			}), args: [] });
			_tuple = buf.ReadFrom(r); err = _tuple[1];
			_tuple$1 = [buf.Bytes(), err]; b = _tuple$1[0]; err = _tuple$1[1];
			return [b, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [b, err];
		}
	};
	ReadFile = go$pkg.ReadFile = function(filename) {
		var _tuple, f, err, n, _tuple$1, fi, err$1, size;
		var go$deferred = [];
		try {
			_tuple = os.Open(filename); f = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$sliceType(Go$Uint8)).nil, err];
			}
			go$deferred.push({ recv: f, method: "Close", args: [] });
			n = new Go$Int64(0, 0);
			_tuple$1 = f.Stat(); fi = _tuple$1[0]; err$1 = _tuple$1[1];
			if (go$interfaceIsEqual(err$1, null)) {
				size = fi.Size();
				if ((size.high < 0 || (size.high === 0 && size.low < 1000000000))) {
					n = size;
				}
			}
			return readAll(f, new Go$Int64(n.high + 0, n.low + 512));
		} catch(go$err) {
			go$pushErr(go$err);
			return [(go$sliceType(Go$Uint8)).nil, null];
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	go$pkg.init = function() {
		blackHoleBuf = new (go$chanType((go$sliceType(Go$Uint8)), false, false))();
	}
	return go$pkg;
})();
go$packages["net/url"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], errors = go$packages["errors"], sort = go$packages["sort"], strconv = go$packages["strconv"], strings = go$packages["strings"], shouldEscape, QueryEscape, escape;
	shouldEscape = function(c, mode) {
		var _ref, _ref$1;
		if (65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57) {
			return false;
		}
		_ref = c;
		if (_ref === 45 || _ref === 95 || _ref === 46 || _ref === 126) {
			return false;
		} else if (_ref === 36 || _ref === 38 || _ref === 43 || _ref === 44 || _ref === 47 || _ref === 58 || _ref === 59 || _ref === 61 || _ref === 63 || _ref === 64) {
			_ref$1 = mode;
			if (_ref$1 === 1) {
				return c === 63;
			} else if (_ref$1 === 2) {
				return (c === 64) || (c === 47) || (c === 58);
			} else if (_ref$1 === 3) {
				return true;
			} else if (_ref$1 === 4) {
				return false;
			}
		}
		return true;
	};
	QueryEscape = go$pkg.QueryEscape = function(s) {
		return escape(s, 3);
	};
	escape = function(s, mode) {
		var _tuple, spaceCount, hexCount, i, c, t, j, i$1, c$1, _slice, _index, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, _slice$4, _index$4;
		_tuple = [0, 0]; spaceCount = _tuple[0]; hexCount = _tuple[1];
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (shouldEscape(c, mode)) {
				if ((c === 32) && (mode === 3)) {
					spaceCount = spaceCount + 1 >> 0;
				} else {
					hexCount = hexCount + 1 >> 0;
				}
			}
			i = i + 1 >> 0;
		}
		if ((spaceCount === 0) && (hexCount === 0)) {
			return s;
		}
		t = (go$sliceType(Go$Uint8)).make(s.length + ((((2 >>> 16 << 16) * hexCount >> 0) + (2 << 16 >>> 16) * hexCount) >> 0) >> 0, 0, function() { return 0; });
		j = 0;
		i$1 = 0;
		while (i$1 < s.length) {
			c$1 = s.charCodeAt(i$1);
			if ((c$1 === 32) && (mode === 3)) {
				_slice = t; _index = j;(_index >= 0 && _index < _slice.length) ? (_slice.array[_slice.offset + _index] = 43) : go$throwRuntimeError("index out of range");
				j = j + 1 >> 0;
			} else if (shouldEscape(c$1, mode)) {
				_slice$1 = t; _index$1 = j;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = 37) : go$throwRuntimeError("index out of range");
				_slice$2 = t; _index$2 = j + 1 >> 0;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = "0123456789ABCDEF".charCodeAt((c$1 >>> 4 << 24 >>> 24))) : go$throwRuntimeError("index out of range");
				_slice$3 = t; _index$3 = j + 2 >> 0;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = "0123456789ABCDEF".charCodeAt(((c$1 & 15) >>> 0))) : go$throwRuntimeError("index out of range");
				j = j + 3 >> 0;
			} else {
				_slice$4 = t; _index$4 = j;(_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = s.charCodeAt(i$1)) : go$throwRuntimeError("index out of range");
				j = j + 1 >> 0;
			}
			i$1 = i$1 + 1 >> 0;
		}
		return go$bytesToString(t);
	};
	go$pkg.init = function() {
	}
	return go$pkg;
})();
go$packages["container/list"] = (function() {
	var go$pkg = {}, Element, List, New;
	Element = go$pkg.Element = go$newType(0, "Struct", "list.Element", "Element", "container/list", function(next_, prev_, list_, Value_) {
		this.go$val = this;
		this.next = next_ !== undefined ? next_ : (go$ptrType(Element)).nil;
		this.prev = prev_ !== undefined ? prev_ : (go$ptrType(Element)).nil;
		this.list = list_ !== undefined ? list_ : (go$ptrType(List)).nil;
		this.Value = Value_ !== undefined ? Value_ : null;
	});
	List = go$pkg.List = go$newType(0, "Struct", "list.List", "List", "container/list", function(root_, len_) {
		this.go$val = this;
		this.root = root_ !== undefined ? root_ : new Element.Ptr();
		this.len = len_ !== undefined ? len_ : 0;
	});
	Element.Ptr.prototype.Next = function() {
		var e, p;
		e = this;
		p = e.next;
		if (!(e.list === (go$ptrType(List)).nil) && !(p === e.list.root)) {
			return p;
		}
		return (go$ptrType(Element)).nil;
	};
	Element.prototype.Next = function() { return this.go$val.Next(); };
	Element.Ptr.prototype.Prev = function() {
		var e, p;
		e = this;
		p = e.prev;
		if (!(e.list === (go$ptrType(List)).nil) && !(p === e.list.root)) {
			return p;
		}
		return (go$ptrType(Element)).nil;
	};
	Element.prototype.Prev = function() { return this.go$val.Prev(); };
	List.Ptr.prototype.Init = function() {
		var l;
		l = this;
		l.root.next = l.root;
		l.root.prev = l.root;
		l.len = 0;
		return l;
	};
	List.prototype.Init = function() { return this.go$val.Init(); };
	New = go$pkg.New = function() {
		return new List.Ptr().Init();
	};
	List.Ptr.prototype.Len = function() {
		var l;
		l = this;
		return l.len;
	};
	List.prototype.Len = function() { return this.go$val.Len(); };
	List.Ptr.prototype.Front = function() {
		var l;
		l = this;
		if (l.len === 0) {
			return (go$ptrType(Element)).nil;
		}
		return l.root.next;
	};
	List.prototype.Front = function() { return this.go$val.Front(); };
	List.Ptr.prototype.Back = function() {
		var l;
		l = this;
		if (l.len === 0) {
			return (go$ptrType(Element)).nil;
		}
		return l.root.prev;
	};
	List.prototype.Back = function() { return this.go$val.Back(); };
	List.Ptr.prototype.lazyInit = function() {
		var l;
		l = this;
		if (l.root.next === (go$ptrType(Element)).nil) {
			l.Init();
		}
	};
	List.prototype.lazyInit = function() { return this.go$val.lazyInit(); };
	List.Ptr.prototype.insert = function(e, at) {
		var l, n;
		l = this;
		n = at.next;
		at.next = e;
		e.prev = at;
		e.next = n;
		n.prev = e;
		e.list = l;
		l.len = l.len + 1 >> 0;
		return e;
	};
	List.prototype.insert = function(e, at) { return this.go$val.insert(e, at); };
	List.Ptr.prototype.insertValue = function(v, at) {
		var l;
		l = this;
		return l.insert(new Element.Ptr((go$ptrType(Element)).nil, (go$ptrType(Element)).nil, (go$ptrType(List)).nil, v), at);
	};
	List.prototype.insertValue = function(v, at) { return this.go$val.insertValue(v, at); };
	List.Ptr.prototype.remove = function(e) {
		var l;
		l = this;
		e.prev.next = e.next;
		e.next.prev = e.prev;
		e.next = (go$ptrType(Element)).nil;
		e.prev = (go$ptrType(Element)).nil;
		e.list = (go$ptrType(List)).nil;
		l.len = l.len - 1 >> 0;
		return e;
	};
	List.prototype.remove = function(e) { return this.go$val.remove(e); };
	List.Ptr.prototype.Remove = function(e) {
		var l;
		l = this;
		if (e.list === l) {
			l.remove(e);
		}
		return e.Value;
	};
	List.prototype.Remove = function(e) { return this.go$val.Remove(e); };
	List.Ptr.prototype.PushFront = function(v) {
		var l;
		l = this;
		l.lazyInit();
		return l.insertValue(v, l.root);
	};
	List.prototype.PushFront = function(v) { return this.go$val.PushFront(v); };
	List.Ptr.prototype.PushBack = function(v) {
		var l;
		l = this;
		l.lazyInit();
		return l.insertValue(v, l.root.prev);
	};
	List.prototype.PushBack = function(v) { return this.go$val.PushBack(v); };
	List.Ptr.prototype.InsertBefore = function(v, mark) {
		var l;
		l = this;
		if (!(mark.list === l)) {
			return (go$ptrType(Element)).nil;
		}
		return l.insertValue(v, mark.prev);
	};
	List.prototype.InsertBefore = function(v, mark) { return this.go$val.InsertBefore(v, mark); };
	List.Ptr.prototype.InsertAfter = function(v, mark) {
		var l;
		l = this;
		if (!(mark.list === l)) {
			return (go$ptrType(Element)).nil;
		}
		return l.insertValue(v, mark);
	};
	List.prototype.InsertAfter = function(v, mark) { return this.go$val.InsertAfter(v, mark); };
	List.Ptr.prototype.MoveToFront = function(e) {
		var l;
		l = this;
		if (!(e.list === l) || l.root.next === e) {
			return;
		}
		l.insert(l.remove(e), l.root);
	};
	List.prototype.MoveToFront = function(e) { return this.go$val.MoveToFront(e); };
	List.Ptr.prototype.MoveToBack = function(e) {
		var l;
		l = this;
		if (!(e.list === l) || l.root.prev === e) {
			return;
		}
		l.insert(l.remove(e), l.root.prev);
	};
	List.prototype.MoveToBack = function(e) { return this.go$val.MoveToBack(e); };
	List.Ptr.prototype.MoveBefore = function(e, mark) {
		var l;
		l = this;
		if (!(e.list === l) || e === mark) {
			return;
		}
		l.insert(l.remove(e), mark.prev);
	};
	List.prototype.MoveBefore = function(e, mark) { return this.go$val.MoveBefore(e, mark); };
	List.Ptr.prototype.MoveAfter = function(e, mark) {
		var l;
		l = this;
		if (!(e.list === l) || e === mark) {
			return;
		}
		l.insert(l.remove(e), mark);
	};
	List.prototype.MoveAfter = function(e, mark) { return this.go$val.MoveAfter(e, mark); };
	List.Ptr.prototype.PushBackList = function(other) {
		var l, _tuple, i, e, _tuple$1;
		l = this;
		l.lazyInit();
		_tuple = [other.Len(), other.Front()]; i = _tuple[0]; e = _tuple[1];
		while (i > 0) {
			l.insertValue(e.Value, l.root.prev);
			_tuple$1 = [i - 1 >> 0, e.Next()]; i = _tuple$1[0]; e = _tuple$1[1];
		}
	};
	List.prototype.PushBackList = function(other) { return this.go$val.PushBackList(other); };
	List.Ptr.prototype.PushFrontList = function(other) {
		var l, _tuple, i, e, _tuple$1;
		l = this;
		l.lazyInit();
		_tuple = [other.Len(), other.Back()]; i = _tuple[0]; e = _tuple[1];
		while (i > 0) {
			l.insertValue(e.Value, l.root);
			_tuple$1 = [i - 1 >> 0, e.Prev()]; i = _tuple$1[0]; e = _tuple$1[1];
		}
	};
	List.prototype.PushFrontList = function(other) { return this.go$val.PushFrontList(other); };
	go$pkg.init = function() {
		(go$ptrType(Element)).methods = [["Next", "", [], [(go$ptrType(Element))], false, -1], ["Prev", "", [], [(go$ptrType(Element))], false, -1]];
		Element.init([["next", "next", "container/list", (go$ptrType(Element)), ""], ["prev", "prev", "container/list", (go$ptrType(Element)), ""], ["list", "list", "container/list", (go$ptrType(List)), ""], ["Value", "Value", "", go$emptyInterface, ""]]);
		(go$ptrType(List)).methods = [["Back", "", [], [(go$ptrType(Element))], false, -1], ["Front", "", [], [(go$ptrType(Element))], false, -1], ["Init", "", [], [(go$ptrType(List))], false, -1], ["InsertAfter", "", [go$emptyInterface, (go$ptrType(Element))], [(go$ptrType(Element))], false, -1], ["InsertBefore", "", [go$emptyInterface, (go$ptrType(Element))], [(go$ptrType(Element))], false, -1], ["Len", "", [], [Go$Int], false, -1], ["MoveAfter", "", [(go$ptrType(Element)), (go$ptrType(Element))], [], false, -1], ["MoveBefore", "", [(go$ptrType(Element)), (go$ptrType(Element))], [], false, -1], ["MoveToBack", "", [(go$ptrType(Element))], [], false, -1], ["MoveToFront", "", [(go$ptrType(Element))], [], false, -1], ["PushBack", "", [go$emptyInterface], [(go$ptrType(Element))], false, -1], ["PushBackList", "", [(go$ptrType(List))], [], false, -1], ["PushFront", "", [go$emptyInterface], [(go$ptrType(Element))], false, -1], ["PushFrontList", "", [(go$ptrType(List))], [], false, -1], ["Remove", "", [(go$ptrType(Element))], [go$emptyInterface], false, -1], ["insert", "container/list", [(go$ptrType(Element)), (go$ptrType(Element))], [(go$ptrType(Element))], false, -1], ["insertValue", "container/list", [go$emptyInterface, (go$ptrType(Element))], [(go$ptrType(Element))], false, -1], ["lazyInit", "container/list", [], [], false, -1], ["remove", "container/list", [(go$ptrType(Element))], [(go$ptrType(Element))], false, -1]];
		List.init([["root", "root", "container/list", Element, ""], ["len", "len", "container/list", Go$Int, ""]]);
	}
	return go$pkg;
})();
go$packages["text/template/parse"] = (function() {
	var go$pkg = {}, list = go$packages["container/list"], fmt = go$packages["fmt"], strings = go$packages["strings"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], bytes = go$packages["bytes"], strconv = go$packages["strconv"], runtime = go$packages["runtime"], item, itemType, stateFn, lexer, Node, NodeType, Pos, ListNode, TextNode, PipeNode, ActionNode, CommandNode, IdentifierNode, VariableNode, DotNode, NilNode, FieldNode, ChainNode, BoolNode, NumberNode, StringNode, endNode, elseNode, BranchNode, IfNode, RangeNode, WithNode, TemplateNode, Tree, lex, lexText, lexLeftDelim, lexComment, lexRightDelim, lexInsideAction, lexSpace, lexIdentifier, lexField, lexVariable, lexFieldOrVariable, lexChar, lexNumber, lexQuote, lexRawQuote, isSpace, isEndOfLine, isAlphaNumeric, newList, newText, newPipeline, newAction, newCommand, NewIdentifier, newVariable, newDot, newNil, newField, newChain, newBool, newNumber, newString, newEnd, newElse, newIf, newRange, newWith, newTemplate, Parse, New, IsEmptyTree, key, textFormat;
	item = go$pkg.item = go$newType(0, "Struct", "parse.item", "item", "text/template/parse", function(typ_, pos_, val_) {
		this.go$val = this;
		this.typ = typ_ !== undefined ? typ_ : 0;
		this.pos = pos_ !== undefined ? pos_ : 0;
		this.val = val_ !== undefined ? val_ : "";
	});
	itemType = go$pkg.itemType = go$newType(4, "Int", "parse.itemType", "itemType", "text/template/parse", null);
	stateFn = go$pkg.stateFn = go$newType(0, "Func", "parse.stateFn", "stateFn", "text/template/parse", null);
	lexer = go$pkg.lexer = go$newType(0, "Struct", "parse.lexer", "lexer", "text/template/parse", function(name_, input_, leftDelim_, rightDelim_, state_, pos_, start_, width_, lastPos_, items_, parenDepth_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.input = input_ !== undefined ? input_ : "";
		this.leftDelim = leftDelim_ !== undefined ? leftDelim_ : "";
		this.rightDelim = rightDelim_ !== undefined ? rightDelim_ : "";
		this.state = state_ !== undefined ? state_ : go$throwNilPointerError;
		this.pos = pos_ !== undefined ? pos_ : 0;
		this.start = start_ !== undefined ? start_ : 0;
		this.width = width_ !== undefined ? width_ : 0;
		this.lastPos = lastPos_ !== undefined ? lastPos_ : 0;
		this.items = items_ !== undefined ? items_ : (go$ptrType(list.List)).nil;
		this.parenDepth = parenDepth_ !== undefined ? parenDepth_ : 0;
	});
	Node = go$pkg.Node = go$newType(0, "Interface", "parse.Node", "Node", "text/template/parse", null);
	NodeType = go$pkg.NodeType = go$newType(4, "Int", "parse.NodeType", "NodeType", "text/template/parse", null);
	Pos = go$pkg.Pos = go$newType(4, "Int", "parse.Pos", "Pos", "text/template/parse", null);
	ListNode = go$pkg.ListNode = go$newType(0, "Struct", "parse.ListNode", "ListNode", "text/template/parse", function(NodeType_, Pos_, Nodes_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Nodes = Nodes_ !== undefined ? Nodes_ : (go$sliceType(Node)).nil;
	});
	TextNode = go$pkg.TextNode = go$newType(0, "Struct", "parse.TextNode", "TextNode", "text/template/parse", function(NodeType_, Pos_, Text_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Text = Text_ !== undefined ? Text_ : (go$sliceType(Go$Uint8)).nil;
	});
	PipeNode = go$pkg.PipeNode = go$newType(0, "Struct", "parse.PipeNode", "PipeNode", "text/template/parse", function(NodeType_, Pos_, Line_, Decl_, Cmds_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Decl = Decl_ !== undefined ? Decl_ : (go$sliceType((go$ptrType(VariableNode)))).nil;
		this.Cmds = Cmds_ !== undefined ? Cmds_ : (go$sliceType((go$ptrType(CommandNode)))).nil;
	});
	ActionNode = go$pkg.ActionNode = go$newType(0, "Struct", "parse.ActionNode", "ActionNode", "text/template/parse", function(NodeType_, Pos_, Line_, Pipe_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Pipe = Pipe_ !== undefined ? Pipe_ : (go$ptrType(PipeNode)).nil;
	});
	CommandNode = go$pkg.CommandNode = go$newType(0, "Struct", "parse.CommandNode", "CommandNode", "text/template/parse", function(NodeType_, Pos_, Args_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Args = Args_ !== undefined ? Args_ : (go$sliceType(Node)).nil;
	});
	IdentifierNode = go$pkg.IdentifierNode = go$newType(0, "Struct", "parse.IdentifierNode", "IdentifierNode", "text/template/parse", function(NodeType_, Pos_, Ident_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Ident = Ident_ !== undefined ? Ident_ : "";
	});
	VariableNode = go$pkg.VariableNode = go$newType(0, "Struct", "parse.VariableNode", "VariableNode", "text/template/parse", function(NodeType_, Pos_, Ident_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Ident = Ident_ !== undefined ? Ident_ : (go$sliceType(Go$String)).nil;
	});
	DotNode = go$pkg.DotNode = go$newType(0, "Struct", "parse.DotNode", "DotNode", "text/template/parse", function(Pos_) {
		this.go$val = this;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
	});
	NilNode = go$pkg.NilNode = go$newType(0, "Struct", "parse.NilNode", "NilNode", "text/template/parse", function(Pos_) {
		this.go$val = this;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
	});
	FieldNode = go$pkg.FieldNode = go$newType(0, "Struct", "parse.FieldNode", "FieldNode", "text/template/parse", function(NodeType_, Pos_, Ident_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Ident = Ident_ !== undefined ? Ident_ : (go$sliceType(Go$String)).nil;
	});
	ChainNode = go$pkg.ChainNode = go$newType(0, "Struct", "parse.ChainNode", "ChainNode", "text/template/parse", function(NodeType_, Pos_, Node_, Field_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Node = Node_ !== undefined ? Node_ : null;
		this.Field = Field_ !== undefined ? Field_ : (go$sliceType(Go$String)).nil;
	});
	BoolNode = go$pkg.BoolNode = go$newType(0, "Struct", "parse.BoolNode", "BoolNode", "text/template/parse", function(NodeType_, Pos_, True_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.True = True_ !== undefined ? True_ : false;
	});
	NumberNode = go$pkg.NumberNode = go$newType(0, "Struct", "parse.NumberNode", "NumberNode", "text/template/parse", function(NodeType_, Pos_, IsInt_, IsUint_, IsFloat_, IsComplex_, Int64_, Uint64_, Float64_, Complex128_, Text_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.IsInt = IsInt_ !== undefined ? IsInt_ : false;
		this.IsUint = IsUint_ !== undefined ? IsUint_ : false;
		this.IsFloat = IsFloat_ !== undefined ? IsFloat_ : false;
		this.IsComplex = IsComplex_ !== undefined ? IsComplex_ : false;
		this.Int64 = Int64_ !== undefined ? Int64_ : new Go$Int64(0, 0);
		this.Uint64 = Uint64_ !== undefined ? Uint64_ : new Go$Uint64(0, 0);
		this.Float64 = Float64_ !== undefined ? Float64_ : 0;
		this.Complex128 = Complex128_ !== undefined ? Complex128_ : new Go$Complex128(0, 0);
		this.Text = Text_ !== undefined ? Text_ : "";
	});
	StringNode = go$pkg.StringNode = go$newType(0, "Struct", "parse.StringNode", "StringNode", "text/template/parse", function(NodeType_, Pos_, Quoted_, Text_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Quoted = Quoted_ !== undefined ? Quoted_ : "";
		this.Text = Text_ !== undefined ? Text_ : "";
	});
	endNode = go$pkg.endNode = go$newType(0, "Struct", "parse.endNode", "endNode", "text/template/parse", function(Pos_) {
		this.go$val = this;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
	});
	elseNode = go$pkg.elseNode = go$newType(0, "Struct", "parse.elseNode", "elseNode", "text/template/parse", function(NodeType_, Pos_, Line_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Line = Line_ !== undefined ? Line_ : 0;
	});
	BranchNode = go$pkg.BranchNode = go$newType(0, "Struct", "parse.BranchNode", "BranchNode", "text/template/parse", function(NodeType_, Pos_, Line_, Pipe_, List_, ElseList_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Pipe = Pipe_ !== undefined ? Pipe_ : (go$ptrType(PipeNode)).nil;
		this.List = List_ !== undefined ? List_ : (go$ptrType(ListNode)).nil;
		this.ElseList = ElseList_ !== undefined ? ElseList_ : (go$ptrType(ListNode)).nil;
	});
	IfNode = go$pkg.IfNode = go$newType(0, "Struct", "parse.IfNode", "IfNode", "text/template/parse", function(BranchNode_) {
		this.go$val = this;
		this.BranchNode = BranchNode_ !== undefined ? BranchNode_ : new BranchNode.Ptr();
	});
	RangeNode = go$pkg.RangeNode = go$newType(0, "Struct", "parse.RangeNode", "RangeNode", "text/template/parse", function(BranchNode_) {
		this.go$val = this;
		this.BranchNode = BranchNode_ !== undefined ? BranchNode_ : new BranchNode.Ptr();
	});
	WithNode = go$pkg.WithNode = go$newType(0, "Struct", "parse.WithNode", "WithNode", "text/template/parse", function(BranchNode_) {
		this.go$val = this;
		this.BranchNode = BranchNode_ !== undefined ? BranchNode_ : new BranchNode.Ptr();
	});
	TemplateNode = go$pkg.TemplateNode = go$newType(0, "Struct", "parse.TemplateNode", "TemplateNode", "text/template/parse", function(NodeType_, Pos_, Line_, Name_, Pipe_) {
		this.go$val = this;
		this.NodeType = NodeType_ !== undefined ? NodeType_ : 0;
		this.Pos = Pos_ !== undefined ? Pos_ : 0;
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Pipe = Pipe_ !== undefined ? Pipe_ : (go$ptrType(PipeNode)).nil;
	});
	Tree = go$pkg.Tree = go$newType(0, "Struct", "parse.Tree", "Tree", "text/template/parse", function(Name_, ParseName_, Root_, text_, funcs_, lex_, token_, peekCount_, vars_) {
		this.go$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.ParseName = ParseName_ !== undefined ? ParseName_ : "";
		this.Root = Root_ !== undefined ? Root_ : (go$ptrType(ListNode)).nil;
		this.text = text_ !== undefined ? text_ : "";
		this.funcs = funcs_ !== undefined ? funcs_ : (go$sliceType((go$mapType(Go$String, go$emptyInterface)))).nil;
		this.lex = lex_ !== undefined ? lex_ : (go$ptrType(lexer)).nil;
		this.token = token_ !== undefined ? token_ : go$makeNativeArray("Struct", 3, function() { return new item.Ptr(); });
		this.peekCount = peekCount_ !== undefined ? peekCount_ : 0;
		this.vars = vars_ !== undefined ? vars_ : (go$sliceType(Go$String)).nil;
	});
	item.Ptr.prototype.String = function() {
		var _struct, i;
		i = (_struct = this, new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		if (i.typ === 6) {
			return "EOF";
		} else if (i.typ === 0) {
			return i.val;
		} else if (i.typ > 20) {
			return fmt.Sprintf("<%s>", new (go$sliceType(go$emptyInterface))([new Go$String(i.val)]));
		} else if (i.val.length > 10) {
			return fmt.Sprintf("%.10q...", new (go$sliceType(go$emptyInterface))([new Go$String(i.val)]));
		}
		return fmt.Sprintf("%q", new (go$sliceType(go$emptyInterface))([new Go$String(i.val)]));
	};
	item.prototype.String = function() { return this.go$val.String(); };
	lexer.Ptr.prototype.next = function() {
		var l, _tuple, r, w;
		l = this;
		if ((l.pos >> 0) >= l.input.length) {
			l.width = 0;
			return -1;
		}
		_tuple = utf8.DecodeRuneInString(l.input.substring(l.pos)); r = _tuple[0]; w = _tuple[1];
		l.width = (w >> 0);
		l.pos = l.pos + (l.width) >> 0;
		return r;
	};
	lexer.prototype.next = function() { return this.go$val.next(); };
	lexer.Ptr.prototype.peek = function() {
		var l, r;
		l = this;
		r = l.next();
		l.backup();
		return r;
	};
	lexer.prototype.peek = function() { return this.go$val.peek(); };
	lexer.Ptr.prototype.backup = function() {
		var l;
		l = this;
		l.pos = l.pos - (l.width) >> 0;
	};
	lexer.prototype.backup = function() { return this.go$val.backup(); };
	lexer.Ptr.prototype.emit = function(t) {
		var l, x;
		l = this;
		l.items.PushBack((x = new item.Ptr(t, l.start, l.input.substring(l.start, l.pos)), new x.constructor.Struct(x)));
		l.start = l.pos;
	};
	lexer.prototype.emit = function(t) { return this.go$val.emit(t); };
	lexer.Ptr.prototype.ignore = function() {
		var l;
		l = this;
		l.start = l.pos;
	};
	lexer.prototype.ignore = function() { return this.go$val.ignore(); };
	lexer.Ptr.prototype.accept = function(valid) {
		var l;
		l = this;
		if (strings.IndexRune(valid, l.next()) >= 0) {
			return true;
		}
		l.backup();
		return false;
	};
	lexer.prototype.accept = function(valid) { return this.go$val.accept(valid); };
	lexer.Ptr.prototype.acceptRun = function(valid) {
		var l;
		l = this;
		while (strings.IndexRune(valid, l.next()) >= 0) {
		}
		l.backup();
	};
	lexer.prototype.acceptRun = function(valid) { return this.go$val.acceptRun(valid); };
	lexer.Ptr.prototype.lineNumber = function() {
		var l;
		l = this;
		return 1 + strings.Count(l.input.substring(0, l.lastPos), "\n") >> 0;
	};
	lexer.prototype.lineNumber = function() { return this.go$val.lineNumber(); };
	lexer.Ptr.prototype.errorf = function(format, args) {
		var l, x;
		l = this;
		l.items.PushBack((x = new item.Ptr(0, l.start, fmt.Sprintf(format, args)), new x.constructor.Struct(x)));
		return go$throwNilPointerError;
	};
	lexer.prototype.errorf = function(format, args) { return this.go$val.errorf(format, args); };
	lexer.Ptr.prototype.nextItem = function() {
		var l, element, x, _struct, item$1, _struct$1;
		l = this;
		element = l.items.Front();
		while (element === (go$ptrType(list.Element)).nil) {
			l.state = l.state(l);
			element = l.items.Front();
		}
		l.items.Remove(element);
		item$1 = (_struct = (x = element.Value, (x !== null && x.constructor === item ? x.go$val : go$typeAssertionFailed(x, item))), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		l.lastPos = item$1.pos;
		return (_struct$1 = item$1, new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val));
	};
	lexer.prototype.nextItem = function() { return this.go$val.nextItem(); };
	lex = function(name, input, left, right) {
		var l;
		if (left === "") {
			left = "{{";
		}
		if (right === "") {
			right = "}}";
		}
		l = new lexer.Ptr(name, input, left, right, go$throwNilPointerError, 0, 0, 0, 0, list.New(), 0);
		l.state = lexText;
		return l;
	};
	lexText = function(l) {
		while (true) {
			if (strings.HasPrefix(l.input.substring(l.pos), l.leftDelim)) {
				if (l.pos > l.start) {
					l.emit(18);
				}
				return lexLeftDelim;
			}
			if (l.next() === -1) {
				break;
			}
		}
		if (l.pos > l.start) {
			l.emit(18);
		}
		l.emit(6);
		return go$throwNilPointerError;
	};
	lexLeftDelim = function(l) {
		l.pos = l.pos + ((l.leftDelim.length >> 0)) >> 0;
		if (strings.HasPrefix(l.input.substring(l.pos), "/*")) {
			return lexComment;
		}
		l.emit(9);
		l.parenDepth = 0;
		return lexInsideAction;
	};
	lexComment = function(l) {
		var i;
		l.pos = l.pos + 2 >> 0;
		i = strings.Index(l.input.substring(l.pos), "*/");
		if (i < 0) {
			return l.errorf("unclosed comment", new (go$sliceType(go$emptyInterface))([]));
		}
		l.pos = l.pos + (((i + 2 >> 0) >> 0)) >> 0;
		if (!strings.HasPrefix(l.input.substring(l.pos), l.rightDelim)) {
			return l.errorf("comment ends before closing delimiter", new (go$sliceType(go$emptyInterface))([]));
		}
		l.pos = l.pos + ((l.rightDelim.length >> 0)) >> 0;
		l.ignore();
		return lexText;
	};
	lexRightDelim = function(l) {
		l.pos = l.pos + ((l.rightDelim.length >> 0)) >> 0;
		l.emit(14);
		return lexText;
	};
	lexInsideAction = function(l) {
		var r, r$1;
		if (strings.HasPrefix(l.input.substring(l.pos), l.rightDelim)) {
			if (l.parenDepth === 0) {
				return lexRightDelim;
			}
			return l.errorf("unclosed left paren", new (go$sliceType(go$emptyInterface))([]));
		}
		r = l.next();
		if ((r === -1) || isEndOfLine(r)) {
			return l.errorf("unclosed action", new (go$sliceType(go$emptyInterface))([]));
		} else if (isSpace(r)) {
			return lexSpace;
		} else if (r === 58) {
			if (!((l.next() === 61))) {
				return l.errorf("expected :=", new (go$sliceType(go$emptyInterface))([]));
			}
			l.emit(5);
		} else if (r === 124) {
			l.emit(12);
		} else if (r === 34) {
			return lexQuote;
		} else if (r === 96) {
			return lexRawQuote;
		} else if (r === 36) {
			return lexVariable;
		} else if (r === 39) {
			return lexChar;
		} else if (r === 46) {
			if (l.pos < (l.input.length >> 0)) {
				r$1 = l.input.charCodeAt(l.pos);
				if (r$1 < 48 || 57 < r$1) {
					return lexField;
				}
			}
			l.backup();
			return lexNumber;
		} else if ((r === 43) || (r === 45) || (48 <= r && r <= 57)) {
			l.backup();
			return lexNumber;
		} else if (isAlphaNumeric(r)) {
			l.backup();
			return lexIdentifier;
		} else if (r === 40) {
			l.emit(10);
			l.parenDepth = l.parenDepth + 1 >> 0;
			return lexInsideAction;
		} else if (r === 41) {
			l.emit(15);
			l.parenDepth = l.parenDepth - 1 >> 0;
			if (l.parenDepth < 0) {
				return l.errorf("unexpected right paren %#U", new (go$sliceType(go$emptyInterface))([new Go$Int32(r)]));
			}
			return lexInsideAction;
		} else if (r <= 127 && unicode.IsPrint(r)) {
			l.emit(2);
			return lexInsideAction;
		} else {
			return l.errorf("unrecognized character in action: %#U", new (go$sliceType(go$emptyInterface))([new Go$Int32(r)]));
		}
		return lexInsideAction;
	};
	lexSpace = function(l) {
		while (isSpace(l.peek())) {
			l.next();
		}
		l.emit(16);
		return lexInsideAction;
	};
	lexIdentifier = function(l) {
		var r, word, _entry, _entry$1;
		Loop:
		while (true) {
			r = l.next();
			if (isAlphaNumeric(r)) {
			} else {
				l.backup();
				word = l.input.substring(l.start, l.pos);
				if (!l.atTerminator()) {
					return l.errorf("bad character %#U", new (go$sliceType(go$emptyInterface))([new Go$Int32(r)]));
				}
				if ((_entry = key[word], _entry !== undefined ? _entry.v : 0) > 20) {
					l.emit((_entry$1 = key[word], _entry$1 !== undefined ? _entry$1.v : 0));
				} else if (word.charCodeAt(0) === 46) {
					l.emit(7);
				} else if (word === "true" || word === "false") {
					l.emit(1);
				} else {
					l.emit(8);
				}
				break Loop;
			}
		}
		return lexInsideAction;
	};
	lexField = function(l) {
		return lexFieldOrVariable(l, 7);
	};
	lexVariable = function(l) {
		if (l.atTerminator()) {
			l.emit(19);
			return lexInsideAction;
		}
		return lexFieldOrVariable(l, 19);
	};
	lexFieldOrVariable = function(l, typ) {
		var r;
		if (l.atTerminator()) {
			if (typ === 19) {
				l.emit(19);
			} else {
				l.emit(21);
			}
			return lexInsideAction;
		}
		r = 0;
		while (true) {
			r = l.next();
			if (!isAlphaNumeric(r)) {
				l.backup();
				break;
			}
		}
		if (!l.atTerminator()) {
			return l.errorf("bad character %#U", new (go$sliceType(go$emptyInterface))([new Go$Int32(r)]));
		}
		l.emit(typ);
		return lexInsideAction;
	};
	lexer.Ptr.prototype.atTerminator = function() {
		var l, r, _ref, _tuple, rd;
		l = this;
		r = l.peek();
		if (isSpace(r) || isEndOfLine(r)) {
			return true;
		}
		_ref = r;
		if (_ref === -1 || _ref === 46 || _ref === 44 || _ref === 124 || _ref === 58 || _ref === 41 || _ref === 40) {
			return true;
		}
		_tuple = utf8.DecodeRuneInString(l.rightDelim); rd = _tuple[0];
		if (rd === r) {
			return true;
		}
		return false;
	};
	lexer.prototype.atTerminator = function() { return this.go$val.atTerminator(); };
	lexChar = function(l) {
		var _ref, r;
		Loop:
		while (true) {
			_ref = l.next();
			switch (0) { default: if (_ref === 92) {
				r = l.next();
				if (!((r === -1)) && !((r === 10))) {
					break;
				}
				return l.errorf("unterminated character constant", new (go$sliceType(go$emptyInterface))([]));
			} else if (_ref === -1 || _ref === 10) {
				return l.errorf("unterminated character constant", new (go$sliceType(go$emptyInterface))([]));
			} else if (_ref === 39) {
				break Loop;
			} }
		}
		l.emit(3);
		return lexInsideAction;
	};
	lexNumber = function(l) {
		var sign;
		if (!l.scanNumber()) {
			return l.errorf("bad number syntax: %q", new (go$sliceType(go$emptyInterface))([new Go$String(l.input.substring(l.start, l.pos))]));
		}
		sign = l.peek();
		if ((sign === 43) || (sign === 45)) {
			if (!l.scanNumber() || !((l.input.charCodeAt((l.pos - 1 >> 0)) === 105))) {
				return l.errorf("bad number syntax: %q", new (go$sliceType(go$emptyInterface))([new Go$String(l.input.substring(l.start, l.pos))]));
			}
			l.emit(4);
		} else {
			l.emit(11);
		}
		return lexInsideAction;
	};
	lexer.Ptr.prototype.scanNumber = function() {
		var l, digits;
		l = this;
		l.accept("+-");
		digits = "0123456789";
		if (l.accept("0") && l.accept("xX")) {
			digits = "0123456789abcdefABCDEF";
		}
		l.acceptRun(digits);
		if (l.accept(".")) {
			l.acceptRun(digits);
		}
		if (l.accept("eE")) {
			l.accept("+-");
			l.acceptRun("0123456789");
		}
		l.accept("i");
		if (isAlphaNumeric(l.peek())) {
			l.next();
			return false;
		}
		return true;
	};
	lexer.prototype.scanNumber = function() { return this.go$val.scanNumber(); };
	lexQuote = function(l) {
		var _ref, r;
		Loop:
		while (true) {
			_ref = l.next();
			switch (0) { default: if (_ref === 92) {
				r = l.next();
				if (!((r === -1)) && !((r === 10))) {
					break;
				}
				return l.errorf("unterminated quoted string", new (go$sliceType(go$emptyInterface))([]));
			} else if (_ref === -1 || _ref === 10) {
				return l.errorf("unterminated quoted string", new (go$sliceType(go$emptyInterface))([]));
			} else if (_ref === 34) {
				break Loop;
			} }
		}
		l.emit(17);
		return lexInsideAction;
	};
	lexRawQuote = function(l) {
		var _ref;
		Loop:
		while (true) {
			_ref = l.next();
			if (_ref === -1 || _ref === 10) {
				return l.errorf("unterminated raw quoted string", new (go$sliceType(go$emptyInterface))([]));
			} else if (_ref === 96) {
				break Loop;
			}
		}
		l.emit(13);
		return lexInsideAction;
	};
	isSpace = function(r) {
		return (r === 32) || (r === 9);
	};
	isEndOfLine = function(r) {
		return (r === 13) || (r === 10);
	};
	isAlphaNumeric = function(r) {
		return (r === 95) || unicode.IsLetter(r) || unicode.IsDigit(r);
	};
	Pos.prototype.Position = function() {
		var p;
		p = this.go$val;
		return p;
	};
	go$ptrType(Pos).prototype.Position = function() { return new Pos(this.go$get()).Position(); };
	NodeType.prototype.Type = function() {
		var t;
		t = this.go$val;
		return t;
	};
	go$ptrType(NodeType).prototype.Type = function() { return new NodeType(this.go$get()).Type(); };
	newList = function(pos) {
		return new ListNode.Ptr(11, pos, (go$sliceType(Node)).nil);
	};
	ListNode.Ptr.prototype.append = function(n) {
		var l;
		l = this;
		l.Nodes = go$append(l.Nodes, n);
	};
	ListNode.prototype.append = function(n) { return this.go$val.append(n); };
	ListNode.Ptr.prototype.String = function() {
		var l, b, _ref, _i, _slice, _index, n;
		l = this;
		b = new bytes.Buffer.Ptr();
		_ref = l.Nodes;
		_i = 0;
		while (_i < _ref.length) {
			n = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			fmt.Fprint(b, new (go$sliceType(go$emptyInterface))([n]));
			_i++;
		}
		return b.String();
	};
	ListNode.prototype.String = function() { return this.go$val.String(); };
	ListNode.Ptr.prototype.CopyList = function() {
		var l, n, _ref, _i, _slice, _index, elem;
		l = this;
		if (l === (go$ptrType(ListNode)).nil) {
			return l;
		}
		n = newList(l.Pos);
		_ref = l.Nodes;
		_i = 0;
		while (_i < _ref.length) {
			elem = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			n.append(elem.Copy());
			_i++;
		}
		return n;
	};
	ListNode.prototype.CopyList = function() { return this.go$val.CopyList(); };
	ListNode.Ptr.prototype.Copy = function() {
		var l;
		l = this;
		return l.CopyList();
	};
	ListNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newText = function(pos, text) {
		return new TextNode.Ptr(0, pos, new (go$sliceType(Go$Uint8))(go$stringToBytes(text)));
	};
	TextNode.Ptr.prototype.String = function() {
		var t;
		t = this;
		return fmt.Sprintf(textFormat, new (go$sliceType(go$emptyInterface))([t.Text]));
	};
	TextNode.prototype.String = function() { return this.go$val.String(); };
	TextNode.Ptr.prototype.Copy = function() {
		var t;
		t = this;
		return new TextNode.Ptr(0, 0, go$appendSlice(new (go$sliceType(Go$Uint8))([]), t.Text));
	};
	TextNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newPipeline = function(pos, line, decl) {
		return new PipeNode.Ptr(14, pos, line, decl, (go$sliceType((go$ptrType(CommandNode)))).nil);
	};
	PipeNode.Ptr.prototype.append = function(command) {
		var p;
		p = this;
		p.Cmds = go$append(p.Cmds, command);
	};
	PipeNode.prototype.append = function(command) { return this.go$val.append(command); };
	PipeNode.Ptr.prototype.String = function() {
		var p, s, _ref, _i, _slice, _index, v, i, _ref$1, _i$1, _slice$1, _index$1, c, i$1;
		p = this;
		s = "";
		if (p.Decl.length > 0) {
			_ref = p.Decl;
			_i = 0;
			while (_i < _ref.length) {
				v = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				i = _i;
				if (i > 0) {
					s = s + ", ";
				}
				s = s + (v.String());
				_i++;
			}
			s = s + " := ";
		}
		_ref$1 = p.Cmds;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			c = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			i$1 = _i$1;
			if (i$1 > 0) {
				s = s + " | ";
			}
			s = s + (c.String());
			_i$1++;
		}
		return s;
	};
	PipeNode.prototype.String = function() { return this.go$val.String(); };
	PipeNode.Ptr.prototype.CopyPipe = function() {
		var p, decl, _ref, _i, _slice, _index, d, x, n, _ref$1, _i$1, _slice$1, _index$1, c, x$1;
		p = this;
		if (p === (go$ptrType(PipeNode)).nil) {
			return p;
		}
		decl = (go$sliceType((go$ptrType(VariableNode)))).nil;
		_ref = p.Decl;
		_i = 0;
		while (_i < _ref.length) {
			d = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			decl = go$append(decl, (x = d.Copy(), (x !== null && x.constructor === (go$ptrType(VariableNode)) ? x.go$val : go$typeAssertionFailed(x, (go$ptrType(VariableNode))))));
			_i++;
		}
		n = newPipeline(p.Pos, p.Line, decl);
		_ref$1 = p.Cmds;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			c = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			n.append((x$1 = c.Copy(), (x$1 !== null && x$1.constructor === (go$ptrType(CommandNode)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(CommandNode))))));
			_i$1++;
		}
		return n;
	};
	PipeNode.prototype.CopyPipe = function() { return this.go$val.CopyPipe(); };
	PipeNode.Ptr.prototype.Copy = function() {
		var p;
		p = this;
		return p.CopyPipe();
	};
	PipeNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newAction = function(pos, line, pipe) {
		return new ActionNode.Ptr(1, pos, line, pipe);
	};
	ActionNode.Ptr.prototype.String = function() {
		var a;
		a = this;
		return fmt.Sprintf("{{%s}}", new (go$sliceType(go$emptyInterface))([a.Pipe]));
	};
	ActionNode.prototype.String = function() { return this.go$val.String(); };
	ActionNode.Ptr.prototype.Copy = function() {
		var a;
		a = this;
		return newAction(a.Pos, a.Line, a.Pipe.CopyPipe());
	};
	ActionNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newCommand = function(pos) {
		return new CommandNode.Ptr(4, pos, (go$sliceType(Node)).nil);
	};
	CommandNode.Ptr.prototype.append = function(arg) {
		var c;
		c = this;
		c.Args = go$append(c.Args, arg);
	};
	CommandNode.prototype.append = function(arg) { return this.go$val.append(arg); };
	CommandNode.Ptr.prototype.String = function() {
		var c, s, _ref, _i, _slice, _index, arg, i, _tuple, arg$1, ok;
		c = this;
		s = "";
		_ref = c.Args;
		_i = 0;
		while (_i < _ref.length) {
			arg = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				s = s + " ";
			}
			_tuple = (arg !== null && arg.constructor === (go$ptrType(PipeNode)) ? [arg.go$val, true] : [(go$ptrType(PipeNode)).nil, false]); arg$1 = _tuple[0]; ok = _tuple[1];
			if (ok) {
				s = s + ("(" + arg$1.String() + ")");
				_i++;
				continue;
			}
			s = s + (arg.String());
			_i++;
		}
		return s;
	};
	CommandNode.prototype.String = function() { return this.go$val.String(); };
	CommandNode.Ptr.prototype.Copy = function() {
		var c, n, _ref, _i, _slice, _index, c$1;
		c = this;
		if (c === (go$ptrType(CommandNode)).nil) {
			return c;
		}
		n = newCommand(c.Pos);
		_ref = c.Args;
		_i = 0;
		while (_i < _ref.length) {
			c$1 = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			n.append(c$1.Copy());
			_i++;
		}
		return n;
	};
	CommandNode.prototype.Copy = function() { return this.go$val.Copy(); };
	NewIdentifier = go$pkg.NewIdentifier = function(ident) {
		return new IdentifierNode.Ptr(9, 0, ident);
	};
	IdentifierNode.Ptr.prototype.SetPos = function(pos) {
		var i;
		i = this;
		i.Pos = pos;
		return i;
	};
	IdentifierNode.prototype.SetPos = function(pos) { return this.go$val.SetPos(pos); };
	IdentifierNode.Ptr.prototype.String = function() {
		var i;
		i = this;
		return i.Ident;
	};
	IdentifierNode.prototype.String = function() { return this.go$val.String(); };
	IdentifierNode.Ptr.prototype.Copy = function() {
		var i;
		i = this;
		return NewIdentifier(i.Ident).SetPos(i.Pos);
	};
	IdentifierNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newVariable = function(pos, ident) {
		return new VariableNode.Ptr(18, pos, strings.Split(ident, "."));
	};
	VariableNode.Ptr.prototype.String = function() {
		var v, s, _ref, _i, _slice, _index, id, i;
		v = this;
		s = "";
		_ref = v.Ident;
		_i = 0;
		while (_i < _ref.length) {
			id = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (i > 0) {
				s = s + ".";
			}
			s = s + (id);
			_i++;
		}
		return s;
	};
	VariableNode.prototype.String = function() { return this.go$val.String(); };
	VariableNode.Ptr.prototype.Copy = function() {
		var v;
		v = this;
		return new VariableNode.Ptr(18, v.Pos, go$appendSlice(new (go$sliceType(Go$String))([]), v.Ident));
	};
	VariableNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newDot = function(pos) {
		return new DotNode.Ptr(pos);
	};
	DotNode.Ptr.prototype.Type = function() {
		var d;
		d = this;
		return 5;
	};
	DotNode.prototype.Type = function() { return this.go$val.Type(); };
	DotNode.Ptr.prototype.String = function() {
		var d;
		d = this;
		return ".";
	};
	DotNode.prototype.String = function() { return this.go$val.String(); };
	DotNode.Ptr.prototype.Copy = function() {
		var d;
		d = this;
		return newDot(d.Pos);
	};
	DotNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newNil = function(pos) {
		return new NilNode.Ptr(pos);
	};
	NilNode.Ptr.prototype.Type = function() {
		var n;
		n = this;
		return 12;
	};
	NilNode.prototype.Type = function() { return this.go$val.Type(); };
	NilNode.Ptr.prototype.String = function() {
		var n;
		n = this;
		return "nil";
	};
	NilNode.prototype.String = function() { return this.go$val.String(); };
	NilNode.Ptr.prototype.Copy = function() {
		var n;
		n = this;
		return newNil(n.Pos);
	};
	NilNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newField = function(pos, ident) {
		return new FieldNode.Ptr(8, pos, strings.Split(ident.substring(1), "."));
	};
	FieldNode.Ptr.prototype.String = function() {
		var f, s, _ref, _i, _slice, _index, id;
		f = this;
		s = "";
		_ref = f.Ident;
		_i = 0;
		while (_i < _ref.length) {
			id = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			s = s + ("." + id);
			_i++;
		}
		return s;
	};
	FieldNode.prototype.String = function() { return this.go$val.String(); };
	FieldNode.Ptr.prototype.Copy = function() {
		var f;
		f = this;
		return new FieldNode.Ptr(8, f.Pos, go$appendSlice(new (go$sliceType(Go$String))([]), f.Ident));
	};
	FieldNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newChain = function(pos, node) {
		return new ChainNode.Ptr(3, pos, node, (go$sliceType(Go$String)).nil);
	};
	ChainNode.Ptr.prototype.Add = function(field) {
		var c;
		c = this;
		if ((field.length === 0) || !((field.charCodeAt(0) === 46))) {
			throw go$panic(new Go$String("no dot in field"));
		}
		field = field.substring(1);
		if (field === "") {
			throw go$panic(new Go$String("empty field"));
		}
		c.Field = go$append(c.Field, field);
	};
	ChainNode.prototype.Add = function(field) { return this.go$val.Add(field); };
	ChainNode.Ptr.prototype.String = function() {
		var c, s, _tuple, x, ok, _ref, _i, _slice, _index, field;
		c = this;
		s = c.Node.String();
		_tuple = (x = c.Node, (x !== null && x.constructor === (go$ptrType(PipeNode)) ? [x.go$val, true] : [(go$ptrType(PipeNode)).nil, false])); ok = _tuple[1];
		if (ok) {
			s = "(" + s + ")";
		}
		_ref = c.Field;
		_i = 0;
		while (_i < _ref.length) {
			field = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			s = s + ("." + field);
			_i++;
		}
		return s;
	};
	ChainNode.prototype.String = function() { return this.go$val.String(); };
	ChainNode.Ptr.prototype.Copy = function() {
		var c;
		c = this;
		return new ChainNode.Ptr(3, c.Pos, c.Node, go$appendSlice(new (go$sliceType(Go$String))([]), c.Field));
	};
	ChainNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newBool = function(pos, true$1) {
		return new BoolNode.Ptr(2, pos, true$1);
	};
	BoolNode.Ptr.prototype.String = function() {
		var b;
		b = this;
		if (b.True) {
			return "true";
		}
		return "false";
	};
	BoolNode.prototype.String = function() { return this.go$val.String(); };
	BoolNode.Ptr.prototype.Copy = function() {
		var b;
		b = this;
		return newBool(b.Pos, b.True);
	};
	BoolNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newNumber = function(pos, text, typ) {
		var n, _ref, _tuple, rune, tail, err, _tuple$1, v, err$1, _tuple$2, f, err$2, _tuple$3, u, err$3, _tuple$4, i, _tuple$5, f$1, err$4;
		n = new NumberNode.Ptr(13, pos, false, false, false, false, new Go$Int64(0, 0), new Go$Uint64(0, 0), 0, new Go$Complex128(0, 0), text);
		_ref = typ;
		if (_ref === 3) {
			_tuple = strconv.UnquoteChar(text.substring(1), text.charCodeAt(0)); rune = _tuple[0]; tail = _tuple[2]; err = _tuple[3];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(NumberNode)).nil, err];
			}
			if (!(tail === "'")) {
				return [(go$ptrType(NumberNode)).nil, fmt.Errorf("malformed character constant: %s", new (go$sliceType(go$emptyInterface))([new Go$String(text)]))];
			}
			n.Int64 = new Go$Int64(0, rune);
			n.IsInt = true;
			n.Uint64 = new Go$Uint64(0, rune);
			n.IsUint = true;
			n.Float64 = rune;
			n.IsFloat = true;
			return [n, null];
		} else if (_ref === 4) {
			_tuple$1 = fmt.Sscan(text, new (go$sliceType(go$emptyInterface))([new (go$ptrType(Go$Complex128))(function() { return n.Complex128; }, function(v) { n.Complex128 = v;; })])); err$1 = _tuple$1[1];
			if (!(go$interfaceIsEqual(err$1, null))) {
				return [(go$ptrType(NumberNode)).nil, err$1];
			}
			n.IsComplex = true;
			n.simplifyComplex();
			return [n, null];
		}
		if (text.length > 0 && (text.charCodeAt((text.length - 1 >> 0)) === 105)) {
			_tuple$2 = strconv.ParseFloat(text.substring(0, (text.length - 1 >> 0)), 64); f = _tuple$2[0]; err$2 = _tuple$2[1];
			if (go$interfaceIsEqual(err$2, null)) {
				n.IsComplex = true;
				n.Complex128 = new Go$Complex128(0, f);
				n.simplifyComplex();
				return [n, null];
			}
		}
		_tuple$3 = strconv.ParseUint(text, 0, 64); u = _tuple$3[0]; err$3 = _tuple$3[1];
		if (go$interfaceIsEqual(err$3, null)) {
			n.IsUint = true;
			n.Uint64 = u;
		}
		_tuple$4 = strconv.ParseInt(text, 0, 64); i = _tuple$4[0]; err$3 = _tuple$4[1];
		if (go$interfaceIsEqual(err$3, null)) {
			n.IsInt = true;
			n.Int64 = i;
			if ((i.high === 0 && i.low === 0)) {
				n.IsUint = true;
				n.Uint64 = u;
			}
		}
		if (n.IsInt) {
			n.IsFloat = true;
			n.Float64 = go$flatten64(n.Int64);
		} else if (n.IsUint) {
			n.IsFloat = true;
			n.Float64 = go$flatten64(n.Uint64);
		} else {
			_tuple$5 = strconv.ParseFloat(text, 64); f$1 = _tuple$5[0]; err$4 = _tuple$5[1];
			if (go$interfaceIsEqual(err$4, null)) {
				n.IsFloat = true;
				n.Float64 = f$1;
				if (!n.IsInt && (go$flatten64(new Go$Int64(0, f$1)) === f$1)) {
					n.IsInt = true;
					n.Int64 = new Go$Int64(0, f$1);
				}
				if (!n.IsUint && (go$flatten64(new Go$Uint64(0, f$1)) === f$1)) {
					n.IsUint = true;
					n.Uint64 = new Go$Uint64(0, f$1);
				}
			}
		}
		if (!n.IsInt && !n.IsUint && !n.IsFloat) {
			return [(go$ptrType(NumberNode)).nil, fmt.Errorf("illegal number syntax: %q", new (go$sliceType(go$emptyInterface))([new Go$String(text)]))];
		}
		return [n, null];
	};
	NumberNode.Ptr.prototype.simplifyComplex = function() {
		var n;
		n = this;
		n.IsFloat = n.Complex128.imag === 0;
		if (n.IsFloat) {
			n.Float64 = n.Complex128.real;
			n.IsInt = go$flatten64(new Go$Int64(0, n.Float64)) === n.Float64;
			if (n.IsInt) {
				n.Int64 = new Go$Int64(0, n.Float64);
			}
			n.IsUint = go$flatten64(new Go$Uint64(0, n.Float64)) === n.Float64;
			if (n.IsUint) {
				n.Uint64 = new Go$Uint64(0, n.Float64);
			}
		}
	};
	NumberNode.prototype.simplifyComplex = function() { return this.go$val.simplifyComplex(); };
	NumberNode.Ptr.prototype.String = function() {
		var n;
		n = this;
		return n.Text;
	};
	NumberNode.prototype.String = function() { return this.go$val.String(); };
	NumberNode.Ptr.prototype.Copy = function() {
		var n, nn, _struct, l, r;
		n = this;
		nn = new NumberNode.Ptr();
		l = nn; r = (_struct = n, new NumberNode.Ptr(_struct.NodeType, _struct.Pos, _struct.IsInt, _struct.IsUint, _struct.IsFloat, _struct.IsComplex, _struct.Int64, _struct.Uint64, _struct.Float64, _struct.Complex128, _struct.Text)); l.NodeType = r.NodeType; l.Pos = r.Pos; l.IsInt = r.IsInt; l.IsUint = r.IsUint; l.IsFloat = r.IsFloat; l.IsComplex = r.IsComplex; l.Int64 = r.Int64; l.Uint64 = r.Uint64; l.Float64 = r.Float64; l.Complex128 = r.Complex128; l.Text = r.Text;
		return nn;
	};
	NumberNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newString = function(pos, orig, text) {
		return new StringNode.Ptr(16, pos, orig, text);
	};
	StringNode.Ptr.prototype.String = function() {
		var s;
		s = this;
		return s.Quoted;
	};
	StringNode.prototype.String = function() { return this.go$val.String(); };
	StringNode.Ptr.prototype.Copy = function() {
		var s;
		s = this;
		return newString(s.Pos, s.Quoted, s.Text);
	};
	StringNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newEnd = function(pos) {
		return new endNode.Ptr(pos);
	};
	endNode.Ptr.prototype.Type = function() {
		var e;
		e = this;
		return 7;
	};
	endNode.prototype.Type = function() { return this.go$val.Type(); };
	endNode.Ptr.prototype.String = function() {
		var e;
		e = this;
		return "{{end}}";
	};
	endNode.prototype.String = function() { return this.go$val.String(); };
	endNode.Ptr.prototype.Copy = function() {
		var e;
		e = this;
		return newEnd(e.Pos);
	};
	endNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newElse = function(pos, line) {
		return new elseNode.Ptr(6, pos, line);
	};
	elseNode.Ptr.prototype.Type = function() {
		var e;
		e = this;
		return 6;
	};
	elseNode.prototype.Type = function() { return this.go$val.Type(); };
	elseNode.Ptr.prototype.String = function() {
		var e;
		e = this;
		return "{{else}}";
	};
	elseNode.prototype.String = function() { return this.go$val.String(); };
	elseNode.Ptr.prototype.Copy = function() {
		var e;
		e = this;
		return newElse(e.Pos, e.Line);
	};
	elseNode.prototype.Copy = function() { return this.go$val.Copy(); };
	BranchNode.Ptr.prototype.String = function() {
		var b, name, _ref;
		b = this;
		name = "";
		_ref = b.NodeType;
		if (_ref === 10) {
			name = "if";
		} else if (_ref === 15) {
			name = "range";
		} else if (_ref === 19) {
			name = "with";
		} else {
			throw go$panic(new Go$String("unknown branch type"));
		}
		if (!(b.ElseList === (go$ptrType(ListNode)).nil)) {
			return fmt.Sprintf("{{%s %s}}%s{{else}}%s{{end}}", new (go$sliceType(go$emptyInterface))([new Go$String(name), b.Pipe, b.List, b.ElseList]));
		}
		return fmt.Sprintf("{{%s %s}}%s{{end}}", new (go$sliceType(go$emptyInterface))([new Go$String(name), b.Pipe, b.List]));
	};
	BranchNode.prototype.String = function() { return this.go$val.String(); };
	newIf = function(pos, line, pipe, list$1, elseList) {
		return new IfNode.Ptr(new BranchNode.Ptr(10, pos, line, pipe, list$1, elseList));
	};
	IfNode.Ptr.prototype.Copy = function() {
		var i;
		i = this;
		return newIf(i.BranchNode.Pos, i.BranchNode.Line, i.BranchNode.Pipe.CopyPipe(), i.BranchNode.List.CopyList(), i.BranchNode.ElseList.CopyList());
	};
	IfNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newRange = function(pos, line, pipe, list$1, elseList) {
		return new RangeNode.Ptr(new BranchNode.Ptr(15, pos, line, pipe, list$1, elseList));
	};
	RangeNode.Ptr.prototype.Copy = function() {
		var r;
		r = this;
		return newRange(r.BranchNode.Pos, r.BranchNode.Line, r.BranchNode.Pipe.CopyPipe(), r.BranchNode.List.CopyList(), r.BranchNode.ElseList.CopyList());
	};
	RangeNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newWith = function(pos, line, pipe, list$1, elseList) {
		return new WithNode.Ptr(new BranchNode.Ptr(19, pos, line, pipe, list$1, elseList));
	};
	WithNode.Ptr.prototype.Copy = function() {
		var w;
		w = this;
		return newWith(w.BranchNode.Pos, w.BranchNode.Line, w.BranchNode.Pipe.CopyPipe(), w.BranchNode.List.CopyList(), w.BranchNode.ElseList.CopyList());
	};
	WithNode.prototype.Copy = function() { return this.go$val.Copy(); };
	newTemplate = function(pos, line, name, pipe) {
		return new TemplateNode.Ptr(17, pos, line, name, pipe);
	};
	TemplateNode.Ptr.prototype.String = function() {
		var t;
		t = this;
		if (t.Pipe === (go$ptrType(PipeNode)).nil) {
			return fmt.Sprintf("{{template %q}}", new (go$sliceType(go$emptyInterface))([new Go$String(t.Name)]));
		}
		return fmt.Sprintf("{{template %q %s}}", new (go$sliceType(go$emptyInterface))([new Go$String(t.Name), t.Pipe]));
	};
	TemplateNode.prototype.String = function() { return this.go$val.String(); };
	TemplateNode.Ptr.prototype.Copy = function() {
		var t;
		t = this;
		return newTemplate(t.Pos, t.Line, t.Name, t.Pipe.CopyPipe());
	};
	TemplateNode.prototype.Copy = function() { return this.go$val.Copy(); };
	Tree.Ptr.prototype.Copy = function() {
		var t;
		t = this;
		if (t === (go$ptrType(Tree)).nil) {
			return (go$ptrType(Tree)).nil;
		}
		return new Tree.Ptr(t.Name, t.ParseName, t.Root.CopyList(), t.text, (go$sliceType((go$mapType(Go$String, go$emptyInterface)))).nil, (go$ptrType(lexer)).nil, go$makeNativeArray("Struct", 3, function() { return new item.Ptr(); }), 0, (go$sliceType(Go$String)).nil);
	};
	Tree.prototype.Copy = function() { return this.go$val.Copy(); };
	Parse = go$pkg.Parse = function(name, text, leftDelim, rightDelim, funcs) {
		var treeSet, err, t, _tuple;
		treeSet = false;
		err = null;
		treeSet = new Go$Map();
		t = New(name, new (go$sliceType((go$mapType(Go$String, go$emptyInterface))))([]));
		t.text = text;
		_tuple = t.Parse(text, leftDelim, rightDelim, treeSet, funcs); err = _tuple[1];
		return [treeSet, err];
	};
	Tree.Ptr.prototype.next = function() {
		var t, _struct, _struct$1;
		t = this;
		if (t.peekCount > 0) {
			t.peekCount = t.peekCount - 1 >> 0;
		} else {
			t.token[0] = (_struct = t.lex.nextItem(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		}
		return (_struct$1 = t.token[t.peekCount], new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val));
	};
	Tree.prototype.next = function() { return this.go$val.next(); };
	Tree.Ptr.prototype.backup = function() {
		var t;
		t = this;
		t.peekCount = t.peekCount + 1 >> 0;
	};
	Tree.prototype.backup = function() { return this.go$val.backup(); };
	Tree.Ptr.prototype.backup2 = function(t1) {
		var t, _struct;
		t = this;
		t.token[1] = (_struct = t1, new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		t.peekCount = 2;
	};
	Tree.prototype.backup2 = function(t1) { return this.go$val.backup2(t1); };
	Tree.Ptr.prototype.backup3 = function(t2, t1) {
		var t, _struct, _struct$1;
		t = this;
		t.token[1] = (_struct = t1, new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		t.token[2] = (_struct$1 = t2, new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val));
		t.peekCount = 3;
	};
	Tree.prototype.backup3 = function(t2, t1) { return this.go$val.backup3(t2, t1); };
	Tree.Ptr.prototype.peek = function() {
		var t, _struct, _struct$1, _struct$2;
		t = this;
		if (t.peekCount > 0) {
			return (_struct = t.token[(t.peekCount - 1 >> 0)], new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		}
		t.peekCount = 1;
		t.token[0] = (_struct$1 = t.lex.nextItem(), new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val));
		return (_struct$2 = t.token[0], new item.Ptr(_struct$2.typ, _struct$2.pos, _struct$2.val));
	};
	Tree.prototype.peek = function() { return this.go$val.peek(); };
	Tree.Ptr.prototype.nextNonSpace = function() {
		var token, t, _struct, _struct$1, _struct$2;
		token = new item.Ptr();
		t = this;
		while (true) {
			token = (_struct = t.next(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
			if (!((token.typ === 16))) {
				break;
			}
		}
		token = (_struct$1 = token, new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val));
		return (_struct$2 = token, new item.Ptr(_struct$2.typ, _struct$2.pos, _struct$2.val));
	};
	Tree.prototype.nextNonSpace = function() { return this.go$val.nextNonSpace(); };
	Tree.Ptr.prototype.peekNonSpace = function() {
		var token, t, _struct, _struct$1, _struct$2;
		token = new item.Ptr();
		t = this;
		while (true) {
			token = (_struct = t.next(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
			if (!((token.typ === 16))) {
				break;
			}
		}
		t.backup();
		token = (_struct$1 = token, new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val));
		return (_struct$2 = token, new item.Ptr(_struct$2.typ, _struct$2.pos, _struct$2.val));
	};
	Tree.prototype.peekNonSpace = function() { return this.go$val.peekNonSpace(); };
	New = go$pkg.New = function(name, funcs) {
		return new Tree.Ptr(name, "", (go$ptrType(ListNode)).nil, "", funcs, (go$ptrType(lexer)).nil, go$makeNativeArray("Struct", 3, function() { return new item.Ptr(); }), 0, (go$sliceType(Go$String)).nil);
	};
	Tree.Ptr.prototype.ErrorContext = function(n) {
		var location, context, t, pos, text, byteNum, lineNum, _tuple;
		location = "";
		context = "";
		t = this;
		pos = (n.Position() >> 0);
		text = t.text.substring(0, pos);
		byteNum = strings.LastIndex(text, "\n");
		if (byteNum === -1) {
			byteNum = pos;
		} else {
			byteNum = byteNum + 1 >> 0;
			byteNum = pos - byteNum >> 0;
		}
		lineNum = 1 + strings.Count(text, "\n") >> 0;
		context = n.String();
		if (context.length > 20) {
			context = fmt.Sprintf("%.20s...", new (go$sliceType(go$emptyInterface))([new Go$String(context)]));
		}
		_tuple = [fmt.Sprintf("%s:%d:%d", new (go$sliceType(go$emptyInterface))([new Go$String(t.ParseName), new Go$Int(lineNum), new Go$Int(byteNum)])), context]; location = _tuple[0]; context = _tuple[1];
		return [location, context];
	};
	Tree.prototype.ErrorContext = function(n) { return this.go$val.ErrorContext(n); };
	Tree.Ptr.prototype.errorf = function(format, args) {
		var t;
		t = this;
		t.Root = (go$ptrType(ListNode)).nil;
		format = fmt.Sprintf("template: %s:%d: %s", new (go$sliceType(go$emptyInterface))([new Go$String(t.ParseName), new Go$Int(t.lex.lineNumber()), new Go$String(format)]));
		throw go$panic(fmt.Errorf(format, args));
	};
	Tree.prototype.errorf = function(format, args) { return this.go$val.errorf(format, args); };
	Tree.Ptr.prototype.error = function(err) {
		var t;
		t = this;
		t.errorf("%s", new (go$sliceType(go$emptyInterface))([err]));
	};
	Tree.prototype.error = function(err) { return this.go$val.error(err); };
	Tree.Ptr.prototype.expect = function(expected, context) {
		var t, _struct, token, _struct$1, _struct$2;
		t = this;
		token = (_struct = t.nextNonSpace(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		if (!((token.typ === expected))) {
			t.unexpected((_struct$1 = token, new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val)), context);
		}
		return (_struct$2 = token, new item.Ptr(_struct$2.typ, _struct$2.pos, _struct$2.val));
	};
	Tree.prototype.expect = function(expected, context) { return this.go$val.expect(expected, context); };
	Tree.Ptr.prototype.expectOneOf = function(expected1, expected2, context) {
		var t, _struct, token, _struct$1, _struct$2;
		t = this;
		token = (_struct = t.nextNonSpace(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		if (!((token.typ === expected1)) && !((token.typ === expected2))) {
			t.unexpected((_struct$1 = token, new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val)), context);
		}
		return (_struct$2 = token, new item.Ptr(_struct$2.typ, _struct$2.pos, _struct$2.val));
	};
	Tree.prototype.expectOneOf = function(expected1, expected2, context) { return this.go$val.expectOneOf(expected1, expected2, context); };
	Tree.Ptr.prototype.unexpected = function(token, context) {
		var t;
		t = this;
		t.errorf("unexpected %s in %s", new (go$sliceType(go$emptyInterface))([new token.constructor.Struct(token), new Go$String(context)]));
	};
	Tree.prototype.unexpected = function(token, context) { return this.go$val.unexpected(token, context); };
	Tree.Ptr.prototype.recover = function(errp) {
		var t, e, _tuple, ok;
		t = this;
		e = go$recover();
		if (!(go$interfaceIsEqual(e, null))) {
			_tuple = (e !== null && runtime.Error.implementedBy.indexOf(e.constructor) !== -1 ? [e, true] : [null, false]); ok = _tuple[1];
			if (ok) {
				throw go$panic(e);
			}
			if (!(t === (go$ptrType(Tree)).nil)) {
				t.stopParse();
			}
			errp.go$set((e !== null && go$error.implementedBy.indexOf(e.constructor) !== -1 ? e : go$typeAssertionFailed(e, go$error)));
		}
		return;
	};
	Tree.prototype.recover = function(errp) { return this.go$val.recover(errp); };
	Tree.Ptr.prototype.startParse = function(funcs, lex$1) {
		var t;
		t = this;
		t.Root = (go$ptrType(ListNode)).nil;
		t.lex = lex$1;
		t.vars = new (go$sliceType(Go$String))(["$"]);
		t.funcs = funcs;
	};
	Tree.prototype.startParse = function(funcs, lex$1) { return this.go$val.startParse(funcs, lex$1); };
	Tree.Ptr.prototype.stopParse = function() {
		var t;
		t = this;
		t.lex = (go$ptrType(lexer)).nil;
		t.vars = (go$sliceType(Go$String)).nil;
		t.funcs = (go$sliceType((go$mapType(Go$String, go$emptyInterface)))).nil;
	};
	Tree.prototype.stopParse = function() { return this.go$val.stopParse(); };
	Tree.Ptr.prototype.Parse = function(text, leftDelim, rightDelim, treeSet, funcs) {
		var tree, err, t, v, _tuple;
		tree = (go$ptrType(Tree)).nil;
		err = null;
		var go$deferred = [];
		try {
			t = this;
			go$deferred.push({ recv: t, method: "recover", args: [new (go$ptrType(go$error))(function() { return err; }, function(v) { err = v;; })] });
			t.ParseName = t.Name;
			t.startParse(funcs, lex(t.Name, text, leftDelim, rightDelim));
			t.text = text;
			t.parse(treeSet);
			t.add(treeSet);
			t.stopParse();
			_tuple = [t, null]; tree = _tuple[0]; err = _tuple[1];
			return [tree, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [tree, err];
		}
	};
	Tree.prototype.Parse = function(text, leftDelim, rightDelim, treeSet, funcs) { return this.go$val.Parse(text, leftDelim, rightDelim, treeSet, funcs); };
	Tree.Ptr.prototype.add = function(treeSet) {
		var t, _entry, tree, _key;
		t = this;
		tree = (_entry = treeSet[t.Name], _entry !== undefined ? _entry.v : (go$ptrType(Tree)).nil);
		if (tree === (go$ptrType(Tree)).nil || IsEmptyTree(tree.Root)) {
			_key = t.Name; (treeSet || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: t };
			return;
		}
		if (!IsEmptyTree(t.Root)) {
			t.errorf("template: multiple definition of template %q", new (go$sliceType(go$emptyInterface))([new Go$String(t.Name)]));
		}
	};
	Tree.prototype.add = function(treeSet) { return this.go$val.add(treeSet); };
	IsEmptyTree = go$pkg.IsEmptyTree = function(n) {
		var n$1, _ref, _type, _ref$1, _i, _slice, _index, node;
		_ref = n;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === null) {
			n$1 = _ref;
			return true;
		} else if (_type === (go$ptrType(ActionNode))) {
			n$1 = _ref.go$val;
		} else if (_type === (go$ptrType(IfNode))) {
			n$1 = _ref.go$val;
		} else if (_type === (go$ptrType(ListNode))) {
			n$1 = _ref.go$val;
			_ref$1 = n$1.Nodes;
			_i = 0;
			while (_i < _ref$1.length) {
				node = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (!IsEmptyTree(node)) {
					return false;
				}
				_i++;
			}
			return true;
		} else if (_type === (go$ptrType(RangeNode))) {
			n$1 = _ref.go$val;
		} else if (_type === (go$ptrType(TemplateNode))) {
			n$1 = _ref.go$val;
		} else if (_type === (go$ptrType(TextNode))) {
			n$1 = _ref.go$val;
			return bytes.TrimSpace(n$1.Text).length === 0;
		} else if (_type === (go$ptrType(WithNode))) {
			n$1 = _ref.go$val;
		} else {
			n$1 = _ref;
			throw go$panic(new Go$String("unknown node: " + n$1.String()));
		}
		return false;
	};
	Tree.Ptr.prototype.parse = function(treeSet) {
		var next, t, _struct, delim, newT, _struct$1, n;
		next = null;
		t = this;
		t.Root = newList(t.peek().pos);
		while (!((t.peek().typ === 6))) {
			if (t.peek().typ === 9) {
				delim = (_struct = t.next(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
				if (t.nextNonSpace().typ === 22) {
					newT = New("definition", new (go$sliceType((go$mapType(Go$String, go$emptyInterface))))([]));
					newT.text = t.text;
					newT.ParseName = t.ParseName;
					newT.startParse(t.funcs, t.lex);
					newT.parseDefinition(treeSet);
					continue;
				}
				t.backup2((_struct$1 = delim, new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val)));
			}
			n = t.textOrAction();
			if (n.Type() === 7) {
				t.errorf("unexpected %s", new (go$sliceType(go$emptyInterface))([n]));
			}
			t.Root.append(n);
		}
		next = null;
		return next;
	};
	Tree.prototype.parse = function(treeSet) { return this.go$val.parse(treeSet); };
	Tree.Ptr.prototype.parseDefinition = function(treeSet) {
		var t, _struct, name, err, _tuple, end, _tuple$1;
		t = this;
		name = (_struct = t.expectOneOf(17, 13, "define clause"), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		err = null;
		_tuple = strconv.Unquote(name.val); t.Name = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			t.error(err);
		}
		t.expect(14, "define clause");
		end = null;
		_tuple$1 = t.itemList(); t.Root = _tuple$1[0]; end = _tuple$1[1];
		if (!((end.Type() === 7))) {
			t.errorf("unexpected %s in %s", new (go$sliceType(go$emptyInterface))([end, new Go$String("define clause")]));
		}
		t.add(treeSet);
		t.stopParse();
	};
	Tree.prototype.parseDefinition = function(treeSet) { return this.go$val.parseDefinition(treeSet); };
	Tree.Ptr.prototype.itemList = function() {
		var list$1, next, t, n, _ref, _tuple;
		list$1 = (go$ptrType(ListNode)).nil;
		next = null;
		t = this;
		list$1 = newList(t.peekNonSpace().pos);
		while (!((t.peekNonSpace().typ === 6))) {
			n = t.textOrAction();
			_ref = n.Type();
			if (_ref === 7 || _ref === 6) {
				_tuple = [list$1, n]; list$1 = _tuple[0]; next = _tuple[1];
				return [list$1, next];
			}
			list$1.append(n);
		}
		t.errorf("unexpected EOF", new (go$sliceType(go$emptyInterface))([]));
		return [list$1, next];
	};
	Tree.prototype.itemList = function() { return this.go$val.itemList(); };
	Tree.Ptr.prototype.textOrAction = function() {
		var t, _struct, token, _ref, _struct$1;
		t = this;
		token = (_struct = t.nextNonSpace(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		_ref = token.typ;
		if (_ref === 18) {
			return newText(token.pos, token.val);
		} else if (_ref === 9) {
			return t.action();
		} else {
			t.unexpected((_struct$1 = token, new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val)), "input");
		}
		return null;
	};
	Tree.prototype.textOrAction = function() { return this.go$val.textOrAction(); };
	Tree.Ptr.prototype.action = function() {
		var n, t, _struct, token, _ref;
		n = null;
		t = this;
		token = (_struct = t.nextNonSpace(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		_ref = token.typ;
		if (_ref === 23) {
			n = t.elseControl();
			return n;
		} else if (_ref === 24) {
			n = t.endControl();
			return n;
		} else if (_ref === 25) {
			n = t.ifControl();
			return n;
		} else if (_ref === 27) {
			n = t.rangeControl();
			return n;
		} else if (_ref === 28) {
			n = t.templateControl();
			return n;
		} else if (_ref === 29) {
			n = t.withControl();
			return n;
		}
		t.backup();
		n = newAction(t.peek().pos, t.lex.lineNumber(), t.pipeline("command"));
		return n;
	};
	Tree.prototype.action = function() { return this.go$val.action(); };
	Tree.Ptr.prototype.pipeline = function(context) {
		var pipe, t, decl, pos, _struct, v, _struct$1, tokenAfterVariable, _struct$2, next, variable, _struct$3, _struct$4, _struct$5, _struct$6, token, _ref, _struct$7;
		pipe = (go$ptrType(PipeNode)).nil;
		t = this;
		decl = (go$sliceType((go$ptrType(VariableNode)))).nil;
		pos = t.peekNonSpace().pos;
		while (true) {
			v = (_struct = t.peekNonSpace(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
			if (v.typ === 19) {
				t.next();
				tokenAfterVariable = (_struct$1 = t.peek(), new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val));
				next = (_struct$2 = t.peekNonSpace(), new item.Ptr(_struct$2.typ, _struct$2.pos, _struct$2.val));
				if ((next.typ === 5) || ((next.typ === 2) && next.val === ",")) {
					t.nextNonSpace();
					variable = newVariable(v.pos, v.val);
					decl = go$append(decl, variable);
					t.vars = go$append(t.vars, v.val);
					if ((next.typ === 2) && next.val === ",") {
						if (context === "range" && decl.length < 2) {
							continue;
						}
						t.errorf("too many declarations in %s", new (go$sliceType(go$emptyInterface))([new Go$String(context)]));
					}
				} else if (tokenAfterVariable.typ === 16) {
					t.backup3((_struct$3 = v, new item.Ptr(_struct$3.typ, _struct$3.pos, _struct$3.val)), (_struct$4 = tokenAfterVariable, new item.Ptr(_struct$4.typ, _struct$4.pos, _struct$4.val)));
				} else {
					t.backup2((_struct$5 = v, new item.Ptr(_struct$5.typ, _struct$5.pos, _struct$5.val)));
				}
			}
			break;
		}
		pipe = newPipeline(pos, t.lex.lineNumber(), decl);
		while (true) {
			token = (_struct$6 = t.nextNonSpace(), new item.Ptr(_struct$6.typ, _struct$6.pos, _struct$6.val));
			_ref = token.typ;
			if (_ref === 14 || _ref === 15) {
				if (pipe.Cmds.length === 0) {
					t.errorf("missing value for %s", new (go$sliceType(go$emptyInterface))([new Go$String(context)]));
				}
				if (token.typ === 15) {
					t.backup();
				}
				return pipe;
			} else if (_ref === 1 || _ref === 3 || _ref === 4 || _ref === 21 || _ref === 7 || _ref === 8 || _ref === 11 || _ref === 26 || _ref === 13 || _ref === 17 || _ref === 19 || _ref === 10) {
				t.backup();
				pipe.append(t.command());
			} else {
				t.unexpected((_struct$7 = token, new item.Ptr(_struct$7.typ, _struct$7.pos, _struct$7.val)), context);
			}
		}
	};
	Tree.prototype.pipeline = function(context) { return this.go$val.pipeline(context); };
	Tree.Ptr.prototype.parseControl = function(allowElseIf, context) {
		var pos, line, pipe, list$1, elseList, t, next, _tuple, _ref, _tuple$1, _tuple$2;
		pos = 0;
		line = 0;
		pipe = (go$ptrType(PipeNode)).nil;
		list$1 = (go$ptrType(ListNode)).nil;
		elseList = (go$ptrType(ListNode)).nil;
		var go$deferred = [];
		try {
			t = this;
			go$deferred.push({ recv: t, method: "popVars", args: [t.vars.length] });
			line = t.lex.lineNumber();
			pipe = t.pipeline(context);
			next = null;
			_tuple = t.itemList(); list$1 = _tuple[0]; next = _tuple[1];
			_ref = next.Type();
			switch (0) { default: if (_ref === 7) {
			} else if (_ref === 6) {
				if (allowElseIf) {
					if (t.peek().typ === 25) {
						t.next();
						elseList = newList(next.Position());
						elseList.append(t.ifControl());
						break;
					}
				}
				_tuple$1 = t.itemList(); elseList = _tuple$1[0]; next = _tuple$1[1];
				if (!((next.Type() === 7))) {
					t.errorf("expected end; found %s", new (go$sliceType(go$emptyInterface))([next]));
				}
			} }
			_tuple$2 = [(new Pos(pipe.Pos)).Position(), line, pipe, list$1, elseList]; pos = _tuple$2[0]; line = _tuple$2[1]; pipe = _tuple$2[2]; list$1 = _tuple$2[3]; elseList = _tuple$2[4];
			return [pos, line, pipe, list$1, elseList];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [pos, line, pipe, list$1, elseList];
		}
	};
	Tree.prototype.parseControl = function(allowElseIf, context) { return this.go$val.parseControl(allowElseIf, context); };
	Tree.Ptr.prototype.ifControl = function() {
		var t, _tuple;
		t = this;
		return (_tuple = t.parseControl(true, "if"), newIf(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]));
	};
	Tree.prototype.ifControl = function() { return this.go$val.ifControl(); };
	Tree.Ptr.prototype.rangeControl = function() {
		var t, _tuple;
		t = this;
		return (_tuple = t.parseControl(false, "range"), newRange(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]));
	};
	Tree.prototype.rangeControl = function() { return this.go$val.rangeControl(); };
	Tree.Ptr.prototype.withControl = function() {
		var t, _tuple;
		t = this;
		return (_tuple = t.parseControl(false, "with"), newWith(_tuple[0], _tuple[1], _tuple[2], _tuple[3], _tuple[4]));
	};
	Tree.prototype.withControl = function() { return this.go$val.withControl(); };
	Tree.Ptr.prototype.endControl = function() {
		var t;
		t = this;
		return newEnd(t.expect(14, "end").pos);
	};
	Tree.prototype.endControl = function() { return this.go$val.endControl(); };
	Tree.Ptr.prototype.elseControl = function() {
		var t, _struct, peek;
		t = this;
		peek = (_struct = t.peekNonSpace(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		if (peek.typ === 25) {
			return newElse(peek.pos, t.lex.lineNumber());
		}
		return newElse(t.expect(14, "else").pos, t.lex.lineNumber());
	};
	Tree.prototype.elseControl = function() { return this.go$val.elseControl(); };
	Tree.Ptr.prototype.templateControl = function() {
		var t, name, _struct, token, _ref, _tuple, s, err, _struct$1, pipe;
		t = this;
		name = "";
		token = (_struct = t.nextNonSpace(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		_ref = token.typ;
		if (_ref === 17 || _ref === 13) {
			_tuple = strconv.Unquote(token.val); s = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				t.error(err);
			}
			name = s;
		} else {
			t.unexpected((_struct$1 = token, new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val)), "template invocation");
		}
		pipe = (go$ptrType(PipeNode)).nil;
		if (!((t.nextNonSpace().typ === 14))) {
			t.backup();
			pipe = t.pipeline("template");
		}
		return newTemplate(token.pos, t.lex.lineNumber(), name, pipe);
	};
	Tree.prototype.templateControl = function() { return this.go$val.templateControl(); };
	Tree.Ptr.prototype.command = function() {
		var t, cmd, operand, _struct, token, _ref;
		t = this;
		cmd = newCommand(t.peekNonSpace().pos);
		while (true) {
			t.peekNonSpace();
			operand = t.operand();
			if (!(go$interfaceIsEqual(operand, null))) {
				cmd.append(operand);
			}
			token = (_struct = t.next(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
			_ref = token.typ;
			if (_ref === 16) {
				continue;
			} else if (_ref === 0) {
				t.errorf("%s", new (go$sliceType(go$emptyInterface))([new Go$String(token.val)]));
			} else if (_ref === 14 || _ref === 15) {
				t.backup();
			} else if (_ref === 12) {
			} else {
				t.errorf("unexpected %s in operand; missing space?", new (go$sliceType(go$emptyInterface))([new token.constructor.Struct(token)]));
			}
			break;
		}
		if (cmd.Args.length === 0) {
			t.errorf("empty command", new (go$sliceType(go$emptyInterface))([]));
		}
		return cmd;
	};
	Tree.prototype.command = function() { return this.go$val.command(); };
	Tree.Ptr.prototype.operand = function() {
		var t, node, chain, _ref;
		t = this;
		node = t.term();
		if (go$interfaceIsEqual(node, null)) {
			return null;
		}
		if (t.peek().typ === 7) {
			chain = newChain(t.peek().pos, node);
			while (t.peek().typ === 7) {
				chain.Add(t.next().val);
			}
			_ref = node.Type();
			if (_ref === 8) {
				node = newField((new Pos(chain.Pos)).Position(), chain.String());
			} else if (_ref === 18) {
				node = newVariable((new Pos(chain.Pos)).Position(), chain.String());
			} else {
				node = chain;
			}
		}
		return node;
	};
	Tree.prototype.operand = function() { return this.go$val.operand(); };
	Tree.Ptr.prototype.term = function() {
		var t, _struct, token, _ref, _tuple, number, err, pipe, _struct$1, token$1, _tuple$1, s, err$1;
		t = this;
		token = (_struct = t.nextNonSpace(), new item.Ptr(_struct.typ, _struct.pos, _struct.val));
		_ref = token.typ;
		if (_ref === 0) {
			t.errorf("%s", new (go$sliceType(go$emptyInterface))([new Go$String(token.val)]));
		} else if (_ref === 8) {
			if (!t.hasFunction(token.val)) {
				t.errorf("function %q not defined", new (go$sliceType(go$emptyInterface))([new Go$String(token.val)]));
			}
			return NewIdentifier(token.val).SetPos(token.pos);
		} else if (_ref === 21) {
			return newDot(token.pos);
		} else if (_ref === 26) {
			return newNil(token.pos);
		} else if (_ref === 19) {
			return t.useVar(token.pos, token.val);
		} else if (_ref === 7) {
			return newField(token.pos, token.val);
		} else if (_ref === 1) {
			return newBool(token.pos, token.val === "true");
		} else if (_ref === 3 || _ref === 4 || _ref === 11) {
			_tuple = newNumber(token.pos, token.val, token.typ); number = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				t.error(err);
			}
			return number;
		} else if (_ref === 10) {
			pipe = t.pipeline("parenthesized pipeline");
			token$1 = (_struct$1 = t.next(), new item.Ptr(_struct$1.typ, _struct$1.pos, _struct$1.val));
			if (!((token$1.typ === 15))) {
				t.errorf("unclosed right paren: unexpected %s", new (go$sliceType(go$emptyInterface))([new token$1.constructor.Struct(token$1)]));
			}
			return pipe;
		} else if (_ref === 17 || _ref === 13) {
			_tuple$1 = strconv.Unquote(token.val); s = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!(go$interfaceIsEqual(err$1, null))) {
				t.error(err$1);
			}
			return newString(token.pos, token.val, s);
		}
		t.backup();
		return null;
	};
	Tree.prototype.term = function() { return this.go$val.term(); };
	Tree.Ptr.prototype.hasFunction = function(name) {
		var t, _ref, _i, _slice, _index, funcMap, _entry;
		t = this;
		_ref = t.funcs;
		_i = 0;
		while (_i < _ref.length) {
			funcMap = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (funcMap === false) {
				_i++;
				continue;
			}
			if (!(go$interfaceIsEqual((_entry = funcMap[name], _entry !== undefined ? _entry.v : null), null))) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Tree.prototype.hasFunction = function(name) { return this.go$val.hasFunction(name); };
	Tree.Ptr.prototype.popVars = function(n) {
		var t;
		t = this;
		t.vars = go$subslice(t.vars, 0, n);
	};
	Tree.prototype.popVars = function(n) { return this.go$val.popVars(n); };
	Tree.Ptr.prototype.useVar = function(pos, name) {
		var t, v, _ref, _i, _slice, _index, varName, _slice$1, _index$1, _slice$2, _index$2;
		t = this;
		v = newVariable(pos, name);
		_ref = t.vars;
		_i = 0;
		while (_i < _ref.length) {
			varName = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (varName === (_slice$1 = v.Ident, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"))) {
				return v;
			}
			_i++;
		}
		t.errorf("undefined variable %q", new (go$sliceType(go$emptyInterface))([new Go$String((_slice$2 = v.Ident, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")))]));
		return null;
	};
	Tree.prototype.useVar = function(pos, name) { return this.go$val.useVar(pos, name); };
	go$pkg.init = function() {
		item.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(item)).methods = [["String", "", [], [Go$String], false, -1]];
		item.init([["typ", "typ", "text/template/parse", itemType, ""], ["pos", "pos", "text/template/parse", Pos, ""], ["val", "val", "text/template/parse", Go$String, ""]]);
		stateFn.init([(go$ptrType(lexer))], [stateFn], false);
		(go$ptrType(lexer)).methods = [["accept", "text/template/parse", [Go$String], [Go$Bool], false, -1], ["acceptRun", "text/template/parse", [Go$String], [], false, -1], ["atTerminator", "text/template/parse", [], [Go$Bool], false, -1], ["backup", "text/template/parse", [], [], false, -1], ["emit", "text/template/parse", [itemType], [], false, -1], ["errorf", "text/template/parse", [Go$String, (go$sliceType(go$emptyInterface))], [stateFn], true, -1], ["ignore", "text/template/parse", [], [], false, -1], ["lineNumber", "text/template/parse", [], [Go$Int], false, -1], ["next", "text/template/parse", [], [Go$Int32], false, -1], ["nextItem", "text/template/parse", [], [item], false, -1], ["peek", "text/template/parse", [], [Go$Int32], false, -1], ["scanNumber", "text/template/parse", [], [Go$Bool], false, -1]];
		lexer.init([["name", "name", "text/template/parse", Go$String, ""], ["input", "input", "text/template/parse", Go$String, ""], ["leftDelim", "leftDelim", "text/template/parse", Go$String, ""], ["rightDelim", "rightDelim", "text/template/parse", Go$String, ""], ["state", "state", "text/template/parse", stateFn, ""], ["pos", "pos", "text/template/parse", Pos, ""], ["start", "start", "text/template/parse", Pos, ""], ["width", "width", "text/template/parse", Pos, ""], ["lastPos", "lastPos", "text/template/parse", Pos, ""], ["items", "items", "text/template/parse", (go$ptrType(list.List)), ""], ["parenDepth", "parenDepth", "text/template/parse", Go$Int, ""]]);
		Node.init([["Copy", "", (go$funcType([], [Node], false))], ["Position", "", (go$funcType([], [Pos], false))], ["String", "", (go$funcType([], [Go$String], false))], ["Type", "", (go$funcType([], [NodeType], false))], ["unexported", "text/template/parse", (go$funcType([], [], false))]]);
		NodeType.methods = [["Type", "", [], [NodeType], false, -1]];
		(go$ptrType(NodeType)).methods = [["Type", "", [], [NodeType], false, -1]];
		Pos.methods = [["Position", "", [], [Pos], false, -1], ["unexported", "text/template/parse", [], [], false, -1]];
		(go$ptrType(Pos)).methods = [["Position", "", [], [Pos], false, -1], ["unexported", "text/template/parse", [], [], false, -1]];
		ListNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(ListNode)).methods = [["Copy", "", [], [Node], false, -1], ["CopyList", "", [], [(go$ptrType(ListNode))], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["append", "text/template/parse", [Node], [], false, -1], ["unexported", "text/template/parse", [], [], false, 1]];
		ListNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Nodes", "Nodes", "", (go$sliceType(Node)), ""]]);
		TextNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(TextNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		TextNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Text", "Text", "", (go$sliceType(Go$Uint8)), ""]]);
		PipeNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(PipeNode)).methods = [["Copy", "", [], [Node], false, -1], ["CopyPipe", "", [], [(go$ptrType(PipeNode))], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["append", "text/template/parse", [(go$ptrType(CommandNode))], [], false, -1], ["unexported", "text/template/parse", [], [], false, 1]];
		PipeNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Line", "Line", "", Go$Int, ""], ["Decl", "Decl", "", (go$sliceType((go$ptrType(VariableNode)))), ""], ["Cmds", "Cmds", "", (go$sliceType((go$ptrType(CommandNode)))), ""]]);
		ActionNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(ActionNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		ActionNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Line", "Line", "", Go$Int, ""], ["Pipe", "Pipe", "", (go$ptrType(PipeNode)), ""]]);
		CommandNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(CommandNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["append", "text/template/parse", [Node], [], false, -1], ["unexported", "text/template/parse", [], [], false, 1]];
		CommandNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Args", "Args", "", (go$sliceType(Node)), ""]]);
		IdentifierNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(IdentifierNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["SetPos", "", [Pos], [(go$ptrType(IdentifierNode))], false, -1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		IdentifierNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Ident", "Ident", "", Go$String, ""]]);
		VariableNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(VariableNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		VariableNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Ident", "Ident", "", (go$sliceType(Go$String)), ""]]);
		DotNode.methods = [["Position", "", [], [Pos], false, 0], ["unexported", "text/template/parse", [], [], false, 0]];
		(go$ptrType(DotNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 0], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, -1], ["unexported", "text/template/parse", [], [], false, 0]];
		DotNode.init([["Pos", "", "", Pos, ""]]);
		NilNode.methods = [["Position", "", [], [Pos], false, 0], ["unexported", "text/template/parse", [], [], false, 0]];
		(go$ptrType(NilNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 0], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, -1], ["unexported", "text/template/parse", [], [], false, 0]];
		NilNode.init([["Pos", "", "", Pos, ""]]);
		FieldNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(FieldNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		FieldNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Ident", "Ident", "", (go$sliceType(Go$String)), ""]]);
		ChainNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(ChainNode)).methods = [["Add", "", [Go$String], [], false, -1], ["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		ChainNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Node", "Node", "", Node, ""], ["Field", "Field", "", (go$sliceType(Go$String)), ""]]);
		BoolNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(BoolNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		BoolNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["True", "True", "", Go$Bool, ""]]);
		NumberNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(NumberNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["simplifyComplex", "text/template/parse", [], [], false, -1], ["unexported", "text/template/parse", [], [], false, 1]];
		NumberNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["IsInt", "IsInt", "", Go$Bool, ""], ["IsUint", "IsUint", "", Go$Bool, ""], ["IsFloat", "IsFloat", "", Go$Bool, ""], ["IsComplex", "IsComplex", "", Go$Bool, ""], ["Int64", "Int64", "", Go$Int64, ""], ["Uint64", "Uint64", "", Go$Uint64, ""], ["Float64", "Float64", "", Go$Float64, ""], ["Complex128", "Complex128", "", Go$Complex128, ""], ["Text", "Text", "", Go$String, ""]]);
		StringNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(StringNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		StringNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Quoted", "Quoted", "", Go$String, ""], ["Text", "Text", "", Go$String, ""]]);
		endNode.methods = [["Position", "", [], [Pos], false, 0], ["unexported", "text/template/parse", [], [], false, 0]];
		(go$ptrType(endNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 0], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, -1], ["unexported", "text/template/parse", [], [], false, 0]];
		endNode.init([["Pos", "", "", Pos, ""]]);
		elseNode.methods = [["Position", "", [], [Pos], false, 1], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(elseNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, -1], ["unexported", "text/template/parse", [], [], false, 1]];
		elseNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Line", "Line", "", Go$Int, ""]]);
		BranchNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(BranchNode)).methods = [["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		BranchNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Line", "Line", "", Go$Int, ""], ["Pipe", "Pipe", "", (go$ptrType(PipeNode)), ""], ["List", "List", "", (go$ptrType(ListNode)), ""], ["ElseList", "ElseList", "", (go$ptrType(ListNode)), ""]]);
		IfNode.methods = [["Position", "", [], [Pos], false, 0], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 0]];
		(go$ptrType(IfNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 0], ["String", "", [], [Go$String], false, 0], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 0]];
		IfNode.init([["BranchNode", "", "", BranchNode, ""]]);
		RangeNode.methods = [["Position", "", [], [Pos], false, 0], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 0]];
		(go$ptrType(RangeNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 0], ["String", "", [], [Go$String], false, 0], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 0]];
		RangeNode.init([["BranchNode", "", "", BranchNode, ""]]);
		WithNode.methods = [["Position", "", [], [Pos], false, 0], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 0]];
		(go$ptrType(WithNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 0], ["String", "", [], [Go$String], false, 0], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 0]];
		WithNode.init([["BranchNode", "", "", BranchNode, ""]]);
		TemplateNode.methods = [["Position", "", [], [Pos], false, 1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		(go$ptrType(TemplateNode)).methods = [["Copy", "", [], [Node], false, -1], ["Position", "", [], [Pos], false, 1], ["String", "", [], [Go$String], false, -1], ["Type", "", [], [NodeType], false, 0], ["unexported", "text/template/parse", [], [], false, 1]];
		TemplateNode.init([["NodeType", "", "", NodeType, ""], ["Pos", "", "", Pos, ""], ["Line", "Line", "", Go$Int, ""], ["Name", "Name", "", Go$String, ""], ["Pipe", "Pipe", "", (go$ptrType(PipeNode)), ""]]);
		(go$ptrType(Tree)).methods = [["Copy", "", [], [(go$ptrType(Tree))], false, -1], ["ErrorContext", "", [Node], [Go$String, Go$String], false, -1], ["Parse", "", [Go$String, Go$String, Go$String, (go$mapType(Go$String, (go$ptrType(Tree)))), (go$sliceType((go$mapType(Go$String, go$emptyInterface))))], [(go$ptrType(Tree)), go$error], true, -1], ["action", "text/template/parse", [], [Node], false, -1], ["add", "text/template/parse", [(go$mapType(Go$String, (go$ptrType(Tree))))], [], false, -1], ["backup", "text/template/parse", [], [], false, -1], ["backup2", "text/template/parse", [item], [], false, -1], ["backup3", "text/template/parse", [item, item], [], false, -1], ["command", "text/template/parse", [], [(go$ptrType(CommandNode))], false, -1], ["elseControl", "text/template/parse", [], [Node], false, -1], ["endControl", "text/template/parse", [], [Node], false, -1], ["error", "text/template/parse", [go$error], [], false, -1], ["errorf", "text/template/parse", [Go$String, (go$sliceType(go$emptyInterface))], [], true, -1], ["expect", "text/template/parse", [itemType, Go$String], [item], false, -1], ["expectOneOf", "text/template/parse", [itemType, itemType, Go$String], [item], false, -1], ["hasFunction", "text/template/parse", [Go$String], [Go$Bool], false, -1], ["ifControl", "text/template/parse", [], [Node], false, -1], ["itemList", "text/template/parse", [], [(go$ptrType(ListNode)), Node], false, -1], ["next", "text/template/parse", [], [item], false, -1], ["nextNonSpace", "text/template/parse", [], [item], false, -1], ["operand", "text/template/parse", [], [Node], false, -1], ["parse", "text/template/parse", [(go$mapType(Go$String, (go$ptrType(Tree))))], [Node], false, -1], ["parseControl", "text/template/parse", [Go$Bool, Go$String], [Pos, Go$Int, (go$ptrType(PipeNode)), (go$ptrType(ListNode)), (go$ptrType(ListNode))], false, -1], ["parseDefinition", "text/template/parse", [(go$mapType(Go$String, (go$ptrType(Tree))))], [], false, -1], ["peek", "text/template/parse", [], [item], false, -1], ["peekNonSpace", "text/template/parse", [], [item], false, -1], ["pipeline", "text/template/parse", [Go$String], [(go$ptrType(PipeNode))], false, -1], ["popVars", "text/template/parse", [Go$Int], [], false, -1], ["rangeControl", "text/template/parse", [], [Node], false, -1], ["recover", "text/template/parse", [(go$ptrType(go$error))], [], false, -1], ["startParse", "text/template/parse", [(go$sliceType((go$mapType(Go$String, go$emptyInterface)))), (go$ptrType(lexer))], [], false, -1], ["stopParse", "text/template/parse", [], [], false, -1], ["templateControl", "text/template/parse", [], [Node], false, -1], ["term", "text/template/parse", [], [Node], false, -1], ["textOrAction", "text/template/parse", [], [Node], false, -1], ["unexpected", "text/template/parse", [item, Go$String], [], false, -1], ["useVar", "text/template/parse", [Pos, Go$String], [Node], false, -1], ["withControl", "text/template/parse", [], [Node], false, -1]];
		Tree.init([["Name", "Name", "", Go$String, ""], ["ParseName", "ParseName", "", Go$String, ""], ["Root", "Root", "", (go$ptrType(ListNode)), ""], ["text", "text", "text/template/parse", Go$String, ""], ["funcs", "funcs", "text/template/parse", (go$sliceType((go$mapType(Go$String, go$emptyInterface)))), ""], ["lex", "lex", "text/template/parse", (go$ptrType(lexer)), ""], ["token", "token", "text/template/parse", (go$arrayType(item, 3)), ""], ["peekCount", "peekCount", "text/template/parse", Go$Int, ""], ["vars", "vars", "text/template/parse", (go$sliceType(Go$String)), ""]]);
		var _map, _key;
		key = (_map = new Go$Map(), _key = ".", _map[_key] = { k: _key, v: 21 }, _key = "define", _map[_key] = { k: _key, v: 22 }, _key = "else", _map[_key] = { k: _key, v: 23 }, _key = "end", _map[_key] = { k: _key, v: 24 }, _key = "if", _map[_key] = { k: _key, v: 25 }, _key = "range", _map[_key] = { k: _key, v: 27 }, _key = "nil", _map[_key] = { k: _key, v: 26 }, _key = "template", _map[_key] = { k: _key, v: 28 }, _key = "with", _map[_key] = { k: _key, v: 29 }, _map);
		textFormat = "%s";
	}
	return go$pkg;
})();
go$packages["text/template"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], fmt = go$packages["fmt"], io = go$packages["io"], reflect = go$packages["reflect"], runtime = go$packages["runtime"], sort = go$packages["sort"], strings = go$packages["strings"], parse = go$packages["text/template/parse"], errors = go$packages["errors"], url = go$packages["net/url"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], ioutil = go$packages["io/ioutil"], filepath = go$packages["path/filepath"], state, variable, rvs, rvInts, rvUints, rvFloats, rvStrings, FuncMap, common, Template, doublePercent, errRecover, isTrue, canBeNil, indirect, printableValue, sortKeys, createValueFuncs, addValueFuncs, addFuncs, goodFunc, findFunction, index, length, call, truth, and, or, not, basicKind, eq, ne, lt, le, gt, ge, HTMLEscape, HTMLEscapeString, HTMLEscaper, JSEscape, JSEscapeString, jsIsSpecial, JSEscaper, URLQueryEscaper, evalArgs, parseFiles, parseGlob, New, zero, errorType, fmtStringerType, builtins, builtinFuncs, errBadComparisonType, errBadComparison, errNoComparison, htmlQuot, htmlApos, htmlAmp, htmlLt, htmlGt, jsLowUni, hex, jsBackslash, jsApos, jsQuot, jsLt, jsGt;
	state = go$pkg.state = go$newType(0, "Struct", "template.state", "state", "text/template", function(tmpl_, wr_, node_, vars_) {
		this.go$val = this;
		this.tmpl = tmpl_ !== undefined ? tmpl_ : (go$ptrType(Template)).nil;
		this.wr = wr_ !== undefined ? wr_ : null;
		this.node = node_ !== undefined ? node_ : null;
		this.vars = vars_ !== undefined ? vars_ : (go$sliceType(variable)).nil;
	});
	variable = go$pkg.variable = go$newType(0, "Struct", "template.variable", "variable", "text/template", function(name_, value_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.value = value_ !== undefined ? value_ : new reflect.Value.Ptr();
	});
	rvs = go$pkg.rvs = go$newType(0, "Slice", "template.rvs", "rvs", "text/template", null);
	rvInts = go$pkg.rvInts = go$newType(0, "Struct", "template.rvInts", "rvInts", "text/template", function(rvs_) {
		this.go$val = this;
		this.rvs = rvs_ !== undefined ? rvs_ : rvs.nil;
	});
	rvUints = go$pkg.rvUints = go$newType(0, "Struct", "template.rvUints", "rvUints", "text/template", function(rvs_) {
		this.go$val = this;
		this.rvs = rvs_ !== undefined ? rvs_ : rvs.nil;
	});
	rvFloats = go$pkg.rvFloats = go$newType(0, "Struct", "template.rvFloats", "rvFloats", "text/template", function(rvs_) {
		this.go$val = this;
		this.rvs = rvs_ !== undefined ? rvs_ : rvs.nil;
	});
	rvStrings = go$pkg.rvStrings = go$newType(0, "Struct", "template.rvStrings", "rvStrings", "text/template", function(rvs_) {
		this.go$val = this;
		this.rvs = rvs_ !== undefined ? rvs_ : rvs.nil;
	});
	FuncMap = go$pkg.FuncMap = go$newType(0, "Map", "template.FuncMap", "FuncMap", "text/template", null);
	common = go$pkg.common = go$newType(0, "Struct", "template.common", "common", "text/template", function(tmpl_, parseFuncs_, execFuncs_) {
		this.go$val = this;
		this.tmpl = tmpl_ !== undefined ? tmpl_ : false;
		this.parseFuncs = parseFuncs_ !== undefined ? parseFuncs_ : false;
		this.execFuncs = execFuncs_ !== undefined ? execFuncs_ : false;
	});
	Template = go$pkg.Template = go$newType(0, "Struct", "template.Template", "Template", "text/template", function(name_, Tree_, common_, leftDelim_, rightDelim_) {
		this.go$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.Tree = Tree_ !== undefined ? Tree_ : (go$ptrType(parse.Tree)).nil;
		this.common = common_ !== undefined ? common_ : (go$ptrType(common)).nil;
		this.leftDelim = leftDelim_ !== undefined ? leftDelim_ : "";
		this.rightDelim = rightDelim_ !== undefined ? rightDelim_ : "";
	});
	state.Ptr.prototype.push = function(name, value) {
		var s, _struct;
		s = this;
		s.vars = go$append(s.vars, new variable.Ptr(name, (_struct = value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))));
	};
	state.prototype.push = function(name, value) { return this.go$val.push(name, value); };
	state.Ptr.prototype.mark = function() {
		var s;
		s = this;
		return s.vars.length;
	};
	state.prototype.mark = function() { return this.go$val.mark(); };
	state.Ptr.prototype.pop = function(mark) {
		var s;
		s = this;
		s.vars = go$subslice(s.vars, 0, mark);
	};
	state.prototype.pop = function(mark) { return this.go$val.pop(mark); };
	state.Ptr.prototype.setVar = function(n, value) {
		var s, _struct, _slice, _index;
		s = this;
		(_slice = s.vars, _index = (s.vars.length - n >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).value = (_struct = value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
	};
	state.prototype.setVar = function(n, value) { return this.go$val.setVar(n, value); };
	state.Ptr.prototype.varValue = function(name) {
		var s, i, _slice, _index, _slice$1, _index$1, _struct, _struct$1;
		s = this;
		i = s.mark() - 1 >> 0;
		while (i >= 0) {
			if ((_slice = s.vars, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).name === name) {
				return (_struct = (_slice$1 = s.vars, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			}
			i = i - 1 >> 0;
		}
		s.errorf("undefined variable: %s", new (go$sliceType(go$emptyInterface))([new Go$String(name)]));
		return (_struct$1 = zero, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
	};
	state.prototype.varValue = function(name) { return this.go$val.varValue(name); };
	state.Ptr.prototype.at = function(node) {
		var s;
		s = this;
		s.node = node;
	};
	state.prototype.at = function(node) { return this.go$val.at(node); };
	doublePercent = function(str) {
		if (strings.Contains(str, "%")) {
			str = strings.Replace(str, "%", "%%", -1);
		}
		return str;
	};
	state.Ptr.prototype.errorf = function(format, args) {
		var s, name, _tuple, location, context;
		s = this;
		name = doublePercent(s.tmpl.Name());
		if (go$interfaceIsEqual(s.node, null)) {
			format = fmt.Sprintf("template: %s: %s", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$String(format)]));
		} else {
			_tuple = s.tmpl.Tree.ErrorContext(s.node); location = _tuple[0]; context = _tuple[1];
			format = fmt.Sprintf("template: %s: executing %q at <%s>: %s", new (go$sliceType(go$emptyInterface))([new Go$String(location), new Go$String(name), new Go$String(doublePercent(context)), new Go$String(format)]));
		}
		throw go$panic(fmt.Errorf(format, args));
	};
	state.prototype.errorf = function(format, args) { return this.go$val.errorf(format, args); };
	errRecover = function(errp) {
		var e, err, _ref, _type;
		e = go$recover();
		if (!(go$interfaceIsEqual(e, null))) {
			_ref = e;
			_type = _ref !== null ? _ref.constructor : null;
			if (runtime.Error.implementedBy.indexOf(_type) !== -1) {
				err = _ref;
				throw go$panic(e);
			} else if (go$error.implementedBy.indexOf(_type) !== -1) {
				err = _ref;
				errp.go$set(err);
			} else {
				err = _ref;
				throw go$panic(e);
			}
		}
	};
	Template.Ptr.prototype.ExecuteTemplate = function(wr, name, data) {
		var t, _entry, tmpl;
		t = this;
		tmpl = (_entry = t.common.tmpl[name], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil);
		if (tmpl === (go$ptrType(Template)).nil) {
			return fmt.Errorf("template: no template %q associated with template %q", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$String(t.name)]));
		}
		return tmpl.Execute(wr, data);
	};
	Template.prototype.ExecuteTemplate = function(wr, name, data) { return this.go$val.ExecuteTemplate(wr, name, data); };
	Template.Ptr.prototype.Execute = function(wr, data) {
		var err, t, v, _struct, value, _struct$1, state$1, b, _ref, _i, _keys, _entry, tmpl, name, s, _struct$2;
		err = null;
		var go$deferred = [];
		try {
			t = this;
			go$deferred.push({ fun: errRecover, args: [new (go$ptrType(go$error))(function() { return err; }, function(v) { err = v;; })] });
			value = (_struct = reflect.ValueOf(data), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			state$1 = new state.Ptr(t, wr, null, new (go$sliceType(variable))([new variable.Ptr("$", (_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)))]));
			t.init();
			if (t.Tree === (go$ptrType(parse.Tree)).nil || t.Tree.Root === (go$ptrType(parse.ListNode)).nil) {
				b = new bytes.Buffer.Ptr();
				_ref = t.common.tmpl;
				_i = 0;
				_keys = go$keys(_ref);
				while (_i < _keys.length) {
					_entry = _ref[_keys[_i]];
					tmpl = _entry.v;
					name = _entry.k;
					if (tmpl.Tree === (go$ptrType(parse.Tree)).nil || tmpl.Tree.Root === (go$ptrType(parse.ListNode)).nil) {
						_i++;
						continue;
					}
					if (b.Len() > 0) {
						b.WriteString(", ");
					}
					fmt.Fprintf(b, "%q", new (go$sliceType(go$emptyInterface))([new Go$String(name)]));
					_i++;
				}
				s = "";
				if (b.Len() > 0) {
					s = "; defined templates are: " + b.String();
				}
				state$1.errorf("%q is an incomplete or empty template%s", new (go$sliceType(go$emptyInterface))([new Go$String(t.Name()), new Go$String(s)]));
			}
			state$1.walk((_struct$2 = value, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), t.Tree.Root);
			return err;
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return err;
		}
	};
	Template.prototype.Execute = function(wr, data) { return this.go$val.Execute(wr, data); };
	state.Ptr.prototype.walk = function(dot, node) {
		var s, node$1, _ref, _type, _struct, _struct$1, val, _struct$2, _struct$3, _ref$1, _i, _slice, _index, node$2, _struct$4, _struct$5, _struct$6, _tuple, err, _struct$7;
		s = this;
		s.at(node);
		_ref = node;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(parse.ActionNode))) {
			node$1 = _ref.go$val;
			val = (_struct$1 = s.evalPipeline((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), node$1.Pipe), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
			if (node$1.Pipe.Decl.length === 0) {
				s.printValue(node$1, (_struct$2 = val, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)));
			}
		} else if (_type === (go$ptrType(parse.IfNode))) {
			node$1 = _ref.go$val;
			s.walkIfOrWith(10, (_struct$3 = dot, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), node$1.BranchNode.Pipe, node$1.BranchNode.List, node$1.BranchNode.ElseList);
		} else if (_type === (go$ptrType(parse.ListNode))) {
			node$1 = _ref.go$val;
			_ref$1 = node$1.Nodes;
			_i = 0;
			while (_i < _ref$1.length) {
				node$2 = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				s.walk((_struct$4 = dot, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), node$2);
				_i++;
			}
		} else if (_type === (go$ptrType(parse.RangeNode))) {
			node$1 = _ref.go$val;
			s.walkRange((_struct$5 = dot, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), node$1);
		} else if (_type === (go$ptrType(parse.TemplateNode))) {
			node$1 = _ref.go$val;
			s.walkTemplate((_struct$6 = dot, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)), node$1);
		} else if (_type === (go$ptrType(parse.TextNode))) {
			node$1 = _ref.go$val;
			_tuple = s.wr.Write(node$1.Text); err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				s.errorf("%s", new (go$sliceType(go$emptyInterface))([err]));
			}
		} else if (_type === (go$ptrType(parse.WithNode))) {
			node$1 = _ref.go$val;
			s.walkIfOrWith(19, (_struct$7 = dot, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), node$1.BranchNode.Pipe, node$1.BranchNode.List, node$1.BranchNode.ElseList);
		} else {
			node$1 = _ref;
			s.errorf("unknown node: %s", new (go$sliceType(go$emptyInterface))([node$1]));
		}
	};
	state.prototype.walk = function(dot, node) { return this.go$val.walk(dot, node); };
	state.Ptr.prototype.walkIfOrWith = function(typ, dot, pipe, list, elseList) {
		var s, _struct, _struct$1, val, _tuple, _struct$2, truth$1, ok, _struct$3, _struct$4, _struct$5;
		var go$deferred = [];
		try {
			s = this;
			go$deferred.push({ recv: s, method: "pop", args: [s.mark()] });
			val = (_struct$1 = s.evalPipeline((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), pipe), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
			_tuple = isTrue((_struct$2 = val, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag))); truth$1 = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				s.errorf("if/with can't use %v", new (go$sliceType(go$emptyInterface))([new val.constructor.Struct(val)]));
			}
			if (truth$1) {
				if (typ === 19) {
					s.walk((_struct$3 = val, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), list);
				} else {
					s.walk((_struct$4 = dot, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), list);
				}
			} else if (!(elseList === (go$ptrType(parse.ListNode)).nil)) {
				s.walk((_struct$5 = dot, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), elseList);
			}
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	state.prototype.walkIfOrWith = function(typ, dot, pipe, list, elseList) { return this.go$val.walkIfOrWith(typ, dot, pipe, list, elseList); };
	isTrue = function(val) {
		var truth$1, ok, _tuple, _ref, x, x$1, x$2, _tuple$1;
		truth$1 = false;
		ok = false;
		if (!val.IsValid()) {
			_tuple = [false, true]; truth$1 = _tuple[0]; ok = _tuple[1];
			return [truth$1, ok];
		}
		_ref = val.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 24) {
			truth$1 = val.Len() > 0;
		} else if (_ref === 1) {
			truth$1 = val.Bool();
		} else if (_ref === 15 || _ref === 16) {
			truth$1 = !((x = val.Complex(), (x.real === 0 && x.imag === 0)));
		} else if (_ref === 18 || _ref === 19 || _ref === 22 || _ref === 20) {
			truth$1 = !val.IsNil();
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			truth$1 = !((x$1 = val.Int(), (x$1.high === 0 && x$1.low === 0)));
		} else if (_ref === 13 || _ref === 14) {
			truth$1 = !((val.Float() === 0));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			truth$1 = !((x$2 = val.Uint(), (x$2.high === 0 && x$2.low === 0)));
		} else if (_ref === 25) {
			truth$1 = true;
		} else {
			return [truth$1, ok];
		}
		_tuple$1 = [truth$1, true]; truth$1 = _tuple$1[0]; ok = _tuple$1[1];
		return [truth$1, ok];
	};
	state.Ptr.prototype.walkRange = function(dot, r) {
		var s, _tuple, _struct, _struct$1, _struct$2, val, mark, oneIteration, _ref, i, _struct$3, _struct$4, _ref$1, _i, _slice, _index, _struct$5, key, _struct$6, _struct$7, _struct$8, i$1, _tuple$1, _struct$9, elem, ok, _struct$10, _struct$11, _struct$12;
		var go$deferred = [];
		try {
			s = this;
			s.at(r);
			go$deferred.push({ recv: s, method: "pop", args: [s.mark()] });
			_tuple = indirect((_struct$1 = s.evalPipeline((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), r.BranchNode.Pipe), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))); val = (_struct$2 = _tuple[0], new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			mark = s.mark();
			oneIteration = (function(index$1, elem) {
				var _struct$3, _struct$4, _struct$5;
				if (r.BranchNode.Pipe.Decl.length > 0) {
					s.setVar(1, (_struct$3 = elem, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)));
				}
				if (r.BranchNode.Pipe.Decl.length > 1) {
					s.setVar(2, (_struct$4 = index$1, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)));
				}
				s.walk((_struct$5 = elem, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), r.BranchNode.List);
				s.pop(mark);
			});
			_ref = val.Kind();
			switch (0) { default: if (_ref === 17 || _ref === 23) {
				if (val.Len() === 0) {
					break;
				}
				i = 0;
				while (i < val.Len()) {
					oneIteration((_struct$3 = reflect.ValueOf(new Go$Int(i)), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), (_struct$4 = val.Index(i), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)));
					i = i + 1 >> 0;
				}
				return;
			} else if (_ref === 21) {
				if (val.Len() === 0) {
					break;
				}
				_ref$1 = sortKeys(val.MapKeys());
				_i = 0;
				while (_i < _ref$1.length) {
					key = (_struct$5 = (_slice = _ref$1, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag));
					oneIteration((_struct$6 = key, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)), (_struct$8 = val.MapIndex((_struct$7 = key, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag))), new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag)));
					_i++;
				}
				return;
			} else if (_ref === 18) {
				if (val.IsNil()) {
					break;
				}
				i$1 = 0;
				while (true) {
					_tuple$1 = val.Recv(); elem = (_struct$9 = _tuple$1[0], new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag)); ok = _tuple$1[1];
					if (!ok) {
						break;
					}
					oneIteration((_struct$10 = reflect.ValueOf(new Go$Int(i$1)), new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag)), (_struct$11 = elem, new reflect.Value.Ptr(_struct$11.typ, _struct$11.val, _struct$11.flag)));
					i$1 = i$1 + 1 >> 0;
				}
				if (i$1 === 0) {
					break;
				}
				return;
			} else if (_ref === 0) {
				break;
			} else {
				s.errorf("range can't iterate over %v", new (go$sliceType(go$emptyInterface))([new val.constructor.Struct(val)]));
			} }
			if (!(r.BranchNode.ElseList === (go$ptrType(parse.ListNode)).nil)) {
				s.walk((_struct$12 = dot, new reflect.Value.Ptr(_struct$12.typ, _struct$12.val, _struct$12.flag)), r.BranchNode.ElseList);
			}
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	state.prototype.walkRange = function(dot, r) { return this.go$val.walkRange(dot, r); };
	state.Ptr.prototype.walkTemplate = function(dot, t) {
		var s, _entry, tmpl, _struct, _struct$1, _struct$2, newState, _struct$3, _struct$4;
		s = this;
		s.at(t);
		tmpl = (_entry = s.tmpl.common.tmpl[t.Name], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil);
		if (tmpl === (go$ptrType(Template)).nil) {
			s.errorf("template %q not defined", new (go$sliceType(go$emptyInterface))([new Go$String(t.Name)]));
		}
		dot = (_struct$1 = s.evalPipeline((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), t.Pipe), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		newState = (_struct$2 = s, new state.Ptr(_struct$2.tmpl, _struct$2.wr, _struct$2.node, _struct$2.vars));
		newState.tmpl = tmpl;
		newState.vars = new (go$sliceType(variable))([new variable.Ptr("$", (_struct$3 = dot, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)))]);
		newState.walk((_struct$4 = dot, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), tmpl.Tree.Root);
	};
	state.prototype.walkTemplate = function(dot, t) { return this.go$val.walkTemplate(dot, t); };
	state.Ptr.prototype.evalPipeline = function(dot, pipe) {
		var value, s, _struct, _ref, _i, _slice, _index, cmd, _struct$1, _struct$2, _struct$3, _struct$4, _ref$1, _i$1, _slice$1, _index$1, variable$1, _slice$2, _index$2, _struct$5, _struct$6, _struct$7;
		value = new reflect.Value.Ptr();
		s = this;
		if (pipe === (go$ptrType(parse.PipeNode)).nil) {
			return (_struct = value, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		}
		s.at(pipe);
		_ref = pipe.Cmds;
		_i = 0;
		while (_i < _ref.length) {
			cmd = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			value = (_struct$3 = s.evalCommand((_struct$1 = dot, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), cmd, (_struct$2 = value, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag))), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
			if ((value.Kind() === 20) && (value.Type().NumMethod() === 0)) {
				value = (_struct$4 = reflect.ValueOf(value.Interface()), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
			}
			_i++;
		}
		_ref$1 = pipe.Decl;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			variable$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			s.push((_slice$2 = variable$1.Ident, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), (_struct$5 = value, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)));
			_i$1++;
		}
		value = (_struct$6 = value, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag));
		return (_struct$7 = value, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag));
	};
	state.prototype.evalPipeline = function(dot, pipe) { return this.go$val.evalPipeline(dot, pipe); };
	state.Ptr.prototype.notAFunction = function(args, final$1) {
		var s, _slice, _index;
		s = this;
		if (args.length > 1 || final$1.IsValid()) {
			s.errorf("can't give argument to non-function %s", new (go$sliceType(go$emptyInterface))([(_slice = args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))]));
		}
	};
	state.prototype.notAFunction = function(args, final$1) { return this.go$val.notAFunction(args, final$1); };
	state.Ptr.prototype.evalCommand = function(dot, cmd, final$1) {
		var s, _slice, _index, firstWord, n, _ref, _type, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, _struct$10, _struct$11, _struct$12, _struct$13, _struct$14, word, _ref$1, _type$1, _struct$15, _struct$16, _struct$17, _struct$18;
		s = this;
		firstWord = (_slice = cmd.Args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		_ref = firstWord;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(parse.FieldNode))) {
			n = _ref.go$val;
			return (_struct$2 = s.evalFieldNode((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), n, cmd.Args, (_struct$1 = final$1, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		} else if (_type === (go$ptrType(parse.ChainNode))) {
			n = _ref.go$val;
			return (_struct$5 = s.evalChainNode((_struct$3 = dot, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), n, cmd.Args, (_struct$4 = final$1, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag))), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag));
		} else if (_type === (go$ptrType(parse.IdentifierNode))) {
			n = _ref.go$val;
			return (_struct$8 = s.evalFunction((_struct$6 = dot, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)), n, cmd, cmd.Args, (_struct$7 = final$1, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag))), new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag));
		} else if (_type === (go$ptrType(parse.PipeNode))) {
			n = _ref.go$val;
			return (_struct$10 = s.evalPipeline((_struct$9 = dot, new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag)), n), new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag));
		} else if (_type === (go$ptrType(parse.VariableNode))) {
			n = _ref.go$val;
			return (_struct$13 = s.evalVariableNode((_struct$11 = dot, new reflect.Value.Ptr(_struct$11.typ, _struct$11.val, _struct$11.flag)), n, cmd.Args, (_struct$12 = final$1, new reflect.Value.Ptr(_struct$12.typ, _struct$12.val, _struct$12.flag))), new reflect.Value.Ptr(_struct$13.typ, _struct$13.val, _struct$13.flag));
		}
		s.at(firstWord);
		s.notAFunction(cmd.Args, (_struct$14 = final$1, new reflect.Value.Ptr(_struct$14.typ, _struct$14.val, _struct$14.flag)));
		_ref$1 = firstWord;
		_type$1 = _ref$1 !== null ? _ref$1.constructor : null;
		if (_type$1 === (go$ptrType(parse.BoolNode))) {
			word = _ref$1.go$val;
			return (_struct$15 = reflect.ValueOf(new Go$Bool(word.True)), new reflect.Value.Ptr(_struct$15.typ, _struct$15.val, _struct$15.flag));
		} else if (_type$1 === (go$ptrType(parse.DotNode))) {
			word = _ref$1.go$val;
			return (_struct$16 = dot, new reflect.Value.Ptr(_struct$16.typ, _struct$16.val, _struct$16.flag));
		} else if (_type$1 === (go$ptrType(parse.NilNode))) {
			word = _ref$1.go$val;
			s.errorf("nil is not a command", new (go$sliceType(go$emptyInterface))([]));
		} else if (_type$1 === (go$ptrType(parse.NumberNode))) {
			word = _ref$1.go$val;
			return (_struct$17 = s.idealConstant(word), new reflect.Value.Ptr(_struct$17.typ, _struct$17.val, _struct$17.flag));
		} else if (_type$1 === (go$ptrType(parse.StringNode))) {
			word = _ref$1.go$val;
			return (_struct$18 = reflect.ValueOf(new Go$String(word.Text)), new reflect.Value.Ptr(_struct$18.typ, _struct$18.val, _struct$18.flag));
		}
		s.errorf("can't evaluate command %q", new (go$sliceType(go$emptyInterface))([firstWord]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalCommand = function(dot, cmd, final$1) { return this.go$val.evalCommand(dot, cmd, final$1); };
	state.Ptr.prototype.idealConstant = function(constant) {
		var s, _struct, _struct$1, x, n, x$1, x$2, _struct$2, _struct$3;
		s = this;
		s.at(constant);
		if (constant.IsComplex) {
			return (_struct = reflect.ValueOf(constant.Complex128), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		} else if (constant.IsFloat && strings.IndexAny(constant.Text, ".eE") >= 0) {
			return (_struct$1 = reflect.ValueOf(new Go$Float64(constant.Float64)), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		} else if (constant.IsInt) {
			n = ((x = constant.Int64, x.low + ((x.high >> 31) * 4294967296)) >> 0);
			if (!((x$1 = new Go$Int64(0, n), x$2 = constant.Int64, (x$1.high === x$2.high && x$1.low === x$2.low)))) {
				s.errorf("%s overflows int", new (go$sliceType(go$emptyInterface))([new Go$String(constant.Text)]));
			}
			return (_struct$2 = reflect.ValueOf(new Go$Int(n)), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		} else if (constant.IsUint) {
			s.errorf("%s overflows int", new (go$sliceType(go$emptyInterface))([new Go$String(constant.Text)]));
		}
		return (_struct$3 = zero, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
	};
	state.prototype.idealConstant = function(constant) { return this.go$val.idealConstant(constant); };
	state.Ptr.prototype.evalFieldNode = function(dot, field, args, final$1) {
		var s, _struct, _struct$1, _struct$2, _struct$3;
		s = this;
		s.at(field);
		return (_struct$3 = s.evalFieldChain((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), (_struct$1 = dot, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), field, field.Ident, args, (_struct$2 = final$1, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag))), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
	};
	state.prototype.evalFieldNode = function(dot, field, args, final$1) { return this.go$val.evalFieldNode(dot, field, args, final$1); };
	state.Ptr.prototype.evalChainNode = function(dot, chain, args, final$1) {
		var s, _struct, _struct$1, pipe, _struct$2, _struct$3, _struct$4, _struct$5;
		s = this;
		s.at(chain);
		pipe = (_struct$1 = s.evalArg((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), null, chain.Node), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		if (chain.Field.length === 0) {
			s.errorf("internal error: no fields in evalChainNode", new (go$sliceType(go$emptyInterface))([]));
		}
		return (_struct$5 = s.evalFieldChain((_struct$2 = dot, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), (_struct$3 = pipe, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), chain, chain.Field, args, (_struct$4 = final$1, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag))), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag));
	};
	state.prototype.evalChainNode = function(dot, chain, args, final$1) { return this.go$val.evalChainNode(dot, chain, args, final$1); };
	state.Ptr.prototype.evalVariableNode = function(dot, variable$1, args, final$1) {
		var s, _slice, _index, _struct, value, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6;
		s = this;
		s.at(variable$1);
		value = (_struct = s.varValue((_slice = variable$1.Ident, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		if (variable$1.Ident.length === 1) {
			s.notAFunction(args, (_struct$1 = final$1, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)));
			return (_struct$2 = value, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		return (_struct$6 = s.evalFieldChain((_struct$3 = dot, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), (_struct$4 = value, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), variable$1, go$subslice(variable$1.Ident, 1), args, (_struct$5 = final$1, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag))), new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag));
	};
	state.prototype.evalVariableNode = function(dot, variable$1, args, final$1) { return this.go$val.evalVariableNode(dot, variable$1, args, final$1); };
	state.Ptr.prototype.evalFieldChain = function(dot, receiver, node, ident, args, final$1) {
		var s, n, i, _struct, _slice, _index, _struct$1, _struct$2, _struct$3, _struct$4, _slice$1, _index$1, _struct$5, _struct$6, _struct$7;
		s = this;
		n = ident.length;
		i = 0;
		while (i < (n - 1 >> 0)) {
			receiver = (_struct$3 = s.evalField((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), (_slice = ident, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), node, (go$sliceType(parse.Node)).nil, (_struct$1 = zero, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), (_struct$2 = receiver, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag))), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
			i = i + 1 >> 0;
		}
		return (_struct$7 = s.evalField((_struct$4 = dot, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), (_slice$1 = ident, _index$1 = (n - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), node, args, (_struct$5 = final$1, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), (_struct$6 = receiver, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag))), new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag));
	};
	state.prototype.evalFieldChain = function(dot, receiver, node, ident, args, final$1) { return this.go$val.evalFieldChain(dot, receiver, node, ident, args, final$1); };
	state.Ptr.prototype.evalFunction = function(dot, node, cmd, args, final$1) {
		var s, name, _tuple, _struct, function$1, ok, _struct$1, _struct$2, _struct$3, _struct$4;
		s = this;
		s.at(node);
		name = node.Ident;
		_tuple = findFunction(name, s.tmpl); function$1 = (_struct = _tuple[0], new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)); ok = _tuple[1];
		if (!ok) {
			s.errorf("%q is not a defined function", new (go$sliceType(go$emptyInterface))([new Go$String(name)]));
		}
		return (_struct$4 = s.evalCall((_struct$1 = dot, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), (_struct$2 = function$1, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), cmd, name, args, (_struct$3 = final$1, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag))), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
	};
	state.prototype.evalFunction = function(dot, node, cmd, args, final$1) { return this.go$val.evalFunction(dot, node, cmd, args, final$1); };
	state.Ptr.prototype.evalField = function(dot, fieldName, node, args, final$1, receiver) {
		var s, _struct, typ, _tuple, _struct$1, _struct$2, _struct$3, ptr, _struct$4, _struct$5, method, _struct$6, _struct$7, _struct$8, _struct$9, hasArgs, _tuple$1, _struct$10, _struct$11, isNil, _ref, _tuple$2, _struct$12, tField, ok, _struct$13, field, _struct$14, _struct$15, nameVal, _struct$16, _struct$17;
		s = this;
		if (!receiver.IsValid()) {
			return (_struct = zero, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		}
		typ = receiver.Type();
		_tuple = indirect((_struct$1 = receiver, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))); receiver = (_struct$2 = _tuple[0], new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		ptr = (_struct$3 = receiver, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
		if (!((ptr.Kind() === 20)) && ptr.CanAddr()) {
			ptr = (_struct$4 = ptr.Addr(), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
		}
		method = (_struct$5 = ptr.MethodByName(fieldName), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag));
		if (method.IsValid()) {
			return (_struct$9 = s.evalCall((_struct$6 = dot, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag)), (_struct$7 = method, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), node, fieldName, args, (_struct$8 = final$1, new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag))), new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag));
		}
		hasArgs = args.length > 1 || final$1.IsValid();
		_tuple$1 = indirect((_struct$10 = receiver, new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag))); receiver = (_struct$11 = _tuple$1[0], new reflect.Value.Ptr(_struct$11.typ, _struct$11.val, _struct$11.flag)); isNil = _tuple$1[1];
		if (isNil) {
			s.errorf("nil pointer evaluating %s.%s", new (go$sliceType(go$emptyInterface))([typ, new Go$String(fieldName)]));
		}
		_ref = receiver.Kind();
		if (_ref === 25) {
			_tuple$2 = receiver.Type().FieldByName(fieldName); tField = (_struct$12 = _tuple$2[0], new reflect.StructField.Ptr(_struct$12.Name, _struct$12.PkgPath, _struct$12.Type, _struct$12.Tag, _struct$12.Offset, _struct$12.Index, _struct$12.Anonymous)); ok = _tuple$2[1];
			if (ok) {
				field = (_struct$13 = receiver.FieldByIndex(tField.Index), new reflect.Value.Ptr(_struct$13.typ, _struct$13.val, _struct$13.flag));
				if (!(tField.PkgPath === "")) {
					s.errorf("%s is an unexported field of struct type %s", new (go$sliceType(go$emptyInterface))([new Go$String(fieldName), typ]));
				}
				if (hasArgs) {
					s.errorf("%s has arguments but cannot be invoked as function", new (go$sliceType(go$emptyInterface))([new Go$String(fieldName)]));
				}
				return (_struct$14 = field, new reflect.Value.Ptr(_struct$14.typ, _struct$14.val, _struct$14.flag));
			}
			s.errorf("%s is not a field of struct type %s", new (go$sliceType(go$emptyInterface))([new Go$String(fieldName), typ]));
		} else if (_ref === 21) {
			nameVal = (_struct$15 = reflect.ValueOf(new Go$String(fieldName)), new reflect.Value.Ptr(_struct$15.typ, _struct$15.val, _struct$15.flag));
			if (nameVal.Type().AssignableTo(receiver.Type().Key())) {
				if (hasArgs) {
					s.errorf("%s is not a method but has arguments", new (go$sliceType(go$emptyInterface))([new Go$String(fieldName)]));
				}
				return (_struct$17 = receiver.MapIndex((_struct$16 = nameVal, new reflect.Value.Ptr(_struct$16.typ, _struct$16.val, _struct$16.flag))), new reflect.Value.Ptr(_struct$17.typ, _struct$17.val, _struct$17.flag));
			}
		}
		s.errorf("can't evaluate field %s in type %s", new (go$sliceType(go$emptyInterface))([new Go$String(fieldName), typ]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalField = function(dot, fieldName, node, args, final$1, receiver) { return this.go$val.evalField(dot, fieldName, node, args, final$1, receiver); };
	state.Ptr.prototype.evalCall = function(dot, fun, node, name, args, final$1) {
		var s, typ, numIn, numFixed, argv, i, _struct, _slice, _index, _struct$1, _slice$1, _index$1, argType, _struct$2, _slice$2, _index$2, _struct$3, _slice$3, _index$3, t, _struct$4, _struct$5, _slice$4, _index$4, result, _slice$5, _index$5, x, _slice$6, _index$6, _slice$7, _index$7, _struct$6;
		s = this;
		if (!(args === (go$sliceType(parse.Node)).nil)) {
			args = go$subslice(args, 1);
		}
		typ = fun.Type();
		numIn = args.length;
		if (final$1.IsValid()) {
			numIn = numIn + 1 >> 0;
		}
		numFixed = args.length;
		if (typ.IsVariadic()) {
			numFixed = typ.NumIn() - 1 >> 0;
			if (numIn < numFixed) {
				s.errorf("wrong number of args for %s: want at least %d got %d", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$Int((typ.NumIn() - 1 >> 0)), new Go$Int(args.length)]));
			}
		} else if (numIn < (typ.NumIn() - 1 >> 0) || !typ.IsVariadic() && !((numIn === typ.NumIn()))) {
			s.errorf("wrong number of args for %s: want %d got %d", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$Int(typ.NumIn()), new Go$Int(args.length)]));
		}
		if (!goodFunc(typ)) {
			s.errorf("can't call method/function %q with %d results", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$Int(typ.NumOut())]));
		}
		argv = (go$sliceType(reflect.Value)).make(numIn, 0, function() { return new reflect.Value.Ptr(); });
		i = 0;
		while (i < numFixed) {
			_slice$1 = argv; _index$1 = i;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (_struct$1 = s.evalArg((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), typ.In(i), (_slice = args, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"))), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))) : go$throwRuntimeError("index out of range");
			i = i + 1 >> 0;
		}
		if (typ.IsVariadic()) {
			argType = typ.In(typ.NumIn() - 1 >> 0).Elem();
			while (i < args.length) {
				_slice$3 = argv; _index$3 = i;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = (_struct$3 = s.evalArg((_struct$2 = dot, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), argType, (_slice$2 = args, _index$2 = i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"))), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag))) : go$throwRuntimeError("index out of range");
				i = i + 1 >> 0;
			}
		}
		if (final$1.IsValid()) {
			t = typ.In(typ.NumIn() - 1 >> 0);
			if (typ.IsVariadic()) {
				t = t.Elem();
			}
			_slice$4 = argv; _index$4 = i;(_index$4 >= 0 && _index$4 < _slice$4.length) ? (_slice$4.array[_slice$4.offset + _index$4] = (_struct$5 = s.validateType((_struct$4 = final$1, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), t), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag))) : go$throwRuntimeError("index out of range");
		}
		result = fun.Call(argv);
		if ((result.length === 2) && !(_slice$5 = result, _index$5 = 1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")).IsNil()) {
			s.at(node);
			s.errorf("error calling %s: %s", new (go$sliceType(go$emptyInterface))([new Go$String(name), (x = (_slice$6 = result, _index$6 = 1, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")).Interface(), (x !== null && go$error.implementedBy.indexOf(x.constructor) !== -1 ? x : go$typeAssertionFailed(x, go$error)))]));
		}
		return (_struct$6 = (_slice$7 = result, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag));
	};
	state.prototype.evalCall = function(dot, fun, node, name, args, final$1) { return this.go$val.evalCall(dot, fun, node, name, args, final$1); };
	canBeNil = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 18 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 22 || _ref === 23) {
			return true;
		}
		return false;
	};
	state.Ptr.prototype.validateType = function(value, typ) {
		var s, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5;
		s = this;
		if (!value.IsValid()) {
			if (go$interfaceIsEqual(typ, null) || canBeNil(typ)) {
				return (_struct = reflect.Zero(typ), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			}
			s.errorf("invalid value; expected %s", new (go$sliceType(go$emptyInterface))([typ]));
		}
		if (!(go$interfaceIsEqual(typ, null)) && !value.Type().AssignableTo(typ)) {
			if ((value.Kind() === 20) && !value.IsNil()) {
				value = (_struct$1 = value.Elem(), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
				if (value.Type().AssignableTo(typ)) {
					return (_struct$2 = value, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
				}
			}
			if ((value.Kind() === 22) && value.Type().Elem().AssignableTo(typ)) {
				value = (_struct$3 = value.Elem(), new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag));
			} else if (reflect.PtrTo(value.Type()).AssignableTo(typ) && value.CanAddr()) {
				value = (_struct$4 = value.Addr(), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
			} else {
				s.errorf("wrong type for value; expected %s; got %s", new (go$sliceType(go$emptyInterface))([typ, value.Type()]));
			}
		}
		return (_struct$5 = value, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag));
	};
	state.prototype.validateType = function(value, typ) { return this.go$val.validateType(value, typ); };
	state.Ptr.prototype.evalArg = function(dot, typ, n) {
		var s, arg, _ref, _type, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, _struct$10, _struct$11, _struct$12, _struct$13, _struct$14, _struct$15, _struct$16, _ref$1, _struct$17, _struct$18, _struct$19, _struct$20, _struct$21, _struct$22, _struct$23, _struct$24;
		s = this;
		s.at(n);
		_ref = n;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(parse.DotNode))) {
			arg = _ref.go$val;
			return (_struct$1 = s.validateType((_struct = dot, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), typ), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		} else if (_type === (go$ptrType(parse.NilNode))) {
			arg = _ref.go$val;
			if (canBeNil(typ)) {
				return (_struct$2 = reflect.Zero(typ), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			}
			s.errorf("cannot assign nil to %s", new (go$sliceType(go$emptyInterface))([typ]));
		} else if (_type === (go$ptrType(parse.FieldNode))) {
			arg = _ref.go$val;
			return (_struct$6 = s.validateType((_struct$5 = s.evalFieldNode((_struct$3 = dot, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), arg, new (go$sliceType(parse.Node))([n]), (_struct$4 = zero, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag))), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), typ), new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag));
		} else if (_type === (go$ptrType(parse.VariableNode))) {
			arg = _ref.go$val;
			return (_struct$10 = s.validateType((_struct$9 = s.evalVariableNode((_struct$7 = dot, new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag)), arg, (go$sliceType(parse.Node)).nil, (_struct$8 = zero, new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag))), new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag)), typ), new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag));
		} else if (_type === (go$ptrType(parse.PipeNode))) {
			arg = _ref.go$val;
			return (_struct$13 = s.validateType((_struct$12 = s.evalPipeline((_struct$11 = dot, new reflect.Value.Ptr(_struct$11.typ, _struct$11.val, _struct$11.flag)), arg), new reflect.Value.Ptr(_struct$12.typ, _struct$12.val, _struct$12.flag)), typ), new reflect.Value.Ptr(_struct$13.typ, _struct$13.val, _struct$13.flag));
		} else if (_type === (go$ptrType(parse.IdentifierNode))) {
			arg = _ref.go$val;
			return (_struct$16 = s.evalFunction((_struct$14 = dot, new reflect.Value.Ptr(_struct$14.typ, _struct$14.val, _struct$14.flag)), arg, arg, (go$sliceType(parse.Node)).nil, (_struct$15 = zero, new reflect.Value.Ptr(_struct$15.typ, _struct$15.val, _struct$15.flag))), new reflect.Value.Ptr(_struct$16.typ, _struct$16.val, _struct$16.flag));
		}
		_ref$1 = typ.Kind();
		if (_ref$1 === 1) {
			return (_struct$17 = s.evalBool(typ, n), new reflect.Value.Ptr(_struct$17.typ, _struct$17.val, _struct$17.flag));
		} else if (_ref$1 === 15 || _ref$1 === 16) {
			return (_struct$18 = s.evalComplex(typ, n), new reflect.Value.Ptr(_struct$18.typ, _struct$18.val, _struct$18.flag));
		} else if (_ref$1 === 13 || _ref$1 === 14) {
			return (_struct$19 = s.evalFloat(typ, n), new reflect.Value.Ptr(_struct$19.typ, _struct$19.val, _struct$19.flag));
		} else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) {
			return (_struct$20 = s.evalInteger(typ, n), new reflect.Value.Ptr(_struct$20.typ, _struct$20.val, _struct$20.flag));
		} else if (_ref$1 === 20) {
			if (typ.NumMethod() === 0) {
				return (_struct$22 = s.evalEmptyInterface((_struct$21 = dot, new reflect.Value.Ptr(_struct$21.typ, _struct$21.val, _struct$21.flag)), n), new reflect.Value.Ptr(_struct$22.typ, _struct$22.val, _struct$22.flag));
			}
		} else if (_ref$1 === 24) {
			return (_struct$23 = s.evalString(typ, n), new reflect.Value.Ptr(_struct$23.typ, _struct$23.val, _struct$23.flag));
		} else if (_ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
			return (_struct$24 = s.evalUnsignedInteger(typ, n), new reflect.Value.Ptr(_struct$24.typ, _struct$24.val, _struct$24.flag));
		}
		s.errorf("can't handle %s for arg of type %s", new (go$sliceType(go$emptyInterface))([n, typ]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalArg = function(dot, typ, n) { return this.go$val.evalArg(dot, typ, n); };
	state.Ptr.prototype.evalBool = function(typ, n) {
		var s, _tuple, n$1, ok, _struct, value, _struct$1;
		s = this;
		s.at(n);
		_tuple = (n !== null && n.constructor === (go$ptrType(parse.BoolNode)) ? [n.go$val, true] : [(go$ptrType(parse.BoolNode)).nil, false]); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok) {
			value = (_struct = reflect.New(typ).Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			value.SetBool(n$1.True);
			return (_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		s.errorf("expected bool; found %s", new (go$sliceType(go$emptyInterface))([n]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalBool = function(typ, n) { return this.go$val.evalBool(typ, n); };
	state.Ptr.prototype.evalString = function(typ, n) {
		var s, _tuple, n$1, ok, _struct, value, _struct$1;
		s = this;
		s.at(n);
		_tuple = (n !== null && n.constructor === (go$ptrType(parse.StringNode)) ? [n.go$val, true] : [(go$ptrType(parse.StringNode)).nil, false]); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok) {
			value = (_struct = reflect.New(typ).Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			value.SetString(n$1.Text);
			return (_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		s.errorf("expected string; found %s", new (go$sliceType(go$emptyInterface))([n]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalString = function(typ, n) { return this.go$val.evalString(typ, n); };
	state.Ptr.prototype.evalInteger = function(typ, n) {
		var s, _tuple, n$1, ok, _struct, value, _struct$1;
		s = this;
		s.at(n);
		_tuple = (n !== null && n.constructor === (go$ptrType(parse.NumberNode)) ? [n.go$val, true] : [(go$ptrType(parse.NumberNode)).nil, false]); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok && n$1.IsInt) {
			value = (_struct = reflect.New(typ).Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			value.SetInt(n$1.Int64);
			return (_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		s.errorf("expected integer; found %s", new (go$sliceType(go$emptyInterface))([n]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalInteger = function(typ, n) { return this.go$val.evalInteger(typ, n); };
	state.Ptr.prototype.evalUnsignedInteger = function(typ, n) {
		var s, _tuple, n$1, ok, _struct, value, _struct$1;
		s = this;
		s.at(n);
		_tuple = (n !== null && n.constructor === (go$ptrType(parse.NumberNode)) ? [n.go$val, true] : [(go$ptrType(parse.NumberNode)).nil, false]); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok && n$1.IsUint) {
			value = (_struct = reflect.New(typ).Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			value.SetUint(n$1.Uint64);
			return (_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		s.errorf("expected unsigned integer; found %s", new (go$sliceType(go$emptyInterface))([n]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalUnsignedInteger = function(typ, n) { return this.go$val.evalUnsignedInteger(typ, n); };
	state.Ptr.prototype.evalFloat = function(typ, n) {
		var s, _tuple, n$1, ok, _struct, value, _struct$1;
		s = this;
		s.at(n);
		_tuple = (n !== null && n.constructor === (go$ptrType(parse.NumberNode)) ? [n.go$val, true] : [(go$ptrType(parse.NumberNode)).nil, false]); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok && n$1.IsFloat) {
			value = (_struct = reflect.New(typ).Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			value.SetFloat(n$1.Float64);
			return (_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		s.errorf("expected float; found %s", new (go$sliceType(go$emptyInterface))([n]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalFloat = function(typ, n) { return this.go$val.evalFloat(typ, n); };
	state.Ptr.prototype.evalComplex = function(typ, n) {
		var s, _tuple, n$1, ok, _struct, value, _struct$1;
		s = this;
		_tuple = (n !== null && n.constructor === (go$ptrType(parse.NumberNode)) ? [n.go$val, true] : [(go$ptrType(parse.NumberNode)).nil, false]); n$1 = _tuple[0]; ok = _tuple[1];
		if (ok && n$1.IsComplex) {
			value = (_struct = reflect.New(typ).Elem(), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			value.SetComplex(n$1.Complex128);
			return (_struct$1 = value, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		s.errorf("expected complex; found %s", new (go$sliceType(go$emptyInterface))([n]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalComplex = function(typ, n) { return this.go$val.evalComplex(typ, n); };
	state.Ptr.prototype.evalEmptyInterface = function(dot, n) {
		var s, n$1, _ref, _type, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, _struct$10, _struct$11, _struct$12, _struct$13, _struct$14;
		s = this;
		s.at(n);
		_ref = n;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(parse.BoolNode))) {
			n$1 = _ref.go$val;
			return (_struct = reflect.ValueOf(new Go$Bool(n$1.True)), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		} else if (_type === (go$ptrType(parse.DotNode))) {
			n$1 = _ref.go$val;
			return (_struct$1 = dot, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		} else if (_type === (go$ptrType(parse.FieldNode))) {
			n$1 = _ref.go$val;
			return (_struct$4 = s.evalFieldNode((_struct$2 = dot, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag)), n$1, (go$sliceType(parse.Node)).nil, (_struct$3 = zero, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag))), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
		} else if (_type === (go$ptrType(parse.IdentifierNode))) {
			n$1 = _ref.go$val;
			return (_struct$7 = s.evalFunction((_struct$5 = dot, new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag)), n$1, n$1, (go$sliceType(parse.Node)).nil, (_struct$6 = zero, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag))), new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag));
		} else if (_type === (go$ptrType(parse.NilNode))) {
			n$1 = _ref.go$val;
			s.errorf("evalEmptyInterface: nil (can't happen)", new (go$sliceType(go$emptyInterface))([]));
		} else if (_type === (go$ptrType(parse.NumberNode))) {
			n$1 = _ref.go$val;
			return (_struct$8 = s.idealConstant(n$1), new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag));
		} else if (_type === (go$ptrType(parse.StringNode))) {
			n$1 = _ref.go$val;
			return (_struct$9 = reflect.ValueOf(new Go$String(n$1.Text)), new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag));
		} else if (_type === (go$ptrType(parse.VariableNode))) {
			n$1 = _ref.go$val;
			return (_struct$12 = s.evalVariableNode((_struct$10 = dot, new reflect.Value.Ptr(_struct$10.typ, _struct$10.val, _struct$10.flag)), n$1, (go$sliceType(parse.Node)).nil, (_struct$11 = zero, new reflect.Value.Ptr(_struct$11.typ, _struct$11.val, _struct$11.flag))), new reflect.Value.Ptr(_struct$12.typ, _struct$12.val, _struct$12.flag));
		} else if (_type === (go$ptrType(parse.PipeNode))) {
			n$1 = _ref.go$val;
			return (_struct$14 = s.evalPipeline((_struct$13 = dot, new reflect.Value.Ptr(_struct$13.typ, _struct$13.val, _struct$13.flag)), n$1), new reflect.Value.Ptr(_struct$14.typ, _struct$14.val, _struct$14.flag));
		}
		s.errorf("can't handle assignment of %s to empty interface argument", new (go$sliceType(go$emptyInterface))([n]));
		throw go$panic(new Go$String("not reached"));
	};
	state.prototype.evalEmptyInterface = function(dot, n) { return this.go$val.evalEmptyInterface(dot, n); };
	indirect = function(v) {
		var rv, isNil, _struct, _tuple, _struct$1, _struct$2, _struct$3, _tuple$1, _struct$4;
		rv = new reflect.Value.Ptr();
		isNil = false;
		while ((v.Kind() === 22) || (v.Kind() === 20)) {
			if (v.IsNil()) {
				_tuple = [(_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), true]; rv = _tuple[0]; isNil = _tuple[1];
				return [(_struct$1 = rv, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), isNil];
			}
			if ((v.Kind() === 20) && v.NumMethod() > 0) {
				break;
			}
			v = (_struct$2 = v.Elem(), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		}
		_tuple$1 = [(_struct$3 = v, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), false]; rv = _tuple$1[0]; isNil = _tuple$1[1];
		return [(_struct$4 = rv, new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag)), isNil];
	};
	state.Ptr.prototype.printValue = function(n, v) {
		var s, _tuple, _struct, iface, ok;
		s = this;
		s.at(n);
		_tuple = printableValue((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))); iface = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			s.errorf("can't print %s of type %s", new (go$sliceType(go$emptyInterface))([n, v.Type()]));
		}
		fmt.Fprint(s.wr, new (go$sliceType(go$emptyInterface))([iface]));
	};
	state.prototype.printValue = function(n, v) { return this.go$val.printValue(n, v); };
	printableValue = function(v) {
		var _tuple, _struct, _struct$1, _struct$2, _ref;
		if (v.Kind() === 22) {
			_tuple = indirect((_struct = v, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))); v = (_struct$1 = _tuple[0], new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		if (!v.IsValid()) {
			return [new Go$String("<no value>"), true];
		}
		if (!v.Type().Implements(errorType) && !v.Type().Implements(fmtStringerType)) {
			if (v.CanAddr() && (reflect.PtrTo(v.Type()).Implements(errorType) || reflect.PtrTo(v.Type()).Implements(fmtStringerType))) {
				v = (_struct$2 = v.Addr(), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			} else {
				_ref = v.Kind();
				if (_ref === 18 || _ref === 19) {
					return [null, false];
				}
			}
		}
		return [v.Interface(), true];
	};
	rvs.prototype.Len = function() {
		var x;
		x = this;
		return x.length;
	};
	go$ptrType(rvs).prototype.Len = function() { return this.go$get().Len(); };
	rvs.prototype.Swap = function(i, j) {
		var x, _slice, _index, _struct, _slice$1, _index$1, _struct$1, _tuple, _slice$2, _index$2, _slice$3, _index$3;
		x = this;
		_tuple = [(_struct = (_slice = x, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)), (_struct$1 = (_slice$1 = x, _index$1 = i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))]; _slice$2 = x; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = _tuple[0]) : go$throwRuntimeError("index out of range"); _slice$3 = x; _index$3 = j;(_index$3 >= 0 && _index$3 < _slice$3.length) ? (_slice$3.array[_slice$3.offset + _index$3] = _tuple[1]) : go$throwRuntimeError("index out of range");
	};
	go$ptrType(rvs).prototype.Swap = function(i, j) { return this.go$get().Swap(i, j); };
	rvInts.Ptr.prototype.Less = function(i, j) {
		var _struct, x, x$1, _slice, _index, x$2, _slice$1, _index$1;
		x = (_struct = this, new rvInts.Ptr(_struct.rvs));
		return (x$1 = (_slice = x.rvs, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Int(), x$2 = (_slice$1 = x.rvs, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Int(), (x$1.high < x$2.high || (x$1.high === x$2.high && x$1.low < x$2.low)));
	};
	rvInts.prototype.Less = function(i, j) { return this.go$val.Less(i, j); };
	rvUints.Ptr.prototype.Less = function(i, j) {
		var _struct, x, x$1, _slice, _index, x$2, _slice$1, _index$1;
		x = (_struct = this, new rvUints.Ptr(_struct.rvs));
		return (x$1 = (_slice = x.rvs, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Uint(), x$2 = (_slice$1 = x.rvs, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Uint(), (x$1.high < x$2.high || (x$1.high === x$2.high && x$1.low < x$2.low)));
	};
	rvUints.prototype.Less = function(i, j) { return this.go$val.Less(i, j); };
	rvFloats.Ptr.prototype.Less = function(i, j) {
		var _struct, x, _slice, _index, _slice$1, _index$1;
		x = (_struct = this, new rvFloats.Ptr(_struct.rvs));
		return (_slice = x.rvs, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Float() < (_slice$1 = x.rvs, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Float();
	};
	rvFloats.prototype.Less = function(i, j) { return this.go$val.Less(i, j); };
	rvStrings.Ptr.prototype.Less = function(i, j) {
		var _struct, x, _slice, _index, _slice$1, _index$1;
		x = (_struct = this, new rvStrings.Ptr(_struct.rvs));
		return (_slice = x.rvs, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).String() < (_slice$1 = x.rvs, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).String();
	};
	rvStrings.prototype.Less = function(i, j) { return this.go$val.Less(i, j); };
	sortKeys = function(v) {
		var _ref, _slice, _index, x, x$1, x$2, x$3;
		if (v.length <= 1) {
			return v;
		}
		_ref = (_slice = v, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Kind();
		if (_ref === 13 || _ref === 14) {
			sort.Sort((x = new rvFloats.Ptr(go$subslice(new rvs(v.array), v.offset, v.offset + v.length)), new x.constructor.Struct(x)));
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			sort.Sort((x$1 = new rvInts.Ptr(go$subslice(new rvs(v.array), v.offset, v.offset + v.length)), new x$1.constructor.Struct(x$1)));
		} else if (_ref === 24) {
			sort.Sort((x$2 = new rvStrings.Ptr(go$subslice(new rvs(v.array), v.offset, v.offset + v.length)), new x$2.constructor.Struct(x$2)));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			sort.Sort((x$3 = new rvUints.Ptr(go$subslice(new rvs(v.array), v.offset, v.offset + v.length)), new x$3.constructor.Struct(x$3)));
		}
		return v;
	};
	createValueFuncs = function(funcMap) {
		var m;
		m = new Go$Map();
		addValueFuncs(m, funcMap);
		return m;
	};
	addValueFuncs = function(out, in$1) {
		var _ref, _i, _keys, _entry, fn, name, _struct, v, _struct$1, _key;
		_ref = in$1;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			fn = _entry.v;
			name = _entry.k;
			v = (_struct = reflect.ValueOf(fn), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			if (!((v.Kind() === 19))) {
				throw go$panic(new Go$String("value for " + name + " not a function"));
			}
			if (!goodFunc(v.Type())) {
				throw go$panic(fmt.Errorf("can't install method/function %q with %d results", new (go$sliceType(go$emptyInterface))([new Go$String(name), new Go$Int(v.Type().NumOut())])));
			}
			_key = name; (out || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: (_struct$1 = v, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)) };
			_i++;
		}
	};
	addFuncs = function(out, in$1) {
		var _ref, _i, _keys, _entry, fn, name, _key;
		_ref = in$1;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			fn = _entry.v;
			name = _entry.k;
			_key = name; (out || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: fn };
			_i++;
		}
	};
	goodFunc = function(typ) {
		if (typ.NumOut() === 1) {
			return true;
		} else if ((typ.NumOut() === 2) && go$interfaceIsEqual(typ.Out(1), errorType)) {
			return true;
		}
		return false;
	};
	findFunction = function(name, tmpl) {
		var _entry, _struct, fn, _struct$1, _entry$1, _struct$2, fn$1, _struct$3;
		if (!(tmpl === (go$ptrType(Template)).nil) && !(tmpl.common === (go$ptrType(common)).nil)) {
			fn = (_struct = (_entry = tmpl.common.execFuncs[name], _entry !== undefined ? _entry.v : new reflect.Value.Ptr()), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
			if (fn.IsValid()) {
				return [(_struct$1 = fn, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)), true];
			}
		}
		fn$1 = (_struct$2 = (_entry$1 = builtinFuncs[name], _entry$1 !== undefined ? _entry$1.v : new reflect.Value.Ptr()), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		if (fn$1.IsValid()) {
			return [(_struct$3 = fn$1, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)), true];
		}
		return [new reflect.Value.Ptr((go$ptrType(reflect.rtype)).nil, 0, 0), false];
	};
	index = function(item, indices) {
		var _struct, v, _ref, _i, _slice, _index, i, _struct$1, index$1, isNil, _tuple, _struct$2, _struct$3, _ref$1, x, _ref$2, x$1, x$2, _struct$4, _struct$5, _struct$6, _struct$7, x$3, _struct$8, _struct$9;
		v = (_struct = reflect.ValueOf(item), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		_ref = indices;
		_i = 0;
		while (_i < _ref.length) {
			i = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			index$1 = (_struct$1 = reflect.ValueOf(i), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
			isNil = false;
			_tuple = indirect((_struct$2 = v, new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag))); v = (_struct$3 = _tuple[0], new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag)); isNil = _tuple[1];
			if (isNil) {
				return [null, fmt.Errorf("index of nil pointer", new (go$sliceType(go$emptyInterface))([]))];
			}
			_ref$1 = v.Kind();
			if (_ref$1 === 17 || _ref$1 === 23 || _ref$1 === 24) {
				x = new Go$Int64(0, 0);
				_ref$2 = index$1.Kind();
				if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6) {
					x = index$1.Int();
				} else if (_ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
					x = (x$1 = index$1.Uint(), new Go$Int64(x$1.high, x$1.low));
				} else {
					return [null, fmt.Errorf("cannot index slice/array with type %s", new (go$sliceType(go$emptyInterface))([index$1.Type()]))];
				}
				if ((x.high < 0 || (x.high === 0 && x.low < 0)) || (x$2 = new Go$Int64(0, v.Len()), (x.high > x$2.high || (x.high === x$2.high && x.low >= x$2.low)))) {
					return [null, fmt.Errorf("index out of range: %d", new (go$sliceType(go$emptyInterface))([x]))];
				}
				v = (_struct$4 = v.Index(((x.low + ((x.high >> 31) * 4294967296)) >> 0)), new reflect.Value.Ptr(_struct$4.typ, _struct$4.val, _struct$4.flag));
			} else if (_ref$1 === 21) {
				if (!index$1.IsValid()) {
					index$1 = (_struct$5 = reflect.Zero(v.Type().Key()), new reflect.Value.Ptr(_struct$5.typ, _struct$5.val, _struct$5.flag));
				}
				if (!index$1.Type().AssignableTo(v.Type().Key())) {
					return [null, fmt.Errorf("%s is not index type for %s", new (go$sliceType(go$emptyInterface))([index$1.Type(), v.Type()]))];
				}
				x$3 = (_struct$7 = v.MapIndex((_struct$6 = index$1, new reflect.Value.Ptr(_struct$6.typ, _struct$6.val, _struct$6.flag))), new reflect.Value.Ptr(_struct$7.typ, _struct$7.val, _struct$7.flag));
				if (x$3.IsValid()) {
					v = (_struct$8 = x$3, new reflect.Value.Ptr(_struct$8.typ, _struct$8.val, _struct$8.flag));
				} else {
					v = (_struct$9 = reflect.Zero(v.Type().Elem()), new reflect.Value.Ptr(_struct$9.typ, _struct$9.val, _struct$9.flag));
				}
			} else {
				return [null, fmt.Errorf("can't index item of type %s", new (go$sliceType(go$emptyInterface))([v.Type()]))];
			}
			_i++;
		}
		return [v.Interface(), null];
	};
	length = function(item) {
		var _tuple, _struct, _struct$1, v, isNil, _ref;
		_tuple = indirect((_struct = reflect.ValueOf(item), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))); v = (_struct$1 = _tuple[0], new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag)); isNil = _tuple[1];
		if (isNil) {
			return [0, fmt.Errorf("len of nil pointer", new (go$sliceType(go$emptyInterface))([]))];
		}
		_ref = v.Kind();
		if (_ref === 17 || _ref === 18 || _ref === 21 || _ref === 23 || _ref === 24) {
			return [v.Len(), null];
		}
		return [0, fmt.Errorf("len of type %s", new (go$sliceType(go$emptyInterface))([v.Type()]))];
	};
	call = function(fn, args) {
		var _struct, v, typ, numIn, dddType, argv, _ref, _i, _slice, _index, arg, i, _struct$1, value, argType, _struct$2, _struct$3, _slice$1, _index$1, result, _slice$2, _index$2, _slice$3, _index$3, x, _slice$4, _index$4, _slice$5, _index$5;
		v = (_struct = reflect.ValueOf(fn), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		typ = v.Type();
		if (!((typ.Kind() === 19))) {
			return [null, fmt.Errorf("non-function of type %s", new (go$sliceType(go$emptyInterface))([typ]))];
		}
		if (!goodFunc(typ)) {
			return [null, fmt.Errorf("function called with %d args; should be 1 or 2", new (go$sliceType(go$emptyInterface))([new Go$Int(typ.NumOut())]))];
		}
		numIn = typ.NumIn();
		dddType = null;
		if (typ.IsVariadic()) {
			if (args.length < (numIn - 1 >> 0)) {
				return [null, fmt.Errorf("wrong number of args: got %d want at least %d", new (go$sliceType(go$emptyInterface))([new Go$Int(args.length), new Go$Int((numIn - 1 >> 0))]))];
			}
			dddType = typ.In(numIn - 1 >> 0).Elem();
		} else {
			if (!((args.length === numIn))) {
				return [null, fmt.Errorf("wrong number of args: got %d want %d", new (go$sliceType(go$emptyInterface))([new Go$Int(args.length), new Go$Int(numIn)]))];
			}
		}
		argv = (go$sliceType(reflect.Value)).make(args.length, 0, function() { return new reflect.Value.Ptr(); });
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			arg = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			value = (_struct$1 = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
			argType = null;
			if (!typ.IsVariadic() || i < (numIn - 1 >> 0)) {
				argType = typ.In(i);
			} else {
				argType = dddType;
			}
			if (!value.IsValid() && canBeNil(argType)) {
				value = (_struct$2 = reflect.Zero(argType), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			}
			if (!value.Type().AssignableTo(argType)) {
				return [null, fmt.Errorf("arg %d has type %s; should be %s", new (go$sliceType(go$emptyInterface))([new Go$Int(i), value.Type(), argType]))];
			}
			_slice$1 = argv; _index$1 = i;(_index$1 >= 0 && _index$1 < _slice$1.length) ? (_slice$1.array[_slice$1.offset + _index$1] = (_struct$3 = value, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag))) : go$throwRuntimeError("index out of range");
			_i++;
		}
		result = v.Call(argv);
		if ((result.length === 2) && !(_slice$2 = result, _index$2 = 1, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")).IsNil()) {
			return [(_slice$3 = result, _index$3 = 0, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")).Interface(), (x = (_slice$4 = result, _index$4 = 1, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")).Interface(), (x !== null && go$error.implementedBy.indexOf(x.constructor) !== -1 ? x : go$typeAssertionFailed(x, go$error)))];
		}
		return [(_slice$5 = result, _index$5 = 0, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range")).Interface(), null];
	};
	truth = function(a) {
		var _tuple, _struct, t;
		_tuple = isTrue((_struct = reflect.ValueOf(a), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))); t = _tuple[0];
		return t;
	};
	and = function(arg0, args) {
		var _ref, _i, i, _slice, _index;
		if (!truth(arg0)) {
			return arg0;
		}
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			arg0 = (_slice = args, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!truth(arg0)) {
				break;
			}
			_i++;
		}
		return arg0;
	};
	or = function(arg0, args) {
		var _ref, _i, i, _slice, _index;
		if (truth(arg0)) {
			return arg0;
		}
		_ref = args;
		_i = 0;
		while (_i < _ref.length) {
			i = _i;
			arg0 = (_slice = args, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (truth(arg0)) {
				break;
			}
			_i++;
		}
		return arg0;
	};
	not = function(arg) {
		var truth$1, _tuple, _struct;
		truth$1 = false;
		_tuple = isTrue((_struct = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))); truth$1 = _tuple[0];
		truth$1 = !truth$1;
		return truth$1;
	};
	basicKind = function(v) {
		var _ref;
		_ref = v.Kind();
		if (_ref === 1) {
			return [1, null];
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return [3, null];
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return [7, null];
		} else if (_ref === 13 || _ref === 14) {
			return [4, null];
		} else if (_ref === 15 || _ref === 16) {
			return [2, null];
		} else if (_ref === 24) {
			return [6, null];
		}
		return [0, errBadComparisonType];
	};
	eq = function(arg1, arg2) {
		var _struct, v1, _tuple, _struct$1, k1, err, _ref, _i, _slice, _index, arg, _struct$2, v2, _tuple$1, _struct$3, k2, err$1, truth$1, _ref$1, x, x$1, x$2, x$3, x$4, x$5;
		v1 = (_struct = reflect.ValueOf(arg1), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		_tuple = basicKind((_struct$1 = v1, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))); k1 = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		if (arg2.length === 0) {
			return [false, errNoComparison];
		}
		_ref = arg2;
		_i = 0;
		while (_i < _ref.length) {
			arg = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			v2 = (_struct$2 = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
			_tuple$1 = basicKind((_struct$3 = v2, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag))); k2 = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!(go$interfaceIsEqual(err$1, null))) {
				return [false, err$1];
			}
			if (!((k1 === k2))) {
				return [false, errBadComparison];
			}
			truth$1 = false;
			_ref$1 = k1;
			if (_ref$1 === 1) {
				truth$1 = v1.Bool() === v2.Bool();
			} else if (_ref$1 === 2) {
				truth$1 = (x = v1.Complex(), x$1 = v2.Complex(), (x.real === x$1.real && x.imag === x$1.imag));
			} else if (_ref$1 === 4) {
				truth$1 = v1.Float() === v2.Float();
			} else if (_ref$1 === 3) {
				truth$1 = (x$2 = v1.Int(), x$3 = v2.Int(), (x$2.high === x$3.high && x$2.low === x$3.low));
			} else if (_ref$1 === 6) {
				truth$1 = v1.String() === v2.String();
			} else if (_ref$1 === 7) {
				truth$1 = (x$4 = v1.Uint(), x$5 = v2.Uint(), (x$4.high === x$5.high && x$4.low === x$5.low));
			} else {
				throw go$panic(new Go$String("invalid kind"));
			}
			if (truth$1) {
				return [true, null];
			}
			_i++;
		}
		return [false, null];
	};
	ne = function(arg1, arg2) {
		var _tuple, equal, err;
		_tuple = eq(arg1, new (go$sliceType(go$emptyInterface))([arg2])); equal = _tuple[0]; err = _tuple[1];
		return [!equal, err];
	};
	lt = function(arg1, arg2) {
		var _struct, v1, _tuple, _struct$1, k1, err, _struct$2, v2, _tuple$1, _struct$3, k2, truth$1, _ref, x, x$1, x$2, x$3;
		v1 = (_struct = reflect.ValueOf(arg1), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		_tuple = basicKind((_struct$1 = v1, new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag))); k1 = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		v2 = (_struct$2 = reflect.ValueOf(arg2), new reflect.Value.Ptr(_struct$2.typ, _struct$2.val, _struct$2.flag));
		_tuple$1 = basicKind((_struct$3 = v2, new reflect.Value.Ptr(_struct$3.typ, _struct$3.val, _struct$3.flag))); k2 = _tuple$1[0]; err = _tuple$1[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		if (!((k1 === k2))) {
			return [false, errBadComparison];
		}
		truth$1 = false;
		_ref = k1;
		if (_ref === 1 || _ref === 2) {
			return [false, errBadComparisonType];
		} else if (_ref === 4) {
			truth$1 = v1.Float() < v2.Float();
		} else if (_ref === 3) {
			truth$1 = (x = v1.Int(), x$1 = v2.Int(), (x.high < x$1.high || (x.high === x$1.high && x.low < x$1.low)));
		} else if (_ref === 6) {
			truth$1 = v1.String() < v2.String();
		} else if (_ref === 7) {
			truth$1 = (x$2 = v1.Uint(), x$3 = v2.Uint(), (x$2.high < x$3.high || (x$2.high === x$3.high && x$2.low < x$3.low)));
		} else {
			throw go$panic(new Go$String("invalid kind"));
		}
		return [truth$1, null];
	};
	le = function(arg1, arg2) {
		var _tuple, lessThan, err;
		_tuple = lt(arg1, arg2); lessThan = _tuple[0]; err = _tuple[1];
		if (lessThan || !(go$interfaceIsEqual(err, null))) {
			return [lessThan, err];
		}
		return eq(arg1, new (go$sliceType(go$emptyInterface))([arg2]));
	};
	gt = function(arg1, arg2) {
		var _tuple, lessOrEqual, err;
		_tuple = le(arg1, arg2); lessOrEqual = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		return [!lessOrEqual, null];
	};
	ge = function(arg1, arg2) {
		var _tuple, lessThan, err;
		_tuple = lt(arg1, arg2); lessThan = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [false, err];
		}
		return [!lessThan, null];
	};
	HTMLEscape = go$pkg.HTMLEscape = function(w, b) {
		var last, _ref, _i, _slice, _index, c, i, html, _ref$1;
		last = 0;
		_ref = b;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			html = (go$sliceType(Go$Uint8)).nil;
			_ref$1 = c;
			if (_ref$1 === 34) {
				html = htmlQuot;
			} else if (_ref$1 === 39) {
				html = htmlApos;
			} else if (_ref$1 === 38) {
				html = htmlAmp;
			} else if (_ref$1 === 60) {
				html = htmlLt;
			} else if (_ref$1 === 62) {
				html = htmlGt;
			} else {
				_i++;
				continue;
			}
			w.Write(go$subslice(b, last, i));
			w.Write(html);
			last = i + 1 >> 0;
			_i++;
		}
		w.Write(go$subslice(b, last));
	};
	HTMLEscapeString = go$pkg.HTMLEscapeString = function(s) {
		var b;
		if (strings.IndexAny(s, "'\"&<>") < 0) {
			return s;
		}
		b = new bytes.Buffer.Ptr();
		HTMLEscape(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
		return b.String();
	};
	HTMLEscaper = go$pkg.HTMLEscaper = function(args) {
		return HTMLEscapeString(evalArgs(args));
	};
	JSEscape = go$pkg.JSEscape = function(w, b) {
		var last, i, _slice, _index, c, _ref, _tuple, t, b$1, _tuple$1, r, size;
		last = 0;
		i = 0;
		while (i < b.length) {
			c = (_slice = b, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!jsIsSpecial((c >> 0))) {
				i = i + 1 >> 0;
				continue;
			}
			w.Write(go$subslice(b, last, i));
			if (c < 128) {
				_ref = c;
				if (_ref === 92) {
					w.Write(jsBackslash);
				} else if (_ref === 39) {
					w.Write(jsApos);
				} else if (_ref === 34) {
					w.Write(jsQuot);
				} else if (_ref === 60) {
					w.Write(jsLt);
				} else if (_ref === 62) {
					w.Write(jsGt);
				} else {
					w.Write(jsLowUni);
					_tuple = [c >>> 4 << 24 >>> 24, (c & 15) >>> 0]; t = _tuple[0]; b$1 = _tuple[1];
					w.Write(go$subslice(hex, t, (t + 1 << 24 >>> 24)));
					w.Write(go$subslice(hex, b$1, (b$1 + 1 << 24 >>> 24)));
				}
			} else {
				_tuple$1 = utf8.DecodeRune(go$subslice(b, i)); r = _tuple$1[0]; size = _tuple$1[1];
				if (unicode.IsPrint(r)) {
					w.Write(go$subslice(b, i, (i + size >> 0)));
				} else {
					fmt.Fprintf(w, "\\u%04X", new (go$sliceType(go$emptyInterface))([new Go$Int32(r)]));
				}
				i = i + ((size - 1 >> 0)) >> 0;
			}
			last = i + 1 >> 0;
			i = i + 1 >> 0;
		}
		w.Write(go$subslice(b, last));
	};
	JSEscapeString = go$pkg.JSEscapeString = function(s) {
		var b;
		if (strings.IndexFunc(s, jsIsSpecial) < 0) {
			return s;
		}
		b = new bytes.Buffer.Ptr();
		JSEscape(b, new (go$sliceType(Go$Uint8))(go$stringToBytes(s)));
		return b.String();
	};
	jsIsSpecial = function(r) {
		var _ref;
		_ref = r;
		if (_ref === 92 || _ref === 39 || _ref === 34 || _ref === 60 || _ref === 62) {
			return true;
		}
		return r < 32 || 128 <= r;
	};
	JSEscaper = go$pkg.JSEscaper = function(args) {
		return JSEscapeString(evalArgs(args));
	};
	URLQueryEscaper = go$pkg.URLQueryEscaper = function(args) {
		return url.QueryEscape(evalArgs(args));
	};
	evalArgs = function(args) {
		var ok, s, _tuple, x, _slice, _index, _ref, _i, _slice$1, _index$1, arg, i, _tuple$1, _struct, a, ok$1, _slice$2, _index$2;
		ok = false;
		s = "";
		if (args.length === 1) {
			_tuple = (x = (_slice = args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === Go$String ? [x.go$val, true] : ["", false])); s = _tuple[0]; ok = _tuple[1];
		}
		if (!ok) {
			_ref = args;
			_i = 0;
			while (_i < _ref.length) {
				arg = (_slice$1 = _ref, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				i = _i;
				_tuple$1 = printableValue((_struct = reflect.ValueOf(arg), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag))); a = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1) {
					_slice$2 = args; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = a) : go$throwRuntimeError("index out of range");
				}
				_i++;
			}
			s = fmt.Sprint(args);
		}
		return s;
	};
	Template.Ptr.prototype.ParseFiles = function(filenames) {
		var t;
		t = this;
		return parseFiles(t, filenames);
	};
	Template.prototype.ParseFiles = function(filenames) { return this.go$val.ParseFiles(filenames); };
	parseFiles = function(t, filenames) {
		var _ref, _i, _slice, _index, filename, _tuple, b, err, s, name, tmpl, _tuple$1;
		if (filenames.length === 0) {
			return [(go$ptrType(Template)).nil, fmt.Errorf("template: no files named in call to ParseFiles", new (go$sliceType(go$emptyInterface))([]))];
		}
		_ref = filenames;
		_i = 0;
		while (_i < _ref.length) {
			filename = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_tuple = ioutil.ReadFile(filename); b = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(Template)).nil, err];
			}
			s = go$bytesToString(b);
			name = filepath.Base(filename);
			tmpl = (go$ptrType(Template)).nil;
			if (t === (go$ptrType(Template)).nil) {
				t = New(name);
			}
			if (name === t.Name()) {
				tmpl = t;
			} else {
				tmpl = t.New(name);
			}
			_tuple$1 = tmpl.Parse(s); err = _tuple$1[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(Template)).nil, err];
			}
			_i++;
		}
		return [t, null];
	};
	Template.Ptr.prototype.ParseGlob = function(pattern) {
		var t;
		t = this;
		return parseGlob(t, pattern);
	};
	Template.prototype.ParseGlob = function(pattern) { return this.go$val.ParseGlob(pattern); };
	parseGlob = function(t, pattern) {
		var _tuple, filenames, err;
		_tuple = filepath.Glob(pattern); filenames = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Template)).nil, err];
		}
		if (filenames.length === 0) {
			return [(go$ptrType(Template)).nil, fmt.Errorf("template: pattern matches no files: %#q", new (go$sliceType(go$emptyInterface))([new Go$String(pattern)]))];
		}
		return parseFiles(t, filenames);
	};
	New = go$pkg.New = function(name) {
		return new Template.Ptr(name, (go$ptrType(parse.Tree)).nil, (go$ptrType(common)).nil, "", "");
	};
	Template.Ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.name;
	};
	Template.prototype.Name = function() { return this.go$val.Name(); };
	Template.Ptr.prototype.New = function(name) {
		var t;
		t = this;
		t.init();
		return new Template.Ptr(name, (go$ptrType(parse.Tree)).nil, t.common, t.leftDelim, t.rightDelim);
	};
	Template.prototype.New = function(name) { return this.go$val.New(name); };
	Template.Ptr.prototype.init = function() {
		var t;
		t = this;
		if (t.common === (go$ptrType(common)).nil) {
			t.common = new common.Ptr();
			t.common.tmpl = new Go$Map();
			t.common.parseFuncs = new Go$Map();
			t.common.execFuncs = new Go$Map();
		}
	};
	Template.prototype.init = function() { return this.go$val.init(); };
	Template.Ptr.prototype.Clone = function() {
		var t, nt, _key, _ref, _i, _keys, _entry, v, k, tmpl, _key$1, _ref$1, _i$1, _keys$1, _entry$1, v$1, k$1, _key$2, _ref$2, _i$2, _keys$2, _entry$2, v$2, k$2, _struct, _key$3;
		t = this;
		nt = t.copy((go$ptrType(common)).nil);
		nt.init();
		_key = t.name; (nt.common.tmpl || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: nt };
		_ref = t.common.tmpl;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			v = _entry.v;
			k = _entry.k;
			if (k === t.name) {
				_i++;
				continue;
			}
			tmpl = v.copy(nt.common);
			_key$1 = k; (nt.common.tmpl || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: tmpl };
			_i++;
		}
		_ref$1 = t.common.parseFuncs;
		_i$1 = 0;
		_keys$1 = go$keys(_ref$1);
		while (_i$1 < _keys$1.length) {
			_entry$1 = _ref$1[_keys$1[_i$1]];
			v$1 = _entry$1.v;
			k$1 = _entry$1.k;
			_key$2 = k$1; (nt.common.parseFuncs || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: v$1 };
			_i$1++;
		}
		_ref$2 = t.common.execFuncs;
		_i$2 = 0;
		_keys$2 = go$keys(_ref$2);
		while (_i$2 < _keys$2.length) {
			_entry$2 = _ref$2[_keys$2[_i$2]];
			v$2 = _entry$2.v;
			k$2 = _entry$2.k;
			_key$3 = k$2; (nt.common.execFuncs || go$throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: (_struct = v$2, new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag)) };
			_i$2++;
		}
		return [nt, null];
	};
	Template.prototype.Clone = function() { return this.go$val.Clone(); };
	Template.Ptr.prototype.copy = function(c) {
		var t, nt;
		t = this;
		nt = New(t.name);
		nt.Tree = t.Tree;
		nt.common = c;
		nt.leftDelim = t.leftDelim;
		nt.rightDelim = t.rightDelim;
		return nt;
	};
	Template.prototype.copy = function(c) { return this.go$val.copy(c); };
	Template.Ptr.prototype.AddParseTree = function(name, tree) {
		var t, _entry, nt, _key;
		t = this;
		if (!((_entry = t.common.tmpl[name], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil) === (go$ptrType(Template)).nil)) {
			return [(go$ptrType(Template)).nil, fmt.Errorf("template: redefinition of template %q", new (go$sliceType(go$emptyInterface))([new Go$String(name)]))];
		}
		nt = t.New(name);
		nt.Tree = tree;
		_key = name; (t.common.tmpl || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: nt };
		return [nt, null];
	};
	Template.prototype.AddParseTree = function(name, tree) { return this.go$val.AddParseTree(name, tree); };
	Template.Ptr.prototype.Templates = function() {
		var t, m, _ref, _i, _keys, _entry, v;
		t = this;
		if (t.common === (go$ptrType(common)).nil) {
			return (go$sliceType((go$ptrType(Template)))).nil;
		}
		m = (go$sliceType((go$ptrType(Template)))).make(0, go$keys(t.common.tmpl).length, function() { return (go$ptrType(Template)).nil; });
		_ref = t.common.tmpl;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			v = _entry.v;
			m = go$append(m, v);
			_i++;
		}
		return m;
	};
	Template.prototype.Templates = function() { return this.go$val.Templates(); };
	Template.Ptr.prototype.Delims = function(left, right) {
		var t;
		t = this;
		t.leftDelim = left;
		t.rightDelim = right;
		return t;
	};
	Template.prototype.Delims = function(left, right) { return this.go$val.Delims(left, right); };
	Template.Ptr.prototype.Funcs = function(funcMap) {
		var t;
		t = this;
		t.init();
		addValueFuncs(t.common.execFuncs, funcMap);
		addFuncs(t.common.parseFuncs, funcMap);
		return t;
	};
	Template.prototype.Funcs = function(funcMap) { return this.go$val.Funcs(funcMap); };
	Template.Ptr.prototype.Lookup = function(name) {
		var t, _entry;
		t = this;
		if (t.common === (go$ptrType(common)).nil) {
			return (go$ptrType(Template)).nil;
		}
		return (_entry = t.common.tmpl[name], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil);
	};
	Template.prototype.Lookup = function(name) { return this.go$val.Lookup(name); };
	Template.Ptr.prototype.Parse = function(text) {
		var t, _tuple, trees, err, _ref, _i, _keys, _entry, tree, name, tmpl, _tuple$1, replace, err$1;
		t = this;
		t.init();
		_tuple = parse.Parse(t.name, text, t.leftDelim, t.rightDelim, new (go$sliceType((go$mapType(Go$String, go$emptyInterface))))([t.common.parseFuncs, builtins])); trees = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Template)).nil, err];
		}
		_ref = trees;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			tree = _entry.v;
			name = _entry.k;
			tmpl = t;
			if (!(name === t.name)) {
				tmpl = t.New(name);
			}
			_tuple$1 = t.associate(tmpl, tree); replace = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!(go$interfaceIsEqual(err$1, null))) {
				return [(go$ptrType(Template)).nil, err$1];
			} else if (replace) {
				tmpl.Tree = tree;
			}
			tmpl.leftDelim = t.leftDelim;
			tmpl.rightDelim = t.rightDelim;
			_i++;
		}
		return [t, null];
	};
	Template.prototype.Parse = function(text) { return this.go$val.Parse(text); };
	Template.Ptr.prototype.associate = function(new$1, tree) {
		var t, name, _entry, old, oldIsEmpty, newIsEmpty, _key;
		t = this;
		if (!(new$1.common === t.common)) {
			throw go$panic(new Go$String("internal error: associate not common"));
		}
		name = new$1.name;
		old = (_entry = t.common.tmpl[name], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil);
		if (!(old === (go$ptrType(Template)).nil)) {
			oldIsEmpty = parse.IsEmptyTree(old.Tree.Root);
			newIsEmpty = parse.IsEmptyTree(tree.Root);
			if (newIsEmpty) {
				return [false, null];
			}
			if (!oldIsEmpty) {
				return [false, fmt.Errorf("template: redefinition of template %q", new (go$sliceType(go$emptyInterface))([new Go$String(name)]))];
			}
		}
		_key = name; (t.common.tmpl || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: new$1 };
		return [true, null];
	};
	Template.prototype.associate = function(new$1, tree) { return this.go$val.associate(new$1, tree); };
	go$pkg.init = function() {
		(go$ptrType(state)).methods = [["at", "text/template", [parse.Node], [], false, -1], ["errorf", "text/template", [Go$String, (go$sliceType(go$emptyInterface))], [], true, -1], ["evalArg", "text/template", [reflect.Value, reflect.Type, parse.Node], [reflect.Value], false, -1], ["evalBool", "text/template", [reflect.Type, parse.Node], [reflect.Value], false, -1], ["evalCall", "text/template", [reflect.Value, reflect.Value, parse.Node, Go$String, (go$sliceType(parse.Node)), reflect.Value], [reflect.Value], false, -1], ["evalChainNode", "text/template", [reflect.Value, (go$ptrType(parse.ChainNode)), (go$sliceType(parse.Node)), reflect.Value], [reflect.Value], false, -1], ["evalCommand", "text/template", [reflect.Value, (go$ptrType(parse.CommandNode)), reflect.Value], [reflect.Value], false, -1], ["evalComplex", "text/template", [reflect.Type, parse.Node], [reflect.Value], false, -1], ["evalEmptyInterface", "text/template", [reflect.Value, parse.Node], [reflect.Value], false, -1], ["evalField", "text/template", [reflect.Value, Go$String, parse.Node, (go$sliceType(parse.Node)), reflect.Value, reflect.Value], [reflect.Value], false, -1], ["evalFieldChain", "text/template", [reflect.Value, reflect.Value, parse.Node, (go$sliceType(Go$String)), (go$sliceType(parse.Node)), reflect.Value], [reflect.Value], false, -1], ["evalFieldNode", "text/template", [reflect.Value, (go$ptrType(parse.FieldNode)), (go$sliceType(parse.Node)), reflect.Value], [reflect.Value], false, -1], ["evalFloat", "text/template", [reflect.Type, parse.Node], [reflect.Value], false, -1], ["evalFunction", "text/template", [reflect.Value, (go$ptrType(parse.IdentifierNode)), parse.Node, (go$sliceType(parse.Node)), reflect.Value], [reflect.Value], false, -1], ["evalInteger", "text/template", [reflect.Type, parse.Node], [reflect.Value], false, -1], ["evalPipeline", "text/template", [reflect.Value, (go$ptrType(parse.PipeNode))], [reflect.Value], false, -1], ["evalString", "text/template", [reflect.Type, parse.Node], [reflect.Value], false, -1], ["evalUnsignedInteger", "text/template", [reflect.Type, parse.Node], [reflect.Value], false, -1], ["evalVariableNode", "text/template", [reflect.Value, (go$ptrType(parse.VariableNode)), (go$sliceType(parse.Node)), reflect.Value], [reflect.Value], false, -1], ["idealConstant", "text/template", [(go$ptrType(parse.NumberNode))], [reflect.Value], false, -1], ["mark", "text/template", [], [Go$Int], false, -1], ["notAFunction", "text/template", [(go$sliceType(parse.Node)), reflect.Value], [], false, -1], ["pop", "text/template", [Go$Int], [], false, -1], ["printValue", "text/template", [parse.Node, reflect.Value], [], false, -1], ["push", "text/template", [Go$String, reflect.Value], [], false, -1], ["setVar", "text/template", [Go$Int, reflect.Value], [], false, -1], ["validateType", "text/template", [reflect.Value, reflect.Type], [reflect.Value], false, -1], ["varValue", "text/template", [Go$String], [reflect.Value], false, -1], ["walk", "text/template", [reflect.Value, parse.Node], [], false, -1], ["walkIfOrWith", "text/template", [parse.NodeType, reflect.Value, (go$ptrType(parse.PipeNode)), (go$ptrType(parse.ListNode)), (go$ptrType(parse.ListNode))], [], false, -1], ["walkRange", "text/template", [reflect.Value, (go$ptrType(parse.RangeNode))], [], false, -1], ["walkTemplate", "text/template", [reflect.Value, (go$ptrType(parse.TemplateNode))], [], false, -1]];
		state.init([["tmpl", "tmpl", "text/template", (go$ptrType(Template)), ""], ["wr", "wr", "text/template", io.Writer, ""], ["node", "node", "text/template", parse.Node, ""], ["vars", "vars", "text/template", (go$sliceType(variable)), ""]]);
		variable.init([["name", "name", "text/template", Go$String, ""], ["value", "value", "text/template", reflect.Value, ""]]);
		rvs.methods = [["Len", "", [], [Go$Int], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1]];
		(go$ptrType(rvs)).methods = [["Len", "", [], [Go$Int], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, -1]];
		rvs.init(reflect.Value);
		rvInts.methods = [["Len", "", [], [Go$Int], false, 0], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, 0]];
		(go$ptrType(rvInts)).methods = [["Len", "", [], [Go$Int], false, 0], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, 0]];
		rvInts.init([["rvs", "", "text/template", rvs, ""]]);
		rvUints.methods = [["Len", "", [], [Go$Int], false, 0], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, 0]];
		(go$ptrType(rvUints)).methods = [["Len", "", [], [Go$Int], false, 0], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, 0]];
		rvUints.init([["rvs", "", "text/template", rvs, ""]]);
		rvFloats.methods = [["Len", "", [], [Go$Int], false, 0], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, 0]];
		(go$ptrType(rvFloats)).methods = [["Len", "", [], [Go$Int], false, 0], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, 0]];
		rvFloats.init([["rvs", "", "text/template", rvs, ""]]);
		rvStrings.methods = [["Len", "", [], [Go$Int], false, 0], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, 0]];
		(go$ptrType(rvStrings)).methods = [["Len", "", [], [Go$Int], false, 0], ["Less", "", [Go$Int, Go$Int], [Go$Bool], false, -1], ["Swap", "", [Go$Int, Go$Int], [], false, 0]];
		rvStrings.init([["rvs", "", "text/template", rvs, ""]]);
		FuncMap.init(Go$String, go$emptyInterface);
		common.init([["tmpl", "tmpl", "text/template", (go$mapType(Go$String, (go$ptrType(Template)))), ""], ["parseFuncs", "parseFuncs", "text/template", FuncMap, ""], ["execFuncs", "execFuncs", "text/template", (go$mapType(Go$String, reflect.Value)), ""]]);
		Template.methods = [["Copy", "", [], [(go$ptrType(parse.Tree))], false, 1], ["ErrorContext", "", [parse.Node], [Go$String, Go$String], false, 1], ["action", "text/template/parse", [], [parse.Node], false, 1], ["add", "text/template/parse", [(go$mapType(Go$String, (go$ptrType(parse.Tree))))], [], false, 1], ["backup", "text/template/parse", [], [], false, 1], ["backup2", "text/template/parse", [parse.item], [], false, 1], ["backup3", "text/template/parse", [parse.item, parse.item], [], false, 1], ["command", "text/template/parse", [], [(go$ptrType(parse.CommandNode))], false, 1], ["elseControl", "text/template/parse", [], [parse.Node], false, 1], ["endControl", "text/template/parse", [], [parse.Node], false, 1], ["error", "text/template/parse", [go$error], [], false, 1], ["errorf", "text/template/parse", [Go$String, (go$sliceType(go$emptyInterface))], [], true, 1], ["expect", "text/template/parse", [parse.itemType, Go$String], [parse.item], false, 1], ["expectOneOf", "text/template/parse", [parse.itemType, parse.itemType, Go$String], [parse.item], false, 1], ["hasFunction", "text/template/parse", [Go$String], [Go$Bool], false, 1], ["ifControl", "text/template/parse", [], [parse.Node], false, 1], ["itemList", "text/template/parse", [], [(go$ptrType(parse.ListNode)), parse.Node], false, 1], ["next", "text/template/parse", [], [parse.item], false, 1], ["nextNonSpace", "text/template/parse", [], [parse.item], false, 1], ["operand", "text/template/parse", [], [parse.Node], false, 1], ["parse", "text/template/parse", [(go$mapType(Go$String, (go$ptrType(parse.Tree))))], [parse.Node], false, 1], ["parseControl", "text/template/parse", [Go$Bool, Go$String], [parse.Pos, Go$Int, (go$ptrType(parse.PipeNode)), (go$ptrType(parse.ListNode)), (go$ptrType(parse.ListNode))], false, 1], ["parseDefinition", "text/template/parse", [(go$mapType(Go$String, (go$ptrType(parse.Tree))))], [], false, 1], ["peek", "text/template/parse", [], [parse.item], false, 1], ["peekNonSpace", "text/template/parse", [], [parse.item], false, 1], ["pipeline", "text/template/parse", [Go$String], [(go$ptrType(parse.PipeNode))], false, 1], ["popVars", "text/template/parse", [Go$Int], [], false, 1], ["rangeControl", "text/template/parse", [], [parse.Node], false, 1], ["recover", "text/template/parse", [(go$ptrType(go$error))], [], false, 1], ["startParse", "text/template/parse", [(go$sliceType((go$mapType(Go$String, go$emptyInterface)))), (go$ptrType(parse.lexer))], [], false, 1], ["stopParse", "text/template/parse", [], [], false, 1], ["templateControl", "text/template/parse", [], [parse.Node], false, 1], ["term", "text/template/parse", [], [parse.Node], false, 1], ["textOrAction", "text/template/parse", [], [parse.Node], false, 1], ["unexpected", "text/template/parse", [parse.item, Go$String], [], false, 1], ["useVar", "text/template/parse", [parse.Pos, Go$String], [parse.Node], false, 1], ["withControl", "text/template/parse", [], [parse.Node], false, 1]];
		(go$ptrType(Template)).methods = [["AddParseTree", "", [Go$String, (go$ptrType(parse.Tree))], [(go$ptrType(Template)), go$error], false, -1], ["Clone", "", [], [(go$ptrType(Template)), go$error], false, -1], ["Copy", "", [], [(go$ptrType(parse.Tree))], false, 1], ["Delims", "", [Go$String, Go$String], [(go$ptrType(Template))], false, -1], ["ErrorContext", "", [parse.Node], [Go$String, Go$String], false, 1], ["Execute", "", [io.Writer, go$emptyInterface], [go$error], false, -1], ["ExecuteTemplate", "", [io.Writer, Go$String, go$emptyInterface], [go$error], false, -1], ["Funcs", "", [FuncMap], [(go$ptrType(Template))], false, -1], ["Lookup", "", [Go$String], [(go$ptrType(Template))], false, -1], ["Name", "", [], [Go$String], false, -1], ["New", "", [Go$String], [(go$ptrType(Template))], false, -1], ["Parse", "", [Go$String], [(go$ptrType(Template)), go$error], false, -1], ["ParseFiles", "", [(go$sliceType(Go$String))], [(go$ptrType(Template)), go$error], true, -1], ["ParseGlob", "", [Go$String], [(go$ptrType(Template)), go$error], false, -1], ["Templates", "", [], [(go$sliceType((go$ptrType(Template))))], false, -1], ["associate", "text/template", [(go$ptrType(Template)), (go$ptrType(parse.Tree))], [Go$Bool, go$error], false, -1], ["copy", "text/template", [(go$ptrType(common))], [(go$ptrType(Template))], false, -1], ["init", "text/template", [], [], false, -1], ["action", "text/template/parse", [], [parse.Node], false, 1], ["add", "text/template/parse", [(go$mapType(Go$String, (go$ptrType(parse.Tree))))], [], false, 1], ["backup", "text/template/parse", [], [], false, 1], ["backup2", "text/template/parse", [parse.item], [], false, 1], ["backup3", "text/template/parse", [parse.item, parse.item], [], false, 1], ["command", "text/template/parse", [], [(go$ptrType(parse.CommandNode))], false, 1], ["elseControl", "text/template/parse", [], [parse.Node], false, 1], ["endControl", "text/template/parse", [], [parse.Node], false, 1], ["error", "text/template/parse", [go$error], [], false, 1], ["errorf", "text/template/parse", [Go$String, (go$sliceType(go$emptyInterface))], [], true, 1], ["expect", "text/template/parse", [parse.itemType, Go$String], [parse.item], false, 1], ["expectOneOf", "text/template/parse", [parse.itemType, parse.itemType, Go$String], [parse.item], false, 1], ["hasFunction", "text/template/parse", [Go$String], [Go$Bool], false, 1], ["ifControl", "text/template/parse", [], [parse.Node], false, 1], ["itemList", "text/template/parse", [], [(go$ptrType(parse.ListNode)), parse.Node], false, 1], ["next", "text/template/parse", [], [parse.item], false, 1], ["nextNonSpace", "text/template/parse", [], [parse.item], false, 1], ["operand", "text/template/parse", [], [parse.Node], false, 1], ["parse", "text/template/parse", [(go$mapType(Go$String, (go$ptrType(parse.Tree))))], [parse.Node], false, 1], ["parseControl", "text/template/parse", [Go$Bool, Go$String], [parse.Pos, Go$Int, (go$ptrType(parse.PipeNode)), (go$ptrType(parse.ListNode)), (go$ptrType(parse.ListNode))], false, 1], ["parseDefinition", "text/template/parse", [(go$mapType(Go$String, (go$ptrType(parse.Tree))))], [], false, 1], ["peek", "text/template/parse", [], [parse.item], false, 1], ["peekNonSpace", "text/template/parse", [], [parse.item], false, 1], ["pipeline", "text/template/parse", [Go$String], [(go$ptrType(parse.PipeNode))], false, 1], ["popVars", "text/template/parse", [Go$Int], [], false, 1], ["rangeControl", "text/template/parse", [], [parse.Node], false, 1], ["recover", "text/template/parse", [(go$ptrType(go$error))], [], false, 1], ["startParse", "text/template/parse", [(go$sliceType((go$mapType(Go$String, go$emptyInterface)))), (go$ptrType(parse.lexer))], [], false, 1], ["stopParse", "text/template/parse", [], [], false, 1], ["templateControl", "text/template/parse", [], [parse.Node], false, 1], ["term", "text/template/parse", [], [parse.Node], false, 1], ["textOrAction", "text/template/parse", [], [parse.Node], false, 1], ["unexpected", "text/template/parse", [parse.item, Go$String], [], false, 1], ["useVar", "text/template/parse", [parse.Pos, Go$String], [parse.Node], false, 1], ["withControl", "text/template/parse", [], [parse.Node], false, 1]];
		Template.init([["name", "name", "text/template", Go$String, ""], ["Tree", "", "", (go$ptrType(parse.Tree)), ""], ["common", "", "text/template", (go$ptrType(common)), ""], ["leftDelim", "leftDelim", "text/template", Go$String, ""], ["rightDelim", "rightDelim", "text/template", Go$String, ""]]);
		zero = new reflect.Value.Ptr();
		errorType = reflect.TypeOf((go$ptrType(go$error)).nil).Elem();
		fmtStringerType = reflect.TypeOf((go$ptrType(fmt.Stringer)).nil).Elem();
		errBadComparison = errors.New("incompatible types for comparison");
		errNoComparison = errors.New("missing argument for comparison");
		errBadComparisonType = errors.New("invalid type for comparison");
		htmlQuot = new (go$sliceType(Go$Uint8))(go$stringToBytes("&#34;"));
		htmlApos = new (go$sliceType(Go$Uint8))(go$stringToBytes("&#39;"));
		htmlAmp = new (go$sliceType(Go$Uint8))(go$stringToBytes("&amp;"));
		htmlLt = new (go$sliceType(Go$Uint8))(go$stringToBytes("&lt;"));
		htmlGt = new (go$sliceType(Go$Uint8))(go$stringToBytes("&gt;"));
		jsLowUni = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\u00"));
		hex = new (go$sliceType(Go$Uint8))(go$stringToBytes("0123456789ABCDEF"));
		jsBackslash = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\\\"));
		jsApos = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\'"));
		jsQuot = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\\""));
		jsLt = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\x3C"));
		jsGt = new (go$sliceType(Go$Uint8))(go$stringToBytes("\\x3E"));
		var _map, _key;
		builtins = (_map = new Go$Map(), _key = "and", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [go$emptyInterface], true))(and) }, _key = "call", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [go$emptyInterface, go$error], true))(call) }, _key = "html", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(HTMLEscaper) }, _key = "index", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [go$emptyInterface, go$error], true))(index) }, _key = "js", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(JSEscaper) }, _key = "len", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface], [Go$Int, go$error], false))(length) }, _key = "not", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface], [Go$Bool], false))(not) }, _key = "or", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [go$emptyInterface], true))(or) }, _key = "print", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(fmt.Sprint) }, _key = "printf", _map[_key] = { k: _key, v: new (go$funcType([Go$String, (go$sliceType(go$emptyInterface))], [Go$String], true))(fmt.Sprintf) }, _key = "println", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(fmt.Sprintln) }, _key = "urlquery", _map[_key] = { k: _key, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(URLQueryEscaper) }, _key = "eq", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, (go$sliceType(go$emptyInterface))], [Go$Bool, go$error], true))(eq) }, _key = "ge", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(ge) }, _key = "gt", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(gt) }, _key = "le", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(le) }, _key = "lt", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(lt) }, _key = "ne", _map[_key] = { k: _key, v: new (go$funcType([go$emptyInterface, go$emptyInterface], [Go$Bool, go$error], false))(ne) }, _map);
		builtinFuncs = createValueFuncs(builtins);
	}
	return go$pkg;
})();
go$packages["html/template"] = (function() {
	var go$pkg = {}, strings = go$packages["strings"], fmt = go$packages["fmt"], reflect = go$packages["reflect"], bytes = go$packages["bytes"], unicode = go$packages["unicode"], utf8 = go$packages["unicode/utf8"], html = go$packages["html"], io = go$packages["io"], template = go$packages["text/template"], parse = go$packages["text/template/parse"], json = go$packages["encoding/json"], ioutil = go$packages["io/ioutil"], filepath = go$packages["path/filepath"], sync = go$packages["sync"], CSS, HTML, HTMLAttr, JS, JSStr, URL, context, state, delim, urlPart, jsCtx, element, attr, Error, ErrorCode, escaper, Template, nameSpace, FuncMap, attrType, indirect, indirectToStringerOrError, stringify, isComment, isInTag, endsWithCSSKeyword, isCSSNmchar, decodeCSS, isHex, hexDecode, skipCSSSpace, isCSSSpace, cssEscaper, cssValueFilter, errorf, escapeTemplates, newEscaper, ensurePipelineContains, appendCmd, indexOfStr, escFnsEq, newIdentCmd, nudge, join, contextAfterText, htmlNospaceEscaper, attrEscaper, rcdataEscaper, htmlEscaper, htmlReplacer, stripTags, htmlNameFilter, commentEscaper, nextJSCtx, indirectToJSONMarshaler, jsValEscaper, jsStrEscaper, jsRegexpEscaper, replace, isJSIdentPart, New, Must, parseFiles, parseGlob, tText, tTag, tAttrName, tAfterName, tBeforeValue, tHTMLCmt, tSpecialTagEnd, tAttr, tURL, tJS, tJSDelimited, tBlockCmt, tLineCmt, tCSS, tCSSStr, tError, eatAttrName, asciiAlpha, asciiAlphaNum, eatTagName, eatWhiteSpace, urlFilter, urlEscaper, urlNormalizer, urlProcessor, attrTypeMap, errorType, fmtStringerType, stateNames, delimNames, urlPartNames, elementNames, attrNames, expressionBytes, mozBindingBytes, funcMap, equivEscapers, redundantFuncs, delimEnds, doctypeBytes, htmlReplacementTable, htmlNormReplacementTable, htmlNospaceReplacementTable, htmlNospaceNormReplacementTable, regexpPrecederKeywords, jsonMarshalType, jsStrReplacementTable, jsStrNormReplacementTable, jsRegexpReplacementTable, transitionFunc, commentStart, commentEnd, elementContentType, attrStartStates, specialTagEndMarkers, blockCommentEnd, elementNameMap;
	CSS = go$pkg.CSS = go$newType(0, "String", "template.CSS", "CSS", "html/template", null);
	HTML = go$pkg.HTML = go$newType(0, "String", "template.HTML", "HTML", "html/template", null);
	HTMLAttr = go$pkg.HTMLAttr = go$newType(0, "String", "template.HTMLAttr", "HTMLAttr", "html/template", null);
	JS = go$pkg.JS = go$newType(0, "String", "template.JS", "JS", "html/template", null);
	JSStr = go$pkg.JSStr = go$newType(0, "String", "template.JSStr", "JSStr", "html/template", null);
	URL = go$pkg.URL = go$newType(0, "String", "template.URL", "URL", "html/template", null);
	context = go$pkg.context = go$newType(0, "Struct", "template.context", "context", "html/template", function(state_, delim_, urlPart_, jsCtx_, attr_, element_, err_) {
		this.go$val = this;
		this.state = state_ !== undefined ? state_ : 0;
		this.delim = delim_ !== undefined ? delim_ : 0;
		this.urlPart = urlPart_ !== undefined ? urlPart_ : 0;
		this.jsCtx = jsCtx_ !== undefined ? jsCtx_ : 0;
		this.attr = attr_ !== undefined ? attr_ : 0;
		this.element = element_ !== undefined ? element_ : 0;
		this.err = err_ !== undefined ? err_ : (go$ptrType(Error)).nil;
	});
	state = go$pkg.state = go$newType(1, "Uint8", "template.state", "state", "html/template", null);
	delim = go$pkg.delim = go$newType(1, "Uint8", "template.delim", "delim", "html/template", null);
	urlPart = go$pkg.urlPart = go$newType(1, "Uint8", "template.urlPart", "urlPart", "html/template", null);
	jsCtx = go$pkg.jsCtx = go$newType(1, "Uint8", "template.jsCtx", "jsCtx", "html/template", null);
	element = go$pkg.element = go$newType(1, "Uint8", "template.element", "element", "html/template", null);
	attr = go$pkg.attr = go$newType(1, "Uint8", "template.attr", "attr", "html/template", null);
	Error = go$pkg.Error = go$newType(0, "Struct", "template.Error", "Error", "html/template", function(ErrorCode_, Name_, Line_, Description_) {
		this.go$val = this;
		this.ErrorCode = ErrorCode_ !== undefined ? ErrorCode_ : 0;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Line = Line_ !== undefined ? Line_ : 0;
		this.Description = Description_ !== undefined ? Description_ : "";
	});
	ErrorCode = go$pkg.ErrorCode = go$newType(4, "Int", "template.ErrorCode", "ErrorCode", "html/template", null);
	escaper = go$pkg.escaper = go$newType(0, "Struct", "template.escaper", "escaper", "html/template", function(tmpl_, output_, derived_, called_, actionNodeEdits_, templateNodeEdits_, textNodeEdits_) {
		this.go$val = this;
		this.tmpl = tmpl_ !== undefined ? tmpl_ : (go$ptrType(Template)).nil;
		this.output = output_ !== undefined ? output_ : false;
		this.derived = derived_ !== undefined ? derived_ : false;
		this.called = called_ !== undefined ? called_ : false;
		this.actionNodeEdits = actionNodeEdits_ !== undefined ? actionNodeEdits_ : false;
		this.templateNodeEdits = templateNodeEdits_ !== undefined ? templateNodeEdits_ : false;
		this.textNodeEdits = textNodeEdits_ !== undefined ? textNodeEdits_ : false;
	});
	Template = go$pkg.Template = go$newType(0, "Struct", "template.Template", "Template", "html/template", function(escaped_, text_, Tree_, nameSpace_) {
		this.go$val = this;
		this.escaped = escaped_ !== undefined ? escaped_ : false;
		this.text = text_ !== undefined ? text_ : (go$ptrType(template.Template)).nil;
		this.Tree = Tree_ !== undefined ? Tree_ : (go$ptrType(parse.Tree)).nil;
		this.nameSpace = nameSpace_ !== undefined ? nameSpace_ : (go$ptrType(nameSpace)).nil;
	});
	nameSpace = go$pkg.nameSpace = go$newType(0, "Struct", "template.nameSpace", "nameSpace", "html/template", function(mu_, set_) {
		this.go$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.set = set_ !== undefined ? set_ : false;
	});
	FuncMap = go$pkg.FuncMap = go$newType(0, "Map", "template.FuncMap", "FuncMap", "html/template", null);
	attrType = function(name) {
		var colon, _tuple, _entry, t, ok;
		name = strings.ToLower(name);
		if (strings.HasPrefix(name, "data-")) {
			name = name.substring(5);
		} else {
			colon = strings.IndexRune(name, 58);
			if (!((colon === -1))) {
				if (name.substring(0, colon) === "xmlns") {
					return 6;
				}
				name = name.substring((colon + 1 >> 0));
			}
		}
		_tuple = (_entry = attrTypeMap[name], _entry !== undefined ? [_entry.v, true] : [0, false]); t = _tuple[0]; ok = _tuple[1];
		if (ok) {
			return t;
		}
		if (strings.HasPrefix(name, "on")) {
			return 4;
		}
		if (strings.Contains(name, "src") || strings.Contains(name, "uri") || strings.Contains(name, "url")) {
			return 6;
		}
		return 0;
	};
	indirect = function(a) {
		var t, _struct, v, _struct$1;
		if (go$interfaceIsEqual(a, null)) {
			return null;
		}
		t = reflect.TypeOf(a);
		if (!((t.Kind() === 22))) {
			return a;
		}
		v = (_struct = reflect.ValueOf(a), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		while ((v.Kind() === 22) && !v.IsNil()) {
			v = (_struct$1 = v.Elem(), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		return v.Interface();
	};
	indirectToStringerOrError = function(a) {
		var _struct, v, _struct$1;
		if (go$interfaceIsEqual(a, null)) {
			return null;
		}
		v = (_struct = reflect.ValueOf(a), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		while (!v.Type().Implements(fmtStringerType) && !v.Type().Implements(errorType) && (v.Kind() === 22) && !v.IsNil()) {
			v = (_struct$1 = v.Elem(), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		return v.Interface();
	};
	stringify = function(args) {
		var s, _ref, _type, _slice, _index, _ref$1, _i, _slice$1, _index$1, arg, i, _slice$2, _index$2;
		if (args.length === 1) {
			_ref = indirect((_slice = args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === Go$String) {
				s = _ref.go$val;
				return [s, 0];
			} else if (_type === CSS) {
				s = _ref.go$val;
				return [s, 1];
			} else if (_type === HTML) {
				s = _ref.go$val;
				return [s, 2];
			} else if (_type === HTMLAttr) {
				s = _ref.go$val;
				return [s, 3];
			} else if (_type === JS) {
				s = _ref.go$val;
				return [s, 4];
			} else if (_type === JSStr) {
				s = _ref.go$val;
				return [s, 5];
			} else if (_type === URL) {
				s = _ref.go$val;
				return [s, 6];
			}
		}
		_ref$1 = args;
		_i = 0;
		while (_i < _ref$1.length) {
			arg = (_slice$1 = _ref$1, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			i = _i;
			_slice$2 = args; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = indirectToStringerOrError(arg)) : go$throwRuntimeError("index out of range");
			_i++;
		}
		return [fmt.Sprint(args), 0];
	};
	context.Ptr.prototype.String = function() {
		var _struct, c;
		c = (_struct = this, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err));
		return fmt.Sprintf("{%v %v %v %v %v %v %v}", new (go$sliceType(go$emptyInterface))([new state(c.state), new delim(c.delim), new urlPart(c.urlPart), new jsCtx(c.jsCtx), new attr(c.attr), new element(c.element), c.err]));
	};
	context.prototype.String = function() { return this.go$val.String(); };
	context.Ptr.prototype.eq = function(d) {
		var _struct, c;
		c = (_struct = this, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err));
		return (c.state === d.state) && (c.delim === d.delim) && (c.urlPart === d.urlPart) && (c.jsCtx === d.jsCtx) && (c.attr === d.attr) && (c.element === d.element) && c.err === d.err;
	};
	context.prototype.eq = function(d) { return this.go$val.eq(d); };
	context.Ptr.prototype.mangle = function(templateName) {
		var _struct, c, s;
		c = (_struct = this, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err));
		if (c.state === 0) {
			return templateName;
		}
		s = templateName + "$htmltemplate_" + (new state(c.state)).String();
		if (!((c.delim === 0))) {
			s = s + ("_" + (new delim(c.delim)).String());
		}
		if (!((c.urlPart === 0))) {
			s = s + ("_" + (new urlPart(c.urlPart)).String());
		}
		if (!((c.jsCtx === 0))) {
			s = s + ("_" + (new jsCtx(c.jsCtx)).String());
		}
		if (!((c.attr === 0))) {
			s = s + ("_" + (new attr(c.attr)).String());
		}
		if (!((c.element === 0))) {
			s = s + ("_" + (new element(c.element)).String());
		}
		return s;
	};
	context.prototype.mangle = function(templateName) { return this.go$val.mangle(templateName); };
	state.prototype.String = function() {
		var s;
		s = this.go$val;
		if ((s >> 0) < 24) {
			return stateNames[s];
		}
		return fmt.Sprintf("illegal state %d", new (go$sliceType(go$emptyInterface))([new Go$Int((s >> 0))]));
	};
	go$ptrType(state).prototype.String = function() { return new state(this.go$get()).String(); };
	isComment = function(s) {
		var _ref;
		_ref = s;
		if (_ref === 5 || _ref === 13 || _ref === 14 || _ref === 21 || _ref === 22) {
			return true;
		}
		return false;
	};
	isInTag = function(s) {
		var _ref;
		_ref = s;
		if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 7) {
			return true;
		}
		return false;
	};
	delim.prototype.String = function() {
		var d;
		d = this.go$val;
		if ((d >> 0) < 4) {
			return delimNames[d];
		}
		return fmt.Sprintf("illegal delim %d", new (go$sliceType(go$emptyInterface))([new Go$Int((d >> 0))]));
	};
	go$ptrType(delim).prototype.String = function() { return new delim(this.go$get()).String(); };
	urlPart.prototype.String = function() {
		var u;
		u = this.go$val;
		if ((u >> 0) < 4) {
			return urlPartNames[u];
		}
		return fmt.Sprintf("illegal urlPart %d", new (go$sliceType(go$emptyInterface))([new Go$Int((u >> 0))]));
	};
	go$ptrType(urlPart).prototype.String = function() { return new urlPart(this.go$get()).String(); };
	jsCtx.prototype.String = function() {
		var c, _ref;
		c = this.go$val;
		_ref = c;
		if (_ref === 0) {
			return "jsCtxRegexp";
		} else if (_ref === 1) {
			return "jsCtxDivOp";
		} else if (_ref === 2) {
			return "jsCtxUnknown";
		}
		return fmt.Sprintf("illegal jsCtx %d", new (go$sliceType(go$emptyInterface))([new Go$Int((c >> 0))]));
	};
	go$ptrType(jsCtx).prototype.String = function() { return new jsCtx(this.go$get()).String(); };
	element.prototype.String = function() {
		var e;
		e = this.go$val;
		if ((e >> 0) < 5) {
			return elementNames[e];
		}
		return fmt.Sprintf("illegal element %d", new (go$sliceType(go$emptyInterface))([new Go$Int((e >> 0))]));
	};
	go$ptrType(element).prototype.String = function() { return new element(this.go$get()).String(); };
	attr.prototype.String = function() {
		var a;
		a = this.go$val;
		if ((a >> 0) < 4) {
			return attrNames[a];
		}
		return fmt.Sprintf("illegal attr %d", new (go$sliceType(go$emptyInterface))([new Go$Int((a >> 0))]));
	};
	go$ptrType(attr).prototype.String = function() { return new attr(this.go$get()).String(); };
	endsWithCSSKeyword = function(b, kw) {
		var i, _tuple, r;
		i = b.length - kw.length >> 0;
		if (i < 0) {
			return false;
		}
		if (!((i === 0))) {
			_tuple = utf8.DecodeLastRune(go$subslice(b, 0, i)); r = _tuple[0];
			if (isCSSNmchar(r)) {
				return false;
			}
		}
		return go$bytesToString(bytes.ToLower(go$subslice(b, i))) === kw;
	};
	isCSSNmchar = function(r) {
		return 97 <= r && r <= 122 || 65 <= r && r <= 90 || 48 <= r && r <= 57 || (r === 45) || (r === 95) || 128 <= r && r <= 55295 || 57344 <= r && r <= 65533 || 65536 <= r && r <= 1114111;
	};
	decodeCSS = function(s) {
		var i, b, i$1, _tuple, _slice, _index, j, _slice$1, _index$1, r, _q, _tuple$1, n, _tuple$2, _tuple$3, n$1, _tuple$4;
		i = bytes.IndexByte(s, 92);
		if (i === -1) {
			return s;
		}
		b = (go$sliceType(Go$Uint8)).make(0, s.length, function() { return 0; });
		while (!((s.length === 0))) {
			i$1 = bytes.IndexByte(s, 92);
			if (i$1 === -1) {
				i$1 = s.length;
			}
			_tuple = [go$appendSlice(b, go$subslice(s, 0, i$1)), go$subslice(s, i$1)]; b = _tuple[0]; s = _tuple[1];
			if (s.length < 2) {
				break;
			}
			if (isHex((_slice = s, _index = 1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")))) {
				j = 2;
				while (j < s.length && j < 7 && isHex((_slice$1 = s, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")))) {
					j = j + 1 >> 0;
				}
				r = hexDecode(go$subslice(s, 1, j));
				if (r > 1114111) {
					_tuple$1 = [(_q = r / 16, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : go$throwRuntimeError("integer divide by zero")), j - 1 >> 0]; r = _tuple$1[0]; j = _tuple$1[1];
				}
				n = utf8.EncodeRune(go$subslice(b, b.length, b.capacity), r);
				_tuple$2 = [go$subslice(b, 0, (b.length + n >> 0)), skipCSSSpace(go$subslice(s, j))]; b = _tuple$2[0]; s = _tuple$2[1];
			} else {
				_tuple$3 = utf8.DecodeRune(go$subslice(s, 1)); n$1 = _tuple$3[1];
				_tuple$4 = [go$appendSlice(b, go$subslice(s, 1, (1 + n$1 >> 0))), go$subslice(s, (1 + n$1 >> 0))]; b = _tuple$4[0]; s = _tuple$4[1];
			}
		}
		return b;
	};
	isHex = function(c) {
		return 48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70;
	};
	hexDecode = function(s) {
		var n, _ref, _i, _slice, _index, c;
		n = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			n = n << 4 >> 0;
			if (48 <= c && c <= 57) {
				n = n | (((c - 48 << 24 >>> 24) >> 0));
			} else if (97 <= c && c <= 102) {
				n = n | ((((c - 97 << 24 >>> 24) >> 0) + 10 >> 0));
			} else if (65 <= c && c <= 70) {
				n = n | ((((c - 65 << 24 >>> 24) >> 0) + 10 >> 0));
			} else {
				throw go$panic(new Go$String(fmt.Sprintf("Bad hex digit in %q", new (go$sliceType(go$emptyInterface))([s]))));
			}
			_i++;
		}
		return n;
	};
	skipCSSSpace = function(c) {
		var _ref, _slice, _index, _slice$1, _index$1;
		if (c.length === 0) {
			return c;
		}
		_ref = (_slice = c, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (_ref === 9 || _ref === 10 || _ref === 12 || _ref === 32) {
			return go$subslice(c, 1);
		} else if (_ref === 13) {
			if (c.length >= 2 && ((_slice$1 = c, _index$1 = 1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 10)) {
				return go$subslice(c, 2);
			}
			return go$subslice(c, 1);
		}
		return c;
	};
	isCSSSpace = function(b) {
		var _ref;
		_ref = b;
		if (_ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 32) {
			return true;
		}
		return false;
	};
	cssEscaper = function(args) {
		var _tuple, s, b, written, _ref, _i, _rune, r, i, repl, _ref$1;
		_tuple = stringify(args); s = _tuple[0];
		b = new bytes.Buffer.Ptr();
		written = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			r = _rune[0];
			i = _i;
			repl = "";
			_ref$1 = r;
			if (_ref$1 === 0) {
				repl = "\\0";
			} else if (_ref$1 === 9) {
				repl = "\\9";
			} else if (_ref$1 === 10) {
				repl = "\\a";
			} else if (_ref$1 === 12) {
				repl = "\\c";
			} else if (_ref$1 === 13) {
				repl = "\\d";
			} else if (_ref$1 === 34) {
				repl = "\\22";
			} else if (_ref$1 === 38) {
				repl = "\\26";
			} else if (_ref$1 === 39) {
				repl = "\\27";
			} else if (_ref$1 === 40) {
				repl = "\\28";
			} else if (_ref$1 === 41) {
				repl = "\\29";
			} else if (_ref$1 === 43) {
				repl = "\\2b";
			} else if (_ref$1 === 47) {
				repl = "\\2f";
			} else if (_ref$1 === 58) {
				repl = "\\3a";
			} else if (_ref$1 === 59) {
				repl = "\\3b";
			} else if (_ref$1 === 60) {
				repl = "\\3c";
			} else if (_ref$1 === 62) {
				repl = "\\3e";
			} else if (_ref$1 === 92) {
				repl = "\\\\";
			} else if (_ref$1 === 123) {
				repl = "\\7b";
			} else if (_ref$1 === 125) {
				repl = "\\7d";
			} else {
				_i += _rune[1];
				continue;
			}
			b.WriteString(s.substring(written, i));
			b.WriteString(repl);
			written = i + utf8.RuneLen(r) >> 0;
			if (!(repl === "\\\\") && ((written === s.length) || isHex(s.charCodeAt(written)) || isCSSSpace(s.charCodeAt(written)))) {
				b.WriteByte(32);
			}
			_i += _rune[1];
		}
		if (written === 0) {
			return s;
		}
		b.WriteString(s.substring(written));
		return b.String();
	};
	cssValueFilter = function(args) {
		var _tuple, s, t, _tuple$1, b, id, _ref, _i, _slice, _index, c, i, _ref$1, _slice$1, _index$1;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 1) {
			return s;
		}
		_tuple$1 = [decodeCSS(new (go$sliceType(Go$Uint8))(go$stringToBytes(s))), (go$sliceType(Go$Uint8)).make(0, 64, function() { return 0; })]; b = _tuple$1[0]; id = _tuple$1[1];
		_ref = b;
		_i = 0;
		while (_i < _ref.length) {
			c = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			_ref$1 = c;
			if (_ref$1 === 0 || _ref$1 === 34 || _ref$1 === 39 || _ref$1 === 40 || _ref$1 === 41 || _ref$1 === 47 || _ref$1 === 59 || _ref$1 === 64 || _ref$1 === 91 || _ref$1 === 92 || _ref$1 === 93 || _ref$1 === 96 || _ref$1 === 123 || _ref$1 === 125) {
				return "ZgotmplZ";
			} else if (_ref$1 === 45) {
				if (!((i === 0)) && ((_slice$1 = b, _index$1 = (i - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 45)) {
					return "ZgotmplZ";
				}
			} else {
				if (c < 128 && isCSSNmchar((c >> 0))) {
					id = go$append(id, c);
				}
			}
			_i++;
		}
		id = bytes.ToLower(id);
		if (!((bytes.Index(id, expressionBytes) === -1)) || !((bytes.Index(id, mozBindingBytes) === -1))) {
			return "ZgotmplZ";
		}
		return go$bytesToString(b);
	};
	Error.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (!((e.Line === 0))) {
			return fmt.Sprintf("html/template:%s:%d: %s", new (go$sliceType(go$emptyInterface))([new Go$String(e.Name), new Go$Int(e.Line), new Go$String(e.Description)]));
		} else if (!(e.Name === "")) {
			return fmt.Sprintf("html/template:%s: %s", new (go$sliceType(go$emptyInterface))([new Go$String(e.Name), new Go$String(e.Description)]));
		}
		return "html/template: " + e.Description;
	};
	Error.prototype.Error = function() { return this.go$val.Error(); };
	errorf = function(k, line, f, args) {
		return new Error.Ptr(k, "", line, fmt.Sprintf(f, args));
	};
	escapeTemplates = function(tmpl, names) {
		var e, _ref, _i, _slice, _index, name, _tuple, _struct, c, err, _tuple$1, _ref$1, _i$1, _slice$1, _index$1, name$1, _entry, t;
		e = newEscaper(tmpl);
		_ref = names;
		_i = 0;
		while (_i < _ref.length) {
			name = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_tuple = e.escapeTree(new context.Ptr(0, 0, 0, 0, 0, 0, (go$ptrType(Error)).nil), name, 0); c = (_struct = _tuple[0], new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err));
			err = null;
			if (!(c.err === (go$ptrType(Error)).nil)) {
				_tuple$1 = [c.err, name]; err = _tuple$1[0]; c.err.Name = _tuple$1[1];
			} else if (!((c.state === 0))) {
				err = new Error.Ptr(4, name, 0, fmt.Sprintf("ends in a non-text context: %v", new (go$sliceType(go$emptyInterface))([new c.constructor.Struct(c)])));
			}
			if (!(go$interfaceIsEqual(err, null))) {
				_ref$1 = names;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					name$1 = (_slice$1 = _ref$1, _index$1 = _i$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
					t = (_entry = tmpl.nameSpace.set[name$1], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil);
					if (!(t === (go$ptrType(Template)).nil)) {
						t.text.Tree = (go$ptrType(parse.Tree)).nil;
						t.Tree = (go$ptrType(parse.Tree)).nil;
					}
					_i$1++;
				}
				return err;
			}
			tmpl.escaped = true;
			tmpl.Tree = tmpl.text.Tree;
			_i++;
		}
		e.commit();
		return null;
	};
	newEscaper = function(t) {
		var _map, _key, _map$1, _key$1, _map$2, _key$2, _map$3, _key$3, _map$4, _key$4, _map$5, _key$5;
		return new escaper.Ptr(t, (_map = new Go$Map(), _map), (_map$1 = new Go$Map(), _map$1), (_map$2 = new Go$Map(), _map$2), (_map$3 = new Go$Map(), _map$3), (_map$4 = new Go$Map(), _map$4), (_map$5 = new Go$Map(), _map$5));
	};
	escaper.Ptr.prototype.escape = function(c, n) {
		var e, n$1, _ref, _type, _struct, _struct$1, _struct$2, _struct$3, _struct$4, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, _struct$10, _struct$11, _struct$12, _struct$13;
		e = this;
		_ref = n;
		_type = _ref !== null ? _ref.constructor : null;
		if (_type === (go$ptrType(parse.ActionNode))) {
			n$1 = _ref.go$val;
			return (_struct$1 = e.escapeAction((_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), n$1), new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err));
		} else if (_type === (go$ptrType(parse.IfNode))) {
			n$1 = _ref.go$val;
			return (_struct$3 = e.escapeBranch((_struct$2 = c, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), n$1.BranchNode, "if"), new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err));
		} else if (_type === (go$ptrType(parse.ListNode))) {
			n$1 = _ref.go$val;
			return (_struct$5 = e.escapeList((_struct$4 = c, new context.Ptr(_struct$4.state, _struct$4.delim, _struct$4.urlPart, _struct$4.jsCtx, _struct$4.attr, _struct$4.element, _struct$4.err)), n$1), new context.Ptr(_struct$5.state, _struct$5.delim, _struct$5.urlPart, _struct$5.jsCtx, _struct$5.attr, _struct$5.element, _struct$5.err));
		} else if (_type === (go$ptrType(parse.RangeNode))) {
			n$1 = _ref.go$val;
			return (_struct$7 = e.escapeBranch((_struct$6 = c, new context.Ptr(_struct$6.state, _struct$6.delim, _struct$6.urlPart, _struct$6.jsCtx, _struct$6.attr, _struct$6.element, _struct$6.err)), n$1.BranchNode, "range"), new context.Ptr(_struct$7.state, _struct$7.delim, _struct$7.urlPart, _struct$7.jsCtx, _struct$7.attr, _struct$7.element, _struct$7.err));
		} else if (_type === (go$ptrType(parse.TemplateNode))) {
			n$1 = _ref.go$val;
			return (_struct$9 = e.escapeTemplate((_struct$8 = c, new context.Ptr(_struct$8.state, _struct$8.delim, _struct$8.urlPart, _struct$8.jsCtx, _struct$8.attr, _struct$8.element, _struct$8.err)), n$1), new context.Ptr(_struct$9.state, _struct$9.delim, _struct$9.urlPart, _struct$9.jsCtx, _struct$9.attr, _struct$9.element, _struct$9.err));
		} else if (_type === (go$ptrType(parse.TextNode))) {
			n$1 = _ref.go$val;
			return (_struct$11 = e.escapeText((_struct$10 = c, new context.Ptr(_struct$10.state, _struct$10.delim, _struct$10.urlPart, _struct$10.jsCtx, _struct$10.attr, _struct$10.element, _struct$10.err)), n$1), new context.Ptr(_struct$11.state, _struct$11.delim, _struct$11.urlPart, _struct$11.jsCtx, _struct$11.attr, _struct$11.element, _struct$11.err));
		} else if (_type === (go$ptrType(parse.WithNode))) {
			n$1 = _ref.go$val;
			return (_struct$13 = e.escapeBranch((_struct$12 = c, new context.Ptr(_struct$12.state, _struct$12.delim, _struct$12.urlPart, _struct$12.jsCtx, _struct$12.attr, _struct$12.element, _struct$12.err)), n$1.BranchNode, "with"), new context.Ptr(_struct$13.state, _struct$13.delim, _struct$13.urlPart, _struct$13.jsCtx, _struct$13.attr, _struct$13.element, _struct$13.err));
		}
		throw go$panic(new Go$String("escaping " + n.String() + " is unimplemented"));
	};
	escaper.prototype.escape = function(c, n) { return this.go$val.escape(c, n); };
	escaper.Ptr.prototype.escapeAction = function(c, n) {
		var e, _struct, _struct$1, _struct$2, s, _ref, _struct$3, _ref$1, _ref$2, _ref$3, _ref$4, _struct$4;
		e = this;
		if (!((n.Pipe.Decl.length === 0))) {
			return (_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err));
		}
		c = (_struct$2 = nudge((_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err))), new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err));
		s = (go$sliceType(Go$String)).make(0, 3, function() { return ""; });
		_ref = c.state;
		if (_ref === 23) {
			return (_struct$3 = c, new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err));
		} else if (_ref === 8 || _ref === 16 || _ref === 17 || _ref === 18 || _ref === 19 || _ref === 20) {
			_ref$1 = c.urlPart;
			if (_ref$1 === 0) {
				s = go$append(s, "html_template_urlfilter");
				_ref$2 = c.state;
				if (_ref$2 === 16 || _ref$2 === 17) {
					s = go$append(s, "html_template_cssescaper");
				} else {
					s = go$append(s, "html_template_urlnormalizer");
				}
			} else if (_ref$1 === 1) {
				_ref$3 = c.state;
				if (_ref$3 === 16 || _ref$3 === 17) {
					s = go$append(s, "html_template_cssescaper");
				} else {
					s = go$append(s, "html_template_urlnormalizer");
				}
			} else if (_ref$1 === 2) {
				s = go$append(s, "html_template_urlescaper");
			} else if (_ref$1 === 3) {
				return new context.Ptr(23, 0, 0, 0, 0, 0, errorf(1, n.Line, "%s appears in an ambiguous URL context", new (go$sliceType(go$emptyInterface))([n])));
			} else {
				throw go$panic(new Go$String((new urlPart(c.urlPart)).String()));
			}
		} else if (_ref === 9) {
			s = go$append(s, "html_template_jsvalescaper");
			c.jsCtx = 1;
		} else if (_ref === 10 || _ref === 11) {
			s = go$append(s, "html_template_jsstrescaper");
		} else if (_ref === 12) {
			s = go$append(s, "html_template_jsregexpescaper");
		} else if (_ref === 15) {
			s = go$append(s, "html_template_cssvaluefilter");
		} else if (_ref === 0) {
			s = go$append(s, "html_template_htmlescaper");
		} else if (_ref === 6) {
			s = go$append(s, "html_template_rcdataescaper");
		} else if (_ref === 7) {
		} else if (_ref === 2 || _ref === 1) {
			c.state = 2;
			s = go$append(s, "html_template_htmlnamefilter");
		} else {
			if (isComment(c.state)) {
				s = go$append(s, "html_template_commentescaper");
			} else {
				throw go$panic(new Go$String("unexpected state " + (new state(c.state)).String()));
			}
		}
		_ref$4 = c.delim;
		if (_ref$4 === 0) {
		} else if (_ref$4 === 3) {
			s = go$append(s, "html_template_nospaceescaper");
		} else {
			s = go$append(s, "html_template_attrescaper");
		}
		e.editActionNode(n, s);
		return (_struct$4 = c, new context.Ptr(_struct$4.state, _struct$4.delim, _struct$4.urlPart, _struct$4.jsCtx, _struct$4.attr, _struct$4.element, _struct$4.err));
	};
	escaper.prototype.escapeAction = function(c, n) { return this.go$val.escapeAction(c, n); };
	ensurePipelineContains = function(p, s) {
		var n, idents, i, _slice, _index, cmd, _tuple, x, _slice$1, _index$1, ok, dups, _ref, _i, _slice$2, _index$2, id, _slice$3, _index$3, x$1, _slice$4, _index$4, newCmds, _ref$1, _i$1, _slice$5, _index$5, id$1, _slice$6, _index$6, pos, x$2, _slice$7, _index$7, i$1, _ref$2, _i$2, _slice$8, _index$8, name, _ref$3, _i$3, _slice$9, _index$9, name$1;
		if (s.length === 0) {
			return;
		}
		n = p.Cmds.length;
		idents = p.Cmds;
		i = n - 1 >> 0;
		while (i >= 0) {
			cmd = (_slice = p.Cmds, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (!((cmd.Args.length === 0))) {
				_tuple = (x = (_slice$1 = cmd.Args, _index$1 = 0, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$ptrType(parse.IdentifierNode)) ? [x.go$val, true] : [(go$ptrType(parse.IdentifierNode)).nil, false])); ok = _tuple[1];
				if (ok) {
					i = i - 1 >> 0;
					continue;
				}
			}
			idents = go$subslice(p.Cmds, (i + 1 >> 0));
			i = i - 1 >> 0;
		}
		dups = 0;
		_ref = idents;
		_i = 0;
		while (_i < _ref.length) {
			id = (_slice$2 = _ref, _index$2 = _i, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range"));
			if (escFnsEq((_slice$3 = s, _index$3 = dups, (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")), ((x$1 = (_slice$4 = id.Args, _index$4 = 0, (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")), (x$1 !== null && x$1.constructor === (go$ptrType(parse.IdentifierNode)) ? x$1.go$val : go$typeAssertionFailed(x$1, (go$ptrType(parse.IdentifierNode)))))).Ident)) {
				dups = dups + 1 >> 0;
				if (dups === s.length) {
					return;
				}
			}
			_i++;
		}
		newCmds = (go$sliceType((go$ptrType(parse.CommandNode)))).make(n - idents.length >> 0, (n + s.length >> 0) - dups >> 0, function() { return (go$ptrType(parse.CommandNode)).nil; });
		go$copySlice(newCmds, p.Cmds);
		_ref$1 = idents;
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			id$1 = (_slice$5 = _ref$1, _index$5 = _i$1, (_index$5 >= 0 && _index$5 < _slice$5.length) ? _slice$5.array[_slice$5.offset + _index$5] : go$throwRuntimeError("index out of range"));
			pos = (_slice$6 = id$1.Args, _index$6 = 0, (_index$6 >= 0 && _index$6 < _slice$6.length) ? _slice$6.array[_slice$6.offset + _index$6] : go$throwRuntimeError("index out of range")).Position();
			i$1 = indexOfStr(((x$2 = (_slice$7 = id$1.Args, _index$7 = 0, (_index$7 >= 0 && _index$7 < _slice$7.length) ? _slice$7.array[_slice$7.offset + _index$7] : go$throwRuntimeError("index out of range")), (x$2 !== null && x$2.constructor === (go$ptrType(parse.IdentifierNode)) ? x$2.go$val : go$typeAssertionFailed(x$2, (go$ptrType(parse.IdentifierNode)))))).Ident, s, escFnsEq);
			if (!((i$1 === -1))) {
				_ref$2 = go$subslice(s, 0, i$1);
				_i$2 = 0;
				while (_i$2 < _ref$2.length) {
					name = (_slice$8 = _ref$2, _index$8 = _i$2, (_index$8 >= 0 && _index$8 < _slice$8.length) ? _slice$8.array[_slice$8.offset + _index$8] : go$throwRuntimeError("index out of range"));
					newCmds = appendCmd(newCmds, newIdentCmd(name, pos));
					_i$2++;
				}
				s = go$subslice(s, (i$1 + 1 >> 0));
			}
			newCmds = appendCmd(newCmds, id$1);
			_i$1++;
		}
		_ref$3 = s;
		_i$3 = 0;
		while (_i$3 < _ref$3.length) {
			name$1 = (_slice$9 = _ref$3, _index$9 = _i$3, (_index$9 >= 0 && _index$9 < _slice$9.length) ? _slice$9.array[_slice$9.offset + _index$9] : go$throwRuntimeError("index out of range"));
			newCmds = appendCmd(newCmds, newIdentCmd(name$1, (new parse.Pos(p.Pos)).Position()));
			_i$3++;
		}
		p.Cmds = newCmds;
	};
	appendCmd = function(cmds, cmd) {
		var n, _tuple, x, _slice, _index, _slice$1, _index$1, last, ok, _tuple$1, x$1, _slice$2, _index$2, next, _entry, _entry$1;
		n = cmds.length;
		if (!((n === 0))) {
			_tuple = (x = (_slice = (_slice$1 = cmds, _index$1 = (n - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), (x !== null && x.constructor === (go$ptrType(parse.IdentifierNode)) ? [x.go$val, true] : [(go$ptrType(parse.IdentifierNode)).nil, false])); last = _tuple[0]; ok = _tuple[1];
			_tuple$1 = (x$1 = (_slice$2 = cmd.Args, _index$2 = 0, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")), (x$1 !== null && x$1.constructor === (go$ptrType(parse.IdentifierNode)) ? [x$1.go$val, true] : [(go$ptrType(parse.IdentifierNode)).nil, false])); next = _tuple$1[0];
			if (ok && (_entry = (_entry$1 = redundantFuncs[last.Ident], _entry$1 !== undefined ? _entry$1.v : false)[next.Ident], _entry !== undefined ? _entry.v : false)) {
				return cmds;
			}
		}
		return go$append(cmds, cmd);
	};
	indexOfStr = function(s, strs, eq) {
		var _ref, _i, _slice, _index, t, i;
		_ref = strs;
		_i = 0;
		while (_i < _ref.length) {
			t = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			i = _i;
			if (eq(s, t)) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	escFnsEq = function(a, b) {
		var _entry, e, _entry$1, e$1;
		e = (_entry = equivEscapers[a], _entry !== undefined ? _entry.v : "");
		if (!(e === "")) {
			a = e;
		}
		e$1 = (_entry$1 = equivEscapers[b], _entry$1 !== undefined ? _entry$1.v : "");
		if (!(e$1 === "")) {
			b = e$1;
		}
		return a === b;
	};
	newIdentCmd = function(identifier, pos) {
		return new parse.CommandNode.Ptr(4, 0, new (go$sliceType(parse.Node))([parse.NewIdentifier(identifier).SetPos(pos)]));
	};
	nudge = function(c) {
		var _ref, _tuple, _tuple$1, _struct;
		_ref = c.state;
		if (_ref === 1) {
			c.state = 2;
		} else if (_ref === 4) {
			_tuple = [attrStartStates[c.attr], 3, 0]; c.state = _tuple[0]; c.delim = _tuple[1]; c.attr = _tuple[2];
		} else if (_ref === 3) {
			_tuple$1 = [2, 0]; c.state = _tuple$1[0]; c.attr = _tuple$1[1];
		}
		return (_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err));
	};
	join = function(a, b, line, nodeName) {
		var _struct, _struct$1, _struct$2, _struct$3, _struct$4, c, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, _struct$10, _struct$11, _struct$12, _struct$13, _tuple, c$1, d, _struct$14, _struct$15, _struct$16, _struct$17, _struct$18, e, _struct$19;
		if (a.state === 23) {
			return (_struct = a, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err));
		}
		if (b.state === 23) {
			return (_struct$1 = b, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err));
		}
		if (a.eq((_struct$2 = b, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)))) {
			return (_struct$3 = a, new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err));
		}
		c = (_struct$4 = a, new context.Ptr(_struct$4.state, _struct$4.delim, _struct$4.urlPart, _struct$4.jsCtx, _struct$4.attr, _struct$4.element, _struct$4.err));
		c.urlPart = b.urlPart;
		if (c.eq((_struct$5 = b, new context.Ptr(_struct$5.state, _struct$5.delim, _struct$5.urlPart, _struct$5.jsCtx, _struct$5.attr, _struct$5.element, _struct$5.err)))) {
			c.urlPart = 3;
			return (_struct$6 = c, new context.Ptr(_struct$6.state, _struct$6.delim, _struct$6.urlPart, _struct$6.jsCtx, _struct$6.attr, _struct$6.element, _struct$6.err));
		}
		c = (_struct$7 = a, new context.Ptr(_struct$7.state, _struct$7.delim, _struct$7.urlPart, _struct$7.jsCtx, _struct$7.attr, _struct$7.element, _struct$7.err));
		c.jsCtx = b.jsCtx;
		if (c.eq((_struct$8 = b, new context.Ptr(_struct$8.state, _struct$8.delim, _struct$8.urlPart, _struct$8.jsCtx, _struct$8.attr, _struct$8.element, _struct$8.err)))) {
			c.jsCtx = 2;
			return (_struct$9 = c, new context.Ptr(_struct$9.state, _struct$9.delim, _struct$9.urlPart, _struct$9.jsCtx, _struct$9.attr, _struct$9.element, _struct$9.err));
		}
		_tuple = [(_struct$11 = nudge((_struct$10 = a, new context.Ptr(_struct$10.state, _struct$10.delim, _struct$10.urlPart, _struct$10.jsCtx, _struct$10.attr, _struct$10.element, _struct$10.err))), new context.Ptr(_struct$11.state, _struct$11.delim, _struct$11.urlPart, _struct$11.jsCtx, _struct$11.attr, _struct$11.element, _struct$11.err)), (_struct$13 = nudge((_struct$12 = b, new context.Ptr(_struct$12.state, _struct$12.delim, _struct$12.urlPart, _struct$12.jsCtx, _struct$12.attr, _struct$12.element, _struct$12.err))), new context.Ptr(_struct$13.state, _struct$13.delim, _struct$13.urlPart, _struct$13.jsCtx, _struct$13.attr, _struct$13.element, _struct$13.err))]; c$1 = _tuple[0]; d = _tuple[1];
		if (!(c$1.eq((_struct$14 = a, new context.Ptr(_struct$14.state, _struct$14.delim, _struct$14.urlPart, _struct$14.jsCtx, _struct$14.attr, _struct$14.element, _struct$14.err))) && d.eq((_struct$15 = b, new context.Ptr(_struct$15.state, _struct$15.delim, _struct$15.urlPart, _struct$15.jsCtx, _struct$15.attr, _struct$15.element, _struct$15.err))))) {
			e = (_struct$18 = join((_struct$16 = c$1, new context.Ptr(_struct$16.state, _struct$16.delim, _struct$16.urlPart, _struct$16.jsCtx, _struct$16.attr, _struct$16.element, _struct$16.err)), (_struct$17 = d, new context.Ptr(_struct$17.state, _struct$17.delim, _struct$17.urlPart, _struct$17.jsCtx, _struct$17.attr, _struct$17.element, _struct$17.err)), line, nodeName), new context.Ptr(_struct$18.state, _struct$18.delim, _struct$18.urlPart, _struct$18.jsCtx, _struct$18.attr, _struct$18.element, _struct$18.err));
			if (!((e.state === 23))) {
				return (_struct$19 = e, new context.Ptr(_struct$19.state, _struct$19.delim, _struct$19.urlPart, _struct$19.jsCtx, _struct$19.attr, _struct$19.element, _struct$19.err));
			}
		}
		return new context.Ptr(23, 0, 0, 0, 0, 0, errorf(3, line, "{{%s}} branches end in different contexts: %v, %v", new (go$sliceType(go$emptyInterface))([new Go$String(nodeName), new a.constructor.Struct(a), new b.constructor.Struct(b)])));
	};
	escaper.Ptr.prototype.escapeBranch = function(c, n, nodeName) {
		var e, _struct, _struct$1, c0, _tuple, _struct$2, _struct$3, c1, _struct$4, _struct$5, _struct$6, _struct$7, _struct$8, _struct$9, c1$1, _struct$10, _struct$11, _struct$12;
		e = this;
		c0 = (_struct$1 = e.escapeList((_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), n.List), new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err));
		if (nodeName === "range" && !((c0.state === 23))) {
			_tuple = e.escapeListConditionally((_struct$2 = c0, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), n.List, go$throwNilPointerError); c1 = (_struct$3 = _tuple[0], new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err));
			c0 = (_struct$6 = join((_struct$4 = c0, new context.Ptr(_struct$4.state, _struct$4.delim, _struct$4.urlPart, _struct$4.jsCtx, _struct$4.attr, _struct$4.element, _struct$4.err)), (_struct$5 = c1, new context.Ptr(_struct$5.state, _struct$5.delim, _struct$5.urlPart, _struct$5.jsCtx, _struct$5.attr, _struct$5.element, _struct$5.err)), n.Line, nodeName), new context.Ptr(_struct$6.state, _struct$6.delim, _struct$6.urlPart, _struct$6.jsCtx, _struct$6.attr, _struct$6.element, _struct$6.err));
			if (c0.state === 23) {
				c0.err.Line = n.Line;
				c0.err.Description = "on range loop re-entry: " + c0.err.Description;
				return (_struct$7 = c0, new context.Ptr(_struct$7.state, _struct$7.delim, _struct$7.urlPart, _struct$7.jsCtx, _struct$7.attr, _struct$7.element, _struct$7.err));
			}
		}
		c1$1 = (_struct$9 = e.escapeList((_struct$8 = c, new context.Ptr(_struct$8.state, _struct$8.delim, _struct$8.urlPart, _struct$8.jsCtx, _struct$8.attr, _struct$8.element, _struct$8.err)), n.ElseList), new context.Ptr(_struct$9.state, _struct$9.delim, _struct$9.urlPart, _struct$9.jsCtx, _struct$9.attr, _struct$9.element, _struct$9.err));
		return (_struct$12 = join((_struct$10 = c0, new context.Ptr(_struct$10.state, _struct$10.delim, _struct$10.urlPart, _struct$10.jsCtx, _struct$10.attr, _struct$10.element, _struct$10.err)), (_struct$11 = c1$1, new context.Ptr(_struct$11.state, _struct$11.delim, _struct$11.urlPart, _struct$11.jsCtx, _struct$11.attr, _struct$11.element, _struct$11.err)), n.Line, nodeName), new context.Ptr(_struct$12.state, _struct$12.delim, _struct$12.urlPart, _struct$12.jsCtx, _struct$12.attr, _struct$12.element, _struct$12.err));
	};
	escaper.prototype.escapeBranch = function(c, n, nodeName) { return this.go$val.escapeBranch(c, n, nodeName); };
	escaper.Ptr.prototype.escapeList = function(c, n) {
		var e, _struct, _ref, _i, _slice, _index, m, _struct$1, _struct$2, _struct$3;
		e = this;
		if (n === (go$ptrType(parse.ListNode)).nil) {
			return (_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err));
		}
		_ref = n.Nodes;
		_i = 0;
		while (_i < _ref.length) {
			m = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			c = (_struct$2 = e.escape((_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), m), new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err));
			_i++;
		}
		return (_struct$3 = c, new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err));
	};
	escaper.prototype.escapeList = function(c, n) { return this.go$val.escapeList(c, n); };
	escaper.Ptr.prototype.escapeListConditionally = function(c, n, filter) {
		var e, e1, _ref, _i, _keys, _entry, v, k, _struct, _key, _struct$1, _struct$2, _struct$3, ok, _ref$1, _i$1, _keys$1, _entry$1, v$1, k$1, _struct$4, _key$1, _ref$2, _i$2, _keys$2, _entry$2, v$2, k$2, _key$2, _ref$3, _i$3, _keys$3, _entry$3, v$3, k$3, _key$3, _ref$4, _i$4, _keys$4, _entry$4, v$4, k$4, _ref$5, _i$5, _keys$5, _entry$5, v$5, k$5, _ref$6, _i$6, _keys$6, _entry$6, v$6, k$6, _struct$5;
		e = this;
		e1 = newEscaper(e.tmpl);
		_ref = e.output;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			v = _entry.v;
			k = _entry.k;
			_key = k; (e1.output || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: (_struct = v, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)) };
			_i++;
		}
		c = (_struct$2 = e1.escapeList((_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), n), new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err));
		ok = !(filter === go$throwNilPointerError) && filter(e1, (_struct$3 = c, new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err)));
		if (ok) {
			_ref$1 = e1.output;
			_i$1 = 0;
			_keys$1 = go$keys(_ref$1);
			while (_i$1 < _keys$1.length) {
				_entry$1 = _ref$1[_keys$1[_i$1]];
				v$1 = _entry$1.v;
				k$1 = _entry$1.k;
				_key$1 = k$1; (e.output || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: (_struct$4 = v$1, new context.Ptr(_struct$4.state, _struct$4.delim, _struct$4.urlPart, _struct$4.jsCtx, _struct$4.attr, _struct$4.element, _struct$4.err)) };
				_i$1++;
			}
			_ref$2 = e1.derived;
			_i$2 = 0;
			_keys$2 = go$keys(_ref$2);
			while (_i$2 < _keys$2.length) {
				_entry$2 = _ref$2[_keys$2[_i$2]];
				v$2 = _entry$2.v;
				k$2 = _entry$2.k;
				_key$2 = k$2; (e.derived || go$throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: v$2 };
				_i$2++;
			}
			_ref$3 = e1.called;
			_i$3 = 0;
			_keys$3 = go$keys(_ref$3);
			while (_i$3 < _keys$3.length) {
				_entry$3 = _ref$3[_keys$3[_i$3]];
				v$3 = _entry$3.v;
				k$3 = _entry$3.k;
				_key$3 = k$3; (e.called || go$throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: v$3 };
				_i$3++;
			}
			_ref$4 = e1.actionNodeEdits;
			_i$4 = 0;
			_keys$4 = go$keys(_ref$4);
			while (_i$4 < _keys$4.length) {
				_entry$4 = _ref$4[_keys$4[_i$4]];
				v$4 = _entry$4.v;
				k$4 = _entry$4.k;
				e.editActionNode(k$4, v$4);
				_i$4++;
			}
			_ref$5 = e1.templateNodeEdits;
			_i$5 = 0;
			_keys$5 = go$keys(_ref$5);
			while (_i$5 < _keys$5.length) {
				_entry$5 = _ref$5[_keys$5[_i$5]];
				v$5 = _entry$5.v;
				k$5 = _entry$5.k;
				e.editTemplateNode(k$5, v$5);
				_i$5++;
			}
			_ref$6 = e1.textNodeEdits;
			_i$6 = 0;
			_keys$6 = go$keys(_ref$6);
			while (_i$6 < _keys$6.length) {
				_entry$6 = _ref$6[_keys$6[_i$6]];
				v$6 = _entry$6.v;
				k$6 = _entry$6.k;
				e.editTextNode(k$6, v$6);
				_i$6++;
			}
		}
		return [(_struct$5 = c, new context.Ptr(_struct$5.state, _struct$5.delim, _struct$5.urlPart, _struct$5.jsCtx, _struct$5.attr, _struct$5.element, _struct$5.err)), ok];
	};
	escaper.prototype.escapeListConditionally = function(c, n, filter) { return this.go$val.escapeListConditionally(c, n, filter); };
	escaper.Ptr.prototype.escapeTemplate = function(c, n) {
		var e, _tuple, _struct, _struct$1, name, _struct$2;
		e = this;
		_tuple = e.escapeTree((_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), n.Name, n.Line); c = (_struct$1 = _tuple[0], new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)); name = _tuple[1];
		if (!(name === n.Name)) {
			e.editTemplateNode(n, name);
		}
		return (_struct$2 = c, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err));
	};
	escaper.prototype.escapeTemplate = function(c, n) { return this.go$val.escapeTemplate(c, n); };
	escaper.Ptr.prototype.escapeTree = function(c, name, line) {
		var e, dname, _key, _tuple, _entry, _struct, out, ok, _struct$1, t, _entry$1, dt, _key$1, _struct$2, _struct$3;
		e = this;
		dname = c.mangle(name);
		_key = dname; (e.called || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: true };
		_tuple = (_entry = e.output[dname], _entry !== undefined ? [_entry.v, true] : [new context.Ptr(), false]); out = (_struct = _tuple[0], new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)); ok = _tuple[1];
		if (ok) {
			return [(_struct$1 = out, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), dname];
		}
		t = e.template(name);
		if (t === (go$ptrType(template.Template)).nil) {
			if (!((_entry$1 = e.tmpl.nameSpace.set[name], _entry$1 !== undefined ? _entry$1.v : (go$ptrType(Template)).nil) === (go$ptrType(Template)).nil)) {
				return [new context.Ptr(23, 0, 0, 0, 0, 0, errorf(5, line, "%q is an incomplete or empty template", new (go$sliceType(go$emptyInterface))([new Go$String(name)]))), dname];
			}
			return [new context.Ptr(23, 0, 0, 0, 0, 0, errorf(5, line, "no such template %q", new (go$sliceType(go$emptyInterface))([new Go$String(name)]))), dname];
		}
		if (!(dname === name)) {
			dt = e.template(dname);
			if (dt === (go$ptrType(template.Template)).nil) {
				dt = template.New(dname);
				dt.Tree = new parse.Tree.Ptr(dname, "", t.Tree.Root.CopyList(), "", (go$sliceType((go$mapType(Go$String, go$emptyInterface)))).nil, (go$ptrType(parse.lexer)).nil, go$makeNativeArray("Struct", 3, function() { return new parse.item.Ptr(); }), 0, (go$sliceType(Go$String)).nil);
				_key$1 = dname; (e.derived || go$throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: dt };
			}
			t = dt;
		}
		return [(_struct$3 = e.computeOutCtx((_struct$2 = c, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), t), new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err)), dname];
	};
	escaper.prototype.escapeTree = function(c, name, line) { return this.go$val.escapeTree(c, name, line); };
	escaper.Ptr.prototype.computeOutCtx = function(c, t) {
		var e, _tuple, _struct, _struct$1, c1, ok, _tuple$1, _struct$2, _struct$3, c2, ok2, _struct$4, _tuple$2, _struct$5;
		e = this;
		_tuple = e.escapeTemplateBody((_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), t); c1 = (_struct$1 = _tuple[0], new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)); ok = _tuple[1];
		if (!ok) {
			_tuple$1 = e.escapeTemplateBody((_struct$2 = c1, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), t); c2 = (_struct$3 = _tuple$1[0], new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err)); ok2 = _tuple$1[1];
			if (ok2) {
				_tuple$2 = [(_struct$4 = c2, new context.Ptr(_struct$4.state, _struct$4.delim, _struct$4.urlPart, _struct$4.jsCtx, _struct$4.attr, _struct$4.element, _struct$4.err)), true]; c1 = _tuple$2[0]; ok = _tuple$2[1];
			}
		}
		if (!ok && !((c1.state === 23))) {
			return new context.Ptr(23, 0, 0, 0, 0, 0, errorf(6, 0, "cannot compute output context for template %s", new (go$sliceType(go$emptyInterface))([new Go$String(t.Name())])));
		}
		return (_struct$5 = c1, new context.Ptr(_struct$5.state, _struct$5.delim, _struct$5.urlPart, _struct$5.jsCtx, _struct$5.attr, _struct$5.element, _struct$5.err));
	};
	escaper.prototype.computeOutCtx = function(c, t) { return this.go$val.computeOutCtx(c, t); };
	escaper.Ptr.prototype.escapeTemplateBody = function(c, t) {
		var e, filter, _struct, _key, _struct$1;
		e = this;
		filter = (function(e1, c1) {
			var _entry, _struct;
			if (c1.state === 23) {
				return false;
			}
			if (!(_entry = e1.called[t.Name()], _entry !== undefined ? _entry.v : false)) {
				return true;
			}
			return c.eq((_struct = c1, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)));
		});
		_key = t.Name(); (e.output || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: (_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)) };
		return e.escapeListConditionally((_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), t.Tree.Root, filter);
	};
	escaper.prototype.escapeTemplateBody = function(c, t) { return this.go$val.escapeTemplateBody(c, t); };
	escaper.Ptr.prototype.escapeText = function(c, n) {
		var e, _tuple, s, written, i, b, _tuple$1, _struct, _struct$1, c1, nread, i1, end, j, _slice, _index, j$1, _slice$1, _index$1, _ref, cs, _struct$2, _tuple$2, _struct$3;
		e = this;
		_tuple = [n.Text, 0, 0, new bytes.Buffer.Ptr()]; s = _tuple[0]; written = _tuple[1]; i = _tuple[2]; b = _tuple[3];
		while (!((i === s.length))) {
			_tuple$1 = contextAfterText((_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), go$subslice(s, i)); c1 = (_struct$1 = _tuple$1[0], new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)); nread = _tuple$1[1];
			i1 = i + nread >> 0;
			if ((c.state === 0) || (c.state === 6)) {
				end = i1;
				if (!((c1.state === c.state))) {
					j = end - 1 >> 0;
					while (j >= i) {
						if ((_slice = s, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 60) {
							end = j;
							break;
						}
						j = j - 1 >> 0;
					}
				}
				j$1 = i;
				while (j$1 < end) {
					if (((_slice$1 = s, _index$1 = j$1, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 60) && !bytes.HasPrefix(bytes.ToUpper(go$subslice(s, j$1)), doctypeBytes)) {
						b.Write(go$subslice(s, written, j$1));
						b.WriteString("&lt;");
						written = j$1 + 1 >> 0;
					}
					j$1 = j$1 + 1 >> 0;
				}
			} else if (isComment(c.state) && (c.delim === 0)) {
				_ref = c.state;
				if (_ref === 13) {
					if (!((bytes.IndexAny(go$subslice(s, written, i1), "\n\r\xE2\x80\xA8\xE2\x80\xA9") === -1))) {
						b.WriteByte(10);
					} else {
						b.WriteByte(32);
					}
				} else if (_ref === 21) {
					b.WriteByte(32);
				}
				written = i1;
			}
			if (!((c.state === c1.state)) && isComment(c1.state) && (c1.delim === 0)) {
				cs = i1 - 2 >> 0;
				if (c1.state === 5) {
					cs = cs - 2 >> 0;
				}
				b.Write(go$subslice(s, written, cs));
				written = i1;
			}
			if ((i === i1) && (c.state === c1.state)) {
				throw go$panic(new Go$String(fmt.Sprintf("infinite loop from %v to %v on %q..%q", new (go$sliceType(go$emptyInterface))([new c.constructor.Struct(c), new c1.constructor.Struct(c1), go$subslice(s, 0, i), go$subslice(s, i)]))));
			}
			_tuple$2 = [(_struct$2 = c1, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), i1]; c = _tuple$2[0]; i = _tuple$2[1];
		}
		if (!((written === 0)) && !((c.state === 23))) {
			if (!isComment(c.state) || !((c.delim === 0))) {
				b.Write(go$subslice(n.Text, written));
			}
			e.editTextNode(n, b.Bytes());
		}
		return (_struct$3 = c, new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err));
	};
	escaper.prototype.escapeText = function(c, n) { return this.go$val.escapeText(c, n); };
	contextAfterText = function(c, s) {
		var _tuple, _struct, _struct$1, c1, i, _struct$2, _struct$3, i$1, j, u, _tuple$1, _struct$4, _struct$5, c1$1, i1, _struct$6, _tuple$2, _struct$7;
		if (c.delim === 0) {
			_tuple = tSpecialTagEnd((_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s); c1 = (_struct$1 = _tuple[0], new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)); i = _tuple[1];
			if (i === 0) {
				return [(_struct$2 = c1, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), 0];
			}
			return transitionFunc[c.state]((_struct$3 = c, new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err)), go$subslice(s, 0, i));
		}
		i$1 = bytes.IndexAny(s, delimEnds[c.delim]);
		if (i$1 === -1) {
			i$1 = s.length;
		}
		if (c.delim === 3) {
			j = bytes.IndexAny(go$subslice(s, 0, i$1), "\"'<=`");
			if (j >= 0) {
				return [new context.Ptr(23, 0, 0, 0, 0, 0, errorf(2, 0, "%q in unquoted attr: %q", new (go$sliceType(go$emptyInterface))([go$subslice(s, j, (j + 1 >> 0)), go$subslice(s, 0, i$1)]))), s.length];
			}
		}
		if (i$1 === s.length) {
			u = new (go$sliceType(Go$Uint8))(go$stringToBytes(html.UnescapeString(go$bytesToString(s))));
			while (!((u.length === 0))) {
				_tuple$1 = transitionFunc[c.state]((_struct$4 = c, new context.Ptr(_struct$4.state, _struct$4.delim, _struct$4.urlPart, _struct$4.jsCtx, _struct$4.attr, _struct$4.element, _struct$4.err)), u); c1$1 = (_struct$5 = _tuple$1[0], new context.Ptr(_struct$5.state, _struct$5.delim, _struct$5.urlPart, _struct$5.jsCtx, _struct$5.attr, _struct$5.element, _struct$5.err)); i1 = _tuple$1[1];
				_tuple$2 = [(_struct$6 = c1$1, new context.Ptr(_struct$6.state, _struct$6.delim, _struct$6.urlPart, _struct$6.jsCtx, _struct$6.attr, _struct$6.element, _struct$6.err)), go$subslice(u, i1)]; c = _tuple$2[0]; u = _tuple$2[1];
			}
			return [(_struct$7 = c, new context.Ptr(_struct$7.state, _struct$7.delim, _struct$7.urlPart, _struct$7.jsCtx, _struct$7.attr, _struct$7.element, _struct$7.err)), s.length];
		}
		if (!((c.delim === 3))) {
			i$1 = i$1 + 1 >> 0;
		}
		return [new context.Ptr(1, 0, 0, 0, 0, c.element, (go$ptrType(Error)).nil), i$1];
	};
	escaper.Ptr.prototype.editActionNode = function(n, cmds) {
		var e, _tuple, _entry, ok, _key;
		e = this;
		_tuple = (_entry = e.actionNodeEdits[n.go$key()], _entry !== undefined ? [_entry.v, true] : [(go$sliceType(Go$String)).nil, false]); ok = _tuple[1];
		if (ok) {
			throw go$panic(new Go$String(fmt.Sprintf("node %s shared between templates", new (go$sliceType(go$emptyInterface))([n]))));
		}
		_key = n; (e.actionNodeEdits || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: cmds };
	};
	escaper.prototype.editActionNode = function(n, cmds) { return this.go$val.editActionNode(n, cmds); };
	escaper.Ptr.prototype.editTemplateNode = function(n, callee) {
		var e, _tuple, _entry, ok, _key;
		e = this;
		_tuple = (_entry = e.templateNodeEdits[n.go$key()], _entry !== undefined ? [_entry.v, true] : ["", false]); ok = _tuple[1];
		if (ok) {
			throw go$panic(new Go$String(fmt.Sprintf("node %s shared between templates", new (go$sliceType(go$emptyInterface))([n]))));
		}
		_key = n; (e.templateNodeEdits || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: callee };
	};
	escaper.prototype.editTemplateNode = function(n, callee) { return this.go$val.editTemplateNode(n, callee); };
	escaper.Ptr.prototype.editTextNode = function(n, text) {
		var e, _tuple, _entry, ok, _key;
		e = this;
		_tuple = (_entry = e.textNodeEdits[n.go$key()], _entry !== undefined ? [_entry.v, true] : [(go$sliceType(Go$Uint8)).nil, false]); ok = _tuple[1];
		if (ok) {
			throw go$panic(new Go$String(fmt.Sprintf("node %s shared between templates", new (go$sliceType(go$emptyInterface))([n]))));
		}
		_key = n; (e.textNodeEdits || go$throwRuntimeError("assignment to entry in nil map"))[_key.go$key()] = { k: _key, v: text };
	};
	escaper.prototype.editTextNode = function(n, text) { return this.go$val.editTextNode(n, text); };
	escaper.Ptr.prototype.commit = function() {
		var e, _ref, _i, _keys, _entry, name, _ref$1, _i$1, _keys$1, _entry$1, t, _tuple, err, _ref$2, _i$2, _keys$2, _entry$2, s, n, _ref$3, _i$3, _keys$3, _entry$3, name$1, n$1, _ref$4, _i$4, _keys$4, _entry$4, s$1, n$2;
		e = this;
		_ref = e.output;
		_i = 0;
		_keys = go$keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			name = _entry.k;
			e.template(name).Funcs(funcMap);
			_i++;
		}
		_ref$1 = e.derived;
		_i$1 = 0;
		_keys$1 = go$keys(_ref$1);
		while (_i$1 < _keys$1.length) {
			_entry$1 = _ref$1[_keys$1[_i$1]];
			t = _entry$1.v;
			_tuple = e.tmpl.text.AddParseTree(t.Name(), t.Tree); err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				throw go$panic(new Go$String("error adding derived template"));
			}
			_i$1++;
		}
		_ref$2 = e.actionNodeEdits;
		_i$2 = 0;
		_keys$2 = go$keys(_ref$2);
		while (_i$2 < _keys$2.length) {
			_entry$2 = _ref$2[_keys$2[_i$2]];
			s = _entry$2.v;
			n = _entry$2.k;
			ensurePipelineContains(n.Pipe, s);
			_i$2++;
		}
		_ref$3 = e.templateNodeEdits;
		_i$3 = 0;
		_keys$3 = go$keys(_ref$3);
		while (_i$3 < _keys$3.length) {
			_entry$3 = _ref$3[_keys$3[_i$3]];
			name$1 = _entry$3.v;
			n$1 = _entry$3.k;
			n$1.Name = name$1;
			_i$3++;
		}
		_ref$4 = e.textNodeEdits;
		_i$4 = 0;
		_keys$4 = go$keys(_ref$4);
		while (_i$4 < _keys$4.length) {
			_entry$4 = _ref$4[_keys$4[_i$4]];
			s$1 = _entry$4.v;
			n$2 = _entry$4.k;
			n$2.Text = s$1;
			_i$4++;
		}
	};
	escaper.prototype.commit = function() { return this.go$val.commit(); };
	escaper.Ptr.prototype.template = function(name) {
		var e, t, _entry;
		e = this;
		t = e.tmpl.text.Lookup(name);
		if (t === (go$ptrType(template.Template)).nil) {
			t = (_entry = e.derived[name], _entry !== undefined ? _entry.v : (go$ptrType(template.Template)).nil);
		}
		return t;
	};
	escaper.prototype.template = function(name) { return this.go$val.template(name); };
	htmlNospaceEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 2) {
			return htmlReplacer(stripTags(s), htmlNospaceNormReplacementTable, false);
		}
		return htmlReplacer(s, htmlNospaceReplacementTable, false);
	};
	attrEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 2) {
			return htmlReplacer(stripTags(s), htmlNormReplacementTable, true);
		}
		return htmlReplacer(s, htmlReplacementTable, true);
	};
	rcdataEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 2) {
			return htmlReplacer(s, htmlNormReplacementTable, true);
		}
		return htmlReplacer(s, htmlReplacementTable, true);
	};
	htmlEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 2) {
			return s;
		}
		return htmlReplacer(s, htmlReplacementTable, true);
	};
	htmlReplacer = function(s, replacementTable, badRunes) {
		var _tuple, written, b, _ref, _i, _rune, r, i, _slice, _index, repl;
		_tuple = [0, new bytes.Buffer.Ptr()]; written = _tuple[0]; b = _tuple[1];
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			r = _rune[0];
			i = _i;
			if ((r >> 0) < replacementTable.length) {
				repl = (_slice = replacementTable, _index = r, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				if (!((repl.length === 0))) {
					b.WriteString(s.substring(written, i));
					b.WriteString(repl);
					written = i + utf8.RuneLen(r) >> 0;
				}
			} else if (badRunes) {
			} else if (64976 <= r && r <= 65007 || 65520 <= r && r <= 65535) {
				fmt.Fprintf(b, "%s&#x%x;", new (go$sliceType(go$emptyInterface))([new Go$String(s.substring(written, i)), new Go$Int32(r)]));
				written = i + utf8.RuneLen(r) >> 0;
			}
			_i += _rune[1];
		}
		if (written === 0) {
			return s;
		}
		b.WriteString(s.substring(written));
		return b.String();
	};
	stripTags = function(html$1) {
		var b, _tuple, s, c, i, allText, st, _tuple$1, _struct, _struct$1, d, nread, i1, j, j1, _slice, _index, _struct$2, _tuple$2, i1$1, _tuple$3;
		b = new bytes.Buffer.Ptr();
		_tuple = [new (go$sliceType(Go$Uint8))(go$stringToBytes(html$1)), new context.Ptr(0, 0, 0, 0, 0, 0, (go$ptrType(Error)).nil), 0, true]; s = _tuple[0]; c = _tuple[1]; i = _tuple[2]; allText = _tuple[3];
		while (!((i === s.length))) {
			if (c.delim === 0) {
				st = c.state;
				if (!((c.element === 0)) && !isInTag(st)) {
					st = 6;
				}
				_tuple$1 = transitionFunc[st]((_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), go$subslice(s, i)); d = (_struct$1 = _tuple$1[0], new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)); nread = _tuple$1[1];
				i1 = i + nread >> 0;
				if ((c.state === 0) || (c.state === 6)) {
					j = i1;
					if (!((d.state === c.state))) {
						j1 = j - 1 >> 0;
						while (j1 >= i) {
							if ((_slice = s, _index = j1, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 60) {
								j = j1;
								break;
							}
							j1 = j1 - 1 >> 0;
						}
					}
					b.Write(go$subslice(s, i, j));
				} else {
					allText = false;
				}
				_tuple$2 = [(_struct$2 = d, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), i1]; c = _tuple$2[0]; i = _tuple$2[1];
				continue;
			}
			i1$1 = i + bytes.IndexAny(go$subslice(s, i), delimEnds[c.delim]) >> 0;
			if (i1$1 < i) {
				break;
			}
			if (!((c.delim === 3))) {
				i1$1 = i1$1 + 1 >> 0;
			}
			_tuple$3 = [new context.Ptr(1, 0, 0, 0, 0, c.element, (go$ptrType(Error)).nil), i1$1]; c = _tuple$3[0]; i = _tuple$3[1];
		}
		if (allText) {
			return html$1;
		} else if ((c.state === 0) || (c.state === 6)) {
			b.Write(go$subslice(s, i));
		}
		return b.String();
	};
	htmlNameFilter = function(args) {
		var _tuple, s, t, t$1, _ref, _i, _rune, r;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 3) {
			return s;
		}
		if (s.length === 0) {
			return "ZgotmplZ";
		}
		s = strings.ToLower(s);
		t$1 = attrType(s);
		if (!((t$1 === 0))) {
			return "ZgotmplZ";
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			r = _rune[0];
			if (48 <= r && r <= 57) {
			} else if (97 <= r && r <= 122) {
			} else {
				return "ZgotmplZ";
			}
			_i += _rune[1];
		}
		return s;
	};
	commentEscaper = function(args) {
		return "";
	};
	nextJSCtx = function(s, preceding) {
		var _slice, _index, _tuple, c, n, _ref, start, _slice$1, _index$1, _slice$2, _index$2, _slice$3, _index$3, j, _slice$4, _index$4, _entry;
		s = bytes.TrimRight(s, "\t\n\f\r \xE2\x80\xA8\xE2\x80\xA9");
		if (s.length === 0) {
			return preceding;
		}
		_tuple = [(_slice = s, _index = (s.length - 1 >> 0), (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), s.length]; c = _tuple[0]; n = _tuple[1];
		_ref = c;
		if (_ref === 43 || _ref === 45) {
			start = n - 1 >> 0;
			while (start > 0 && ((_slice$1 = s, _index$1 = (start - 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === c)) {
				start = start - 1 >> 0;
			}
			if ((((n - start >> 0)) & 1) === 1) {
				return 0;
			}
			return 1;
		} else if (_ref === 46) {
			if (!((n === 1)) && 48 <= (_slice$2 = s, _index$2 = (n - 2 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) && (_slice$3 = s, _index$3 = (n - 2 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range")) <= 57) {
				return 1;
			}
			return 0;
		} else if (_ref === 44 || _ref === 60 || _ref === 62 || _ref === 61 || _ref === 42 || _ref === 37 || _ref === 38 || _ref === 124 || _ref === 94 || _ref === 63) {
			return 0;
		} else if (_ref === 33 || _ref === 126) {
			return 0;
		} else if (_ref === 40 || _ref === 91) {
			return 0;
		} else if (_ref === 58 || _ref === 59 || _ref === 123) {
			return 0;
		} else if (_ref === 125) {
			return 0;
		} else {
			j = n;
			while (j > 0 && isJSIdentPart(((_slice$4 = s, _index$4 = (j - 1 >> 0), (_index$4 >= 0 && _index$4 < _slice$4.length) ? _slice$4.array[_slice$4.offset + _index$4] : go$throwRuntimeError("index out of range")) >> 0))) {
				j = j - 1 >> 0;
			}
			if ((_entry = regexpPrecederKeywords[go$bytesToString(go$subslice(s, j))], _entry !== undefined ? _entry.v : false)) {
				return 0;
			}
		}
		return 1;
	};
	indirectToJSONMarshaler = function(a) {
		var _struct, v, _struct$1;
		v = (_struct = reflect.ValueOf(a), new reflect.Value.Ptr(_struct.typ, _struct.val, _struct.flag));
		while (!v.Type().Implements(jsonMarshalType) && (v.Kind() === 22) && !v.IsNil()) {
			v = (_struct$1 = v.Elem(), new reflect.Value.Ptr(_struct$1.typ, _struct$1.val, _struct$1.flag));
		}
		return v.Interface();
	};
	jsValEscaper = function(args) {
		var a, _slice, _index, t, _ref, _type, _ref$1, _i, _slice$1, _index$1, arg, i, _slice$2, _index$2, _tuple, b, err, _tuple$1, first, _tuple$2, last, buf, pad, written, i$1, _tuple$3, rune, n, repl;
		a = null;
		if (args.length === 1) {
			a = indirectToJSONMarshaler((_slice = args, _index = 0, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")));
			_ref = a;
			_type = _ref !== null ? _ref.constructor : null;
			if (_type === JS) {
				t = _ref.go$val;
				return t;
			} else if (_type === JSStr) {
				t = _ref.go$val;
				return "\"" + t + "\"";
			} else if (json.Marshaler.implementedBy.indexOf(_type) !== -1) {
				t = _ref;
			} else if (fmt.Stringer.implementedBy.indexOf(_type) !== -1) {
				t = _ref;
				a = new Go$String(t.String());
			}
		} else {
			_ref$1 = args;
			_i = 0;
			while (_i < _ref$1.length) {
				arg = (_slice$1 = _ref$1, _index$1 = _i, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
				i = _i;
				_slice$2 = args; _index$2 = i;(_index$2 >= 0 && _index$2 < _slice$2.length) ? (_slice$2.array[_slice$2.offset + _index$2] = indirectToJSONMarshaler(arg)) : go$throwRuntimeError("index out of range");
				_i++;
			}
			a = new Go$String(fmt.Sprint(args));
		}
		_tuple = json.Marshal(a); b = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return fmt.Sprintf(" /* %s */null ", new (go$sliceType(go$emptyInterface))([new Go$String(strings.Replace(err.Error(), "*/", "* /", -1))]));
		}
		if (b.length === 0) {
			return " null ";
		}
		_tuple$1 = utf8.DecodeRune(b); first = _tuple$1[0];
		_tuple$2 = utf8.DecodeLastRune(b); last = _tuple$2[0];
		buf = new bytes.Buffer.Ptr();
		pad = isJSIdentPart(first) || isJSIdentPart(last);
		if (pad) {
			buf.WriteByte(32);
		}
		written = 0;
		i$1 = 0;
		while (i$1 < b.length) {
			_tuple$3 = utf8.DecodeRune(go$subslice(b, i$1)); rune = _tuple$3[0]; n = _tuple$3[1];
			repl = "";
			if (rune === 8232) {
				repl = "\\u2028";
			} else if (rune === 8233) {
				repl = "\\u2029";
			}
			if (!(repl === "")) {
				buf.Write(go$subslice(b, written, i$1));
				buf.WriteString(repl);
				written = i$1 + n >> 0;
			}
			i$1 = i$1 + (n) >> 0;
		}
		if (!((buf.Len() === 0))) {
			buf.Write(go$subslice(b, written));
			if (pad) {
				buf.WriteByte(32);
			}
			b = buf.Bytes();
		}
		return go$bytesToString(b);
	};
	jsStrEscaper = function(args) {
		var _tuple, s, t;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 5) {
			return replace(s, jsStrNormReplacementTable);
		}
		return replace(s, jsStrReplacementTable);
	};
	jsRegexpEscaper = function(args) {
		var _tuple, s;
		_tuple = stringify(args); s = _tuple[0];
		s = replace(s, jsRegexpReplacementTable);
		if (s === "") {
			return "(?:)";
		}
		return s;
	};
	replace = function(s, replacementTable) {
		var b, written, _ref, _i, _rune, r, i, repl, _slice, _index, _slice$1, _index$1;
		b = new bytes.Buffer.Ptr();
		written = 0;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = go$decodeRune(_ref, _i);
			r = _rune[0];
			i = _i;
			repl = "";
			if ((r >> 0) < replacementTable.length && !((_slice = replacementTable, _index = r, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === "")) {
				repl = (_slice$1 = replacementTable, _index$1 = r, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			} else if (r === 8232) {
				repl = "\\u2028";
			} else if (r === 8233) {
				repl = "\\u2029";
			} else {
				_i += _rune[1];
				continue;
			}
			b.WriteString(s.substring(written, i));
			b.WriteString(repl);
			written = i + utf8.RuneLen(r) >> 0;
			_i += _rune[1];
		}
		if (written === 0) {
			return s;
		}
		b.WriteString(s.substring(written));
		return b.String();
	};
	isJSIdentPart = function(r) {
		if (r === 36) {
			return true;
		} else if (48 <= r && r <= 57) {
			return true;
		} else if (65 <= r && r <= 90) {
			return true;
		} else if (r === 95) {
			return true;
		} else if (97 <= r && r <= 122) {
			return true;
		}
		return false;
	};
	Template.Ptr.prototype.Templates = function() {
		var t, ns, m, _ref, _i, _keys, _entry, v;
		var go$deferred = [];
		try {
			t = this;
			ns = t.nameSpace;
			ns.mu.Lock();
			go$deferred.push({ recv: ns.mu, method: "Unlock", args: [] });
			m = (go$sliceType((go$ptrType(Template)))).make(0, go$keys(ns.set).length, function() { return (go$ptrType(Template)).nil; });
			_ref = ns.set;
			_i = 0;
			_keys = go$keys(_ref);
			while (_i < _keys.length) {
				_entry = _ref[_keys[_i]];
				v = _entry.v;
				m = go$append(m, v);
				_i++;
			}
			return m;
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$sliceType((go$ptrType(Template)))).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Template.prototype.Templates = function() { return this.go$val.Templates(); };
	Template.Ptr.prototype.escape = function() {
		var t, err;
		var go$deferred = [];
		try {
			t = this;
			t.nameSpace.mu.Lock();
			go$deferred.push({ recv: t.nameSpace.mu, method: "Unlock", args: [] });
			if (!t.escaped) {
				err = escapeTemplates(t, new (go$sliceType(Go$String))([t.Name()]));
				if (!(go$interfaceIsEqual(err, null))) {
					return err;
				}
				t.escaped = true;
			}
			return null;
		} catch(go$err) {
			go$pushErr(go$err);
			return null;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Template.prototype.escape = function() { return this.go$val.escape(); };
	Template.Ptr.prototype.Execute = function(wr, data) {
		var t, err;
		t = this;
		err = t.escape();
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		return t.text.Execute(wr, data);
	};
	Template.prototype.Execute = function(wr, data) { return this.go$val.Execute(wr, data); };
	Template.Ptr.prototype.ExecuteTemplate = function(wr, name, data) {
		var t, _tuple, tmpl, err;
		t = this;
		_tuple = t.lookupAndEscapeTemplate(name); tmpl = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return err;
		}
		return tmpl.text.Execute(wr, data);
	};
	Template.prototype.ExecuteTemplate = function(wr, name, data) { return this.go$val.ExecuteTemplate(wr, name, data); };
	Template.Ptr.prototype.lookupAndEscapeTemplate = function(name) {
		var tmpl, err, t, _entry, _tuple, _tuple$1, _tuple$2;
		tmpl = (go$ptrType(Template)).nil;
		err = null;
		var go$deferred = [];
		try {
			t = this;
			t.nameSpace.mu.Lock();
			go$deferred.push({ recv: t.nameSpace.mu, method: "Unlock", args: [] });
			tmpl = (_entry = t.nameSpace.set[name], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil);
			if (tmpl === (go$ptrType(Template)).nil) {
				_tuple = [(go$ptrType(Template)).nil, fmt.Errorf("html/template: %q is undefined", new (go$sliceType(go$emptyInterface))([new Go$String(name)]))]; tmpl = _tuple[0]; err = _tuple[1];
				return [tmpl, err];
			}
			if (tmpl.text.Tree === (go$ptrType(parse.Tree)).nil || tmpl.text.Tree.Root === (go$ptrType(parse.ListNode)).nil) {
				_tuple$1 = [(go$ptrType(Template)).nil, fmt.Errorf("html/template: %q is an incomplete template", new (go$sliceType(go$emptyInterface))([new Go$String(name)]))]; tmpl = _tuple$1[0]; err = _tuple$1[1];
				return [tmpl, err];
			}
			if (t.text.Lookup(name) === (go$ptrType(template.Template)).nil) {
				throw go$panic(new Go$String("html/template internal error: template escaping out of sync"));
			}
			if (!(tmpl === (go$ptrType(Template)).nil) && !tmpl.escaped) {
				err = escapeTemplates(tmpl, new (go$sliceType(Go$String))([name]));
			}
			_tuple$2 = [tmpl, err]; tmpl = _tuple$2[0]; err = _tuple$2[1];
			return [tmpl, err];
		} catch(go$err) {
			go$pushErr(go$err);
		} finally {
			go$callDeferred(go$deferred);
			return [tmpl, err];
		}
	};
	Template.prototype.lookupAndEscapeTemplate = function(name) { return this.go$val.lookupAndEscapeTemplate(name); };
	Template.Ptr.prototype.Parse = function(src) {
		var t, _tuple, ret, err, _ref, _i, _slice, _index, v, name, _entry, tmpl;
		var go$deferred = [];
		try {
			t = this;
			t.nameSpace.mu.Lock();
			t.escaped = false;
			t.nameSpace.mu.Unlock();
			_tuple = t.text.Parse(src); ret = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(Template)).nil, err];
			}
			t.nameSpace.mu.Lock();
			go$deferred.push({ recv: t.nameSpace.mu, method: "Unlock", args: [] });
			_ref = ret.Templates();
			_i = 0;
			while (_i < _ref.length) {
				v = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				name = v.Name();
				tmpl = (_entry = t.nameSpace.set[name], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil);
				if (tmpl === (go$ptrType(Template)).nil) {
					tmpl = t.new$(name);
				}
				tmpl.escaped = false;
				tmpl.text = v;
				tmpl.Tree = v.Tree;
				_i++;
			}
			return [t, null];
		} catch(go$err) {
			go$pushErr(go$err);
			return [(go$ptrType(Template)).nil, null];
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Template.prototype.Parse = function(src) { return this.go$val.Parse(src); };
	Template.Ptr.prototype.AddParseTree = function(name, tree) {
		var t, _tuple, text, err, ret, _key;
		var go$deferred = [];
		try {
			t = this;
			t.nameSpace.mu.Lock();
			go$deferred.push({ recv: t.nameSpace.mu, method: "Unlock", args: [] });
			if (t.escaped) {
				return [(go$ptrType(Template)).nil, fmt.Errorf("html/template: cannot AddParseTree to %q after it has executed", new (go$sliceType(go$emptyInterface))([new Go$String(t.Name())]))];
			}
			_tuple = t.text.AddParseTree(name, tree); text = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(Template)).nil, err];
			}
			ret = new Template.Ptr(false, text, text.Tree, t.nameSpace);
			_key = name; (t.nameSpace.set || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: ret };
			return [ret, null];
		} catch(go$err) {
			go$pushErr(go$err);
			return [(go$ptrType(Template)).nil, null];
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Template.prototype.AddParseTree = function(name, tree) { return this.go$val.AddParseTree(name, tree); };
	Template.Ptr.prototype.Clone = function() {
		var t, _tuple, textClone, err, ret, _ref, _i, _slice, _index, x, name, _entry, src, _key;
		var go$deferred = [];
		try {
			t = this;
			t.nameSpace.mu.Lock();
			go$deferred.push({ recv: t.nameSpace.mu, method: "Unlock", args: [] });
			if (t.escaped) {
				return [(go$ptrType(Template)).nil, fmt.Errorf("html/template: cannot Clone %q after it has executed", new (go$sliceType(go$emptyInterface))([new Go$String(t.Name())]))];
			}
			_tuple = t.text.Clone(); textClone = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(Template)).nil, err];
			}
			ret = new Template.Ptr(false, textClone, textClone.Tree, new nameSpace.Ptr(new sync.Mutex.Ptr(), new Go$Map()));
			_ref = textClone.Templates();
			_i = 0;
			while (_i < _ref.length) {
				x = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
				name = x.Name();
				src = (_entry = t.nameSpace.set[name], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil);
				if (src === (go$ptrType(Template)).nil || src.escaped) {
					return [(go$ptrType(Template)).nil, fmt.Errorf("html/template: cannot Clone %q after it has executed", new (go$sliceType(go$emptyInterface))([new Go$String(t.Name())]))];
				}
				x.Tree = x.Tree.Copy();
				_key = name; (ret.nameSpace.set || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: new Template.Ptr(false, x, x.Tree, ret.nameSpace) };
				_i++;
			}
			return [ret, null];
		} catch(go$err) {
			go$pushErr(go$err);
			return [(go$ptrType(Template)).nil, null];
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Template.prototype.Clone = function() { return this.go$val.Clone(); };
	New = go$pkg.New = function(name) {
		var tmpl, _key;
		tmpl = new Template.Ptr(false, template.New(name), (go$ptrType(parse.Tree)).nil, new nameSpace.Ptr(new sync.Mutex.Ptr(), new Go$Map()));
		_key = name; (tmpl.nameSpace.set || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: tmpl };
		return tmpl;
	};
	Template.Ptr.prototype.New = function(name) {
		var t;
		var go$deferred = [];
		try {
			t = this;
			t.nameSpace.mu.Lock();
			go$deferred.push({ recv: t.nameSpace.mu, method: "Unlock", args: [] });
			return t.new$(name);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(Template)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Template.prototype.New = function(name) { return this.go$val.New(name); };
	Template.Ptr.prototype.new$ = function(name) {
		var t, tmpl, _key;
		t = this;
		tmpl = new Template.Ptr(false, t.text.New(name), (go$ptrType(parse.Tree)).nil, t.nameSpace);
		_key = name; (tmpl.nameSpace.set || go$throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: tmpl };
		return tmpl;
	};
	Template.prototype.new$ = function(name) { return this.go$val.new$(name); };
	Template.Ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.text.Name();
	};
	Template.prototype.Name = function() { return this.go$val.Name(); };
	Template.Ptr.prototype.Funcs = function(funcMap$1) {
		var t;
		t = this;
		t.text.Funcs(funcMap$1);
		return t;
	};
	Template.prototype.Funcs = function(funcMap$1) { return this.go$val.Funcs(funcMap$1); };
	Template.Ptr.prototype.Delims = function(left, right) {
		var t;
		t = this;
		t.text.Delims(left, right);
		return t;
	};
	Template.prototype.Delims = function(left, right) { return this.go$val.Delims(left, right); };
	Template.Ptr.prototype.Lookup = function(name) {
		var t, _entry;
		var go$deferred = [];
		try {
			t = this;
			t.nameSpace.mu.Lock();
			go$deferred.push({ recv: t.nameSpace.mu, method: "Unlock", args: [] });
			return (_entry = t.nameSpace.set[name], _entry !== undefined ? _entry.v : (go$ptrType(Template)).nil);
		} catch(go$err) {
			go$pushErr(go$err);
			return (go$ptrType(Template)).nil;
		} finally {
			go$callDeferred(go$deferred);
		}
	};
	Template.prototype.Lookup = function(name) { return this.go$val.Lookup(name); };
	Must = go$pkg.Must = function(t, err) {
		if (!(go$interfaceIsEqual(err, null))) {
			throw go$panic(err);
		}
		return t;
	};
	Template.Ptr.prototype.ParseFiles = function(filenames) {
		var t;
		t = this;
		return parseFiles(t, filenames);
	};
	Template.prototype.ParseFiles = function(filenames) { return this.go$val.ParseFiles(filenames); };
	parseFiles = function(t, filenames) {
		var _ref, _i, _slice, _index, filename, _tuple, b, err, s, name, tmpl, _tuple$1;
		if (filenames.length === 0) {
			return [(go$ptrType(Template)).nil, fmt.Errorf("html/template: no files named in call to ParseFiles", new (go$sliceType(go$emptyInterface))([]))];
		}
		_ref = filenames;
		_i = 0;
		while (_i < _ref.length) {
			filename = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			_tuple = ioutil.ReadFile(filename); b = _tuple[0]; err = _tuple[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(Template)).nil, err];
			}
			s = go$bytesToString(b);
			name = filepath.Base(filename);
			tmpl = (go$ptrType(Template)).nil;
			if (t === (go$ptrType(Template)).nil) {
				t = New(name);
			}
			if (name === t.Name()) {
				tmpl = t;
			} else {
				tmpl = t.New(name);
			}
			_tuple$1 = tmpl.Parse(s); err = _tuple$1[1];
			if (!(go$interfaceIsEqual(err, null))) {
				return [(go$ptrType(Template)).nil, err];
			}
			_i++;
		}
		return [t, null];
	};
	Template.Ptr.prototype.ParseGlob = function(pattern) {
		var t;
		t = this;
		return parseGlob(t, pattern);
	};
	Template.prototype.ParseGlob = function(pattern) { return this.go$val.ParseGlob(pattern); };
	parseGlob = function(t, pattern) {
		var _tuple, filenames, err;
		_tuple = filepath.Glob(pattern); filenames = _tuple[0]; err = _tuple[1];
		if (!(go$interfaceIsEqual(err, null))) {
			return [(go$ptrType(Template)).nil, err];
		}
		if (filenames.length === 0) {
			return [(go$ptrType(Template)).nil, fmt.Errorf("html/template: pattern matches no files: %#q", new (go$sliceType(go$emptyInterface))([new Go$String(pattern)]))];
		}
		return parseFiles(t, filenames);
	};
	tText = function(c, s) {
		var k, i, _struct, end, _slice, _index, _struct$1, _tuple, _tuple$1, j, e;
		k = 0;
		while (true) {
			i = k + bytes.IndexByte(go$subslice(s, k), 60) >> 0;
			if (i < k || ((i + 1 >> 0) === s.length)) {
				return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
			} else if ((i + 4 >> 0) <= s.length && bytes.Equal(commentStart, go$subslice(s, i, (i + 4 >> 0)))) {
				return [new context.Ptr(5, 0, 0, 0, 0, 0, (go$ptrType(Error)).nil), i + 4 >> 0];
			}
			i = i + 1 >> 0;
			end = false;
			if ((_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 47) {
				if ((i + 1 >> 0) === s.length) {
					return [(_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), s.length];
				}
				_tuple = [true, i + 1 >> 0]; end = _tuple[0]; i = _tuple[1];
			}
			_tuple$1 = eatTagName(s, i); j = _tuple$1[0]; e = _tuple$1[1];
			if (!((j === i))) {
				if (end) {
					e = 0;
				}
				return [new context.Ptr(1, 0, 0, 0, 0, e, (go$ptrType(Error)).nil), j];
			}
			k = j;
		}
	};
	tTag = function(c, s) {
		var i, _struct, _slice, _index, _tuple, j, err, _tuple$1, state$1, attr$1, _ref;
		i = eatWhiteSpace(s, 0);
		if (i === s.length) {
			return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
		}
		if ((_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 62) {
			return [new context.Ptr(elementContentType[c.element], 0, 0, 0, 0, c.element, (go$ptrType(Error)).nil), i + 1 >> 0];
		}
		_tuple = eatAttrName(s, i); j = _tuple[0]; err = _tuple[1];
		if (!(err === (go$ptrType(Error)).nil)) {
			return [new context.Ptr(23, 0, 0, 0, 0, 0, err), s.length];
		}
		_tuple$1 = [1, 0]; state$1 = _tuple$1[0]; attr$1 = _tuple$1[1];
		if (i === j) {
			return [new context.Ptr(23, 0, 0, 0, 0, 0, errorf(2, 0, "expected space, attr name, or end of tag, but got %q", new (go$sliceType(go$emptyInterface))([go$subslice(s, i)]))), s.length];
		}
		_ref = attrType(go$bytesToString(go$subslice(s, i, j)));
		if (_ref === 6) {
			attr$1 = 3;
		} else if (_ref === 1) {
			attr$1 = 2;
		} else if (_ref === 4) {
			attr$1 = 1;
		}
		if (j === s.length) {
			state$1 = 2;
		} else {
			state$1 = 3;
		}
		return [new context.Ptr(state$1, 0, 0, 0, attr$1, c.element, (go$ptrType(Error)).nil), j];
	};
	tAttrName = function(c, s) {
		var _tuple, i, err, _struct;
		_tuple = eatAttrName(s, 0); i = _tuple[0]; err = _tuple[1];
		if (!(err === (go$ptrType(Error)).nil)) {
			return [new context.Ptr(23, 0, 0, 0, 0, 0, err), s.length];
		} else if (!((i === s.length))) {
			c.state = 3;
		}
		return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), i];
	};
	tAfterName = function(c, s) {
		var i, _slice, _index, _struct, _struct$1, _struct$2;
		i = eatWhiteSpace(s, 0);
		if (i === s.length) {
			return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
		} else if (!(((_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 61))) {
			c.state = 1;
			return [(_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), i];
		}
		c.state = 4;
		return [(_struct$2 = c, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), i + 1 >> 0];
	};
	tBeforeValue = function(c, s) {
		var i, _struct, delim$1, _ref, _slice, _index, _tuple, _tuple$1, _tuple$2, _struct$1;
		i = eatWhiteSpace(s, 0);
		if (i === s.length) {
			return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
		}
		delim$1 = 3;
		_ref = (_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (_ref === 39) {
			_tuple = [2, i + 1 >> 0]; delim$1 = _tuple[0]; i = _tuple[1];
		} else if (_ref === 34) {
			_tuple$1 = [1, i + 1 >> 0]; delim$1 = _tuple$1[0]; i = _tuple$1[1];
		}
		_tuple$2 = [attrStartStates[c.attr], delim$1, 0]; c.state = _tuple$2[0]; c.delim = _tuple$2[1]; c.attr = _tuple$2[2];
		return [(_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), i];
	};
	tHTMLCmt = function(c, s) {
		var i, _struct;
		i = bytes.Index(s, commentEnd);
		if (!((i === -1))) {
			return [new context.Ptr(0, 0, 0, 0, 0, 0, (go$ptrType(Error)).nil), i + 3 >> 0];
		}
		return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
	};
	tSpecialTagEnd = function(c, s) {
		var i, _struct;
		if (!((c.element === 0))) {
			i = strings.Index(strings.ToLower(go$bytesToString(s)), specialTagEndMarkers[c.element]);
			if (!((i === -1))) {
				return [new context.Ptr(0, 0, 0, 0, 0, 0, (go$ptrType(Error)).nil), i];
			}
		}
		return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
	};
	tAttr = function(c, s) {
		var _struct;
		return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
	};
	tURL = function(c, s) {
		var _struct;
		if (bytes.IndexAny(s, "#?") >= 0) {
			c.urlPart = 2;
		} else if (!((s.length === eatWhiteSpace(s, 0))) && (c.urlPart === 0)) {
			c.urlPart = 1;
		}
		return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
	};
	tJS = function(c, s) {
		var i, _struct, _ref, _slice, _index, _tuple, _tuple$1, _slice$1, _index$1, _slice$2, _index$2, _tuple$2, _tuple$3, _struct$1;
		i = bytes.IndexAny(s, "\"'/");
		if (i === -1) {
			c.jsCtx = nextJSCtx(s, c.jsCtx);
			return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
		}
		c.jsCtx = nextJSCtx(go$subslice(s, 0, i), c.jsCtx);
		_ref = (_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
		if (_ref === 34) {
			_tuple = [10, 0]; c.state = _tuple[0]; c.jsCtx = _tuple[1];
		} else if (_ref === 39) {
			_tuple$1 = [11, 0]; c.state = _tuple$1[0]; c.jsCtx = _tuple$1[1];
		} else if (_ref === 47) {
			if ((i + 1 >> 0) < s.length && ((_slice$1 = s, _index$1 = (i + 1 >> 0), (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 47)) {
				_tuple$2 = [14, i + 1 >> 0]; c.state = _tuple$2[0]; i = _tuple$2[1];
			} else if ((i + 1 >> 0) < s.length && ((_slice$2 = s, _index$2 = (i + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 42)) {
				_tuple$3 = [13, i + 1 >> 0]; c.state = _tuple$3[0]; i = _tuple$3[1];
			} else if (c.jsCtx === 0) {
				c.state = 12;
			} else if (c.jsCtx === 1) {
				c.jsCtx = 0;
			} else {
				return [new context.Ptr(23, 0, 0, 0, 0, 0, errorf(10, 0, "'/' could start a division or regexp: %.32q", new (go$sliceType(go$emptyInterface))([go$subslice(s, i)]))), s.length];
			}
		} else {
			throw go$panic(new Go$String("unreachable"));
		}
		return [(_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), i + 1 >> 0];
	};
	tJSDelimited = function(c, s) {
		var specials, _ref, _tuple, k, inCharset, i, _ref$1, _slice, _index, _tuple$1, _struct, _struct$1;
		specials = "\\\"";
		_ref = c.state;
		if (_ref === 11) {
			specials = "\\'";
		} else if (_ref === 12) {
			specials = "\\/[]";
		}
		_tuple = [0, false]; k = _tuple[0]; inCharset = _tuple[1];
		while (true) {
			i = k + bytes.IndexAny(go$subslice(s, k), specials) >> 0;
			if (i < k) {
				break;
			}
			_ref$1 = (_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (_ref$1 === 92) {
				i = i + 1 >> 0;
				if (i === s.length) {
					return [new context.Ptr(23, 0, 0, 0, 0, 0, errorf(8, 0, "unfinished escape sequence in JS string: %q", new (go$sliceType(go$emptyInterface))([s]))), s.length];
				}
			} else if (_ref$1 === 91) {
				inCharset = true;
			} else if (_ref$1 === 93) {
				inCharset = false;
			} else {
				if (!inCharset) {
					_tuple$1 = [9, 1]; c.state = _tuple$1[0]; c.jsCtx = _tuple$1[1];
					return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), i + 1 >> 0];
				}
			}
			k = i + 1 >> 0;
		}
		if (inCharset) {
			return [new context.Ptr(23, 0, 0, 0, 0, 0, errorf(7, 0, "unfinished JS regexp charset: %q", new (go$sliceType(go$emptyInterface))([s]))), s.length];
		}
		return [(_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), s.length];
	};
	tBlockCmt = function(c, s) {
		var i, _struct, _ref, _struct$1;
		i = bytes.Index(s, blockCommentEnd);
		if (i === -1) {
			return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
		}
		_ref = c.state;
		if (_ref === 13) {
			c.state = 9;
		} else if (_ref === 21) {
			c.state = 15;
		} else {
			throw go$panic(new Go$String((new state(c.state)).String()));
		}
		return [(_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), i + 2 >> 0];
	};
	tLineCmt = function(c, s) {
		var lineTerminators, endState, _ref, _tuple, _tuple$1, i, _struct, _struct$1;
		lineTerminators = "";
		endState = 0;
		_ref = c.state;
		if (_ref === 14) {
			_tuple = ["\n\r\xE2\x80\xA8\xE2\x80\xA9", 9]; lineTerminators = _tuple[0]; endState = _tuple[1];
		} else if (_ref === 22) {
			_tuple$1 = ["\n\f\r", 15]; lineTerminators = _tuple$1[0]; endState = _tuple$1[1];
		} else {
			throw go$panic(new Go$String((new state(c.state)).String()));
		}
		i = bytes.IndexAny(s, lineTerminators);
		if (i === -1) {
			return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
		}
		c.state = endState;
		return [(_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), i];
	};
	tCSS = function(c, s) {
		var k, i, _struct, _ref, _slice, _index, p, j, _slice$1, _index$1, _slice$2, _index$2, _tuple, _tuple$1, _struct$1, _ref$1, _slice$3, _index$3, _struct$2, _struct$3, _struct$4, _struct$5;
		k = 0;
		while (true) {
			i = k + bytes.IndexAny(go$subslice(s, k), "(\"'/") >> 0;
			if (i < k) {
				return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
			}
			_ref = (_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (_ref === 40) {
				p = bytes.TrimRight(go$subslice(s, 0, i), "\t\n\f\r ");
				if (endsWithCSSKeyword(p, "url")) {
					j = s.length - bytes.TrimLeft(go$subslice(s, (i + 1 >> 0)), "\t\n\f\r ").length >> 0;
					if (!((j === s.length)) && ((_slice$1 = s, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")) === 34)) {
						_tuple = [18, j + 1 >> 0]; c.state = _tuple[0]; j = _tuple[1];
					} else if (!((j === s.length)) && ((_slice$2 = s, _index$2 = j, (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")) === 39)) {
						_tuple$1 = [19, j + 1 >> 0]; c.state = _tuple$1[0]; j = _tuple$1[1];
					} else {
						c.state = 20;
					}
					return [(_struct$1 = c, new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)), j];
				}
			} else if (_ref === 47) {
				if ((i + 1 >> 0) < s.length) {
					_ref$1 = (_slice$3 = s, _index$3 = (i + 1 >> 0), (_index$3 >= 0 && _index$3 < _slice$3.length) ? _slice$3.array[_slice$3.offset + _index$3] : go$throwRuntimeError("index out of range"));
					if (_ref$1 === 47) {
						c.state = 22;
						return [(_struct$2 = c, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), i + 2 >> 0];
					} else if (_ref$1 === 42) {
						c.state = 21;
						return [(_struct$3 = c, new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err)), i + 2 >> 0];
					}
				}
			} else if (_ref === 34) {
				c.state = 16;
				return [(_struct$4 = c, new context.Ptr(_struct$4.state, _struct$4.delim, _struct$4.urlPart, _struct$4.jsCtx, _struct$4.attr, _struct$4.element, _struct$4.err)), i + 1 >> 0];
			} else if (_ref === 39) {
				c.state = 17;
				return [(_struct$5 = c, new context.Ptr(_struct$5.state, _struct$5.delim, _struct$5.urlPart, _struct$5.jsCtx, _struct$5.attr, _struct$5.element, _struct$5.err)), i + 1 >> 0];
			}
			k = i + 1 >> 0;
		}
	};
	tCSSStr = function(c, s) {
		var endAndEsc, _ref, k, i, _tuple, _struct, _struct$1, c$1, nread, _struct$2, _slice, _index, _struct$3, _tuple$1, _struct$4, _struct$5;
		endAndEsc = "";
		_ref = c.state;
		if (_ref === 16 || _ref === 18) {
			endAndEsc = "\\\"";
		} else if (_ref === 17 || _ref === 19) {
			endAndEsc = "\\'";
		} else if (_ref === 20) {
			endAndEsc = "\\\t\n\f\r )";
		} else {
			throw go$panic(new Go$String((new state(c.state)).String()));
		}
		k = 0;
		while (true) {
			i = k + bytes.IndexAny(go$subslice(s, k), endAndEsc) >> 0;
			if (i < k) {
				_tuple = tURL((_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), decodeCSS(go$subslice(s, k))); c$1 = (_struct$1 = _tuple[0], new context.Ptr(_struct$1.state, _struct$1.delim, _struct$1.urlPart, _struct$1.jsCtx, _struct$1.attr, _struct$1.element, _struct$1.err)); nread = _tuple[1];
				return [(_struct$2 = c$1, new context.Ptr(_struct$2.state, _struct$2.delim, _struct$2.urlPart, _struct$2.jsCtx, _struct$2.attr, _struct$2.element, _struct$2.err)), k + nread >> 0];
			}
			if ((_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")) === 92) {
				i = i + 1 >> 0;
				if (i === s.length) {
					return [new context.Ptr(23, 0, 0, 0, 0, 0, errorf(8, 0, "unfinished escape sequence in CSS string: %q", new (go$sliceType(go$emptyInterface))([s]))), s.length];
				}
			} else {
				c.state = 15;
				return [(_struct$3 = c, new context.Ptr(_struct$3.state, _struct$3.delim, _struct$3.urlPart, _struct$3.jsCtx, _struct$3.attr, _struct$3.element, _struct$3.err)), i + 1 >> 0];
			}
			_tuple$1 = tURL((_struct$4 = c, new context.Ptr(_struct$4.state, _struct$4.delim, _struct$4.urlPart, _struct$4.jsCtx, _struct$4.attr, _struct$4.element, _struct$4.err)), decodeCSS(go$subslice(s, 0, (i + 1 >> 0)))); c = (_struct$5 = _tuple$1[0], new context.Ptr(_struct$5.state, _struct$5.delim, _struct$5.urlPart, _struct$5.jsCtx, _struct$5.attr, _struct$5.element, _struct$5.err));
			k = i + 1 >> 0;
		}
	};
	tError = function(c, s) {
		var _struct;
		return [(_struct = c, new context.Ptr(_struct.state, _struct.delim, _struct.urlPart, _struct.jsCtx, _struct.attr, _struct.element, _struct.err)), s.length];
	};
	eatAttrName = function(s, i) {
		var j, _ref, _slice, _index;
		j = i;
		while (j < s.length) {
			_ref = (_slice = s, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (_ref === 32 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 61 || _ref === 62) {
				return [j, (go$ptrType(Error)).nil];
			} else if (_ref === 39 || _ref === 34 || _ref === 60) {
				return [-1, errorf(2, 0, "%q in attribute name: %.32q", new (go$sliceType(go$emptyInterface))([go$subslice(s, j, (j + 1 >> 0)), s]))];
			} else {
			}
			j = j + 1 >> 0;
		}
		return [s.length, (go$ptrType(Error)).nil];
	};
	asciiAlpha = function(c) {
		return 65 <= c && c <= 90 || 97 <= c && c <= 122;
	};
	asciiAlphaNum = function(c) {
		return asciiAlpha(c) || 48 <= c && c <= 57;
	};
	eatTagName = function(s, i) {
		var _slice, _index, j, _slice$1, _index$1, x, _slice$2, _index$2, _entry;
		if ((i === s.length) || !asciiAlpha((_slice = s, _index = i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")))) {
			return [i, 0];
		}
		j = i + 1 >> 0;
		while (j < s.length) {
			x = (_slice$1 = s, _index$1 = j, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range"));
			if (asciiAlphaNum(x)) {
				j = j + 1 >> 0;
				continue;
			}
			if (((x === 58) || (x === 45)) && (j + 1 >> 0) < s.length && asciiAlphaNum((_slice$2 = s, _index$2 = (j + 1 >> 0), (_index$2 >= 0 && _index$2 < _slice$2.length) ? _slice$2.array[_slice$2.offset + _index$2] : go$throwRuntimeError("index out of range")))) {
				j = j + 2 >> 0;
				continue;
			}
			break;
		}
		return [j, (_entry = elementNameMap[strings.ToLower(go$bytesToString(go$subslice(s, i, j)))], _entry !== undefined ? _entry.v : 0)];
	};
	eatWhiteSpace = function(s, i) {
		var j, _ref, _slice, _index;
		j = i;
		while (j < s.length) {
			_ref = (_slice = s, _index = j, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range"));
			if (_ref === 32 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13) {
			} else {
				return j;
			}
			j = j + 1 >> 0;
		}
		return s.length;
	};
	urlFilter = function(args) {
		var _tuple, s, t, i, protocol;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 6) {
			return s;
		}
		i = strings.IndexRune(s, 58);
		if (i >= 0 && strings.IndexRune(s.substring(0, i), 47) < 0) {
			protocol = strings.ToLower(s.substring(0, i));
			if (!(protocol === "http") && !(protocol === "https") && !(protocol === "mailto")) {
				return "#ZgotmplZ";
			}
		}
		return s;
	};
	urlEscaper = function(args) {
		return urlProcessor(false, args);
	};
	urlNormalizer = function(args) {
		return urlProcessor(true, args);
	};
	urlProcessor = function(norm, args) {
		var _tuple, s, t, b, written, _tuple$1, i, n, c, _ref;
		_tuple = stringify(args); s = _tuple[0]; t = _tuple[1];
		if (t === 6) {
			norm = true;
		}
		b = new bytes.Buffer.Ptr();
		written = 0;
		_tuple$1 = [0, s.length]; i = _tuple$1[0]; n = _tuple$1[1];
		while (i < n) {
			c = s.charCodeAt(i);
			_ref = c;
			if (_ref === 33 || _ref === 35 || _ref === 36 || _ref === 38 || _ref === 42 || _ref === 43 || _ref === 44 || _ref === 47 || _ref === 58 || _ref === 59 || _ref === 61 || _ref === 63 || _ref === 64 || _ref === 91 || _ref === 93) {
				if (norm) {
					i = i + 1 >> 0;
					continue;
				}
			} else if (_ref === 45 || _ref === 46 || _ref === 95 || _ref === 126) {
				i = i + 1 >> 0;
				continue;
			} else if (_ref === 37) {
				if (norm && (i + 2 >> 0) < s.length && isHex(s.charCodeAt((i + 1 >> 0))) && isHex(s.charCodeAt((i + 2 >> 0)))) {
					i = i + 1 >> 0;
					continue;
				}
			} else {
				if (97 <= c && c <= 122) {
					i = i + 1 >> 0;
					continue;
				}
				if (65 <= c && c <= 90) {
					i = i + 1 >> 0;
					continue;
				}
				if (48 <= c && c <= 57) {
					i = i + 1 >> 0;
					continue;
				}
			}
			b.WriteString(s.substring(written, i));
			fmt.Fprintf(b, "%%%02x", new (go$sliceType(go$emptyInterface))([new Go$Uint8(c)]));
			written = i + 1 >> 0;
			i = i + 1 >> 0;
		}
		if (written === 0) {
			return s;
		}
		b.WriteString(s.substring(written));
		return b.String();
	};
	go$pkg.init = function() {
		context.methods = [["String", "", [], [Go$String], false, -1], ["eq", "html/template", [context], [Go$Bool], false, -1], ["mangle", "html/template", [Go$String], [Go$String], false, -1]];
		(go$ptrType(context)).methods = [["String", "", [], [Go$String], false, -1], ["eq", "html/template", [context], [Go$Bool], false, -1], ["mangle", "html/template", [Go$String], [Go$String], false, -1]];
		context.init([["state", "state", "html/template", state, ""], ["delim", "delim", "html/template", delim, ""], ["urlPart", "urlPart", "html/template", urlPart, ""], ["jsCtx", "jsCtx", "html/template", jsCtx, ""], ["attr", "attr", "html/template", attr, ""], ["element", "element", "html/template", element, ""], ["err", "err", "html/template", (go$ptrType(Error)), ""]]);
		state.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(state)).methods = [["String", "", [], [Go$String], false, -1]];
		delim.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(delim)).methods = [["String", "", [], [Go$String], false, -1]];
		urlPart.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(urlPart)).methods = [["String", "", [], [Go$String], false, -1]];
		jsCtx.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(jsCtx)).methods = [["String", "", [], [Go$String], false, -1]];
		element.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(element)).methods = [["String", "", [], [Go$String], false, -1]];
		attr.methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(attr)).methods = [["String", "", [], [Go$String], false, -1]];
		(go$ptrType(Error)).methods = [["Error", "", [], [Go$String], false, -1]];
		Error.init([["ErrorCode", "ErrorCode", "", ErrorCode, ""], ["Name", "Name", "", Go$String, ""], ["Line", "Line", "", Go$Int, ""], ["Description", "Description", "", Go$String, ""]]);
		(go$ptrType(escaper)).methods = [["commit", "html/template", [], [], false, -1], ["computeOutCtx", "html/template", [context, (go$ptrType(template.Template))], [context], false, -1], ["editActionNode", "html/template", [(go$ptrType(parse.ActionNode)), (go$sliceType(Go$String))], [], false, -1], ["editTemplateNode", "html/template", [(go$ptrType(parse.TemplateNode)), Go$String], [], false, -1], ["editTextNode", "html/template", [(go$ptrType(parse.TextNode)), (go$sliceType(Go$Uint8))], [], false, -1], ["escape", "html/template", [context, parse.Node], [context], false, -1], ["escapeAction", "html/template", [context, (go$ptrType(parse.ActionNode))], [context], false, -1], ["escapeBranch", "html/template", [context, (go$ptrType(parse.BranchNode)), Go$String], [context], false, -1], ["escapeList", "html/template", [context, (go$ptrType(parse.ListNode))], [context], false, -1], ["escapeListConditionally", "html/template", [context, (go$ptrType(parse.ListNode)), (go$funcType([(go$ptrType(escaper)), context], [Go$Bool], false))], [context, Go$Bool], false, -1], ["escapeTemplate", "html/template", [context, (go$ptrType(parse.TemplateNode))], [context], false, -1], ["escapeTemplateBody", "html/template", [context, (go$ptrType(template.Template))], [context, Go$Bool], false, -1], ["escapeText", "html/template", [context, (go$ptrType(parse.TextNode))], [context], false, -1], ["escapeTree", "html/template", [context, Go$String, Go$Int], [context, Go$String], false, -1], ["template", "html/template", [Go$String], [(go$ptrType(template.Template))], false, -1]];
		escaper.init([["tmpl", "tmpl", "html/template", (go$ptrType(Template)), ""], ["output", "output", "html/template", (go$mapType(Go$String, context)), ""], ["derived", "derived", "html/template", (go$mapType(Go$String, (go$ptrType(template.Template)))), ""], ["called", "called", "html/template", (go$mapType(Go$String, Go$Bool)), ""], ["actionNodeEdits", "actionNodeEdits", "html/template", (go$mapType((go$ptrType(parse.ActionNode)), (go$sliceType(Go$String)))), ""], ["templateNodeEdits", "templateNodeEdits", "html/template", (go$mapType((go$ptrType(parse.TemplateNode)), Go$String)), ""], ["textNodeEdits", "textNodeEdits", "html/template", (go$mapType((go$ptrType(parse.TextNode)), (go$sliceType(Go$Uint8)))), ""]]);
		(go$ptrType(Template)).methods = [["AddParseTree", "", [Go$String, (go$ptrType(parse.Tree))], [(go$ptrType(Template)), go$error], false, -1], ["Clone", "", [], [(go$ptrType(Template)), go$error], false, -1], ["Delims", "", [Go$String, Go$String], [(go$ptrType(Template))], false, -1], ["Execute", "", [io.Writer, go$emptyInterface], [go$error], false, -1], ["ExecuteTemplate", "", [io.Writer, Go$String, go$emptyInterface], [go$error], false, -1], ["Funcs", "", [FuncMap], [(go$ptrType(Template))], false, -1], ["Lookup", "", [Go$String], [(go$ptrType(Template))], false, -1], ["Name", "", [], [Go$String], false, -1], ["New", "", [Go$String], [(go$ptrType(Template))], false, -1], ["Parse", "", [Go$String], [(go$ptrType(Template)), go$error], false, -1], ["ParseFiles", "", [(go$sliceType(Go$String))], [(go$ptrType(Template)), go$error], true, -1], ["ParseGlob", "", [Go$String], [(go$ptrType(Template)), go$error], false, -1], ["Templates", "", [], [(go$sliceType((go$ptrType(Template))))], false, -1], ["escape", "html/template", [], [go$error], false, -1], ["lookupAndEscapeTemplate", "html/template", [Go$String], [(go$ptrType(Template)), go$error], false, -1], ["new", "html/template", [Go$String], [(go$ptrType(Template))], false, -1]];
		Template.init([["escaped", "escaped", "html/template", Go$Bool, ""], ["text", "text", "html/template", (go$ptrType(template.Template)), ""], ["Tree", "Tree", "", (go$ptrType(parse.Tree)), ""], ["nameSpace", "", "html/template", (go$ptrType(nameSpace)), ""]]);
		nameSpace.init([["mu", "mu", "html/template", sync.Mutex, ""], ["set", "set", "html/template", (go$mapType(Go$String, (go$ptrType(Template)))), ""]]);
		FuncMap.init(Go$String, go$emptyInterface);
		var _map, _key;
		attrTypeMap = (_map = new Go$Map(), _key = "accept", _map[_key] = { k: _key, v: 0 }, _key = "accept-charset", _map[_key] = { k: _key, v: 7 }, _key = "action", _map[_key] = { k: _key, v: 6 }, _key = "alt", _map[_key] = { k: _key, v: 0 }, _key = "archive", _map[_key] = { k: _key, v: 6 }, _key = "async", _map[_key] = { k: _key, v: 7 }, _key = "autocomplete", _map[_key] = { k: _key, v: 0 }, _key = "autofocus", _map[_key] = { k: _key, v: 0 }, _key = "autoplay", _map[_key] = { k: _key, v: 0 }, _key = "background", _map[_key] = { k: _key, v: 6 }, _key = "border", _map[_key] = { k: _key, v: 0 }, _key = "checked", _map[_key] = { k: _key, v: 0 }, _key = "cite", _map[_key] = { k: _key, v: 6 }, _key = "challenge", _map[_key] = { k: _key, v: 7 }, _key = "charset", _map[_key] = { k: _key, v: 7 }, _key = "class", _map[_key] = { k: _key, v: 0 }, _key = "classid", _map[_key] = { k: _key, v: 6 }, _key = "codebase", _map[_key] = { k: _key, v: 6 }, _key = "cols", _map[_key] = { k: _key, v: 0 }, _key = "colspan", _map[_key] = { k: _key, v: 0 }, _key = "content", _map[_key] = { k: _key, v: 7 }, _key = "contenteditable", _map[_key] = { k: _key, v: 0 }, _key = "contextmenu", _map[_key] = { k: _key, v: 0 }, _key = "controls", _map[_key] = { k: _key, v: 0 }, _key = "coords", _map[_key] = { k: _key, v: 0 }, _key = "crossorigin", _map[_key] = { k: _key, v: 7 }, _key = "data", _map[_key] = { k: _key, v: 6 }, _key = "datetime", _map[_key] = { k: _key, v: 0 }, _key = "default", _map[_key] = { k: _key, v: 0 }, _key = "defer", _map[_key] = { k: _key, v: 7 }, _key = "dir", _map[_key] = { k: _key, v: 0 }, _key = "dirname", _map[_key] = { k: _key, v: 0 }, _key = "disabled", _map[_key] = { k: _key, v: 0 }, _key = "draggable", _map[_key] = { k: _key, v: 0 }, _key = "dropzone", _map[_key] = { k: _key, v: 0 }, _key = "enctype", _map[_key] = { k: _key, v: 7 }, _key = "for", _map[_key] = { k: _key, v: 0 }, _key = "form", _map[_key] = { k: _key, v: 7 }, _key = "formaction", _map[_key] = { k: _key, v: 6 }, _key = "formenctype", _map[_key] = { k: _key, v: 7 }, _key = "formmethod", _map[_key] = { k: _key, v: 7 }, _key = "formnovalidate", _map[_key] = { k: _key, v: 7 }, _key = "formtarget", _map[_key] = { k: _key, v: 0 }, _key = "headers", _map[_key] = { k: _key, v: 0 }, _key = "height", _map[_key] = { k: _key, v: 0 }, _key = "hidden", _map[_key] = { k: _key, v: 0 }, _key = "high", _map[_key] = { k: _key, v: 0 }, _key = "href", _map[_key] = { k: _key, v: 6 }, _key = "hreflang", _map[_key] = { k: _key, v: 0 }, _key = "http-equiv", _map[_key] = { k: _key, v: 7 }, _key = "icon", _map[_key] = { k: _key, v: 6 }, _key = "id", _map[_key] = { k: _key, v: 0 }, _key = "ismap", _map[_key] = { k: _key, v: 0 }, _key = "keytype", _map[_key] = { k: _key, v: 7 }, _key = "kind", _map[_key] = { k: _key, v: 0 }, _key = "label", _map[_key] = { k: _key, v: 0 }, _key = "lang", _map[_key] = { k: _key, v: 0 }, _key = "language", _map[_key] = { k: _key, v: 7 }, _key = "list", _map[_key] = { k: _key, v: 0 }, _key = "longdesc", _map[_key] = { k: _key, v: 6 }, _key = "loop", _map[_key] = { k: _key, v: 0 }, _key = "low", _map[_key] = { k: _key, v: 0 }, _key = "manifest", _map[_key] = { k: _key, v: 6 }, _key = "max", _map[_key] = { k: _key, v: 0 }, _key = "maxlength", _map[_key] = { k: _key, v: 0 }, _key = "media", _map[_key] = { k: _key, v: 0 }, _key = "mediagroup", _map[_key] = { k: _key, v: 0 }, _key = "method", _map[_key] = { k: _key, v: 7 }, _key = "min", _map[_key] = { k: _key, v: 0 }, _key = "multiple", _map[_key] = { k: _key, v: 0 }, _key = "name", _map[_key] = { k: _key, v: 0 }, _key = "novalidate", _map[_key] = { k: _key, v: 7 }, _key = "open", _map[_key] = { k: _key, v: 0 }, _key = "optimum", _map[_key] = { k: _key, v: 0 }, _key = "pattern", _map[_key] = { k: _key, v: 7 }, _key = "placeholder", _map[_key] = { k: _key, v: 0 }, _key = "poster", _map[_key] = { k: _key, v: 6 }, _key = "profile", _map[_key] = { k: _key, v: 6 }, _key = "preload", _map[_key] = { k: _key, v: 0 }, _key = "pubdate", _map[_key] = { k: _key, v: 0 }, _key = "radiogroup", _map[_key] = { k: _key, v: 0 }, _key = "readonly", _map[_key] = { k: _key, v: 0 }, _key = "rel", _map[_key] = { k: _key, v: 7 }, _key = "required", _map[_key] = { k: _key, v: 0 }, _key = "reversed", _map[_key] = { k: _key, v: 0 }, _key = "rows", _map[_key] = { k: _key, v: 0 }, _key = "rowspan", _map[_key] = { k: _key, v: 0 }, _key = "sandbox", _map[_key] = { k: _key, v: 7 }, _key = "spellcheck", _map[_key] = { k: _key, v: 0 }, _key = "scope", _map[_key] = { k: _key, v: 0 }, _key = "scoped", _map[_key] = { k: _key, v: 0 }, _key = "seamless", _map[_key] = { k: _key, v: 0 }, _key = "selected", _map[_key] = { k: _key, v: 0 }, _key = "shape", _map[_key] = { k: _key, v: 0 }, _key = "size", _map[_key] = { k: _key, v: 0 }, _key = "sizes", _map[_key] = { k: _key, v: 0 }, _key = "span", _map[_key] = { k: _key, v: 0 }, _key = "src", _map[_key] = { k: _key, v: 6 }, _key = "srcdoc", _map[_key] = { k: _key, v: 2 }, _key = "srclang", _map[_key] = { k: _key, v: 0 }, _key = "start", _map[_key] = { k: _key, v: 0 }, _key = "step", _map[_key] = { k: _key, v: 0 }, _key = "style", _map[_key] = { k: _key, v: 1 }, _key = "tabindex", _map[_key] = { k: _key, v: 0 }, _key = "target", _map[_key] = { k: _key, v: 0 }, _key = "title", _map[_key] = { k: _key, v: 0 }, _key = "type", _map[_key] = { k: _key, v: 7 }, _key = "usemap", _map[_key] = { k: _key, v: 6 }, _key = "value", _map[_key] = { k: _key, v: 7 }, _key = "width", _map[_key] = { k: _key, v: 0 }, _key = "wrap", _map[_key] = { k: _key, v: 0 }, _key = "xmlns", _map[_key] = { k: _key, v: 6 }, _map);
		errorType = reflect.TypeOf((go$ptrType(go$error)).nil).Elem();
		fmtStringerType = reflect.TypeOf((go$ptrType(fmt.Stringer)).nil).Elem();
		stateNames = go$toNativeArray("String", ["stateText", "stateTag", "stateAttrName", "stateAfterName", "stateBeforeValue", "stateHTMLCmt", "stateRCDATA", "stateAttr", "stateURL", "stateJS", "stateJSDqStr", "stateJSSqStr", "stateJSRegexp", "stateJSBlockCmt", "stateJSLineCmt", "stateCSS", "stateCSSDqStr", "stateCSSSqStr", "stateCSSDqURL", "stateCSSSqURL", "stateCSSURL", "stateCSSBlockCmt", "stateCSSLineCmt", "stateError"]);
		delimNames = go$toNativeArray("String", ["delimNone", "delimDoubleQuote", "delimSingleQuote", "delimSpaceOrTagEnd"]);
		urlPartNames = go$toNativeArray("String", ["urlPartNone", "urlPartPreQuery", "urlPartQueryOrFrag", "urlPartUnknown"]);
		elementNames = go$toNativeArray("String", ["elementNone", "elementScript", "elementStyle", "elementTextarea", "elementTitle"]);
		attrNames = go$toNativeArray("String", ["attrNone", "attrScript", "attrStyle", "attrURL"]);
		expressionBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("expression"));
		mozBindingBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("mozbinding"));
		htmlNospaceReplacementTable = new (go$sliceType(Go$String))(["&#xfffd;", "", "", "", "", "", "", "", "", "&#9;", "&#10;", "&#11;", "&#12;", "&#13;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#32;", "", "&#34;", "", "", "", "&amp;", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "&#61;", "&gt;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#96;"]);
		htmlNospaceNormReplacementTable = new (go$sliceType(Go$String))(["&#xfffd;", "", "", "", "", "", "", "", "", "&#9;", "&#10;", "&#11;", "&#12;", "&#13;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#32;", "", "&#34;", "", "", "", "", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "&#61;", "&gt;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#96;"]);
		delimEnds = go$toNativeArray("String", ["", "\"", "'", " \t\n\f\r>"]);
		commentStart = new (go$sliceType(Go$Uint8))(go$stringToBytes("<!--"));
		var _map$1, _key$1;
		elementNameMap = (_map$1 = new Go$Map(), _key$1 = "script", _map$1[_key$1] = { k: _key$1, v: 1 }, _key$1 = "style", _map$1[_key$1] = { k: _key$1, v: 2 }, _key$1 = "textarea", _map$1[_key$1] = { k: _key$1, v: 3 }, _key$1 = "title", _map$1[_key$1] = { k: _key$1, v: 4 }, _map$1);
		elementContentType = go$toNativeArray("Uint8", [0, 9, 15, 6, 6]);
		attrStartStates = go$toNativeArray("Uint8", [7, 9, 15, 8]);
		commentEnd = new (go$sliceType(Go$Uint8))(go$stringToBytes("-->"));
		specialTagEndMarkers = go$toNativeArray("String", ["", "</script", "</style", "</textarea", "</title"]);
		var _map$2, _key$2;
		regexpPrecederKeywords = (_map$2 = new Go$Map(), _key$2 = "break", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "case", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "continue", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "delete", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "do", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "else", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "finally", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "in", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "instanceof", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "return", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "throw", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "try", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "typeof", _map$2[_key$2] = { k: _key$2, v: true }, _key$2 = "void", _map$2[_key$2] = { k: _key$2, v: true }, _map$2);
		blockCommentEnd = new (go$sliceType(Go$Uint8))(go$stringToBytes("*/"));
		transitionFunc = go$toNativeArray("Func", [tText, tTag, tAttrName, tAfterName, tBeforeValue, tHTMLCmt, tSpecialTagEnd, tAttr, tURL, tJS, tJSDelimited, tJSDelimited, tJSDelimited, tBlockCmt, tLineCmt, tCSS, tCSSStr, tCSSStr, tCSSStr, tCSSStr, tCSSStr, tBlockCmt, tLineCmt, tError]);
		htmlReplacementTable = new (go$sliceType(Go$String))(["\xEF\xBF\xBD", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#34;", "", "", "", "&amp;", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "", "&gt;"]);
		htmlNormReplacementTable = new (go$sliceType(Go$String))(["\xEF\xBF\xBD", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&#34;", "", "", "", "", "&#39;", "", "", "", "&#43;", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "&lt;", "", "&gt;"]);
		jsonMarshalType = reflect.TypeOf((go$ptrType(json.Marshaler)).nil).Elem();
		jsStrReplacementTable = new (go$sliceType(Go$String))(["\\0", "", "", "", "", "", "", "", "", "\\t", "\\n", "\\x0b", "\\f", "\\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\x22", "", "", "", "\\x26", "\\x27", "", "", "", "\\x2b", "", "", "", "\\/", "", "", "", "", "", "", "", "", "", "", "", "", "\\x3c", "", "\\x3e", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\\\"]);
		jsStrNormReplacementTable = new (go$sliceType(Go$String))(["\\0", "", "", "", "", "", "", "", "", "\\t", "\\n", "\\x0b", "\\f", "\\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\x22", "", "", "", "\\x26", "\\x27", "", "", "", "\\x2b", "", "", "", "\\/", "", "", "", "", "", "", "", "", "", "", "", "", "\\x3c", "", "\\x3e"]);
		jsRegexpReplacementTable = new (go$sliceType(Go$String))(["\\0", "", "", "", "", "", "", "", "", "\\t", "\\n", "\\x0b", "\\f", "\\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\x22", "", "\\$", "", "\\x26", "\\x27", "\\(", "\\)", "\\*", "\\x2b", "", "\\-", "\\.", "\\/", "", "", "", "", "", "", "", "", "", "", "", "", "\\x3c", "", "\\x3e", "\\?", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\[", "\\\\", "\\]", "\\^", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\\{", "\\|", "\\}"]);
		var _map$3, _key$3;
		funcMap = (_map$3 = new Go$Map(), _key$3 = "html_template_attrescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(attrEscaper) }, _key$3 = "html_template_commentescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(commentEscaper) }, _key$3 = "html_template_cssescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(cssEscaper) }, _key$3 = "html_template_cssvaluefilter", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(cssValueFilter) }, _key$3 = "html_template_htmlnamefilter", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(htmlNameFilter) }, _key$3 = "html_template_htmlescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(htmlEscaper) }, _key$3 = "html_template_jsregexpescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(jsRegexpEscaper) }, _key$3 = "html_template_jsstrescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(jsStrEscaper) }, _key$3 = "html_template_jsvalescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(jsValEscaper) }, _key$3 = "html_template_nospaceescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(htmlNospaceEscaper) }, _key$3 = "html_template_rcdataescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(rcdataEscaper) }, _key$3 = "html_template_urlescaper", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(urlEscaper) }, _key$3 = "html_template_urlfilter", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(urlFilter) }, _key$3 = "html_template_urlnormalizer", _map$3[_key$3] = { k: _key$3, v: new (go$funcType([(go$sliceType(go$emptyInterface))], [Go$String], true))(urlNormalizer) }, _map$3);
		var _map$4, _key$4;
		equivEscapers = (_map$4 = new Go$Map(), _key$4 = "html_template_attrescaper", _map$4[_key$4] = { k: _key$4, v: "html" }, _key$4 = "html_template_htmlescaper", _map$4[_key$4] = { k: _key$4, v: "html" }, _key$4 = "html_template_nospaceescaper", _map$4[_key$4] = { k: _key$4, v: "html" }, _key$4 = "html_template_rcdataescaper", _map$4[_key$4] = { k: _key$4, v: "html" }, _key$4 = "html_template_urlescaper", _map$4[_key$4] = { k: _key$4, v: "urlquery" }, _key$4 = "html_template_urlnormalizer", _map$4[_key$4] = { k: _key$4, v: "urlquery" }, _map$4);
		var _map$5, _key$5, _map$6, _key$6, _map$7, _key$7, _map$8, _key$8, _map$9, _key$9, _map$10, _key$10;
		redundantFuncs = (_map$5 = new Go$Map(), _key$5 = "html_template_commentescaper", _map$5[_key$5] = { k: _key$5, v: (_map$6 = new Go$Map(), _key$6 = "html_template_attrescaper", _map$6[_key$6] = { k: _key$6, v: true }, _key$6 = "html_template_nospaceescaper", _map$6[_key$6] = { k: _key$6, v: true }, _key$6 = "html_template_htmlescaper", _map$6[_key$6] = { k: _key$6, v: true }, _map$6) }, _key$5 = "html_template_cssescaper", _map$5[_key$5] = { k: _key$5, v: (_map$7 = new Go$Map(), _key$7 = "html_template_attrescaper", _map$7[_key$7] = { k: _key$7, v: true }, _map$7) }, _key$5 = "html_template_jsregexpescaper", _map$5[_key$5] = { k: _key$5, v: (_map$8 = new Go$Map(), _key$8 = "html_template_attrescaper", _map$8[_key$8] = { k: _key$8, v: true }, _map$8) }, _key$5 = "html_template_jsstrescaper", _map$5[_key$5] = { k: _key$5, v: (_map$9 = new Go$Map(), _key$9 = "html_template_attrescaper", _map$9[_key$9] = { k: _key$9, v: true }, _map$9) }, _key$5 = "html_template_urlescaper", _map$5[_key$5] = { k: _key$5, v: (_map$10 = new Go$Map(), _key$10 = "html_template_urlnormalizer", _map$10[_key$10] = { k: _key$10, v: true }, _map$10) }, _map$5);
		doctypeBytes = new (go$sliceType(Go$Uint8))(go$stringToBytes("<!DOCTYPE"));
	}
	return go$pkg;
})();
go$packages["main"] = (function() {
	var go$pkg = {}, bytes = go$packages["bytes"], jquery = go$packages["github.com/gopherjs/jquery"], utils = go$packages["github.com/gopherjs/todomvc/utils"], template = go$packages["html/template"], ToDo, App, main, NewApp, jQuery;
	ToDo = go$pkg.ToDo = go$newType(0, "Struct", "main.ToDo", "ToDo", "main", function(Id_, Text_, Completed_) {
		this.go$val = this;
		this.Id = Id_ !== undefined ? Id_ : "";
		this.Text = Text_ !== undefined ? Text_ : "";
		this.Completed = Completed_ !== undefined ? Completed_ : false;
	});
	App = go$pkg.App = go$newType(0, "Struct", "main.App", "App", "main", function(todos_, todoTmpl_, footerTmpl_, todoAppJQuery_, headerJQuery_, mainJQuery_, footerJQuery_, newTodoJQuery_, toggleAllJQuery_, todoListJQuery_, countJQuery_, clearBtnJQuery_, filter_) {
		this.go$val = this;
		this.todos = todos_ !== undefined ? todos_ : (go$sliceType(ToDo)).nil;
		this.todoTmpl = todoTmpl_ !== undefined ? todoTmpl_ : (go$ptrType(template.Template)).nil;
		this.footerTmpl = footerTmpl_ !== undefined ? footerTmpl_ : (go$ptrType(template.Template)).nil;
		this.todoAppJQuery = todoAppJQuery_ !== undefined ? todoAppJQuery_ : new jquery.JQuery.Ptr();
		this.headerJQuery = headerJQuery_ !== undefined ? headerJQuery_ : new jquery.JQuery.Ptr();
		this.mainJQuery = mainJQuery_ !== undefined ? mainJQuery_ : new jquery.JQuery.Ptr();
		this.footerJQuery = footerJQuery_ !== undefined ? footerJQuery_ : new jquery.JQuery.Ptr();
		this.newTodoJQuery = newTodoJQuery_ !== undefined ? newTodoJQuery_ : new jquery.JQuery.Ptr();
		this.toggleAllJQuery = toggleAllJQuery_ !== undefined ? toggleAllJQuery_ : new jquery.JQuery.Ptr();
		this.todoListJQuery = todoListJQuery_ !== undefined ? todoListJQuery_ : new jquery.JQuery.Ptr();
		this.countJQuery = countJQuery_ !== undefined ? countJQuery_ : new jquery.JQuery.Ptr();
		this.clearBtnJQuery = clearBtnJQuery_ !== undefined ? clearBtnJQuery_ : new jquery.JQuery.Ptr();
		this.filter = filter_ !== undefined ? filter_ : "";
	});
	main = go$pkg.main = function() {
		var app;
		app = NewApp();
		app.bindEvents();
		app.initRouter();
		app.render();
	};
	NewApp = go$pkg.NewApp = function() {
		var somethingToDo, v, todoHtml, _tuple, todoTmpl, footerHtml, _tuple$1, footerTmpl, _struct, todoAppJQuery, _struct$1, headerJQuery, _struct$2, mainJQuery, _struct$3, footerJQuery, _struct$4, newTodoJQuery, _struct$5, toggleAllJQuery, _struct$6, todoListJQuery, _struct$7, countJQuery, _struct$8, clearBtnJQuery, filter, _struct$9, _struct$10, _struct$11, _struct$12, _struct$13, _struct$14, _struct$15, _struct$16, _struct$17;
		somethingToDo = (go$sliceType(ToDo)).make(0, 0, function() { return new ToDo.Ptr(); });
		utils.Retrieve("TodoMVC4GopherJS", new (go$ptrType((go$sliceType(ToDo))))(function() { return somethingToDo; }, function(v) { somethingToDo = v;; }));
		todoHtml = jQuery(new (go$sliceType(go$emptyInterface))([new Go$String("#todo-template")])).Html();
		todoTmpl = (_tuple = template.New("todo").Parse(todoHtml), template.Must(_tuple[0], _tuple[1]));
		footerHtml = jQuery(new (go$sliceType(go$emptyInterface))([new Go$String("#footer-template")])).Html();
		footerTmpl = (_tuple$1 = template.New("footer").Parse(footerHtml), template.Must(_tuple$1[0], _tuple$1[1]));
		todoAppJQuery = (_struct = jQuery(new (go$sliceType(go$emptyInterface))([new Go$String("#todoapp")])), new jquery.JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		headerJQuery = (_struct$1 = todoAppJQuery.Find(new (go$sliceType(go$emptyInterface))([new Go$String("#header")])), new jquery.JQuery.Ptr(_struct$1.o, _struct$1.Jquery, _struct$1.Selector, _struct$1.Length, _struct$1.Context));
		mainJQuery = (_struct$2 = todoAppJQuery.Find(new (go$sliceType(go$emptyInterface))([new Go$String("#main")])), new jquery.JQuery.Ptr(_struct$2.o, _struct$2.Jquery, _struct$2.Selector, _struct$2.Length, _struct$2.Context));
		footerJQuery = (_struct$3 = todoAppJQuery.Find(new (go$sliceType(go$emptyInterface))([new Go$String("#footer")])), new jquery.JQuery.Ptr(_struct$3.o, _struct$3.Jquery, _struct$3.Selector, _struct$3.Length, _struct$3.Context));
		newTodoJQuery = (_struct$4 = headerJQuery.Find(new (go$sliceType(go$emptyInterface))([new Go$String("#new-todo")])), new jquery.JQuery.Ptr(_struct$4.o, _struct$4.Jquery, _struct$4.Selector, _struct$4.Length, _struct$4.Context));
		toggleAllJQuery = (_struct$5 = mainJQuery.Find(new (go$sliceType(go$emptyInterface))([new Go$String("#toggle-all")])), new jquery.JQuery.Ptr(_struct$5.o, _struct$5.Jquery, _struct$5.Selector, _struct$5.Length, _struct$5.Context));
		todoListJQuery = (_struct$6 = mainJQuery.Find(new (go$sliceType(go$emptyInterface))([new Go$String("#todo-list")])), new jquery.JQuery.Ptr(_struct$6.o, _struct$6.Jquery, _struct$6.Selector, _struct$6.Length, _struct$6.Context));
		countJQuery = (_struct$7 = footerJQuery.Find(new (go$sliceType(go$emptyInterface))([new Go$String("#todo-count")])), new jquery.JQuery.Ptr(_struct$7.o, _struct$7.Jquery, _struct$7.Selector, _struct$7.Length, _struct$7.Context));
		clearBtnJQuery = (_struct$8 = footerJQuery.Find(new (go$sliceType(go$emptyInterface))([new Go$String("#clear-completed")])), new jquery.JQuery.Ptr(_struct$8.o, _struct$8.Jquery, _struct$8.Selector, _struct$8.Length, _struct$8.Context));
		filter = "all";
		return new App.Ptr(somethingToDo, todoTmpl, footerTmpl, (_struct$9 = todoAppJQuery, new jquery.JQuery.Ptr(_struct$9.o, _struct$9.Jquery, _struct$9.Selector, _struct$9.Length, _struct$9.Context)), (_struct$10 = headerJQuery, new jquery.JQuery.Ptr(_struct$10.o, _struct$10.Jquery, _struct$10.Selector, _struct$10.Length, _struct$10.Context)), (_struct$11 = mainJQuery, new jquery.JQuery.Ptr(_struct$11.o, _struct$11.Jquery, _struct$11.Selector, _struct$11.Length, _struct$11.Context)), (_struct$12 = footerJQuery, new jquery.JQuery.Ptr(_struct$12.o, _struct$12.Jquery, _struct$12.Selector, _struct$12.Length, _struct$12.Context)), (_struct$13 = newTodoJQuery, new jquery.JQuery.Ptr(_struct$13.o, _struct$13.Jquery, _struct$13.Selector, _struct$13.Length, _struct$13.Context)), (_struct$14 = toggleAllJQuery, new jquery.JQuery.Ptr(_struct$14.o, _struct$14.Jquery, _struct$14.Selector, _struct$14.Length, _struct$14.Context)), (_struct$15 = todoListJQuery, new jquery.JQuery.Ptr(_struct$15.o, _struct$15.Jquery, _struct$15.Selector, _struct$15.Length, _struct$15.Context)), (_struct$16 = countJQuery, new jquery.JQuery.Ptr(_struct$16.o, _struct$16.Jquery, _struct$16.Selector, _struct$16.Length, _struct$16.Context)), (_struct$17 = clearBtnJQuery, new jquery.JQuery.Ptr(_struct$17.o, _struct$17.Jquery, _struct$17.Selector, _struct$17.Length, _struct$17.Context)), filter);
	};
	App.Ptr.prototype.bindEvents = function() {
		var a, e, _recv, e$1, _recv$1, e$2, _recv$2, e$3, _recv$3, e$4, _recv$4, e$5, _recv$5, e$6, _recv$6, e$7, _recv$7;
		a = this;
		a.newTodoJQuery.On(new (go$sliceType(go$emptyInterface))([new Go$String("keyup"), new (go$funcType([jquery.Event], [], false))((_recv = a, function(e) { return _recv.create(e); }))]));
		a.toggleAllJQuery.On(new (go$sliceType(go$emptyInterface))([new Go$String("change"), new (go$funcType([jquery.Event], [], false))((_recv$1 = a, function(e$1) { return _recv$1.toggleAll(e$1); }))]));
		a.footerJQuery.On(new (go$sliceType(go$emptyInterface))([new Go$String("click"), new Go$String("#clear-completed"), new (go$funcType([jquery.Event], [], false))((_recv$2 = a, function(e$2) { return _recv$2.destroyCompleted(e$2); }))]));
		a.todoListJQuery.On(new (go$sliceType(go$emptyInterface))([new Go$String("change"), new Go$String(".toggle"), new (go$funcType([jquery.Event], [], false))((_recv$3 = a, function(e$3) { return _recv$3.toggle(e$3); }))]));
		a.todoListJQuery.On(new (go$sliceType(go$emptyInterface))([new Go$String("dblclick"), new Go$String("label"), new (go$funcType([jquery.Event], [], false))((_recv$4 = a, function(e$4) { return _recv$4.edit(e$4); }))]));
		a.todoListJQuery.On(new (go$sliceType(go$emptyInterface))([new Go$String("keyup"), new Go$String(".edit"), new (go$funcType([jquery.Event], [], false))((_recv$5 = a, function(e$5) { return _recv$5.blurOnEnter(e$5); }))]));
		a.todoListJQuery.On(new (go$sliceType(go$emptyInterface))([new Go$String("focusout"), new Go$String(".edit"), new (go$funcType([jquery.Event], [], false))((_recv$6 = a, function(e$6) { return _recv$6.update(e$6); }))]));
		a.todoListJQuery.On(new (go$sliceType(go$emptyInterface))([new Go$String("click"), new Go$String(".destroy"), new (go$funcType([jquery.Event], [], false))((_recv$7 = a, function(e$7) { return _recv$7.destroy(e$7); }))]));
	};
	App.prototype.bindEvents = function() { return this.go$val.bindEvents(); };
	App.Ptr.prototype.initRouter = function() {
		var a, _struct, router;
		a = this;
		router = (_struct = utils.NewRouter(), new utils.Router.Ptr(_struct.Object));
		router.On("/:filter", (function(filter) {
			a.filter = filter;
			a.render();
		}));
		router.Init("/all");
	};
	App.prototype.initRouter = function() { return this.go$val.initRouter(); };
	App.Ptr.prototype.render = function() {
		var a, todos, b, strtodoTmpl;
		a = this;
		todos = a.getFilteredTodos();
		b = new bytes.Buffer.Ptr();
		a.todoTmpl.Execute(b, todos);
		strtodoTmpl = b.String();
		a.todoListJQuery.SetHtml(new Go$String(strtodoTmpl));
		a.mainJQuery.Toggle(a.todos.length > 0);
		a.toggleAllJQuery.SetProp(new (go$sliceType(go$emptyInterface))([new Go$String("checked"), new Go$Bool(!((a.getActiveTodos().length === 0)))]));
		a.renderfooter();
		a.newTodoJQuery.Focus();
		utils.Store("TodoMVC4GopherJS", a.todos);
	};
	App.prototype.render = function() { return this.go$val.render(); };
	App.Ptr.prototype.renderfooter = function() {
		var a, activeTodoCount, activeTodoWord, completedTodos, filter, footerData, b, footerJQueryStr;
		a = this;
		activeTodoCount = a.getActiveTodos().length;
		activeTodoWord = utils.Pluralize(activeTodoCount, "item");
		completedTodos = a.todos.length - activeTodoCount >> 0;
		filter = a.filter;
		footerData = new (go$structType([["ActiveTodoCount", "ActiveTodoCount", "", Go$Int, ""], ["ActiveTodoWord", "ActiveTodoWord", "", Go$String, ""], ["CompletedTodos", "CompletedTodos", "", Go$Int, ""], ["Filter", "Filter", "", Go$String, ""]])).Ptr(activeTodoCount, activeTodoWord, completedTodos, filter);
		b = new bytes.Buffer.Ptr();
		a.footerTmpl.Execute(b, new footerData.constructor.Struct(footerData));
		footerJQueryStr = b.String();
		a.footerJQuery.Toggle(a.todos.length > 0).SetHtml(new Go$String(footerJQueryStr));
	};
	App.prototype.renderfooter = function() { return this.go$val.renderfooter(); };
	App.Ptr.prototype.toggleAll = function(e) {
		var a, x, checked, _ref, _i, idx, _slice, _index;
		a = this;
		checked = !(x = a.toggleAllJQuery.Prop("checked"), (x !== null && x.constructor === Go$Bool ? x.go$val : go$typeAssertionFailed(x, Go$Bool)));
		_ref = a.todos;
		_i = 0;
		while (_i < _ref.length) {
			idx = _i;
			(_slice = a.todos, _index = idx, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Completed = checked;
			_i++;
		}
		a.render();
	};
	App.prototype.toggleAll = function(e) { return this.go$val.toggleAll(e); };
	App.Ptr.prototype.getActiveTodos = function() {
		var a, todosTmp, _ref, _i, _slice, _index, _struct, val, _struct$1;
		a = this;
		todosTmp = (go$sliceType(ToDo)).make(0, 0, function() { return new ToDo.Ptr(); });
		_ref = a.todos;
		_i = 0;
		while (_i < _ref.length) {
			val = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new ToDo.Ptr(_struct.Id, _struct.Text, _struct.Completed));
			if (!val.Completed) {
				todosTmp = go$append(todosTmp, (_struct$1 = val, new ToDo.Ptr(_struct$1.Id, _struct$1.Text, _struct$1.Completed)));
			}
			_i++;
		}
		return todosTmp;
	};
	App.prototype.getActiveTodos = function() { return this.go$val.getActiveTodos(); };
	App.Ptr.prototype.getCompletedTodos = function() {
		var a, todosTmp, _ref, _i, _slice, _index, _struct, val, _struct$1;
		a = this;
		todosTmp = (go$sliceType(ToDo)).make(0, 0, function() { return new ToDo.Ptr(); });
		_ref = a.todos;
		_i = 0;
		while (_i < _ref.length) {
			val = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new ToDo.Ptr(_struct.Id, _struct.Text, _struct.Completed));
			if (val.Completed) {
				todosTmp = go$append(todosTmp, (_struct$1 = val, new ToDo.Ptr(_struct$1.Id, _struct$1.Text, _struct$1.Completed)));
			}
			_i++;
		}
		return todosTmp;
	};
	App.prototype.getCompletedTodos = function() { return this.go$val.getCompletedTodos(); };
	App.Ptr.prototype.getFilteredTodos = function() {
		var a, _ref;
		a = this;
		_ref = a.filter;
		if (_ref === "active") {
			return a.getActiveTodos();
		} else if (_ref === "completed") {
			return a.getCompletedTodos();
		} else {
			return a.todos;
		}
	};
	App.prototype.getFilteredTodos = function() { return this.go$val.getFilteredTodos(); };
	App.Ptr.prototype.destroyCompleted = function(e) {
		var a;
		a = this;
		a.todos = a.getActiveTodos();
		a.filter = "all";
		a.render();
	};
	App.prototype.destroyCompleted = function(e) { return this.go$val.destroyCompleted(e); };
	App.Ptr.prototype.indexFromEl = function(e) {
		var a, id, _ref, _i, _slice, _index, _struct, val, idx;
		a = this;
		id = jQuery(new (go$sliceType(go$emptyInterface))([e.Object.target])).Closest(new (go$sliceType(go$emptyInterface))([new Go$String("li")])).Data("id");
		_ref = a.todos;
		_i = 0;
		while (_i < _ref.length) {
			val = (_struct = (_slice = _ref, _index = _i, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")), new ToDo.Ptr(_struct.Id, _struct.Text, _struct.Completed));
			idx = _i;
			if (go$interfaceIsEqual(new Go$String(val.Id), id)) {
				return idx;
			}
			_i++;
		}
		return -1;
	};
	App.prototype.indexFromEl = function(e) { return this.go$val.indexFromEl(e); };
	App.Ptr.prototype.create = function(e) {
		var a, val, newToDo, _struct;
		a = this;
		val = jquery.Trim(a.newTodoJQuery.Val());
		if ((val.length === 0) || !(((go$parseInt(e.Object.keyCode) >> 0) === 13))) {
			return;
		}
		newToDo = new ToDo.Ptr(utils.Uuid(), val, false);
		a.todos = go$append(a.todos, (_struct = newToDo, new ToDo.Ptr(_struct.Id, _struct.Text, _struct.Completed)));
		a.newTodoJQuery.SetVal(new Go$String(""));
		a.render();
	};
	App.prototype.create = function(e) { return this.go$val.create(e); };
	App.Ptr.prototype.toggle = function(e) {
		var a, _struct, idx, _slice, _index, _slice$1, _index$1;
		a = this;
		idx = a.indexFromEl((_struct = e, new jquery.Event.Ptr(_struct.Object, _struct.KeyCode, _struct.Target, _struct.CurrentTarget, _struct.DelegateTarget, _struct.RelatedTarget, _struct.Data, _struct.Result, _struct.Which, _struct.Namespace, _struct.MetaKey, _struct.PageX, _struct.PageY, _struct.Type)));
		(_slice$1 = a.todos, _index$1 = idx, (_index$1 >= 0 && _index$1 < _slice$1.length) ? _slice$1.array[_slice$1.offset + _index$1] : go$throwRuntimeError("index out of range")).Completed = !(_slice = a.todos, _index = idx, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Completed;
		a.render();
	};
	App.prototype.toggle = function(e) { return this.go$val.toggle(e); };
	App.Ptr.prototype.edit = function(e) {
		var a, _struct, input;
		a = this;
		input = (_struct = jQuery(new (go$sliceType(go$emptyInterface))([e.Object.target])).Closest(new (go$sliceType(go$emptyInterface))([new Go$String("li")])).AddClass(new Go$String("editing")).Find(new (go$sliceType(go$emptyInterface))([new Go$String(".edit")])), new jquery.JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		input.SetVal(new Go$String(input.Val())).Focus();
	};
	App.prototype.edit = function(e) { return this.go$val.edit(e); };
	App.Ptr.prototype.blurOnEnter = function(e) {
		var a, _ref;
		a = this;
		_ref = go$parseInt(e.Object.keyCode) >> 0;
		if (_ref === 13) {
			jQuery(new (go$sliceType(go$emptyInterface))([e.Object.target])).Blur();
		} else if (_ref === 27) {
			jQuery(new (go$sliceType(go$emptyInterface))([e.Object.target])).SetData("abort", new Go$String("true")).Blur();
		}
	};
	App.prototype.blurOnEnter = function(e) { return this.go$val.blurOnEnter(e); };
	App.Ptr.prototype.update = function(e) {
		var a, _struct, thisJQuery, val, _struct$1, idx, _slice, _index;
		a = this;
		thisJQuery = (_struct = jQuery(new (go$sliceType(go$emptyInterface))([e.Object.target])), new jquery.JQuery.Ptr(_struct.o, _struct.Jquery, _struct.Selector, _struct.Length, _struct.Context));
		val = jquery.Trim(thisJQuery.Val());
		if (go$interfaceIsEqual(thisJQuery.Data("abort"), new Go$String("true"))) {
			thisJQuery.SetData("abort", new Go$String("false"));
			a.render();
			return;
		}
		idx = a.indexFromEl((_struct$1 = e, new jquery.Event.Ptr(_struct$1.Object, _struct$1.KeyCode, _struct$1.Target, _struct$1.CurrentTarget, _struct$1.DelegateTarget, _struct$1.RelatedTarget, _struct$1.Data, _struct$1.Result, _struct$1.Which, _struct$1.Namespace, _struct$1.MetaKey, _struct$1.PageX, _struct$1.PageY, _struct$1.Type)));
		if (val.length > 0) {
			(_slice = a.todos, _index = idx, (_index >= 0 && _index < _slice.length) ? _slice.array[_slice.offset + _index] : go$throwRuntimeError("index out of range")).Text = val;
		} else {
			a.todos = go$appendSlice(go$subslice(a.todos, 0, idx), go$subslice(a.todos, (idx + 1 >> 0)));
		}
		a.render();
	};
	App.prototype.update = function(e) { return this.go$val.update(e); };
	App.Ptr.prototype.destroy = function(e) {
		var a, _struct, idx;
		a = this;
		idx = a.indexFromEl((_struct = e, new jquery.Event.Ptr(_struct.Object, _struct.KeyCode, _struct.Target, _struct.CurrentTarget, _struct.DelegateTarget, _struct.RelatedTarget, _struct.Data, _struct.Result, _struct.Which, _struct.Namespace, _struct.MetaKey, _struct.PageX, _struct.PageY, _struct.Type)));
		a.todos = go$appendSlice(go$subslice(a.todos, 0, idx), go$subslice(a.todos, (idx + 1 >> 0)));
		a.render();
	};
	App.prototype.destroy = function(e) { return this.go$val.destroy(e); };
	go$pkg.init = function() {
		ToDo.init([["Id", "Id", "", Go$String, ""], ["Text", "Text", "", Go$String, ""], ["Completed", "Completed", "", Go$Bool, ""]]);
		(go$ptrType(App)).methods = [["bindEvents", "main", [], [], false, -1], ["blurOnEnter", "main", [jquery.Event], [], false, -1], ["create", "main", [jquery.Event], [], false, -1], ["destroy", "main", [jquery.Event], [], false, -1], ["destroyCompleted", "main", [jquery.Event], [], false, -1], ["edit", "main", [jquery.Event], [], false, -1], ["getActiveTodos", "main", [], [(go$sliceType(ToDo))], false, -1], ["getCompletedTodos", "main", [], [(go$sliceType(ToDo))], false, -1], ["getFilteredTodos", "main", [], [(go$sliceType(ToDo))], false, -1], ["indexFromEl", "main", [jquery.Event], [Go$Int], false, -1], ["initRouter", "main", [], [], false, -1], ["render", "main", [], [], false, -1], ["renderfooter", "main", [], [], false, -1], ["toggle", "main", [jquery.Event], [], false, -1], ["toggleAll", "main", [jquery.Event], [], false, -1], ["update", "main", [jquery.Event], [], false, -1]];
		App.init([["todos", "todos", "main", (go$sliceType(ToDo)), ""], ["todoTmpl", "todoTmpl", "main", (go$ptrType(template.Template)), ""], ["footerTmpl", "footerTmpl", "main", (go$ptrType(template.Template)), ""], ["todoAppJQuery", "todoAppJQuery", "main", jquery.JQuery, ""], ["headerJQuery", "headerJQuery", "main", jquery.JQuery, ""], ["mainJQuery", "mainJQuery", "main", jquery.JQuery, ""], ["footerJQuery", "footerJQuery", "main", jquery.JQuery, ""], ["newTodoJQuery", "newTodoJQuery", "main", jquery.JQuery, ""], ["toggleAllJQuery", "toggleAllJQuery", "main", jquery.JQuery, ""], ["todoListJQuery", "todoListJQuery", "main", jquery.JQuery, ""], ["countJQuery", "countJQuery", "main", jquery.JQuery, ""], ["clearBtnJQuery", "clearBtnJQuery", "main", jquery.JQuery, ""], ["filter", "filter", "main", Go$String, ""]]);
		jQuery = jquery.NewJQuery;
	}
	return go$pkg;
})();
go$error.implementedBy = [go$packages["encoding/base64"].CorruptInputError, go$packages["encoding/json"].InvalidUnmarshalError.Ptr, go$packages["encoding/json"].MarshalerError.Ptr, go$packages["encoding/json"].SyntaxError.Ptr, go$packages["encoding/json"].UnmarshalTypeError.Ptr, go$packages["encoding/json"].UnsupportedTypeError.Ptr, go$packages["encoding/json"].UnsupportedValueError.Ptr, go$packages["errors"].errorString.Ptr, go$packages["github.com/gopherjs/gopherjs/js"].Error.Ptr, go$packages["html/template"].Error.Ptr, go$packages["os"].PathError.Ptr, go$packages["os"].SyscallError.Ptr, go$packages["reflect"].ValueError.Ptr, go$packages["runtime"].TypeAssertionError.Ptr, go$packages["runtime"].errorString, go$packages["strconv"].NumError.Ptr, go$packages["syscall"].DLLError.Ptr, go$packages["syscall"].Errno, go$packages["time"].ParseError.Ptr, go$ptrType(go$packages["encoding/base64"].CorruptInputError), go$ptrType(go$packages["runtime"].errorString), go$ptrType(go$packages["syscall"].Errno)];
go$packages["runtime"].Error.implementedBy = [go$packages["runtime"].TypeAssertionError.Ptr, go$packages["runtime"].errorString, go$ptrType(go$packages["runtime"].errorString)];
go$packages["sync"].Locker.implementedBy = [go$packages["os"].fileStat.Ptr, go$packages["sync"].Mutex.Ptr, go$packages["sync"].RWMutex.Ptr, go$packages["sync"].rlocker.Ptr];
go$packages["io"].Reader.implementedBy = [go$packages["bytes"].Buffer.Ptr, go$packages["encoding/json"].encodeState.Ptr, go$packages["fmt"].ss.Ptr, go$packages["os"].File.Ptr, go$ptrType(go$packages["fmt"].stringReader)];
go$packages["io"].RuneReader.implementedBy = [go$packages["bytes"].Buffer.Ptr, go$packages["encoding/json"].encodeState.Ptr, go$packages["fmt"].readRune.Ptr, go$packages["fmt"].ss.Ptr];
go$packages["io"].Writer.implementedBy = [go$packages["bytes"].Buffer.Ptr, go$packages["encoding/base64"].encoder.Ptr, go$packages["encoding/json"].encodeState.Ptr, go$packages["fmt"].pp.Ptr, go$packages["os"].File.Ptr, go$ptrType(go$packages["fmt"].buffer)];
go$packages["github.com/gopherjs/gopherjs/js"].Object.implementedBy = [go$packages["github.com/gopherjs/gopherjs/js"].Error, go$packages["github.com/gopherjs/gopherjs/js"].Error.Ptr, go$packages["github.com/gopherjs/jquery"].Event, go$packages["github.com/gopherjs/jquery"].Event.Ptr, go$packages["github.com/gopherjs/todomvc/utils"].Router, go$packages["github.com/gopherjs/todomvc/utils"].Router.Ptr];
go$packages["encoding"].TextMarshaler.implementedBy = [go$packages["time"].Time, go$packages["time"].Time.Ptr];
go$packages["encoding"].TextUnmarshaler.implementedBy = [go$packages["time"].Time.Ptr];
go$packages["os"].FileInfo.implementedBy = [go$packages["os"].fileStat.Ptr];
go$packages["reflect"].Type.implementedBy = [go$packages["reflect"].arrayType.Ptr, go$packages["reflect"].chanType.Ptr, go$packages["reflect"].funcType.Ptr, go$packages["reflect"].interfaceType.Ptr, go$packages["reflect"].mapType.Ptr, go$packages["reflect"].ptrType.Ptr, go$packages["reflect"].rtype.Ptr, go$packages["reflect"].sliceType.Ptr, go$packages["reflect"].structType.Ptr];
go$packages["fmt"].Formatter.implementedBy = [];
go$packages["fmt"].GoStringer.implementedBy = [];
go$packages["fmt"].ScanState.implementedBy = [go$packages["fmt"].ss.Ptr];
go$packages["fmt"].Scanner.implementedBy = [];
go$packages["fmt"].State.implementedBy = [go$packages["fmt"].pp.Ptr];
go$packages["fmt"].Stringer.implementedBy = [go$packages["bytes"].Buffer.Ptr, go$packages["encoding/json"].Number, go$packages["encoding/json"].encodeState.Ptr, go$packages["html/template"].attr, go$packages["html/template"].context, go$packages["html/template"].context.Ptr, go$packages["html/template"].delim, go$packages["html/template"].element, go$packages["html/template"].jsCtx, go$packages["html/template"].state, go$packages["html/template"].urlPart, go$packages["os"].FileMode, go$packages["reflect"].ChanDir, go$packages["reflect"].Kind, go$packages["reflect"].Value, go$packages["reflect"].Value.Ptr, go$packages["reflect"].arrayType.Ptr, go$packages["reflect"].chanType.Ptr, go$packages["reflect"].funcType.Ptr, go$packages["reflect"].interfaceType.Ptr, go$packages["reflect"].mapType.Ptr, go$packages["reflect"].ptrType.Ptr, go$packages["reflect"].rtype.Ptr, go$packages["reflect"].sliceType.Ptr, go$packages["reflect"].structType.Ptr, go$packages["strconv"].decimal.Ptr, go$packages["text/template/parse"].ActionNode.Ptr, go$packages["text/template/parse"].BoolNode.Ptr, go$packages["text/template/parse"].BranchNode.Ptr, go$packages["text/template/parse"].ChainNode.Ptr, go$packages["text/template/parse"].CommandNode.Ptr, go$packages["text/template/parse"].DotNode.Ptr, go$packages["text/template/parse"].FieldNode.Ptr, go$packages["text/template/parse"].IdentifierNode.Ptr, go$packages["text/template/parse"].IfNode.Ptr, go$packages["text/template/parse"].ListNode.Ptr, go$packages["text/template/parse"].NilNode.Ptr, go$packages["text/template/parse"].NumberNode.Ptr, go$packages["text/template/parse"].PipeNode.Ptr, go$packages["text/template/parse"].RangeNode.Ptr, go$packages["text/template/parse"].StringNode.Ptr, go$packages["text/template/parse"].TemplateNode.Ptr, go$packages["text/template/parse"].TextNode.Ptr, go$packages["text/template/parse"].VariableNode.Ptr, go$packages["text/template/parse"].WithNode.Ptr, go$packages["text/template/parse"].elseNode.Ptr, go$packages["text/template/parse"].endNode.Ptr, go$packages["text/template/parse"].item, go$packages["text/template/parse"].item.Ptr, go$packages["time"].Duration, go$packages["time"].Location.Ptr, go$packages["time"].Month, go$packages["time"].Time, go$packages["time"].Time.Ptr, go$packages["time"].Weekday, go$ptrType(go$packages["encoding/json"].Number), go$ptrType(go$packages["html/template"].attr), go$ptrType(go$packages["html/template"].delim), go$ptrType(go$packages["html/template"].element), go$ptrType(go$packages["html/template"].jsCtx), go$ptrType(go$packages["html/template"].state), go$ptrType(go$packages["html/template"].urlPart), go$ptrType(go$packages["os"].FileMode), go$ptrType(go$packages["reflect"].ChanDir), go$ptrType(go$packages["reflect"].Kind), go$ptrType(go$packages["time"].Duration), go$ptrType(go$packages["time"].Month), go$ptrType(go$packages["time"].Weekday)];
go$packages["fmt"].runeUnreader.implementedBy = [go$packages["bytes"].Buffer.Ptr, go$packages["encoding/json"].encodeState.Ptr, go$packages["fmt"].ss.Ptr];
go$packages["encoding/json"].Marshaler.implementedBy = [go$packages["time"].Time, go$packages["time"].Time.Ptr];
go$packages["encoding/json"].Unmarshaler.implementedBy = [go$packages["time"].Time.Ptr];
go$packages["math/rand"].Source.implementedBy = [go$packages["math/rand"].Rand.Ptr, go$packages["math/rand"].lockedSource.Ptr, go$packages["math/rand"].rngSource.Ptr];
go$packages["text/template/parse"].Node.implementedBy = [go$packages["text/template/parse"].ActionNode.Ptr, go$packages["text/template/parse"].BoolNode.Ptr, go$packages["text/template/parse"].ChainNode.Ptr, go$packages["text/template/parse"].CommandNode.Ptr, go$packages["text/template/parse"].DotNode.Ptr, go$packages["text/template/parse"].FieldNode.Ptr, go$packages["text/template/parse"].IdentifierNode.Ptr, go$packages["text/template/parse"].IfNode.Ptr, go$packages["text/template/parse"].ListNode.Ptr, go$packages["text/template/parse"].NilNode.Ptr, go$packages["text/template/parse"].NumberNode.Ptr, go$packages["text/template/parse"].PipeNode.Ptr, go$packages["text/template/parse"].RangeNode.Ptr, go$packages["text/template/parse"].StringNode.Ptr, go$packages["text/template/parse"].TemplateNode.Ptr, go$packages["text/template/parse"].TextNode.Ptr, go$packages["text/template/parse"].VariableNode.Ptr, go$packages["text/template/parse"].WithNode.Ptr, go$packages["text/template/parse"].elseNode.Ptr, go$packages["text/template/parse"].endNode.Ptr];
go$packages["runtime"].init();
go$packages["errors"].init();
go$packages["sync/atomic"].init();
go$packages["sync"].init();
go$packages["io"].init();
go$packages["unicode"].init();
go$packages["unicode/utf8"].init();
go$packages["bytes"].init();
go$packages["github.com/gopherjs/gopherjs/js"].init();
go$packages["github.com/gopherjs/jquery"].init();
go$packages["encoding"].init();
go$packages["math"].init();
go$packages["strconv"].init();
go$packages["strings"].init();
go$packages["encoding/base64"].init();
go$packages["unicode/utf16"].init();
go$packages["syscall"].init();
go$packages["time"].init();
go$packages["os"].init();
go$packages["reflect"].init();
go$packages["fmt"].init();
go$packages["sort"].init();
go$packages["encoding/json"].init();
go$packages["math/rand"].init();
go$packages["github.com/gopherjs/todomvc/utils"].init();
go$packages["html"].init();
go$packages["path/filepath"].init();
go$packages["io/ioutil"].init();
go$packages["net/url"].init();
go$packages["container/list"].init();
go$packages["text/template/parse"].init();
go$packages["text/template"].init();
go$packages["html/template"].init();
go$packages["main"].init();
go$packages["main"].main();

})();
//# sourceMappingURL=app.js.map
